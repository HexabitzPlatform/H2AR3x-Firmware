
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017464  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033c0  08017520  08017520  00027520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8e0  0801a8e0  00030294  2**0
                  CONTENTS
  4 .ARM          00000000  0801a8e0  0801a8e0  00030294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a8e0  0801a8e0  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8e0  0801a8e0  0002a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8e4  0801a8e4  0002a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801a8e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000288  2000000c  0801a8f4  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000650c  20000298  0801ab7c  00030298  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200067a4  0801ab7c  000367a4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005559e  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000852c  00000000  00000000  0008585a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001aa54  00000000  00000000  0008dd86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001d48  00000000  00000000  000a87e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002088  00000000  00000000  000aa528  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001b334  00000000  00000000  000ac5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000262a8  00000000  00000000  000c78e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0008385d  00000000  00000000  000edb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001713e9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006290  00000000  00000000  00171464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000298 	.word	0x20000298
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017508 	.word	0x08017508

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000029c 	.word	0x2000029c
 8000100:	08017508 	.word	0x08017508

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fd41 	bl	8001ec0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc99 	bl	8001d80 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd33 	bl	8001ec0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd29 	bl	8001ec0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcbb 	bl	8001df8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fcb1 	bl	8001df8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 faa3 	bl	80009f8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa25 	bl	800090c <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fa95 	bl	80009f8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa8b 	bl	80009f8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa33 	bl	800095c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa29 	bl	800095c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fd81 	bl	8001084 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fbb7 	bl	8000cfc <__aeabi_fsub>
 800058e:	f000 fd79 	bl	8001084 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 fac3 	bl	8002b3c <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 ff58 	bl	8002474 <__aeabi_dsub>
 80005c4:	f002 faba 	bl	8002b3c <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_fadd>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	4647      	mov	r7, r8
 80005dc:	46ce      	mov	lr, r9
 80005de:	0243      	lsls	r3, r0, #9
 80005e0:	0a5b      	lsrs	r3, r3, #9
 80005e2:	0044      	lsls	r4, r0, #1
 80005e4:	0fc2      	lsrs	r2, r0, #31
 80005e6:	469c      	mov	ip, r3
 80005e8:	0048      	lsls	r0, r1, #1
 80005ea:	00dd      	lsls	r5, r3, #3
 80005ec:	024b      	lsls	r3, r1, #9
 80005ee:	0e24      	lsrs	r4, r4, #24
 80005f0:	0a5b      	lsrs	r3, r3, #9
 80005f2:	0e00      	lsrs	r0, r0, #24
 80005f4:	b580      	push	{r7, lr}
 80005f6:	4698      	mov	r8, r3
 80005f8:	0026      	movs	r6, r4
 80005fa:	4691      	mov	r9, r2
 80005fc:	0fc9      	lsrs	r1, r1, #31
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	1a27      	subs	r7, r4, r0
 8000602:	428a      	cmp	r2, r1
 8000604:	d029      	beq.n	800065a <__aeabi_fadd+0x82>
 8000606:	2f00      	cmp	r7, #0
 8000608:	dd15      	ble.n	8000636 <__aeabi_fadd+0x5e>
 800060a:	2800      	cmp	r0, #0
 800060c:	d14a      	bne.n	80006a4 <__aeabi_fadd+0xcc>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d000      	beq.n	8000614 <__aeabi_fadd+0x3c>
 8000612:	e095      	b.n	8000740 <__aeabi_fadd+0x168>
 8000614:	08ed      	lsrs	r5, r5, #3
 8000616:	2cff      	cmp	r4, #255	; 0xff
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x44>
 800061a:	e088      	b.n	800072e <__aeabi_fadd+0x156>
 800061c:	026b      	lsls	r3, r5, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	b2e6      	uxtb	r6, r4
 8000622:	025b      	lsls	r3, r3, #9
 8000624:	05f6      	lsls	r6, r6, #23
 8000626:	0a58      	lsrs	r0, r3, #9
 8000628:	4330      	orrs	r0, r6
 800062a:	07d2      	lsls	r2, r2, #31
 800062c:	4310      	orrs	r0, r2
 800062e:	bc0c      	pop	{r2, r3}
 8000630:	4690      	mov	r8, r2
 8000632:	4699      	mov	r9, r3
 8000634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000636:	2f00      	cmp	r7, #0
 8000638:	d000      	beq.n	800063c <__aeabi_fadd+0x64>
 800063a:	e087      	b.n	800074c <__aeabi_fadd+0x174>
 800063c:	1c60      	adds	r0, r4, #1
 800063e:	b2c0      	uxtb	r0, r0
 8000640:	2801      	cmp	r0, #1
 8000642:	dc00      	bgt.n	8000646 <__aeabi_fadd+0x6e>
 8000644:	e0b6      	b.n	80007b4 <__aeabi_fadd+0x1dc>
 8000646:	1aee      	subs	r6, r5, r3
 8000648:	0172      	lsls	r2, r6, #5
 800064a:	d500      	bpl.n	800064e <__aeabi_fadd+0x76>
 800064c:	e0c5      	b.n	80007da <__aeabi_fadd+0x202>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d13d      	bne.n	80006ce <__aeabi_fadd+0xf6>
 8000652:	2200      	movs	r2, #0
 8000654:	2600      	movs	r6, #0
 8000656:	2300      	movs	r3, #0
 8000658:	e7e3      	b.n	8000622 <__aeabi_fadd+0x4a>
 800065a:	2f00      	cmp	r7, #0
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0x88>
 800065e:	e096      	b.n	800078e <__aeabi_fadd+0x1b6>
 8000660:	2800      	cmp	r0, #0
 8000662:	d05d      	beq.n	8000720 <__aeabi_fadd+0x148>
 8000664:	2cff      	cmp	r4, #255	; 0xff
 8000666:	d060      	beq.n	800072a <__aeabi_fadd+0x152>
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	04d2      	lsls	r2, r2, #19
 800066c:	4313      	orrs	r3, r2
 800066e:	2f1b      	cmp	r7, #27
 8000670:	dd00      	ble.n	8000674 <__aeabi_fadd+0x9c>
 8000672:	e0ec      	b.n	800084e <__aeabi_fadd+0x276>
 8000674:	2220      	movs	r2, #32
 8000676:	1bd2      	subs	r2, r2, r7
 8000678:	0018      	movs	r0, r3
 800067a:	4093      	lsls	r3, r2
 800067c:	40f8      	lsrs	r0, r7
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	4193      	sbcs	r3, r2
 8000682:	4303      	orrs	r3, r0
 8000684:	18ed      	adds	r5, r5, r3
 8000686:	016b      	lsls	r3, r5, #5
 8000688:	d57b      	bpl.n	8000782 <__aeabi_fadd+0x1aa>
 800068a:	3401      	adds	r4, #1
 800068c:	2cff      	cmp	r4, #255	; 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0xba>
 8000690:	e0b7      	b.n	8000802 <__aeabi_fadd+0x22a>
 8000692:	2201      	movs	r2, #1
 8000694:	2607      	movs	r6, #7
 8000696:	402a      	ands	r2, r5
 8000698:	086b      	lsrs	r3, r5, #1
 800069a:	4d9a      	ldr	r5, [pc, #616]	; (8000904 <__aeabi_fadd+0x32c>)
 800069c:	401d      	ands	r5, r3
 800069e:	4315      	orrs	r5, r2
 80006a0:	402e      	ands	r6, r5
 80006a2:	e029      	b.n	80006f8 <__aeabi_fadd+0x120>
 80006a4:	2cff      	cmp	r4, #255	; 0xff
 80006a6:	d0b5      	beq.n	8000614 <__aeabi_fadd+0x3c>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	04d2      	lsls	r2, r2, #19
 80006ac:	4313      	orrs	r3, r2
 80006ae:	2f1b      	cmp	r7, #27
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fadd+0xdc>
 80006b2:	e0b2      	b.n	800081a <__aeabi_fadd+0x242>
 80006b4:	2220      	movs	r2, #32
 80006b6:	1bd2      	subs	r2, r2, r7
 80006b8:	0019      	movs	r1, r3
 80006ba:	4093      	lsls	r3, r2
 80006bc:	40f9      	lsrs	r1, r7
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	4193      	sbcs	r3, r2
 80006c2:	430b      	orrs	r3, r1
 80006c4:	1aed      	subs	r5, r5, r3
 80006c6:	016b      	lsls	r3, r5, #5
 80006c8:	d55b      	bpl.n	8000782 <__aeabi_fadd+0x1aa>
 80006ca:	01ad      	lsls	r5, r5, #6
 80006cc:	09ae      	lsrs	r6, r5, #6
 80006ce:	0030      	movs	r0, r6
 80006d0:	f002 fbac 	bl	8002e2c <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4086      	lsls	r6, r0
 80006d8:	4284      	cmp	r4, r0
 80006da:	dc65      	bgt.n	80007a8 <__aeabi_fadd+0x1d0>
 80006dc:	1b04      	subs	r4, r0, r4
 80006de:	0033      	movs	r3, r6
 80006e0:	2020      	movs	r0, #32
 80006e2:	3401      	adds	r4, #1
 80006e4:	40e3      	lsrs	r3, r4
 80006e6:	1b04      	subs	r4, r0, r4
 80006e8:	40a6      	lsls	r6, r4
 80006ea:	1e75      	subs	r5, r6, #1
 80006ec:	41ae      	sbcs	r6, r5
 80006ee:	4333      	orrs	r3, r6
 80006f0:	2607      	movs	r6, #7
 80006f2:	001d      	movs	r5, r3
 80006f4:	2400      	movs	r4, #0
 80006f6:	401e      	ands	r6, r3
 80006f8:	2201      	movs	r2, #1
 80006fa:	464b      	mov	r3, r9
 80006fc:	401a      	ands	r2, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d004      	beq.n	800070c <__aeabi_fadd+0x134>
 8000702:	230f      	movs	r3, #15
 8000704:	402b      	ands	r3, r5
 8000706:	2b04      	cmp	r3, #4
 8000708:	d000      	beq.n	800070c <__aeabi_fadd+0x134>
 800070a:	3504      	adds	r5, #4
 800070c:	016b      	lsls	r3, r5, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x13a>
 8000710:	e780      	b.n	8000614 <__aeabi_fadd+0x3c>
 8000712:	3401      	adds	r4, #1
 8000714:	b2e6      	uxtb	r6, r4
 8000716:	2cff      	cmp	r4, #255	; 0xff
 8000718:	d12f      	bne.n	800077a <__aeabi_fadd+0x1a2>
 800071a:	26ff      	movs	r6, #255	; 0xff
 800071c:	2300      	movs	r3, #0
 800071e:	e780      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d152      	bne.n	80007ca <__aeabi_fadd+0x1f2>
 8000724:	2cff      	cmp	r4, #255	; 0xff
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x152>
 8000728:	e774      	b.n	8000614 <__aeabi_fadd+0x3c>
 800072a:	000a      	movs	r2, r1
 800072c:	08ed      	lsrs	r5, r5, #3
 800072e:	2d00      	cmp	r5, #0
 8000730:	d0f3      	beq.n	800071a <__aeabi_fadd+0x142>
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	03db      	lsls	r3, r3, #15
 8000736:	432b      	orrs	r3, r5
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	26ff      	movs	r6, #255	; 0xff
 800073e:	e770      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000740:	3f01      	subs	r7, #1
 8000742:	2f00      	cmp	r7, #0
 8000744:	d0be      	beq.n	80006c4 <__aeabi_fadd+0xec>
 8000746:	2cff      	cmp	r4, #255	; 0xff
 8000748:	d1b1      	bne.n	80006ae <__aeabi_fadd+0xd6>
 800074a:	e763      	b.n	8000614 <__aeabi_fadd+0x3c>
 800074c:	2c00      	cmp	r4, #0
 800074e:	d047      	beq.n	80007e0 <__aeabi_fadd+0x208>
 8000750:	28ff      	cmp	r0, #255	; 0xff
 8000752:	d069      	beq.n	8000828 <__aeabi_fadd+0x250>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	04e4      	lsls	r4, r4, #19
 8000758:	427a      	negs	r2, r7
 800075a:	4325      	orrs	r5, r4
 800075c:	2a1b      	cmp	r2, #27
 800075e:	dd00      	ble.n	8000762 <__aeabi_fadd+0x18a>
 8000760:	e0c5      	b.n	80008ee <__aeabi_fadd+0x316>
 8000762:	002c      	movs	r4, r5
 8000764:	2620      	movs	r6, #32
 8000766:	40d4      	lsrs	r4, r2
 8000768:	1ab2      	subs	r2, r6, r2
 800076a:	4095      	lsls	r5, r2
 800076c:	1e6a      	subs	r2, r5, #1
 800076e:	4195      	sbcs	r5, r2
 8000770:	4325      	orrs	r5, r4
 8000772:	1b5d      	subs	r5, r3, r5
 8000774:	0004      	movs	r4, r0
 8000776:	4689      	mov	r9, r1
 8000778:	e7a5      	b.n	80006c6 <__aeabi_fadd+0xee>
 800077a:	01ab      	lsls	r3, r5, #6
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	e750      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000780:	2400      	movs	r4, #0
 8000782:	2201      	movs	r2, #1
 8000784:	464b      	mov	r3, r9
 8000786:	401a      	ands	r2, r3
 8000788:	076b      	lsls	r3, r5, #29
 800078a:	d1ba      	bne.n	8000702 <__aeabi_fadd+0x12a>
 800078c:	e742      	b.n	8000614 <__aeabi_fadd+0x3c>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d13b      	bne.n	800080a <__aeabi_fadd+0x232>
 8000792:	3401      	adds	r4, #1
 8000794:	b2e0      	uxtb	r0, r4
 8000796:	2801      	cmp	r0, #1
 8000798:	dd4a      	ble.n	8000830 <__aeabi_fadd+0x258>
 800079a:	2cff      	cmp	r4, #255	; 0xff
 800079c:	d0bd      	beq.n	800071a <__aeabi_fadd+0x142>
 800079e:	2607      	movs	r6, #7
 80007a0:	18ed      	adds	r5, r5, r3
 80007a2:	086d      	lsrs	r5, r5, #1
 80007a4:	402e      	ands	r6, r5
 80007a6:	e7a7      	b.n	80006f8 <__aeabi_fadd+0x120>
 80007a8:	2307      	movs	r3, #7
 80007aa:	4d57      	ldr	r5, [pc, #348]	; (8000908 <__aeabi_fadd+0x330>)
 80007ac:	1a24      	subs	r4, r4, r0
 80007ae:	4035      	ands	r5, r6
 80007b0:	401e      	ands	r6, r3
 80007b2:	e7a1      	b.n	80006f8 <__aeabi_fadd+0x120>
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d11b      	bne.n	80007f0 <__aeabi_fadd+0x218>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d16e      	bne.n	800089a <__aeabi_fadd+0x2c2>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x1ea>
 80007c0:	e09a      	b.n	80008f8 <__aeabi_fadd+0x320>
 80007c2:	000a      	movs	r2, r1
 80007c4:	001d      	movs	r5, r3
 80007c6:	003c      	movs	r4, r7
 80007c8:	e724      	b.n	8000614 <__aeabi_fadd+0x3c>
 80007ca:	3f01      	subs	r7, #1
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x1fa>
 80007d0:	e758      	b.n	8000684 <__aeabi_fadd+0xac>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x200>
 80007d6:	e74a      	b.n	800066e <__aeabi_fadd+0x96>
 80007d8:	e7a7      	b.n	800072a <__aeabi_fadd+0x152>
 80007da:	1b5e      	subs	r6, r3, r5
 80007dc:	4689      	mov	r9, r1
 80007de:	e776      	b.n	80006ce <__aeabi_fadd+0xf6>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d11c      	bne.n	800081e <__aeabi_fadd+0x246>
 80007e4:	000a      	movs	r2, r1
 80007e6:	28ff      	cmp	r0, #255	; 0xff
 80007e8:	d01f      	beq.n	800082a <__aeabi_fadd+0x252>
 80007ea:	0004      	movs	r4, r0
 80007ec:	001d      	movs	r5, r3
 80007ee:	e711      	b.n	8000614 <__aeabi_fadd+0x3c>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d15d      	bne.n	80008b0 <__aeabi_fadd+0x2d8>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d117      	bne.n	8000828 <__aeabi_fadd+0x250>
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	2200      	movs	r2, #0
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	26ff      	movs	r6, #255	; 0xff
 8000800:	e70f      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000802:	000a      	movs	r2, r1
 8000804:	26ff      	movs	r6, #255	; 0xff
 8000806:	2300      	movs	r3, #0
 8000808:	e70b      	b.n	8000622 <__aeabi_fadd+0x4a>
 800080a:	2c00      	cmp	r4, #0
 800080c:	d121      	bne.n	8000852 <__aeabi_fadd+0x27a>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d166      	bne.n	80008e0 <__aeabi_fadd+0x308>
 8000812:	28ff      	cmp	r0, #255	; 0xff
 8000814:	d1e9      	bne.n	80007ea <__aeabi_fadd+0x212>
 8000816:	001d      	movs	r5, r3
 8000818:	e787      	b.n	800072a <__aeabi_fadd+0x152>
 800081a:	2301      	movs	r3, #1
 800081c:	e752      	b.n	80006c4 <__aeabi_fadd+0xec>
 800081e:	1c7a      	adds	r2, r7, #1
 8000820:	d0a7      	beq.n	8000772 <__aeabi_fadd+0x19a>
 8000822:	43fa      	mvns	r2, r7
 8000824:	28ff      	cmp	r0, #255	; 0xff
 8000826:	d199      	bne.n	800075c <__aeabi_fadd+0x184>
 8000828:	000a      	movs	r2, r1
 800082a:	001d      	movs	r5, r3
 800082c:	24ff      	movs	r4, #255	; 0xff
 800082e:	e6f1      	b.n	8000614 <__aeabi_fadd+0x3c>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d121      	bne.n	8000878 <__aeabi_fadd+0x2a0>
 8000834:	2d00      	cmp	r5, #0
 8000836:	d04f      	beq.n	80008d8 <__aeabi_fadd+0x300>
 8000838:	2b00      	cmp	r3, #0
 800083a:	d04c      	beq.n	80008d6 <__aeabi_fadd+0x2fe>
 800083c:	18ed      	adds	r5, r5, r3
 800083e:	016b      	lsls	r3, r5, #5
 8000840:	d59e      	bpl.n	8000780 <__aeabi_fadd+0x1a8>
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <__aeabi_fadd+0x330>)
 8000844:	3607      	adds	r6, #7
 8000846:	402e      	ands	r6, r5
 8000848:	2401      	movs	r4, #1
 800084a:	401d      	ands	r5, r3
 800084c:	e754      	b.n	80006f8 <__aeabi_fadd+0x120>
 800084e:	2301      	movs	r3, #1
 8000850:	e718      	b.n	8000684 <__aeabi_fadd+0xac>
 8000852:	28ff      	cmp	r0, #255	; 0xff
 8000854:	d0df      	beq.n	8000816 <__aeabi_fadd+0x23e>
 8000856:	2480      	movs	r4, #128	; 0x80
 8000858:	04e4      	lsls	r4, r4, #19
 800085a:	427f      	negs	r7, r7
 800085c:	4325      	orrs	r5, r4
 800085e:	2f1b      	cmp	r7, #27
 8000860:	dc4d      	bgt.n	80008fe <__aeabi_fadd+0x326>
 8000862:	2620      	movs	r6, #32
 8000864:	1bf6      	subs	r6, r6, r7
 8000866:	002c      	movs	r4, r5
 8000868:	40b5      	lsls	r5, r6
 800086a:	40fc      	lsrs	r4, r7
 800086c:	1e6a      	subs	r2, r5, #1
 800086e:	4195      	sbcs	r5, r2
 8000870:	4325      	orrs	r5, r4
 8000872:	18ed      	adds	r5, r5, r3
 8000874:	0004      	movs	r4, r0
 8000876:	e706      	b.n	8000686 <__aeabi_fadd+0xae>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d0cc      	beq.n	8000816 <__aeabi_fadd+0x23e>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x2aa>
 8000880:	e753      	b.n	800072a <__aeabi_fadd+0x152>
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	4660      	mov	r0, ip
 8000886:	03c9      	lsls	r1, r1, #15
 8000888:	4208      	tst	r0, r1
 800088a:	d003      	beq.n	8000894 <__aeabi_fadd+0x2bc>
 800088c:	4640      	mov	r0, r8
 800088e:	4208      	tst	r0, r1
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x2bc>
 8000892:	001d      	movs	r5, r3
 8000894:	2101      	movs	r1, #1
 8000896:	4011      	ands	r1, r2
 8000898:	e747      	b.n	800072a <__aeabi_fadd+0x152>
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x2c8>
 800089e:	e6b9      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008a0:	1aea      	subs	r2, r5, r3
 80008a2:	0150      	lsls	r0, r2, #5
 80008a4:	d525      	bpl.n	80008f2 <__aeabi_fadd+0x31a>
 80008a6:	2607      	movs	r6, #7
 80008a8:	1b5d      	subs	r5, r3, r5
 80008aa:	402e      	ands	r6, r5
 80008ac:	4689      	mov	r9, r1
 80008ae:	e723      	b.n	80006f8 <__aeabi_fadd+0x120>
 80008b0:	24ff      	movs	r4, #255	; 0xff
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fadd+0x2e0>
 80008b6:	e6ad      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	4660      	mov	r0, ip
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	4210      	tst	r0, r2
 80008c0:	d004      	beq.n	80008cc <__aeabi_fadd+0x2f4>
 80008c2:	4640      	mov	r0, r8
 80008c4:	4210      	tst	r0, r2
 80008c6:	d101      	bne.n	80008cc <__aeabi_fadd+0x2f4>
 80008c8:	001d      	movs	r5, r3
 80008ca:	4689      	mov	r9, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	464b      	mov	r3, r9
 80008d0:	24ff      	movs	r4, #255	; 0xff
 80008d2:	401a      	ands	r2, r3
 80008d4:	e69e      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008d6:	002b      	movs	r3, r5
 80008d8:	08dd      	lsrs	r5, r3, #3
 80008da:	000a      	movs	r2, r1
 80008dc:	2400      	movs	r4, #0
 80008de:	e69d      	b.n	800061c <__aeabi_fadd+0x44>
 80008e0:	1c7a      	adds	r2, r7, #1
 80008e2:	d0c6      	beq.n	8000872 <__aeabi_fadd+0x29a>
 80008e4:	43ff      	mvns	r7, r7
 80008e6:	28ff      	cmp	r0, #255	; 0xff
 80008e8:	d1b9      	bne.n	800085e <__aeabi_fadd+0x286>
 80008ea:	001d      	movs	r5, r3
 80008ec:	e71d      	b.n	800072a <__aeabi_fadd+0x152>
 80008ee:	2501      	movs	r5, #1
 80008f0:	e73f      	b.n	8000772 <__aeabi_fadd+0x19a>
 80008f2:	1e15      	subs	r5, r2, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x320>
 80008f6:	e744      	b.n	8000782 <__aeabi_fadd+0x1aa>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2300      	movs	r3, #0
 80008fc:	e691      	b.n	8000622 <__aeabi_fadd+0x4a>
 80008fe:	2501      	movs	r5, #1
 8000900:	e7b7      	b.n	8000872 <__aeabi_fadd+0x29a>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	7dffffff 	.word	0x7dffffff
 8000908:	fbffffff 	.word	0xfbffffff

0800090c <__eqsf2>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	0042      	lsls	r2, r0, #1
 8000910:	024e      	lsls	r6, r1, #9
 8000912:	004c      	lsls	r4, r1, #1
 8000914:	0245      	lsls	r5, r0, #9
 8000916:	0a6d      	lsrs	r5, r5, #9
 8000918:	0e12      	lsrs	r2, r2, #24
 800091a:	0fc3      	lsrs	r3, r0, #31
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e24      	lsrs	r4, r4, #24
 8000920:	0fc9      	lsrs	r1, r1, #31
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d00f      	beq.n	8000946 <__eqsf2+0x3a>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d011      	beq.n	800094e <__eqsf2+0x42>
 800092a:	2001      	movs	r0, #1
 800092c:	42a2      	cmp	r2, r4
 800092e:	d000      	beq.n	8000932 <__eqsf2+0x26>
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	42b5      	cmp	r5, r6
 8000934:	d1fc      	bne.n	8000930 <__eqsf2+0x24>
 8000936:	428b      	cmp	r3, r1
 8000938:	d00d      	beq.n	8000956 <__eqsf2+0x4a>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d1f8      	bne.n	8000930 <__eqsf2+0x24>
 800093e:	0028      	movs	r0, r5
 8000940:	1e45      	subs	r5, r0, #1
 8000942:	41a8      	sbcs	r0, r5
 8000944:	e7f4      	b.n	8000930 <__eqsf2+0x24>
 8000946:	2001      	movs	r0, #1
 8000948:	2d00      	cmp	r5, #0
 800094a:	d1f1      	bne.n	8000930 <__eqsf2+0x24>
 800094c:	e7eb      	b.n	8000926 <__eqsf2+0x1a>
 800094e:	2001      	movs	r0, #1
 8000950:	2e00      	cmp	r6, #0
 8000952:	d1ed      	bne.n	8000930 <__eqsf2+0x24>
 8000954:	e7e9      	b.n	800092a <__eqsf2+0x1e>
 8000956:	2000      	movs	r0, #0
 8000958:	e7ea      	b.n	8000930 <__eqsf2+0x24>
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__gesf2>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	004a      	lsls	r2, r1, #1
 8000960:	024e      	lsls	r6, r1, #9
 8000962:	0245      	lsls	r5, r0, #9
 8000964:	0044      	lsls	r4, r0, #1
 8000966:	0a6d      	lsrs	r5, r5, #9
 8000968:	0e24      	lsrs	r4, r4, #24
 800096a:	0fc3      	lsrs	r3, r0, #31
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	0e12      	lsrs	r2, r2, #24
 8000970:	0fc9      	lsrs	r1, r1, #31
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d015      	beq.n	80009a2 <__gesf2+0x46>
 8000976:	2aff      	cmp	r2, #255	; 0xff
 8000978:	d00e      	beq.n	8000998 <__gesf2+0x3c>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d115      	bne.n	80009aa <__gesf2+0x4e>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d101      	bne.n	8000986 <__gesf2+0x2a>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d01c      	beq.n	80009c0 <__gesf2+0x64>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d014      	beq.n	80009b4 <__gesf2+0x58>
 800098a:	428b      	cmp	r3, r1
 800098c:	d027      	beq.n	80009de <__gesf2+0x82>
 800098e:	2002      	movs	r0, #2
 8000990:	3b01      	subs	r3, #1
 8000992:	4018      	ands	r0, r3
 8000994:	3801      	subs	r0, #1
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	2e00      	cmp	r6, #0
 800099a:	d0ee      	beq.n	800097a <__gesf2+0x1e>
 800099c:	2002      	movs	r0, #2
 800099e:	4240      	negs	r0, r0
 80009a0:	e7f9      	b.n	8000996 <__gesf2+0x3a>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d1fa      	bne.n	800099c <__gesf2+0x40>
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d00e      	beq.n	80009c8 <__gesf2+0x6c>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d10e      	bne.n	80009cc <__gesf2+0x70>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d0ed      	beq.n	800098e <__gesf2+0x32>
 80009b2:	e00b      	b.n	80009cc <__gesf2+0x70>
 80009b4:	2301      	movs	r3, #1
 80009b6:	3901      	subs	r1, #1
 80009b8:	4399      	bics	r1, r3
 80009ba:	0008      	movs	r0, r1
 80009bc:	3001      	adds	r0, #1
 80009be:	e7ea      	b.n	8000996 <__gesf2+0x3a>
 80009c0:	2000      	movs	r0, #0
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d0e7      	beq.n	8000996 <__gesf2+0x3a>
 80009c6:	e7e2      	b.n	800098e <__gesf2+0x32>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d1e7      	bne.n	800099c <__gesf2+0x40>
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d1de      	bne.n	800098e <__gesf2+0x32>
 80009d0:	4294      	cmp	r4, r2
 80009d2:	dd05      	ble.n	80009e0 <__gesf2+0x84>
 80009d4:	2102      	movs	r1, #2
 80009d6:	1e58      	subs	r0, r3, #1
 80009d8:	4008      	ands	r0, r1
 80009da:	3801      	subs	r0, #1
 80009dc:	e7db      	b.n	8000996 <__gesf2+0x3a>
 80009de:	2400      	movs	r4, #0
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	dc04      	bgt.n	80009ee <__gesf2+0x92>
 80009e4:	42b5      	cmp	r5, r6
 80009e6:	d8d2      	bhi.n	800098e <__gesf2+0x32>
 80009e8:	2000      	movs	r0, #0
 80009ea:	42b5      	cmp	r5, r6
 80009ec:	d2d3      	bcs.n	8000996 <__gesf2+0x3a>
 80009ee:	1e58      	subs	r0, r3, #1
 80009f0:	2301      	movs	r3, #1
 80009f2:	4398      	bics	r0, r3
 80009f4:	3001      	adds	r0, #1
 80009f6:	e7ce      	b.n	8000996 <__gesf2+0x3a>

080009f8 <__lesf2>:
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	0042      	lsls	r2, r0, #1
 80009fc:	0244      	lsls	r4, r0, #9
 80009fe:	024d      	lsls	r5, r1, #9
 8000a00:	0fc3      	lsrs	r3, r0, #31
 8000a02:	0048      	lsls	r0, r1, #1
 8000a04:	0a64      	lsrs	r4, r4, #9
 8000a06:	0e12      	lsrs	r2, r2, #24
 8000a08:	0a6d      	lsrs	r5, r5, #9
 8000a0a:	0e00      	lsrs	r0, r0, #24
 8000a0c:	0fc9      	lsrs	r1, r1, #31
 8000a0e:	2aff      	cmp	r2, #255	; 0xff
 8000a10:	d012      	beq.n	8000a38 <__lesf2+0x40>
 8000a12:	28ff      	cmp	r0, #255	; 0xff
 8000a14:	d00c      	beq.n	8000a30 <__lesf2+0x38>
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d112      	bne.n	8000a40 <__lesf2+0x48>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d119      	bne.n	8000a52 <__lesf2+0x5a>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d117      	bne.n	8000a52 <__lesf2+0x5a>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d02b      	beq.n	8000a7e <__lesf2+0x86>
 8000a26:	2002      	movs	r0, #2
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	3801      	subs	r0, #1
 8000a2e:	e026      	b.n	8000a7e <__lesf2+0x86>
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0f0      	beq.n	8000a16 <__lesf2+0x1e>
 8000a34:	2002      	movs	r0, #2
 8000a36:	e022      	b.n	8000a7e <__lesf2+0x86>
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d1fb      	bne.n	8000a34 <__lesf2+0x3c>
 8000a3c:	28ff      	cmp	r0, #255	; 0xff
 8000a3e:	d01f      	beq.n	8000a80 <__lesf2+0x88>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d11f      	bne.n	8000a84 <__lesf2+0x8c>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d11d      	bne.n	8000a84 <__lesf2+0x8c>
 8000a48:	2002      	movs	r0, #2
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	4018      	ands	r0, r3
 8000a4e:	3801      	subs	r0, #1
 8000a50:	e015      	b.n	8000a7e <__lesf2+0x86>
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d00e      	beq.n	8000a74 <__lesf2+0x7c>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d1e5      	bne.n	8000a26 <__lesf2+0x2e>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	dc04      	bgt.n	8000a6a <__lesf2+0x72>
 8000a60:	42ac      	cmp	r4, r5
 8000a62:	d8e0      	bhi.n	8000a26 <__lesf2+0x2e>
 8000a64:	2000      	movs	r0, #0
 8000a66:	42ac      	cmp	r4, r5
 8000a68:	d209      	bcs.n	8000a7e <__lesf2+0x86>
 8000a6a:	1e58      	subs	r0, r3, #1
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4398      	bics	r0, r3
 8000a70:	3001      	adds	r0, #1
 8000a72:	e004      	b.n	8000a7e <__lesf2+0x86>
 8000a74:	2301      	movs	r3, #1
 8000a76:	3901      	subs	r1, #1
 8000a78:	4399      	bics	r1, r3
 8000a7a:	0008      	movs	r0, r1
 8000a7c:	3001      	adds	r0, #1
 8000a7e:	bd30      	pop	{r4, r5, pc}
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d1d7      	bne.n	8000a34 <__lesf2+0x3c>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1ce      	bne.n	8000a26 <__lesf2+0x2e>
 8000a88:	4282      	cmp	r2, r0
 8000a8a:	dde7      	ble.n	8000a5c <__lesf2+0x64>
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	1e58      	subs	r0, r3, #1
 8000a90:	4008      	ands	r0, r1
 8000a92:	3801      	subs	r0, #1
 8000a94:	e7f3      	b.n	8000a7e <__lesf2+0x86>
 8000a96:	46c0      	nop			; (mov r8, r8)

08000a98 <__aeabi_fmul>:
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	464e      	mov	r6, r9
 8000a9c:	4657      	mov	r7, sl
 8000a9e:	4645      	mov	r5, r8
 8000aa0:	46de      	mov	lr, fp
 8000aa2:	b5e0      	push	{r5, r6, r7, lr}
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	0a5b      	lsrs	r3, r3, #9
 8000aa8:	0045      	lsls	r5, r0, #1
 8000aaa:	b083      	sub	sp, #12
 8000aac:	1c0f      	adds	r7, r1, #0
 8000aae:	4699      	mov	r9, r3
 8000ab0:	0e2d      	lsrs	r5, r5, #24
 8000ab2:	0fc6      	lsrs	r6, r0, #31
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d057      	beq.n	8000b68 <__aeabi_fmul+0xd0>
 8000ab8:	2dff      	cmp	r5, #255	; 0xff
 8000aba:	d024      	beq.n	8000b06 <__aeabi_fmul+0x6e>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	04c0      	lsls	r0, r0, #19
 8000ac2:	4318      	orrs	r0, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4681      	mov	r9, r0
 8000ac8:	469a      	mov	sl, r3
 8000aca:	469b      	mov	fp, r3
 8000acc:	3d7f      	subs	r5, #127	; 0x7f
 8000ace:	027c      	lsls	r4, r7, #9
 8000ad0:	007a      	lsls	r2, r7, #1
 8000ad2:	0ffb      	lsrs	r3, r7, #31
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	0e12      	lsrs	r2, r2, #24
 8000ad8:	4698      	mov	r8, r3
 8000ada:	d023      	beq.n	8000b24 <__aeabi_fmul+0x8c>
 8000adc:	2aff      	cmp	r2, #255	; 0xff
 8000ade:	d04b      	beq.n	8000b78 <__aeabi_fmul+0xe0>
 8000ae0:	00e3      	lsls	r3, r4, #3
 8000ae2:	2480      	movs	r4, #128	; 0x80
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	04e4      	lsls	r4, r4, #19
 8000ae8:	3a7f      	subs	r2, #127	; 0x7f
 8000aea:	431c      	orrs	r4, r3
 8000aec:	18ad      	adds	r5, r5, r2
 8000aee:	1c6b      	adds	r3, r5, #1
 8000af0:	4647      	mov	r7, r8
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4653      	mov	r3, sl
 8000af6:	4077      	eors	r7, r6
 8000af8:	003a      	movs	r2, r7
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d848      	bhi.n	8000b90 <__aeabi_fmul+0xf8>
 8000afe:	497d      	ldr	r1, [pc, #500]	; (8000cf4 <__aeabi_fmul+0x25c>)
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	58cb      	ldr	r3, [r1, r3]
 8000b04:	469f      	mov	pc, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fmul+0x74>
 8000b0a:	e085      	b.n	8000c18 <__aeabi_fmul+0x180>
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	469a      	mov	sl, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	469b      	mov	fp, r3
 8000b14:	027c      	lsls	r4, r7, #9
 8000b16:	007a      	lsls	r2, r7, #1
 8000b18:	0ffb      	lsrs	r3, r7, #31
 8000b1a:	25ff      	movs	r5, #255	; 0xff
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	0e12      	lsrs	r2, r2, #24
 8000b20:	4698      	mov	r8, r3
 8000b22:	d1db      	bne.n	8000adc <__aeabi_fmul+0x44>
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fmul+0x92>
 8000b28:	e090      	b.n	8000c4c <__aeabi_fmul+0x1b4>
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4692      	mov	sl, r2
 8000b32:	2001      	movs	r0, #1
 8000b34:	e7db      	b.n	8000aee <__aeabi_fmul+0x56>
 8000b36:	464c      	mov	r4, r9
 8000b38:	4658      	mov	r0, fp
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d024      	beq.n	8000b8a <__aeabi_fmul+0xf2>
 8000b40:	2803      	cmp	r0, #3
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fmul+0xae>
 8000b44:	e0cf      	b.n	8000ce6 <__aeabi_fmul+0x24e>
 8000b46:	2200      	movs	r2, #0
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2801      	cmp	r0, #1
 8000b4c:	d14d      	bne.n	8000bea <__aeabi_fmul+0x152>
 8000b4e:	0258      	lsls	r0, r3, #9
 8000b50:	05d2      	lsls	r2, r2, #23
 8000b52:	0a40      	lsrs	r0, r0, #9
 8000b54:	07ff      	lsls	r7, r7, #31
 8000b56:	4310      	orrs	r0, r2
 8000b58:	4338      	orrs	r0, r7
 8000b5a:	b003      	add	sp, #12
 8000b5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b5e:	4690      	mov	r8, r2
 8000b60:	4699      	mov	r9, r3
 8000b62:	46a2      	mov	sl, r4
 8000b64:	46ab      	mov	fp, r5
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d15b      	bne.n	8000c24 <__aeabi_fmul+0x18c>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	469a      	mov	sl, r3
 8000b70:	3b03      	subs	r3, #3
 8000b72:	2500      	movs	r5, #0
 8000b74:	469b      	mov	fp, r3
 8000b76:	e7aa      	b.n	8000ace <__aeabi_fmul+0x36>
 8000b78:	35ff      	adds	r5, #255	; 0xff
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d160      	bne.n	8000c40 <__aeabi_fmul+0x1a8>
 8000b7e:	4652      	mov	r2, sl
 8000b80:	2302      	movs	r3, #2
 8000b82:	431a      	orrs	r2, r3
 8000b84:	4692      	mov	sl, r2
 8000b86:	2002      	movs	r0, #2
 8000b88:	e7b1      	b.n	8000aee <__aeabi_fmul+0x56>
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e7de      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000b90:	464b      	mov	r3, r9
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	469c      	mov	ip, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	0426      	lsls	r6, r4, #16
 8000b9a:	0c36      	lsrs	r6, r6, #16
 8000b9c:	0418      	lsls	r0, r3, #16
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	0c22      	lsrs	r2, r4, #16
 8000ba4:	4664      	mov	r4, ip
 8000ba6:	0c00      	lsrs	r0, r0, #16
 8000ba8:	4343      	muls	r3, r0
 8000baa:	434e      	muls	r6, r1
 8000bac:	4350      	muls	r0, r2
 8000bae:	4354      	muls	r4, r2
 8000bb0:	1980      	adds	r0, r0, r6
 8000bb2:	0c1a      	lsrs	r2, r3, #16
 8000bb4:	1812      	adds	r2, r2, r0
 8000bb6:	4296      	cmp	r6, r2
 8000bb8:	d903      	bls.n	8000bc2 <__aeabi_fmul+0x12a>
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	0249      	lsls	r1, r1, #9
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4464      	add	r4, ip
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	0410      	lsls	r0, r2, #16
 8000bc8:	18c0      	adds	r0, r0, r3
 8000bca:	0183      	lsls	r3, r0, #6
 8000bcc:	1e5e      	subs	r6, r3, #1
 8000bce:	41b3      	sbcs	r3, r6
 8000bd0:	0e80      	lsrs	r0, r0, #26
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	0c13      	lsrs	r3, r2, #16
 8000bd6:	191b      	adds	r3, r3, r4
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	4303      	orrs	r3, r0
 8000bdc:	001c      	movs	r4, r3
 8000bde:	0123      	lsls	r3, r4, #4
 8000be0:	d579      	bpl.n	8000cd6 <__aeabi_fmul+0x23e>
 8000be2:	2301      	movs	r3, #1
 8000be4:	0862      	lsrs	r2, r4, #1
 8000be6:	401c      	ands	r4, r3
 8000be8:	4314      	orrs	r4, r2
 8000bea:	9a01      	ldr	r2, [sp, #4]
 8000bec:	327f      	adds	r2, #127	; 0x7f
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	dd4d      	ble.n	8000c8e <__aeabi_fmul+0x1f6>
 8000bf2:	0763      	lsls	r3, r4, #29
 8000bf4:	d004      	beq.n	8000c00 <__aeabi_fmul+0x168>
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	4023      	ands	r3, r4
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x168>
 8000bfe:	3404      	adds	r4, #4
 8000c00:	0123      	lsls	r3, r4, #4
 8000c02:	d503      	bpl.n	8000c0c <__aeabi_fmul+0x174>
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <__aeabi_fmul+0x260>)
 8000c06:	9a01      	ldr	r2, [sp, #4]
 8000c08:	401c      	ands	r4, r3
 8000c0a:	3280      	adds	r2, #128	; 0x80
 8000c0c:	2afe      	cmp	r2, #254	; 0xfe
 8000c0e:	dcbc      	bgt.n	8000b8a <__aeabi_fmul+0xf2>
 8000c10:	01a3      	lsls	r3, r4, #6
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	e79a      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	3b09      	subs	r3, #9
 8000c1e:	25ff      	movs	r5, #255	; 0xff
 8000c20:	469b      	mov	fp, r3
 8000c22:	e754      	b.n	8000ace <__aeabi_fmul+0x36>
 8000c24:	0018      	movs	r0, r3
 8000c26:	f002 f901 	bl	8002e2c <__clzsi2>
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	1f43      	subs	r3, r0, #5
 8000c2e:	2576      	movs	r5, #118	; 0x76
 8000c30:	409a      	lsls	r2, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	426d      	negs	r5, r5
 8000c36:	4691      	mov	r9, r2
 8000c38:	1a2d      	subs	r5, r5, r0
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	469b      	mov	fp, r3
 8000c3e:	e746      	b.n	8000ace <__aeabi_fmul+0x36>
 8000c40:	4652      	mov	r2, sl
 8000c42:	2303      	movs	r3, #3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	4692      	mov	sl, r2
 8000c48:	2003      	movs	r0, #3
 8000c4a:	e750      	b.n	8000aee <__aeabi_fmul+0x56>
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	f002 f8ed 	bl	8002e2c <__clzsi2>
 8000c52:	1f43      	subs	r3, r0, #5
 8000c54:	1a2d      	subs	r5, r5, r0
 8000c56:	409c      	lsls	r4, r3
 8000c58:	3d76      	subs	r5, #118	; 0x76
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	e747      	b.n	8000aee <__aeabi_fmul+0x56>
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	2700      	movs	r7, #0
 8000c62:	03db      	lsls	r3, r3, #15
 8000c64:	22ff      	movs	r2, #255	; 0xff
 8000c66:	e772      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c68:	4642      	mov	r2, r8
 8000c6a:	e766      	b.n	8000b3a <__aeabi_fmul+0xa2>
 8000c6c:	464c      	mov	r4, r9
 8000c6e:	0032      	movs	r2, r6
 8000c70:	4658      	mov	r0, fp
 8000c72:	e762      	b.n	8000b3a <__aeabi_fmul+0xa2>
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	464a      	mov	r2, r9
 8000c78:	03db      	lsls	r3, r3, #15
 8000c7a:	421a      	tst	r2, r3
 8000c7c:	d022      	beq.n	8000cc4 <__aeabi_fmul+0x22c>
 8000c7e:	421c      	tst	r4, r3
 8000c80:	d120      	bne.n	8000cc4 <__aeabi_fmul+0x22c>
 8000c82:	4323      	orrs	r3, r4
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	4647      	mov	r7, r8
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	e75f      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	1a9a      	subs	r2, r3, r2
 8000c92:	2a1b      	cmp	r2, #27
 8000c94:	dc21      	bgt.n	8000cda <__aeabi_fmul+0x242>
 8000c96:	0023      	movs	r3, r4
 8000c98:	9901      	ldr	r1, [sp, #4]
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	319e      	adds	r1, #158	; 0x9e
 8000c9e:	408c      	lsls	r4, r1
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	0023      	movs	r3, r4
 8000ca4:	1e5c      	subs	r4, r3, #1
 8000ca6:	41a3      	sbcs	r3, r4
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	075a      	lsls	r2, r3, #29
 8000cac:	d004      	beq.n	8000cb8 <__aeabi_fmul+0x220>
 8000cae:	220f      	movs	r2, #15
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	2a04      	cmp	r2, #4
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fmul+0x220>
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	015a      	lsls	r2, r3, #5
 8000cba:	d411      	bmi.n	8000ce0 <__aeabi_fmul+0x248>
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	0a5b      	lsrs	r3, r3, #9
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e744      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	03db      	lsls	r3, r3, #15
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	0a5b      	lsrs	r3, r3, #9
 8000cd0:	0037      	movs	r7, r6
 8000cd2:	22ff      	movs	r2, #255	; 0xff
 8000cd4:	e73b      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cd6:	9501      	str	r5, [sp, #4]
 8000cd8:	e787      	b.n	8000bea <__aeabi_fmul+0x152>
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e736      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e733      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	03db      	lsls	r3, r3, #15
 8000cea:	4323      	orrs	r3, r4
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	0a5b      	lsrs	r3, r3, #9
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	e72c      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cf4:	08017554 	.word	0x08017554
 8000cf8:	f7ffffff 	.word	0xf7ffffff

08000cfc <__aeabi_fsub>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4647      	mov	r7, r8
 8000d00:	46ce      	mov	lr, r9
 8000d02:	0044      	lsls	r4, r0, #1
 8000d04:	0fc2      	lsrs	r2, r0, #31
 8000d06:	b580      	push	{r7, lr}
 8000d08:	0247      	lsls	r7, r0, #9
 8000d0a:	0248      	lsls	r0, r1, #9
 8000d0c:	0a40      	lsrs	r0, r0, #9
 8000d0e:	4684      	mov	ip, r0
 8000d10:	4666      	mov	r6, ip
 8000d12:	0048      	lsls	r0, r1, #1
 8000d14:	0a7f      	lsrs	r7, r7, #9
 8000d16:	0e24      	lsrs	r4, r4, #24
 8000d18:	00f6      	lsls	r6, r6, #3
 8000d1a:	0025      	movs	r5, r4
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	00fb      	lsls	r3, r7, #3
 8000d20:	0e00      	lsrs	r0, r0, #24
 8000d22:	0fc9      	lsrs	r1, r1, #31
 8000d24:	46b1      	mov	r9, r6
 8000d26:	28ff      	cmp	r0, #255	; 0xff
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0x30>
 8000d2a:	e085      	b.n	8000e38 <__aeabi_fsub+0x13c>
 8000d2c:	2601      	movs	r6, #1
 8000d2e:	4071      	eors	r1, r6
 8000d30:	1a26      	subs	r6, r4, r0
 8000d32:	4291      	cmp	r1, r2
 8000d34:	d057      	beq.n	8000de6 <__aeabi_fsub+0xea>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	dd43      	ble.n	8000dc2 <__aeabi_fsub+0xc6>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fsub+0x44>
 8000d3e:	e07f      	b.n	8000e40 <__aeabi_fsub+0x144>
 8000d40:	4649      	mov	r1, r9
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x4c>
 8000d46:	e0aa      	b.n	8000e9e <__aeabi_fsub+0x1a2>
 8000d48:	3e01      	subs	r6, #1
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x54>
 8000d4e:	e0f7      	b.n	8000f40 <__aeabi_fsub+0x244>
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_fsub+0x5c>
 8000d56:	e08b      	b.n	8000e70 <__aeabi_fsub+0x174>
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	099c      	lsrs	r4, r3, #6
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f865 	bl	8002e2c <__clzsi2>
 8000d62:	3805      	subs	r0, #5
 8000d64:	4084      	lsls	r4, r0
 8000d66:	4285      	cmp	r5, r0
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_fsub+0x70>
 8000d6a:	e0d3      	b.n	8000f14 <__aeabi_fsub+0x218>
 8000d6c:	1b45      	subs	r5, r0, r5
 8000d6e:	0023      	movs	r3, r4
 8000d70:	2020      	movs	r0, #32
 8000d72:	3501      	adds	r5, #1
 8000d74:	40eb      	lsrs	r3, r5
 8000d76:	1b45      	subs	r5, r0, r5
 8000d78:	40ac      	lsls	r4, r5
 8000d7a:	1e62      	subs	r2, r4, #1
 8000d7c:	4194      	sbcs	r4, r2
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	2407      	movs	r4, #7
 8000d82:	2500      	movs	r5, #0
 8000d84:	401c      	ands	r4, r3
 8000d86:	2201      	movs	r2, #1
 8000d88:	4641      	mov	r1, r8
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d004      	beq.n	8000d9a <__aeabi_fsub+0x9e>
 8000d90:	210f      	movs	r1, #15
 8000d92:	4019      	ands	r1, r3
 8000d94:	2904      	cmp	r1, #4
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x9e>
 8000d98:	3304      	adds	r3, #4
 8000d9a:	0159      	lsls	r1, r3, #5
 8000d9c:	d400      	bmi.n	8000da0 <__aeabi_fsub+0xa4>
 8000d9e:	e080      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000da0:	3501      	adds	r5, #1
 8000da2:	b2ec      	uxtb	r4, r5
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0xae>
 8000da8:	e0a3      	b.n	8000ef2 <__aeabi_fsub+0x1f6>
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	2300      	movs	r3, #0
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	05e4      	lsls	r4, r4, #23
 8000db2:	0a58      	lsrs	r0, r3, #9
 8000db4:	07d2      	lsls	r2, r2, #31
 8000db6:	4320      	orrs	r0, r4
 8000db8:	4310      	orrs	r0, r2
 8000dba:	bc0c      	pop	{r2, r3}
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d174      	bne.n	8000eb0 <__aeabi_fsub+0x1b4>
 8000dc6:	1c60      	adds	r0, r4, #1
 8000dc8:	b2c0      	uxtb	r0, r0
 8000dca:	2801      	cmp	r0, #1
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_fsub+0xd4>
 8000dce:	e0a7      	b.n	8000f20 <__aeabi_fsub+0x224>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	1a9c      	subs	r4, r3, r2
 8000dd4:	0162      	lsls	r2, r4, #5
 8000dd6:	d500      	bpl.n	8000dda <__aeabi_fsub+0xde>
 8000dd8:	e0b6      	b.n	8000f48 <__aeabi_fsub+0x24c>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d1be      	bne.n	8000d5c <__aeabi_fsub+0x60>
 8000dde:	2200      	movs	r2, #0
 8000de0:	2400      	movs	r4, #0
 8000de2:	2300      	movs	r3, #0
 8000de4:	e7e3      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_fsub+0xf0>
 8000dea:	e085      	b.n	8000ef8 <__aeabi_fsub+0x1fc>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d046      	beq.n	8000e7e <__aeabi_fsub+0x182>
 8000df0:	2cff      	cmp	r4, #255	; 0xff
 8000df2:	d049      	beq.n	8000e88 <__aeabi_fsub+0x18c>
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	4648      	mov	r0, r9
 8000df8:	04d2      	lsls	r2, r2, #19
 8000dfa:	4310      	orrs	r0, r2
 8000dfc:	4681      	mov	r9, r0
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2e1b      	cmp	r6, #27
 8000e02:	dc09      	bgt.n	8000e18 <__aeabi_fsub+0x11c>
 8000e04:	2020      	movs	r0, #32
 8000e06:	464c      	mov	r4, r9
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	4084      	lsls	r4, r0
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	0020      	movs	r0, r4
 8000e10:	40f2      	lsrs	r2, r6
 8000e12:	1e44      	subs	r4, r0, #1
 8000e14:	41a0      	sbcs	r0, r4
 8000e16:	4302      	orrs	r2, r0
 8000e18:	189b      	adds	r3, r3, r2
 8000e1a:	015a      	lsls	r2, r3, #5
 8000e1c:	d528      	bpl.n	8000e70 <__aeabi_fsub+0x174>
 8000e1e:	3501      	adds	r5, #1
 8000e20:	2dff      	cmp	r5, #255	; 0xff
 8000e22:	d100      	bne.n	8000e26 <__aeabi_fsub+0x12a>
 8000e24:	e0a8      	b.n	8000f78 <__aeabi_fsub+0x27c>
 8000e26:	2201      	movs	r2, #1
 8000e28:	2407      	movs	r4, #7
 8000e2a:	4994      	ldr	r1, [pc, #592]	; (800107c <__aeabi_fsub+0x380>)
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	400b      	ands	r3, r1
 8000e32:	4313      	orrs	r3, r2
 8000e34:	401c      	ands	r4, r3
 8000e36:	e7a6      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x142>
 8000e3c:	e778      	b.n	8000d30 <__aeabi_fsub+0x34>
 8000e3e:	e775      	b.n	8000d2c <__aeabi_fsub+0x30>
 8000e40:	2cff      	cmp	r4, #255	; 0xff
 8000e42:	d054      	beq.n	8000eee <__aeabi_fsub+0x1f2>
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4649      	mov	r1, r9
 8000e48:	04d2      	lsls	r2, r2, #19
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2e1b      	cmp	r6, #27
 8000e52:	dc09      	bgt.n	8000e68 <__aeabi_fsub+0x16c>
 8000e54:	2120      	movs	r1, #32
 8000e56:	4648      	mov	r0, r9
 8000e58:	1b89      	subs	r1, r1, r6
 8000e5a:	4088      	lsls	r0, r1
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	0001      	movs	r1, r0
 8000e60:	40f2      	lsrs	r2, r6
 8000e62:	1e48      	subs	r0, r1, #1
 8000e64:	4181      	sbcs	r1, r0
 8000e66:	430a      	orrs	r2, r1
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	d500      	bpl.n	8000e70 <__aeabi_fsub+0x174>
 8000e6e:	e773      	b.n	8000d58 <__aeabi_fsub+0x5c>
 8000e70:	2201      	movs	r2, #1
 8000e72:	4641      	mov	r1, r8
 8000e74:	400a      	ands	r2, r1
 8000e76:	0759      	lsls	r1, r3, #29
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fsub+0x180>
 8000e7a:	e789      	b.n	8000d90 <__aeabi_fsub+0x94>
 8000e7c:	e011      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000e7e:	4648      	mov	r0, r9
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d158      	bne.n	8000f36 <__aeabi_fsub+0x23a>
 8000e84:	2cff      	cmp	r4, #255	; 0xff
 8000e86:	d10c      	bne.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x194>
 8000e8e:	e78c      	b.n	8000daa <__aeabi_fsub+0xae>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	03c0      	lsls	r0, r0, #15
 8000e94:	4303      	orrs	r3, r0
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	0a5b      	lsrs	r3, r3, #9
 8000e9a:	24ff      	movs	r4, #255	; 0xff
 8000e9c:	e787      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000e9e:	2cff      	cmp	r4, #255	; 0xff
 8000ea0:	d025      	beq.n	8000eee <__aeabi_fsub+0x1f2>
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d0f0      	beq.n	8000e8a <__aeabi_fsub+0x18e>
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	0a5b      	lsrs	r3, r3, #9
 8000eac:	b2ec      	uxtb	r4, r5
 8000eae:	e77e      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d04d      	beq.n	8000f50 <__aeabi_fsub+0x254>
 8000eb4:	28ff      	cmp	r0, #255	; 0xff
 8000eb6:	d018      	beq.n	8000eea <__aeabi_fsub+0x1ee>
 8000eb8:	2480      	movs	r4, #128	; 0x80
 8000eba:	04e4      	lsls	r4, r4, #19
 8000ebc:	4272      	negs	r2, r6
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	2a1b      	cmp	r2, #27
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_fsub+0x1ca>
 8000ec4:	e0c4      	b.n	8001050 <__aeabi_fsub+0x354>
 8000ec6:	001c      	movs	r4, r3
 8000ec8:	2520      	movs	r5, #32
 8000eca:	40d4      	lsrs	r4, r2
 8000ecc:	1aaa      	subs	r2, r5, r2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	4193      	sbcs	r3, r2
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	464a      	mov	r2, r9
 8000ed8:	0005      	movs	r5, r0
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	4688      	mov	r8, r1
 8000ede:	e738      	b.n	8000d52 <__aeabi_fsub+0x56>
 8000ee0:	1c72      	adds	r2, r6, #1
 8000ee2:	d0f8      	beq.n	8000ed6 <__aeabi_fsub+0x1da>
 8000ee4:	43f2      	mvns	r2, r6
 8000ee6:	28ff      	cmp	r0, #255	; 0xff
 8000ee8:	d1ea      	bne.n	8000ec0 <__aeabi_fsub+0x1c4>
 8000eea:	000a      	movs	r2, r1
 8000eec:	464b      	mov	r3, r9
 8000eee:	25ff      	movs	r5, #255	; 0xff
 8000ef0:	e7d7      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	0a5b      	lsrs	r3, r3, #9
 8000ef6:	e75a      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d141      	bne.n	8000f80 <__aeabi_fsub+0x284>
 8000efc:	1c65      	adds	r5, r4, #1
 8000efe:	b2e9      	uxtb	r1, r5
 8000f00:	2901      	cmp	r1, #1
 8000f02:	dd45      	ble.n	8000f90 <__aeabi_fsub+0x294>
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x20e>
 8000f08:	e74f      	b.n	8000daa <__aeabi_fsub+0xae>
 8000f0a:	2407      	movs	r4, #7
 8000f0c:	444b      	add	r3, r9
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	401c      	ands	r4, r3
 8000f12:	e738      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000f14:	2207      	movs	r2, #7
 8000f16:	4b5a      	ldr	r3, [pc, #360]	; (8001080 <__aeabi_fsub+0x384>)
 8000f18:	1a2d      	subs	r5, r5, r0
 8000f1a:	4023      	ands	r3, r4
 8000f1c:	4014      	ands	r4, r2
 8000f1e:	e732      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	d11d      	bne.n	8000f60 <__aeabi_fsub+0x264>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d17a      	bne.n	800101e <__aeabi_fsub+0x322>
 8000f28:	464b      	mov	r3, r9
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x234>
 8000f2e:	e091      	b.n	8001054 <__aeabi_fsub+0x358>
 8000f30:	000a      	movs	r2, r1
 8000f32:	2500      	movs	r5, #0
 8000f34:	e7b5      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f36:	3e01      	subs	r6, #1
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d119      	bne.n	8000f70 <__aeabi_fsub+0x274>
 8000f3c:	444b      	add	r3, r9
 8000f3e:	e76c      	b.n	8000e1a <__aeabi_fsub+0x11e>
 8000f40:	2cff      	cmp	r4, #255	; 0xff
 8000f42:	d184      	bne.n	8000e4e <__aeabi_fsub+0x152>
 8000f44:	25ff      	movs	r5, #255	; 0xff
 8000f46:	e7ac      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f48:	464a      	mov	r2, r9
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	1ad4      	subs	r4, r2, r3
 8000f4e:	e705      	b.n	8000d5c <__aeabi_fsub+0x60>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1c5      	bne.n	8000ee0 <__aeabi_fsub+0x1e4>
 8000f54:	000a      	movs	r2, r1
 8000f56:	28ff      	cmp	r0, #255	; 0xff
 8000f58:	d0c8      	beq.n	8000eec <__aeabi_fsub+0x1f0>
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	e7a0      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d149      	bne.n	8000ff8 <__aeabi_fsub+0x2fc>
 8000f64:	464b      	mov	r3, r9
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d077      	beq.n	800105a <__aeabi_fsub+0x35e>
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	25ff      	movs	r5, #255	; 0xff
 8000f6e:	e798      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f70:	2cff      	cmp	r4, #255	; 0xff
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fsub+0x27a>
 8000f74:	e743      	b.n	8000dfe <__aeabi_fsub+0x102>
 8000f76:	e787      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000f78:	000a      	movs	r2, r1
 8000f7a:	24ff      	movs	r4, #255	; 0xff
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e716      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d115      	bne.n	8000fb0 <__aeabi_fsub+0x2b4>
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <__aeabi_fsub+0x33c>
 8000f88:	28ff      	cmp	r0, #255	; 0xff
 8000f8a:	d1e6      	bne.n	8000f5a <__aeabi_fsub+0x25e>
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	e77b      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d120      	bne.n	8000fd6 <__aeabi_fsub+0x2da>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d057      	beq.n	8001048 <__aeabi_fsub+0x34c>
 8000f98:	4649      	mov	r1, r9
 8000f9a:	2900      	cmp	r1, #0
 8000f9c:	d053      	beq.n	8001046 <__aeabi_fsub+0x34a>
 8000f9e:	444b      	add	r3, r9
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	d568      	bpl.n	8001076 <__aeabi_fsub+0x37a>
 8000fa4:	2407      	movs	r4, #7
 8000fa6:	4a36      	ldr	r2, [pc, #216]	; (8001080 <__aeabi_fsub+0x384>)
 8000fa8:	401c      	ands	r4, r3
 8000faa:	2501      	movs	r5, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	e6ea      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000fb0:	28ff      	cmp	r0, #255	; 0xff
 8000fb2:	d0eb      	beq.n	8000f8c <__aeabi_fsub+0x290>
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	04d2      	lsls	r2, r2, #19
 8000fb8:	4276      	negs	r6, r6
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	2e1b      	cmp	r6, #27
 8000fbe:	dc53      	bgt.n	8001068 <__aeabi_fsub+0x36c>
 8000fc0:	2520      	movs	r5, #32
 8000fc2:	1bad      	subs	r5, r5, r6
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	40ab      	lsls	r3, r5
 8000fc8:	40f2      	lsrs	r2, r6
 8000fca:	1e5c      	subs	r4, r3, #1
 8000fcc:	41a3      	sbcs	r3, r4
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	444b      	add	r3, r9
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	e721      	b.n	8000e1a <__aeabi_fsub+0x11e>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0d8      	beq.n	8000f8c <__aeabi_fsub+0x290>
 8000fda:	4649      	mov	r1, r9
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_fsub+0x2e6>
 8000fe0:	e752      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	03c9      	lsls	r1, r1, #15
 8000fe6:	420f      	tst	r7, r1
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x2f0>
 8000fea:	e74d      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000fec:	4660      	mov	r0, ip
 8000fee:	4208      	tst	r0, r1
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_fsub+0x2f8>
 8000ff2:	e749      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	e747      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000ff8:	4648      	mov	r0, r9
 8000ffa:	25ff      	movs	r5, #255	; 0xff
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x306>
 8001000:	e74f      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	03d2      	lsls	r2, r2, #15
 8001006:	4217      	tst	r7, r2
 8001008:	d004      	beq.n	8001014 <__aeabi_fsub+0x318>
 800100a:	4660      	mov	r0, ip
 800100c:	4210      	tst	r0, r2
 800100e:	d101      	bne.n	8001014 <__aeabi_fsub+0x318>
 8001010:	464b      	mov	r3, r9
 8001012:	4688      	mov	r8, r1
 8001014:	2201      	movs	r2, #1
 8001016:	4641      	mov	r1, r8
 8001018:	25ff      	movs	r5, #255	; 0xff
 800101a:	400a      	ands	r2, r1
 800101c:	e741      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 800101e:	4648      	mov	r0, r9
 8001020:	2800      	cmp	r0, #0
 8001022:	d01f      	beq.n	8001064 <__aeabi_fsub+0x368>
 8001024:	1a1a      	subs	r2, r3, r0
 8001026:	0150      	lsls	r0, r2, #5
 8001028:	d520      	bpl.n	800106c <__aeabi_fsub+0x370>
 800102a:	464a      	mov	r2, r9
 800102c:	2407      	movs	r4, #7
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	401c      	ands	r4, r3
 8001032:	4688      	mov	r8, r1
 8001034:	2500      	movs	r5, #0
 8001036:	e6a6      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8001038:	1c74      	adds	r4, r6, #1
 800103a:	d0c9      	beq.n	8000fd0 <__aeabi_fsub+0x2d4>
 800103c:	43f6      	mvns	r6, r6
 800103e:	28ff      	cmp	r0, #255	; 0xff
 8001040:	d1bc      	bne.n	8000fbc <__aeabi_fsub+0x2c0>
 8001042:	464b      	mov	r3, r9
 8001044:	e720      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8001046:	4699      	mov	r9, r3
 8001048:	464b      	mov	r3, r9
 800104a:	2500      	movs	r5, #0
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	e72b      	b.n	8000ea8 <__aeabi_fsub+0x1ac>
 8001050:	2301      	movs	r3, #1
 8001052:	e740      	b.n	8000ed6 <__aeabi_fsub+0x1da>
 8001054:	2200      	movs	r2, #0
 8001056:	2300      	movs	r3, #0
 8001058:	e6a9      	b.n	8000dae <__aeabi_fsub+0xb2>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	2200      	movs	r2, #0
 800105e:	03db      	lsls	r3, r3, #15
 8001060:	24ff      	movs	r4, #255	; 0xff
 8001062:	e6a4      	b.n	8000dae <__aeabi_fsub+0xb2>
 8001064:	2500      	movs	r5, #0
 8001066:	e71c      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8001068:	2301      	movs	r3, #1
 800106a:	e7b1      	b.n	8000fd0 <__aeabi_fsub+0x2d4>
 800106c:	2a00      	cmp	r2, #0
 800106e:	d0f1      	beq.n	8001054 <__aeabi_fsub+0x358>
 8001070:	0013      	movs	r3, r2
 8001072:	2500      	movs	r5, #0
 8001074:	e6fc      	b.n	8000e70 <__aeabi_fsub+0x174>
 8001076:	2500      	movs	r5, #0
 8001078:	e6fa      	b.n	8000e70 <__aeabi_fsub+0x174>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	7dffffff 	.word	0x7dffffff
 8001080:	fbffffff 	.word	0xfbffffff

08001084 <__aeabi_f2iz>:
 8001084:	0241      	lsls	r1, r0, #9
 8001086:	0042      	lsls	r2, r0, #1
 8001088:	0fc3      	lsrs	r3, r0, #31
 800108a:	0a49      	lsrs	r1, r1, #9
 800108c:	0e12      	lsrs	r2, r2, #24
 800108e:	2000      	movs	r0, #0
 8001090:	2a7e      	cmp	r2, #126	; 0x7e
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x2c>
 8001094:	2a9d      	cmp	r2, #157	; 0x9d
 8001096:	d80c      	bhi.n	80010b2 <__aeabi_f2iz+0x2e>
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	0400      	lsls	r0, r0, #16
 800109c:	4301      	orrs	r1, r0
 800109e:	2a95      	cmp	r2, #149	; 0x95
 80010a0:	dc0a      	bgt.n	80010b8 <__aeabi_f2iz+0x34>
 80010a2:	2096      	movs	r0, #150	; 0x96
 80010a4:	1a82      	subs	r2, r0, r2
 80010a6:	40d1      	lsrs	r1, r2
 80010a8:	4248      	negs	r0, r1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_f2iz+0x2c>
 80010ae:	0008      	movs	r0, r1
 80010b0:	4770      	bx	lr
 80010b2:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <__aeabi_f2iz+0x3c>)
 80010b4:	1898      	adds	r0, r3, r2
 80010b6:	e7fb      	b.n	80010b0 <__aeabi_f2iz+0x2c>
 80010b8:	3a96      	subs	r2, #150	; 0x96
 80010ba:	4091      	lsls	r1, r2
 80010bc:	e7f4      	b.n	80010a8 <__aeabi_f2iz+0x24>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	7fffffff 	.word	0x7fffffff

080010c4 <__aeabi_ui2f>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	1e04      	subs	r4, r0, #0
 80010c8:	d034      	beq.n	8001134 <__aeabi_ui2f+0x70>
 80010ca:	f001 feaf 	bl	8002e2c <__clzsi2>
 80010ce:	229e      	movs	r2, #158	; 0x9e
 80010d0:	1a12      	subs	r2, r2, r0
 80010d2:	2a96      	cmp	r2, #150	; 0x96
 80010d4:	dc07      	bgt.n	80010e6 <__aeabi_ui2f+0x22>
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2808      	cmp	r0, #8
 80010da:	dd2e      	ble.n	800113a <__aeabi_ui2f+0x76>
 80010dc:	3808      	subs	r0, #8
 80010de:	4084      	lsls	r4, r0
 80010e0:	0260      	lsls	r0, r4, #9
 80010e2:	0a40      	lsrs	r0, r0, #9
 80010e4:	e021      	b.n	800112a <__aeabi_ui2f+0x66>
 80010e6:	2a99      	cmp	r2, #153	; 0x99
 80010e8:	dd09      	ble.n	80010fe <__aeabi_ui2f+0x3a>
 80010ea:	0003      	movs	r3, r0
 80010ec:	0021      	movs	r1, r4
 80010ee:	331b      	adds	r3, #27
 80010f0:	4099      	lsls	r1, r3
 80010f2:	1e4b      	subs	r3, r1, #1
 80010f4:	4199      	sbcs	r1, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	1a1b      	subs	r3, r3, r0
 80010fa:	40dc      	lsrs	r4, r3
 80010fc:	430c      	orrs	r4, r1
 80010fe:	2805      	cmp	r0, #5
 8001100:	dd01      	ble.n	8001106 <__aeabi_ui2f+0x42>
 8001102:	1f43      	subs	r3, r0, #5
 8001104:	409c      	lsls	r4, r3
 8001106:	0023      	movs	r3, r4
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <__aeabi_ui2f+0x7c>)
 800110a:	400b      	ands	r3, r1
 800110c:	0765      	lsls	r5, r4, #29
 800110e:	d009      	beq.n	8001124 <__aeabi_ui2f+0x60>
 8001110:	250f      	movs	r5, #15
 8001112:	402c      	ands	r4, r5
 8001114:	2c04      	cmp	r4, #4
 8001116:	d005      	beq.n	8001124 <__aeabi_ui2f+0x60>
 8001118:	3304      	adds	r3, #4
 800111a:	015c      	lsls	r4, r3, #5
 800111c:	d502      	bpl.n	8001124 <__aeabi_ui2f+0x60>
 800111e:	229f      	movs	r2, #159	; 0x9f
 8001120:	400b      	ands	r3, r1
 8001122:	1a12      	subs	r2, r2, r0
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	0a58      	lsrs	r0, r3, #9
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	0240      	lsls	r0, r0, #9
 800112c:	05d2      	lsls	r2, r2, #23
 800112e:	0a40      	lsrs	r0, r0, #9
 8001130:	4310      	orrs	r0, r2
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	2200      	movs	r2, #0
 8001136:	2000      	movs	r0, #0
 8001138:	e7f7      	b.n	800112a <__aeabi_ui2f+0x66>
 800113a:	0260      	lsls	r0, r4, #9
 800113c:	0a40      	lsrs	r0, r0, #9
 800113e:	e7f4      	b.n	800112a <__aeabi_ui2f+0x66>
 8001140:	fbffffff 	.word	0xfbffffff

08001144 <__aeabi_dadd>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464f      	mov	r7, r9
 8001148:	4646      	mov	r6, r8
 800114a:	46d6      	mov	lr, sl
 800114c:	000c      	movs	r4, r1
 800114e:	0309      	lsls	r1, r1, #12
 8001150:	b5c0      	push	{r6, r7, lr}
 8001152:	0a49      	lsrs	r1, r1, #9
 8001154:	0f47      	lsrs	r7, r0, #29
 8001156:	005e      	lsls	r6, r3, #1
 8001158:	4339      	orrs	r1, r7
 800115a:	031f      	lsls	r7, r3, #12
 800115c:	0fdb      	lsrs	r3, r3, #31
 800115e:	469c      	mov	ip, r3
 8001160:	0065      	lsls	r5, r4, #1
 8001162:	0a7b      	lsrs	r3, r7, #9
 8001164:	0f57      	lsrs	r7, r2, #29
 8001166:	431f      	orrs	r7, r3
 8001168:	0d6d      	lsrs	r5, r5, #21
 800116a:	0fe4      	lsrs	r4, r4, #31
 800116c:	0d76      	lsrs	r6, r6, #21
 800116e:	46a1      	mov	r9, r4
 8001170:	00c0      	lsls	r0, r0, #3
 8001172:	46b8      	mov	r8, r7
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	1bab      	subs	r3, r5, r6
 8001178:	4564      	cmp	r4, ip
 800117a:	d07b      	beq.n	8001274 <__aeabi_dadd+0x130>
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd5f      	ble.n	8001240 <__aeabi_dadd+0xfc>
 8001180:	2e00      	cmp	r6, #0
 8001182:	d000      	beq.n	8001186 <__aeabi_dadd+0x42>
 8001184:	e0a4      	b.n	80012d0 <__aeabi_dadd+0x18c>
 8001186:	003e      	movs	r6, r7
 8001188:	4316      	orrs	r6, r2
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x4a>
 800118c:	e112      	b.n	80013b4 <__aeabi_dadd+0x270>
 800118e:	1e5e      	subs	r6, r3, #1
 8001190:	2e00      	cmp	r6, #0
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x52>
 8001194:	e19e      	b.n	80014d4 <__aeabi_dadd+0x390>
 8001196:	1a87      	subs	r7, r0, r2
 8001198:	4643      	mov	r3, r8
 800119a:	42b8      	cmp	r0, r7
 800119c:	4180      	sbcs	r0, r0
 800119e:	2501      	movs	r5, #1
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	4240      	negs	r0, r0
 80011a4:	1a09      	subs	r1, r1, r0
 80011a6:	020b      	lsls	r3, r1, #8
 80011a8:	d400      	bmi.n	80011ac <__aeabi_dadd+0x68>
 80011aa:	e131      	b.n	8001410 <__aeabi_dadd+0x2cc>
 80011ac:	0249      	lsls	r1, r1, #9
 80011ae:	0a4e      	lsrs	r6, r1, #9
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x72>
 80011b4:	e16e      	b.n	8001494 <__aeabi_dadd+0x350>
 80011b6:	0030      	movs	r0, r6
 80011b8:	f001 fe38 	bl	8002e2c <__clzsi2>
 80011bc:	0003      	movs	r3, r0
 80011be:	3b08      	subs	r3, #8
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	dd00      	ble.n	80011c6 <__aeabi_dadd+0x82>
 80011c4:	e161      	b.n	800148a <__aeabi_dadd+0x346>
 80011c6:	2220      	movs	r2, #32
 80011c8:	0039      	movs	r1, r7
 80011ca:	1ad2      	subs	r2, r2, r3
 80011cc:	409e      	lsls	r6, r3
 80011ce:	40d1      	lsrs	r1, r2
 80011d0:	409f      	lsls	r7, r3
 80011d2:	430e      	orrs	r6, r1
 80011d4:	429d      	cmp	r5, r3
 80011d6:	dd00      	ble.n	80011da <__aeabi_dadd+0x96>
 80011d8:	e151      	b.n	800147e <__aeabi_dadd+0x33a>
 80011da:	1b5d      	subs	r5, r3, r5
 80011dc:	1c6b      	adds	r3, r5, #1
 80011de:	2b1f      	cmp	r3, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0xa0>
 80011e2:	e17c      	b.n	80014de <__aeabi_dadd+0x39a>
 80011e4:	2120      	movs	r1, #32
 80011e6:	1ac9      	subs	r1, r1, r3
 80011e8:	003d      	movs	r5, r7
 80011ea:	0030      	movs	r0, r6
 80011ec:	408f      	lsls	r7, r1
 80011ee:	4088      	lsls	r0, r1
 80011f0:	40dd      	lsrs	r5, r3
 80011f2:	1e79      	subs	r1, r7, #1
 80011f4:	418f      	sbcs	r7, r1
 80011f6:	0031      	movs	r1, r6
 80011f8:	2207      	movs	r2, #7
 80011fa:	4328      	orrs	r0, r5
 80011fc:	40d9      	lsrs	r1, r3
 80011fe:	2500      	movs	r5, #0
 8001200:	4307      	orrs	r7, r0
 8001202:	403a      	ands	r2, r7
 8001204:	2a00      	cmp	r2, #0
 8001206:	d009      	beq.n	800121c <__aeabi_dadd+0xd8>
 8001208:	230f      	movs	r3, #15
 800120a:	403b      	ands	r3, r7
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <__aeabi_dadd+0xd8>
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	42bb      	cmp	r3, r7
 8001214:	41bf      	sbcs	r7, r7
 8001216:	427f      	negs	r7, r7
 8001218:	19c9      	adds	r1, r1, r7
 800121a:	001f      	movs	r7, r3
 800121c:	020b      	lsls	r3, r1, #8
 800121e:	d400      	bmi.n	8001222 <__aeabi_dadd+0xde>
 8001220:	e226      	b.n	8001670 <__aeabi_dadd+0x52c>
 8001222:	1c6a      	adds	r2, r5, #1
 8001224:	4bc6      	ldr	r3, [pc, #792]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001226:	0555      	lsls	r5, r2, #21
 8001228:	0d6d      	lsrs	r5, r5, #21
 800122a:	429a      	cmp	r2, r3
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0xec>
 800122e:	e106      	b.n	800143e <__aeabi_dadd+0x2fa>
 8001230:	4ac4      	ldr	r2, [pc, #784]	; (8001544 <__aeabi_dadd+0x400>)
 8001232:	08ff      	lsrs	r7, r7, #3
 8001234:	400a      	ands	r2, r1
 8001236:	0753      	lsls	r3, r2, #29
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	433b      	orrs	r3, r7
 800123c:	0b12      	lsrs	r2, r2, #12
 800123e:	e08e      	b.n	800135e <__aeabi_dadd+0x21a>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x102>
 8001244:	e0b8      	b.n	80013b8 <__aeabi_dadd+0x274>
 8001246:	1c6b      	adds	r3, r5, #1
 8001248:	055b      	lsls	r3, r3, #21
 800124a:	0d5b      	lsrs	r3, r3, #21
 800124c:	2b01      	cmp	r3, #1
 800124e:	dc00      	bgt.n	8001252 <__aeabi_dadd+0x10e>
 8001250:	e130      	b.n	80014b4 <__aeabi_dadd+0x370>
 8001252:	1a87      	subs	r7, r0, r2
 8001254:	4643      	mov	r3, r8
 8001256:	42b8      	cmp	r0, r7
 8001258:	41b6      	sbcs	r6, r6
 800125a:	1acb      	subs	r3, r1, r3
 800125c:	4276      	negs	r6, r6
 800125e:	1b9e      	subs	r6, r3, r6
 8001260:	0233      	lsls	r3, r6, #8
 8001262:	d500      	bpl.n	8001266 <__aeabi_dadd+0x122>
 8001264:	e14c      	b.n	8001500 <__aeabi_dadd+0x3bc>
 8001266:	003b      	movs	r3, r7
 8001268:	4333      	orrs	r3, r6
 800126a:	d1a1      	bne.n	80011b0 <__aeabi_dadd+0x6c>
 800126c:	2200      	movs	r2, #0
 800126e:	2400      	movs	r4, #0
 8001270:	2500      	movs	r5, #0
 8001272:	e070      	b.n	8001356 <__aeabi_dadd+0x212>
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_dadd+0x136>
 8001278:	e0e5      	b.n	8001446 <__aeabi_dadd+0x302>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_dadd+0x13c>
 800127e:	e083      	b.n	8001388 <__aeabi_dadd+0x244>
 8001280:	4eaf      	ldr	r6, [pc, #700]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001282:	42b5      	cmp	r5, r6
 8001284:	d060      	beq.n	8001348 <__aeabi_dadd+0x204>
 8001286:	2680      	movs	r6, #128	; 0x80
 8001288:	0436      	lsls	r6, r6, #16
 800128a:	4337      	orrs	r7, r6
 800128c:	46b8      	mov	r8, r7
 800128e:	2b38      	cmp	r3, #56	; 0x38
 8001290:	dc00      	bgt.n	8001294 <__aeabi_dadd+0x150>
 8001292:	e13e      	b.n	8001512 <__aeabi_dadd+0x3ce>
 8001294:	4643      	mov	r3, r8
 8001296:	4313      	orrs	r3, r2
 8001298:	001f      	movs	r7, r3
 800129a:	1e7a      	subs	r2, r7, #1
 800129c:	4197      	sbcs	r7, r2
 800129e:	183f      	adds	r7, r7, r0
 80012a0:	4287      	cmp	r7, r0
 80012a2:	4180      	sbcs	r0, r0
 80012a4:	4240      	negs	r0, r0
 80012a6:	1809      	adds	r1, r1, r0
 80012a8:	020b      	lsls	r3, r1, #8
 80012aa:	d400      	bmi.n	80012ae <__aeabi_dadd+0x16a>
 80012ac:	e0b0      	b.n	8001410 <__aeabi_dadd+0x2cc>
 80012ae:	4ba4      	ldr	r3, [pc, #656]	; (8001540 <__aeabi_dadd+0x3fc>)
 80012b0:	3501      	adds	r5, #1
 80012b2:	429d      	cmp	r5, r3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x174>
 80012b6:	e0c3      	b.n	8001440 <__aeabi_dadd+0x2fc>
 80012b8:	4aa2      	ldr	r2, [pc, #648]	; (8001544 <__aeabi_dadd+0x400>)
 80012ba:	087b      	lsrs	r3, r7, #1
 80012bc:	400a      	ands	r2, r1
 80012be:	2101      	movs	r1, #1
 80012c0:	400f      	ands	r7, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	0851      	lsrs	r1, r2, #1
 80012c6:	07d3      	lsls	r3, r2, #31
 80012c8:	2207      	movs	r2, #7
 80012ca:	431f      	orrs	r7, r3
 80012cc:	403a      	ands	r2, r7
 80012ce:	e799      	b.n	8001204 <__aeabi_dadd+0xc0>
 80012d0:	4e9b      	ldr	r6, [pc, #620]	; (8001540 <__aeabi_dadd+0x3fc>)
 80012d2:	42b5      	cmp	r5, r6
 80012d4:	d038      	beq.n	8001348 <__aeabi_dadd+0x204>
 80012d6:	2680      	movs	r6, #128	; 0x80
 80012d8:	0436      	lsls	r6, r6, #16
 80012da:	4337      	orrs	r7, r6
 80012dc:	46b8      	mov	r8, r7
 80012de:	2b38      	cmp	r3, #56	; 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_dadd+0x1a0>
 80012e2:	e0dc      	b.n	800149e <__aeabi_dadd+0x35a>
 80012e4:	2b1f      	cmp	r3, #31
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_dadd+0x1a6>
 80012e8:	e130      	b.n	800154c <__aeabi_dadd+0x408>
 80012ea:	001e      	movs	r6, r3
 80012ec:	4647      	mov	r7, r8
 80012ee:	3e20      	subs	r6, #32
 80012f0:	40f7      	lsrs	r7, r6
 80012f2:	46bc      	mov	ip, r7
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d004      	beq.n	8001302 <__aeabi_dadd+0x1be>
 80012f8:	2640      	movs	r6, #64	; 0x40
 80012fa:	1af3      	subs	r3, r6, r3
 80012fc:	4646      	mov	r6, r8
 80012fe:	409e      	lsls	r6, r3
 8001300:	4332      	orrs	r2, r6
 8001302:	0017      	movs	r7, r2
 8001304:	4663      	mov	r3, ip
 8001306:	1e7a      	subs	r2, r7, #1
 8001308:	4197      	sbcs	r7, r2
 800130a:	431f      	orrs	r7, r3
 800130c:	e0cc      	b.n	80014a8 <__aeabi_dadd+0x364>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x1d0>
 8001312:	e204      	b.n	800171e <__aeabi_dadd+0x5da>
 8001314:	4643      	mov	r3, r8
 8001316:	4313      	orrs	r3, r2
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x1d8>
 800131a:	e159      	b.n	80015d0 <__aeabi_dadd+0x48c>
 800131c:	074b      	lsls	r3, r1, #29
 800131e:	08c0      	lsrs	r0, r0, #3
 8001320:	4318      	orrs	r0, r3
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	08c9      	lsrs	r1, r1, #3
 8001326:	031b      	lsls	r3, r3, #12
 8001328:	4219      	tst	r1, r3
 800132a:	d008      	beq.n	800133e <__aeabi_dadd+0x1fa>
 800132c:	4645      	mov	r5, r8
 800132e:	08ed      	lsrs	r5, r5, #3
 8001330:	421d      	tst	r5, r3
 8001332:	d104      	bne.n	800133e <__aeabi_dadd+0x1fa>
 8001334:	4643      	mov	r3, r8
 8001336:	08d0      	lsrs	r0, r2, #3
 8001338:	0759      	lsls	r1, r3, #29
 800133a:	4308      	orrs	r0, r1
 800133c:	0029      	movs	r1, r5
 800133e:	0f42      	lsrs	r2, r0, #29
 8001340:	00c9      	lsls	r1, r1, #3
 8001342:	4d7f      	ldr	r5, [pc, #508]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001344:	4311      	orrs	r1, r2
 8001346:	00c0      	lsls	r0, r0, #3
 8001348:	074b      	lsls	r3, r1, #29
 800134a:	08ca      	lsrs	r2, r1, #3
 800134c:	497c      	ldr	r1, [pc, #496]	; (8001540 <__aeabi_dadd+0x3fc>)
 800134e:	08c0      	lsrs	r0, r0, #3
 8001350:	4303      	orrs	r3, r0
 8001352:	428d      	cmp	r5, r1
 8001354:	d068      	beq.n	8001428 <__aeabi_dadd+0x2e4>
 8001356:	0312      	lsls	r2, r2, #12
 8001358:	056d      	lsls	r5, r5, #21
 800135a:	0b12      	lsrs	r2, r2, #12
 800135c:	0d6d      	lsrs	r5, r5, #21
 800135e:	2100      	movs	r1, #0
 8001360:	0312      	lsls	r2, r2, #12
 8001362:	0018      	movs	r0, r3
 8001364:	0b13      	lsrs	r3, r2, #12
 8001366:	0d0a      	lsrs	r2, r1, #20
 8001368:	0512      	lsls	r2, r2, #20
 800136a:	431a      	orrs	r2, r3
 800136c:	4b76      	ldr	r3, [pc, #472]	; (8001548 <__aeabi_dadd+0x404>)
 800136e:	052d      	lsls	r5, r5, #20
 8001370:	4013      	ands	r3, r2
 8001372:	432b      	orrs	r3, r5
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	07e4      	lsls	r4, r4, #31
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	4323      	orrs	r3, r4
 800137c:	0019      	movs	r1, r3
 800137e:	bc1c      	pop	{r2, r3, r4}
 8001380:	4690      	mov	r8, r2
 8001382:	4699      	mov	r9, r3
 8001384:	46a2      	mov	sl, r4
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	003e      	movs	r6, r7
 800138a:	4316      	orrs	r6, r2
 800138c:	d012      	beq.n	80013b4 <__aeabi_dadd+0x270>
 800138e:	1e5e      	subs	r6, r3, #1
 8001390:	2e00      	cmp	r6, #0
 8001392:	d000      	beq.n	8001396 <__aeabi_dadd+0x252>
 8001394:	e100      	b.n	8001598 <__aeabi_dadd+0x454>
 8001396:	1887      	adds	r7, r0, r2
 8001398:	4287      	cmp	r7, r0
 800139a:	4180      	sbcs	r0, r0
 800139c:	4441      	add	r1, r8
 800139e:	4240      	negs	r0, r0
 80013a0:	1809      	adds	r1, r1, r0
 80013a2:	2501      	movs	r5, #1
 80013a4:	020b      	lsls	r3, r1, #8
 80013a6:	d533      	bpl.n	8001410 <__aeabi_dadd+0x2cc>
 80013a8:	2502      	movs	r5, #2
 80013aa:	e785      	b.n	80012b8 <__aeabi_dadd+0x174>
 80013ac:	4664      	mov	r4, ip
 80013ae:	0033      	movs	r3, r6
 80013b0:	4641      	mov	r1, r8
 80013b2:	0010      	movs	r0, r2
 80013b4:	001d      	movs	r5, r3
 80013b6:	e7c7      	b.n	8001348 <__aeabi_dadd+0x204>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	d000      	beq.n	80013be <__aeabi_dadd+0x27a>
 80013bc:	e0da      	b.n	8001574 <__aeabi_dadd+0x430>
 80013be:	000c      	movs	r4, r1
 80013c0:	4304      	orrs	r4, r0
 80013c2:	d0f3      	beq.n	80013ac <__aeabi_dadd+0x268>
 80013c4:	1c5c      	adds	r4, r3, #1
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x286>
 80013c8:	e19f      	b.n	800170a <__aeabi_dadd+0x5c6>
 80013ca:	4c5d      	ldr	r4, [pc, #372]	; (8001540 <__aeabi_dadd+0x3fc>)
 80013cc:	42a6      	cmp	r6, r4
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x28e>
 80013d0:	e12f      	b.n	8001632 <__aeabi_dadd+0x4ee>
 80013d2:	43db      	mvns	r3, r3
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dd00      	ble.n	80013da <__aeabi_dadd+0x296>
 80013d8:	e166      	b.n	80016a8 <__aeabi_dadd+0x564>
 80013da:	2b1f      	cmp	r3, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dadd+0x29c>
 80013de:	e183      	b.n	80016e8 <__aeabi_dadd+0x5a4>
 80013e0:	2420      	movs	r4, #32
 80013e2:	0005      	movs	r5, r0
 80013e4:	1ae4      	subs	r4, r4, r3
 80013e6:	000f      	movs	r7, r1
 80013e8:	40dd      	lsrs	r5, r3
 80013ea:	40d9      	lsrs	r1, r3
 80013ec:	40a0      	lsls	r0, r4
 80013ee:	4643      	mov	r3, r8
 80013f0:	40a7      	lsls	r7, r4
 80013f2:	1a5b      	subs	r3, r3, r1
 80013f4:	1e44      	subs	r4, r0, #1
 80013f6:	41a0      	sbcs	r0, r4
 80013f8:	4698      	mov	r8, r3
 80013fa:	432f      	orrs	r7, r5
 80013fc:	4338      	orrs	r0, r7
 80013fe:	1a17      	subs	r7, r2, r0
 8001400:	42ba      	cmp	r2, r7
 8001402:	4192      	sbcs	r2, r2
 8001404:	4643      	mov	r3, r8
 8001406:	4252      	negs	r2, r2
 8001408:	1a99      	subs	r1, r3, r2
 800140a:	4664      	mov	r4, ip
 800140c:	0035      	movs	r5, r6
 800140e:	e6ca      	b.n	80011a6 <__aeabi_dadd+0x62>
 8001410:	2207      	movs	r2, #7
 8001412:	403a      	ands	r2, r7
 8001414:	2a00      	cmp	r2, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dadd+0x2d6>
 8001418:	e6f6      	b.n	8001208 <__aeabi_dadd+0xc4>
 800141a:	074b      	lsls	r3, r1, #29
 800141c:	08ca      	lsrs	r2, r1, #3
 800141e:	4948      	ldr	r1, [pc, #288]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001420:	08ff      	lsrs	r7, r7, #3
 8001422:	433b      	orrs	r3, r7
 8001424:	428d      	cmp	r5, r1
 8001426:	d196      	bne.n	8001356 <__aeabi_dadd+0x212>
 8001428:	0019      	movs	r1, r3
 800142a:	4311      	orrs	r1, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x2ec>
 800142e:	e19e      	b.n	800176e <__aeabi_dadd+0x62a>
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0309      	lsls	r1, r1, #12
 8001434:	430a      	orrs	r2, r1
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	0b12      	lsrs	r2, r2, #12
 800143a:	4d41      	ldr	r5, [pc, #260]	; (8001540 <__aeabi_dadd+0x3fc>)
 800143c:	e78f      	b.n	800135e <__aeabi_dadd+0x21a>
 800143e:	0015      	movs	r5, r2
 8001440:	2200      	movs	r2, #0
 8001442:	2300      	movs	r3, #0
 8001444:	e78b      	b.n	800135e <__aeabi_dadd+0x21a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x308>
 800144a:	e0c7      	b.n	80015dc <__aeabi_dadd+0x498>
 800144c:	1c6b      	adds	r3, r5, #1
 800144e:	055f      	lsls	r7, r3, #21
 8001450:	0d7f      	lsrs	r7, r7, #21
 8001452:	2f01      	cmp	r7, #1
 8001454:	dc00      	bgt.n	8001458 <__aeabi_dadd+0x314>
 8001456:	e0f1      	b.n	800163c <__aeabi_dadd+0x4f8>
 8001458:	4d39      	ldr	r5, [pc, #228]	; (8001540 <__aeabi_dadd+0x3fc>)
 800145a:	42ab      	cmp	r3, r5
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x31c>
 800145e:	e0b9      	b.n	80015d4 <__aeabi_dadd+0x490>
 8001460:	1885      	adds	r5, r0, r2
 8001462:	000a      	movs	r2, r1
 8001464:	4285      	cmp	r5, r0
 8001466:	4189      	sbcs	r1, r1
 8001468:	4442      	add	r2, r8
 800146a:	4249      	negs	r1, r1
 800146c:	1851      	adds	r1, r2, r1
 800146e:	2207      	movs	r2, #7
 8001470:	07cf      	lsls	r7, r1, #31
 8001472:	086d      	lsrs	r5, r5, #1
 8001474:	432f      	orrs	r7, r5
 8001476:	0849      	lsrs	r1, r1, #1
 8001478:	403a      	ands	r2, r7
 800147a:	001d      	movs	r5, r3
 800147c:	e6c2      	b.n	8001204 <__aeabi_dadd+0xc0>
 800147e:	2207      	movs	r2, #7
 8001480:	4930      	ldr	r1, [pc, #192]	; (8001544 <__aeabi_dadd+0x400>)
 8001482:	1aed      	subs	r5, r5, r3
 8001484:	4031      	ands	r1, r6
 8001486:	403a      	ands	r2, r7
 8001488:	e6bc      	b.n	8001204 <__aeabi_dadd+0xc0>
 800148a:	003e      	movs	r6, r7
 800148c:	3828      	subs	r0, #40	; 0x28
 800148e:	4086      	lsls	r6, r0
 8001490:	2700      	movs	r7, #0
 8001492:	e69f      	b.n	80011d4 <__aeabi_dadd+0x90>
 8001494:	0038      	movs	r0, r7
 8001496:	f001 fcc9 	bl	8002e2c <__clzsi2>
 800149a:	3020      	adds	r0, #32
 800149c:	e68e      	b.n	80011bc <__aeabi_dadd+0x78>
 800149e:	4643      	mov	r3, r8
 80014a0:	4313      	orrs	r3, r2
 80014a2:	001f      	movs	r7, r3
 80014a4:	1e7a      	subs	r2, r7, #1
 80014a6:	4197      	sbcs	r7, r2
 80014a8:	1bc7      	subs	r7, r0, r7
 80014aa:	42b8      	cmp	r0, r7
 80014ac:	4180      	sbcs	r0, r0
 80014ae:	4240      	negs	r0, r0
 80014b0:	1a09      	subs	r1, r1, r0
 80014b2:	e678      	b.n	80011a6 <__aeabi_dadd+0x62>
 80014b4:	000e      	movs	r6, r1
 80014b6:	003b      	movs	r3, r7
 80014b8:	4306      	orrs	r6, r0
 80014ba:	4313      	orrs	r3, r2
 80014bc:	2d00      	cmp	r5, #0
 80014be:	d161      	bne.n	8001584 <__aeabi_dadd+0x440>
 80014c0:	2e00      	cmp	r6, #0
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x382>
 80014c4:	e0f4      	b.n	80016b0 <__aeabi_dadd+0x56c>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x388>
 80014ca:	e11b      	b.n	8001704 <__aeabi_dadd+0x5c0>
 80014cc:	4664      	mov	r4, ip
 80014ce:	0039      	movs	r1, r7
 80014d0:	0010      	movs	r0, r2
 80014d2:	e739      	b.n	8001348 <__aeabi_dadd+0x204>
 80014d4:	4f1a      	ldr	r7, [pc, #104]	; (8001540 <__aeabi_dadd+0x3fc>)
 80014d6:	42bb      	cmp	r3, r7
 80014d8:	d07a      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 80014da:	0033      	movs	r3, r6
 80014dc:	e6ff      	b.n	80012de <__aeabi_dadd+0x19a>
 80014de:	0030      	movs	r0, r6
 80014e0:	3d1f      	subs	r5, #31
 80014e2:	40e8      	lsrs	r0, r5
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <__aeabi_dadd+0x3ac>
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	409e      	lsls	r6, r3
 80014ee:	4337      	orrs	r7, r6
 80014f0:	1e7b      	subs	r3, r7, #1
 80014f2:	419f      	sbcs	r7, r3
 80014f4:	2207      	movs	r2, #7
 80014f6:	4307      	orrs	r7, r0
 80014f8:	403a      	ands	r2, r7
 80014fa:	2100      	movs	r1, #0
 80014fc:	2500      	movs	r5, #0
 80014fe:	e789      	b.n	8001414 <__aeabi_dadd+0x2d0>
 8001500:	1a17      	subs	r7, r2, r0
 8001502:	4643      	mov	r3, r8
 8001504:	42ba      	cmp	r2, r7
 8001506:	41b6      	sbcs	r6, r6
 8001508:	1a59      	subs	r1, r3, r1
 800150a:	4276      	negs	r6, r6
 800150c:	1b8e      	subs	r6, r1, r6
 800150e:	4664      	mov	r4, ip
 8001510:	e64e      	b.n	80011b0 <__aeabi_dadd+0x6c>
 8001512:	2b1f      	cmp	r3, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0x3d4>
 8001516:	e0ad      	b.n	8001674 <__aeabi_dadd+0x530>
 8001518:	2620      	movs	r6, #32
 800151a:	4647      	mov	r7, r8
 800151c:	1af6      	subs	r6, r6, r3
 800151e:	40b7      	lsls	r7, r6
 8001520:	46b9      	mov	r9, r7
 8001522:	0017      	movs	r7, r2
 8001524:	46b2      	mov	sl, r6
 8001526:	40df      	lsrs	r7, r3
 8001528:	464e      	mov	r6, r9
 800152a:	433e      	orrs	r6, r7
 800152c:	0037      	movs	r7, r6
 800152e:	4656      	mov	r6, sl
 8001530:	40b2      	lsls	r2, r6
 8001532:	1e56      	subs	r6, r2, #1
 8001534:	41b2      	sbcs	r2, r6
 8001536:	4317      	orrs	r7, r2
 8001538:	4642      	mov	r2, r8
 800153a:	40da      	lsrs	r2, r3
 800153c:	1889      	adds	r1, r1, r2
 800153e:	e6ae      	b.n	800129e <__aeabi_dadd+0x15a>
 8001540:	000007ff 	.word	0x000007ff
 8001544:	ff7fffff 	.word	0xff7fffff
 8001548:	800fffff 	.word	0x800fffff
 800154c:	2620      	movs	r6, #32
 800154e:	4647      	mov	r7, r8
 8001550:	1af6      	subs	r6, r6, r3
 8001552:	40b7      	lsls	r7, r6
 8001554:	46b9      	mov	r9, r7
 8001556:	0017      	movs	r7, r2
 8001558:	46b2      	mov	sl, r6
 800155a:	40df      	lsrs	r7, r3
 800155c:	464e      	mov	r6, r9
 800155e:	433e      	orrs	r6, r7
 8001560:	0037      	movs	r7, r6
 8001562:	4656      	mov	r6, sl
 8001564:	40b2      	lsls	r2, r6
 8001566:	1e56      	subs	r6, r2, #1
 8001568:	41b2      	sbcs	r2, r6
 800156a:	4317      	orrs	r7, r2
 800156c:	4642      	mov	r2, r8
 800156e:	40da      	lsrs	r2, r3
 8001570:	1a89      	subs	r1, r1, r2
 8001572:	e799      	b.n	80014a8 <__aeabi_dadd+0x364>
 8001574:	4c7f      	ldr	r4, [pc, #508]	; (8001774 <__aeabi_dadd+0x630>)
 8001576:	42a6      	cmp	r6, r4
 8001578:	d05b      	beq.n	8001632 <__aeabi_dadd+0x4ee>
 800157a:	2480      	movs	r4, #128	; 0x80
 800157c:	0424      	lsls	r4, r4, #16
 800157e:	425b      	negs	r3, r3
 8001580:	4321      	orrs	r1, r4
 8001582:	e727      	b.n	80013d4 <__aeabi_dadd+0x290>
 8001584:	2e00      	cmp	r6, #0
 8001586:	d10c      	bne.n	80015a2 <__aeabi_dadd+0x45e>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x44a>
 800158c:	e0cb      	b.n	8001726 <__aeabi_dadd+0x5e2>
 800158e:	4664      	mov	r4, ip
 8001590:	0039      	movs	r1, r7
 8001592:	0010      	movs	r0, r2
 8001594:	4d77      	ldr	r5, [pc, #476]	; (8001774 <__aeabi_dadd+0x630>)
 8001596:	e6d7      	b.n	8001348 <__aeabi_dadd+0x204>
 8001598:	4f76      	ldr	r7, [pc, #472]	; (8001774 <__aeabi_dadd+0x630>)
 800159a:	42bb      	cmp	r3, r7
 800159c:	d018      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 800159e:	0033      	movs	r3, r6
 80015a0:	e675      	b.n	800128e <__aeabi_dadd+0x14a>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d014      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 80015a6:	074b      	lsls	r3, r1, #29
 80015a8:	08c0      	lsrs	r0, r0, #3
 80015aa:	4318      	orrs	r0, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	08c9      	lsrs	r1, r1, #3
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	4219      	tst	r1, r3
 80015b4:	d007      	beq.n	80015c6 <__aeabi_dadd+0x482>
 80015b6:	08fc      	lsrs	r4, r7, #3
 80015b8:	421c      	tst	r4, r3
 80015ba:	d104      	bne.n	80015c6 <__aeabi_dadd+0x482>
 80015bc:	0779      	lsls	r1, r7, #29
 80015be:	08d0      	lsrs	r0, r2, #3
 80015c0:	4308      	orrs	r0, r1
 80015c2:	46e1      	mov	r9, ip
 80015c4:	0021      	movs	r1, r4
 80015c6:	464c      	mov	r4, r9
 80015c8:	0f42      	lsrs	r2, r0, #29
 80015ca:	00c9      	lsls	r1, r1, #3
 80015cc:	4311      	orrs	r1, r2
 80015ce:	00c0      	lsls	r0, r0, #3
 80015d0:	4d68      	ldr	r5, [pc, #416]	; (8001774 <__aeabi_dadd+0x630>)
 80015d2:	e6b9      	b.n	8001348 <__aeabi_dadd+0x204>
 80015d4:	001d      	movs	r5, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	2300      	movs	r3, #0
 80015da:	e6c0      	b.n	800135e <__aeabi_dadd+0x21a>
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d15b      	bne.n	8001698 <__aeabi_dadd+0x554>
 80015e0:	000d      	movs	r5, r1
 80015e2:	4305      	orrs	r5, r0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x4a4>
 80015e6:	e6e2      	b.n	80013ae <__aeabi_dadd+0x26a>
 80015e8:	1c5d      	adds	r5, r3, #1
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x4aa>
 80015ec:	e0b0      	b.n	8001750 <__aeabi_dadd+0x60c>
 80015ee:	4d61      	ldr	r5, [pc, #388]	; (8001774 <__aeabi_dadd+0x630>)
 80015f0:	42ae      	cmp	r6, r5
 80015f2:	d01f      	beq.n	8001634 <__aeabi_dadd+0x4f0>
 80015f4:	43db      	mvns	r3, r3
 80015f6:	2b38      	cmp	r3, #56	; 0x38
 80015f8:	dc71      	bgt.n	80016de <__aeabi_dadd+0x59a>
 80015fa:	2b1f      	cmp	r3, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dadd+0x4bc>
 80015fe:	e096      	b.n	800172e <__aeabi_dadd+0x5ea>
 8001600:	2520      	movs	r5, #32
 8001602:	000f      	movs	r7, r1
 8001604:	1aed      	subs	r5, r5, r3
 8001606:	40af      	lsls	r7, r5
 8001608:	46b9      	mov	r9, r7
 800160a:	0007      	movs	r7, r0
 800160c:	46aa      	mov	sl, r5
 800160e:	40df      	lsrs	r7, r3
 8001610:	464d      	mov	r5, r9
 8001612:	433d      	orrs	r5, r7
 8001614:	002f      	movs	r7, r5
 8001616:	4655      	mov	r5, sl
 8001618:	40a8      	lsls	r0, r5
 800161a:	40d9      	lsrs	r1, r3
 800161c:	1e45      	subs	r5, r0, #1
 800161e:	41a8      	sbcs	r0, r5
 8001620:	4488      	add	r8, r1
 8001622:	4307      	orrs	r7, r0
 8001624:	18bf      	adds	r7, r7, r2
 8001626:	4297      	cmp	r7, r2
 8001628:	4192      	sbcs	r2, r2
 800162a:	4251      	negs	r1, r2
 800162c:	4441      	add	r1, r8
 800162e:	0035      	movs	r5, r6
 8001630:	e63a      	b.n	80012a8 <__aeabi_dadd+0x164>
 8001632:	4664      	mov	r4, ip
 8001634:	0035      	movs	r5, r6
 8001636:	4641      	mov	r1, r8
 8001638:	0010      	movs	r0, r2
 800163a:	e685      	b.n	8001348 <__aeabi_dadd+0x204>
 800163c:	000b      	movs	r3, r1
 800163e:	4303      	orrs	r3, r0
 8001640:	2d00      	cmp	r5, #0
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x502>
 8001644:	e663      	b.n	800130e <__aeabi_dadd+0x1ca>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f5      	beq.n	8001636 <__aeabi_dadd+0x4f2>
 800164a:	4643      	mov	r3, r8
 800164c:	4313      	orrs	r3, r2
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x50e>
 8001650:	e67a      	b.n	8001348 <__aeabi_dadd+0x204>
 8001652:	1887      	adds	r7, r0, r2
 8001654:	4287      	cmp	r7, r0
 8001656:	4180      	sbcs	r0, r0
 8001658:	2207      	movs	r2, #7
 800165a:	4441      	add	r1, r8
 800165c:	4240      	negs	r0, r0
 800165e:	1809      	adds	r1, r1, r0
 8001660:	403a      	ands	r2, r7
 8001662:	020b      	lsls	r3, r1, #8
 8001664:	d400      	bmi.n	8001668 <__aeabi_dadd+0x524>
 8001666:	e6d5      	b.n	8001414 <__aeabi_dadd+0x2d0>
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <__aeabi_dadd+0x634>)
 800166a:	3501      	adds	r5, #1
 800166c:	4019      	ands	r1, r3
 800166e:	e5c9      	b.n	8001204 <__aeabi_dadd+0xc0>
 8001670:	0038      	movs	r0, r7
 8001672:	e669      	b.n	8001348 <__aeabi_dadd+0x204>
 8001674:	001e      	movs	r6, r3
 8001676:	4647      	mov	r7, r8
 8001678:	3e20      	subs	r6, #32
 800167a:	40f7      	lsrs	r7, r6
 800167c:	46bc      	mov	ip, r7
 800167e:	2b20      	cmp	r3, #32
 8001680:	d004      	beq.n	800168c <__aeabi_dadd+0x548>
 8001682:	2640      	movs	r6, #64	; 0x40
 8001684:	1af3      	subs	r3, r6, r3
 8001686:	4646      	mov	r6, r8
 8001688:	409e      	lsls	r6, r3
 800168a:	4332      	orrs	r2, r6
 800168c:	0017      	movs	r7, r2
 800168e:	4663      	mov	r3, ip
 8001690:	1e7a      	subs	r2, r7, #1
 8001692:	4197      	sbcs	r7, r2
 8001694:	431f      	orrs	r7, r3
 8001696:	e602      	b.n	800129e <__aeabi_dadd+0x15a>
 8001698:	4d36      	ldr	r5, [pc, #216]	; (8001774 <__aeabi_dadd+0x630>)
 800169a:	42ae      	cmp	r6, r5
 800169c:	d0ca      	beq.n	8001634 <__aeabi_dadd+0x4f0>
 800169e:	2580      	movs	r5, #128	; 0x80
 80016a0:	042d      	lsls	r5, r5, #16
 80016a2:	425b      	negs	r3, r3
 80016a4:	4329      	orrs	r1, r5
 80016a6:	e7a6      	b.n	80015f6 <__aeabi_dadd+0x4b2>
 80016a8:	4308      	orrs	r0, r1
 80016aa:	1e41      	subs	r1, r0, #1
 80016ac:	4188      	sbcs	r0, r1
 80016ae:	e6a6      	b.n	80013fe <__aeabi_dadd+0x2ba>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x572>
 80016b4:	e648      	b.n	8001348 <__aeabi_dadd+0x204>
 80016b6:	1a87      	subs	r7, r0, r2
 80016b8:	4643      	mov	r3, r8
 80016ba:	42b8      	cmp	r0, r7
 80016bc:	41b6      	sbcs	r6, r6
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	4276      	negs	r6, r6
 80016c2:	1b9e      	subs	r6, r3, r6
 80016c4:	0233      	lsls	r3, r6, #8
 80016c6:	d54b      	bpl.n	8001760 <__aeabi_dadd+0x61c>
 80016c8:	1a17      	subs	r7, r2, r0
 80016ca:	4643      	mov	r3, r8
 80016cc:	42ba      	cmp	r2, r7
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	1a59      	subs	r1, r3, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	1a89      	subs	r1, r1, r2
 80016d6:	2207      	movs	r2, #7
 80016d8:	4664      	mov	r4, ip
 80016da:	403a      	ands	r2, r7
 80016dc:	e592      	b.n	8001204 <__aeabi_dadd+0xc0>
 80016de:	4301      	orrs	r1, r0
 80016e0:	000f      	movs	r7, r1
 80016e2:	1e79      	subs	r1, r7, #1
 80016e4:	418f      	sbcs	r7, r1
 80016e6:	e79d      	b.n	8001624 <__aeabi_dadd+0x4e0>
 80016e8:	001c      	movs	r4, r3
 80016ea:	000f      	movs	r7, r1
 80016ec:	3c20      	subs	r4, #32
 80016ee:	40e7      	lsrs	r7, r4
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d003      	beq.n	80016fc <__aeabi_dadd+0x5b8>
 80016f4:	2440      	movs	r4, #64	; 0x40
 80016f6:	1ae3      	subs	r3, r4, r3
 80016f8:	4099      	lsls	r1, r3
 80016fa:	4308      	orrs	r0, r1
 80016fc:	1e41      	subs	r1, r0, #1
 80016fe:	4188      	sbcs	r0, r1
 8001700:	4338      	orrs	r0, r7
 8001702:	e67c      	b.n	80013fe <__aeabi_dadd+0x2ba>
 8001704:	2200      	movs	r2, #0
 8001706:	2400      	movs	r4, #0
 8001708:	e625      	b.n	8001356 <__aeabi_dadd+0x212>
 800170a:	1a17      	subs	r7, r2, r0
 800170c:	4643      	mov	r3, r8
 800170e:	42ba      	cmp	r2, r7
 8001710:	4192      	sbcs	r2, r2
 8001712:	1a59      	subs	r1, r3, r1
 8001714:	4252      	negs	r2, r2
 8001716:	1a89      	subs	r1, r1, r2
 8001718:	4664      	mov	r4, ip
 800171a:	0035      	movs	r5, r6
 800171c:	e543      	b.n	80011a6 <__aeabi_dadd+0x62>
 800171e:	4641      	mov	r1, r8
 8001720:	0010      	movs	r0, r2
 8001722:	4d14      	ldr	r5, [pc, #80]	; (8001774 <__aeabi_dadd+0x630>)
 8001724:	e610      	b.n	8001348 <__aeabi_dadd+0x204>
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	2400      	movs	r4, #0
 800172a:	0312      	lsls	r2, r2, #12
 800172c:	e680      	b.n	8001430 <__aeabi_dadd+0x2ec>
 800172e:	001d      	movs	r5, r3
 8001730:	000f      	movs	r7, r1
 8001732:	3d20      	subs	r5, #32
 8001734:	40ef      	lsrs	r7, r5
 8001736:	46bc      	mov	ip, r7
 8001738:	2b20      	cmp	r3, #32
 800173a:	d003      	beq.n	8001744 <__aeabi_dadd+0x600>
 800173c:	2540      	movs	r5, #64	; 0x40
 800173e:	1aeb      	subs	r3, r5, r3
 8001740:	4099      	lsls	r1, r3
 8001742:	4308      	orrs	r0, r1
 8001744:	0007      	movs	r7, r0
 8001746:	4663      	mov	r3, ip
 8001748:	1e78      	subs	r0, r7, #1
 800174a:	4187      	sbcs	r7, r0
 800174c:	431f      	orrs	r7, r3
 800174e:	e769      	b.n	8001624 <__aeabi_dadd+0x4e0>
 8001750:	1887      	adds	r7, r0, r2
 8001752:	4297      	cmp	r7, r2
 8001754:	419b      	sbcs	r3, r3
 8001756:	4441      	add	r1, r8
 8001758:	425b      	negs	r3, r3
 800175a:	18c9      	adds	r1, r1, r3
 800175c:	0035      	movs	r5, r6
 800175e:	e5a3      	b.n	80012a8 <__aeabi_dadd+0x164>
 8001760:	003b      	movs	r3, r7
 8001762:	4333      	orrs	r3, r6
 8001764:	d0ce      	beq.n	8001704 <__aeabi_dadd+0x5c0>
 8001766:	2207      	movs	r2, #7
 8001768:	0031      	movs	r1, r6
 800176a:	403a      	ands	r2, r7
 800176c:	e652      	b.n	8001414 <__aeabi_dadd+0x2d0>
 800176e:	2300      	movs	r3, #0
 8001770:	001a      	movs	r2, r3
 8001772:	e5f4      	b.n	800135e <__aeabi_dadd+0x21a>
 8001774:	000007ff 	.word	0x000007ff
 8001778:	ff7fffff 	.word	0xff7fffff

0800177c <__aeabi_ddiv>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	4657      	mov	r7, sl
 8001780:	46de      	mov	lr, fp
 8001782:	464e      	mov	r6, r9
 8001784:	4645      	mov	r5, r8
 8001786:	b5e0      	push	{r5, r6, r7, lr}
 8001788:	4683      	mov	fp, r0
 800178a:	0007      	movs	r7, r0
 800178c:	030e      	lsls	r6, r1, #12
 800178e:	0048      	lsls	r0, r1, #1
 8001790:	b085      	sub	sp, #20
 8001792:	4692      	mov	sl, r2
 8001794:	001c      	movs	r4, r3
 8001796:	0b36      	lsrs	r6, r6, #12
 8001798:	0d40      	lsrs	r0, r0, #21
 800179a:	0fcd      	lsrs	r5, r1, #31
 800179c:	2800      	cmp	r0, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_ddiv+0x26>
 80017a0:	e09d      	b.n	80018de <__aeabi_ddiv+0x162>
 80017a2:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80017a4:	4298      	cmp	r0, r3
 80017a6:	d039      	beq.n	800181c <__aeabi_ddiv+0xa0>
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	00f6      	lsls	r6, r6, #3
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431e      	orrs	r6, r3
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <__aeabi_ddiv+0x280>)
 80017b2:	0f7b      	lsrs	r3, r7, #29
 80017b4:	4333      	orrs	r3, r6
 80017b6:	4699      	mov	r9, r3
 80017b8:	4694      	mov	ip, r2
 80017ba:	0003      	movs	r3, r0
 80017bc:	4463      	add	r3, ip
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2600      	movs	r6, #0
 80017c4:	00ff      	lsls	r7, r7, #3
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	0323      	lsls	r3, r4, #12
 80017ca:	0b1b      	lsrs	r3, r3, #12
 80017cc:	4698      	mov	r8, r3
 80017ce:	0063      	lsls	r3, r4, #1
 80017d0:	0fe4      	lsrs	r4, r4, #31
 80017d2:	4652      	mov	r2, sl
 80017d4:	0d5b      	lsrs	r3, r3, #21
 80017d6:	9401      	str	r4, [sp, #4]
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x60>
 80017da:	e0b3      	b.n	8001944 <__aeabi_ddiv+0x1c8>
 80017dc:	4986      	ldr	r1, [pc, #536]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80017de:	428b      	cmp	r3, r1
 80017e0:	d100      	bne.n	80017e4 <__aeabi_ddiv+0x68>
 80017e2:	e09e      	b.n	8001922 <__aeabi_ddiv+0x1a6>
 80017e4:	4642      	mov	r2, r8
 80017e6:	00d1      	lsls	r1, r2, #3
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0412      	lsls	r2, r2, #16
 80017ec:	430a      	orrs	r2, r1
 80017ee:	4651      	mov	r1, sl
 80017f0:	0f49      	lsrs	r1, r1, #29
 80017f2:	4311      	orrs	r1, r2
 80017f4:	468b      	mov	fp, r1
 80017f6:	4981      	ldr	r1, [pc, #516]	; (80019fc <__aeabi_ddiv+0x280>)
 80017f8:	4652      	mov	r2, sl
 80017fa:	468c      	mov	ip, r1
 80017fc:	9900      	ldr	r1, [sp, #0]
 80017fe:	4463      	add	r3, ip
 8001800:	1acb      	subs	r3, r1, r3
 8001802:	2100      	movs	r1, #0
 8001804:	00d2      	lsls	r2, r2, #3
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	002b      	movs	r3, r5
 800180a:	4063      	eors	r3, r4
 800180c:	469a      	mov	sl, r3
 800180e:	2e0f      	cmp	r6, #15
 8001810:	d900      	bls.n	8001814 <__aeabi_ddiv+0x98>
 8001812:	e105      	b.n	8001a20 <__aeabi_ddiv+0x2a4>
 8001814:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <__aeabi_ddiv+0x284>)
 8001816:	00b6      	lsls	r6, r6, #2
 8001818:	599b      	ldr	r3, [r3, r6]
 800181a:	469f      	mov	pc, r3
 800181c:	465b      	mov	r3, fp
 800181e:	4333      	orrs	r3, r6
 8001820:	4699      	mov	r9, r3
 8001822:	d000      	beq.n	8001826 <__aeabi_ddiv+0xaa>
 8001824:	e0b8      	b.n	8001998 <__aeabi_ddiv+0x21c>
 8001826:	2302      	movs	r3, #2
 8001828:	2608      	movs	r6, #8
 800182a:	2700      	movs	r7, #0
 800182c:	9000      	str	r0, [sp, #0]
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	e7ca      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 8001832:	46cb      	mov	fp, r9
 8001834:	003a      	movs	r2, r7
 8001836:	9902      	ldr	r1, [sp, #8]
 8001838:	9501      	str	r5, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	469a      	mov	sl, r3
 800183e:	2902      	cmp	r1, #2
 8001840:	d027      	beq.n	8001892 <__aeabi_ddiv+0x116>
 8001842:	2903      	cmp	r1, #3
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0xcc>
 8001846:	e280      	b.n	8001d4a <__aeabi_ddiv+0x5ce>
 8001848:	2901      	cmp	r1, #1
 800184a:	d044      	beq.n	80018d6 <__aeabi_ddiv+0x15a>
 800184c:	496d      	ldr	r1, [pc, #436]	; (8001a04 <__aeabi_ddiv+0x288>)
 800184e:	9b00      	ldr	r3, [sp, #0]
 8001850:	468c      	mov	ip, r1
 8001852:	4463      	add	r3, ip
 8001854:	001c      	movs	r4, r3
 8001856:	2c00      	cmp	r4, #0
 8001858:	dd38      	ble.n	80018cc <__aeabi_ddiv+0x150>
 800185a:	0753      	lsls	r3, r2, #29
 800185c:	d000      	beq.n	8001860 <__aeabi_ddiv+0xe4>
 800185e:	e213      	b.n	8001c88 <__aeabi_ddiv+0x50c>
 8001860:	08d2      	lsrs	r2, r2, #3
 8001862:	465b      	mov	r3, fp
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	d509      	bpl.n	800187c <__aeabi_ddiv+0x100>
 8001868:	4659      	mov	r1, fp
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <__aeabi_ddiv+0x28c>)
 800186c:	4019      	ands	r1, r3
 800186e:	468b      	mov	fp, r1
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	468c      	mov	ip, r1
 8001876:	9b00      	ldr	r3, [sp, #0]
 8001878:	4463      	add	r3, ip
 800187a:	001c      	movs	r4, r3
 800187c:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <__aeabi_ddiv+0x290>)
 800187e:	429c      	cmp	r4, r3
 8001880:	dc07      	bgt.n	8001892 <__aeabi_ddiv+0x116>
 8001882:	465b      	mov	r3, fp
 8001884:	0564      	lsls	r4, r4, #21
 8001886:	075f      	lsls	r7, r3, #29
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4317      	orrs	r7, r2
 800188c:	0b1b      	lsrs	r3, r3, #12
 800188e:	0d62      	lsrs	r2, r4, #21
 8001890:	e002      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001892:	2300      	movs	r3, #0
 8001894:	2700      	movs	r7, #0
 8001896:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <__aeabi_ddiv+0x27c>)
 8001898:	2100      	movs	r1, #0
 800189a:	031b      	lsls	r3, r3, #12
 800189c:	0b1c      	lsrs	r4, r3, #12
 800189e:	0d0b      	lsrs	r3, r1, #20
 80018a0:	051b      	lsls	r3, r3, #20
 80018a2:	4323      	orrs	r3, r4
 80018a4:	0514      	lsls	r4, r2, #20
 80018a6:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <__aeabi_ddiv+0x294>)
 80018a8:	0038      	movs	r0, r7
 80018aa:	4013      	ands	r3, r2
 80018ac:	431c      	orrs	r4, r3
 80018ae:	4653      	mov	r3, sl
 80018b0:	0064      	lsls	r4, r4, #1
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	0864      	lsrs	r4, r4, #1
 80018b6:	431c      	orrs	r4, r3
 80018b8:	0021      	movs	r1, r4
 80018ba:	b005      	add	sp, #20
 80018bc:	bc3c      	pop	{r2, r3, r4, r5}
 80018be:	4690      	mov	r8, r2
 80018c0:	4699      	mov	r9, r3
 80018c2:	46a2      	mov	sl, r4
 80018c4:	46ab      	mov	fp, r5
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	2201      	movs	r2, #1
 80018ca:	4252      	negs	r2, r2
 80018cc:	2301      	movs	r3, #1
 80018ce:	1b1b      	subs	r3, r3, r4
 80018d0:	2b38      	cmp	r3, #56	; 0x38
 80018d2:	dc00      	bgt.n	80018d6 <__aeabi_ddiv+0x15a>
 80018d4:	e1ad      	b.n	8001c32 <__aeabi_ddiv+0x4b6>
 80018d6:	2200      	movs	r2, #0
 80018d8:	2300      	movs	r3, #0
 80018da:	2700      	movs	r7, #0
 80018dc:	e7dc      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80018de:	465b      	mov	r3, fp
 80018e0:	4333      	orrs	r3, r6
 80018e2:	4699      	mov	r9, r3
 80018e4:	d05e      	beq.n	80019a4 <__aeabi_ddiv+0x228>
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x170>
 80018ea:	e18a      	b.n	8001c02 <__aeabi_ddiv+0x486>
 80018ec:	0030      	movs	r0, r6
 80018ee:	f001 fa9d 	bl	8002e2c <__clzsi2>
 80018f2:	0003      	movs	r3, r0
 80018f4:	3b0b      	subs	r3, #11
 80018f6:	2b1c      	cmp	r3, #28
 80018f8:	dd00      	ble.n	80018fc <__aeabi_ddiv+0x180>
 80018fa:	e17b      	b.n	8001bf4 <__aeabi_ddiv+0x478>
 80018fc:	221d      	movs	r2, #29
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	465a      	mov	r2, fp
 8001902:	0001      	movs	r1, r0
 8001904:	40da      	lsrs	r2, r3
 8001906:	3908      	subs	r1, #8
 8001908:	408e      	lsls	r6, r1
 800190a:	0013      	movs	r3, r2
 800190c:	465f      	mov	r7, fp
 800190e:	4333      	orrs	r3, r6
 8001910:	4699      	mov	r9, r3
 8001912:	408f      	lsls	r7, r1
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <__aeabi_ddiv+0x298>)
 8001916:	2600      	movs	r6, #0
 8001918:	1a1b      	subs	r3, r3, r0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	e752      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 8001922:	4641      	mov	r1, r8
 8001924:	4653      	mov	r3, sl
 8001926:	430b      	orrs	r3, r1
 8001928:	493b      	ldr	r1, [pc, #236]	; (8001a18 <__aeabi_ddiv+0x29c>)
 800192a:	469b      	mov	fp, r3
 800192c:	468c      	mov	ip, r1
 800192e:	9b00      	ldr	r3, [sp, #0]
 8001930:	4463      	add	r3, ip
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	465b      	mov	r3, fp
 8001936:	2b00      	cmp	r3, #0
 8001938:	d13b      	bne.n	80019b2 <__aeabi_ddiv+0x236>
 800193a:	2302      	movs	r3, #2
 800193c:	2200      	movs	r2, #0
 800193e:	431e      	orrs	r6, r3
 8001940:	2102      	movs	r1, #2
 8001942:	e761      	b.n	8001808 <__aeabi_ddiv+0x8c>
 8001944:	4643      	mov	r3, r8
 8001946:	4313      	orrs	r3, r2
 8001948:	469b      	mov	fp, r3
 800194a:	d037      	beq.n	80019bc <__aeabi_ddiv+0x240>
 800194c:	4643      	mov	r3, r8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <__aeabi_ddiv+0x1d8>
 8001952:	e162      	b.n	8001c1a <__aeabi_ddiv+0x49e>
 8001954:	4640      	mov	r0, r8
 8001956:	f001 fa69 	bl	8002e2c <__clzsi2>
 800195a:	0003      	movs	r3, r0
 800195c:	3b0b      	subs	r3, #11
 800195e:	2b1c      	cmp	r3, #28
 8001960:	dd00      	ble.n	8001964 <__aeabi_ddiv+0x1e8>
 8001962:	e153      	b.n	8001c0c <__aeabi_ddiv+0x490>
 8001964:	0002      	movs	r2, r0
 8001966:	4641      	mov	r1, r8
 8001968:	3a08      	subs	r2, #8
 800196a:	4091      	lsls	r1, r2
 800196c:	4688      	mov	r8, r1
 800196e:	211d      	movs	r1, #29
 8001970:	1acb      	subs	r3, r1, r3
 8001972:	4651      	mov	r1, sl
 8001974:	40d9      	lsrs	r1, r3
 8001976:	000b      	movs	r3, r1
 8001978:	4641      	mov	r1, r8
 800197a:	430b      	orrs	r3, r1
 800197c:	469b      	mov	fp, r3
 800197e:	4653      	mov	r3, sl
 8001980:	4093      	lsls	r3, r2
 8001982:	001a      	movs	r2, r3
 8001984:	9b00      	ldr	r3, [sp, #0]
 8001986:	4925      	ldr	r1, [pc, #148]	; (8001a1c <__aeabi_ddiv+0x2a0>)
 8001988:	469c      	mov	ip, r3
 800198a:	4460      	add	r0, ip
 800198c:	0003      	movs	r3, r0
 800198e:	468c      	mov	ip, r1
 8001990:	4463      	add	r3, ip
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	e737      	b.n	8001808 <__aeabi_ddiv+0x8c>
 8001998:	2303      	movs	r3, #3
 800199a:	46b1      	mov	r9, r6
 800199c:	9000      	str	r0, [sp, #0]
 800199e:	260c      	movs	r6, #12
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	e711      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	2604      	movs	r6, #4
 80019ac:	2700      	movs	r7, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	e70a      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 80019b2:	2303      	movs	r3, #3
 80019b4:	46c3      	mov	fp, r8
 80019b6:	431e      	orrs	r6, r3
 80019b8:	2103      	movs	r1, #3
 80019ba:	e725      	b.n	8001808 <__aeabi_ddiv+0x8c>
 80019bc:	3301      	adds	r3, #1
 80019be:	431e      	orrs	r6, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	2101      	movs	r1, #1
 80019c4:	e720      	b.n	8001808 <__aeabi_ddiv+0x8c>
 80019c6:	2300      	movs	r3, #0
 80019c8:	469a      	mov	sl, r3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	2700      	movs	r7, #0
 80019ce:	031b      	lsls	r3, r3, #12
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80019d2:	e761      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	4649      	mov	r1, r9
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4219      	tst	r1, r3
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x264>
 80019de:	e0e2      	b.n	8001ba6 <__aeabi_ddiv+0x42a>
 80019e0:	4659      	mov	r1, fp
 80019e2:	4219      	tst	r1, r3
 80019e4:	d000      	beq.n	80019e8 <__aeabi_ddiv+0x26c>
 80019e6:	e0de      	b.n	8001ba6 <__aeabi_ddiv+0x42a>
 80019e8:	430b      	orrs	r3, r1
 80019ea:	031b      	lsls	r3, r3, #12
 80019ec:	0017      	movs	r7, r2
 80019ee:	0b1b      	lsrs	r3, r3, #12
 80019f0:	46a2      	mov	sl, r4
 80019f2:	4a01      	ldr	r2, [pc, #4]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80019f4:	e750      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	000007ff 	.word	0x000007ff
 80019fc:	fffffc01 	.word	0xfffffc01
 8001a00:	08017594 	.word	0x08017594
 8001a04:	000003ff 	.word	0x000003ff
 8001a08:	feffffff 	.word	0xfeffffff
 8001a0c:	000007fe 	.word	0x000007fe
 8001a10:	800fffff 	.word	0x800fffff
 8001a14:	fffffc0d 	.word	0xfffffc0d
 8001a18:	fffff801 	.word	0xfffff801
 8001a1c:	000003f3 	.word	0x000003f3
 8001a20:	45d9      	cmp	r9, fp
 8001a22:	d900      	bls.n	8001a26 <__aeabi_ddiv+0x2aa>
 8001a24:	e0cb      	b.n	8001bbe <__aeabi_ddiv+0x442>
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x2ae>
 8001a28:	e0c6      	b.n	8001bb8 <__aeabi_ddiv+0x43c>
 8001a2a:	003c      	movs	r4, r7
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	2700      	movs	r7, #0
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	465b      	mov	r3, fp
 8001a38:	0e16      	lsrs	r6, r2, #24
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	431e      	orrs	r6, r3
 8001a3e:	0213      	lsls	r3, r2, #8
 8001a40:	4698      	mov	r8, r3
 8001a42:	0433      	lsls	r3, r6, #16
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	4699      	mov	r9, r3
 8001a48:	0c31      	lsrs	r1, r6, #16
 8001a4a:	9101      	str	r1, [sp, #4]
 8001a4c:	f7fe fbfc 	bl	8000248 <__aeabi_uidivmod>
 8001a50:	464a      	mov	r2, r9
 8001a52:	4342      	muls	r2, r0
 8001a54:	040b      	lsls	r3, r1, #16
 8001a56:	0c21      	lsrs	r1, r4, #16
 8001a58:	0005      	movs	r5, r0
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d907      	bls.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a60:	1989      	adds	r1, r1, r6
 8001a62:	3d01      	subs	r5, #1
 8001a64:	428e      	cmp	r6, r1
 8001a66:	d803      	bhi.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d901      	bls.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a6c:	1e85      	subs	r5, r0, #2
 8001a6e:	1989      	adds	r1, r1, r6
 8001a70:	1a88      	subs	r0, r1, r2
 8001a72:	9901      	ldr	r1, [sp, #4]
 8001a74:	f7fe fbe8 	bl	8000248 <__aeabi_uidivmod>
 8001a78:	0409      	lsls	r1, r1, #16
 8001a7a:	468c      	mov	ip, r1
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	0421      	lsls	r1, r4, #16
 8001a80:	4664      	mov	r4, ip
 8001a82:	4342      	muls	r2, r0
 8001a84:	0c09      	lsrs	r1, r1, #16
 8001a86:	0003      	movs	r3, r0
 8001a88:	4321      	orrs	r1, r4
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d904      	bls.n	8001a98 <__aeabi_ddiv+0x31c>
 8001a8e:	1989      	adds	r1, r1, r6
 8001a90:	3b01      	subs	r3, #1
 8001a92:	428e      	cmp	r6, r1
 8001a94:	d800      	bhi.n	8001a98 <__aeabi_ddiv+0x31c>
 8001a96:	e0f1      	b.n	8001c7c <__aeabi_ddiv+0x500>
 8001a98:	042d      	lsls	r5, r5, #16
 8001a9a:	431d      	orrs	r5, r3
 8001a9c:	46ab      	mov	fp, r5
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	1a89      	subs	r1, r1, r2
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	0c28      	lsrs	r0, r5, #16
 8001aa6:	0412      	lsls	r2, r2, #16
 8001aa8:	0c1d      	lsrs	r5, r3, #16
 8001aaa:	465b      	mov	r3, fp
 8001aac:	0c14      	lsrs	r4, r2, #16
 8001aae:	0022      	movs	r2, r4
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	435a      	muls	r2, r3
 8001ab6:	9403      	str	r4, [sp, #12]
 8001ab8:	436b      	muls	r3, r5
 8001aba:	4344      	muls	r4, r0
 8001abc:	9502      	str	r5, [sp, #8]
 8001abe:	4368      	muls	r0, r5
 8001ac0:	191b      	adds	r3, r3, r4
 8001ac2:	0c15      	lsrs	r5, r2, #16
 8001ac4:	18eb      	adds	r3, r5, r3
 8001ac6:	429c      	cmp	r4, r3
 8001ac8:	d903      	bls.n	8001ad2 <__aeabi_ddiv+0x356>
 8001aca:	2480      	movs	r4, #128	; 0x80
 8001acc:	0264      	lsls	r4, r4, #9
 8001ace:	46a4      	mov	ip, r4
 8001ad0:	4460      	add	r0, ip
 8001ad2:	0c1c      	lsrs	r4, r3, #16
 8001ad4:	0415      	lsls	r5, r2, #16
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	0c2d      	lsrs	r5, r5, #16
 8001ada:	1820      	adds	r0, r4, r0
 8001adc:	195d      	adds	r5, r3, r5
 8001ade:	4281      	cmp	r1, r0
 8001ae0:	d377      	bcc.n	8001bd2 <__aeabi_ddiv+0x456>
 8001ae2:	d073      	beq.n	8001bcc <__aeabi_ddiv+0x450>
 8001ae4:	1a0c      	subs	r4, r1, r0
 8001ae6:	4aa2      	ldr	r2, [pc, #648]	; (8001d70 <__aeabi_ddiv+0x5f4>)
 8001ae8:	1b7d      	subs	r5, r7, r5
 8001aea:	42af      	cmp	r7, r5
 8001aec:	41bf      	sbcs	r7, r7
 8001aee:	4694      	mov	ip, r2
 8001af0:	9b00      	ldr	r3, [sp, #0]
 8001af2:	427f      	negs	r7, r7
 8001af4:	4463      	add	r3, ip
 8001af6:	1be0      	subs	r0, r4, r7
 8001af8:	001c      	movs	r4, r3
 8001afa:	4286      	cmp	r6, r0
 8001afc:	d100      	bne.n	8001b00 <__aeabi_ddiv+0x384>
 8001afe:	e0db      	b.n	8001cb8 <__aeabi_ddiv+0x53c>
 8001b00:	9901      	ldr	r1, [sp, #4]
 8001b02:	f7fe fba1 	bl	8000248 <__aeabi_uidivmod>
 8001b06:	464a      	mov	r2, r9
 8001b08:	4342      	muls	r2, r0
 8001b0a:	040b      	lsls	r3, r1, #16
 8001b0c:	0c29      	lsrs	r1, r5, #16
 8001b0e:	0007      	movs	r7, r0
 8001b10:	4319      	orrs	r1, r3
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d907      	bls.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b16:	1989      	adds	r1, r1, r6
 8001b18:	3f01      	subs	r7, #1
 8001b1a:	428e      	cmp	r6, r1
 8001b1c:	d803      	bhi.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d901      	bls.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b22:	1e87      	subs	r7, r0, #2
 8001b24:	1989      	adds	r1, r1, r6
 8001b26:	1a88      	subs	r0, r1, r2
 8001b28:	9901      	ldr	r1, [sp, #4]
 8001b2a:	f7fe fb8d 	bl	8000248 <__aeabi_uidivmod>
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	464a      	mov	r2, r9
 8001b32:	4689      	mov	r9, r1
 8001b34:	0429      	lsls	r1, r5, #16
 8001b36:	464d      	mov	r5, r9
 8001b38:	4342      	muls	r2, r0
 8001b3a:	0c09      	lsrs	r1, r1, #16
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	4329      	orrs	r1, r5
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d907      	bls.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b44:	1989      	adds	r1, r1, r6
 8001b46:	3b01      	subs	r3, #1
 8001b48:	428e      	cmp	r6, r1
 8001b4a:	d803      	bhi.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b4c:	428a      	cmp	r2, r1
 8001b4e:	d901      	bls.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b50:	1e83      	subs	r3, r0, #2
 8001b52:	1989      	adds	r1, r1, r6
 8001b54:	043f      	lsls	r7, r7, #16
 8001b56:	1a89      	subs	r1, r1, r2
 8001b58:	003a      	movs	r2, r7
 8001b5a:	9f03      	ldr	r7, [sp, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	0038      	movs	r0, r7
 8001b60:	0413      	lsls	r3, r2, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	4358      	muls	r0, r3
 8001b66:	4681      	mov	r9, r0
 8001b68:	9802      	ldr	r0, [sp, #8]
 8001b6a:	0c15      	lsrs	r5, r2, #16
 8001b6c:	436f      	muls	r7, r5
 8001b6e:	4343      	muls	r3, r0
 8001b70:	4345      	muls	r5, r0
 8001b72:	4648      	mov	r0, r9
 8001b74:	0c00      	lsrs	r0, r0, #16
 8001b76:	4684      	mov	ip, r0
 8001b78:	19db      	adds	r3, r3, r7
 8001b7a:	4463      	add	r3, ip
 8001b7c:	429f      	cmp	r7, r3
 8001b7e:	d903      	bls.n	8001b88 <__aeabi_ddiv+0x40c>
 8001b80:	2080      	movs	r0, #128	; 0x80
 8001b82:	0240      	lsls	r0, r0, #9
 8001b84:	4684      	mov	ip, r0
 8001b86:	4465      	add	r5, ip
 8001b88:	4648      	mov	r0, r9
 8001b8a:	0c1f      	lsrs	r7, r3, #16
 8001b8c:	0400      	lsls	r0, r0, #16
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	0c00      	lsrs	r0, r0, #16
 8001b92:	197d      	adds	r5, r7, r5
 8001b94:	1818      	adds	r0, r3, r0
 8001b96:	42a9      	cmp	r1, r5
 8001b98:	d200      	bcs.n	8001b9c <__aeabi_ddiv+0x420>
 8001b9a:	e084      	b.n	8001ca6 <__aeabi_ddiv+0x52a>
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_ddiv+0x424>
 8001b9e:	e07f      	b.n	8001ca0 <__aeabi_ddiv+0x524>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	e657      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	464a      	mov	r2, r9
 8001baa:	031b      	lsls	r3, r3, #12
 8001bac:	4313      	orrs	r3, r2
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	0b1b      	lsrs	r3, r3, #12
 8001bb2:	46aa      	mov	sl, r5
 8001bb4:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <__aeabi_ddiv+0x5f8>)
 8001bb6:	e66f      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001bb8:	42ba      	cmp	r2, r7
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x442>
 8001bbc:	e735      	b.n	8001a2a <__aeabi_ddiv+0x2ae>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	07dc      	lsls	r4, r3, #31
 8001bc2:	0858      	lsrs	r0, r3, #1
 8001bc4:	087b      	lsrs	r3, r7, #1
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	07ff      	lsls	r7, r7, #31
 8001bca:	e734      	b.n	8001a36 <__aeabi_ddiv+0x2ba>
 8001bcc:	2400      	movs	r4, #0
 8001bce:	42af      	cmp	r7, r5
 8001bd0:	d289      	bcs.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001bd2:	4447      	add	r7, r8
 8001bd4:	4547      	cmp	r7, r8
 8001bd6:	41a4      	sbcs	r4, r4
 8001bd8:	465b      	mov	r3, fp
 8001bda:	4264      	negs	r4, r4
 8001bdc:	19a4      	adds	r4, r4, r6
 8001bde:	1864      	adds	r4, r4, r1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	42a6      	cmp	r6, r4
 8001be4:	d21e      	bcs.n	8001c24 <__aeabi_ddiv+0x4a8>
 8001be6:	42a0      	cmp	r0, r4
 8001be8:	d86d      	bhi.n	8001cc6 <__aeabi_ddiv+0x54a>
 8001bea:	d100      	bne.n	8001bee <__aeabi_ddiv+0x472>
 8001bec:	e0b6      	b.n	8001d5c <__aeabi_ddiv+0x5e0>
 8001bee:	1a24      	subs	r4, r4, r0
 8001bf0:	469b      	mov	fp, r3
 8001bf2:	e778      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	465a      	mov	r2, fp
 8001bf8:	3b28      	subs	r3, #40	; 0x28
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	2700      	movs	r7, #0
 8001bfe:	4691      	mov	r9, r2
 8001c00:	e688      	b.n	8001914 <__aeabi_ddiv+0x198>
 8001c02:	4658      	mov	r0, fp
 8001c04:	f001 f912 	bl	8002e2c <__clzsi2>
 8001c08:	3020      	adds	r0, #32
 8001c0a:	e672      	b.n	80018f2 <__aeabi_ddiv+0x176>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	4652      	mov	r2, sl
 8001c10:	3b28      	subs	r3, #40	; 0x28
 8001c12:	409a      	lsls	r2, r3
 8001c14:	4693      	mov	fp, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	e6b4      	b.n	8001984 <__aeabi_ddiv+0x208>
 8001c1a:	4650      	mov	r0, sl
 8001c1c:	f001 f906 	bl	8002e2c <__clzsi2>
 8001c20:	3020      	adds	r0, #32
 8001c22:	e69a      	b.n	800195a <__aeabi_ddiv+0x1de>
 8001c24:	42a6      	cmp	r6, r4
 8001c26:	d1e2      	bne.n	8001bee <__aeabi_ddiv+0x472>
 8001c28:	45b8      	cmp	r8, r7
 8001c2a:	d9dc      	bls.n	8001be6 <__aeabi_ddiv+0x46a>
 8001c2c:	1a34      	subs	r4, r6, r0
 8001c2e:	469b      	mov	fp, r3
 8001c30:	e759      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	dc65      	bgt.n	8001d02 <__aeabi_ddiv+0x586>
 8001c36:	4c50      	ldr	r4, [pc, #320]	; (8001d78 <__aeabi_ddiv+0x5fc>)
 8001c38:	9900      	ldr	r1, [sp, #0]
 8001c3a:	46a4      	mov	ip, r4
 8001c3c:	465c      	mov	r4, fp
 8001c3e:	4461      	add	r1, ip
 8001c40:	0008      	movs	r0, r1
 8001c42:	408c      	lsls	r4, r1
 8001c44:	0011      	movs	r1, r2
 8001c46:	4082      	lsls	r2, r0
 8001c48:	40d9      	lsrs	r1, r3
 8001c4a:	1e50      	subs	r0, r2, #1
 8001c4c:	4182      	sbcs	r2, r0
 8001c4e:	430c      	orrs	r4, r1
 8001c50:	4314      	orrs	r4, r2
 8001c52:	465a      	mov	r2, fp
 8001c54:	40da      	lsrs	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	0762      	lsls	r2, r4, #29
 8001c5a:	d009      	beq.n	8001c70 <__aeabi_ddiv+0x4f4>
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4022      	ands	r2, r4
 8001c60:	2a04      	cmp	r2, #4
 8001c62:	d005      	beq.n	8001c70 <__aeabi_ddiv+0x4f4>
 8001c64:	0022      	movs	r2, r4
 8001c66:	1d14      	adds	r4, r2, #4
 8001c68:	4294      	cmp	r4, r2
 8001c6a:	4189      	sbcs	r1, r1
 8001c6c:	4249      	negs	r1, r1
 8001c6e:	185b      	adds	r3, r3, r1
 8001c70:	021a      	lsls	r2, r3, #8
 8001c72:	d562      	bpl.n	8001d3a <__aeabi_ddiv+0x5be>
 8001c74:	2201      	movs	r2, #1
 8001c76:	2300      	movs	r3, #0
 8001c78:	2700      	movs	r7, #0
 8001c7a:	e60d      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d800      	bhi.n	8001c82 <__aeabi_ddiv+0x506>
 8001c80:	e70a      	b.n	8001a98 <__aeabi_ddiv+0x31c>
 8001c82:	1e83      	subs	r3, r0, #2
 8001c84:	1989      	adds	r1, r1, r6
 8001c86:	e707      	b.n	8001a98 <__aeabi_ddiv+0x31c>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_ddiv+0x516>
 8001c90:	e5e6      	b.n	8001860 <__aeabi_ddiv+0xe4>
 8001c92:	1d17      	adds	r7, r2, #4
 8001c94:	4297      	cmp	r7, r2
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	4253      	negs	r3, r2
 8001c9a:	449b      	add	fp, r3
 8001c9c:	08fa      	lsrs	r2, r7, #3
 8001c9e:	e5e0      	b.n	8001862 <__aeabi_ddiv+0xe6>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x52a>
 8001ca4:	e5d7      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001ca6:	1871      	adds	r1, r6, r1
 8001ca8:	1e53      	subs	r3, r2, #1
 8001caa:	42b1      	cmp	r1, r6
 8001cac:	d327      	bcc.n	8001cfe <__aeabi_ddiv+0x582>
 8001cae:	42a9      	cmp	r1, r5
 8001cb0:	d315      	bcc.n	8001cde <__aeabi_ddiv+0x562>
 8001cb2:	d058      	beq.n	8001d66 <__aeabi_ddiv+0x5ea>
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	e773      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dc00      	bgt.n	8001cbe <__aeabi_ddiv+0x542>
 8001cbc:	e604      	b.n	80018c8 <__aeabi_ddiv+0x14c>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	449b      	add	fp, r3
 8001cc4:	e5cd      	b.n	8001862 <__aeabi_ddiv+0xe6>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	4447      	add	r7, r8
 8001cca:	4547      	cmp	r7, r8
 8001ccc:	4189      	sbcs	r1, r1
 8001cce:	425b      	negs	r3, r3
 8001cd0:	469c      	mov	ip, r3
 8001cd2:	4249      	negs	r1, r1
 8001cd4:	1989      	adds	r1, r1, r6
 8001cd6:	190c      	adds	r4, r1, r4
 8001cd8:	44e3      	add	fp, ip
 8001cda:	1a24      	subs	r4, r4, r0
 8001cdc:	e703      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001cde:	4643      	mov	r3, r8
 8001ce0:	005f      	lsls	r7, r3, #1
 8001ce2:	4547      	cmp	r7, r8
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	46b8      	mov	r8, r7
 8001ce8:	425b      	negs	r3, r3
 8001cea:	199e      	adds	r6, r3, r6
 8001cec:	3a02      	subs	r2, #2
 8001cee:	1989      	adds	r1, r1, r6
 8001cf0:	42a9      	cmp	r1, r5
 8001cf2:	d000      	beq.n	8001cf6 <__aeabi_ddiv+0x57a>
 8001cf4:	e754      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cf6:	4540      	cmp	r0, r8
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0x580>
 8001cfa:	e751      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cfc:	e5ab      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001cfe:	001a      	movs	r2, r3
 8001d00:	e7f6      	b.n	8001cf0 <__aeabi_ddiv+0x574>
 8001d02:	211f      	movs	r1, #31
 8001d04:	465f      	mov	r7, fp
 8001d06:	4249      	negs	r1, r1
 8001d08:	1b0c      	subs	r4, r1, r4
 8001d0a:	40e7      	lsrs	r7, r4
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d007      	beq.n	8001d20 <__aeabi_ddiv+0x5a4>
 8001d10:	491a      	ldr	r1, [pc, #104]	; (8001d7c <__aeabi_ddiv+0x600>)
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	468c      	mov	ip, r1
 8001d16:	4463      	add	r3, ip
 8001d18:	0018      	movs	r0, r3
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	4083      	lsls	r3, r0
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	1e50      	subs	r0, r2, #1
 8001d22:	4182      	sbcs	r2, r0
 8001d24:	433a      	orrs	r2, r7
 8001d26:	2707      	movs	r7, #7
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4017      	ands	r7, r2
 8001d2c:	d009      	beq.n	8001d42 <__aeabi_ddiv+0x5c6>
 8001d2e:	210f      	movs	r1, #15
 8001d30:	2300      	movs	r3, #0
 8001d32:	4011      	ands	r1, r2
 8001d34:	0014      	movs	r4, r2
 8001d36:	2904      	cmp	r1, #4
 8001d38:	d195      	bne.n	8001c66 <__aeabi_ddiv+0x4ea>
 8001d3a:	0022      	movs	r2, r4
 8001d3c:	075f      	lsls	r7, r3, #29
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	0b1b      	lsrs	r3, r3, #12
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	4317      	orrs	r7, r2
 8001d46:	2200      	movs	r2, #0
 8001d48:	e5a6      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	031b      	lsls	r3, r3, #12
 8001d50:	430b      	orrs	r3, r1
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	0017      	movs	r7, r2
 8001d56:	0b1b      	lsrs	r3, r3, #12
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <__aeabi_ddiv+0x5f8>)
 8001d5a:	e59d      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001d5c:	42bd      	cmp	r5, r7
 8001d5e:	d8b2      	bhi.n	8001cc6 <__aeabi_ddiv+0x54a>
 8001d60:	469b      	mov	fp, r3
 8001d62:	2400      	movs	r4, #0
 8001d64:	e6bf      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001d66:	4580      	cmp	r8, r0
 8001d68:	d3b9      	bcc.n	8001cde <__aeabi_ddiv+0x562>
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	e7c3      	b.n	8001cf6 <__aeabi_ddiv+0x57a>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000003ff 	.word	0x000003ff
 8001d74:	000007ff 	.word	0x000007ff
 8001d78:	0000041e 	.word	0x0000041e
 8001d7c:	0000043e 	.word	0x0000043e

08001d80 <__eqdf2>:
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	464f      	mov	r7, r9
 8001d84:	4646      	mov	r6, r8
 8001d86:	46d6      	mov	lr, sl
 8001d88:	4684      	mov	ip, r0
 8001d8a:	b5c0      	push	{r6, r7, lr}
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4e19      	ldr	r6, [pc, #100]	; (8001df4 <__eqdf2+0x74>)
 8001d90:	0318      	lsls	r0, r3, #12
 8001d92:	030f      	lsls	r7, r1, #12
 8001d94:	004d      	lsls	r5, r1, #1
 8001d96:	0b00      	lsrs	r0, r0, #12
 8001d98:	005c      	lsls	r4, r3, #1
 8001d9a:	4682      	mov	sl, r0
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d6d      	lsrs	r5, r5, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	4691      	mov	r9, r2
 8001da4:	0d64      	lsrs	r4, r4, #21
 8001da6:	0fdb      	lsrs	r3, r3, #31
 8001da8:	2001      	movs	r0, #1
 8001daa:	42b5      	cmp	r5, r6
 8001dac:	d00a      	beq.n	8001dc4 <__eqdf2+0x44>
 8001dae:	42b4      	cmp	r4, r6
 8001db0:	d003      	beq.n	8001dba <__eqdf2+0x3a>
 8001db2:	42a5      	cmp	r5, r4
 8001db4:	d101      	bne.n	8001dba <__eqdf2+0x3a>
 8001db6:	4557      	cmp	r7, sl
 8001db8:	d00c      	beq.n	8001dd4 <__eqdf2+0x54>
 8001dba:	bc1c      	pop	{r2, r3, r4}
 8001dbc:	4690      	mov	r8, r2
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	46a2      	mov	sl, r4
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc4:	4666      	mov	r6, ip
 8001dc6:	433e      	orrs	r6, r7
 8001dc8:	d1f7      	bne.n	8001dba <__eqdf2+0x3a>
 8001dca:	42ac      	cmp	r4, r5
 8001dcc:	d1f5      	bne.n	8001dba <__eqdf2+0x3a>
 8001dce:	4654      	mov	r4, sl
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	d1f2      	bne.n	8001dba <__eqdf2+0x3a>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	45c8      	cmp	r8, r9
 8001dd8:	d1ef      	bne.n	8001dba <__eqdf2+0x3a>
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	d007      	beq.n	8001dee <__eqdf2+0x6e>
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	d1eb      	bne.n	8001dba <__eqdf2+0x3a>
 8001de2:	4663      	mov	r3, ip
 8001de4:	431f      	orrs	r7, r3
 8001de6:	0038      	movs	r0, r7
 8001de8:	1e47      	subs	r7, r0, #1
 8001dea:	41b8      	sbcs	r0, r7
 8001dec:	e7e5      	b.n	8001dba <__eqdf2+0x3a>
 8001dee:	2000      	movs	r0, #0
 8001df0:	e7e3      	b.n	8001dba <__eqdf2+0x3a>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff

08001df8 <__gedf2>:
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	464f      	mov	r7, r9
 8001dfc:	4646      	mov	r6, r8
 8001dfe:	46d6      	mov	lr, sl
 8001e00:	004d      	lsls	r5, r1, #1
 8001e02:	b5c0      	push	{r6, r7, lr}
 8001e04:	030e      	lsls	r6, r1, #12
 8001e06:	0fc9      	lsrs	r1, r1, #31
 8001e08:	468a      	mov	sl, r1
 8001e0a:	492c      	ldr	r1, [pc, #176]	; (8001ebc <__gedf2+0xc4>)
 8001e0c:	031f      	lsls	r7, r3, #12
 8001e0e:	005c      	lsls	r4, r3, #1
 8001e10:	4680      	mov	r8, r0
 8001e12:	0b36      	lsrs	r6, r6, #12
 8001e14:	0d6d      	lsrs	r5, r5, #21
 8001e16:	4691      	mov	r9, r2
 8001e18:	0b3f      	lsrs	r7, r7, #12
 8001e1a:	0d64      	lsrs	r4, r4, #21
 8001e1c:	0fdb      	lsrs	r3, r3, #31
 8001e1e:	428d      	cmp	r5, r1
 8001e20:	d01e      	beq.n	8001e60 <__gedf2+0x68>
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d016      	beq.n	8001e54 <__gedf2+0x5c>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d11e      	bne.n	8001e68 <__gedf2+0x70>
 8001e2a:	4330      	orrs	r0, r6
 8001e2c:	4684      	mov	ip, r0
 8001e2e:	2c00      	cmp	r4, #0
 8001e30:	d101      	bne.n	8001e36 <__gedf2+0x3e>
 8001e32:	433a      	orrs	r2, r7
 8001e34:	d023      	beq.n	8001e7e <__gedf2+0x86>
 8001e36:	4662      	mov	r2, ip
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d01a      	beq.n	8001e72 <__gedf2+0x7a>
 8001e3c:	459a      	cmp	sl, r3
 8001e3e:	d029      	beq.n	8001e94 <__gedf2+0x9c>
 8001e40:	4651      	mov	r1, sl
 8001e42:	2002      	movs	r0, #2
 8001e44:	3901      	subs	r1, #1
 8001e46:	4008      	ands	r0, r1
 8001e48:	3801      	subs	r0, #1
 8001e4a:	bc1c      	pop	{r2, r3, r4}
 8001e4c:	4690      	mov	r8, r2
 8001e4e:	4699      	mov	r9, r3
 8001e50:	46a2      	mov	sl, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	0039      	movs	r1, r7
 8001e56:	4311      	orrs	r1, r2
 8001e58:	d0e5      	beq.n	8001e26 <__gedf2+0x2e>
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	4240      	negs	r0, r0
 8001e5e:	e7f4      	b.n	8001e4a <__gedf2+0x52>
 8001e60:	4330      	orrs	r0, r6
 8001e62:	d1fa      	bne.n	8001e5a <__gedf2+0x62>
 8001e64:	42ac      	cmp	r4, r5
 8001e66:	d00f      	beq.n	8001e88 <__gedf2+0x90>
 8001e68:	2c00      	cmp	r4, #0
 8001e6a:	d10f      	bne.n	8001e8c <__gedf2+0x94>
 8001e6c:	433a      	orrs	r2, r7
 8001e6e:	d0e7      	beq.n	8001e40 <__gedf2+0x48>
 8001e70:	e00c      	b.n	8001e8c <__gedf2+0x94>
 8001e72:	2201      	movs	r2, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	4393      	bics	r3, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	e7e5      	b.n	8001e4a <__gedf2+0x52>
 8001e7e:	4663      	mov	r3, ip
 8001e80:	2000      	movs	r0, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0e1      	beq.n	8001e4a <__gedf2+0x52>
 8001e86:	e7db      	b.n	8001e40 <__gedf2+0x48>
 8001e88:	433a      	orrs	r2, r7
 8001e8a:	d1e6      	bne.n	8001e5a <__gedf2+0x62>
 8001e8c:	459a      	cmp	sl, r3
 8001e8e:	d1d7      	bne.n	8001e40 <__gedf2+0x48>
 8001e90:	42a5      	cmp	r5, r4
 8001e92:	dcd5      	bgt.n	8001e40 <__gedf2+0x48>
 8001e94:	42a5      	cmp	r5, r4
 8001e96:	db05      	blt.n	8001ea4 <__gedf2+0xac>
 8001e98:	42be      	cmp	r6, r7
 8001e9a:	d8d1      	bhi.n	8001e40 <__gedf2+0x48>
 8001e9c:	d008      	beq.n	8001eb0 <__gedf2+0xb8>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	42be      	cmp	r6, r7
 8001ea2:	d2d2      	bcs.n	8001e4a <__gedf2+0x52>
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	3801      	subs	r0, #1
 8001eaa:	4398      	bics	r0, r3
 8001eac:	3001      	adds	r0, #1
 8001eae:	e7cc      	b.n	8001e4a <__gedf2+0x52>
 8001eb0:	45c8      	cmp	r8, r9
 8001eb2:	d8c5      	bhi.n	8001e40 <__gedf2+0x48>
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	45c8      	cmp	r8, r9
 8001eb8:	d3f4      	bcc.n	8001ea4 <__gedf2+0xac>
 8001eba:	e7c6      	b.n	8001e4a <__gedf2+0x52>
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__ledf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	464f      	mov	r7, r9
 8001ec4:	4646      	mov	r6, r8
 8001ec6:	46d6      	mov	lr, sl
 8001ec8:	004d      	lsls	r5, r1, #1
 8001eca:	b5c0      	push	{r6, r7, lr}
 8001ecc:	030e      	lsls	r6, r1, #12
 8001ece:	0fc9      	lsrs	r1, r1, #31
 8001ed0:	468a      	mov	sl, r1
 8001ed2:	492e      	ldr	r1, [pc, #184]	; (8001f8c <__ledf2+0xcc>)
 8001ed4:	031f      	lsls	r7, r3, #12
 8001ed6:	005c      	lsls	r4, r3, #1
 8001ed8:	4680      	mov	r8, r0
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0d6d      	lsrs	r5, r5, #21
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d64      	lsrs	r4, r4, #21
 8001ee4:	0fdb      	lsrs	r3, r3, #31
 8001ee6:	428d      	cmp	r5, r1
 8001ee8:	d018      	beq.n	8001f1c <__ledf2+0x5c>
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d011      	beq.n	8001f12 <__ledf2+0x52>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d118      	bne.n	8001f24 <__ledf2+0x64>
 8001ef2:	4330      	orrs	r0, r6
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	2c00      	cmp	r4, #0
 8001ef8:	d11e      	bne.n	8001f38 <__ledf2+0x78>
 8001efa:	433a      	orrs	r2, r7
 8001efc:	d11c      	bne.n	8001f38 <__ledf2+0x78>
 8001efe:	4663      	mov	r3, ip
 8001f00:	2000      	movs	r0, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d030      	beq.n	8001f68 <__ledf2+0xa8>
 8001f06:	4651      	mov	r1, sl
 8001f08:	2002      	movs	r0, #2
 8001f0a:	3901      	subs	r1, #1
 8001f0c:	4008      	ands	r0, r1
 8001f0e:	3801      	subs	r0, #1
 8001f10:	e02a      	b.n	8001f68 <__ledf2+0xa8>
 8001f12:	0039      	movs	r1, r7
 8001f14:	4311      	orrs	r1, r2
 8001f16:	d0ea      	beq.n	8001eee <__ledf2+0x2e>
 8001f18:	2002      	movs	r0, #2
 8001f1a:	e025      	b.n	8001f68 <__ledf2+0xa8>
 8001f1c:	4330      	orrs	r0, r6
 8001f1e:	d1fb      	bne.n	8001f18 <__ledf2+0x58>
 8001f20:	42ac      	cmp	r4, r5
 8001f22:	d026      	beq.n	8001f72 <__ledf2+0xb2>
 8001f24:	2c00      	cmp	r4, #0
 8001f26:	d126      	bne.n	8001f76 <__ledf2+0xb6>
 8001f28:	433a      	orrs	r2, r7
 8001f2a:	d124      	bne.n	8001f76 <__ledf2+0xb6>
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	2002      	movs	r0, #2
 8001f30:	3901      	subs	r1, #1
 8001f32:	4008      	ands	r0, r1
 8001f34:	3801      	subs	r0, #1
 8001f36:	e017      	b.n	8001f68 <__ledf2+0xa8>
 8001f38:	4662      	mov	r2, ip
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	d00f      	beq.n	8001f5e <__ledf2+0x9e>
 8001f3e:	459a      	cmp	sl, r3
 8001f40:	d1e1      	bne.n	8001f06 <__ledf2+0x46>
 8001f42:	42a5      	cmp	r5, r4
 8001f44:	db05      	blt.n	8001f52 <__ledf2+0x92>
 8001f46:	42be      	cmp	r6, r7
 8001f48:	d8dd      	bhi.n	8001f06 <__ledf2+0x46>
 8001f4a:	d019      	beq.n	8001f80 <__ledf2+0xc0>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	42be      	cmp	r6, r7
 8001f50:	d20a      	bcs.n	8001f68 <__ledf2+0xa8>
 8001f52:	4650      	mov	r0, sl
 8001f54:	2301      	movs	r3, #1
 8001f56:	3801      	subs	r0, #1
 8001f58:	4398      	bics	r0, r3
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	e004      	b.n	8001f68 <__ledf2+0xa8>
 8001f5e:	2201      	movs	r2, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	4393      	bics	r3, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	3001      	adds	r0, #1
 8001f68:	bc1c      	pop	{r2, r3, r4}
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	46a2      	mov	sl, r4
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d1d0      	bne.n	8001f18 <__ledf2+0x58>
 8001f76:	459a      	cmp	sl, r3
 8001f78:	d1c5      	bne.n	8001f06 <__ledf2+0x46>
 8001f7a:	42a5      	cmp	r5, r4
 8001f7c:	dcc3      	bgt.n	8001f06 <__ledf2+0x46>
 8001f7e:	e7e0      	b.n	8001f42 <__ledf2+0x82>
 8001f80:	45c8      	cmp	r8, r9
 8001f82:	d8c0      	bhi.n	8001f06 <__ledf2+0x46>
 8001f84:	2000      	movs	r0, #0
 8001f86:	45c8      	cmp	r8, r9
 8001f88:	d3e3      	bcc.n	8001f52 <__ledf2+0x92>
 8001f8a:	e7ed      	b.n	8001f68 <__ledf2+0xa8>
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__aeabi_dmul>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	46de      	mov	lr, fp
 8001f96:	464e      	mov	r6, r9
 8001f98:	4645      	mov	r5, r8
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	4683      	mov	fp, r0
 8001f9e:	0006      	movs	r6, r0
 8001fa0:	030f      	lsls	r7, r1, #12
 8001fa2:	0048      	lsls	r0, r1, #1
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	4692      	mov	sl, r2
 8001fa8:	001d      	movs	r5, r3
 8001faa:	0b3f      	lsrs	r7, r7, #12
 8001fac:	0d40      	lsrs	r0, r0, #21
 8001fae:	0fcc      	lsrs	r4, r1, #31
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x26>
 8001fb4:	e06f      	b.n	8002096 <__aeabi_dmul+0x106>
 8001fb6:	4bde      	ldr	r3, [pc, #888]	; (8002330 <__aeabi_dmul+0x3a0>)
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d038      	beq.n	800202e <__aeabi_dmul+0x9e>
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	00ff      	lsls	r7, r7, #3
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431f      	orrs	r7, r3
 8001fc4:	0f73      	lsrs	r3, r6, #29
 8001fc6:	433b      	orrs	r3, r7
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	4bda      	ldr	r3, [pc, #872]	; (8002334 <__aeabi_dmul+0x3a4>)
 8001fcc:	2700      	movs	r7, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	469b      	mov	fp, r3
 8001fd4:	00f6      	lsls	r6, r6, #3
 8001fd6:	4481      	add	r9, r0
 8001fd8:	032b      	lsls	r3, r5, #12
 8001fda:	0069      	lsls	r1, r5, #1
 8001fdc:	0b1b      	lsrs	r3, r3, #12
 8001fde:	4652      	mov	r2, sl
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	0d49      	lsrs	r1, r1, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dmul+0x5c>
 8001fea:	e085      	b.n	80020f8 <__aeabi_dmul+0x168>
 8001fec:	4bd0      	ldr	r3, [pc, #832]	; (8002330 <__aeabi_dmul+0x3a0>)
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x64>
 8001ff2:	e073      	b.n	80020dc <__aeabi_dmul+0x14c>
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	4652      	mov	r2, sl
 8002000:	48cc      	ldr	r0, [pc, #816]	; (8002334 <__aeabi_dmul+0x3a4>)
 8002002:	0f52      	lsrs	r2, r2, #29
 8002004:	4684      	mov	ip, r0
 8002006:	4313      	orrs	r3, r2
 8002008:	4652      	mov	r2, sl
 800200a:	2000      	movs	r0, #0
 800200c:	4461      	add	r1, ip
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	4489      	add	r9, r1
 8002012:	0021      	movs	r1, r4
 8002014:	4069      	eors	r1, r5
 8002016:	9100      	str	r1, [sp, #0]
 8002018:	468c      	mov	ip, r1
 800201a:	2101      	movs	r1, #1
 800201c:	4449      	add	r1, r9
 800201e:	468a      	mov	sl, r1
 8002020:	2f0f      	cmp	r7, #15
 8002022:	d900      	bls.n	8002026 <__aeabi_dmul+0x96>
 8002024:	e090      	b.n	8002148 <__aeabi_dmul+0x1b8>
 8002026:	49c4      	ldr	r1, [pc, #784]	; (8002338 <__aeabi_dmul+0x3a8>)
 8002028:	00bf      	lsls	r7, r7, #2
 800202a:	59cf      	ldr	r7, [r1, r7]
 800202c:	46bf      	mov	pc, r7
 800202e:	465b      	mov	r3, fp
 8002030:	433b      	orrs	r3, r7
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	d000      	beq.n	8002038 <__aeabi_dmul+0xa8>
 8002036:	e16a      	b.n	800230e <__aeabi_dmul+0x37e>
 8002038:	2302      	movs	r3, #2
 800203a:	2708      	movs	r7, #8
 800203c:	2600      	movs	r6, #0
 800203e:	4681      	mov	r9, r0
 8002040:	469b      	mov	fp, r3
 8002042:	e7c9      	b.n	8001fd8 <__aeabi_dmul+0x48>
 8002044:	0032      	movs	r2, r6
 8002046:	4658      	mov	r0, fp
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	4661      	mov	r1, ip
 800204c:	9100      	str	r1, [sp, #0]
 800204e:	2802      	cmp	r0, #2
 8002050:	d100      	bne.n	8002054 <__aeabi_dmul+0xc4>
 8002052:	e075      	b.n	8002140 <__aeabi_dmul+0x1b0>
 8002054:	2803      	cmp	r0, #3
 8002056:	d100      	bne.n	800205a <__aeabi_dmul+0xca>
 8002058:	e1fe      	b.n	8002458 <__aeabi_dmul+0x4c8>
 800205a:	2801      	cmp	r0, #1
 800205c:	d000      	beq.n	8002060 <__aeabi_dmul+0xd0>
 800205e:	e12c      	b.n	80022ba <__aeabi_dmul+0x32a>
 8002060:	2300      	movs	r3, #0
 8002062:	2700      	movs	r7, #0
 8002064:	2600      	movs	r6, #0
 8002066:	2500      	movs	r5, #0
 8002068:	033f      	lsls	r7, r7, #12
 800206a:	0d2a      	lsrs	r2, r5, #20
 800206c:	0b3f      	lsrs	r7, r7, #12
 800206e:	48b3      	ldr	r0, [pc, #716]	; (800233c <__aeabi_dmul+0x3ac>)
 8002070:	0512      	lsls	r2, r2, #20
 8002072:	433a      	orrs	r2, r7
 8002074:	4002      	ands	r2, r0
 8002076:	051b      	lsls	r3, r3, #20
 8002078:	4313      	orrs	r3, r2
 800207a:	9a00      	ldr	r2, [sp, #0]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	07d1      	lsls	r1, r2, #31
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	430b      	orrs	r3, r1
 8002084:	0030      	movs	r0, r6
 8002086:	0019      	movs	r1, r3
 8002088:	b007      	add	sp, #28
 800208a:	bc3c      	pop	{r2, r3, r4, r5}
 800208c:	4690      	mov	r8, r2
 800208e:	4699      	mov	r9, r3
 8002090:	46a2      	mov	sl, r4
 8002092:	46ab      	mov	fp, r5
 8002094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002096:	465b      	mov	r3, fp
 8002098:	433b      	orrs	r3, r7
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	d100      	bne.n	80020a0 <__aeabi_dmul+0x110>
 800209e:	e12f      	b.n	8002300 <__aeabi_dmul+0x370>
 80020a0:	2f00      	cmp	r7, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dmul+0x116>
 80020a4:	e1a5      	b.n	80023f2 <__aeabi_dmul+0x462>
 80020a6:	0038      	movs	r0, r7
 80020a8:	f000 fec0 	bl	8002e2c <__clzsi2>
 80020ac:	0003      	movs	r3, r0
 80020ae:	3b0b      	subs	r3, #11
 80020b0:	2b1c      	cmp	r3, #28
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dmul+0x126>
 80020b4:	e196      	b.n	80023e4 <__aeabi_dmul+0x454>
 80020b6:	221d      	movs	r2, #29
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	465a      	mov	r2, fp
 80020bc:	0001      	movs	r1, r0
 80020be:	40da      	lsrs	r2, r3
 80020c0:	465e      	mov	r6, fp
 80020c2:	3908      	subs	r1, #8
 80020c4:	408f      	lsls	r7, r1
 80020c6:	0013      	movs	r3, r2
 80020c8:	408e      	lsls	r6, r1
 80020ca:	433b      	orrs	r3, r7
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	4b9c      	ldr	r3, [pc, #624]	; (8002340 <__aeabi_dmul+0x3b0>)
 80020d0:	2700      	movs	r7, #0
 80020d2:	1a1b      	subs	r3, r3, r0
 80020d4:	4699      	mov	r9, r3
 80020d6:	2300      	movs	r3, #0
 80020d8:	469b      	mov	fp, r3
 80020da:	e77d      	b.n	8001fd8 <__aeabi_dmul+0x48>
 80020dc:	4641      	mov	r1, r8
 80020de:	4653      	mov	r3, sl
 80020e0:	430b      	orrs	r3, r1
 80020e2:	4993      	ldr	r1, [pc, #588]	; (8002330 <__aeabi_dmul+0x3a0>)
 80020e4:	468c      	mov	ip, r1
 80020e6:	44e1      	add	r9, ip
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d000      	beq.n	80020ee <__aeabi_dmul+0x15e>
 80020ec:	e11a      	b.n	8002324 <__aeabi_dmul+0x394>
 80020ee:	2202      	movs	r2, #2
 80020f0:	2002      	movs	r0, #2
 80020f2:	4317      	orrs	r7, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	e78c      	b.n	8002012 <__aeabi_dmul+0x82>
 80020f8:	4313      	orrs	r3, r2
 80020fa:	d100      	bne.n	80020fe <__aeabi_dmul+0x16e>
 80020fc:	e10d      	b.n	800231a <__aeabi_dmul+0x38a>
 80020fe:	4643      	mov	r3, r8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <__aeabi_dmul+0x176>
 8002104:	e181      	b.n	800240a <__aeabi_dmul+0x47a>
 8002106:	4640      	mov	r0, r8
 8002108:	f000 fe90 	bl	8002e2c <__clzsi2>
 800210c:	0002      	movs	r2, r0
 800210e:	3a0b      	subs	r2, #11
 8002110:	2a1c      	cmp	r2, #28
 8002112:	dd00      	ble.n	8002116 <__aeabi_dmul+0x186>
 8002114:	e172      	b.n	80023fc <__aeabi_dmul+0x46c>
 8002116:	0001      	movs	r1, r0
 8002118:	4643      	mov	r3, r8
 800211a:	3908      	subs	r1, #8
 800211c:	408b      	lsls	r3, r1
 800211e:	4698      	mov	r8, r3
 8002120:	231d      	movs	r3, #29
 8002122:	1a9a      	subs	r2, r3, r2
 8002124:	4653      	mov	r3, sl
 8002126:	40d3      	lsrs	r3, r2
 8002128:	001a      	movs	r2, r3
 800212a:	4643      	mov	r3, r8
 800212c:	4313      	orrs	r3, r2
 800212e:	4652      	mov	r2, sl
 8002130:	408a      	lsls	r2, r1
 8002132:	4649      	mov	r1, r9
 8002134:	1a08      	subs	r0, r1, r0
 8002136:	4982      	ldr	r1, [pc, #520]	; (8002340 <__aeabi_dmul+0x3b0>)
 8002138:	4689      	mov	r9, r1
 800213a:	4481      	add	r9, r0
 800213c:	2000      	movs	r0, #0
 800213e:	e768      	b.n	8002012 <__aeabi_dmul+0x82>
 8002140:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <__aeabi_dmul+0x3a0>)
 8002142:	2700      	movs	r7, #0
 8002144:	2600      	movs	r6, #0
 8002146:	e78e      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002148:	0c14      	lsrs	r4, r2, #16
 800214a:	0412      	lsls	r2, r2, #16
 800214c:	0c12      	lsrs	r2, r2, #16
 800214e:	0011      	movs	r1, r2
 8002150:	0c37      	lsrs	r7, r6, #16
 8002152:	0436      	lsls	r6, r6, #16
 8002154:	0c35      	lsrs	r5, r6, #16
 8002156:	4379      	muls	r1, r7
 8002158:	0028      	movs	r0, r5
 800215a:	468c      	mov	ip, r1
 800215c:	002e      	movs	r6, r5
 800215e:	4360      	muls	r0, r4
 8002160:	4460      	add	r0, ip
 8002162:	4683      	mov	fp, r0
 8002164:	4356      	muls	r6, r2
 8002166:	0021      	movs	r1, r4
 8002168:	0c30      	lsrs	r0, r6, #16
 800216a:	4680      	mov	r8, r0
 800216c:	4658      	mov	r0, fp
 800216e:	4379      	muls	r1, r7
 8002170:	4440      	add	r0, r8
 8002172:	9102      	str	r1, [sp, #8]
 8002174:	4584      	cmp	ip, r0
 8002176:	d906      	bls.n	8002186 <__aeabi_dmul+0x1f6>
 8002178:	4688      	mov	r8, r1
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	468c      	mov	ip, r1
 8002180:	44e0      	add	r8, ip
 8002182:	4641      	mov	r1, r8
 8002184:	9102      	str	r1, [sp, #8]
 8002186:	0436      	lsls	r6, r6, #16
 8002188:	0c01      	lsrs	r1, r0, #16
 800218a:	0c36      	lsrs	r6, r6, #16
 800218c:	0400      	lsls	r0, r0, #16
 800218e:	468b      	mov	fp, r1
 8002190:	1981      	adds	r1, r0, r6
 8002192:	0c1e      	lsrs	r6, r3, #16
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	9103      	str	r1, [sp, #12]
 800219a:	0019      	movs	r1, r3
 800219c:	4379      	muls	r1, r7
 800219e:	468c      	mov	ip, r1
 80021a0:	0028      	movs	r0, r5
 80021a2:	4375      	muls	r5, r6
 80021a4:	4465      	add	r5, ip
 80021a6:	46a8      	mov	r8, r5
 80021a8:	4358      	muls	r0, r3
 80021aa:	0c05      	lsrs	r5, r0, #16
 80021ac:	4445      	add	r5, r8
 80021ae:	4377      	muls	r7, r6
 80021b0:	42a9      	cmp	r1, r5
 80021b2:	d903      	bls.n	80021bc <__aeabi_dmul+0x22c>
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0249      	lsls	r1, r1, #9
 80021b8:	468c      	mov	ip, r1
 80021ba:	4467      	add	r7, ip
 80021bc:	0c29      	lsrs	r1, r5, #16
 80021be:	468c      	mov	ip, r1
 80021c0:	0039      	movs	r1, r7
 80021c2:	0400      	lsls	r0, r0, #16
 80021c4:	0c00      	lsrs	r0, r0, #16
 80021c6:	042d      	lsls	r5, r5, #16
 80021c8:	182d      	adds	r5, r5, r0
 80021ca:	4461      	add	r1, ip
 80021cc:	44ab      	add	fp, r5
 80021ce:	9105      	str	r1, [sp, #20]
 80021d0:	4659      	mov	r1, fp
 80021d2:	9104      	str	r1, [sp, #16]
 80021d4:	9901      	ldr	r1, [sp, #4]
 80021d6:	040f      	lsls	r7, r1, #16
 80021d8:	0c3f      	lsrs	r7, r7, #16
 80021da:	0c08      	lsrs	r0, r1, #16
 80021dc:	0039      	movs	r1, r7
 80021de:	4351      	muls	r1, r2
 80021e0:	4342      	muls	r2, r0
 80021e2:	4690      	mov	r8, r2
 80021e4:	0002      	movs	r2, r0
 80021e6:	468c      	mov	ip, r1
 80021e8:	0c09      	lsrs	r1, r1, #16
 80021ea:	468b      	mov	fp, r1
 80021ec:	4362      	muls	r2, r4
 80021ee:	437c      	muls	r4, r7
 80021f0:	4444      	add	r4, r8
 80021f2:	445c      	add	r4, fp
 80021f4:	45a0      	cmp	r8, r4
 80021f6:	d903      	bls.n	8002200 <__aeabi_dmul+0x270>
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0249      	lsls	r1, r1, #9
 80021fc:	4688      	mov	r8, r1
 80021fe:	4442      	add	r2, r8
 8002200:	0c21      	lsrs	r1, r4, #16
 8002202:	4688      	mov	r8, r1
 8002204:	4661      	mov	r1, ip
 8002206:	0409      	lsls	r1, r1, #16
 8002208:	0c09      	lsrs	r1, r1, #16
 800220a:	468c      	mov	ip, r1
 800220c:	0039      	movs	r1, r7
 800220e:	4359      	muls	r1, r3
 8002210:	4343      	muls	r3, r0
 8002212:	4370      	muls	r0, r6
 8002214:	437e      	muls	r6, r7
 8002216:	0c0f      	lsrs	r7, r1, #16
 8002218:	18f6      	adds	r6, r6, r3
 800221a:	0424      	lsls	r4, r4, #16
 800221c:	19be      	adds	r6, r7, r6
 800221e:	4464      	add	r4, ip
 8002220:	4442      	add	r2, r8
 8002222:	468c      	mov	ip, r1
 8002224:	42b3      	cmp	r3, r6
 8002226:	d903      	bls.n	8002230 <__aeabi_dmul+0x2a0>
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	4698      	mov	r8, r3
 800222e:	4440      	add	r0, r8
 8002230:	9b02      	ldr	r3, [sp, #8]
 8002232:	4661      	mov	r1, ip
 8002234:	4698      	mov	r8, r3
 8002236:	9b04      	ldr	r3, [sp, #16]
 8002238:	0437      	lsls	r7, r6, #16
 800223a:	4443      	add	r3, r8
 800223c:	469b      	mov	fp, r3
 800223e:	45ab      	cmp	fp, r5
 8002240:	41ad      	sbcs	r5, r5
 8002242:	426b      	negs	r3, r5
 8002244:	040d      	lsls	r5, r1, #16
 8002246:	9905      	ldr	r1, [sp, #20]
 8002248:	0c2d      	lsrs	r5, r5, #16
 800224a:	468c      	mov	ip, r1
 800224c:	197f      	adds	r7, r7, r5
 800224e:	4467      	add	r7, ip
 8002250:	18fd      	adds	r5, r7, r3
 8002252:	46a8      	mov	r8, r5
 8002254:	465d      	mov	r5, fp
 8002256:	192d      	adds	r5, r5, r4
 8002258:	42a5      	cmp	r5, r4
 800225a:	41a4      	sbcs	r4, r4
 800225c:	4693      	mov	fp, r2
 800225e:	4264      	negs	r4, r4
 8002260:	46a4      	mov	ip, r4
 8002262:	44c3      	add	fp, r8
 8002264:	44dc      	add	ip, fp
 8002266:	428f      	cmp	r7, r1
 8002268:	41bf      	sbcs	r7, r7
 800226a:	4598      	cmp	r8, r3
 800226c:	419b      	sbcs	r3, r3
 800226e:	4593      	cmp	fp, r2
 8002270:	4192      	sbcs	r2, r2
 8002272:	45a4      	cmp	ip, r4
 8002274:	41a4      	sbcs	r4, r4
 8002276:	425b      	negs	r3, r3
 8002278:	427f      	negs	r7, r7
 800227a:	431f      	orrs	r7, r3
 800227c:	0c36      	lsrs	r6, r6, #16
 800227e:	4252      	negs	r2, r2
 8002280:	4264      	negs	r4, r4
 8002282:	19bf      	adds	r7, r7, r6
 8002284:	4322      	orrs	r2, r4
 8002286:	18bf      	adds	r7, r7, r2
 8002288:	4662      	mov	r2, ip
 800228a:	1838      	adds	r0, r7, r0
 800228c:	0243      	lsls	r3, r0, #9
 800228e:	0dd2      	lsrs	r2, r2, #23
 8002290:	9903      	ldr	r1, [sp, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	026a      	lsls	r2, r5, #9
 8002296:	430a      	orrs	r2, r1
 8002298:	1e50      	subs	r0, r2, #1
 800229a:	4182      	sbcs	r2, r0
 800229c:	4661      	mov	r1, ip
 800229e:	0ded      	lsrs	r5, r5, #23
 80022a0:	432a      	orrs	r2, r5
 80022a2:	024e      	lsls	r6, r1, #9
 80022a4:	4332      	orrs	r2, r6
 80022a6:	01d9      	lsls	r1, r3, #7
 80022a8:	d400      	bmi.n	80022ac <__aeabi_dmul+0x31c>
 80022aa:	e0b3      	b.n	8002414 <__aeabi_dmul+0x484>
 80022ac:	2601      	movs	r6, #1
 80022ae:	0850      	lsrs	r0, r2, #1
 80022b0:	4032      	ands	r2, r6
 80022b2:	4302      	orrs	r2, r0
 80022b4:	07de      	lsls	r6, r3, #31
 80022b6:	4332      	orrs	r2, r6
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	4c22      	ldr	r4, [pc, #136]	; (8002344 <__aeabi_dmul+0x3b4>)
 80022bc:	4454      	add	r4, sl
 80022be:	2c00      	cmp	r4, #0
 80022c0:	dd62      	ble.n	8002388 <__aeabi_dmul+0x3f8>
 80022c2:	0751      	lsls	r1, r2, #29
 80022c4:	d009      	beq.n	80022da <__aeabi_dmul+0x34a>
 80022c6:	200f      	movs	r0, #15
 80022c8:	4010      	ands	r0, r2
 80022ca:	2804      	cmp	r0, #4
 80022cc:	d005      	beq.n	80022da <__aeabi_dmul+0x34a>
 80022ce:	1d10      	adds	r0, r2, #4
 80022d0:	4290      	cmp	r0, r2
 80022d2:	4192      	sbcs	r2, r2
 80022d4:	4252      	negs	r2, r2
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	0002      	movs	r2, r0
 80022da:	01d9      	lsls	r1, r3, #7
 80022dc:	d504      	bpl.n	80022e8 <__aeabi_dmul+0x358>
 80022de:	2480      	movs	r4, #128	; 0x80
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <__aeabi_dmul+0x3b8>)
 80022e2:	00e4      	lsls	r4, r4, #3
 80022e4:	4003      	ands	r3, r0
 80022e6:	4454      	add	r4, sl
 80022e8:	4818      	ldr	r0, [pc, #96]	; (800234c <__aeabi_dmul+0x3bc>)
 80022ea:	4284      	cmp	r4, r0
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dmul+0x360>
 80022ee:	e727      	b.n	8002140 <__aeabi_dmul+0x1b0>
 80022f0:	075e      	lsls	r6, r3, #29
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	0b1f      	lsrs	r7, r3, #12
 80022f8:	0563      	lsls	r3, r4, #21
 80022fa:	4316      	orrs	r6, r2
 80022fc:	0d5b      	lsrs	r3, r3, #21
 80022fe:	e6b2      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002300:	2300      	movs	r3, #0
 8002302:	4699      	mov	r9, r3
 8002304:	3301      	adds	r3, #1
 8002306:	2704      	movs	r7, #4
 8002308:	2600      	movs	r6, #0
 800230a:	469b      	mov	fp, r3
 800230c:	e664      	b.n	8001fd8 <__aeabi_dmul+0x48>
 800230e:	2303      	movs	r3, #3
 8002310:	9701      	str	r7, [sp, #4]
 8002312:	4681      	mov	r9, r0
 8002314:	270c      	movs	r7, #12
 8002316:	469b      	mov	fp, r3
 8002318:	e65e      	b.n	8001fd8 <__aeabi_dmul+0x48>
 800231a:	2201      	movs	r2, #1
 800231c:	2001      	movs	r0, #1
 800231e:	4317      	orrs	r7, r2
 8002320:	2200      	movs	r2, #0
 8002322:	e676      	b.n	8002012 <__aeabi_dmul+0x82>
 8002324:	2303      	movs	r3, #3
 8002326:	2003      	movs	r0, #3
 8002328:	431f      	orrs	r7, r3
 800232a:	4643      	mov	r3, r8
 800232c:	e671      	b.n	8002012 <__aeabi_dmul+0x82>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff
 8002334:	fffffc01 	.word	0xfffffc01
 8002338:	080175d4 	.word	0x080175d4
 800233c:	800fffff 	.word	0x800fffff
 8002340:	fffffc0d 	.word	0xfffffc0d
 8002344:	000003ff 	.word	0x000003ff
 8002348:	feffffff 	.word	0xfeffffff
 800234c:	000007fe 	.word	0x000007fe
 8002350:	2300      	movs	r3, #0
 8002352:	2780      	movs	r7, #128	; 0x80
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	033f      	lsls	r7, r7, #12
 8002358:	2600      	movs	r6, #0
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <__aeabi_dmul+0x4d8>)
 800235c:	e683      	b.n	8002066 <__aeabi_dmul+0xd6>
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	0032      	movs	r2, r6
 8002362:	46a4      	mov	ip, r4
 8002364:	4658      	mov	r0, fp
 8002366:	e670      	b.n	800204a <__aeabi_dmul+0xba>
 8002368:	46ac      	mov	ip, r5
 800236a:	e66e      	b.n	800204a <__aeabi_dmul+0xba>
 800236c:	2780      	movs	r7, #128	; 0x80
 800236e:	9901      	ldr	r1, [sp, #4]
 8002370:	033f      	lsls	r7, r7, #12
 8002372:	4239      	tst	r1, r7
 8002374:	d02d      	beq.n	80023d2 <__aeabi_dmul+0x442>
 8002376:	423b      	tst	r3, r7
 8002378:	d12b      	bne.n	80023d2 <__aeabi_dmul+0x442>
 800237a:	431f      	orrs	r7, r3
 800237c:	033f      	lsls	r7, r7, #12
 800237e:	0b3f      	lsrs	r7, r7, #12
 8002380:	9500      	str	r5, [sp, #0]
 8002382:	0016      	movs	r6, r2
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <__aeabi_dmul+0x4d8>)
 8002386:	e66e      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002388:	2501      	movs	r5, #1
 800238a:	1b2d      	subs	r5, r5, r4
 800238c:	2d38      	cmp	r5, #56	; 0x38
 800238e:	dd00      	ble.n	8002392 <__aeabi_dmul+0x402>
 8002390:	e666      	b.n	8002060 <__aeabi_dmul+0xd0>
 8002392:	2d1f      	cmp	r5, #31
 8002394:	dc40      	bgt.n	8002418 <__aeabi_dmul+0x488>
 8002396:	4835      	ldr	r0, [pc, #212]	; (800246c <__aeabi_dmul+0x4dc>)
 8002398:	001c      	movs	r4, r3
 800239a:	4450      	add	r0, sl
 800239c:	0016      	movs	r6, r2
 800239e:	4082      	lsls	r2, r0
 80023a0:	4084      	lsls	r4, r0
 80023a2:	40ee      	lsrs	r6, r5
 80023a4:	1e50      	subs	r0, r2, #1
 80023a6:	4182      	sbcs	r2, r0
 80023a8:	4334      	orrs	r4, r6
 80023aa:	4314      	orrs	r4, r2
 80023ac:	40eb      	lsrs	r3, r5
 80023ae:	0762      	lsls	r2, r4, #29
 80023b0:	d009      	beq.n	80023c6 <__aeabi_dmul+0x436>
 80023b2:	220f      	movs	r2, #15
 80023b4:	4022      	ands	r2, r4
 80023b6:	2a04      	cmp	r2, #4
 80023b8:	d005      	beq.n	80023c6 <__aeabi_dmul+0x436>
 80023ba:	0022      	movs	r2, r4
 80023bc:	1d14      	adds	r4, r2, #4
 80023be:	4294      	cmp	r4, r2
 80023c0:	4180      	sbcs	r0, r0
 80023c2:	4240      	negs	r0, r0
 80023c4:	181b      	adds	r3, r3, r0
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	d53e      	bpl.n	8002448 <__aeabi_dmul+0x4b8>
 80023ca:	2301      	movs	r3, #1
 80023cc:	2700      	movs	r7, #0
 80023ce:	2600      	movs	r6, #0
 80023d0:	e649      	b.n	8002066 <__aeabi_dmul+0xd6>
 80023d2:	2780      	movs	r7, #128	; 0x80
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	033f      	lsls	r7, r7, #12
 80023d8:	431f      	orrs	r7, r3
 80023da:	033f      	lsls	r7, r7, #12
 80023dc:	0b3f      	lsrs	r7, r7, #12
 80023de:	9400      	str	r4, [sp, #0]
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <__aeabi_dmul+0x4d8>)
 80023e2:	e640      	b.n	8002066 <__aeabi_dmul+0xd6>
 80023e4:	0003      	movs	r3, r0
 80023e6:	465a      	mov	r2, fp
 80023e8:	3b28      	subs	r3, #40	; 0x28
 80023ea:	409a      	lsls	r2, r3
 80023ec:	2600      	movs	r6, #0
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	e66d      	b.n	80020ce <__aeabi_dmul+0x13e>
 80023f2:	4658      	mov	r0, fp
 80023f4:	f000 fd1a 	bl	8002e2c <__clzsi2>
 80023f8:	3020      	adds	r0, #32
 80023fa:	e657      	b.n	80020ac <__aeabi_dmul+0x11c>
 80023fc:	0003      	movs	r3, r0
 80023fe:	4652      	mov	r2, sl
 8002400:	3b28      	subs	r3, #40	; 0x28
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	2200      	movs	r2, #0
 8002408:	e693      	b.n	8002132 <__aeabi_dmul+0x1a2>
 800240a:	4650      	mov	r0, sl
 800240c:	f000 fd0e 	bl	8002e2c <__clzsi2>
 8002410:	3020      	adds	r0, #32
 8002412:	e67b      	b.n	800210c <__aeabi_dmul+0x17c>
 8002414:	46ca      	mov	sl, r9
 8002416:	e750      	b.n	80022ba <__aeabi_dmul+0x32a>
 8002418:	201f      	movs	r0, #31
 800241a:	001e      	movs	r6, r3
 800241c:	4240      	negs	r0, r0
 800241e:	1b04      	subs	r4, r0, r4
 8002420:	40e6      	lsrs	r6, r4
 8002422:	2d20      	cmp	r5, #32
 8002424:	d003      	beq.n	800242e <__aeabi_dmul+0x49e>
 8002426:	4c12      	ldr	r4, [pc, #72]	; (8002470 <__aeabi_dmul+0x4e0>)
 8002428:	4454      	add	r4, sl
 800242a:	40a3      	lsls	r3, r4
 800242c:	431a      	orrs	r2, r3
 800242e:	1e50      	subs	r0, r2, #1
 8002430:	4182      	sbcs	r2, r0
 8002432:	4332      	orrs	r2, r6
 8002434:	2607      	movs	r6, #7
 8002436:	2700      	movs	r7, #0
 8002438:	4016      	ands	r6, r2
 800243a:	d009      	beq.n	8002450 <__aeabi_dmul+0x4c0>
 800243c:	200f      	movs	r0, #15
 800243e:	2300      	movs	r3, #0
 8002440:	4010      	ands	r0, r2
 8002442:	0014      	movs	r4, r2
 8002444:	2804      	cmp	r0, #4
 8002446:	d1b9      	bne.n	80023bc <__aeabi_dmul+0x42c>
 8002448:	0022      	movs	r2, r4
 800244a:	075e      	lsls	r6, r3, #29
 800244c:	025b      	lsls	r3, r3, #9
 800244e:	0b1f      	lsrs	r7, r3, #12
 8002450:	08d2      	lsrs	r2, r2, #3
 8002452:	4316      	orrs	r6, r2
 8002454:	2300      	movs	r3, #0
 8002456:	e606      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002458:	2780      	movs	r7, #128	; 0x80
 800245a:	033f      	lsls	r7, r7, #12
 800245c:	431f      	orrs	r7, r3
 800245e:	033f      	lsls	r7, r7, #12
 8002460:	0b3f      	lsrs	r7, r7, #12
 8002462:	0016      	movs	r6, r2
 8002464:	4b00      	ldr	r3, [pc, #0]	; (8002468 <__aeabi_dmul+0x4d8>)
 8002466:	e5fe      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002468:	000007ff 	.word	0x000007ff
 800246c:	0000041e 	.word	0x0000041e
 8002470:	0000043e 	.word	0x0000043e

08002474 <__aeabi_dsub>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	4657      	mov	r7, sl
 8002478:	464e      	mov	r6, r9
 800247a:	4645      	mov	r5, r8
 800247c:	46de      	mov	lr, fp
 800247e:	000c      	movs	r4, r1
 8002480:	0309      	lsls	r1, r1, #12
 8002482:	b5e0      	push	{r5, r6, r7, lr}
 8002484:	0a49      	lsrs	r1, r1, #9
 8002486:	0f46      	lsrs	r6, r0, #29
 8002488:	005f      	lsls	r7, r3, #1
 800248a:	4331      	orrs	r1, r6
 800248c:	031e      	lsls	r6, r3, #12
 800248e:	0fdb      	lsrs	r3, r3, #31
 8002490:	0a76      	lsrs	r6, r6, #9
 8002492:	469b      	mov	fp, r3
 8002494:	0f53      	lsrs	r3, r2, #29
 8002496:	4333      	orrs	r3, r6
 8002498:	4ec8      	ldr	r6, [pc, #800]	; (80027bc <__aeabi_dsub+0x348>)
 800249a:	0065      	lsls	r5, r4, #1
 800249c:	00c0      	lsls	r0, r0, #3
 800249e:	0fe4      	lsrs	r4, r4, #31
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	0d6d      	lsrs	r5, r5, #21
 80024a4:	46a2      	mov	sl, r4
 80024a6:	4681      	mov	r9, r0
 80024a8:	0d7f      	lsrs	r7, r7, #21
 80024aa:	469c      	mov	ip, r3
 80024ac:	4690      	mov	r8, r2
 80024ae:	42b7      	cmp	r7, r6
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x40>
 80024b2:	e0b9      	b.n	8002628 <__aeabi_dsub+0x1b4>
 80024b4:	465b      	mov	r3, fp
 80024b6:	2601      	movs	r6, #1
 80024b8:	4073      	eors	r3, r6
 80024ba:	469b      	mov	fp, r3
 80024bc:	1bee      	subs	r6, r5, r7
 80024be:	45a3      	cmp	fp, r4
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x50>
 80024c2:	e083      	b.n	80025cc <__aeabi_dsub+0x158>
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	dd63      	ble.n	8002590 <__aeabi_dsub+0x11c>
 80024c8:	2f00      	cmp	r7, #0
 80024ca:	d000      	beq.n	80024ce <__aeabi_dsub+0x5a>
 80024cc:	e0b1      	b.n	8002632 <__aeabi_dsub+0x1be>
 80024ce:	4663      	mov	r3, ip
 80024d0:	4313      	orrs	r3, r2
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0x62>
 80024d4:	e123      	b.n	800271e <__aeabi_dsub+0x2aa>
 80024d6:	1e73      	subs	r3, r6, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d000      	beq.n	80024de <__aeabi_dsub+0x6a>
 80024dc:	e1ba      	b.n	8002854 <__aeabi_dsub+0x3e0>
 80024de:	1a86      	subs	r6, r0, r2
 80024e0:	4663      	mov	r3, ip
 80024e2:	42b0      	cmp	r0, r6
 80024e4:	4180      	sbcs	r0, r0
 80024e6:	2501      	movs	r5, #1
 80024e8:	1ac9      	subs	r1, r1, r3
 80024ea:	4240      	negs	r0, r0
 80024ec:	1a09      	subs	r1, r1, r0
 80024ee:	020b      	lsls	r3, r1, #8
 80024f0:	d400      	bmi.n	80024f4 <__aeabi_dsub+0x80>
 80024f2:	e147      	b.n	8002784 <__aeabi_dsub+0x310>
 80024f4:	0249      	lsls	r1, r1, #9
 80024f6:	0a4b      	lsrs	r3, r1, #9
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x8e>
 8002500:	e189      	b.n	8002816 <__aeabi_dsub+0x3a2>
 8002502:	4640      	mov	r0, r8
 8002504:	f000 fc92 	bl	8002e2c <__clzsi2>
 8002508:	0003      	movs	r3, r0
 800250a:	3b08      	subs	r3, #8
 800250c:	2b1f      	cmp	r3, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x9e>
 8002510:	e17c      	b.n	800280c <__aeabi_dsub+0x398>
 8002512:	2220      	movs	r2, #32
 8002514:	0030      	movs	r0, r6
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	4641      	mov	r1, r8
 800251a:	40d0      	lsrs	r0, r2
 800251c:	4099      	lsls	r1, r3
 800251e:	0002      	movs	r2, r0
 8002520:	409e      	lsls	r6, r3
 8002522:	430a      	orrs	r2, r1
 8002524:	429d      	cmp	r5, r3
 8002526:	dd00      	ble.n	800252a <__aeabi_dsub+0xb6>
 8002528:	e16a      	b.n	8002800 <__aeabi_dsub+0x38c>
 800252a:	1b5d      	subs	r5, r3, r5
 800252c:	1c6b      	adds	r3, r5, #1
 800252e:	2b1f      	cmp	r3, #31
 8002530:	dd00      	ble.n	8002534 <__aeabi_dsub+0xc0>
 8002532:	e194      	b.n	800285e <__aeabi_dsub+0x3ea>
 8002534:	2120      	movs	r1, #32
 8002536:	0010      	movs	r0, r2
 8002538:	0035      	movs	r5, r6
 800253a:	1ac9      	subs	r1, r1, r3
 800253c:	408e      	lsls	r6, r1
 800253e:	40da      	lsrs	r2, r3
 8002540:	4088      	lsls	r0, r1
 8002542:	40dd      	lsrs	r5, r3
 8002544:	1e71      	subs	r1, r6, #1
 8002546:	418e      	sbcs	r6, r1
 8002548:	0011      	movs	r1, r2
 800254a:	2207      	movs	r2, #7
 800254c:	4328      	orrs	r0, r5
 800254e:	2500      	movs	r5, #0
 8002550:	4306      	orrs	r6, r0
 8002552:	4032      	ands	r2, r6
 8002554:	2a00      	cmp	r2, #0
 8002556:	d009      	beq.n	800256c <__aeabi_dsub+0xf8>
 8002558:	230f      	movs	r3, #15
 800255a:	4033      	ands	r3, r6
 800255c:	2b04      	cmp	r3, #4
 800255e:	d005      	beq.n	800256c <__aeabi_dsub+0xf8>
 8002560:	1d33      	adds	r3, r6, #4
 8002562:	42b3      	cmp	r3, r6
 8002564:	41b6      	sbcs	r6, r6
 8002566:	4276      	negs	r6, r6
 8002568:	1989      	adds	r1, r1, r6
 800256a:	001e      	movs	r6, r3
 800256c:	020b      	lsls	r3, r1, #8
 800256e:	d400      	bmi.n	8002572 <__aeabi_dsub+0xfe>
 8002570:	e23d      	b.n	80029ee <__aeabi_dsub+0x57a>
 8002572:	1c6a      	adds	r2, r5, #1
 8002574:	4b91      	ldr	r3, [pc, #580]	; (80027bc <__aeabi_dsub+0x348>)
 8002576:	0555      	lsls	r5, r2, #21
 8002578:	0d6d      	lsrs	r5, r5, #21
 800257a:	429a      	cmp	r2, r3
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x10c>
 800257e:	e119      	b.n	80027b4 <__aeabi_dsub+0x340>
 8002580:	4a8f      	ldr	r2, [pc, #572]	; (80027c0 <__aeabi_dsub+0x34c>)
 8002582:	08f6      	lsrs	r6, r6, #3
 8002584:	400a      	ands	r2, r1
 8002586:	0757      	lsls	r7, r2, #29
 8002588:	0252      	lsls	r2, r2, #9
 800258a:	4337      	orrs	r7, r6
 800258c:	0b12      	lsrs	r2, r2, #12
 800258e:	e09b      	b.n	80026c8 <__aeabi_dsub+0x254>
 8002590:	2e00      	cmp	r6, #0
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x122>
 8002594:	e0c5      	b.n	8002722 <__aeabi_dsub+0x2ae>
 8002596:	1c6e      	adds	r6, r5, #1
 8002598:	0576      	lsls	r6, r6, #21
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	2e01      	cmp	r6, #1
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x12e>
 80025a0:	e148      	b.n	8002834 <__aeabi_dsub+0x3c0>
 80025a2:	4667      	mov	r7, ip
 80025a4:	1a86      	subs	r6, r0, r2
 80025a6:	1bcb      	subs	r3, r1, r7
 80025a8:	42b0      	cmp	r0, r6
 80025aa:	41bf      	sbcs	r7, r7
 80025ac:	427f      	negs	r7, r7
 80025ae:	46b8      	mov	r8, r7
 80025b0:	001f      	movs	r7, r3
 80025b2:	4643      	mov	r3, r8
 80025b4:	1aff      	subs	r7, r7, r3
 80025b6:	003b      	movs	r3, r7
 80025b8:	46b8      	mov	r8, r7
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	d500      	bpl.n	80025c0 <__aeabi_dsub+0x14c>
 80025be:	e15f      	b.n	8002880 <__aeabi_dsub+0x40c>
 80025c0:	4337      	orrs	r7, r6
 80025c2:	d19a      	bne.n	80024fa <__aeabi_dsub+0x86>
 80025c4:	2200      	movs	r2, #0
 80025c6:	2400      	movs	r4, #0
 80025c8:	2500      	movs	r5, #0
 80025ca:	e079      	b.n	80026c0 <__aeabi_dsub+0x24c>
 80025cc:	2e00      	cmp	r6, #0
 80025ce:	dc00      	bgt.n	80025d2 <__aeabi_dsub+0x15e>
 80025d0:	e0fa      	b.n	80027c8 <__aeabi_dsub+0x354>
 80025d2:	2f00      	cmp	r7, #0
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x164>
 80025d6:	e08d      	b.n	80026f4 <__aeabi_dsub+0x280>
 80025d8:	4b78      	ldr	r3, [pc, #480]	; (80027bc <__aeabi_dsub+0x348>)
 80025da:	429d      	cmp	r5, r3
 80025dc:	d067      	beq.n	80026ae <__aeabi_dsub+0x23a>
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	4667      	mov	r7, ip
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431f      	orrs	r7, r3
 80025e6:	46bc      	mov	ip, r7
 80025e8:	2e38      	cmp	r6, #56	; 0x38
 80025ea:	dc00      	bgt.n	80025ee <__aeabi_dsub+0x17a>
 80025ec:	e152      	b.n	8002894 <__aeabi_dsub+0x420>
 80025ee:	4663      	mov	r3, ip
 80025f0:	4313      	orrs	r3, r2
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	4193      	sbcs	r3, r2
 80025f6:	181e      	adds	r6, r3, r0
 80025f8:	4286      	cmp	r6, r0
 80025fa:	4180      	sbcs	r0, r0
 80025fc:	4240      	negs	r0, r0
 80025fe:	1809      	adds	r1, r1, r0
 8002600:	020b      	lsls	r3, r1, #8
 8002602:	d400      	bmi.n	8002606 <__aeabi_dsub+0x192>
 8002604:	e0be      	b.n	8002784 <__aeabi_dsub+0x310>
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <__aeabi_dsub+0x348>)
 8002608:	3501      	adds	r5, #1
 800260a:	429d      	cmp	r5, r3
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x19c>
 800260e:	e0d2      	b.n	80027b6 <__aeabi_dsub+0x342>
 8002610:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <__aeabi_dsub+0x34c>)
 8002612:	0873      	lsrs	r3, r6, #1
 8002614:	400a      	ands	r2, r1
 8002616:	2101      	movs	r1, #1
 8002618:	400e      	ands	r6, r1
 800261a:	431e      	orrs	r6, r3
 800261c:	0851      	lsrs	r1, r2, #1
 800261e:	07d3      	lsls	r3, r2, #31
 8002620:	2207      	movs	r2, #7
 8002622:	431e      	orrs	r6, r3
 8002624:	4032      	ands	r2, r6
 8002626:	e795      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002628:	001e      	movs	r6, r3
 800262a:	4316      	orrs	r6, r2
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x1bc>
 800262e:	e745      	b.n	80024bc <__aeabi_dsub+0x48>
 8002630:	e740      	b.n	80024b4 <__aeabi_dsub+0x40>
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <__aeabi_dsub+0x348>)
 8002634:	429d      	cmp	r5, r3
 8002636:	d03a      	beq.n	80026ae <__aeabi_dsub+0x23a>
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	4667      	mov	r7, ip
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431f      	orrs	r7, r3
 8002640:	46bc      	mov	ip, r7
 8002642:	2e38      	cmp	r6, #56	; 0x38
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x1d4>
 8002646:	e0eb      	b.n	8002820 <__aeabi_dsub+0x3ac>
 8002648:	2e1f      	cmp	r6, #31
 800264a:	dc00      	bgt.n	800264e <__aeabi_dsub+0x1da>
 800264c:	e13a      	b.n	80028c4 <__aeabi_dsub+0x450>
 800264e:	0033      	movs	r3, r6
 8002650:	4667      	mov	r7, ip
 8002652:	3b20      	subs	r3, #32
 8002654:	40df      	lsrs	r7, r3
 8002656:	003b      	movs	r3, r7
 8002658:	2e20      	cmp	r6, #32
 800265a:	d005      	beq.n	8002668 <__aeabi_dsub+0x1f4>
 800265c:	2740      	movs	r7, #64	; 0x40
 800265e:	1bbf      	subs	r7, r7, r6
 8002660:	4666      	mov	r6, ip
 8002662:	40be      	lsls	r6, r7
 8002664:	4332      	orrs	r2, r6
 8002666:	4690      	mov	r8, r2
 8002668:	4646      	mov	r6, r8
 800266a:	1e72      	subs	r2, r6, #1
 800266c:	4196      	sbcs	r6, r2
 800266e:	4333      	orrs	r3, r6
 8002670:	e0da      	b.n	8002828 <__aeabi_dsub+0x3b4>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x204>
 8002676:	e214      	b.n	8002aa2 <__aeabi_dsub+0x62e>
 8002678:	4663      	mov	r3, ip
 800267a:	4313      	orrs	r3, r2
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x20c>
 800267e:	e168      	b.n	8002952 <__aeabi_dsub+0x4de>
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	074e      	lsls	r6, r1, #29
 8002684:	08c0      	lsrs	r0, r0, #3
 8002686:	08c9      	lsrs	r1, r1, #3
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	4306      	orrs	r6, r0
 800268c:	4219      	tst	r1, r3
 800268e:	d008      	beq.n	80026a2 <__aeabi_dsub+0x22e>
 8002690:	4660      	mov	r0, ip
 8002692:	08c0      	lsrs	r0, r0, #3
 8002694:	4218      	tst	r0, r3
 8002696:	d104      	bne.n	80026a2 <__aeabi_dsub+0x22e>
 8002698:	4663      	mov	r3, ip
 800269a:	0001      	movs	r1, r0
 800269c:	08d2      	lsrs	r2, r2, #3
 800269e:	075e      	lsls	r6, r3, #29
 80026a0:	4316      	orrs	r6, r2
 80026a2:	00f3      	lsls	r3, r6, #3
 80026a4:	4699      	mov	r9, r3
 80026a6:	00c9      	lsls	r1, r1, #3
 80026a8:	0f72      	lsrs	r2, r6, #29
 80026aa:	4d44      	ldr	r5, [pc, #272]	; (80027bc <__aeabi_dsub+0x348>)
 80026ac:	4311      	orrs	r1, r2
 80026ae:	464b      	mov	r3, r9
 80026b0:	08de      	lsrs	r6, r3, #3
 80026b2:	4b42      	ldr	r3, [pc, #264]	; (80027bc <__aeabi_dsub+0x348>)
 80026b4:	074f      	lsls	r7, r1, #29
 80026b6:	4337      	orrs	r7, r6
 80026b8:	08ca      	lsrs	r2, r1, #3
 80026ba:	429d      	cmp	r5, r3
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x24c>
 80026be:	e06e      	b.n	800279e <__aeabi_dsub+0x32a>
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	056d      	lsls	r5, r5, #21
 80026c4:	0b12      	lsrs	r2, r2, #12
 80026c6:	0d6d      	lsrs	r5, r5, #21
 80026c8:	2100      	movs	r1, #0
 80026ca:	0312      	lsls	r2, r2, #12
 80026cc:	0b13      	lsrs	r3, r2, #12
 80026ce:	0d0a      	lsrs	r2, r1, #20
 80026d0:	0512      	lsls	r2, r2, #20
 80026d2:	431a      	orrs	r2, r3
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <__aeabi_dsub+0x350>)
 80026d6:	052d      	lsls	r5, r5, #20
 80026d8:	4013      	ands	r3, r2
 80026da:	432b      	orrs	r3, r5
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	07e4      	lsls	r4, r4, #31
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	4323      	orrs	r3, r4
 80026e4:	0038      	movs	r0, r7
 80026e6:	0019      	movs	r1, r3
 80026e8:	bc3c      	pop	{r2, r3, r4, r5}
 80026ea:	4690      	mov	r8, r2
 80026ec:	4699      	mov	r9, r3
 80026ee:	46a2      	mov	sl, r4
 80026f0:	46ab      	mov	fp, r5
 80026f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f4:	4663      	mov	r3, ip
 80026f6:	4313      	orrs	r3, r2
 80026f8:	d011      	beq.n	800271e <__aeabi_dsub+0x2aa>
 80026fa:	1e73      	subs	r3, r6, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d000      	beq.n	8002702 <__aeabi_dsub+0x28e>
 8002700:	e107      	b.n	8002912 <__aeabi_dsub+0x49e>
 8002702:	1886      	adds	r6, r0, r2
 8002704:	4286      	cmp	r6, r0
 8002706:	4180      	sbcs	r0, r0
 8002708:	4461      	add	r1, ip
 800270a:	4240      	negs	r0, r0
 800270c:	1809      	adds	r1, r1, r0
 800270e:	2501      	movs	r5, #1
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d537      	bpl.n	8002784 <__aeabi_dsub+0x310>
 8002714:	2502      	movs	r5, #2
 8002716:	e77b      	b.n	8002610 <__aeabi_dsub+0x19c>
 8002718:	003e      	movs	r6, r7
 800271a:	4661      	mov	r1, ip
 800271c:	4691      	mov	r9, r2
 800271e:	0035      	movs	r5, r6
 8002720:	e7c5      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002722:	465c      	mov	r4, fp
 8002724:	2d00      	cmp	r5, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x2b6>
 8002728:	e0e1      	b.n	80028ee <__aeabi_dsub+0x47a>
 800272a:	000b      	movs	r3, r1
 800272c:	4303      	orrs	r3, r0
 800272e:	d0f3      	beq.n	8002718 <__aeabi_dsub+0x2a4>
 8002730:	1c73      	adds	r3, r6, #1
 8002732:	d100      	bne.n	8002736 <__aeabi_dsub+0x2c2>
 8002734:	e1ac      	b.n	8002a90 <__aeabi_dsub+0x61c>
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <__aeabi_dsub+0x348>)
 8002738:	429f      	cmp	r7, r3
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x2ca>
 800273c:	e13a      	b.n	80029b4 <__aeabi_dsub+0x540>
 800273e:	43f3      	mvns	r3, r6
 8002740:	2b38      	cmp	r3, #56	; 0x38
 8002742:	dd00      	ble.n	8002746 <__aeabi_dsub+0x2d2>
 8002744:	e16f      	b.n	8002a26 <__aeabi_dsub+0x5b2>
 8002746:	2b1f      	cmp	r3, #31
 8002748:	dd00      	ble.n	800274c <__aeabi_dsub+0x2d8>
 800274a:	e18c      	b.n	8002a66 <__aeabi_dsub+0x5f2>
 800274c:	2520      	movs	r5, #32
 800274e:	000e      	movs	r6, r1
 8002750:	1aed      	subs	r5, r5, r3
 8002752:	40ae      	lsls	r6, r5
 8002754:	46b0      	mov	r8, r6
 8002756:	0006      	movs	r6, r0
 8002758:	46aa      	mov	sl, r5
 800275a:	40de      	lsrs	r6, r3
 800275c:	4645      	mov	r5, r8
 800275e:	4335      	orrs	r5, r6
 8002760:	002e      	movs	r6, r5
 8002762:	4655      	mov	r5, sl
 8002764:	40d9      	lsrs	r1, r3
 8002766:	40a8      	lsls	r0, r5
 8002768:	4663      	mov	r3, ip
 800276a:	1e45      	subs	r5, r0, #1
 800276c:	41a8      	sbcs	r0, r5
 800276e:	1a5b      	subs	r3, r3, r1
 8002770:	469c      	mov	ip, r3
 8002772:	4330      	orrs	r0, r6
 8002774:	1a16      	subs	r6, r2, r0
 8002776:	42b2      	cmp	r2, r6
 8002778:	4192      	sbcs	r2, r2
 800277a:	4663      	mov	r3, ip
 800277c:	4252      	negs	r2, r2
 800277e:	1a99      	subs	r1, r3, r2
 8002780:	003d      	movs	r5, r7
 8002782:	e6b4      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002784:	2207      	movs	r2, #7
 8002786:	4032      	ands	r2, r6
 8002788:	2a00      	cmp	r2, #0
 800278a:	d000      	beq.n	800278e <__aeabi_dsub+0x31a>
 800278c:	e6e4      	b.n	8002558 <__aeabi_dsub+0xe4>
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <__aeabi_dsub+0x348>)
 8002790:	08f6      	lsrs	r6, r6, #3
 8002792:	074f      	lsls	r7, r1, #29
 8002794:	4337      	orrs	r7, r6
 8002796:	08ca      	lsrs	r2, r1, #3
 8002798:	429d      	cmp	r5, r3
 800279a:	d000      	beq.n	800279e <__aeabi_dsub+0x32a>
 800279c:	e790      	b.n	80026c0 <__aeabi_dsub+0x24c>
 800279e:	003b      	movs	r3, r7
 80027a0:	4313      	orrs	r3, r2
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0x332>
 80027a4:	e1a6      	b.n	8002af4 <__aeabi_dsub+0x680>
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	431a      	orrs	r2, r3
 80027ac:	0312      	lsls	r2, r2, #12
 80027ae:	0b12      	lsrs	r2, r2, #12
 80027b0:	4d02      	ldr	r5, [pc, #8]	; (80027bc <__aeabi_dsub+0x348>)
 80027b2:	e789      	b.n	80026c8 <__aeabi_dsub+0x254>
 80027b4:	0015      	movs	r5, r2
 80027b6:	2200      	movs	r2, #0
 80027b8:	2700      	movs	r7, #0
 80027ba:	e785      	b.n	80026c8 <__aeabi_dsub+0x254>
 80027bc:	000007ff 	.word	0x000007ff
 80027c0:	ff7fffff 	.word	0xff7fffff
 80027c4:	800fffff 	.word	0x800fffff
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d000      	beq.n	80027ce <__aeabi_dsub+0x35a>
 80027cc:	e0c7      	b.n	800295e <__aeabi_dsub+0x4ea>
 80027ce:	1c6b      	adds	r3, r5, #1
 80027d0:	055e      	lsls	r6, r3, #21
 80027d2:	0d76      	lsrs	r6, r6, #21
 80027d4:	2e01      	cmp	r6, #1
 80027d6:	dc00      	bgt.n	80027da <__aeabi_dsub+0x366>
 80027d8:	e0f0      	b.n	80029bc <__aeabi_dsub+0x548>
 80027da:	4dc8      	ldr	r5, [pc, #800]	; (8002afc <__aeabi_dsub+0x688>)
 80027dc:	42ab      	cmp	r3, r5
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x36e>
 80027e0:	e0b9      	b.n	8002956 <__aeabi_dsub+0x4e2>
 80027e2:	1885      	adds	r5, r0, r2
 80027e4:	000a      	movs	r2, r1
 80027e6:	4285      	cmp	r5, r0
 80027e8:	4189      	sbcs	r1, r1
 80027ea:	4462      	add	r2, ip
 80027ec:	4249      	negs	r1, r1
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	2207      	movs	r2, #7
 80027f2:	07ce      	lsls	r6, r1, #31
 80027f4:	086d      	lsrs	r5, r5, #1
 80027f6:	432e      	orrs	r6, r5
 80027f8:	0849      	lsrs	r1, r1, #1
 80027fa:	4032      	ands	r2, r6
 80027fc:	001d      	movs	r5, r3
 80027fe:	e6a9      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002800:	49bf      	ldr	r1, [pc, #764]	; (8002b00 <__aeabi_dsub+0x68c>)
 8002802:	1aed      	subs	r5, r5, r3
 8002804:	4011      	ands	r1, r2
 8002806:	2207      	movs	r2, #7
 8002808:	4032      	ands	r2, r6
 800280a:	e6a3      	b.n	8002554 <__aeabi_dsub+0xe0>
 800280c:	0032      	movs	r2, r6
 800280e:	3828      	subs	r0, #40	; 0x28
 8002810:	4082      	lsls	r2, r0
 8002812:	2600      	movs	r6, #0
 8002814:	e686      	b.n	8002524 <__aeabi_dsub+0xb0>
 8002816:	0030      	movs	r0, r6
 8002818:	f000 fb08 	bl	8002e2c <__clzsi2>
 800281c:	3020      	adds	r0, #32
 800281e:	e673      	b.n	8002508 <__aeabi_dsub+0x94>
 8002820:	4663      	mov	r3, ip
 8002822:	4313      	orrs	r3, r2
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	4193      	sbcs	r3, r2
 8002828:	1ac6      	subs	r6, r0, r3
 800282a:	42b0      	cmp	r0, r6
 800282c:	4180      	sbcs	r0, r0
 800282e:	4240      	negs	r0, r0
 8002830:	1a09      	subs	r1, r1, r0
 8002832:	e65c      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002834:	000e      	movs	r6, r1
 8002836:	4667      	mov	r7, ip
 8002838:	4306      	orrs	r6, r0
 800283a:	4317      	orrs	r7, r2
 800283c:	2d00      	cmp	r5, #0
 800283e:	d15e      	bne.n	80028fe <__aeabi_dsub+0x48a>
 8002840:	2e00      	cmp	r6, #0
 8002842:	d000      	beq.n	8002846 <__aeabi_dsub+0x3d2>
 8002844:	e0f3      	b.n	8002a2e <__aeabi_dsub+0x5ba>
 8002846:	2f00      	cmp	r7, #0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x3d8>
 800284a:	e11e      	b.n	8002a8a <__aeabi_dsub+0x616>
 800284c:	465c      	mov	r4, fp
 800284e:	4661      	mov	r1, ip
 8002850:	4691      	mov	r9, r2
 8002852:	e72c      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002854:	4fa9      	ldr	r7, [pc, #676]	; (8002afc <__aeabi_dsub+0x688>)
 8002856:	42be      	cmp	r6, r7
 8002858:	d07b      	beq.n	8002952 <__aeabi_dsub+0x4de>
 800285a:	001e      	movs	r6, r3
 800285c:	e6f1      	b.n	8002642 <__aeabi_dsub+0x1ce>
 800285e:	0010      	movs	r0, r2
 8002860:	3d1f      	subs	r5, #31
 8002862:	40e8      	lsrs	r0, r5
 8002864:	2b20      	cmp	r3, #32
 8002866:	d003      	beq.n	8002870 <__aeabi_dsub+0x3fc>
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	1acb      	subs	r3, r1, r3
 800286c:	409a      	lsls	r2, r3
 800286e:	4316      	orrs	r6, r2
 8002870:	1e73      	subs	r3, r6, #1
 8002872:	419e      	sbcs	r6, r3
 8002874:	2207      	movs	r2, #7
 8002876:	4306      	orrs	r6, r0
 8002878:	4032      	ands	r2, r6
 800287a:	2100      	movs	r1, #0
 800287c:	2500      	movs	r5, #0
 800287e:	e783      	b.n	8002788 <__aeabi_dsub+0x314>
 8002880:	1a16      	subs	r6, r2, r0
 8002882:	4663      	mov	r3, ip
 8002884:	42b2      	cmp	r2, r6
 8002886:	4180      	sbcs	r0, r0
 8002888:	1a59      	subs	r1, r3, r1
 800288a:	4240      	negs	r0, r0
 800288c:	1a0b      	subs	r3, r1, r0
 800288e:	4698      	mov	r8, r3
 8002890:	465c      	mov	r4, fp
 8002892:	e632      	b.n	80024fa <__aeabi_dsub+0x86>
 8002894:	2e1f      	cmp	r6, #31
 8002896:	dd00      	ble.n	800289a <__aeabi_dsub+0x426>
 8002898:	e0ab      	b.n	80029f2 <__aeabi_dsub+0x57e>
 800289a:	2720      	movs	r7, #32
 800289c:	1bbb      	subs	r3, r7, r6
 800289e:	469a      	mov	sl, r3
 80028a0:	4663      	mov	r3, ip
 80028a2:	4657      	mov	r7, sl
 80028a4:	40bb      	lsls	r3, r7
 80028a6:	4699      	mov	r9, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	464f      	mov	r7, r9
 80028ac:	40f3      	lsrs	r3, r6
 80028ae:	431f      	orrs	r7, r3
 80028b0:	003b      	movs	r3, r7
 80028b2:	4657      	mov	r7, sl
 80028b4:	40ba      	lsls	r2, r7
 80028b6:	1e57      	subs	r7, r2, #1
 80028b8:	41ba      	sbcs	r2, r7
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4662      	mov	r2, ip
 80028be:	40f2      	lsrs	r2, r6
 80028c0:	1889      	adds	r1, r1, r2
 80028c2:	e698      	b.n	80025f6 <__aeabi_dsub+0x182>
 80028c4:	2720      	movs	r7, #32
 80028c6:	1bbb      	subs	r3, r7, r6
 80028c8:	469a      	mov	sl, r3
 80028ca:	4663      	mov	r3, ip
 80028cc:	4657      	mov	r7, sl
 80028ce:	40bb      	lsls	r3, r7
 80028d0:	4699      	mov	r9, r3
 80028d2:	0013      	movs	r3, r2
 80028d4:	464f      	mov	r7, r9
 80028d6:	40f3      	lsrs	r3, r6
 80028d8:	431f      	orrs	r7, r3
 80028da:	003b      	movs	r3, r7
 80028dc:	4657      	mov	r7, sl
 80028de:	40ba      	lsls	r2, r7
 80028e0:	1e57      	subs	r7, r2, #1
 80028e2:	41ba      	sbcs	r2, r7
 80028e4:	4313      	orrs	r3, r2
 80028e6:	4662      	mov	r2, ip
 80028e8:	40f2      	lsrs	r2, r6
 80028ea:	1a89      	subs	r1, r1, r2
 80028ec:	e79c      	b.n	8002828 <__aeabi_dsub+0x3b4>
 80028ee:	4b83      	ldr	r3, [pc, #524]	; (8002afc <__aeabi_dsub+0x688>)
 80028f0:	429f      	cmp	r7, r3
 80028f2:	d05f      	beq.n	80029b4 <__aeabi_dsub+0x540>
 80028f4:	2580      	movs	r5, #128	; 0x80
 80028f6:	042d      	lsls	r5, r5, #16
 80028f8:	4273      	negs	r3, r6
 80028fa:	4329      	orrs	r1, r5
 80028fc:	e720      	b.n	8002740 <__aeabi_dsub+0x2cc>
 80028fe:	2e00      	cmp	r6, #0
 8002900:	d10c      	bne.n	800291c <__aeabi_dsub+0x4a8>
 8002902:	2f00      	cmp	r7, #0
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x494>
 8002906:	e0d0      	b.n	8002aaa <__aeabi_dsub+0x636>
 8002908:	465c      	mov	r4, fp
 800290a:	4661      	mov	r1, ip
 800290c:	4691      	mov	r9, r2
 800290e:	4d7b      	ldr	r5, [pc, #492]	; (8002afc <__aeabi_dsub+0x688>)
 8002910:	e6cd      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002912:	4f7a      	ldr	r7, [pc, #488]	; (8002afc <__aeabi_dsub+0x688>)
 8002914:	42be      	cmp	r6, r7
 8002916:	d01c      	beq.n	8002952 <__aeabi_dsub+0x4de>
 8002918:	001e      	movs	r6, r3
 800291a:	e665      	b.n	80025e8 <__aeabi_dsub+0x174>
 800291c:	2f00      	cmp	r7, #0
 800291e:	d018      	beq.n	8002952 <__aeabi_dsub+0x4de>
 8002920:	08c0      	lsrs	r0, r0, #3
 8002922:	074e      	lsls	r6, r1, #29
 8002924:	4306      	orrs	r6, r0
 8002926:	2080      	movs	r0, #128	; 0x80
 8002928:	08c9      	lsrs	r1, r1, #3
 800292a:	0300      	lsls	r0, r0, #12
 800292c:	4201      	tst	r1, r0
 800292e:	d008      	beq.n	8002942 <__aeabi_dsub+0x4ce>
 8002930:	4663      	mov	r3, ip
 8002932:	08dc      	lsrs	r4, r3, #3
 8002934:	4204      	tst	r4, r0
 8002936:	d104      	bne.n	8002942 <__aeabi_dsub+0x4ce>
 8002938:	0021      	movs	r1, r4
 800293a:	46da      	mov	sl, fp
 800293c:	08d2      	lsrs	r2, r2, #3
 800293e:	075e      	lsls	r6, r3, #29
 8002940:	4316      	orrs	r6, r2
 8002942:	00f3      	lsls	r3, r6, #3
 8002944:	4699      	mov	r9, r3
 8002946:	2401      	movs	r4, #1
 8002948:	4653      	mov	r3, sl
 800294a:	00c9      	lsls	r1, r1, #3
 800294c:	0f72      	lsrs	r2, r6, #29
 800294e:	4311      	orrs	r1, r2
 8002950:	401c      	ands	r4, r3
 8002952:	4d6a      	ldr	r5, [pc, #424]	; (8002afc <__aeabi_dsub+0x688>)
 8002954:	e6ab      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002956:	001d      	movs	r5, r3
 8002958:	2200      	movs	r2, #0
 800295a:	2700      	movs	r7, #0
 800295c:	e6b4      	b.n	80026c8 <__aeabi_dsub+0x254>
 800295e:	2d00      	cmp	r5, #0
 8002960:	d159      	bne.n	8002a16 <__aeabi_dsub+0x5a2>
 8002962:	000b      	movs	r3, r1
 8002964:	4303      	orrs	r3, r0
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x4f6>
 8002968:	e6d6      	b.n	8002718 <__aeabi_dsub+0x2a4>
 800296a:	1c73      	adds	r3, r6, #1
 800296c:	d100      	bne.n	8002970 <__aeabi_dsub+0x4fc>
 800296e:	e0b2      	b.n	8002ad6 <__aeabi_dsub+0x662>
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <__aeabi_dsub+0x688>)
 8002972:	429f      	cmp	r7, r3
 8002974:	d01e      	beq.n	80029b4 <__aeabi_dsub+0x540>
 8002976:	43f3      	mvns	r3, r6
 8002978:	2b38      	cmp	r3, #56	; 0x38
 800297a:	dc6f      	bgt.n	8002a5c <__aeabi_dsub+0x5e8>
 800297c:	2b1f      	cmp	r3, #31
 800297e:	dd00      	ble.n	8002982 <__aeabi_dsub+0x50e>
 8002980:	e097      	b.n	8002ab2 <__aeabi_dsub+0x63e>
 8002982:	2520      	movs	r5, #32
 8002984:	000e      	movs	r6, r1
 8002986:	1aed      	subs	r5, r5, r3
 8002988:	40ae      	lsls	r6, r5
 800298a:	46b0      	mov	r8, r6
 800298c:	0006      	movs	r6, r0
 800298e:	46aa      	mov	sl, r5
 8002990:	40de      	lsrs	r6, r3
 8002992:	4645      	mov	r5, r8
 8002994:	4335      	orrs	r5, r6
 8002996:	002e      	movs	r6, r5
 8002998:	4655      	mov	r5, sl
 800299a:	40a8      	lsls	r0, r5
 800299c:	40d9      	lsrs	r1, r3
 800299e:	1e45      	subs	r5, r0, #1
 80029a0:	41a8      	sbcs	r0, r5
 80029a2:	448c      	add	ip, r1
 80029a4:	4306      	orrs	r6, r0
 80029a6:	18b6      	adds	r6, r6, r2
 80029a8:	4296      	cmp	r6, r2
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	4251      	negs	r1, r2
 80029ae:	4461      	add	r1, ip
 80029b0:	003d      	movs	r5, r7
 80029b2:	e625      	b.n	8002600 <__aeabi_dsub+0x18c>
 80029b4:	003d      	movs	r5, r7
 80029b6:	4661      	mov	r1, ip
 80029b8:	4691      	mov	r9, r2
 80029ba:	e678      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029bc:	000b      	movs	r3, r1
 80029be:	4303      	orrs	r3, r0
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x552>
 80029c4:	e655      	b.n	8002672 <__aeabi_dsub+0x1fe>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f5      	beq.n	80029b6 <__aeabi_dsub+0x542>
 80029ca:	4663      	mov	r3, ip
 80029cc:	4313      	orrs	r3, r2
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x55e>
 80029d0:	e66d      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029d2:	1886      	adds	r6, r0, r2
 80029d4:	4286      	cmp	r6, r0
 80029d6:	4180      	sbcs	r0, r0
 80029d8:	4461      	add	r1, ip
 80029da:	4240      	negs	r0, r0
 80029dc:	1809      	adds	r1, r1, r0
 80029de:	2200      	movs	r2, #0
 80029e0:	020b      	lsls	r3, r1, #8
 80029e2:	d400      	bmi.n	80029e6 <__aeabi_dsub+0x572>
 80029e4:	e6d0      	b.n	8002788 <__aeabi_dsub+0x314>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <__aeabi_dsub+0x68c>)
 80029e8:	3501      	adds	r5, #1
 80029ea:	4019      	ands	r1, r3
 80029ec:	e5b2      	b.n	8002554 <__aeabi_dsub+0xe0>
 80029ee:	46b1      	mov	r9, r6
 80029f0:	e65d      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029f2:	0033      	movs	r3, r6
 80029f4:	4667      	mov	r7, ip
 80029f6:	3b20      	subs	r3, #32
 80029f8:	40df      	lsrs	r7, r3
 80029fa:	003b      	movs	r3, r7
 80029fc:	2e20      	cmp	r6, #32
 80029fe:	d005      	beq.n	8002a0c <__aeabi_dsub+0x598>
 8002a00:	2740      	movs	r7, #64	; 0x40
 8002a02:	1bbf      	subs	r7, r7, r6
 8002a04:	4666      	mov	r6, ip
 8002a06:	40be      	lsls	r6, r7
 8002a08:	4332      	orrs	r2, r6
 8002a0a:	4690      	mov	r8, r2
 8002a0c:	4646      	mov	r6, r8
 8002a0e:	1e72      	subs	r2, r6, #1
 8002a10:	4196      	sbcs	r6, r2
 8002a12:	4333      	orrs	r3, r6
 8002a14:	e5ef      	b.n	80025f6 <__aeabi_dsub+0x182>
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <__aeabi_dsub+0x688>)
 8002a18:	429f      	cmp	r7, r3
 8002a1a:	d0cb      	beq.n	80029b4 <__aeabi_dsub+0x540>
 8002a1c:	2580      	movs	r5, #128	; 0x80
 8002a1e:	042d      	lsls	r5, r5, #16
 8002a20:	4273      	negs	r3, r6
 8002a22:	4329      	orrs	r1, r5
 8002a24:	e7a8      	b.n	8002978 <__aeabi_dsub+0x504>
 8002a26:	4308      	orrs	r0, r1
 8002a28:	1e41      	subs	r1, r0, #1
 8002a2a:	4188      	sbcs	r0, r1
 8002a2c:	e6a2      	b.n	8002774 <__aeabi_dsub+0x300>
 8002a2e:	2f00      	cmp	r7, #0
 8002a30:	d100      	bne.n	8002a34 <__aeabi_dsub+0x5c0>
 8002a32:	e63c      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002a34:	4663      	mov	r3, ip
 8002a36:	1a86      	subs	r6, r0, r2
 8002a38:	1acf      	subs	r7, r1, r3
 8002a3a:	42b0      	cmp	r0, r6
 8002a3c:	419b      	sbcs	r3, r3
 8002a3e:	425b      	negs	r3, r3
 8002a40:	1afb      	subs	r3, r7, r3
 8002a42:	4698      	mov	r8, r3
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	d54e      	bpl.n	8002ae6 <__aeabi_dsub+0x672>
 8002a48:	1a16      	subs	r6, r2, r0
 8002a4a:	4663      	mov	r3, ip
 8002a4c:	42b2      	cmp	r2, r6
 8002a4e:	4192      	sbcs	r2, r2
 8002a50:	1a59      	subs	r1, r3, r1
 8002a52:	4252      	negs	r2, r2
 8002a54:	1a89      	subs	r1, r1, r2
 8002a56:	465c      	mov	r4, fp
 8002a58:	2200      	movs	r2, #0
 8002a5a:	e57b      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002a5c:	4301      	orrs	r1, r0
 8002a5e:	000e      	movs	r6, r1
 8002a60:	1e71      	subs	r1, r6, #1
 8002a62:	418e      	sbcs	r6, r1
 8002a64:	e79f      	b.n	80029a6 <__aeabi_dsub+0x532>
 8002a66:	001d      	movs	r5, r3
 8002a68:	000e      	movs	r6, r1
 8002a6a:	3d20      	subs	r5, #32
 8002a6c:	40ee      	lsrs	r6, r5
 8002a6e:	46b0      	mov	r8, r6
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d004      	beq.n	8002a7e <__aeabi_dsub+0x60a>
 8002a74:	2540      	movs	r5, #64	; 0x40
 8002a76:	1aeb      	subs	r3, r5, r3
 8002a78:	4099      	lsls	r1, r3
 8002a7a:	4308      	orrs	r0, r1
 8002a7c:	4681      	mov	r9, r0
 8002a7e:	4648      	mov	r0, r9
 8002a80:	4643      	mov	r3, r8
 8002a82:	1e41      	subs	r1, r0, #1
 8002a84:	4188      	sbcs	r0, r1
 8002a86:	4318      	orrs	r0, r3
 8002a88:	e674      	b.n	8002774 <__aeabi_dsub+0x300>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2400      	movs	r4, #0
 8002a8e:	e617      	b.n	80026c0 <__aeabi_dsub+0x24c>
 8002a90:	1a16      	subs	r6, r2, r0
 8002a92:	4663      	mov	r3, ip
 8002a94:	42b2      	cmp	r2, r6
 8002a96:	4192      	sbcs	r2, r2
 8002a98:	1a59      	subs	r1, r3, r1
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	1a89      	subs	r1, r1, r2
 8002a9e:	003d      	movs	r5, r7
 8002aa0:	e525      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002aa2:	4661      	mov	r1, ip
 8002aa4:	4691      	mov	r9, r2
 8002aa6:	4d15      	ldr	r5, [pc, #84]	; (8002afc <__aeabi_dsub+0x688>)
 8002aa8:	e601      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	2400      	movs	r4, #0
 8002aae:	0312      	lsls	r2, r2, #12
 8002ab0:	e679      	b.n	80027a6 <__aeabi_dsub+0x332>
 8002ab2:	001d      	movs	r5, r3
 8002ab4:	000e      	movs	r6, r1
 8002ab6:	3d20      	subs	r5, #32
 8002ab8:	40ee      	lsrs	r6, r5
 8002aba:	46b0      	mov	r8, r6
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d004      	beq.n	8002aca <__aeabi_dsub+0x656>
 8002ac0:	2540      	movs	r5, #64	; 0x40
 8002ac2:	1aeb      	subs	r3, r5, r3
 8002ac4:	4099      	lsls	r1, r3
 8002ac6:	4308      	orrs	r0, r1
 8002ac8:	4681      	mov	r9, r0
 8002aca:	464e      	mov	r6, r9
 8002acc:	4643      	mov	r3, r8
 8002ace:	1e71      	subs	r1, r6, #1
 8002ad0:	418e      	sbcs	r6, r1
 8002ad2:	431e      	orrs	r6, r3
 8002ad4:	e767      	b.n	80029a6 <__aeabi_dsub+0x532>
 8002ad6:	1886      	adds	r6, r0, r2
 8002ad8:	4296      	cmp	r6, r2
 8002ada:	419b      	sbcs	r3, r3
 8002adc:	4461      	add	r1, ip
 8002ade:	425b      	negs	r3, r3
 8002ae0:	18c9      	adds	r1, r1, r3
 8002ae2:	003d      	movs	r5, r7
 8002ae4:	e58c      	b.n	8002600 <__aeabi_dsub+0x18c>
 8002ae6:	4647      	mov	r7, r8
 8002ae8:	4337      	orrs	r7, r6
 8002aea:	d0ce      	beq.n	8002a8a <__aeabi_dsub+0x616>
 8002aec:	2207      	movs	r2, #7
 8002aee:	4641      	mov	r1, r8
 8002af0:	4032      	ands	r2, r6
 8002af2:	e649      	b.n	8002788 <__aeabi_dsub+0x314>
 8002af4:	2700      	movs	r7, #0
 8002af6:	003a      	movs	r2, r7
 8002af8:	e5e6      	b.n	80026c8 <__aeabi_dsub+0x254>
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	000007ff 	.word	0x000007ff
 8002b00:	ff7fffff 	.word	0xff7fffff

08002b04 <__aeabi_dcmpun>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0c      	ldr	r6, [pc, #48]	; (8002b38 <__aeabi_dcmpun+0x34>)
 8002b08:	030d      	lsls	r5, r1, #12
 8002b0a:	031c      	lsls	r4, r3, #12
 8002b0c:	0049      	lsls	r1, r1, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	0b2d      	lsrs	r5, r5, #12
 8002b12:	0d49      	lsrs	r1, r1, #21
 8002b14:	0b24      	lsrs	r4, r4, #12
 8002b16:	0d5b      	lsrs	r3, r3, #21
 8002b18:	42b1      	cmp	r1, r6
 8002b1a:	d008      	beq.n	8002b2e <__aeabi_dcmpun+0x2a>
 8002b1c:	4906      	ldr	r1, [pc, #24]	; (8002b38 <__aeabi_dcmpun+0x34>)
 8002b1e:	2000      	movs	r0, #0
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d103      	bne.n	8002b2c <__aeabi_dcmpun+0x28>
 8002b24:	4314      	orrs	r4, r2
 8002b26:	0020      	movs	r0, r4
 8002b28:	1e44      	subs	r4, r0, #1
 8002b2a:	41a0      	sbcs	r0, r4
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
 8002b2e:	4305      	orrs	r5, r0
 8002b30:	2001      	movs	r0, #1
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d1fa      	bne.n	8002b2c <__aeabi_dcmpun+0x28>
 8002b36:	e7f1      	b.n	8002b1c <__aeabi_dcmpun+0x18>
 8002b38:	000007ff 	.word	0x000007ff

08002b3c <__aeabi_d2iz>:
 8002b3c:	b530      	push	{r4, r5, lr}
 8002b3e:	4d14      	ldr	r5, [pc, #80]	; (8002b90 <__aeabi_d2iz+0x54>)
 8002b40:	030a      	lsls	r2, r1, #12
 8002b42:	004b      	lsls	r3, r1, #1
 8002b44:	0b12      	lsrs	r2, r2, #12
 8002b46:	0d5b      	lsrs	r3, r3, #21
 8002b48:	0fc9      	lsrs	r1, r1, #31
 8002b4a:	2400      	movs	r4, #0
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dd11      	ble.n	8002b74 <__aeabi_d2iz+0x38>
 8002b50:	4c10      	ldr	r4, [pc, #64]	; (8002b94 <__aeabi_d2iz+0x58>)
 8002b52:	42a3      	cmp	r3, r4
 8002b54:	dc10      	bgt.n	8002b78 <__aeabi_d2iz+0x3c>
 8002b56:	2480      	movs	r4, #128	; 0x80
 8002b58:	0364      	lsls	r4, r4, #13
 8002b5a:	4322      	orrs	r2, r4
 8002b5c:	4c0e      	ldr	r4, [pc, #56]	; (8002b98 <__aeabi_d2iz+0x5c>)
 8002b5e:	1ae4      	subs	r4, r4, r3
 8002b60:	2c1f      	cmp	r4, #31
 8002b62:	dd0c      	ble.n	8002b7e <__aeabi_d2iz+0x42>
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <__aeabi_d2iz+0x60>)
 8002b66:	1ac3      	subs	r3, r0, r3
 8002b68:	40da      	lsrs	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	425c      	negs	r4, r3
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_d2iz+0x38>
 8002b72:	001c      	movs	r4, r3
 8002b74:	0020      	movs	r0, r4
 8002b76:	bd30      	pop	{r4, r5, pc}
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <__aeabi_d2iz+0x64>)
 8002b7a:	18cc      	adds	r4, r1, r3
 8002b7c:	e7fa      	b.n	8002b74 <__aeabi_d2iz+0x38>
 8002b7e:	4d09      	ldr	r5, [pc, #36]	; (8002ba4 <__aeabi_d2iz+0x68>)
 8002b80:	40e0      	lsrs	r0, r4
 8002b82:	46ac      	mov	ip, r5
 8002b84:	4463      	add	r3, ip
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	4303      	orrs	r3, r0
 8002b8c:	e7ee      	b.n	8002b6c <__aeabi_d2iz+0x30>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	000003fe 	.word	0x000003fe
 8002b94:	0000041d 	.word	0x0000041d
 8002b98:	00000433 	.word	0x00000433
 8002b9c:	00000413 	.word	0x00000413
 8002ba0:	7fffffff 	.word	0x7fffffff
 8002ba4:	fffffbed 	.word	0xfffffbed

08002ba8 <__aeabi_i2d>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d02d      	beq.n	8002c0a <__aeabi_i2d+0x62>
 8002bae:	17c3      	asrs	r3, r0, #31
 8002bb0:	18c5      	adds	r5, r0, r3
 8002bb2:	405d      	eors	r5, r3
 8002bb4:	0fc4      	lsrs	r4, r0, #31
 8002bb6:	0028      	movs	r0, r5
 8002bb8:	f000 f938 	bl	8002e2c <__clzsi2>
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <__aeabi_i2d+0x6c>)
 8002bbe:	1a1b      	subs	r3, r3, r0
 8002bc0:	055b      	lsls	r3, r3, #21
 8002bc2:	0d5b      	lsrs	r3, r3, #21
 8002bc4:	280a      	cmp	r0, #10
 8002bc6:	dd15      	ble.n	8002bf4 <__aeabi_i2d+0x4c>
 8002bc8:	380b      	subs	r0, #11
 8002bca:	4085      	lsls	r5, r0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	032d      	lsls	r5, r5, #12
 8002bd0:	0b2d      	lsrs	r5, r5, #12
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	032d      	lsls	r5, r5, #12
 8002bd8:	0d0a      	lsrs	r2, r1, #20
 8002bda:	0b2d      	lsrs	r5, r5, #12
 8002bdc:	0512      	lsls	r2, r2, #20
 8002bde:	432a      	orrs	r2, r5
 8002be0:	4d0d      	ldr	r5, [pc, #52]	; (8002c18 <__aeabi_i2d+0x70>)
 8002be2:	051b      	lsls	r3, r3, #20
 8002be4:	402a      	ands	r2, r5
 8002be6:	4313      	orrs	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	07e4      	lsls	r4, r4, #31
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	0029      	movs	r1, r5
 8002bf8:	3215      	adds	r2, #21
 8002bfa:	4091      	lsls	r1, r2
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	210b      	movs	r1, #11
 8002c00:	1a08      	subs	r0, r1, r0
 8002c02:	40c5      	lsrs	r5, r0
 8002c04:	032d      	lsls	r5, r5, #12
 8002c06:	0b2d      	lsrs	r5, r5, #12
 8002c08:	e7e3      	b.n	8002bd2 <__aeabi_i2d+0x2a>
 8002c0a:	2400      	movs	r4, #0
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2500      	movs	r5, #0
 8002c10:	2200      	movs	r2, #0
 8002c12:	e7de      	b.n	8002bd2 <__aeabi_i2d+0x2a>
 8002c14:	0000041e 	.word	0x0000041e
 8002c18:	800fffff 	.word	0x800fffff

08002c1c <__aeabi_ui2d>:
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	1e04      	subs	r4, r0, #0
 8002c20:	d025      	beq.n	8002c6e <__aeabi_ui2d+0x52>
 8002c22:	f000 f903 	bl	8002e2c <__clzsi2>
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <__aeabi_ui2d+0x5c>)
 8002c28:	1a1b      	subs	r3, r3, r0
 8002c2a:	055b      	lsls	r3, r3, #21
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	280a      	cmp	r0, #10
 8002c30:	dd12      	ble.n	8002c58 <__aeabi_ui2d+0x3c>
 8002c32:	380b      	subs	r0, #11
 8002c34:	4084      	lsls	r4, r0
 8002c36:	2200      	movs	r2, #0
 8002c38:	0324      	lsls	r4, r4, #12
 8002c3a:	0b24      	lsrs	r4, r4, #12
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	0010      	movs	r0, r2
 8002c40:	0324      	lsls	r4, r4, #12
 8002c42:	0d0a      	lsrs	r2, r1, #20
 8002c44:	0b24      	lsrs	r4, r4, #12
 8002c46:	0512      	lsls	r2, r2, #20
 8002c48:	4322      	orrs	r2, r4
 8002c4a:	4c0c      	ldr	r4, [pc, #48]	; (8002c7c <__aeabi_ui2d+0x60>)
 8002c4c:	051b      	lsls	r3, r3, #20
 8002c4e:	4022      	ands	r2, r4
 8002c50:	4313      	orrs	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	0859      	lsrs	r1, r3, #1
 8002c56:	bd10      	pop	{r4, pc}
 8002c58:	0002      	movs	r2, r0
 8002c5a:	0021      	movs	r1, r4
 8002c5c:	3215      	adds	r2, #21
 8002c5e:	4091      	lsls	r1, r2
 8002c60:	000a      	movs	r2, r1
 8002c62:	210b      	movs	r1, #11
 8002c64:	1a08      	subs	r0, r1, r0
 8002c66:	40c4      	lsrs	r4, r0
 8002c68:	0324      	lsls	r4, r4, #12
 8002c6a:	0b24      	lsrs	r4, r4, #12
 8002c6c:	e7e6      	b.n	8002c3c <__aeabi_ui2d+0x20>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2400      	movs	r4, #0
 8002c72:	2200      	movs	r2, #0
 8002c74:	e7e2      	b.n	8002c3c <__aeabi_ui2d+0x20>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	0000041e 	.word	0x0000041e
 8002c7c:	800fffff 	.word	0x800fffff

08002c80 <__aeabi_f2d>:
 8002c80:	0041      	lsls	r1, r0, #1
 8002c82:	0e09      	lsrs	r1, r1, #24
 8002c84:	1c4b      	adds	r3, r1, #1
 8002c86:	b570      	push	{r4, r5, r6, lr}
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	0246      	lsls	r6, r0, #9
 8002c8c:	0a75      	lsrs	r5, r6, #9
 8002c8e:	0fc4      	lsrs	r4, r0, #31
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	dd14      	ble.n	8002cbe <__aeabi_f2d+0x3e>
 8002c94:	23e0      	movs	r3, #224	; 0xe0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	076d      	lsls	r5, r5, #29
 8002c9a:	0b36      	lsrs	r6, r6, #12
 8002c9c:	18cb      	adds	r3, r1, r3
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	0d0a      	lsrs	r2, r1, #20
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	0512      	lsls	r2, r2, #20
 8002ca6:	4d1c      	ldr	r5, [pc, #112]	; (8002d18 <__aeabi_f2d+0x98>)
 8002ca8:	4332      	orrs	r2, r6
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	402a      	ands	r2, r5
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	07e4      	lsls	r4, r4, #31
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	4323      	orrs	r3, r4
 8002cba:	0019      	movs	r1, r3
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	d114      	bne.n	8002cec <__aeabi_f2d+0x6c>
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	d01e      	beq.n	8002d04 <__aeabi_f2d+0x84>
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f8b0 	bl	8002e2c <__clzsi2>
 8002ccc:	280a      	cmp	r0, #10
 8002cce:	dc1c      	bgt.n	8002d0a <__aeabi_f2d+0x8a>
 8002cd0:	230b      	movs	r3, #11
 8002cd2:	002a      	movs	r2, r5
 8002cd4:	1a1b      	subs	r3, r3, r0
 8002cd6:	40da      	lsrs	r2, r3
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3315      	adds	r3, #21
 8002cdc:	409d      	lsls	r5, r3
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <__aeabi_f2d+0x9c>)
 8002ce0:	0312      	lsls	r2, r2, #12
 8002ce2:	1a1b      	subs	r3, r3, r0
 8002ce4:	055b      	lsls	r3, r3, #21
 8002ce6:	0b16      	lsrs	r6, r2, #12
 8002ce8:	0d5b      	lsrs	r3, r3, #21
 8002cea:	e7d8      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	d006      	beq.n	8002cfe <__aeabi_f2d+0x7e>
 8002cf0:	0b32      	lsrs	r2, r6, #12
 8002cf2:	2680      	movs	r6, #128	; 0x80
 8002cf4:	0336      	lsls	r6, r6, #12
 8002cf6:	076d      	lsls	r5, r5, #29
 8002cf8:	4316      	orrs	r6, r2
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <__aeabi_f2d+0xa0>)
 8002cfc:	e7cf      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <__aeabi_f2d+0xa0>)
 8002d00:	2600      	movs	r6, #0
 8002d02:	e7cc      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2600      	movs	r6, #0
 8002d08:	e7c9      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	002a      	movs	r2, r5
 8002d0e:	3b0b      	subs	r3, #11
 8002d10:	409a      	lsls	r2, r3
 8002d12:	2500      	movs	r5, #0
 8002d14:	e7e3      	b.n	8002cde <__aeabi_f2d+0x5e>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	800fffff 	.word	0x800fffff
 8002d1c:	00000389 	.word	0x00000389
 8002d20:	000007ff 	.word	0x000007ff

08002d24 <__aeabi_d2f>:
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	004c      	lsls	r4, r1, #1
 8002d28:	0d64      	lsrs	r4, r4, #21
 8002d2a:	030b      	lsls	r3, r1, #12
 8002d2c:	1c62      	adds	r2, r4, #1
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	0f46      	lsrs	r6, r0, #29
 8002d32:	0552      	lsls	r2, r2, #21
 8002d34:	0fc9      	lsrs	r1, r1, #31
 8002d36:	431e      	orrs	r6, r3
 8002d38:	00c5      	lsls	r5, r0, #3
 8002d3a:	0d52      	lsrs	r2, r2, #21
 8002d3c:	2a01      	cmp	r2, #1
 8002d3e:	dd29      	ble.n	8002d94 <__aeabi_d2f+0x70>
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <__aeabi_d2f+0xfc>)
 8002d42:	18e7      	adds	r7, r4, r3
 8002d44:	2ffe      	cmp	r7, #254	; 0xfe
 8002d46:	dc1c      	bgt.n	8002d82 <__aeabi_d2f+0x5e>
 8002d48:	2f00      	cmp	r7, #0
 8002d4a:	dd3b      	ble.n	8002dc4 <__aeabi_d2f+0xa0>
 8002d4c:	0180      	lsls	r0, r0, #6
 8002d4e:	1e43      	subs	r3, r0, #1
 8002d50:	4198      	sbcs	r0, r3
 8002d52:	2207      	movs	r2, #7
 8002d54:	00f3      	lsls	r3, r6, #3
 8002d56:	0f6d      	lsrs	r5, r5, #29
 8002d58:	4303      	orrs	r3, r0
 8002d5a:	432b      	orrs	r3, r5
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d004      	beq.n	8002d6c <__aeabi_d2f+0x48>
 8002d62:	220f      	movs	r2, #15
 8002d64:	401a      	ands	r2, r3
 8002d66:	2a04      	cmp	r2, #4
 8002d68:	d000      	beq.n	8002d6c <__aeabi_d2f+0x48>
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	04d2      	lsls	r2, r2, #19
 8002d70:	401a      	ands	r2, r3
 8002d72:	d024      	beq.n	8002dbe <__aeabi_d2f+0x9a>
 8002d74:	3701      	adds	r7, #1
 8002d76:	b2fa      	uxtb	r2, r7
 8002d78:	2fff      	cmp	r7, #255	; 0xff
 8002d7a:	d002      	beq.n	8002d82 <__aeabi_d2f+0x5e>
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	0a58      	lsrs	r0, r3, #9
 8002d80:	e001      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	2000      	movs	r0, #0
 8002d86:	0240      	lsls	r0, r0, #9
 8002d88:	05d2      	lsls	r2, r2, #23
 8002d8a:	0a40      	lsrs	r0, r0, #9
 8002d8c:	07c9      	lsls	r1, r1, #31
 8002d8e:	4310      	orrs	r0, r2
 8002d90:	4308      	orrs	r0, r1
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	4335      	orrs	r5, r6
 8002d96:	2c00      	cmp	r4, #0
 8002d98:	d104      	bne.n	8002da4 <__aeabi_d2f+0x80>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d10a      	bne.n	8002db4 <__aeabi_d2f+0x90>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2000      	movs	r0, #0
 8002da2:	e7f0      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d0ec      	beq.n	8002d82 <__aeabi_d2f+0x5e>
 8002da8:	2080      	movs	r0, #128	; 0x80
 8002daa:	03c0      	lsls	r0, r0, #15
 8002dac:	4330      	orrs	r0, r6
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	e7e9      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002db2:	2400      	movs	r4, #0
 8002db4:	2300      	movs	r3, #0
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	0a58      	lsrs	r0, r3, #9
 8002dba:	b2e2      	uxtb	r2, r4
 8002dbc:	e7e3      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	003c      	movs	r4, r7
 8002dc2:	e7f8      	b.n	8002db6 <__aeabi_d2f+0x92>
 8002dc4:	003b      	movs	r3, r7
 8002dc6:	3317      	adds	r3, #23
 8002dc8:	dbf3      	blt.n	8002db2 <__aeabi_d2f+0x8e>
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	4333      	orrs	r3, r6
 8002dd0:	261e      	movs	r6, #30
 8002dd2:	1bf6      	subs	r6, r6, r7
 8002dd4:	2e1f      	cmp	r6, #31
 8002dd6:	dd14      	ble.n	8002e02 <__aeabi_d2f+0xde>
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4252      	negs	r2, r2
 8002ddc:	1bd7      	subs	r7, r2, r7
 8002dde:	001a      	movs	r2, r3
 8002de0:	40fa      	lsrs	r2, r7
 8002de2:	0017      	movs	r7, r2
 8002de4:	2e20      	cmp	r6, #32
 8002de6:	d004      	beq.n	8002df2 <__aeabi_d2f+0xce>
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <__aeabi_d2f+0x100>)
 8002dea:	4694      	mov	ip, r2
 8002dec:	4464      	add	r4, ip
 8002dee:	40a3      	lsls	r3, r4
 8002df0:	431d      	orrs	r5, r3
 8002df2:	002b      	movs	r3, r5
 8002df4:	1e5d      	subs	r5, r3, #1
 8002df6:	41ab      	sbcs	r3, r5
 8002df8:	2207      	movs	r2, #7
 8002dfa:	433b      	orrs	r3, r7
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e7ad      	b.n	8002d5e <__aeabi_d2f+0x3a>
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <__aeabi_d2f+0x104>)
 8002e04:	0028      	movs	r0, r5
 8002e06:	18a2      	adds	r2, r4, r2
 8002e08:	4095      	lsls	r5, r2
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	1e6c      	subs	r4, r5, #1
 8002e0e:	41a5      	sbcs	r5, r4
 8002e10:	40f0      	lsrs	r0, r6
 8002e12:	2207      	movs	r2, #7
 8002e14:	432b      	orrs	r3, r5
 8002e16:	4303      	orrs	r3, r0
 8002e18:	401a      	ands	r2, r3
 8002e1a:	2700      	movs	r7, #0
 8002e1c:	e79f      	b.n	8002d5e <__aeabi_d2f+0x3a>
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	fffffc80 	.word	0xfffffc80
 8002e24:	fffffca2 	.word	0xfffffca2
 8002e28:	fffffc82 	.word	0xfffffc82

08002e2c <__clzsi2>:
 8002e2c:	211c      	movs	r1, #28
 8002e2e:	2301      	movs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d301      	bcc.n	8002e3a <__clzsi2+0xe>
 8002e36:	0c00      	lsrs	r0, r0, #16
 8002e38:	3910      	subs	r1, #16
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d301      	bcc.n	8002e44 <__clzsi2+0x18>
 8002e40:	0a00      	lsrs	r0, r0, #8
 8002e42:	3908      	subs	r1, #8
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d301      	bcc.n	8002e4e <__clzsi2+0x22>
 8002e4a:	0900      	lsrs	r0, r0, #4
 8002e4c:	3904      	subs	r1, #4
 8002e4e:	a202      	add	r2, pc, #8	; (adr r2, 8002e58 <__clzsi2+0x2c>)
 8002e50:	5c10      	ldrb	r0, [r2, r0]
 8002e52:	1840      	adds	r0, r0, r1
 8002e54:	4770      	bx	lr
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	02020304 	.word	0x02020304
 8002e5c:	01010101 	.word	0x01010101
	...

08002e68 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <LoadROtopology+0x94>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <LoadROtopology+0x98>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d033      	beq.n	8002ee0 <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002e78:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002e7a:	d039      	beq.n	8002ef0 <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002e7c:	4921      	ldr	r1, [pc, #132]	; (8002f04 <LoadROtopology+0x9c>)
 8002e7e:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <LoadROtopology+0xa0>)
 8002e82:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <LoadROtopology+0x9c>)
 8002e86:	781e      	ldrb	r6, [r3, #0]
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d035      	beq.n	8002ef8 <LoadROtopology+0x90>
 8002e8c:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002e8e:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002e90:	466b      	mov	r3, sp
 8002e92:	1dd9      	adds	r1, r3, #7
 8002e94:	2300      	movs	r3, #0
 8002e96:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002e98:	4d1c      	ldr	r5, [pc, #112]	; (8002f0c <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002e9a:	4663      	mov	r3, ip
 8002e9c:	700b      	strb	r3, [r1, #0]
 8002e9e:	780b      	ldrb	r3, [r1, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	d815      	bhi.n	8002ed2 <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ea6:	1e63      	subs	r3, r4, #1
 8002ea8:	0098      	lsls	r0, r3, #2
 8002eaa:	18c0      	adds	r0, r0, r3
 8002eac:	0040      	lsls	r0, r0, #1
 8002eae:	18c0      	adds	r0, r0, r3
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <LoadROtopology+0x94>)
 8002eb2:	18d7      	adds	r7, r2, r3
 8002eb4:	780b      	ldrb	r3, [r1, #0]
 8002eb6:	883f      	ldrh	r7, [r7, #0]
 8002eb8:	181b      	adds	r3, r3, r0
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002ebe:	3202      	adds	r2, #2
 8002ec0:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ec2:	780b      	ldrb	r3, [r1, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	700b      	strb	r3, [r1, #0]
 8002eca:	780b      	ldrb	r3, [r1, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d9ee      	bls.n	8002eb0 <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002ed2:	3401      	adds	r4, #1
 8002ed4:	b2e4      	uxtb	r4, r4
 8002ed6:	42b4      	cmp	r4, r6
 8002ed8:	d9df      	bls.n	8002e9a <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002eda:	2000      	movs	r0, #0
}
 8002edc:	b003      	add	sp, #12
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <LoadROtopology+0x9c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <LoadROtopology+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002eec:	20fa      	movs	r0, #250	; 0xfa
 8002eee:	e7f5      	b.n	8002edc <LoadROtopology+0x74>
			N =1;
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <LoadROtopology+0x9c>)
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	7011      	strb	r1, [r2, #0]
 8002ef6:	e7c3      	b.n	8002e80 <LoadROtopology+0x18>
	return result;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e7ef      	b.n	8002edc <LoadROtopology+0x74>
 8002efc:	0801d800 	.word	0x0801d800
 8002f00:	0000ffff 	.word	0x0000ffff
 8002f04:	20000030 	.word	0x20000030
 8002f08:	2000080e 	.word	0x2000080e
 8002f0c:	200002bc 	.word	0x200002bc

08002f10 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <LoadEEportsDir+0x40>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002f16:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f1c:	490d      	ldr	r1, [pc, #52]	; (8002f54 <LoadEEportsDir+0x44>)
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f004 fce2 	bl	80078e8 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002f24:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002f26:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002f28:	4f09      	ldr	r7, [pc, #36]	; (8002f50 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f2a:	4e0a      	ldr	r6, [pc, #40]	; (8002f54 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	b2e4      	uxtb	r4, r4
 8002f30:	783b      	ldrb	r3, [r7, #0]
 8002f32:	42a3      	cmp	r3, r4
 8002f34:	d30a      	bcc.n	8002f4c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f36:	1e61      	subs	r1, r4, #1
 8002f38:	0049      	lsls	r1, r1, #1
 8002f3a:	1989      	adds	r1, r1, r6
 8002f3c:	1c60      	adds	r0, r4, #1
 8002f3e:	f004 fcd3 	bl	80078e8 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002f42:	1ca3      	adds	r3, r4, #2
 8002f44:	2b1b      	cmp	r3, #27
 8002f46:	ddf1      	ble.n	8002f2c <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002f48:	250a      	movs	r5, #10
 8002f4a:	e7ef      	b.n	8002f2c <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f50:	20000030 	.word	0x20000030
 8002f54:	2000670c 	.word	0x2000670c

08002f58 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	46de      	mov	lr, fp
 8002f5c:	4657      	mov	r7, sl
 8002f5e:	464e      	mov	r6, r9
 8002f60:	4645      	mov	r5, r8
 8002f62:	b5e0      	push	{r5, r6, r7, lr}
 8002f64:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f66:	466b      	mov	r3, sp
 8002f68:	2200      	movs	r2, #0
 8002f6a:	80da      	strh	r2, [r3, #6]
 8002f6c:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f6e:	2700      	movs	r7, #0
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <LoadEEalias+0x7c>)
 8002f72:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002f74:	469b      	mov	fp, r3
 8002f76:	e00c      	b.n	8002f92 <LoadEEalias+0x3a>
 8002f78:	464b      	mov	r3, r9
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	444b      	add	r3, r9
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	445b      	add	r3, fp
 8002f82:	2200      	movs	r2, #0
 8002f84:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f86:	3701      	adds	r7, #1
 8002f88:	b2ff      	uxtb	r7, r7
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <LoadEEalias+0x80>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	42bb      	cmp	r3, r7
 8002f90:	d317      	bcc.n	8002fc2 <LoadEEalias+0x6a>
 8002f92:	00bd      	lsls	r5, r7, #2
 8002f94:	19ed      	adds	r5, r5, r7
 8002f96:	006d      	lsls	r5, r5, #1
 8002f98:	4455      	add	r5, sl
 8002f9a:	1d63      	adds	r3, r4, #5
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fa0:	466b      	mov	r3, sp
 8002fa2:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002fa4:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fa6:	0031      	movs	r1, r6
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f004 fc9d 	bl	80078e8 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002fae:	8833      	ldrh	r3, [r6, #0]
 8002fb0:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	702b      	strb	r3, [r5, #0]
 8002fb6:	3401      	adds	r4, #1
 8002fb8:	b2a4      	uxth	r4, r4
 8002fba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002fbc:	45a0      	cmp	r8, r4
 8002fbe:	d1f2      	bne.n	8002fa6 <LoadEEalias+0x4e>
 8002fc0:	e7da      	b.n	8002f78 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bc3c      	pop	{r2, r3, r4, r5}
 8002fc8:	4690      	mov	r8, r2
 8002fca:	4699      	mov	r9, r3
 8002fcc:	46a2      	mov	sl, r4
 8002fce:	46ab      	mov	fp, r5
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20000700 	.word	0x20000700
 8002fd8:	20000030 	.word	0x20000030

08002fdc <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	46d6      	mov	lr, sl
 8002fe0:	464f      	mov	r7, r9
 8002fe2:	4646      	mov	r6, r8
 8002fe4:	b5c0      	push	{r6, r7, lr}
 8002fe6:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002fe8:	466b      	mov	r3, sp
 8002fea:	2200      	movs	r2, #0
 8002fec:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <LoadEEgroup+0x9c>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002ff6:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ff8:	4e20      	ldr	r6, [pc, #128]	; (800307c <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002ffa:	4c1f      	ldr	r4, [pc, #124]	; (8003078 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ffc:	b2e9      	uxtb	r1, r5
 8002ffe:	0049      	lsls	r1, r1, #1
 8003000:	1871      	adds	r1, r6, r1
 8003002:	0028      	movs	r0, r5
 8003004:	30cb      	adds	r0, #203	; 0xcb
 8003006:	b280      	uxth	r0, r0
 8003008:	f004 fc6e 	bl	80078e8 <EE_ReadVariable>
		add++;
 800300c:	3501      	adds	r5, #1
 800300e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003010:	7822      	ldrb	r2, [r4, #0]
 8003012:	b2eb      	uxtb	r3, r5
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f1      	bhi.n	8002ffc <LoadEEgroup+0x20>
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <LoadEEgroup+0xa4>)
 800301a:	4699      	mov	r9, r3
 800301c:	002c      	movs	r4, r5
 800301e:	3499      	adds	r4, #153	; 0x99
 8003020:	b2a4      	uxth	r4, r4
 8003022:	35cb      	adds	r5, #203	; 0xcb
 8003024:	b2ab      	uxth	r3, r5
 8003026:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003028:	466b      	mov	r3, sp
 800302a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800302c:	2300      	movs	r3, #0
 800302e:	469a      	mov	sl, r3
 8003030:	e009      	b.n	8003046 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8003032:	2500      	movs	r5, #0
 8003034:	e7f0      	b.n	8003018 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003036:	464b      	mov	r3, r9
 8003038:	4652      	mov	r2, sl
 800303a:	725a      	strb	r2, [r3, #9]
 800303c:	230a      	movs	r3, #10
 800303e:	469c      	mov	ip, r3
 8003040:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003042:	4544      	cmp	r4, r8
 8003044:	d010      	beq.n	8003068 <LoadEEgroup+0x8c>
 8003046:	1d67      	adds	r7, r4, #5
 8003048:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 800304a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 800304c:	0031      	movs	r1, r6
 800304e:	0020      	movs	r0, r4
 8003050:	f004 fc4a 	bl	80078e8 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003054:	8833      	ldrh	r3, [r6, #0]
 8003056:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	702b      	strb	r3, [r5, #0]
 800305c:	3401      	adds	r4, #1
 800305e:	b2a4      	uxth	r4, r4
 8003060:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003062:	42bc      	cmp	r4, r7
 8003064:	d1f2      	bne.n	800304c <LoadEEgroup+0x70>
 8003066:	e7e6      	b.n	8003036 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003068:	2000      	movs	r0, #0
 800306a:	b002      	add	sp, #8
 800306c:	bc1c      	pop	{r2, r3, r4}
 800306e:	4690      	mov	r8, r2
 8003070:	4699      	mov	r9, r3
 8003072:	46a2      	mov	sl, r4
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	20000030 	.word	0x20000030
 800307c:	2000065c 	.word	0x2000065c
 8003080:	200005f8 	.word	0x200005f8

08003084 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003088:	210e      	movs	r1, #14
 800308a:	4469      	add	r1, sp
 800308c:	2300      	movs	r3, #0
 800308e:	800b      	strh	r3, [r1, #0]
 8003090:	aa03      	add	r2, sp, #12
 8003092:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003094:	20e4      	movs	r0, #228	; 0xe4
 8003096:	f004 fc27 	bl	80078e8 <EE_ReadVariable>
	uint8_t direction =0;
 800309a:	2600      	movs	r6, #0
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d102      	bne.n	80030a6 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 80030a0:	230e      	movs	r3, #14
 80030a2:	446b      	add	r3, sp
 80030a4:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80030a6:	210e      	movs	r1, #14
 80030a8:	4469      	add	r1, sp
 80030aa:	20e5      	movs	r0, #229	; 0xe5
 80030ac:	f004 fc1c 	bl	80078e8 <EE_ReadVariable>
 80030b0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80030b2:	a903      	add	r1, sp, #12
 80030b4:	20e6      	movs	r0, #230	; 0xe6
 80030b6:	f004 fc17 	bl	80078e8 <EE_ReadVariable>
	if(!status1 && !status2){
 80030ba:	4304      	orrs	r4, r0
 80030bc:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80030be:	2500      	movs	r5, #0
	if(!status1 && !status2){
 80030c0:	2c00      	cmp	r4, #0
 80030c2:	d106      	bne.n	80030d2 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80030c4:	230e      	movs	r3, #14
 80030c6:	446b      	add	r3, sp
 80030c8:	881d      	ldrh	r5, [r3, #0]
 80030ca:	042d      	lsls	r5, r5, #16
 80030cc:	ab03      	add	r3, sp, #12
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80030d2:	210e      	movs	r1, #14
 80030d4:	4469      	add	r1, sp
 80030d6:	20e7      	movs	r0, #231	; 0xe7
 80030d8:	f004 fc06 	bl	80078e8 <EE_ReadVariable>
 80030dc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80030de:	a903      	add	r1, sp, #12
 80030e0:	20e8      	movs	r0, #232	; 0xe8
 80030e2:	f004 fc01 	bl	80078e8 <EE_ReadVariable>
	if(!status1 && !status2){
 80030e6:	4320      	orrs	r0, r4
 80030e8:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 80030ea:	2400      	movs	r4, #0
	if(!status1 && !status2){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d106      	bne.n	80030fe <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 80030f0:	230e      	movs	r3, #14
 80030f2:	446b      	add	r3, sp
 80030f4:	881c      	ldrh	r4, [r3, #0]
 80030f6:	0424      	lsls	r4, r4, #16
 80030f8:	ab03      	add	r3, sp, #12
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 80030fe:	210e      	movs	r1, #14
 8003100:	4469      	add	r1, sp
 8003102:	20e9      	movs	r0, #233	; 0xe9
 8003104:	f004 fbf0 	bl	80078e8 <EE_ReadVariable>
	if(!status1){
 8003108:	2800      	cmp	r0, #0
 800310a:	d107      	bne.n	800311c <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 800310c:	230e      	movs	r3, #14
 800310e:	446b      	add	r3, sp
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	0a19      	lsrs	r1, r3, #8
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <LoadEEstreams+0x134>)
 8003116:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <LoadEEstreams+0x138>)
 800311a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800311c:	210e      	movs	r1, #14
 800311e:	4469      	add	r1, sp
 8003120:	20ea      	movs	r0, #234	; 0xea
 8003122:	f004 fbe1 	bl	80078e8 <EE_ReadVariable>
	if(!status1){
 8003126:	2800      	cmp	r0, #0
 8003128:	d107      	bne.n	800313a <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 800312a:	230e      	movs	r3, #14
 800312c:	446b      	add	r3, sp
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	0a19      	lsrs	r1, r3, #8
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <LoadEEstreams+0x13c>)
 8003134:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <LoadEEstreams+0x140>)
 8003138:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 800313a:	210e      	movs	r1, #14
 800313c:	4469      	add	r1, sp
 800313e:	20eb      	movs	r0, #235	; 0xeb
 8003140:	f004 fbd2 	bl	80078e8 <EE_ReadVariable>
	if(!status1){
 8003144:	2800      	cmp	r0, #0
 8003146:	d107      	bne.n	8003158 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003148:	230e      	movs	r3, #14
 800314a:	446b      	add	r3, sp
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	0a19      	lsrs	r1, r3, #8
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <LoadEEstreams+0x144>)
 8003152:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <LoadEEstreams+0x148>)
 8003156:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <LoadEEstreams+0x134>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <LoadEEstreams+0xe4>
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <LoadEEstreams+0x138>)
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d112      	bne.n	800318e <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <LoadEEstreams+0x13c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <LoadEEstreams+0xf4>
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <LoadEEstreams+0x140>)
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	2a00      	cmp	r2, #0
 8003176:	d111      	bne.n	800319c <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <LoadEEstreams+0x144>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <LoadEEstreams+0x104>
 8003180:	4a12      	ldr	r2, [pc, #72]	; (80031cc <LoadEEstreams+0x148>)
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	2a00      	cmp	r2, #0
 8003186:	d110      	bne.n	80031aa <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003188:	2000      	movs	r0, #0
 800318a:	b004      	add	sp, #16
 800318c:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800318e:	9200      	str	r2, [sp, #0]
 8003190:	0022      	movs	r2, r4
 8003192:	0029      	movs	r1, r5
 8003194:	0030      	movs	r0, r6
 8003196:	f006 f97f 	bl	8009498 <SetupDMAStreams>
 800319a:	e7e5      	b.n	8003168 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	0022      	movs	r2, r4
 80031a0:	0029      	movs	r1, r5
 80031a2:	0030      	movs	r0, r6
 80031a4:	f006 f978 	bl	8009498 <SetupDMAStreams>
 80031a8:	e7e6      	b.n	8003178 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80031aa:	9200      	str	r2, [sp, #0]
 80031ac:	0022      	movs	r2, r4
 80031ae:	0029      	movs	r1, r5
 80031b0:	0030      	movs	r0, r6
 80031b2:	f006 f971 	bl	8009498 <SetupDMAStreams>
 80031b6:	e7e7      	b.n	8003188 <LoadEEstreams+0x104>
 80031b8:	200008ca 	.word	0x200008ca
 80031bc:	200005f5 	.word	0x200005f5
 80031c0:	200008cb 	.word	0x200008cb
 80031c4:	200005f6 	.word	0x200005f6
 80031c8:	200008cc 	.word	0x200008cc
 80031cc:	200005f7 	.word	0x200005f7

080031d0 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80031d0:	b510      	push	{r4, lr}
 80031d2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80031d4:	208a      	movs	r0, #138	; 0x8a
 80031d6:	466b      	mov	r3, sp
 80031d8:	1d99      	adds	r1, r3, #6
 80031da:	0040      	lsls	r0, r0, #1
 80031dc:	f004 fb84 	bl	80078e8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d000      	beq.n	80031e6 <LoadEEparams+0x16>
 80031e4:	e075      	b.n	80032d2 <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 80031e6:	466b      	mov	r3, sp
 80031e8:	3306      	adds	r3, #6
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	4a55      	ldr	r2, [pc, #340]	; (8003344 <LoadEEparams+0x174>)
 80031ee:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80031f4:	208e      	movs	r0, #142	; 0x8e
 80031f6:	466b      	mov	r3, sp
 80031f8:	1d99      	adds	r1, r3, #6
 80031fa:	0040      	lsls	r0, r0, #1
 80031fc:	f004 fb74 	bl	80078e8 <EE_ReadVariable>

	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d000      	beq.n	8003206 <LoadEEparams+0x36>
 8003204:	e06c      	b.n	80032e0 <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003206:	466b      	mov	r3, sp
 8003208:	3306      	adds	r3, #6
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <LoadEEparams+0x174>)
 800320e:	0bd9      	lsrs	r1, r3, #15
 8003210:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003216:	2016      	movs	r0, #22
 8003218:	466b      	mov	r3, sp
 800321a:	1d99      	adds	r1, r3, #6
 800321c:	30ff      	adds	r0, #255	; 0xff
 800321e:	f004 fb63 	bl	80078e8 <EE_ReadVariable>
	if(!status1)
 8003222:	2800      	cmp	r0, #0
 8003224:	d163      	bne.n	80032ee <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 8003226:	466b      	mov	r3, sp
 8003228:	88da      	ldrh	r2, [r3, #6]
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <LoadEEparams+0x178>)
 800322c:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800322e:	208b      	movs	r0, #139	; 0x8b
 8003230:	466b      	mov	r3, sp
 8003232:	1d99      	adds	r1, r3, #6
 8003234:	0040      	lsls	r0, r0, #1
 8003236:	f004 fb57 	bl	80078e8 <EE_ReadVariable>
	if(!status1)
 800323a:	2800      	cmp	r0, #0
 800323c:	d15c      	bne.n	80032f8 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 800323e:	466b      	mov	r3, sp
 8003240:	88da      	ldrh	r2, [r3, #6]
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <LoadEEparams+0x178>)
 8003244:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003246:	2018      	movs	r0, #24
 8003248:	466b      	mov	r3, sp
 800324a:	1d99      	adds	r1, r3, #6
 800324c:	30ff      	adds	r0, #255	; 0xff
 800324e:	f004 fb4b 	bl	80078e8 <EE_ReadVariable>
	if(!status1){
 8003252:	2800      	cmp	r0, #0
 8003254:	d155      	bne.n	8003302 <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003256:	466b      	mov	r3, sp
 8003258:	3306      	adds	r3, #6
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <LoadEEparams+0x178>)
 800325e:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003264:	208c      	movs	r0, #140	; 0x8c
 8003266:	466b      	mov	r3, sp
 8003268:	1d99      	adds	r1, r3, #6
 800326a:	0040      	lsls	r0, r0, #1
 800326c:	f004 fb3c 	bl	80078e8 <EE_ReadVariable>
 8003270:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003272:	201a      	movs	r0, #26
 8003274:	a901      	add	r1, sp, #4
 8003276:	30ff      	adds	r0, #255	; 0xff
 8003278:	f004 fb36 	bl	80078e8 <EE_ReadVariable>
	if(!status1 && !status2){
 800327c:	4304      	orrs	r4, r0
 800327e:	b2a4      	uxth	r4, r4
 8003280:	2c00      	cmp	r4, #0
 8003282:	d145      	bne.n	8003310 <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003284:	ab01      	add	r3, sp, #4
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	041b      	lsls	r3, r3, #16
 800328a:	466a      	mov	r2, sp
 800328c:	3206      	adds	r2, #6
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	4a2d      	ldr	r2, [pc, #180]	; (8003348 <LoadEEparams+0x178>)
 8003294:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003296:	208d      	movs	r0, #141	; 0x8d
 8003298:	466b      	mov	r3, sp
 800329a:	1d99      	adds	r1, r3, #6
 800329c:	0040      	lsls	r0, r0, #1
 800329e:	f004 fb23 	bl	80078e8 <EE_ReadVariable>
	if(!status1){
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d142      	bne.n	800332c <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 80032a6:	466b      	mov	r3, sp
 80032a8:	3306      	adds	r3, #6
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <LoadEEparams+0x178>)
 80032ae:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80032b4:	201c      	movs	r0, #28
 80032b6:	466b      	mov	r3, sp
 80032b8:	1d99      	adds	r1, r3, #6
 80032ba:	30ff      	adds	r0, #255	; 0xff
 80032bc:	f004 fb14 	bl	80078e8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d039      	beq.n	8003338 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <LoadEEparams+0x17c>)
 80032c6:	7e9a      	ldrb	r2, [r3, #26]
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <LoadEEparams+0x178>)
 80032ca:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	b002      	add	sp, #8
 80032d0:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <LoadEEparams+0x174>)
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <LoadEEparams+0x180>)
 80032d6:	7811      	ldrb	r1, [r2, #0]
 80032d8:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80032da:	7852      	ldrb	r2, [r2, #1]
 80032dc:	705a      	strb	r2, [r3, #1]
 80032de:	e789      	b.n	80031f4 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <LoadEEparams+0x174>)
 80032e2:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <LoadEEparams+0x180>)
 80032e4:	7911      	ldrb	r1, [r2, #4]
 80032e6:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80032e8:	88d2      	ldrh	r2, [r2, #6]
 80032ea:	80da      	strh	r2, [r3, #6]
 80032ec:	e793      	b.n	8003216 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <LoadEEparams+0x17c>)
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <LoadEEparams+0x178>)
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e79a      	b.n	800322e <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <LoadEEparams+0x17c>)
 80032fa:	885a      	ldrh	r2, [r3, #2]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <LoadEEparams+0x178>)
 80032fe:	805a      	strh	r2, [r3, #2]
 8003300:	e7a1      	b.n	8003246 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <LoadEEparams+0x178>)
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <LoadEEparams+0x17c>)
 8003306:	7911      	ldrb	r1, [r2, #4]
 8003308:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800330a:	7952      	ldrb	r2, [r2, #5]
 800330c:	715a      	strb	r2, [r3, #5]
 800330e:	e7a9      	b.n	8003264 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <LoadEEparams+0x184>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <LoadEEparams+0x178>)
 800331a:	22e1      	movs	r2, #225	; 0xe1
 800331c:	0252      	lsls	r2, r2, #9
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	e7b9      	b.n	8003296 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <LoadEEparams+0x17c>)
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <LoadEEparams+0x178>)
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	e7b4      	b.n	8003296 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <LoadEEparams+0x178>)
 800332e:	2218      	movs	r2, #24
 8003330:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003332:	2200      	movs	r2, #0
 8003334:	731a      	strb	r2, [r3, #12]
 8003336:	e7bd      	b.n	80032b4 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 8003338:	466b      	mov	r3, sp
 800333a:	88da      	ldrh	r2, [r3, #6]
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <LoadEEparams+0x178>)
 800333e:	769a      	strb	r2, [r3, #26]
 8003340:	e7c4      	b.n	80032cc <LoadEEparams+0xfc>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	200061fc 	.word	0x200061fc
 8003348:	2000627c 	.word	0x2000627c
 800334c:	20000014 	.word	0x20000014
 8003350:	2000000c 	.word	0x2000000c
 8003354:	200002b7 	.word	0x200002b7

08003358 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	46ce      	mov	lr, r9
 800335c:	4647      	mov	r7, r8
 800335e:	b580      	push	{r7, lr}
 8003360:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003362:	231e      	movs	r3, #30
 8003364:	446b      	add	r3, sp
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	2501      	movs	r5, #1
 800336c:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800336e:	001e      	movs	r6, r3
 8003370:	230f      	movs	r3, #15
 8003372:	4698      	mov	r8, r3
 8003374:	e004      	b.n	8003380 <LoadEEbuttons+0x28>
 8003376:	3404      	adds	r4, #4
 8003378:	b2a4      	uxth	r4, r4
 800337a:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800337c:	2d05      	cmp	r5, #5
 800337e:	d058      	beq.n	8003432 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003380:	0031      	movs	r1, r6
 8003382:	0020      	movs	r0, r4
 8003384:	f004 fab0 	bl	80078e8 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003388:	2800      	cmp	r0, #0
 800338a:	d1f4      	bne.n	8003376 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 800338c:	8831      	ldrh	r1, [r6, #0]
 800338e:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003390:	091a      	lsrs	r2, r3, #4
 8003392:	42aa      	cmp	r2, r5
 8003394:	d1ef      	bne.n	8003376 <LoadEEbuttons+0x1e>
 8003396:	4640      	mov	r0, r8
 8003398:	4003      	ands	r3, r0
 800339a:	d0ec      	beq.n	8003376 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 800339c:	00d0      	lsls	r0, r2, #3
 800339e:	1882      	adds	r2, r0, r2
 80033a0:	4827      	ldr	r0, [pc, #156]	; (8003440 <LoadEEbuttons+0xe8>)
 80033a2:	4681      	mov	r9, r0
 80033a4:	4491      	add	r9, r2
 80033a6:	464a      	mov	r2, r9
 80033a8:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 80033aa:	7211      	strb	r1, [r2, #8]
 80033ac:	00af      	lsls	r7, r5, #2
 80033ae:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80033b0:	0038      	movs	r0, r7
 80033b2:	30e9      	adds	r0, #233	; 0xe9
 80033b4:	b280      	uxth	r0, r0
 80033b6:	0031      	movs	r1, r6
 80033b8:	f004 fa96 	bl	80078e8 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80033bc:	8833      	ldrh	r3, [r6, #0]
 80033be:	0a1a      	lsrs	r2, r3, #8
 80033c0:	4649      	mov	r1, r9
 80033c2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80033c4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80033c6:	0038      	movs	r0, r7
 80033c8:	30ea      	adds	r0, #234	; 0xea
 80033ca:	b280      	uxth	r0, r0
 80033cc:	0031      	movs	r1, r6
 80033ce:	f004 fa8b 	bl	80078e8 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80033d2:	8833      	ldrh	r3, [r6, #0]
 80033d4:	0a1a      	lsrs	r2, r3, #8
 80033d6:	4649      	mov	r1, r9
 80033d8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80033da:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80033dc:	37eb      	adds	r7, #235	; 0xeb
 80033de:	b2b8      	uxth	r0, r7
 80033e0:	0031      	movs	r1, r6
 80033e2:	f004 fa81 	bl	80078e8 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80033e6:	8833      	ldrh	r3, [r6, #0]
 80033e8:	0a1a      	lsrs	r2, r3, #8
 80033ea:	4649      	mov	r1, r9
 80033ec:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80033ee:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80033f0:	b2ef      	uxtb	r7, r5
 80033f2:	7848      	ldrb	r0, [r1, #1]
 80033f4:	0039      	movs	r1, r7
 80033f6:	f005 f90f 	bl	8008618 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033fa:	464b      	mov	r3, r9
 80033fc:	7a19      	ldrb	r1, [r3, #8]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	104a      	asrs	r2, r1, #1
 8003402:	2001      	movs	r0, #1
 8003404:	4002      	ands	r2, r0
 8003406:	4001      	ands	r1, r0
 8003408:	2000      	movs	r0, #0
 800340a:	9005      	str	r0, [sp, #20]
 800340c:	4648      	mov	r0, r9
 800340e:	79c0      	ldrb	r0, [r0, #7]
 8003410:	9004      	str	r0, [sp, #16]
 8003412:	4648      	mov	r0, r9
 8003414:	7980      	ldrb	r0, [r0, #6]
 8003416:	9003      	str	r0, [sp, #12]
 8003418:	4648      	mov	r0, r9
 800341a:	7940      	ldrb	r0, [r0, #5]
 800341c:	9002      	str	r0, [sp, #8]
 800341e:	4648      	mov	r0, r9
 8003420:	7900      	ldrb	r0, [r0, #4]
 8003422:	9001      	str	r0, [sp, #4]
 8003424:	4648      	mov	r0, r9
 8003426:	78c0      	ldrb	r0, [r0, #3]
 8003428:	9000      	str	r0, [sp, #0]
 800342a:	0038      	movs	r0, r7
 800342c:	f005 fa0c 	bl	8008848 <SetButtonEvents>
 8003430:	e7a1      	b.n	8003376 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8003432:	2000      	movs	r0, #0
 8003434:	b009      	add	sp, #36	; 0x24
 8003436:	bc0c      	pop	{r2, r3}
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000e04 	.word	0x20000e04

08003444 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	46de      	mov	lr, fp
 8003448:	4657      	mov	r7, sl
 800344a:	464e      	mov	r6, r9
 800344c:	b5c0      	push	{r6, r7, lr}
 800344e:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003450:	2032      	movs	r0, #50	; 0x32
 8003452:	f010 fb6f 	bl	8013b34 <malloc>
 8003456:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003458:	d100      	bne.n	800345c <LoadROsnippets+0x18>
 800345a:	e071      	b.n	8003540 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <LoadROsnippets+0x100>)
 800345e:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8003460:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003462:	2bfe      	cmp	r3, #254	; 0xfe
 8003464:	d166      	bne.n	8003534 <LoadROsnippets+0xf0>
 8003466:	4e38      	ldr	r6, [pc, #224]	; (8003548 <LoadROsnippets+0x104>)
 8003468:	3b9a      	subs	r3, #154	; 0x9a
 800346a:	469b      	mov	fp, r3
 800346c:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800346e:	4d35      	ldr	r5, [pc, #212]	; (8003544 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003470:	1c7b      	adds	r3, r7, #1
 8003472:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <LoadROsnippets+0x108>)
 8003476:	4699      	mov	r9, r3
 8003478:	e023      	b.n	80034c2 <LoadROsnippets+0x7e>
		i =0;
 800347a:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 800347c:	193b      	adds	r3, r7, r4
 800347e:	3b01      	subs	r3, #1
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8003486:	3401      	adds	r4, #1
 8003488:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800348a:	0020      	movs	r0, r4
 800348c:	f010 fb52 	bl	8013b34 <malloc>
 8003490:	4653      	mov	r3, sl
 8003492:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003494:	2800      	cmp	r0, #0
 8003496:	d03f      	beq.n	8003518 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003498:	0022      	movs	r2, r4
 800349a:	0039      	movs	r1, r7
 800349c:	f010 fb7f 	bl	8013b9e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80034a0:	464b      	mov	r3, r9
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	464a      	mov	r2, r9
 80034a8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80034aa:	0022      	movs	r2, r4
 80034ac:	2100      	movs	r1, #0
 80034ae:	0038      	movs	r0, r7
 80034b0:	f010 fb7e 	bl	8013bb0 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80034b4:	9b00      	ldr	r3, [sp, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2bfe      	cmp	r3, #254	; 0xfe
 80034ba:	d137      	bne.n	800352c <LoadROsnippets+0xe8>
 80034bc:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80034be:	455e      	cmp	r6, fp
 80034c0:	d034      	beq.n	800352c <LoadROsnippets+0xe8>
 80034c2:	0028      	movs	r0, r5
 80034c4:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 80034c6:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80034c8:	1b79      	subs	r1, r7, r5
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	54ca      	strb	r2, [r1, r3]
 80034ce:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80034d0:	4283      	cmp	r3, r0
 80034d2:	d1fa      	bne.n	80034ca <LoadROsnippets+0x86>
 80034d4:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80034d6:	46b2      	mov	sl, r6
 80034d8:	2214      	movs	r2, #20
 80034da:	9901      	ldr	r1, [sp, #4]
 80034dc:	0030      	movs	r0, r6
 80034de:	f010 fb5e 	bl	8013b9e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80034e2:	2214      	movs	r2, #20
 80034e4:	2100      	movs	r1, #0
 80034e6:	0038      	movs	r0, r7
 80034e8:	f010 fb62 	bl	8013bb0 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034ec:	9500      	str	r5, [sp, #0]
 80034ee:	782a      	ldrb	r2, [r5, #0]
 80034f0:	1c93      	adds	r3, r2, #2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d9c0      	bls.n	800347a <LoadROsnippets+0x36>
 80034f8:	0039      	movs	r1, r7
		i =0;
 80034fa:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80034fc:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 80034fe:	3501      	adds	r5, #1
			++i;
 8003500:	3401      	adds	r4, #1
 8003502:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003504:	9500      	str	r5, [sp, #0]
 8003506:	782a      	ldrb	r2, [r5, #0]
 8003508:	1c93      	adds	r3, r2, #2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d9b5      	bls.n	800347c <LoadROsnippets+0x38>
 8003510:	3101      	adds	r1, #1
 8003512:	2c32      	cmp	r4, #50	; 0x32
 8003514:	d1f2      	bne.n	80034fc <LoadROsnippets+0xb8>
 8003516:	e7b1      	b.n	800347c <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003518:	2214      	movs	r2, #20
 800351a:	2100      	movs	r1, #0
 800351c:	4650      	mov	r0, sl
 800351e:	f010 fb47 	bl	8013bb0 <memset>
			free(snipBuffer);
 8003522:	0038      	movs	r0, r7
 8003524:	f010 fb10 	bl	8013b48 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003528:	200e      	movs	r0, #14
 800352a:	e003      	b.n	8003534 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 800352c:	0038      	movs	r0, r7
 800352e:	f010 fb0b 	bl	8013b48 <free>
	return BOS_OK;
 8003532:	2000      	movs	r0, #0
}
 8003534:	b002      	add	sp, #8
 8003536:	bc1c      	pop	{r2, r3, r4}
 8003538:	4691      	mov	r9, r2
 800353a:	469a      	mov	sl, r3
 800353c:	46a3      	mov	fp, r4
 800353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003540:	20fb      	movs	r0, #251	; 0xfb
 8003542:	e7f7      	b.n	8003534 <LoadROsnippets+0xf0>
 8003544:	0801dc00 	.word	0x0801dc00
 8003548:	20006298 	.word	0x20006298
 800354c:	2000099f 	.word	0x2000099f

08003550 <LoadEEvars>:
void LoadEEvars(void){
 8003550:	b510      	push	{r4, lr}
	LoadROtopology();
 8003552:	f7ff fc89 	bl	8002e68 <LoadROtopology>
	LoadEEportsDir();
 8003556:	f7ff fcdb 	bl	8002f10 <LoadEEportsDir>
	LoadEEalias();
 800355a:	f7ff fcfd 	bl	8002f58 <LoadEEalias>
	LoadEEgroup();
 800355e:	f7ff fd3d 	bl	8002fdc <LoadEEgroup>
	LoadEEstreams();
 8003562:	f7ff fd8f 	bl	8003084 <LoadEEstreams>
	LoadEEparams();
 8003566:	f7ff fe33 	bl	80031d0 <LoadEEparams>
	LoadEEbuttons();
 800356a:	f7ff fef5 	bl	8003358 <LoadEEbuttons>
	LoadROsnippets();
 800356e:	f7ff ff69 	bl	8003444 <LoadROsnippets>
}
 8003572:	bd10      	pop	{r4, pc}

08003574 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <SaveEEportsDir+0x4c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01a      	beq.n	80035b6 <SaveEEportsDir+0x42>
 8003580:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003586:	4e0f      	ldr	r6, [pc, #60]	; (80035c4 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 8003588:	4f0d      	ldr	r7, [pc, #52]	; (80035c0 <SaveEEportsDir+0x4c>)
 800358a:	e008      	b.n	800359e <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800358c:	1c60      	adds	r0, r4, #1
 800358e:	f004 f9db 	bl	8007948 <EE_WriteVariable>
 8003592:	e00a      	b.n	80035aa <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003594:	3401      	adds	r4, #1
 8003596:	b2e4      	uxtb	r4, r4
 8003598:	783b      	ldrb	r3, [r7, #0]
 800359a:	42a3      	cmp	r3, r4
 800359c:	d30d      	bcc.n	80035ba <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 800359e:	0025      	movs	r5, r4
 80035a0:	1e63      	subs	r3, r4, #1
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	5b99      	ldrh	r1, [r3, r6]
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d1f0      	bne.n	800358c <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80035aa:	3502      	adds	r5, #2
 80035ac:	2d1b      	cmp	r5, #27
 80035ae:	ddf1      	ble.n	8003594 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80035b0:	230a      	movs	r3, #10
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	e7ee      	b.n	8003594 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80035ba:	9801      	ldr	r0, [sp, #4]
 80035bc:	b003      	add	sp, #12
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c0:	20000030 	.word	0x20000030
 80035c4:	2000670c 	.word	0x2000670c

080035c8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	46d6      	mov	lr, sl
 80035cc:	464f      	mov	r7, r9
 80035ce:	4646      	mov	r6, r8
 80035d0:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035d2:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <SaveEEalias+0x7c>)
 80035da:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <SaveEEalias+0x80>)
 80035de:	4699      	mov	r9, r3
 80035e0:	e005      	b.n	80035ee <SaveEEalias+0x26>
 80035e2:	3601      	adds	r6, #1
 80035e4:	b2f6      	uxtb	r6, r6
 80035e6:	464b      	mov	r3, r9
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	42b3      	cmp	r3, r6
 80035ec:	d324      	bcc.n	8003638 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 80035ee:	00b3      	lsls	r3, r6, #2
 80035f0:	199b      	adds	r3, r3, r6
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4652      	mov	r2, sl
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f2      	beq.n	80035e2 <SaveEEalias+0x1a>
 80035fc:	00b5      	lsls	r5, r6, #2
 80035fe:	19ad      	adds	r5, r5, r6
 8003600:	006d      	lsls	r5, r5, #1
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <SaveEEalias+0x7c>)
 8003604:	469c      	mov	ip, r3
 8003606:	4465      	add	r5, ip
 8003608:	4644      	mov	r4, r8
 800360a:	341c      	adds	r4, #28
 800360c:	b2a4      	uxth	r4, r4
 800360e:	4647      	mov	r7, r8
 8003610:	3721      	adds	r7, #33	; 0x21
 8003612:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003614:	782b      	ldrb	r3, [r5, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	7869      	ldrb	r1, [r5, #1]
 800361a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800361c:	b289      	uxth	r1, r1
 800361e:	0020      	movs	r0, r4
 8003620:	f004 f992 	bl	8007948 <EE_WriteVariable>
 8003624:	3502      	adds	r5, #2
 8003626:	3401      	adds	r4, #1
 8003628:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800362a:	42bc      	cmp	r4, r7
 800362c:	d1f2      	bne.n	8003614 <SaveEEalias+0x4c>
 800362e:	4643      	mov	r3, r8
 8003630:	3305      	adds	r3, #5
 8003632:	b29b      	uxth	r3, r3
 8003634:	4698      	mov	r8, r3
 8003636:	e7d4      	b.n	80035e2 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 8003638:	2000      	movs	r0, #0
 800363a:	bc1c      	pop	{r2, r3, r4}
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	46a2      	mov	sl, r4
 8003642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003644:	20000700 	.word	0x20000700
 8003648:	20000030 	.word	0x20000030

0800364c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	46de      	mov	lr, fp
 8003650:	4657      	mov	r7, sl
 8003652:	464e      	mov	r6, r9
 8003654:	4645      	mov	r5, r8
 8003656:	b5e0      	push	{r5, r6, r7, lr}
 8003658:	000f      	movs	r7, r1
 800365a:	0016      	movs	r6, r2
 800365c:	4699      	mov	r9, r3
 800365e:	ab0a      	add	r3, sp, #40	; 0x28
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	469b      	mov	fp, r3
 8003664:	ab0b      	add	r3, sp, #44	; 0x2c
 8003666:	781d      	ldrb	r5, [r3, #0]
 8003668:	ab0c      	add	r3, sp, #48	; 0x30
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	469a      	mov	sl, r3
 800366e:	ab0d      	add	r3, sp, #52	; 0x34
 8003670:	781c      	ldrb	r4, [r3, #0]
 8003672:	ab0e      	add	r3, sp, #56	; 0x38
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003678:	b281      	uxth	r1, r0
 800367a:	20e4      	movs	r0, #228	; 0xe4
 800367c:	f004 f964 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003680:	0a39      	lsrs	r1, r7, #8
 8003682:	b289      	uxth	r1, r1
 8003684:	20e5      	movs	r0, #229	; 0xe5
 8003686:	f004 f95f 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800368a:	b2b9      	uxth	r1, r7
 800368c:	20e6      	movs	r0, #230	; 0xe6
 800368e:	f004 f95b 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003692:	0a31      	lsrs	r1, r6, #8
 8003694:	b289      	uxth	r1, r1
 8003696:	20e7      	movs	r0, #231	; 0xe7
 8003698:	f004 f956 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800369c:	b2b1      	uxth	r1, r6
 800369e:	20e8      	movs	r0, #232	; 0xe8
 80036a0:	f004 f952 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80036a4:	464b      	mov	r3, r9
 80036a6:	0219      	lsls	r1, r3, #8
 80036a8:	4459      	add	r1, fp
 80036aa:	b289      	uxth	r1, r1
 80036ac:	20e9      	movs	r0, #233	; 0xe9
 80036ae:	f004 f94b 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80036b2:	022d      	lsls	r5, r5, #8
 80036b4:	4455      	add	r5, sl
 80036b6:	b2a9      	uxth	r1, r5
 80036b8:	20ea      	movs	r0, #234	; 0xea
 80036ba:	f004 f945 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80036be:	0224      	lsls	r4, r4, #8
 80036c0:	4444      	add	r4, r8
 80036c2:	b2a1      	uxth	r1, r4
 80036c4:	20eb      	movs	r0, #235	; 0xeb
 80036c6:	f004 f93f 	bl	8007948 <EE_WriteVariable>
	
	return result;
}
 80036ca:	2000      	movs	r0, #0
 80036cc:	bc3c      	pop	{r2, r3, r4, r5}
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	46a2      	mov	sl, r4
 80036d4:	46ab      	mov	fp, r5
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036d8 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80036d8:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80036da:	4c1f      	ldr	r4, [pc, #124]	; (8003758 <SaveEEparams+0x80>)
 80036dc:	7863      	ldrb	r3, [r4, #1]
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	7821      	ldrb	r1, [r4, #0]
 80036e2:	4319      	orrs	r1, r3
 80036e4:	208a      	movs	r0, #138	; 0x8a
 80036e6:	0040      	lsls	r0, r0, #1
 80036e8:	f004 f92e 	bl	8007948 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80036ec:	7921      	ldrb	r1, [r4, #4]
 80036ee:	03c9      	lsls	r1, r1, #15
 80036f0:	88e3      	ldrh	r3, [r4, #6]
 80036f2:	4319      	orrs	r1, r3
 80036f4:	b289      	uxth	r1, r1
 80036f6:	208e      	movs	r0, #142	; 0x8e
 80036f8:	0040      	lsls	r0, r0, #1
 80036fa:	f004 f925 	bl	8007948 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80036fe:	4c17      	ldr	r4, [pc, #92]	; (800375c <SaveEEparams+0x84>)
 8003700:	8821      	ldrh	r1, [r4, #0]
 8003702:	2016      	movs	r0, #22
 8003704:	30ff      	adds	r0, #255	; 0xff
 8003706:	f004 f91f 	bl	8007948 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800370a:	8861      	ldrh	r1, [r4, #2]
 800370c:	208b      	movs	r0, #139	; 0x8b
 800370e:	0040      	lsls	r0, r0, #1
 8003710:	f004 f91a 	bl	8007948 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003714:	7963      	ldrb	r3, [r4, #5]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	7b21      	ldrb	r1, [r4, #12]
 800371a:	4319      	orrs	r1, r3
 800371c:	2018      	movs	r0, #24
 800371e:	30ff      	adds	r0, #255	; 0xff
 8003720:	f004 f912 	bl	8007948 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003724:	8921      	ldrh	r1, [r4, #8]
 8003726:	208c      	movs	r0, #140	; 0x8c
 8003728:	0040      	lsls	r0, r0, #1
 800372a:	f004 f90d 	bl	8007948 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800372e:	8961      	ldrh	r1, [r4, #10]
 8003730:	201a      	movs	r0, #26
 8003732:	30ff      	adds	r0, #255	; 0xff
 8003734:	f004 f908 	bl	8007948 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003738:	7b63      	ldrb	r3, [r4, #13]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	7921      	ldrb	r1, [r4, #4]
 800373e:	4319      	orrs	r1, r3
 8003740:	208d      	movs	r0, #141	; 0x8d
 8003742:	0040      	lsls	r0, r0, #1
 8003744:	f004 f900 	bl	8007948 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003748:	7ea1      	ldrb	r1, [r4, #26]
 800374a:	201c      	movs	r0, #28
 800374c:	30ff      	adds	r0, #255	; 0xff
 800374e:	f004 f8fb 	bl	8007948 <EE_WriteVariable>
	
	return result;
}
 8003752:	2000      	movs	r0, #0
 8003754:	bd10      	pop	{r4, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	200061fc 	.word	0x200061fc
 800375c:	2000627c 	.word	0x2000627c

08003760 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003764:	2234      	movs	r2, #52	; 0x34
 8003766:	2100      	movs	r1, #0
 8003768:	4813      	ldr	r0, [pc, #76]	; (80037b8 <ClearEEportsDir+0x58>)
 800376a:	f010 fa21 	bl	8013bb0 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <ClearEEportsDir+0x5c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01a      	beq.n	80037ac <ClearEEportsDir+0x4c>
 8003776:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800377c:	4e0e      	ldr	r6, [pc, #56]	; (80037b8 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800377e:	4f0f      	ldr	r7, [pc, #60]	; (80037bc <ClearEEportsDir+0x5c>)
 8003780:	e008      	b.n	8003794 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003782:	1c60      	adds	r0, r4, #1
 8003784:	f004 f8e0 	bl	8007948 <EE_WriteVariable>
 8003788:	e00a      	b.n	80037a0 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 800378a:	3401      	adds	r4, #1
 800378c:	b2e4      	uxtb	r4, r4
 800378e:	783b      	ldrb	r3, [r7, #0]
 8003790:	42a3      	cmp	r3, r4
 8003792:	d30d      	bcc.n	80037b0 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003794:	0025      	movs	r5, r4
 8003796:	1e63      	subs	r3, r4, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	5b99      	ldrh	r1, [r3, r6]
 800379c:	2900      	cmp	r1, #0
 800379e:	d1f0      	bne.n	8003782 <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80037a0:	3502      	adds	r5, #2
 80037a2:	2d1b      	cmp	r5, #27
 80037a4:	ddf1      	ble.n	800378a <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 80037a6:	230a      	movs	r3, #10
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	e7ee      	b.n	800378a <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80037b0:	9801      	ldr	r0, [sp, #4]
 80037b2:	b003      	add	sp, #12
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	2000670c 	.word	0x2000670c
 80037bc:	20000030 	.word	0x20000030

080037c0 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80037c0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <EE_FormatForFactoryReset+0x1c>)
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <EE_FormatForFactoryReset+0x20>)
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d006      	beq.n	80037da <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 80037cc:	f004 f964 	bl	8007a98 <EE_Format>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d102      	bne.n	80037da <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <EE_FormatForFactoryReset+0x20>)
 80037d6:	4a01      	ldr	r2, [pc, #4]	; (80037dc <EE_FormatForFactoryReset+0x1c>)
 80037d8:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 80037da:	bd10      	pop	{r4, pc}
 80037dc:	beefdead 	.word	0xbeefdead
 80037e0:	20007ff0 	.word	0x20007ff0

080037e4 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80037e8:	2512      	movs	r5, #18
 80037ea:	446d      	add	r5, sp
 80037ec:	ab04      	add	r3, sp, #16
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	ab07      	add	r3, sp, #28
 80037f2:	002a      	movs	r2, r5
 80037f4:	a908      	add	r1, sp, #32
 80037f6:	2001      	movs	r0, #1
 80037f8:	f00a f90e 	bl	800da18 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80037fc:	ac03      	add	r4, sp, #12
 80037fe:	9400      	str	r4, [sp, #0]
 8003800:	ab05      	add	r3, sp, #20
 8003802:	220e      	movs	r2, #14
 8003804:	446a      	add	r2, sp
 8003806:	a906      	add	r1, sp, #24
 8003808:	2002      	movs	r0, #2
 800380a:	f00a f905 	bl	800da18 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800380e:	2301      	movs	r3, #1
 8003810:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2600      	movs	r6, #0
 8003814:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003816:	882b      	ldrh	r3, [r5, #0]
 8003818:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800381a:	a909      	add	r1, sp, #36	; 0x24
 800381c:	9808      	ldr	r0, [sp, #32]
 800381e:	f00e fa3d 	bl	8011c9c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003822:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003824:	2302      	movs	r3, #2
 8003826:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003828:	8823      	ldrh	r3, [r4, #0]
 800382a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800382c:	a909      	add	r1, sp, #36	; 0x24
 800382e:	9805      	ldr	r0, [sp, #20]
 8003830:	f00e fa34 	bl	8011c9c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003834:	8829      	ldrh	r1, [r5, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	9808      	ldr	r0, [sp, #32]
 800383a:	f00e fba3 	bl	8011f84 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800383e:	2005      	movs	r0, #5
 8003840:	f00a fc5a 	bl	800e0f8 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003844:	8821      	ldrh	r1, [r4, #0]
 8003846:	9805      	ldr	r0, [sp, #20]
 8003848:	f00e fb96 	bl	8011f78 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800384c:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800384e:	2800      	cmp	r0, #0
 8003850:	d002      	beq.n	8003858 <IsLowerCLIbaud+0x74>
}
 8003852:	0018      	movs	r0, r3
 8003854:	b00e      	add	sp, #56	; 0x38
 8003856:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003858:	3312      	adds	r3, #18
 800385a:	446b      	add	r3, sp
 800385c:	8819      	ldrh	r1, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	9808      	ldr	r0, [sp, #32]
 8003862:	f00e fb8f 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003866:	2005      	movs	r0, #5
 8003868:	f00a fc46 	bl	800e0f8 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800386c:	ab03      	add	r3, sp, #12
 800386e:	8819      	ldrh	r1, [r3, #0]
 8003870:	9805      	ldr	r0, [sp, #20]
 8003872:	f00e fb81 	bl	8011f78 <HAL_GPIO_ReadPin>
 8003876:	3801      	subs	r0, #1
 8003878:	4243      	negs	r3, r0
 800387a:	4143      	adcs	r3, r0
			return 1;
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e7e8      	b.n	8003852 <IsLowerCLIbaud+0x6e>

08003880 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003880:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003882:	f00a fd65 	bl	800e350 <GetUart>
 8003886:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003888:	23e1      	movs	r3, #225	; 0xe1
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	015b      	lsls	r3, r3, #5
 8003898:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800389a:	f00f ffa9 	bl	80137f0 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	2120      	movs	r1, #32
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bd10      	pop	{r4, pc}
	...

080038ac <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80038ac:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <IsModuleParameter+0x14>)
 80038b0:	6899      	ldr	r1, [r3, #8]
 80038b2:	f7fc fc27 	bl	8000104 <strcmp>
 80038b6:	4243      	negs	r3, r0
 80038b8:	4158      	adcs	r0, r3
 80038ba:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000009c 	.word	0x2000009c

080038c4 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 80038c8:	491b      	ldr	r1, [pc, #108]	; (8003938 <IsMathOperator+0x74>)
 80038ca:	f7fc fc1b 	bl	8000104 <strcmp>
 80038ce:	0006      	movs	r6, r0
 80038d0:	2506      	movs	r5, #6
 80038d2:	2e00      	cmp	r6, #0
 80038d4:	d023      	beq.n	800391e <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80038d6:	4919      	ldr	r1, [pc, #100]	; (800393c <IsMathOperator+0x78>)
 80038d8:	0020      	movs	r0, r4
 80038da:	f7fc fc13 	bl	8000104 <strcmp>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d01f      	beq.n	8003922 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80038e2:	4917      	ldr	r1, [pc, #92]	; (8003940 <IsMathOperator+0x7c>)
 80038e4:	0020      	movs	r0, r4
 80038e6:	f7fc fc0d 	bl	8000104 <strcmp>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d01b      	beq.n	8003926 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80038ee:	4915      	ldr	r1, [pc, #84]	; (8003944 <IsMathOperator+0x80>)
 80038f0:	0020      	movs	r0, r4
 80038f2:	f7fc fc07 	bl	8000104 <strcmp>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d017      	beq.n	800392a <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80038fa:	4913      	ldr	r1, [pc, #76]	; (8003948 <IsMathOperator+0x84>)
 80038fc:	0020      	movs	r0, r4
 80038fe:	f7fc fc01 	bl	8000104 <strcmp>
 8003902:	2800      	cmp	r0, #0
 8003904:	d013      	beq.n	800392e <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003906:	4911      	ldr	r1, [pc, #68]	; (800394c <IsMathOperator+0x88>)
 8003908:	0020      	movs	r0, r4
 800390a:	f7fc fbfb 	bl	8000104 <strcmp>
 800390e:	2800      	cmp	r0, #0
 8003910:	d00f      	beq.n	8003932 <IsMathOperator+0x6e>
 8003912:	3d01      	subs	r5, #1
 8003914:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003916:	2d00      	cmp	r5, #0
 8003918:	d1db      	bne.n	80038d2 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800391a:	2000      	movs	r0, #0
}
 800391c:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800391e:	2001      	movs	r0, #1
 8003920:	e7fc      	b.n	800391c <IsMathOperator+0x58>
			return MATH_GREATER;
 8003922:	2002      	movs	r0, #2
 8003924:	e7fa      	b.n	800391c <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003926:	2003      	movs	r0, #3
 8003928:	e7f8      	b.n	800391c <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 800392a:	2004      	movs	r0, #4
 800392c:	e7f6      	b.n	800391c <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800392e:	2005      	movs	r0, #5
 8003930:	e7f4      	b.n	800391c <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003932:	2006      	movs	r0, #6
 8003934:	e7f2      	b.n	800391c <IsMathOperator+0x58>
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	08017880 	.word	0x08017880
 800393c:	08017884 	.word	0x08017884
 8003940:	08017888 	.word	0x08017888
 8003944:	0801788c 	.word	0x0801788c
 8003948:	08017890 	.word	0x08017890
 800394c:	08017894 	.word	0x08017894

08003950 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	b083      	sub	sp, #12
 8003954:	0007      	movs	r7, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003956:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003958:	4d0d      	ldr	r5, [pc, #52]	; (8003990 <ExploreNeighbors+0x40>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800395a:	2603      	movs	r6, #3
		if(port != ignore){
 800395c:	42a7      	cmp	r7, r4
 800395e:	d00f      	beq.n	8003980 <ExploreNeighbors+0x30>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <ExploreNeighbors+0x44>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	0a1a      	lsrs	r2, r3, #8
 8003966:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003968:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 800396a:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800396c:	9600      	str	r6, [sp, #0]
 800396e:	230a      	movs	r3, #10
 8003970:	2200      	movs	r2, #0
 8003972:	2100      	movs	r1, #0
 8003974:	0020      	movs	r0, r4
 8003976:	f005 fe91 	bl	800969c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800397a:	200a      	movs	r0, #10
 800397c:	f00a fe29 	bl	800e5d2 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003980:	3401      	adds	r4, #1
 8003982:	b2e4      	uxtb	r4, r4
 8003984:	2c04      	cmp	r4, #4
 8003986:	d1e9      	bne.n	800395c <ExploreNeighbors+0xc>
		}
	}
	
	return result;
}
 8003988:	2000      	movs	r0, #0
 800398a:	b003      	add	sp, #12
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	200006d0 	.word	0x200006d0
 8003994:	20000064 	.word	0x20000064

08003998 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399a:	46de      	mov	lr, fp
 800399c:	4657      	mov	r7, sl
 800399e:	464e      	mov	r6, r9
 80039a0:	4645      	mov	r5, r8
 80039a2:	b5e0      	push	{r5, r6, r7, lr}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039a8:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <FindBroadcastRoutes+0x130>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	469c      	mov	ip, r3
 80039ae:	3307      	adds	r3, #7
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	466a      	mov	r2, sp
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	469d      	mov	sp, r3
 80039ba:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039bc:	4663      	mov	r3, ip
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <FindBroadcastRoutes+0x46>
 80039c2:	0023      	movs	r3, r4
 80039c4:	4a41      	ldr	r2, [pc, #260]	; (8003acc <FindBroadcastRoutes+0x134>)
 80039c6:	4661      	mov	r1, ip
 80039c8:	1e4d      	subs	r5, r1, #1
 80039ca:	b2ed      	uxtb	r5, r5
 80039cc:	3501      	adds	r5, #1
 80039ce:	192d      	adds	r5, r5, r4
		modules[m] =0;
 80039d0:	2100      	movs	r1, #0
 80039d2:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 80039d4:	8011      	strh	r1, [r2, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039da:	42ab      	cmp	r3, r5
 80039dc:	d1f9      	bne.n	80039d2 <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 80039de:	3801      	subs	r0, #1
 80039e0:	2301      	movs	r3, #1
 80039e2:	5423      	strb	r3, [r4, r0]
 80039e4:	2216      	movs	r2, #22
 80039e6:	4342      	muls	r2, r0
 80039e8:	3202      	adds	r2, #2
 80039ea:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <FindBroadcastRoutes+0x138>)
 80039ec:	18d2      	adds	r2, r2, r3
 80039ee:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039f0:	4d36      	ldr	r5, [pc, #216]	; (8003acc <FindBroadcastRoutes+0x134>)
 80039f2:	0040      	lsls	r0, r0, #1
 80039f4:	2301      	movs	r3, #1
 80039f6:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039f8:	46a3      	mov	fp, r4
 80039fa:	e003      	b.n	8003a04 <FindBroadcastRoutes+0x6c>
 80039fc:	3101      	adds	r1, #1
 80039fe:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a00:	2906      	cmp	r1, #6
 8003a02:	d011      	beq.n	8003a28 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 8003a04:	8813      	ldrh	r3, [r2, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f8      	beq.n	80039fc <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a0a:	5b46      	ldrh	r6, [r0, r5]
 8003a0c:	46b1      	mov	r9, r6
 8003a0e:	4646      	mov	r6, r8
 8003a10:	408e      	lsls	r6, r1
 8003a12:	46b2      	mov	sl, r6
 8003a14:	464e      	mov	r6, r9
 8003a16:	4654      	mov	r4, sl
 8003a18:	4326      	orrs	r6, r4
 8003a1a:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	445b      	add	r3, fp
 8003a20:	3b01      	subs	r3, #1
 8003a22:	2402      	movs	r4, #2
 8003a24:	701c      	strb	r4, [r3, #0]
 8003a26:	e7e9      	b.n	80039fc <FindBroadcastRoutes+0x64>
 8003a28:	465c      	mov	r4, fp
	++level;												// Move one level
 8003a2a:	2602      	movs	r6, #2
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <FindBroadcastRoutes+0x138>)
 8003a2e:	3302      	adds	r3, #2
 8003a30:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a32:	2301      	movs	r3, #1
 8003a34:	469b      	mov	fp, r3
 8003a36:	46b0      	mov	r8, r6
 8003a38:	0026      	movs	r6, r4
		++level;											// Move one level
 8003a3a:	4643      	mov	r3, r8
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a42:	4663      	mov	r3, ip
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d035      	beq.n	8003ab4 <FindBroadcastRoutes+0x11c>
 8003a48:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	4443      	add	r3, r8
 8003a52:	4699      	mov	r9, r3
 8003a54:	e01e      	b.n	8003a94 <FindBroadcastRoutes+0xfc>
 8003a56:	3001      	adds	r0, #1
 8003a58:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003a5a:	2806      	cmp	r0, #6
 8003a5c:	d015      	beq.n	8003a8a <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a5e:	880b      	ldrh	r3, [r1, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f8      	beq.n	8003a56 <FindBroadcastRoutes+0xbe>
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	5cf5      	ldrb	r5, [r6, r3]
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	d1f3      	bne.n	8003a56 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a6e:	4a17      	ldr	r2, [pc, #92]	; (8003acc <FindBroadcastRoutes+0x134>)
 8003a70:	5aa5      	ldrh	r5, [r4, r2]
 8003a72:	465a      	mov	r2, fp
 8003a74:	4082      	lsls	r2, r0
 8003a76:	4315      	orrs	r5, r2
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <FindBroadcastRoutes+0x134>)
 8003a7a:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e7e5      	b.n	8003a56 <FindBroadcastRoutes+0xbe>
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a8e:	b2d3      	uxtb	r3, r2
 8003a90:	4563      	cmp	r3, ip
 8003a92:	d20c      	bcs.n	8003aae <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a94:	5cb3      	ldrb	r3, [r6, r2]
 8003a96:	454b      	cmp	r3, r9
 8003a98:	d1f8      	bne.n	8003a8c <FindBroadcastRoutes+0xf4>
 8003a9a:	2116      	movs	r1, #22
 8003a9c:	4351      	muls	r1, r2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	469a      	mov	sl, r3
 8003aa2:	4451      	add	r1, sl
 8003aa4:	0053      	lsls	r3, r2, #1
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	60ba      	str	r2, [r7, #8]
 8003aaa:	001c      	movs	r4, r3
 8003aac:	e7d7      	b.n	8003a5e <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1c2      	bne.n	8003a3a <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b005      	add	sp, #20
 8003aba:	bc3c      	pop	{r2, r3, r4, r5}
 8003abc:	4690      	mov	r8, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	46a2      	mov	sl, r4
 8003ac2:	46ab      	mov	fp, r5
 8003ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000030 	.word	0x20000030
 8003acc:	200004fc 	.word	0x200004fc
 8003ad0:	200002bc 	.word	0x200002bc

08003ad4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003ad6:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003ad8:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d100      	bne.n	8003ae0 <minArr+0xc>
		smallest =arr[0];
 8003ade:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <minArr+0x38>)
 8003ae2:	781d      	ldrb	r5, [r3, #0]
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	dd0e      	ble.n	8003b06 <minArr+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2700      	movs	r7, #0
 8003aec:	e002      	b.n	8003af4 <minArr+0x20>
 8003aee:	3301      	adds	r3, #1
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	da09      	bge.n	8003b08 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003af4:	5cc2      	ldrb	r2, [r0, r3]
 8003af6:	42a2      	cmp	r2, r4
 8003af8:	d2f9      	bcs.n	8003aee <minArr+0x1a>
 8003afa:	5cce      	ldrb	r6, [r1, r3]
 8003afc:	2e00      	cmp	r6, #0
 8003afe:	d1f6      	bne.n	8003aee <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003b00:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003b02:	0014      	movs	r4, r2
 8003b04:	e7f3      	b.n	8003aee <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003b06:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003b08:	0038      	movs	r0, r7
 8003b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0c:	20000030 	.word	0x20000030

08003b10 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <QnotEmpty+0x20>)
 8003b12:	7819      	ldrb	r1, [r3, #0]
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d008      	beq.n	8003b2a <QnotEmpty+0x1a>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	1841      	adds	r1, r0, r1
	char temp =1;
 8003b1c:	2001      	movs	r0, #1
		temp &=Q[i];
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	4010      	ands	r0, r2
 8003b22:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d1fa      	bne.n	8003b1e <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003b28:	4770      	bx	lr
	char temp =1;
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	e7fc      	b.n	8003b28 <QnotEmpty+0x18>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20000030 	.word	0x20000030

08003b34 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	46de      	mov	lr, fp
 8003b38:	4657      	mov	r7, sl
 8003b3a:	464e      	mov	r6, r9
 8003b3c:	4645      	mov	r5, r8
 8003b3e:	b5e0      	push	{r5, r6, r7, lr}
 8003b40:	b08f      	sub	sp, #60	; 0x3c
 8003b42:	0005      	movs	r5, r0
 8003b44:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b46:	2232      	movs	r2, #50	; 0x32
 8003b48:	2100      	movs	r1, #0
 8003b4a:	a801      	add	r0, sp, #4
 8003b4c:	f010 f830 	bl	8013bb0 <memset>
	memset(route,0,sizeof(route));
 8003b50:	221a      	movs	r2, #26
 8003b52:	2100      	movs	r1, #0
 8003b54:	485a      	ldr	r0, [pc, #360]	; (8003cc0 <FindRoute+0x18c>)
 8003b56:	f010 f82b 	bl	8013bb0 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b5a:	0029      	movs	r1, r5
 8003b5c:	1e68      	subs	r0, r5, #1
 8003b5e:	2300      	movs	r3, #0
 8003b60:	4a58      	ldr	r2, [pc, #352]	; (8003cc4 <FindRoute+0x190>)
 8003b62:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <FindRoute+0x194>)
 8003b66:	5413      	strb	r3, [r2, r0]
 8003b68:	2516      	movs	r5, #22
 8003b6a:	4345      	muls	r5, r0
 8003b6c:	3502      	adds	r5, #2
 8003b6e:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <FindRoute+0x198>)
 8003b70:	18ed      	adds	r5, r5, r3
 8003b72:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003b74:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b76:	4653      	mov	r3, sl
 8003b78:	b29c      	uxth	r4, r3
 8003b7a:	e003      	b.n	8003b84 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	3202      	adds	r2, #2
 8003b80:	2807      	cmp	r0, #7
 8003b82:	d00f      	beq.n	8003ba4 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b84:	8813      	ldrh	r3, [r2, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f8      	beq.n	8003b7c <FindRoute+0x48>
 8003b8a:	08db      	lsrs	r3, r3, #3
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d1f5      	bne.n	8003b7c <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <FindRoute+0x190>)
 8003b92:	4453      	add	r3, sl
 8003b94:	3b01      	subs	r3, #1
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003b9a:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <FindRoute+0x18c>)
 8003b9c:	4652      	mov	r2, sl
 8003b9e:	701a      	strb	r2, [r3, #0]
			return col;
 8003ba0:	b2c0      	uxtb	r0, r0
 8003ba2:	e085      	b.n	8003cb0 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <FindRoute+0x19c>)
 8003ba6:	781e      	ldrb	r6, [r3, #0]
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	dd11      	ble.n	8003bd0 <FindRoute+0x9c>
 8003bac:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003bae:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003bb0:	4f45      	ldr	r7, [pc, #276]	; (8003cc8 <FindRoute+0x194>)
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	46ac      	mov	ip, r5
 8003bb6:	e002      	b.n	8003bbe <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003bb8:	3301      	adds	r3, #1
 8003bba:	42b3      	cmp	r3, r6
 8003bbc:	dc07      	bgt.n	8003bce <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	d0fa      	beq.n	8003bb8 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003bc2:	1e5a      	subs	r2, r3, #1
 8003bc4:	4d3f      	ldr	r5, [pc, #252]	; (8003cc4 <FindRoute+0x190>)
 8003bc6:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003bc8:	18ba      	adds	r2, r7, r2
 8003bca:	7010      	strb	r0, [r2, #0]
 8003bcc:	e7f4      	b.n	8003bb8 <FindRoute+0x84>
 8003bce:	4665      	mov	r5, ip
	uint8_t u =0;
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ccc <FindRoute+0x198>)
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	230e      	movs	r3, #14
 8003bd8:	4443      	add	r3, r8
 8003bda:	4656      	mov	r6, sl
 8003bdc:	469b      	mov	fp, r3
 8003bde:	46a9      	mov	r9, r5
 8003be0:	e01d      	b.n	8003c1e <FindRoute+0xea>
 8003be2:	464d      	mov	r5, r9
 8003be4:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be6:	0034      	movs	r4, r6
 8003be8:	e034      	b.n	8003c54 <FindRoute+0x120>
 8003bea:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003bec:	4281      	cmp	r1, r0
 8003bee:	d015      	beq.n	8003c1c <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003bf0:	880b      	ldrh	r3, [r1, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f9      	beq.n	8003bea <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003bf6:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	5cd7      	ldrb	r7, [r2, r3]
 8003bfe:	2f00      	cmp	r7, #0
 8003c00:	d1f3      	bne.n	8003bea <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c02:	4f30      	ldr	r7, [pc, #192]	; (8003cc4 <FindRoute+0x190>)
 8003c04:	5d7f      	ldrb	r7, [r7, r5]
 8003c06:	3701      	adds	r7, #1
 8003c08:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c0a:	4e2e      	ldr	r6, [pc, #184]	; (8003cc4 <FindRoute+0x190>)
 8003c0c:	5cf6      	ldrb	r6, [r6, r3]
 8003c0e:	42be      	cmp	r6, r7
 8003c10:	d9eb      	bls.n	8003bea <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003c12:	4e2c      	ldr	r6, [pc, #176]	; (8003cc4 <FindRoute+0x190>)
 8003c14:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003c16:	4e2c      	ldr	r6, [pc, #176]	; (8003cc8 <FindRoute+0x194>)
 8003c18:	54f4      	strb	r4, [r6, r3]
 8003c1a:	e7e6      	b.n	8003bea <FindRoute+0xb6>
 8003c1c:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003c1e:	a801      	add	r0, sp, #4
 8003c20:	f7ff ff76 	bl	8003b10 <QnotEmpty>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d113      	bne.n	8003c50 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003c28:	a901      	add	r1, sp, #4
 8003c2a:	4826      	ldr	r0, [pc, #152]	; (8003cc4 <FindRoute+0x190>)
 8003c2c:	f7ff ff52 	bl	8003ad4 <minArr>
 8003c30:	3001      	adds	r0, #1
 8003c32:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003c34:	42b4      	cmp	r4, r6
 8003c36:	d0d4      	beq.n	8003be2 <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003c38:	1e65      	subs	r5, r4, #1
 8003c3a:	ab01      	add	r3, sp, #4
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	555a      	strb	r2, [r3, r5]
 8003c40:	2016      	movs	r0, #22
 8003c42:	4368      	muls	r0, r5
 8003c44:	1c81      	adds	r1, r0, #2
 8003c46:	4441      	add	r1, r8
 8003c48:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	46b2      	mov	sl, r6
 8003c4e:	e7cf      	b.n	8003bf0 <FindRoute+0xbc>
 8003c50:	464d      	mov	r5, r9
 8003c52:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <FindRoute+0x194>)
 8003c56:	191b      	adds	r3, r3, r4
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2a00      	cmp	r2, #0
 8003c60:	d00e      	beq.n	8003c80 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003c62:	4917      	ldr	r1, [pc, #92]	; (8003cc0 <FindRoute+0x18c>)
 8003c64:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c66:	4e18      	ldr	r6, [pc, #96]	; (8003cc8 <FindRoute+0x194>)
 8003c68:	e000      	b.n	8003c6c <FindRoute+0x138>
 8003c6a:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c6c:	1c58      	adds	r0, r3, #1
 8003c6e:	4661      	mov	r1, ip
 8003c70:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c72:	18b3      	adds	r3, r6, r2
 8003c74:	3b01      	subs	r3, #1
 8003c76:	7819      	ldrb	r1, [r3, #0]
 8003c78:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c7a:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d1f4      	bne.n	8003c6a <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003c80:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c82:	490f      	ldr	r1, [pc, #60]	; (8003cc0 <FindRoute+0x18c>)
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <FindRoute+0x190>)
 8003c86:	4453      	add	r3, sl
 8003c88:	001f      	movs	r7, r3
 8003c8a:	3f01      	subs	r7, #1
 8003c8c:	e003      	b.n	8003c96 <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003c8e:	3001      	adds	r0, #1
 8003c90:	3502      	adds	r5, #2
 8003c92:	2807      	cmp	r0, #7
 8003c94:	d00b      	beq.n	8003cae <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c96:	882b      	ldrh	r3, [r5, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f8      	beq.n	8003c8e <FindRoute+0x15a>
 8003c9c:	783a      	ldrb	r2, [r7, #0]
 8003c9e:	188a      	adds	r2, r1, r2
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d1f1      	bne.n	8003c8e <FindRoute+0x15a>
			return col;
 8003caa:	b2c0      	uxtb	r0, r0
 8003cac:	e000      	b.n	8003cb0 <FindRoute+0x17c>
	return 0;
 8003cae:	2000      	movs	r0, #0
}
 8003cb0:	b00f      	add	sp, #60	; 0x3c
 8003cb2:	bc3c      	pop	{r2, r3, r4, r5}
 8003cb4:	4690      	mov	r8, r2
 8003cb6:	4699      	mov	r9, r3
 8003cb8:	46a2      	mov	sl, r4
 8003cba:	46ab      	mov	fp, r5
 8003cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	20006390 	.word	0x20006390
 8003cc4:	20000894 	.word	0x20000894
 8003cc8:	200008b0 	.word	0x200008b0
 8003ccc:	200002bc 	.word	0x200002bc
 8003cd0:	20000030 	.word	0x20000030

08003cd4 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	0007      	movs	r7, r0
 8003cda:	000e      	movs	r6, r1
 8003cdc:	9205      	str	r2, [sp, #20]
 8003cde:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003ce0:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003ce2:	7818      	ldrb	r0, [r3, #0]
 8003ce4:	f7ff ff26 	bl	8003b34 <FindRoute>
 8003ce8:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	d020      	beq.n	8003d30 <remoteBootloaderUpdate+0x5c>
 8003cee:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003cf0:	781c      	ldrb	r4, [r3, #0]
 8003cf2:	42b4      	cmp	r4, r6
 8003cf4:	d05f      	beq.n	8003db6 <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003cf6:	42bc      	cmp	r4, r7
 8003cf8:	d034      	beq.n	8003d64 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003cfa:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003cfc:	9805      	ldr	r0, [sp, #20]
 8003cfe:	f7ff fdbf 	bl	8003880 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003d02:	9804      	ldr	r0, [sp, #16]
 8003d04:	f7ff fdbc 	bl	8003880 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	42a3      	cmp	r3, r4
 8003d0e:	d046      	beq.n	8003d9e <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003d12:	7819      	ldrb	r1, [r3, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	3303      	adds	r3, #3
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	000b      	movs	r3, r1
 8003d24:	9a04      	ldr	r2, [sp, #16]
 8003d26:	9805      	ldr	r0, [sp, #20]
 8003d28:	f005 ff64 	bl	8009bf4 <StartScastDMAStream>
}
 8003d2c:	b007      	add	sp, #28
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <remoteBootloaderUpdate+0xf0>)
 8003d32:	199b      	adds	r3, r3, r6
 8003d34:	3b01      	subs	r3, #1
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	2a01      	cmp	r2, #1
 8003d3a:	d010      	beq.n	8003d5e <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <remoteBootloaderUpdate+0xf4>)
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	3b01      	subs	r3, #1
 8003d42:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	42bb      	cmp	r3, r7
 8003d4a:	d1d7      	bne.n	8003cfc <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003d4c:	f00a fd56 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 8003d50:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <remoteBootloaderUpdate+0xf8>)
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	0032      	movs	r2, r6
 8003d58:	f010 fcb8 	bl	80146cc <siprintf>
 8003d5c:	e00d      	b.n	8003d7a <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <remoteBootloaderUpdate+0xec>)
 8003d60:	781c      	ldrb	r4, [r3, #0]
 8003d62:	e7ef      	b.n	8003d44 <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003d64:	f00a fd4a 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 8003d68:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003d6a:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <remoteBootloaderUpdate+0xfc>)
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	002b      	movs	r3, r5
 8003d72:	0032      	movs	r2, r6
 8003d74:	0038      	movs	r0, r7
 8003d76:	f010 fca9 	bl	80146cc <siprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <remoteBootloaderUpdate+0x100>)
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	0038      	movs	r0, r7
 8003d80:	f010 fcc4 	bl	801470c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003d84:	0038      	movs	r0, r7
 8003d86:	f7fc f9c7 	bl	8000118 <strlen>
 8003d8a:	b282      	uxth	r2, r0
 8003d8c:	2332      	movs	r3, #50	; 0x32
 8003d8e:	0039      	movs	r1, r7
 8003d90:	9805      	ldr	r0, [sp, #20]
 8003d92:	f00a fb19 	bl	800e3c8 <writePxITMutex>
		Delay_ms(100);
 8003d96:	2064      	movs	r0, #100	; 0x64
 8003d98:	f00c fc46 	bl	8010628 <HAL_Delay>
 8003d9c:	e7ae      	b.n	8003cfc <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003d9e:	9804      	ldr	r0, [sp, #16]
 8003da0:	f00a fad6 	bl	800e350 <GetUart>
 8003da4:	2101      	movs	r1, #1
 8003da6:	f00a fb5f 	bl	800e468 <SwapUartPins>
 8003daa:	e7b1      	b.n	8003d10 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003dac:	f00a fd26 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 8003db0:	0007      	movs	r7, r0
		myOutport =outport;
 8003db2:	9504      	str	r5, [sp, #16]
 8003db4:	e7da      	b.n	8003d6c <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003db6:	42bc      	cmp	r4, r7
 8003db8:	d0f8      	beq.n	8003dac <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003dba:	9504      	str	r5, [sp, #16]
 8003dbc:	e79e      	b.n	8003cfc <remoteBootloaderUpdate+0x28>
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	2000080e 	.word	0x2000080e
 8003dc4:	20000894 	.word	0x20000894
 8003dc8:	20006390 	.word	0x20006390
 8003dcc:	2000008c 	.word	0x2000008c
 8003dd0:	20000090 	.word	0x20000090
 8003dd4:	20000094 	.word	0x20000094

08003dd8 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dda:	46de      	mov	lr, fp
 8003ddc:	4657      	mov	r7, sl
 8003dde:	4646      	mov	r6, r8
 8003de0:	b5c0      	push	{r6, r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	0005      	movs	r5, r0
 8003de6:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003de8:	4c55      	ldr	r4, [pc, #340]	; (8003f40 <DisplayTopology+0x168>)
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <DisplayTopology+0x16c>)
 8003dec:	0022      	movs	r2, r4
 8003dee:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003df0:	c243      	stmia	r2!, {r0, r1, r6}
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dfa:	0020      	movs	r0, r4
 8003dfc:	f7fc f98c 	bl	8000118 <strlen>
 8003e00:	b282      	uxth	r2, r0
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	3333      	adds	r3, #51	; 0x33
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	0028      	movs	r0, r5
 8003e0e:	f00a fab3 	bl	800e378 <writePxMutex>
 8003e12:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003e14:	4f4c      	ldr	r7, [pc, #304]	; (8003f48 <DisplayTopology+0x170>)
 8003e16:	4d4a      	ldr	r5, [pc, #296]	; (8003f40 <DisplayTopology+0x168>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e18:	2601      	movs	r6, #1
 8003e1a:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003e1c:	0022      	movs	r2, r4
 8003e1e:	0039      	movs	r1, r7
 8003e20:	0028      	movs	r0, r5
 8003e22:	f010 fc53 	bl	80146cc <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e26:	0028      	movs	r0, r5
 8003e28:	f7fc f976 	bl	8000118 <strlen>
 8003e2c:	b282      	uxth	r2, r0
 8003e2e:	9600      	str	r6, [sp, #0]
 8003e30:	2332      	movs	r3, #50	; 0x32
 8003e32:	0029      	movs	r1, r5
 8003e34:	9803      	ldr	r0, [sp, #12]
 8003e36:	f00a fa9f 	bl	800e378 <writePxMutex>
 8003e3a:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003e3c:	2c04      	cmp	r4, #4
 8003e3e:	d1ed      	bne.n	8003e1c <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003e40:	2301      	movs	r3, #1
 8003e42:	425b      	negs	r3, r3
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	3333      	adds	r3, #51	; 0x33
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4940      	ldr	r1, [pc, #256]	; (8003f4c <DisplayTopology+0x174>)
 8003e4c:	9803      	ldr	r0, [sp, #12]
 8003e4e:	f00a fa93 	bl	800e378 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <DisplayTopology+0x178>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <DisplayTopology+0x14a>
 8003e5a:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e5c:	2701      	movs	r7, #1
 8003e5e:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e60:	4b3c      	ldr	r3, [pc, #240]	; (8003f54 <DisplayTopology+0x17c>)
 8003e62:	4698      	mov	r8, r3
 8003e64:	2308      	movs	r3, #8
 8003e66:	4443      	add	r3, r8
 8003e68:	469a      	mov	sl, r3
 8003e6a:	e029      	b.n	8003ec0 <DisplayTopology+0xe8>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	4013      	ands	r3, r2
 8003e70:	08d2      	lsrs	r2, r2, #3
 8003e72:	4939      	ldr	r1, [pc, #228]	; (8003f58 <DisplayTopology+0x180>)
 8003e74:	4832      	ldr	r0, [pc, #200]	; (8003f40 <DisplayTopology+0x168>)
 8003e76:	f010 fc29 	bl	80146cc <siprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e7a:	4d31      	ldr	r5, [pc, #196]	; (8003f40 <DisplayTopology+0x168>)
 8003e7c:	0028      	movs	r0, r5
 8003e7e:	f7fc f94b 	bl	8000118 <strlen>
 8003e82:	b282      	uxth	r2, r0
 8003e84:	9700      	str	r7, [sp, #0]
 8003e86:	2332      	movs	r3, #50	; 0x32
 8003e88:	0029      	movs	r1, r5
 8003e8a:	9803      	ldr	r0, [sp, #12]
 8003e8c:	f00a fa74 	bl	800e378 <writePxMutex>
 8003e90:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003e92:	455c      	cmp	r4, fp
 8003e94:	d007      	beq.n	8003ea6 <DisplayTopology+0xce>
			if(!array[row][col])
 8003e96:	8822      	ldrh	r2, [r4, #0]
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	d1e7      	bne.n	8003e6c <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003e9c:	492f      	ldr	r1, [pc, #188]	; (8003f5c <DisplayTopology+0x184>)
 8003e9e:	4828      	ldr	r0, [pc, #160]	; (8003f40 <DisplayTopology+0x168>)
 8003ea0:	f010 fc14 	bl	80146cc <siprintf>
 8003ea4:	e7e9      	b.n	8003e7a <DisplayTopology+0xa2>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003ea6:	9700      	str	r7, [sp, #0]
 8003ea8:	2332      	movs	r3, #50	; 0x32
 8003eaa:	2202      	movs	r2, #2
 8003eac:	492c      	ldr	r1, [pc, #176]	; (8003f60 <DisplayTopology+0x188>)
 8003eae:	9803      	ldr	r0, [sp, #12]
 8003eb0:	f00a fa62 	bl	800e378 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003eb4:	3601      	adds	r6, #1
 8003eb6:	b2f6      	uxtb	r6, r6
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <DisplayTopology+0x178>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	42b3      	cmp	r3, r6
 8003ebe:	d930      	bls.n	8003f22 <DisplayTopology+0x14a>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003ec0:	1c72      	adds	r2, r6, #1
 8003ec2:	4c1f      	ldr	r4, [pc, #124]	; (8003f40 <DisplayTopology+0x168>)
 8003ec4:	4927      	ldr	r1, [pc, #156]	; (8003f64 <DisplayTopology+0x18c>)
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	f010 fc00 	bl	80146cc <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ecc:	0020      	movs	r0, r4
 8003ece:	f7fc f923 	bl	8000118 <strlen>
 8003ed2:	b282      	uxth	r2, r0
 8003ed4:	9700      	str	r7, [sp, #0]
 8003ed6:	2332      	movs	r3, #50	; 0x32
 8003ed8:	0021      	movs	r1, r4
 8003eda:	9803      	ldr	r0, [sp, #12]
 8003edc:	f00a fa4c 	bl	800e378 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003ee0:	2516      	movs	r5, #22
 8003ee2:	4375      	muls	r5, r6
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	5aeb      	ldrh	r3, [r5, r3]
 8003ee8:	0059      	lsls	r1, r3, #1
 8003eea:	18c9      	adds	r1, r1, r3
 8003eec:	0049      	lsls	r1, r1, #1
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <DisplayTopology+0x190>)
 8003ef0:	18c9      	adds	r1, r1, r3
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	0020      	movs	r0, r4
 8003ef6:	f010 fc3e 	bl	8014776 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003efa:	9700      	str	r7, [sp, #0]
 8003efc:	2332      	movs	r3, #50	; 0x32
 8003efe:	2205      	movs	r2, #5
 8003f00:	0021      	movs	r1, r4
 8003f02:	9c03      	ldr	r4, [sp, #12]
 8003f04:	0020      	movs	r0, r4
 8003f06:	f00a fa37 	bl	800e378 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003f0a:	9700      	str	r7, [sp, #0]
 8003f0c:	2332      	movs	r3, #50	; 0x32
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4916      	ldr	r1, [pc, #88]	; (8003f6c <DisplayTopology+0x194>)
 8003f12:	0020      	movs	r0, r4
 8003f14:	f00a fa30 	bl	800e378 <writePxMutex>
 8003f18:	1cac      	adds	r4, r5, #2
 8003f1a:	4444      	add	r4, r8
 8003f1c:	4455      	add	r5, sl
 8003f1e:	46ab      	mov	fp, r5
 8003f20:	e7b9      	b.n	8003e96 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003f22:	2301      	movs	r3, #1
 8003f24:	425b      	negs	r3, r3
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	3333      	adds	r3, #51	; 0x33
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4910      	ldr	r1, [pc, #64]	; (8003f70 <DisplayTopology+0x198>)
 8003f2e:	9803      	ldr	r0, [sp, #12]
 8003f30:	f00a fa22 	bl	800e378 <writePxMutex>
}
 8003f34:	b004      	add	sp, #16
 8003f36:	bc1c      	pop	{r2, r3, r4}
 8003f38:	4690      	mov	r8, r2
 8003f3a:	469a      	mov	sl, r3
 8003f3c:	46a3      	mov	fp, r4
 8003f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f40:	20000828 	.word	0x20000828
 8003f44:	08017844 	.word	0x08017844
 8003f48:	08017858 	.word	0x08017858
 8003f4c:	08018ce8 	.word	0x08018ce8
 8003f50:	20000030 	.word	0x20000030
 8003f54:	200002bc 	.word	0x200002bc
 8003f58:	08017870 	.word	0x08017870
 8003f5c:	0801786c 	.word	0x0801786c
 8003f60:	080176ec 	.word	0x080176ec
 8003f64:	08017860 	.word	0x08017860
 8003f68:	080178ac 	.word	0x080178ac
 8003f6c:	08017854 	.word	0x08017854
 8003f70:	0801a3a8 	.word	0x0801a3a8

08003f74 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f76:	46c6      	mov	lr, r8
 8003f78:	b500      	push	{lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	0005      	movs	r5, r0
 8003f7e:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f80:	4c30      	ldr	r4, [pc, #192]	; (8004044 <DisplayPortsDir+0xd0>)
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <DisplayPortsDir+0xd4>)
 8003f84:	0022      	movs	r2, r4
 8003f86:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f88:	c243      	stmia	r2!, {r0, r1, r6}
 8003f8a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f8c:	c243      	stmia	r2!, {r0, r1, r6}
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f92:	0020      	movs	r0, r4
 8003f94:	f7fc f8c0 	bl	8000118 <strlen>
 8003f98:	b282      	uxth	r2, r0
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	3333      	adds	r3, #51	; 0x33
 8003fa2:	0021      	movs	r1, r4
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f00a f9e7 	bl	800e378 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <DisplayPortsDir+0xd8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02c      	beq.n	8004010 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fb6:	4e26      	ldr	r6, [pc, #152]	; (8004050 <DisplayPortsDir+0xdc>)
 8003fb8:	e025      	b.n	8004006 <DisplayPortsDir+0x92>
 8003fba:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003fbc:	2c0a      	cmp	r4, #10
 8003fbe:	d01a      	beq.n	8003ff6 <DisplayPortsDir+0x82>
 8003fc0:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fc2:	5ba9      	ldrh	r1, [r5, r6]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	0212      	lsls	r2, r2, #8
 8003fc8:	411a      	asrs	r2, r3
 8003fca:	420a      	tst	r2, r1
 8003fcc:	d0f5      	beq.n	8003fba <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003fce:	4f1d      	ldr	r7, [pc, #116]	; (8004044 <DisplayPortsDir+0xd0>)
 8003fd0:	0023      	movs	r3, r4
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	491f      	ldr	r1, [pc, #124]	; (8004054 <DisplayPortsDir+0xe0>)
 8003fd6:	0038      	movs	r0, r7
 8003fd8:	f010 fb78 	bl	80146cc <siprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003fdc:	0038      	movs	r0, r7
 8003fde:	f7fc f89b 	bl	8000118 <strlen>
 8003fe2:	b282      	uxth	r2, r0
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	425b      	negs	r3, r3
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	3333      	adds	r3, #51	; 0x33
 8003fec:	0039      	movs	r1, r7
 8003fee:	9803      	ldr	r0, [sp, #12]
 8003ff0:	f00a f9c2 	bl	800e378 <writePxMutex>
 8003ff4:	e7e1      	b.n	8003fba <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003ff6:	4643      	mov	r3, r8
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4698      	mov	r8, r3
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <DisplayPortsDir+0xd8>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	4543      	cmp	r3, r8
 8004004:	d304      	bcc.n	8004010 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8004006:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004008:	4642      	mov	r2, r8
 800400a:	1e55      	subs	r5, r2, #1
 800400c:	006d      	lsls	r5, r5, #1
 800400e:	e7d7      	b.n	8003fc0 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004010:	4c0c      	ldr	r4, [pc, #48]	; (8004044 <DisplayPortsDir+0xd0>)
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <DisplayPortsDir+0xe4>)
 8004014:	0022      	movs	r2, r4
 8004016:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004018:	c223      	stmia	r2!, {r0, r1, r5}
 800401a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800401c:	c223      	stmia	r2!, {r0, r1, r5}
 800401e:	cb03      	ldmia	r3!, {r0, r1}
 8004020:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004022:	0020      	movs	r0, r4
 8004024:	f7fc f878 	bl	8000118 <strlen>
 8004028:	b282      	uxth	r2, r0
 800402a:	2301      	movs	r3, #1
 800402c:	425b      	negs	r3, r3
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	3333      	adds	r3, #51	; 0x33
 8004032:	0021      	movs	r1, r4
 8004034:	9803      	ldr	r0, [sp, #12]
 8004036:	f00a f99f 	bl	800e378 <writePxMutex>
	HAL_MAX_DELAY);
}
 800403a:	b004      	add	sp, #16
 800403c:	bc04      	pop	{r2}
 800403e:	4690      	mov	r8, r2
 8004040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20000828 	.word	0x20000828
 8004048:	080177f4 	.word	0x080177f4
 800404c:	20000030 	.word	0x20000030
 8004050:	2000670c 	.word	0x2000670c
 8004054:	08017810 	.word	0x08017810
 8004058:	08017824 	.word	0x08017824

0800405c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 800405c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405e:	46c6      	mov	lr, r8
 8004060:	b500      	push	{lr}
 8004062:	b084      	sub	sp, #16
 8004064:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004066:	f00a fbc9 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 800406a:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 800406c:	2300      	movs	r3, #0
 800406e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004070:	4b8d      	ldr	r3, [pc, #564]	; (80042a8 <DisplayModuleStatus+0x24c>)
 8004072:	781a      	ldrb	r2, [r3, #0]
 8004074:	4d8d      	ldr	r5, [pc, #564]	; (80042ac <DisplayModuleStatus+0x250>)
 8004076:	498e      	ldr	r1, [pc, #568]	; (80042b0 <DisplayModuleStatus+0x254>)
 8004078:	0028      	movs	r0, r5
 800407a:	f010 fb27 	bl	80146cc <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800407e:	0029      	movs	r1, r5
 8004080:	0020      	movs	r0, r4
 8004082:	f010 fb43 	bl	801470c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004086:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <DisplayModuleStatus+0x258>)
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	498b      	ldr	r1, [pc, #556]	; (80042b8 <DisplayModuleStatus+0x25c>)
 800408c:	0028      	movs	r0, r5
 800408e:	f010 fb1d 	bl	80146cc <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004092:	0029      	movs	r1, r5
 8004094:	0020      	movs	r0, r4
 8004096:	f010 fb39 	bl	801470c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 800409a:	2306      	movs	r3, #6
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	3b04      	subs	r3, #4
 80040a0:	2200      	movs	r2, #0
 80040a2:	4986      	ldr	r1, [pc, #536]	; (80042bc <DisplayModuleStatus+0x260>)
 80040a4:	0028      	movs	r0, r5
 80040a6:	f010 fb11 	bl	80146cc <siprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80040aa:	0029      	movs	r1, r5
 80040ac:	0020      	movs	r0, r4
 80040ae:	f010 fb2d 	bl	801470c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80040b2:	4a83      	ldr	r2, [pc, #524]	; (80042c0 <DisplayModuleStatus+0x264>)
 80040b4:	4983      	ldr	r1, [pc, #524]	; (80042c4 <DisplayModuleStatus+0x268>)
 80040b6:	0028      	movs	r0, r5
 80040b8:	f010 fb08 	bl	80146cc <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040bc:	0029      	movs	r1, r5
 80040be:	0020      	movs	r0, r4
 80040c0:	f010 fb24 	bl	801470c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80040c4:	4a80      	ldr	r2, [pc, #512]	; (80042c8 <DisplayModuleStatus+0x26c>)
 80040c6:	4981      	ldr	r1, [pc, #516]	; (80042cc <DisplayModuleStatus+0x270>)
 80040c8:	0028      	movs	r0, r5
 80040ca:	f010 faff 	bl	80146cc <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040ce:	0029      	movs	r1, r5
 80040d0:	0020      	movs	r0, r4
 80040d2:	f010 fb1b 	bl	801470c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040d6:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <DisplayModuleStatus+0x274>)
 80040d8:	002a      	movs	r2, r5
 80040da:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040dc:	c243      	stmia	r2!, {r0, r1, r6}
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	8899      	ldrh	r1, [r3, #4]
 80040e4:	8091      	strh	r1, [r2, #4]
 80040e6:	799b      	ldrb	r3, [r3, #6]
 80040e8:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80040ea:	0029      	movs	r1, r5
 80040ec:	0020      	movs	r0, r4
 80040ee:	f010 fb0d 	bl	801470c <strcat>
 80040f2:	2601      	movs	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 80040f4:	4d6d      	ldr	r5, [pc, #436]	; (80042ac <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 80040f6:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <DisplayModuleStatus+0x278>)
 80040f8:	4698      	mov	r8, r3
 80040fa:	e00e      	b.n	800411a <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <DisplayModuleStatus+0x250>)
 80040fe:	4a76      	ldr	r2, [pc, #472]	; (80042d8 <DisplayModuleStatus+0x27c>)
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	8891      	ldrh	r1, [r2, #4]
 8004106:	8099      	strh	r1, [r3, #4]
 8004108:	7992      	ldrb	r2, [r2, #6]
 800410a:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800410c:	4967      	ldr	r1, [pc, #412]	; (80042ac <DisplayModuleStatus+0x250>)
 800410e:	0020      	movs	r0, r4
 8004110:	f010 fafc 	bl	801470c <strcat>
 8004114:	3601      	adds	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004116:	2e04      	cmp	r6, #4
 8004118:	d039      	beq.n	800418e <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 800411a:	0032      	movs	r2, r6
 800411c:	496f      	ldr	r1, [pc, #444]	; (80042dc <DisplayModuleStatus+0x280>)
 800411e:	0028      	movs	r0, r5
 8004120:	f010 fad4 	bl	80146cc <siprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004124:	0029      	movs	r1, r5
 8004126:	0020      	movs	r0, r4
 8004128:	f010 faf0 	bl	801470c <strcat>
		switch(portStatus[i]){
 800412c:	4643      	mov	r3, r8
 800412e:	5cf3      	ldrb	r3, [r6, r3]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d8eb      	bhi.n	800410c <DisplayModuleStatus+0xb0>
 8004134:	4643      	mov	r3, r8
 8004136:	5cf3      	ldrb	r3, [r6, r3]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a69      	ldr	r2, [pc, #420]	; (80042e0 <DisplayModuleStatus+0x284>)
 800413c:	58d3      	ldr	r3, [r2, r3]
 800413e:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004140:	495a      	ldr	r1, [pc, #360]	; (80042ac <DisplayModuleStatus+0x250>)
 8004142:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <DisplayModuleStatus+0x288>)
 8004144:	000a      	movs	r2, r1
 8004146:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004148:	c283      	stmia	r2!, {r0, r1, r7}
 800414a:	cb03      	ldmia	r3!, {r0, r1}
 800414c:	c203      	stmia	r2!, {r0, r1}
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	7013      	strb	r3, [r2, #0]
				break;
 8004152:	e7db      	b.n	800410c <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004154:	4a55      	ldr	r2, [pc, #340]	; (80042ac <DisplayModuleStatus+0x250>)
 8004156:	4b64      	ldr	r3, [pc, #400]	; (80042e8 <DisplayModuleStatus+0x28c>)
 8004158:	cb83      	ldmia	r3!, {r0, r1, r7}
 800415a:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800415c:	e7d6      	b.n	800410c <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800415e:	4953      	ldr	r1, [pc, #332]	; (80042ac <DisplayModuleStatus+0x250>)
 8004160:	4b62      	ldr	r3, [pc, #392]	; (80042ec <DisplayModuleStatus+0x290>)
 8004162:	000a      	movs	r2, r1
 8004164:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004166:	c283      	stmia	r2!, {r0, r1, r7}
 8004168:	cb83      	ldmia	r3!, {r0, r1, r7}
 800416a:	c283      	stmia	r2!, {r0, r1, r7}
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	8013      	strh	r3, [r2, #0]
				break;
 8004170:	e7cc      	b.n	800410c <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004172:	494e      	ldr	r1, [pc, #312]	; (80042ac <DisplayModuleStatus+0x250>)
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <DisplayModuleStatus+0x294>)
 8004176:	000a      	movs	r2, r1
 8004178:	cb83      	ldmia	r3!, {r0, r1, r7}
 800417a:	c283      	stmia	r2!, {r0, r1, r7}
 800417c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800417e:	c283      	stmia	r2!, {r0, r1, r7}
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	6011      	str	r1, [r2, #0]
 8004184:	8899      	ldrh	r1, [r3, #4]
 8004186:	8091      	strh	r1, [r2, #4]
 8004188:	799b      	ldrb	r3, [r3, #6]
 800418a:	7193      	strb	r3, [r2, #6]
				break;
 800418c:	e7be      	b.n	800410c <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800418e:	4947      	ldr	r1, [pc, #284]	; (80042ac <DisplayModuleStatus+0x250>)
 8004190:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <DisplayModuleStatus+0x298>)
 8004192:	000a      	movs	r2, r1
 8004194:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004196:	c261      	stmia	r2!, {r0, r5, r6}
 8004198:	cb61      	ldmia	r3!, {r0, r5, r6}
 800419a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800419c:	0020      	movs	r0, r4
 800419e:	f010 fab5 	bl	801470c <strcat>
 80041a2:	4e55      	ldr	r6, [pc, #340]	; (80042f8 <DisplayModuleStatus+0x29c>)
 80041a4:	2701      	movs	r7, #1
 80041a6:	e00d      	b.n	80041c4 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80041a8:	4d40      	ldr	r5, [pc, #256]	; (80042ac <DisplayModuleStatus+0x250>)
 80041aa:	003a      	movs	r2, r7
 80041ac:	4953      	ldr	r1, [pc, #332]	; (80042fc <DisplayModuleStatus+0x2a0>)
 80041ae:	0028      	movs	r0, r5
 80041b0:	f010 fa8c 	bl	80146cc <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041b4:	0029      	movs	r1, r5
 80041b6:	0020      	movs	r0, r4
 80041b8:	f010 faa8 	bl	801470c <strcat>
 80041bc:	3701      	adds	r7, #1
 80041be:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80041c0:	2f07      	cmp	r7, #7
 80041c2:	d018      	beq.n	80041f6 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80041ca:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80041cc:	f007 fe28 	bl	800be20 <GetPort>
 80041d0:	0005      	movs	r5, r0
 80041d2:	00bb      	lsls	r3, r7, #2
 80041d4:	3b04      	subs	r3, #4
 80041d6:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <DisplayModuleStatus+0x2a4>)
 80041d8:	58d0      	ldr	r0, [r2, r3]
 80041da:	f007 fe21 	bl	800be20 <GetPort>
 80041de:	9000      	str	r0, [sp, #0]
 80041e0:	002b      	movs	r3, r5
 80041e2:	003a      	movs	r2, r7
 80041e4:	4947      	ldr	r1, [pc, #284]	; (8004304 <DisplayModuleStatus+0x2a8>)
 80041e6:	4831      	ldr	r0, [pc, #196]	; (80042ac <DisplayModuleStatus+0x250>)
 80041e8:	f010 fa70 	bl	80146cc <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041ec:	492f      	ldr	r1, [pc, #188]	; (80042ac <DisplayModuleStatus+0x250>)
 80041ee:	0020      	movs	r0, r4
 80041f0:	f010 fa8c 	bl	801470c <strcat>
 80041f4:	e7e2      	b.n	80041bc <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80041f6:	0020      	movs	r0, r4
 80041f8:	f7fb ff8e 	bl	8000118 <strlen>
 80041fc:	1820      	adds	r0, r4, r0
 80041fe:	2203      	movs	r2, #3
 8004200:	4941      	ldr	r1, [pc, #260]	; (8004308 <DisplayModuleStatus+0x2ac>)
 8004202:	f00f fccc 	bl	8013b9e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004206:	0020      	movs	r0, r4
 8004208:	f7fb ff86 	bl	8000118 <strlen>
 800420c:	1820      	adds	r0, r4, r0
 800420e:	221d      	movs	r2, #29
 8004210:	493e      	ldr	r1, [pc, #248]	; (800430c <DisplayModuleStatus+0x2b0>)
 8004212:	f00f fcc4 	bl	8013b9e <memcpy>
	temp =strlen((char* )pcOutputString);
 8004216:	0020      	movs	r0, r4
 8004218:	f7fb ff7e 	bl	8000118 <strlen>
 800421c:	4680      	mov	r8, r0
 800421e:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004220:	4e3b      	ldr	r6, [pc, #236]	; (8004310 <DisplayModuleStatus+0x2b4>)
 8004222:	4f21      	ldr	r7, [pc, #132]	; (80042a8 <DisplayModuleStatus+0x24c>)
 8004224:	e002      	b.n	800422c <DisplayModuleStatus+0x1d0>
 8004226:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004228:	2d03      	cmp	r5, #3
 800422a:	d013      	beq.n	8004254 <DisplayModuleStatus+0x1f8>
 800422c:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800422e:	783b      	ldrb	r3, [r7, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	5b99      	ldrh	r1, [r3, r6]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	4113      	asrs	r3, r2
 800423c:	420b      	tst	r3, r1
 800423e:	d0f2      	beq.n	8004226 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004240:	002a      	movs	r2, r5
 8004242:	4934      	ldr	r1, [pc, #208]	; (8004314 <DisplayModuleStatus+0x2b8>)
 8004244:	4819      	ldr	r0, [pc, #100]	; (80042ac <DisplayModuleStatus+0x250>)
 8004246:	f010 fa41 	bl	80146cc <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800424a:	4918      	ldr	r1, [pc, #96]	; (80042ac <DisplayModuleStatus+0x250>)
 800424c:	0020      	movs	r0, r4
 800424e:	f010 fa5d 	bl	801470c <strcat>
 8004252:	e7e8      	b.n	8004226 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004254:	0020      	movs	r0, r4
 8004256:	f7fb ff5f 	bl	8000118 <strlen>
 800425a:	4643      	mov	r3, r8
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	4298      	cmp	r0, r3
 8004262:	d00e      	beq.n	8004282 <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004264:	0020      	movs	r0, r4
 8004266:	f7fb ff57 	bl	8000118 <strlen>
 800426a:	1820      	adds	r0, r4, r0
 800426c:	2203      	movs	r2, #3
 800426e:	4926      	ldr	r1, [pc, #152]	; (8004308 <DisplayModuleStatus+0x2ac>)
 8004270:	f00f fc95 	bl	8013b9e <memcpy>
	
	/* Display output */
	if(port)
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 800427a:	b004      	add	sp, #16
 800427c:	bc04      	pop	{r2}
 800427e:	4690      	mov	r8, r2
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004282:	1820      	adds	r0, r4, r0
 8004284:	2205      	movs	r2, #5
 8004286:	4924      	ldr	r1, [pc, #144]	; (8004318 <DisplayModuleStatus+0x2bc>)
 8004288:	f00f fc89 	bl	8013b9e <memcpy>
 800428c:	e7ea      	b.n	8004264 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800428e:	0020      	movs	r0, r4
 8004290:	f7fb ff42 	bl	8000118 <strlen>
 8004294:	b282      	uxth	r2, r0
 8004296:	2301      	movs	r3, #1
 8004298:	425b      	negs	r3, r3
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	3333      	adds	r3, #51	; 0x33
 800429e:	0021      	movs	r1, r4
 80042a0:	9803      	ldr	r0, [sp, #12]
 80042a2:	f00a f869 	bl	800e378 <writePxMutex>
}
 80042a6:	e7e8      	b.n	800427a <DisplayModuleStatus+0x21e>
 80042a8:	2000080e 	.word	0x2000080e
 80042ac:	20000828 	.word	0x20000828
 80042b0:	08017638 	.word	0x08017638
 80042b4:	200002b8 	.word	0x200002b8
 80042b8:	08017654 	.word	0x08017654
 80042bc:	08017670 	.word	0x08017670
 80042c0:	08017690 	.word	0x08017690
 80042c4:	0801769c 	.word	0x0801769c
 80042c8:	080176b4 	.word	0x080176b4
 80042cc:	080176c0 	.word	0x080176c0
 80042d0:	080176dc 	.word	0x080176dc
 80042d4:	20000878 	.word	0x20000878
 80042d8:	080176f8 	.word	0x080176f8
 80042dc:	080176f0 	.word	0x080176f0
 80042e0:	08017614 	.word	0x08017614
 80042e4:	08017700 	.word	0x08017700
 80042e8:	08017718 	.word	0x08017718
 80042ec:	08017724 	.word	0x08017724
 80042f0:	08017740 	.word	0x08017740
 80042f4:	08017760 	.word	0x08017760
 80042f8:	20001270 	.word	0x20001270
 80042fc:	08017778 	.word	0x08017778
 8004300:	20000cd4 	.word	0x20000cd4
 8004304:	08017794 	.word	0x08017794
 8004308:	080176ec 	.word	0x080176ec
 800430c:	080177c4 	.word	0x080177c4
 8004310:	2000670c 	.word	0x2000670c
 8004314:	080177e4 	.word	0x080177e4
 8004318:	080177ec 	.word	0x080177ec

0800431c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431e:	46c6      	mov	lr, r8
 8004320:	b500      	push	{lr}
 8004322:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004324:	4929      	ldr	r1, [pc, #164]	; (80043cc <GetID+0xb0>)
 8004326:	f7fb feed 	bl	8000104 <strcmp>
 800432a:	2800      	cmp	r0, #0
 800432c:	d010      	beq.n	8004350 <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800432e:	4928      	ldr	r1, [pc, #160]	; (80043d0 <GetID+0xb4>)
 8004330:	0028      	movs	r0, r5
 8004332:	f7fb fee7 	bl	8000104 <strcmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d045      	beq.n	80043c6 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800433a:	782b      	ldrb	r3, [r5, #0]
 800433c:	4698      	mov	r8, r3
 800433e:	2b23      	cmp	r3, #35	; 0x23
 8004340:	d00b      	beq.n	800435a <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <GetID+0xb8>)
 8004344:	781f      	ldrb	r7, [r3, #0]
 8004346:	2f00      	cmp	r7, #0
 8004348:	d02a      	beq.n	80043a0 <GetID+0x84>
 800434a:	4e23      	ldr	r6, [pc, #140]	; (80043d8 <GetID+0xbc>)
 800434c:	2400      	movs	r4, #0
 800434e:	e01c      	b.n	800438a <GetID+0x6e>
		return myID;
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <GetID+0xc0>)
 8004352:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004354:	bc04      	pop	{r2}
 8004356:	4690      	mov	r8, r2
 8004358:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 800435a:	1c68      	adds	r0, r5, #1
 800435c:	f00f fbad 	bl	8013aba <atol>
 8004360:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <GetID+0x52>
 8004366:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <GetID+0xb8>)
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d206      	bcs.n	800437c <GetID+0x60>
		else if(id == myID)
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <GetID+0xc0>)
 8004370:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 8004372:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004374:	429a      	cmp	r2, r3
 8004376:	d1ed      	bne.n	8004354 <GetID+0x38>
			return myID;
 8004378:	b210      	sxth	r0, r2
 800437a:	e7eb      	b.n	8004354 <GetID+0x38>
			return id;
 800437c:	b218      	sxth	r0, r3
 800437e:	e7e9      	b.n	8004354 <GetID+0x38>
		for(i =0; i < N; i++){
 8004380:	3401      	adds	r4, #1
 8004382:	b2e4      	uxtb	r4, r4
 8004384:	360a      	adds	r6, #10
 8004386:	42bc      	cmp	r4, r7
 8004388:	d00a      	beq.n	80043a0 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800438a:	0031      	movs	r1, r6
 800438c:	0028      	movs	r0, r5
 800438e:	f7fb feb9 	bl	8000104 <strcmp>
 8004392:	2800      	cmp	r0, #0
 8004394:	d1f4      	bne.n	8004380 <GetID+0x64>
 8004396:	4643      	mov	r3, r8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f1      	beq.n	8004380 <GetID+0x64>
				return (i);
 800439c:	b220      	sxth	r0, r4
 800439e:	e7d9      	b.n	8004354 <GetID+0x38>
 80043a0:	4f0f      	ldr	r7, [pc, #60]	; (80043e0 <GetID+0xc4>)
		for(i =0; i < N; i++){
 80043a2:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 80043a4:	0039      	movs	r1, r7
 80043a6:	0028      	movs	r0, r5
 80043a8:	f7fb feac 	bl	8000104 <strcmp>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d005      	beq.n	80043bc <GetID+0xa0>
 80043b0:	3601      	adds	r6, #1
 80043b2:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80043b4:	2e0a      	cmp	r6, #10
 80043b6:	d1f5      	bne.n	80043a4 <GetID+0x88>
		return BOS_ERR_WrongName;
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	e7cb      	b.n	8004354 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 80043bc:	0234      	lsls	r4, r6, #8
 80043be:	20fe      	movs	r0, #254	; 0xfe
 80043c0:	4320      	orrs	r0, r4
 80043c2:	b200      	sxth	r0, r0
 80043c4:	e7c6      	b.n	8004354 <GetID+0x38>
		return BOS_BROADCAST;
 80043c6:	20ff      	movs	r0, #255	; 0xff
 80043c8:	e7c4      	b.n	8004354 <GetID+0x38>
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	08017878 	.word	0x08017878
 80043d0:	0801787c 	.word	0x0801787c
 80043d4:	20000030 	.word	0x20000030
 80043d8:	20000700 	.word	0x20000700
 80043dc:	2000080e 	.word	0x2000080e
 80043e0:	200005f8 	.word	0x200005f8

080043e4 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b083      	sub	sp, #12
 80043e8:	9001      	str	r0, [sp, #4]
 80043ea:	000d      	movs	r5, r1
 80043ec:	4c2a      	ldr	r4, [pc, #168]	; (8004498 <NameModule+0xb4>)
 80043ee:	0027      	movs	r7, r4
 80043f0:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80043f2:	0021      	movs	r1, r4
 80043f4:	0028      	movs	r0, r5
 80043f6:	f7fb fe85 	bl	8000104 <strcmp>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d043      	beq.n	8004486 <NameModule+0xa2>
 80043fe:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 8004400:	42bc      	cmp	r4, r7
 8004402:	d1f6      	bne.n	80043f2 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <NameModule+0xb8>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d90f      	bls.n	800442c <NameModule+0x48>
 800440c:	4c24      	ldr	r4, [pc, #144]	; (80044a0 <NameModule+0xbc>)
 800440e:	009f      	lsls	r7, r3, #2
 8004410:	18ff      	adds	r7, r7, r3
 8004412:	007f      	lsls	r7, r7, #1
 8004414:	0023      	movs	r3, r4
 8004416:	3b0a      	subs	r3, #10
 8004418:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 800441a:	0021      	movs	r1, r4
 800441c:	0028      	movs	r0, r5
 800441e:	f7fb fe71 	bl	8000104 <strcmp>
 8004422:	2800      	cmp	r0, #0
 8004424:	d031      	beq.n	800448a <NameModule+0xa6>
 8004426:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004428:	42bc      	cmp	r4, r7
 800442a:	d1f6      	bne.n	800441a <NameModule+0x36>
 800442c:	4c1d      	ldr	r4, [pc, #116]	; (80044a4 <NameModule+0xc0>)
 800442e:	0027      	movs	r7, r4
 8004430:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 8004432:	0021      	movs	r1, r4
 8004434:	0028      	movs	r0, r5
 8004436:	f7fb fe65 	bl	8000104 <strcmp>
 800443a:	2800      	cmp	r0, #0
 800443c:	d028      	beq.n	8004490 <NameModule+0xac>
 800443e:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004440:	42bc      	cmp	r4, r7
 8004442:	d1f6      	bne.n	8004432 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004444:	4c18      	ldr	r4, [pc, #96]	; (80044a8 <NameModule+0xc4>)
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <NameModule+0xc8>)
 8004448:	601c      	str	r4, [r3, #0]
 800444a:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004450:	0038      	movs	r0, r7
 8004452:	f7fb fe61 	bl	8000118 <strlen>
 8004456:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004458:	0039      	movs	r1, r7
 800445a:	0028      	movs	r0, r5
 800445c:	f010 f97a 	bl	8014754 <strncmp>
 8004460:	2800      	cmp	r0, #0
 8004462:	d017      	beq.n	8004494 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004464:	6864      	ldr	r4, [r4, #4]
 8004466:	6034      	str	r4, [r6, #0]
 8004468:	2c00      	cmp	r4, #0
 800446a:	d1ef      	bne.n	800444c <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	0098      	lsls	r0, r3, #2
 8004470:	469c      	mov	ip, r3
 8004472:	4460      	add	r0, ip
 8004474:	0040      	lsls	r0, r0, #1
 8004476:	4e0e      	ldr	r6, [pc, #56]	; (80044b0 <NameModule+0xcc>)
 8004478:	1980      	adds	r0, r0, r6
 800447a:	0029      	movs	r1, r5
 800447c:	f010 f962 	bl	8014744 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004480:	f7ff f8a2 	bl	80035c8 <SaveEEalias>
	
	return result;
 8004484:	e002      	b.n	800448c <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004486:	2006      	movs	r0, #6
 8004488:	e000      	b.n	800448c <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 800448a:	2007      	movs	r0, #7
}
 800448c:	b003      	add	sp, #12
 800448e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004490:	2007      	movs	r0, #7
 8004492:	e7fb      	b.n	800448c <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004494:	2008      	movs	r0, #8
 8004496:	e7f9      	b.n	800448c <NameModule+0xa8>
 8004498:	08017628 	.word	0x08017628
 800449c:	20000030 	.word	0x20000030
 80044a0:	2000070a 	.word	0x2000070a
 80044a4:	200005f8 	.word	0x200005f8
 80044a8:	200000b4 	.word	0x200000b4
 80044ac:	2000087c 	.word	0x2000087c
 80044b0:	20000700 	.word	0x20000700

080044b4 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80044b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b6:	46c6      	mov	lr, r8
 80044b8:	b500      	push	{lr}
 80044ba:	0007      	movs	r7, r0
 80044bc:	000e      	movs	r6, r1
 80044be:	4d3a      	ldr	r5, [pc, #232]	; (80045a8 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80044c0:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80044c2:	0029      	movs	r1, r5
 80044c4:	0030      	movs	r0, r6
 80044c6:	f7fb fe1d 	bl	8000104 <strcmp>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d050      	beq.n	8004570 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80044ce:	3401      	adds	r4, #1
 80044d0:	350a      	adds	r5, #10
 80044d2:	2c0a      	cmp	r4, #10
 80044d4:	d1f5      	bne.n	80044c2 <AddModuleToGroup+0xe>
 80044d6:	4c35      	ldr	r4, [pc, #212]	; (80045ac <AddModuleToGroup+0xf8>)
 80044d8:	0025      	movs	r5, r4
 80044da:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80044dc:	0021      	movs	r1, r4
 80044de:	0030      	movs	r0, r6
 80044e0:	f7fb fe10 	bl	8000104 <strcmp>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d058      	beq.n	800459a <AddModuleToGroup+0xe6>
 80044e8:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80044ea:	42ac      	cmp	r4, r5
 80044ec:	d1f6      	bne.n	80044dc <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <AddModuleToGroup+0xfc>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d90f      	bls.n	8004516 <AddModuleToGroup+0x62>
 80044f6:	4c2f      	ldr	r4, [pc, #188]	; (80045b4 <AddModuleToGroup+0x100>)
 80044f8:	009d      	lsls	r5, r3, #2
 80044fa:	18ed      	adds	r5, r5, r3
 80044fc:	006d      	lsls	r5, r5, #1
 80044fe:	0023      	movs	r3, r4
 8004500:	3b0a      	subs	r3, #10
 8004502:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004504:	0021      	movs	r1, r4
 8004506:	0030      	movs	r0, r6
 8004508:	f7fb fdfc 	bl	8000104 <strcmp>
 800450c:	2800      	cmp	r0, #0
 800450e:	d046      	beq.n	800459e <AddModuleToGroup+0xea>
 8004510:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 8004512:	42ac      	cmp	r4, r5
 8004514:	d1f6      	bne.n	8004504 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004516:	4c28      	ldr	r4, [pc, #160]	; (80045b8 <AddModuleToGroup+0x104>)
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <AddModuleToGroup+0x108>)
 800451a:	601c      	str	r4, [r3, #0]
 800451c:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004522:	0028      	movs	r0, r5
 8004524:	f7fb fdf8 	bl	8000118 <strlen>
 8004528:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800452a:	0029      	movs	r1, r5
 800452c:	0030      	movs	r0, r6
 800452e:	f010 f911 	bl	8014754 <strncmp>
 8004532:	2800      	cmp	r0, #0
 8004534:	d035      	beq.n	80045a2 <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004536:	6864      	ldr	r4, [r4, #4]
 8004538:	4643      	mov	r3, r8
 800453a:	601c      	str	r4, [r3, #0]
 800453c:	2c00      	cmp	r4, #0
 800453e:	d1ee      	bne.n	800451e <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <AddModuleToGroup+0xf4>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01e      	beq.n	8004586 <AddModuleToGroup+0xd2>
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <AddModuleToGroup+0xf4>)
 800454a:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800454c:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	2a00      	cmp	r2, #0
 8004552:	d019      	beq.n	8004588 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004554:	3401      	adds	r4, #1
 8004556:	330a      	adds	r3, #10
 8004558:	2c0a      	cmp	r4, #10
 800455a:	d1f8      	bne.n	800454e <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 800455c:	3f01      	subs	r7, #1
 800455e:	4918      	ldr	r1, [pc, #96]	; (80045c0 <AddModuleToGroup+0x10c>)
 8004560:	007f      	lsls	r7, r7, #1
 8004562:	2201      	movs	r2, #1
 8004564:	40a2      	lsls	r2, r4
 8004566:	5a7b      	ldrh	r3, [r7, r1]
 8004568:	4313      	orrs	r3, r2
 800456a:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 800456c:	2000      	movs	r0, #0
 800456e:	e007      	b.n	8004580 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 8004570:	3f01      	subs	r7, #1
 8004572:	4913      	ldr	r1, [pc, #76]	; (80045c0 <AddModuleToGroup+0x10c>)
 8004574:	007f      	lsls	r7, r7, #1
 8004576:	2201      	movs	r2, #1
 8004578:	40a2      	lsls	r2, r4
 800457a:	5a7b      	ldrh	r3, [r7, r1]
 800457c:	4313      	orrs	r3, r2
 800457e:	527b      	strh	r3, [r7, r1]
}
 8004580:	bc04      	pop	{r2}
 8004582:	4690      	mov	r8, r2
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004586:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004588:	00a0      	lsls	r0, r4, #2
 800458a:	1900      	adds	r0, r0, r4
 800458c:	0040      	lsls	r0, r0, #1
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <AddModuleToGroup+0xf4>)
 8004590:	1818      	adds	r0, r3, r0
 8004592:	0031      	movs	r1, r6
 8004594:	f010 f8d6 	bl	8014744 <strcpy>
			break;
 8004598:	e7e0      	b.n	800455c <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800459a:	2006      	movs	r0, #6
 800459c:	e7f0      	b.n	8004580 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800459e:	2007      	movs	r0, #7
 80045a0:	e7ee      	b.n	8004580 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80045a2:	2008      	movs	r0, #8
 80045a4:	e7ec      	b.n	8004580 <AddModuleToGroup+0xcc>
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	200005f8 	.word	0x200005f8
 80045ac:	08017628 	.word	0x08017628
 80045b0:	20000030 	.word	0x20000030
 80045b4:	2000070a 	.word	0x2000070a
 80045b8:	200000b4 	.word	0x200000b4
 80045bc:	20000880 	.word	0x20000880
 80045c0:	2000065c 	.word	0x2000065c

080045c4 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80045c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c6:	46c6      	mov	lr, r8
 80045c8:	b500      	push	{lr}
 80045ca:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80045cc:	4b22      	ldr	r3, [pc, #136]	; (8004658 <ReadPortsDir+0x94>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03a      	beq.n	800464a <ReadPortsDir+0x86>
 80045d4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	9301      	str	r3, [sp, #4]
		if(i != myID){
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <ReadPortsDir+0x98>)
 80045dc:	4698      	mov	r8, r3
 80045de:	e021      	b.n	8004624 <ReadPortsDir+0x60>
 80045e0:	2700      	movs	r7, #0
				result =BOS_ERR_NoResponse;
			}
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80045e2:	2501      	movs	r5, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80045e4:	2680      	movs	r6, #128	; 0x80
 80045e6:	0236      	lsls	r6, r6, #8
 80045e8:	e004      	b.n	80045f4 <ReadPortsDir+0x30>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80045ea:	3501      	adds	r5, #1
 80045ec:	b2ed      	uxtb	r5, r5
 80045ee:	3701      	adds	r7, #1
 80045f0:	2d04      	cmp	r5, #4
 80045f2:	d011      	beq.n	8004618 <ReadPortsDir+0x54>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80045f4:	0028      	movs	r0, r5
 80045f6:	f009 feab 	bl	800e350 <GetUart>
 80045fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045fc:	42b3      	cmp	r3, r6
 80045fe:	d1f4      	bne.n	80045ea <ReadPortsDir+0x26>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <ReadPortsDir+0x98>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4a15      	ldr	r2, [pc, #84]	; (8004660 <ReadPortsDir+0x9c>)
 800460a:	5a9a      	ldrh	r2, [r3, r2]
 800460c:	0031      	movs	r1, r6
 800460e:	4139      	asrs	r1, r7
 8004610:	430a      	orrs	r2, r1
 8004612:	4913      	ldr	r1, [pc, #76]	; (8004660 <ReadPortsDir+0x9c>)
 8004614:	525a      	strh	r2, [r3, r1]
 8004616:	e7e8      	b.n	80045ea <ReadPortsDir+0x26>
	for(uint8_t i =1; i <= N; i++){
 8004618:	3401      	adds	r4, #1
 800461a:	b2e4      	uxtb	r4, r4
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <ReadPortsDir+0x94>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	42a3      	cmp	r3, r4
 8004622:	d314      	bcc.n	800464e <ReadPortsDir+0x8a>
		if(i != myID){
 8004624:	4643      	mov	r3, r8
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	42a3      	cmp	r3, r4
 800462a:	d0d9      	beq.n	80045e0 <ReadPortsDir+0x1c>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 800462c:	2200      	movs	r2, #0
 800462e:	2113      	movs	r1, #19
 8004630:	0020      	movs	r0, r4
 8004632:	f005 fab9 	bl	8009ba8 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004636:	2032      	movs	r0, #50	; 0x32
 8004638:	f009 fd5e 	bl	800e0f8 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <ReadPortsDir+0xa0>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0e9      	beq.n	8004618 <ReadPortsDir+0x54>
				result =BOS_ERR_NoResponse;
 8004644:	2302      	movs	r3, #2
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	e7e6      	b.n	8004618 <ReadPortsDir+0x54>
	BOS_Status result =BOS_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 800464e:	9801      	ldr	r0, [sp, #4]
 8004650:	b002      	add	sp, #8
 8004652:	bc04      	pop	{r2}
 8004654:	4690      	mov	r8, r2
 8004656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004658:	20000030 	.word	0x20000030
 800465c:	2000080e 	.word	0x2000080e
 8004660:	2000670c 	.word	0x2000670c
 8004664:	20000890 	.word	0x20000890

08004668 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466a:	46c6      	mov	lr, r8
 800466c:	b500      	push	{lr}
 800466e:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004670:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <UpdateMyPortsDir+0x54>)
 8004674:	4698      	mov	r8, r3
 8004676:	4f12      	ldr	r7, [pc, #72]	; (80046c0 <UpdateMyPortsDir+0x58>)
 8004678:	2680      	movs	r6, #128	; 0x80
 800467a:	0236      	lsls	r6, r6, #8
 800467c:	e00a      	b.n	8004694 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 800467e:	0020      	movs	r0, r4
 8004680:	f009 fe66 	bl	800e350 <GetUart>
 8004684:	2101      	movs	r1, #1
 8004686:	f009 feef 	bl	800e468 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800468a:	3401      	adds	r4, #1
 800468c:	b2e4      	uxtb	r4, r4
 800468e:	3501      	adds	r5, #1
 8004690:	2c04      	cmp	r4, #4
 8004692:	d00f      	beq.n	80046b4 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004694:	783b      	ldrb	r3, [r7, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4642      	mov	r2, r8
 800469c:	5a9b      	ldrh	r3, [r3, r2]
 800469e:	0032      	movs	r2, r6
 80046a0:	412a      	asrs	r2, r5
 80046a2:	421a      	tst	r2, r3
 80046a4:	d1eb      	bne.n	800467e <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 80046a6:	0020      	movs	r0, r4
 80046a8:	f009 fe52 	bl	800e350 <GetUart>
 80046ac:	2100      	movs	r1, #0
 80046ae:	f009 fedb 	bl	800e468 <SwapUartPins>
 80046b2:	e7ea      	b.n	800468a <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 80046b4:	2000      	movs	r0, #0
 80046b6:	bc04      	pop	{r2}
 80046b8:	4690      	mov	r8, r2
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046bc:	2000670c 	.word	0x2000670c
 80046c0:	2000080e 	.word	0x2000080e

080046c4 <BOS_Init>:
void BOS_Init(void){
 80046c4:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80046c6:	f009 fbcf 	bl	800de68 <RTC_Init>
	GetTimeDate();
 80046ca:	f009 fc6d 	bl	800dfa8 <GetTimeDate>
	EE_Init();
 80046ce:	f003 fa47 	bl	8007b60 <EE_Init>
	GPIO_Init();
 80046d2:	f009 f96b 	bl	800d9ac <GPIO_Init>
	DMA_Init();
 80046d6:	f008 f925 	bl	800c924 <DMA_Init>
	TIM_USEC_Init();
 80046da:	f009 fc99 	bl	800e010 <TIM_USEC_Init>
	CRC_Init();
 80046de:	f009 f911 	bl	800d904 <CRC_Init>
	TIM_MSEC_Init();
 80046e2:	f009 fcc7 	bl	800e074 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80046e6:	f009 f9d3 	bl	800da90 <IsFactoryReset>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d14c      	bne.n	8004788 <BOS_Init+0xc4>
	if(IsLowerCLIbaud()){
 80046ee:	f7ff f879 	bl	80037e4 <IsLowerCLIbaud>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d053      	beq.n	800479e <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80046f6:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <BOS_Init+0x10c>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80046fc:	2032      	movs	r0, #50	; 0x32
 80046fe:	f009 fcfb 	bl	800e0f8 <StartMilliDelay>
		Module_Peripheral_Init();
 8004702:	f007 fb4d 	bl	800bda0 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004706:	4c33      	ldr	r4, [pc, #204]	; (80047d4 <BOS_Init+0x110>)
 8004708:	21e1      	movs	r1, #225	; 0xe1
 800470a:	0249      	lsls	r1, r1, #9
 800470c:	60a1      	str	r1, [r4, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 800470e:	2001      	movs	r0, #1
 8004710:	f009 fea0 	bl	800e454 <UpdateBaudrate>
 8004714:	68a1      	ldr	r1, [r4, #8]
 8004716:	2002      	movs	r0, #2
 8004718:	f009 fe9c 	bl	800e454 <UpdateBaudrate>
 800471c:	68a1      	ldr	r1, [r4, #8]
 800471e:	2003      	movs	r0, #3
 8004720:	f009 fe98 	bl	800e454 <UpdateBaudrate>
	LoadEEvars();
 8004724:	f7fe ff14 	bl	8003550 <LoadEEvars>
	UpdateMyPortsDir();
 8004728:	f7ff ff9e 	bl	8004668 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800472c:	f008 fd4e 	bl	800d1cc <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <BOS_Init+0x114>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d038      	beq.n	80047aa <BOS_Init+0xe6>
		IND_ON();
 8004738:	2580      	movs	r5, #128	; 0x80
 800473a:	012d      	lsls	r5, r5, #4
 800473c:	2490      	movs	r4, #144	; 0x90
 800473e:	05e4      	lsls	r4, r4, #23
 8004740:	2201      	movs	r2, #1
 8004742:	0029      	movs	r1, r5
 8004744:	0020      	movs	r0, r4
 8004746:	f00d fc1d 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800474a:	20fa      	movs	r0, #250	; 0xfa
 800474c:	0040      	lsls	r0, r0, #1
 800474e:	f009 fcd3 	bl	800e0f8 <StartMilliDelay>
		IND_OFF();
 8004752:	2200      	movs	r2, #0
 8004754:	0029      	movs	r1, r5
 8004756:	0020      	movs	r0, r4
 8004758:	f00d fc14 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800475c:	2064      	movs	r0, #100	; 0x64
 800475e:	f009 fccb 	bl	800e0f8 <StartMilliDelay>
		IND_ON();
 8004762:	2201      	movs	r2, #1
 8004764:	0029      	movs	r1, r5
 8004766:	0020      	movs	r0, r4
 8004768:	f00d fc0c 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800476c:	2064      	movs	r0, #100	; 0x64
 800476e:	f009 fcc3 	bl	800e0f8 <StartMilliDelay>
		IND_OFF();
 8004772:	2200      	movs	r2, #0
 8004774:	0029      	movs	r1, r5
 8004776:	0020      	movs	r0, r4
 8004778:	f00d fc04 	bl	8011f84 <HAL_GPIO_WritePin>
	ResetUartORE();
 800477c:	f003 f832 	bl	80077e4 <ResetUartORE>
	BOS_initialized =1;
 8004780:	4b16      	ldr	r3, [pc, #88]	; (80047dc <BOS_Init+0x118>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
		EE_FormatForFactoryReset();
 8004788:	f7ff f81a 	bl	80037c0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800478c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <BOS_Init+0x11c>)
 8004792:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <BOS_Init+0x120>)
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	e7fd      	b.n	800479a <BOS_Init+0xd6>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800479e:	2032      	movs	r0, #50	; 0x32
 80047a0:	f009 fcaa 	bl	800e0f8 <StartMilliDelay>
		Module_Peripheral_Init();
 80047a4:	f007 fafc 	bl	800bda0 <Module_Peripheral_Init>
 80047a8:	e7bc      	b.n	8004724 <BOS_Init+0x60>
		IND_ON();
 80047aa:	2580      	movs	r5, #128	; 0x80
 80047ac:	012d      	lsls	r5, r5, #4
 80047ae:	2490      	movs	r4, #144	; 0x90
 80047b0:	05e4      	lsls	r4, r4, #23
 80047b2:	2201      	movs	r2, #1
 80047b4:	0029      	movs	r1, r5
 80047b6:	0020      	movs	r0, r4
 80047b8:	f00d fbe4 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80047bc:	20fa      	movs	r0, #250	; 0xfa
 80047be:	0040      	lsls	r0, r0, #1
 80047c0:	f009 fc9a 	bl	800e0f8 <StartMilliDelay>
 80047c4:	2200      	movs	r2, #0
 80047c6:	0029      	movs	r1, r5
 80047c8:	0020      	movs	r0, r4
 80047ca:	f00d fbdb 	bl	8011f84 <HAL_GPIO_WritePin>
 80047ce:	e7d5      	b.n	800477c <BOS_Init+0xb8>
 80047d0:	200002b7 	.word	0x200002b7
 80047d4:	2000627c 	.word	0x2000627c
 80047d8:	2000080e 	.word	0x2000080e
 80047dc:	200002b6 	.word	0x200002b6
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	05fa0004 	.word	0x05fa0004

080047e8 <Module_Init>:
void Module_Init(void){
 80047e8:	b510      	push	{r4, lr}
	HAL_Init();
 80047ea:	f00b feff 	bl	80105ec <HAL_Init>
	SystemClock_Config();
 80047ee:	f007 f961 	bl	800bab4 <SystemClock_Config>
	BOS_Init();
 80047f2:	f7ff ff67 	bl	80046c4 <BOS_Init>
	MX_FREERTOS_Init();
 80047f6:	f003 fb7d 	bl	8007ef4 <MX_FREERTOS_Init>
	osKernelStart();
 80047fa:	f009 fee5 	bl	800e5c8 <osKernelStart>
}
 80047fe:	bd10      	pop	{r4, pc}

08004800 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004800:	b510      	push	{r4, lr}
 8004802:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004804:	201e      	movs	r0, #30
 8004806:	f00f f995 	bl	8013b34 <malloc>
 800480a:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 800480c:	221e      	movs	r2, #30
 800480e:	2100      	movs	r1, #0
 8004810:	f00f f9ce 	bl	8013bb0 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004814:	4908      	ldr	r1, [pc, #32]	; (8004838 <GetDateString+0x38>)
 8004816:	7d8b      	ldrb	r3, [r1, #22]
 8004818:	7d0a      	ldrb	r2, [r1, #20]
 800481a:	3a01      	subs	r2, #1
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	4807      	ldr	r0, [pc, #28]	; (800483c <GetDateString+0x3c>)
 8004820:	5812      	ldr	r2, [r2, r0]
 8004822:	8b08      	ldrh	r0, [r1, #24]
 8004824:	9001      	str	r0, [sp, #4]
 8004826:	7d49      	ldrb	r1, [r1, #21]
 8004828:	9100      	str	r1, [sp, #0]
 800482a:	4905      	ldr	r1, [pc, #20]	; (8004840 <GetDateString+0x40>)
 800482c:	0020      	movs	r0, r4
 800482e:	f00f ff4d 	bl	80146cc <siprintf>
	return buffer;
}
 8004832:	0020      	movs	r0, r4
 8004834:	b002      	add	sp, #8
 8004836:	bd10      	pop	{r4, pc}
 8004838:	2000627c 	.word	0x2000627c
 800483c:	08017b9c 	.word	0x08017b9c
 8004840:	08017898 	.word	0x08017898

08004844 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004844:	b500      	push	{lr}
 8004846:	b085      	sub	sp, #20
 8004848:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <Bridge+0x24>)
 800484c:	7819      	ldrb	r1, [r3, #0]
 800484e:	2301      	movs	r3, #1
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	3b02      	subs	r3, #2
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	3303      	adds	r3, #3
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	000b      	movs	r3, r1
 800485e:	f005 f9c9 	bl	8009bf4 <StartScastDMAStream>
}
 8004862:	b005      	add	sp, #20
 8004864:	bd00      	pop	{pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	2000080e 	.word	0x2000080e

0800486c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800486c:	b530      	push	{r4, r5, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	0004      	movs	r4, r0
 8004872:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004874:	2300      	movs	r3, #0
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	9303      	str	r3, [sp, #12]
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	2100      	movs	r1, #0
 8004884:	2000      	movs	r0, #0
 8004886:	f7fe fee1 	bl	800364c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800488a:	1e62      	subs	r2, r4, #1
 800488c:	00d3      	lsls	r3, r2, #3
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <Unbridge+0x78>)
 8004894:	589b      	ldr	r3, [r3, r2]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d015      	beq.n	80048c6 <Unbridge+0x5a>
 800489a:	1e6a      	subs	r2, r5, #1
 800489c:	00d3      	lsls	r3, r2, #3
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <Unbridge+0x78>)
 80048a4:	589b      	ldr	r3, [r3, r2]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 80048aa:	0020      	movs	r0, r4
 80048ac:	f002 ff0e 	bl	80076cc <SwitchStreamDMAToMsg>
		return BOS_OK;
 80048b0:	2000      	movs	r0, #0
 80048b2:	e006      	b.n	80048c2 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 80048b4:	0020      	movs	r0, r4
 80048b6:	f002 ff09 	bl	80076cc <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80048ba:	0028      	movs	r0, r5
 80048bc:	f002 ff06 	bl	80076cc <SwitchStreamDMAToMsg>
		return BOS_OK;
 80048c0:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80048c2:	b007      	add	sp, #28
 80048c4:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80048c6:	1e6a      	subs	r2, r5, #1
 80048c8:	00d3      	lsls	r3, r2, #3
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4a05      	ldr	r2, [pc, #20]	; (80048e4 <Unbridge+0x78>)
 80048d0:	589b      	ldr	r3, [r3, r2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80048d6:	0028      	movs	r0, r5
 80048d8:	f002 fef8 	bl	80076cc <SwitchStreamDMAToMsg>
		return BOS_OK;
 80048dc:	2000      	movs	r0, #0
 80048de:	e7f0      	b.n	80048c2 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80048e0:	2068      	movs	r0, #104	; 0x68
 80048e2:	e7ee      	b.n	80048c2 <Unbridge+0x56>
 80048e4:	20001270 	.word	0x20001270

080048e8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80048ec:	7804      	ldrb	r4, [r0, #0]
 80048ee:	2c00      	cmp	r4, #0
 80048f0:	d010      	beq.n	8004914 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80048f2:	2603      	movs	r6, #3
 80048f4:	e004      	b.n	8004900 <StringToLowerCase+0x18>
 80048f6:	702a      	strb	r2, [r5, #0]
 80048f8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80048fa:	782c      	ldrb	r4, [r5, #0]
 80048fc:	2c00      	cmp	r4, #0
 80048fe:	d009      	beq.n	8004914 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004900:	f00f f90a 	bl	8013b18 <__locale_ctype_ptr>
 8004904:	1900      	adds	r0, r0, r4
 8004906:	7843      	ldrb	r3, [r0, #1]
 8004908:	4033      	ands	r3, r6
 800490a:	0022      	movs	r2, r4
 800490c:	2b01      	cmp	r3, #1
 800490e:	d1f2      	bne.n	80048f6 <StringToLowerCase+0xe>
 8004910:	3220      	adds	r2, #32
 8004912:	e7f0      	b.n	80048f6 <StringToLowerCase+0xe>
	}
}
 8004914:	bd70      	pop	{r4, r5, r6, pc}
	...

08004918 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491a:	46c6      	mov	lr, r8
 800491c:	b500      	push	{lr}
 800491e:	b088      	sub	sp, #32
 8004920:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004922:	4bdc      	ldr	r3, [pc, #880]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004924:	781c      	ldrb	r4, [r3, #0]
 8004926:	2c05      	cmp	r4, #5
 8004928:	d100      	bne.n	800492c <ParseSnippetCondition+0x14>
 800492a:	e210      	b.n	8004d4e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800492c:	49da      	ldr	r1, [pc, #872]	; (8004c98 <ParseSnippetCondition+0x380>)
 800492e:	00a3      	lsls	r3, r4, #2
 8004930:	191a      	adds	r2, r3, r4
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	2000      	movs	r0, #0
 8004936:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004938:	191a      	adds	r2, r3, r4
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	188a      	adds	r2, r1, r2
 800493e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004940:	1918      	adds	r0, r3, r4
 8004942:	0080      	lsls	r0, r0, #2
 8004944:	3002      	adds	r0, #2
 8004946:	1840      	adds	r0, r0, r1
 8004948:	2204      	movs	r2, #4
 800494a:	2100      	movs	r1, #0
 800494c:	f00f f930 	bl	8013bb0 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004950:	782b      	ldrb	r3, [r5, #0]
 8004952:	2b62      	cmp	r3, #98	; 0x62
 8004954:	d102      	bne.n	800495c <ParseSnippetCondition+0x44>
 8004956:	78ab      	ldrb	r3, [r5, #2]
 8004958:	2b2e      	cmp	r3, #46	; 0x2e
 800495a:	d032      	beq.n	80049c2 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800495c:	4ecf      	ldr	r6, [pc, #828]	; (8004c9c <ParseSnippetCondition+0x384>)
 800495e:	0029      	movs	r1, r5
 8004960:	0030      	movs	r0, r6
 8004962:	f00f feef 	bl	8014744 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004966:	4cce      	ldr	r4, [pc, #824]	; (8004ca0 <ParseSnippetCondition+0x388>)
 8004968:	0021      	movs	r1, r4
 800496a:	0030      	movs	r0, r6
 800496c:	f010 fd6a 	bl	8015444 <strtok>
 8004970:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004972:	0021      	movs	r1, r4
 8004974:	2000      	movs	r0, #0
 8004976:	f010 fd65 	bl	8015444 <strtok>
 800497a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800497c:	0021      	movs	r1, r4
 800497e:	2000      	movs	r0, #0
 8004980:	f010 fd60 	bl	8015444 <strtok>
 8004984:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004986:	2d00      	cmp	r5, #0
 8004988:	d100      	bne.n	800498c <ParseSnippetCondition+0x74>
 800498a:	e1e5      	b.n	8004d58 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800498c:	0028      	movs	r0, r5
 800498e:	f7fe ff8d 	bl	80038ac <IsModuleParameter>
 8004992:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004994:	d100      	bne.n	8004998 <ParseSnippetCondition+0x80>
 8004996:	e18f      	b.n	8004cb8 <ParseSnippetCondition+0x3a0>
 8004998:	2e00      	cmp	r6, #0
 800499a:	d000      	beq.n	800499e <ParseSnippetCondition+0x86>
 800499c:	e18e      	b.n	8004cbc <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 800499e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	d000      	beq.n	80049a6 <ParseSnippetCondition+0x8e>
 80049a4:	e1d4      	b.n	8004d50 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 80049a6:	4cbb      	ldr	r4, [pc, #748]	; (8004c94 <ParseSnippetCondition+0x37c>)
 80049a8:	7823      	ldrb	r3, [r4, #0]
 80049aa:	49bb      	ldr	r1, [pc, #748]	; (8004c98 <ParseSnippetCondition+0x380>)
 80049ac:	009a      	lsls	r2, r3, #2
 80049ae:	18d0      	adds	r0, r2, r3
 80049b0:	0080      	lsls	r0, r0, #2
 80049b2:	3602      	adds	r6, #2
 80049b4:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80049b6:	180a      	adds	r2, r1, r0
 80049b8:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80049ba:	3301      	adds	r3, #1
 80049bc:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 80049be:	2000      	movs	r0, #0
 80049c0:	e1c6      	b.n	8004d50 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049c2:	786e      	ldrb	r6, [r5, #1]
 80049c4:	3e30      	subs	r6, #48	; 0x30
 80049c6:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 80049c8:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049ca:	2e03      	cmp	r6, #3
 80049cc:	d900      	bls.n	80049d0 <ParseSnippetCondition+0xb8>
 80049ce:	e1bf      	b.n	8004d50 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049d0:	4ab1      	ldr	r2, [pc, #708]	; (8004c98 <ParseSnippetCondition+0x380>)
 80049d2:	00a3      	lsls	r3, r4, #2
 80049d4:	1919      	adds	r1, r3, r4
 80049d6:	0089      	lsls	r1, r1, #2
 80049d8:	3001      	adds	r0, #1
 80049da:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80049dc:	1853      	adds	r3, r2, r1
 80049de:	2200      	movs	r2, #0
 80049e0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049e2:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e4:	1cef      	adds	r7, r5, #3
 80049e6:	3207      	adds	r2, #7
 80049e8:	49ae      	ldr	r1, [pc, #696]	; (8004ca4 <ParseSnippetCondition+0x38c>)
 80049ea:	0038      	movs	r0, r7
 80049ec:	f00f feb2 	bl	8014754 <strncmp>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d121      	bne.n	8004a38 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80049f4:	00a3      	lsls	r3, r4, #2
 80049f6:	191c      	adds	r4, r3, r4
 80049f8:	00a4      	lsls	r4, r4, #2
 80049fa:	4ba7      	ldr	r3, [pc, #668]	; (8004c98 <ParseSnippetCondition+0x380>)
 80049fc:	191c      	adds	r4, r3, r4
 80049fe:	2305      	movs	r3, #5
 8004a00:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a02:	00f2      	lsls	r2, r6, #3
 8004a04:	1992      	adds	r2, r2, r6
 8004a06:	4ba8      	ldr	r3, [pc, #672]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004a08:	189b      	adds	r3, r3, r2
 8004a0a:	7a1b      	ldrb	r3, [r3, #8]
 8004a0c:	07db      	lsls	r3, r3, #31
 8004a0e:	d504      	bpl.n	8004a1a <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004a10:	4aa0      	ldr	r2, [pc, #640]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004a12:	7813      	ldrb	r3, [r2, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	7013      	strb	r3, [r2, #0]
 8004a18:	e19a      	b.n	8004d50 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	9302      	str	r3, [sp, #8]
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	0030      	movs	r0, r6
 8004a30:	f003 ff0a 	bl	8008848 <SetButtonEvents>
				status =BOS_OK;
 8004a34:	2000      	movs	r0, #0
 8004a36:	e7eb      	b.n	8004a10 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004a38:	220e      	movs	r2, #14
 8004a3a:	499c      	ldr	r1, [pc, #624]	; (8004cac <ParseSnippetCondition+0x394>)
 8004a3c:	0038      	movs	r0, r7
 8004a3e:	f00f fe89 	bl	8014754 <strncmp>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d11c      	bne.n	8004a80 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004a46:	00a3      	lsls	r3, r4, #2
 8004a48:	191c      	adds	r4, r3, r4
 8004a4a:	00a4      	lsls	r4, r4, #2
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004a4e:	191c      	adds	r4, r3, r4
 8004a50:	2306      	movs	r3, #6
 8004a52:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a54:	00f2      	lsls	r2, r6, #3
 8004a56:	1992      	adds	r2, r2, r6
 8004a58:	4b93      	ldr	r3, [pc, #588]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	7a1b      	ldrb	r3, [r3, #8]
 8004a5e:	079b      	lsls	r3, r3, #30
 8004a60:	d4d6      	bmi.n	8004a10 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a62:	2301      	movs	r3, #1
 8004a64:	9305      	str	r3, [sp, #20]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9302      	str	r3, [sp, #8]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	2100      	movs	r1, #0
 8004a76:	0030      	movs	r0, r6
 8004a78:	f003 fee6 	bl	8008848 <SetButtonEvents>
				status =BOS_OK;
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e7c7      	b.n	8004a10 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004a80:	220c      	movs	r2, #12
 8004a82:	498b      	ldr	r1, [pc, #556]	; (8004cb0 <ParseSnippetCondition+0x398>)
 8004a84:	0038      	movs	r0, r7
 8004a86:	f00f fe65 	bl	8014754 <strncmp>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d17a      	bne.n	8004b84 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004a8e:	00f2      	lsls	r2, r6, #3
 8004a90:	1992      	adds	r2, r2, r6
 8004a92:	4b85      	ldr	r3, [pc, #532]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	789b      	ldrb	r3, [r3, #2]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d030      	beq.n	8004afe <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004a9c:	00f2      	lsls	r2, r6, #3
 8004a9e:	1992      	adds	r2, r2, r6
 8004aa0:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d04a      	beq.n	8004b40 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 8004aaa:	00f2      	lsls	r2, r6, #3
 8004aac:	1992      	adds	r2, r2, r6
 8004aae:	4b7e      	ldr	r3, [pc, #504]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ab4:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1aa      	bne.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004aba:	4f77      	ldr	r7, [pc, #476]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004abc:	00a3      	lsls	r3, r4, #2
 8004abe:	191b      	adds	r3, r3, r4
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	220b      	movs	r2, #11
 8004ac6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ac8:	0028      	movs	r0, r5
 8004aca:	300f      	adds	r0, #15
 8004acc:	f00e ffef 	bl	8013aae <atoi>
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	0093      	lsls	r3, r2, #2
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	18ff      	adds	r7, r7, r3
 8004ade:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	9302      	str	r3, [sp, #8]
 8004aec:	9001      	str	r0, [sp, #4]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	0030      	movs	r0, r6
 8004af6:	f003 fea7 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004afa:	2000      	movs	r0, #0
 8004afc:	e788      	b.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004afe:	4f66      	ldr	r7, [pc, #408]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004b00:	00a3      	lsls	r3, r4, #2
 8004b02:	191b      	adds	r3, r3, r4
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2209      	movs	r2, #9
 8004b0a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	300f      	adds	r0, #15
 8004b10:	f00e ffcd 	bl	8013aae <atoi>
 8004b14:	b2c3      	uxtb	r3, r0
 8004b16:	4a5f      	ldr	r2, [pc, #380]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004b18:	7811      	ldrb	r1, [r2, #0]
 8004b1a:	008a      	lsls	r2, r1, #2
 8004b1c:	1852      	adds	r2, r2, r1
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	18bf      	adds	r7, r7, r2
 8004b22:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b24:	2201      	movs	r2, #1
 8004b26:	9205      	str	r2, [sp, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	9204      	str	r2, [sp, #16]
 8004b2c:	9203      	str	r2, [sp, #12]
 8004b2e:	9202      	str	r2, [sp, #8]
 8004b30:	9201      	str	r2, [sp, #4]
 8004b32:	9200      	str	r2, [sp, #0]
 8004b34:	2100      	movs	r1, #0
 8004b36:	0030      	movs	r0, r6
 8004b38:	f003 fe86 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e767      	b.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004b40:	4f55      	ldr	r7, [pc, #340]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004b42:	00a3      	lsls	r3, r4, #2
 8004b44:	191b      	adds	r3, r3, r4
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b4e:	0028      	movs	r0, r5
 8004b50:	300f      	adds	r0, #15
 8004b52:	f00e ffac 	bl	8013aae <atoi>
 8004b56:	b2c0      	uxtb	r0, r0
 8004b58:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	0093      	lsls	r3, r2, #2
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	18ff      	adds	r7, r7, r3
 8004b64:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b66:	2301      	movs	r3, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	9302      	str	r3, [sp, #8]
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	9000      	str	r0, [sp, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	2100      	movs	r1, #0
 8004b7a:	0030      	movs	r0, r6
 8004b7c:	f003 fe64 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004b80:	2000      	movs	r0, #0
 8004b82:	e745      	b.n	8004a10 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b84:	220d      	movs	r2, #13
 8004b86:	494b      	ldr	r1, [pc, #300]	; (8004cb4 <ParseSnippetCondition+0x39c>)
 8004b88:	0038      	movs	r0, r7
 8004b8a:	f00f fde3 	bl	8014754 <strncmp>
 8004b8e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004b90:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d000      	beq.n	8004b98 <ParseSnippetCondition+0x280>
 8004b96:	e73b      	b.n	8004a10 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004b98:	00f2      	lsls	r2, r6, #3
 8004b9a:	1992      	adds	r2, r2, r6
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	795b      	ldrb	r3, [r3, #5]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d031      	beq.n	8004c0a <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004ba6:	00f2      	lsls	r2, r6, #3
 8004ba8:	1992      	adds	r2, r2, r6
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	799b      	ldrb	r3, [r3, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04c      	beq.n	8004c4e <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004bb4:	00f2      	lsls	r2, r6, #3
 8004bb6:	1992      	adds	r2, r2, r6
 8004bb8:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <ParseSnippetCondition+0x390>)
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004bbe:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d000      	beq.n	8004bc6 <ParseSnippetCondition+0x2ae>
 8004bc4:	e724      	b.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004bc6:	4f34      	ldr	r7, [pc, #208]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004bc8:	3314      	adds	r3, #20
 8004bca:	4698      	mov	r8, r3
 8004bcc:	435c      	muls	r4, r3
 8004bce:	193c      	adds	r4, r7, r4
 8004bd0:	3b06      	subs	r3, #6
 8004bd2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004bd4:	0028      	movs	r0, r5
 8004bd6:	3010      	adds	r0, #16
 8004bd8:	f00e ff69 	bl	8013aae <atoi>
 8004bdc:	b2c0      	uxtb	r0, r0
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	4642      	mov	r2, r8
 8004be4:	4353      	muls	r3, r2
 8004be6:	18ff      	adds	r7, r7, r3
 8004be8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004bea:	2301      	movs	r3, #1
 8004bec:	9305      	str	r3, [sp, #20]
 8004bee:	9004      	str	r0, [sp, #16]
 8004bf0:	2400      	movs	r4, #0
 8004bf2:	9403      	str	r4, [sp, #12]
 8004bf4:	9402      	str	r4, [sp, #8]
 8004bf6:	9401      	str	r4, [sp, #4]
 8004bf8:	9400      	str	r4, [sp, #0]
 8004bfa:	0023      	movs	r3, r4
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	0021      	movs	r1, r4
 8004c00:	0030      	movs	r0, r6
 8004c02:	f003 fe21 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004c06:	0020      	movs	r0, r4
 8004c08:	e702      	b.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c0a:	4f23      	ldr	r7, [pc, #140]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004c0c:	00a3      	lsls	r3, r4, #2
 8004c0e:	191b      	adds	r3, r3, r4
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	220c      	movs	r2, #12
 8004c16:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c18:	0028      	movs	r0, r5
 8004c1a:	3010      	adds	r0, #16
 8004c1c:	f00e ff47 	bl	8013aae <atoi>
 8004c20:	b2c0      	uxtb	r0, r0
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	0093      	lsls	r3, r2, #2
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	18ff      	adds	r7, r7, r3
 8004c2e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c30:	2301      	movs	r3, #1
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	2300      	movs	r3, #0
 8004c36:	9304      	str	r3, [sp, #16]
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	9002      	str	r0, [sp, #8]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	0030      	movs	r0, r6
 8004c46:	f003 fdff 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e6e0      	b.n	8004a10 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c4e:	4f12      	ldr	r7, [pc, #72]	; (8004c98 <ParseSnippetCondition+0x380>)
 8004c50:	00a3      	lsls	r3, r4, #2
 8004c52:	191b      	adds	r3, r3, r4
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	220d      	movs	r2, #13
 8004c5a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c5c:	0028      	movs	r0, r5
 8004c5e:	3010      	adds	r0, #16
 8004c60:	f00e ff25 	bl	8013aae <atoi>
 8004c64:	b2c0      	uxtb	r0, r0
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <ParseSnippetCondition+0x37c>)
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	0093      	lsls	r3, r2, #2
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	18ff      	adds	r7, r7, r3
 8004c72:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c74:	2301      	movs	r3, #1
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	9003      	str	r0, [sp, #12]
 8004c7e:	9302      	str	r3, [sp, #8]
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2100      	movs	r1, #0
 8004c88:	0030      	movs	r0, r6
 8004c8a:	f003 fddd 	bl	8008848 <SetButtonEvents>
					status =BOS_OK;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e6be      	b.n	8004a10 <ParseSnippetCondition+0xf8>
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	2000099f 	.word	0x2000099f
 8004c98:	20006298 	.word	0x20006298
 8004c9c:	20000904 	.word	0x20000904
 8004ca0:	080176f4 	.word	0x080176f4
 8004ca4:	08018d1c 	.word	0x08018d1c
 8004ca8:	20000e04 	.word	0x20000e04
 8004cac:	08017da0 	.word	0x08017da0
 8004cb0:	08017db0 	.word	0x08017db0
 8004cb4:	08017dc0 	.word	0x08017dc0
			else if(secondPart != NULL && thirdPart != NULL){
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	d04f      	beq.n	8004d5c <ParseSnippetCondition+0x444>
 8004cbc:	2c00      	cmp	r4, #0
 8004cbe:	d04f      	beq.n	8004d60 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004cc0:	0020      	movs	r0, r4
 8004cc2:	f7fe fdf3 	bl	80038ac <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d024      	beq.n	8004d14 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <ParseSnippetCondition+0x450>)
 8004ccc:	781c      	ldrb	r4, [r3, #0]
 8004cce:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <ParseSnippetCondition+0x454>)
 8004cd0:	00a3      	lsls	r3, r4, #2
 8004cd2:	1919      	adds	r1, r3, r4
 8004cd4:	0089      	lsls	r1, r1, #2
 8004cd6:	2704      	movs	r7, #4
 8004cd8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cda:	1919      	adds	r1, r3, r4
 8004cdc:	0089      	lsls	r1, r1, #2
 8004cde:	1851      	adds	r1, r2, r1
 8004ce0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004ce2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004ce4:	4d20      	ldr	r5, [pc, #128]	; (8004d68 <ParseSnippetCondition+0x450>)
 8004ce6:	782c      	ldrb	r4, [r5, #0]
 8004ce8:	0030      	movs	r0, r6
 8004cea:	f7fe fdeb 	bl	80038c4 <IsMathOperator>
 8004cee:	491f      	ldr	r1, [pc, #124]	; (8004d6c <ParseSnippetCondition+0x454>)
 8004cf0:	00a3      	lsls	r3, r4, #2
 8004cf2:	191b      	adds	r3, r3, r4
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	18cb      	adds	r3, r1, r3
 8004cf8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cfa:	782a      	ldrb	r2, [r5, #0]
 8004cfc:	0093      	lsls	r3, r2, #2
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	18cb      	adds	r3, r1, r3
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d02c      	beq.n	8004d64 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004d0a:	3201      	adds	r2, #1
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <ParseSnippetCondition+0x450>)
 8004d0e:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004d10:	2000      	movs	r0, #0
 8004d12:	e01d      	b.n	8004d50 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <ParseSnippetCondition+0x450>)
 8004d16:	4698      	mov	r8, r3
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	4f14      	ldr	r7, [pc, #80]	; (8004d6c <ParseSnippetCondition+0x454>)
 8004d1c:	0093      	lsls	r3, r2, #2
 8004d1e:	1899      	adds	r1, r3, r2
 8004d20:	0089      	lsls	r1, r1, #2
 8004d22:	2003      	movs	r0, #3
 8004d24:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004d2a:	0020      	movs	r0, r4
 8004d2c:	f00e feba 	bl	8013aa4 <atof>
 8004d30:	f7fd fff8 	bl	8002d24 <__aeabi_d2f>
 8004d34:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004d36:	4643      	mov	r3, r8
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	0098      	lsls	r0, r3, #2
 8004d3c:	18c0      	adds	r0, r0, r3
 8004d3e:	0080      	lsls	r0, r0, #2
 8004d40:	3006      	adds	r0, #6
 8004d42:	19c0      	adds	r0, r0, r7
 8004d44:	2204      	movs	r2, #4
 8004d46:	a907      	add	r1, sp, #28
 8004d48:	f00e ff29 	bl	8013b9e <memcpy>
 8004d4c:	e7ca      	b.n	8004ce4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004d4e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004d50:	b008      	add	sp, #32
 8004d52:	bc04      	pop	{r2}
 8004d54:	4690      	mov	r8, r2
 8004d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004d58:	2067      	movs	r0, #103	; 0x67
 8004d5a:	e7f9      	b.n	8004d50 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004d5c:	2067      	movs	r0, #103	; 0x67
 8004d5e:	e7f7      	b.n	8004d50 <ParseSnippetCondition+0x438>
 8004d60:	2067      	movs	r0, #103	; 0x67
 8004d62:	e7f5      	b.n	8004d50 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004d64:	2067      	movs	r0, #103	; 0x67
 8004d66:	e7f3      	b.n	8004d50 <ParseSnippetCondition+0x438>
 8004d68:	2000099f 	.word	0x2000099f
 8004d6c:	20006298 	.word	0x20006298

08004d70 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	000c      	movs	r4, r1
	switch(code){
 8004d74:	2802      	cmp	r0, #2
 8004d76:	d017      	beq.n	8004da8 <AddSnippet+0x38>
 8004d78:	2803      	cmp	r0, #3
 8004d7a:	d003      	beq.n	8004d84 <AddSnippet+0x14>
 8004d7c:	2801      	cmp	r0, #1
 8004d7e:	d00f      	beq.n	8004da0 <AddSnippet+0x30>
	return BOS_OK;
 8004d80:	2000      	movs	r0, #0
 8004d82:	e00c      	b.n	8004d9e <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d84:	4b35      	ldr	r3, [pc, #212]	; (8004e5c <AddSnippet+0xec>)
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	0093      	lsls	r3, r2, #2
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <AddSnippet+0xf0>)
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	2201      	movs	r2, #1
 8004d96:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004d98:	f006 fee4 	bl	800bb64 <SaveToRO>
	return BOS_OK;
 8004d9c:	2000      	movs	r0, #0
}
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004da0:	0008      	movs	r0, r1
 8004da2:	f7ff fdb9 	bl	8004918 <ParseSnippetCondition>
 8004da6:	e7fa      	b.n	8004d9e <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004da8:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <AddSnippet+0xec>)
 8004daa:	781d      	ldrb	r5, [r3, #0]
 8004dac:	3d01      	subs	r5, #1
 8004dae:	00ab      	lsls	r3, r5, #2
 8004db0:	195b      	adds	r3, r3, r5
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <AddSnippet+0xf0>)
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	68de      	ldr	r6, [r3, #12]
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	d03d      	beq.n	8004e3a <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004dbe:	0030      	movs	r0, r6
 8004dc0:	f7fb f9aa 	bl	8000118 <strlen>
 8004dc4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004dc6:	0020      	movs	r0, r4
 8004dc8:	f7fb f9a6 	bl	8000118 <strlen>
 8004dcc:	1839      	adds	r1, r7, r0
 8004dce:	3102      	adds	r1, #2
 8004dd0:	0030      	movs	r0, r6
 8004dd2:	f00f fc2d 	bl	8014630 <realloc>
 8004dd6:	4e22      	ldr	r6, [pc, #136]	; (8004e60 <AddSnippet+0xf0>)
 8004dd8:	00ab      	lsls	r3, r5, #2
 8004dda:	195d      	adds	r5, r3, r5
 8004ddc:	00ad      	lsls	r5, r5, #2
 8004dde:	1975      	adds	r5, r6, r5
 8004de0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004de2:	4d1e      	ldr	r5, [pc, #120]	; (8004e5c <AddSnippet+0xec>)
 8004de4:	782a      	ldrb	r2, [r5, #0]
 8004de6:	3a01      	subs	r2, #1
 8004de8:	0093      	lsls	r3, r2, #2
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	18f3      	adds	r3, r6, r3
 8004df0:	1c7a      	adds	r2, r7, #1
 8004df2:	68d8      	ldr	r0, [r3, #12]
 8004df4:	1880      	adds	r0, r0, r2
 8004df6:	0021      	movs	r1, r4
 8004df8:	f00f fca4 	bl	8014744 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004dfc:	782a      	ldrb	r2, [r5, #0]
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	0093      	lsls	r3, r2, #2
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	18f6      	adds	r6, r6, r3
 8004e08:	68f3      	ldr	r3, [r6, #12]
 8004e0a:	2213      	movs	r2, #19
 8004e0c:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <AddSnippet+0xec>)
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0093      	lsls	r3, r2, #2
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4911      	ldr	r1, [pc, #68]	; (8004e60 <AddSnippet+0xf0>)
 8004e1c:	18cb      	adds	r3, r1, r3
 8004e1e:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004e20:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1bb      	bne.n	8004d9e <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004e26:	0090      	lsls	r0, r2, #2
 8004e28:	1880      	adds	r0, r0, r2
 8004e2a:	0080      	lsls	r0, r0, #2
 8004e2c:	1840      	adds	r0, r0, r1
 8004e2e:	2214      	movs	r2, #20
 8004e30:	2100      	movs	r1, #0
 8004e32:	f00e febd 	bl	8013bb0 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004e36:	200e      	movs	r0, #14
 8004e38:	e7b1      	b.n	8004d9e <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004e3a:	0008      	movs	r0, r1
 8004e3c:	f7fb f96c 	bl	8000118 <strlen>
 8004e40:	3001      	adds	r0, #1
 8004e42:	f00e fe77 	bl	8013b34 <malloc>
 8004e46:	00ab      	lsls	r3, r5, #2
 8004e48:	195d      	adds	r5, r3, r5
 8004e4a:	00ad      	lsls	r5, r5, #2
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <AddSnippet+0xf0>)
 8004e4e:	195d      	adds	r5, r3, r5
 8004e50:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004e52:	0021      	movs	r1, r4
 8004e54:	f00f fc76 	bl	8014744 <strcpy>
 8004e58:	e7d9      	b.n	8004e0e <AddSnippet+0x9e>
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	2000099f 	.word	0x2000099f
 8004e60:	20006298 	.word	0x20006298

08004e64 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e66:	46de      	mov	lr, fp
 8004e68:	4657      	mov	r7, sl
 8004e6a:	464e      	mov	r6, r9
 8004e6c:	4645      	mov	r5, r8
 8004e6e:	b5e0      	push	{r5, r6, r7, lr}
 8004e70:	b08b      	sub	sp, #44	; 0x2c
 8004e72:	9004      	str	r0, [sp, #16]
 8004e74:	4688      	mov	r8, r1
 8004e76:	9203      	str	r2, [sp, #12]
 8004e78:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004e7a:	2209      	movs	r2, #9
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	a807      	add	r0, sp, #28
 8004e80:	f00e fe96 	bl	8013bb0 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004e84:	4fd5      	ldr	r7, [pc, #852]	; (80051dc <CLI_CommandParser+0x378>)
				if(id == myID){
 8004e86:	002e      	movs	r6, r5
 8004e88:	e034      	b.n	8004ef4 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e8a:	2252      	movs	r2, #82	; 0x52
 8004e8c:	49d4      	ldr	r1, [pc, #848]	; (80051e0 <CLI_CommandParser+0x37c>)
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f00e fe85 	bl	8013b9e <memcpy>
				recordSnippet =0;
 8004e94:	4bd1      	ldr	r3, [pc, #836]	; (80051dc <CLI_CommandParser+0x378>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	e044      	b.n	8004f26 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004e9c:	2206      	movs	r2, #6
 8004e9e:	49d1      	ldr	r1, [pc, #836]	; (80051e4 <CLI_CommandParser+0x380>)
 8004ea0:	9803      	ldr	r0, [sp, #12]
 8004ea2:	f00f fc57 	bl	8014754 <strncmp>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d053      	beq.n	8004f52 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004eaa:	2d02      	cmp	r5, #2
 8004eac:	d05e      	beq.n	8004f6c <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004eae:	212e      	movs	r1, #46	; 0x2e
 8004eb0:	9803      	ldr	r0, [sp, #12]
 8004eb2:	f00f fc39 	bl	8014728 <strchr>
 8004eb6:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004eb8:	d006      	beq.n	8004ec8 <CLI_CommandParser+0x64>
 8004eba:	3803      	subs	r0, #3
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	49ca      	ldr	r1, [pc, #808]	; (80051e8 <CLI_CommandParser+0x384>)
 8004ec0:	f00f fc48 	bl	8014754 <strncmp>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d160      	bne.n	8004f8a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ec8:	2299      	movs	r2, #153	; 0x99
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	0021      	movs	r1, r4
 8004ece:	9803      	ldr	r0, [sp, #12]
 8004ed0:	f009 fc16 	bl	800e700 <FreeRTOS_CLIProcessCommand>
 8004ed4:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ed6:	7823      	ldrb	r3, [r4, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d000      	beq.n	8004ede <CLI_CommandParser+0x7a>
 8004edc:	e16f      	b.n	80051be <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004ede:	0020      	movs	r0, r4
 8004ee0:	f7fb f91a 	bl	8000118 <strlen>
 8004ee4:	0002      	movs	r2, r0
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	0020      	movs	r0, r4
 8004eea:	f00e fe61 	bl	8013bb0 <memset>
	} while(xReturned != pdFALSE);
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	d100      	bne.n	8004ef4 <CLI_CommandParser+0x90>
 8004ef2:	e1ab      	b.n	800524c <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004ef4:	9803      	ldr	r0, [sp, #12]
 8004ef6:	f7ff fcf7 	bl	80048e8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004efa:	783d      	ldrb	r5, [r7, #0]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	d1cd      	bne.n	8004e9c <CLI_CommandParser+0x38>
 8004f00:	2203      	movs	r2, #3
 8004f02:	49ba      	ldr	r1, [pc, #744]	; (80051ec <CLI_CommandParser+0x388>)
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f00f fc25 	bl	8014754 <strncmp>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d1cf      	bne.n	8004eae <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	1cd9      	adds	r1, r3, #3
 8004f12:	3001      	adds	r0, #1
 8004f14:	f7ff ff2c 	bl	8004d70 <AddSnippet>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d1b6      	bne.n	8004e8a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004f1c:	4baf      	ldr	r3, [pc, #700]	; (80051dc <CLI_CommandParser+0x378>)
 8004f1e:	2202      	movs	r2, #2
 8004f20:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004f22:	230d      	movs	r3, #13
 8004f24:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f26:	7823      	ldrb	r3, [r4, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <CLI_CommandParser+0xca>
 8004f2c:	e186      	b.n	800523c <CLI_CommandParser+0x3d8>
 8004f2e:	4643      	mov	r3, r8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d100      	bne.n	8004f36 <CLI_CommandParser+0xd2>
 8004f34:	e19d      	b.n	8005272 <CLI_CommandParser+0x40e>
 8004f36:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7fb f8ed 	bl	8000118 <strlen>
 8004f3e:	b282      	uxth	r2, r0
 8004f40:	2301      	movs	r3, #1
 8004f42:	425b      	negs	r3, r3
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	3333      	adds	r3, #51	; 0x33
 8004f48:	0021      	movs	r1, r4
 8004f4a:	9804      	ldr	r0, [sp, #16]
 8004f4c:	f009 fa14 	bl	800e378 <writePxMutex>
 8004f50:	e7c5      	b.n	8004ede <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004f52:	4ba2      	ldr	r3, [pc, #648]	; (80051dc <CLI_CommandParser+0x378>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004f58:	49a5      	ldr	r1, [pc, #660]	; (80051f0 <CLI_CommandParser+0x38c>)
 8004f5a:	3003      	adds	r0, #3
 8004f5c:	f7ff ff08 	bl	8004d70 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004f60:	2241      	movs	r2, #65	; 0x41
 8004f62:	49a4      	ldr	r1, [pc, #656]	; (80051f4 <CLI_CommandParser+0x390>)
 8004f64:	0020      	movs	r0, r4
 8004f66:	f00e fe1a 	bl	8013b9e <memcpy>
			xReturned = pdFALSE;
 8004f6a:	e7dc      	b.n	8004f26 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004f6c:	9903      	ldr	r1, [sp, #12]
 8004f6e:	2002      	movs	r0, #2
 8004f70:	f7ff fefe 	bl	8004d70 <AddSnippet>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d102      	bne.n	8004f7e <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004f78:	230d      	movs	r3, #13
 8004f7a:	7023      	strb	r3, [r4, #0]
 8004f7c:	e7d3      	b.n	8004f26 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004f7e:	2252      	movs	r2, #82	; 0x52
 8004f80:	4997      	ldr	r1, [pc, #604]	; (80051e0 <CLI_CommandParser+0x37c>)
 8004f82:	0020      	movs	r0, r4
 8004f84:	f00e fe0b 	bl	8013b9e <memcpy>
 8004f88:	e7cd      	b.n	8004f26 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004f8a:	f00e fdc5 	bl	8013b18 <__locale_ctype_ptr>
 8004f8e:	786b      	ldrb	r3, [r5, #1]
 8004f90:	18c0      	adds	r0, r0, r3
 8004f92:	7843      	ldrb	r3, [r0, #1]
 8004f94:	075b      	lsls	r3, r3, #29
 8004f96:	d497      	bmi.n	8004ec8 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a6a      	subs	r2, r5, r1
 8004f9c:	a807      	add	r0, sp, #28
 8004f9e:	f00f fbea 	bl	8014776 <strncpy>
				id =GetID(idString);
 8004fa2:	a807      	add	r0, sp, #28
 8004fa4:	f7ff f9ba 	bl	800431c <GetID>
 8004fa8:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004faa:	4a93      	ldr	r2, [pc, #588]	; (80051f8 <CLI_CommandParser+0x394>)
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4693      	mov	fp, r2
 8004fb0:	4290      	cmp	r0, r2
 8004fb2:	d03d      	beq.n	8005030 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004fb4:	2864      	cmp	r0, #100	; 0x64
 8004fb6:	d043      	beq.n	8005040 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004fb8:	2866      	cmp	r0, #102	; 0x66
 8004fba:	d047      	beq.n	800504c <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004fbc:	28ff      	cmp	r0, #255	; 0xff
 8004fbe:	d04b      	beq.n	8005058 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004fc0:	466b      	mov	r3, sp
 8004fc2:	7d1b      	ldrb	r3, [r3, #20]
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	2bfe      	cmp	r3, #254	; 0xfe
 8004fc8:	d078      	beq.n	80050bc <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004fca:	3501      	adds	r5, #1
 8004fcc:	2206      	movs	r2, #6
 8004fce:	498b      	ldr	r1, [pc, #556]	; (80051fc <CLI_CommandParser+0x398>)
 8004fd0:	0028      	movs	r0, r5
 8004fd2:	f00f fbbf 	bl	8014754 <strncmp>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d000      	beq.n	8004fdc <CLI_CommandParser+0x178>
 8004fda:	e0b4      	b.n	8005146 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004fdc:	4b88      	ldr	r3, [pc, #544]	; (8005200 <CLI_CommandParser+0x39c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004fe2:	2119      	movs	r1, #25
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	f004 fddf 	bl	8009ba8 <SendMessageToModule>
						osDelay(100);
 8004fea:	2064      	movs	r0, #100	; 0x64
 8004fec:	f009 faf1 	bl	800e5d2 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004ff0:	4b84      	ldr	r3, [pc, #528]	; (8005204 <CLI_CommandParser+0x3a0>)
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	4b80      	ldr	r3, [pc, #512]	; (80051f8 <CLI_CommandParser+0x394>)
 8004ff6:	7818      	ldrb	r0, [r3, #0]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	f7fe fe6a 	bl	8003cd4 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005000:	4b7f      	ldr	r3, [pc, #508]	; (8005200 <CLI_CommandParser+0x39c>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b60      	cmp	r3, #96	; 0x60
 8005006:	d18e      	bne.n	8004f26 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8005008:	21fa      	movs	r1, #250	; 0xfa
 800500a:	0089      	lsls	r1, r1, #2
 800500c:	2001      	movs	r0, #1
 800500e:	f00a feb3 	bl	800fd78 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005012:	4b7d      	ldr	r3, [pc, #500]	; (8005208 <CLI_CommandParser+0x3a4>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d085      	beq.n	8004f26 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 800501a:	4a7c      	ldr	r2, [pc, #496]	; (800520c <CLI_CommandParser+0x3a8>)
 800501c:	8813      	ldrh	r3, [r2, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005022:	9b05      	ldr	r3, [sp, #20]
 8005024:	0022      	movs	r2, r4
 8005026:	497a      	ldr	r1, [pc, #488]	; (8005210 <CLI_CommandParser+0x3ac>)
 8005028:	0020      	movs	r0, r4
 800502a:	f00f fb4f 	bl	80146cc <siprintf>
 800502e:	e77a      	b.n	8004f26 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005030:	2299      	movs	r2, #153	; 0x99
 8005032:	1c68      	adds	r0, r5, #1
 8005034:	0092      	lsls	r2, r2, #2
 8005036:	0021      	movs	r1, r4
 8005038:	f009 fb62 	bl	800e700 <FreeRTOS_CLIProcessCommand>
 800503c:	0006      	movs	r6, r0
 800503e:	e74a      	b.n	8004ed6 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8005040:	2227      	movs	r2, #39	; 0x27
 8005042:	4974      	ldr	r1, [pc, #464]	; (8005214 <CLI_CommandParser+0x3b0>)
 8005044:	0020      	movs	r0, r4
 8005046:	f00e fdaa 	bl	8013b9e <memcpy>
 800504a:	e76c      	b.n	8004f26 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800504c:	2225      	movs	r2, #37	; 0x25
 800504e:	4972      	ldr	r1, [pc, #456]	; (8005218 <CLI_CommandParser+0x3b4>)
 8005050:	0020      	movs	r0, r4
 8005052:	f00e fda4 	bl	8013b9e <memcpy>
 8005056:	e766      	b.n	8004f26 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005058:	221a      	movs	r2, #26
 800505a:	2100      	movs	r1, #0
 800505c:	486f      	ldr	r0, [pc, #444]	; (800521c <CLI_CommandParser+0x3b8>)
 800505e:	f00e fda7 	bl	8013bb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005062:	3501      	adds	r5, #1
 8005064:	9803      	ldr	r0, [sp, #12]
 8005066:	f7fb f857 	bl	8000118 <strlen>
 800506a:	0006      	movs	r6, r0
 800506c:	ab07      	add	r3, sp, #28
 800506e:	0018      	movs	r0, r3
 8005070:	f7fb f852 	bl	8000118 <strlen>
 8005074:	1e72      	subs	r2, r6, #1
 8005076:	1a12      	subs	r2, r2, r0
 8005078:	0029      	movs	r1, r5
 800507a:	4869      	ldr	r0, [pc, #420]	; (8005220 <CLI_CommandParser+0x3bc>)
 800507c:	f00f fb7b 	bl	8014776 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005080:	9803      	ldr	r0, [sp, #12]
 8005082:	f7fb f849 	bl	8000118 <strlen>
 8005086:	0006      	movs	r6, r0
 8005088:	a807      	add	r0, sp, #28
 800508a:	f7fb f845 	bl	8000118 <strlen>
 800508e:	1a33      	subs	r3, r6, r0
 8005090:	b29b      	uxth	r3, r3
 8005092:	2217      	movs	r2, #23
 8005094:	21ff      	movs	r1, #255	; 0xff
 8005096:	4658      	mov	r0, fp
 8005098:	f004 fd5e 	bl	8009b58 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800509c:	2299      	movs	r2, #153	; 0x99
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	0021      	movs	r1, r4
 80050a2:	0028      	movs	r0, r5
 80050a4:	f009 fb2c 	bl	800e700 <FreeRTOS_CLIProcessCommand>
 80050a8:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80050aa:	0020      	movs	r0, r4
 80050ac:	f7fb f834 	bl	8000118 <strlen>
 80050b0:	1820      	adds	r0, r4, r0
 80050b2:	221d      	movs	r2, #29
 80050b4:	495b      	ldr	r1, [pc, #364]	; (8005224 <CLI_CommandParser+0x3c0>)
 80050b6:	f00e fd72 	bl	8013b9e <memcpy>
 80050ba:	e70c      	b.n	8004ed6 <CLI_CommandParser+0x72>
					group =id >> 8;
 80050bc:	9b05      	ldr	r3, [sp, #20]
 80050be:	121b      	asrs	r3, r3, #8
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	469a      	mov	sl, r3
 80050c4:	4b58      	ldr	r3, [pc, #352]	; (8005228 <CLI_CommandParser+0x3c4>)
 80050c6:	4699      	mov	r9, r3
 80050c8:	4652      	mov	r2, sl
 80050ca:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80050cc:	221a      	movs	r2, #26
 80050ce:	2100      	movs	r1, #0
 80050d0:	4852      	ldr	r0, [pc, #328]	; (800521c <CLI_CommandParser+0x3b8>)
 80050d2:	f00e fd6d 	bl	8013bb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050d6:	1c6b      	adds	r3, r5, #1
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	9803      	ldr	r0, [sp, #12]
 80050dc:	f7fb f81c 	bl	8000118 <strlen>
 80050e0:	0005      	movs	r5, r0
 80050e2:	aa07      	add	r2, sp, #28
 80050e4:	0010      	movs	r0, r2
 80050e6:	f7fb f817 	bl	8000118 <strlen>
 80050ea:	3d01      	subs	r5, #1
 80050ec:	1a2a      	subs	r2, r5, r0
 80050ee:	9905      	ldr	r1, [sp, #20]
 80050f0:	484b      	ldr	r0, [pc, #300]	; (8005220 <CLI_CommandParser+0x3bc>)
 80050f2:	f00f fb40 	bl	8014776 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80050f6:	9803      	ldr	r0, [sp, #12]
 80050f8:	f7fb f80e 	bl	8000118 <strlen>
 80050fc:	0005      	movs	r5, r0
 80050fe:	a807      	add	r0, sp, #28
 8005100:	f7fb f80a 	bl	8000118 <strlen>
 8005104:	1a2b      	subs	r3, r5, r0
 8005106:	b29b      	uxth	r3, r3
 8005108:	2217      	movs	r2, #23
 800510a:	4651      	mov	r1, sl
 800510c:	4658      	mov	r0, fp
 800510e:	f004 fd23 	bl	8009b58 <BroadcastMessage>
					if(InGroup(myID,group))
 8005112:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <CLI_CommandParser+0x394>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4a44      	ldr	r2, [pc, #272]	; (800522c <CLI_CommandParser+0x3c8>)
 800511c:	5a9b      	ldrh	r3, [r3, r2]
 800511e:	464a      	mov	r2, r9
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	4113      	asrs	r3, r2
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d406      	bmi.n	8005136 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005128:	ab07      	add	r3, sp, #28
 800512a:	0022      	movs	r2, r4
 800512c:	4940      	ldr	r1, [pc, #256]	; (8005230 <CLI_CommandParser+0x3cc>)
 800512e:	0020      	movs	r0, r4
 8005130:	f00f facc 	bl	80146cc <siprintf>
 8005134:	e6cf      	b.n	8004ed6 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005136:	2299      	movs	r2, #153	; 0x99
 8005138:	0092      	lsls	r2, r2, #2
 800513a:	0021      	movs	r1, r4
 800513c:	9805      	ldr	r0, [sp, #20]
 800513e:	f009 fadf 	bl	800e700 <FreeRTOS_CLIProcessCommand>
 8005142:	0006      	movs	r6, r0
 8005144:	e7f0      	b.n	8005128 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005146:	9803      	ldr	r0, [sp, #12]
 8005148:	f7fa ffe6 	bl	8000118 <strlen>
 800514c:	0006      	movs	r6, r0
 800514e:	ab07      	add	r3, sp, #28
 8005150:	0018      	movs	r0, r3
 8005152:	f7fa ffe1 	bl	8000118 <strlen>
 8005156:	1e72      	subs	r2, r6, #1
 8005158:	1a12      	subs	r2, r2, r0
 800515a:	0029      	movs	r1, r5
 800515c:	4830      	ldr	r0, [pc, #192]	; (8005220 <CLI_CommandParser+0x3bc>)
 800515e:	f00f fb0a 	bl	8014776 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005162:	9803      	ldr	r0, [sp, #12]
 8005164:	f7fa ffd8 	bl	8000118 <strlen>
 8005168:	0005      	movs	r5, r0
 800516a:	a807      	add	r0, sp, #28
 800516c:	f7fa ffd4 	bl	8000118 <strlen>
 8005170:	3d01      	subs	r5, #1
 8005172:	1a2a      	subs	r2, r5, r0
 8005174:	b292      	uxth	r2, r2
 8005176:	2117      	movs	r1, #23
 8005178:	4650      	mov	r0, sl
 800517a:	f004 fd15 	bl	8009ba8 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800517e:	9a05      	ldr	r2, [sp, #20]
 8005180:	492c      	ldr	r1, [pc, #176]	; (8005234 <CLI_CommandParser+0x3d0>)
 8005182:	0020      	movs	r0, r4
 8005184:	f00f faa2 	bl	80146cc <siprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005188:	7823      	ldrb	r3, [r4, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <CLI_CommandParser+0x330>
 800518e:	4643      	mov	r3, r8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005194:	0020      	movs	r0, r4
 8005196:	f7fa ffbf 	bl	8000118 <strlen>
 800519a:	0002      	movs	r2, r0
 800519c:	2100      	movs	r1, #0
 800519e:	0020      	movs	r0, r4
 80051a0:	f00e fd06 	bl	8013bb0 <memset>
 80051a4:	e72c      	b.n	8005000 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80051a6:	0020      	movs	r0, r4
 80051a8:	f7fa ffb6 	bl	8000118 <strlen>
 80051ac:	b282      	uxth	r2, r0
 80051ae:	2301      	movs	r3, #1
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	3331      	adds	r3, #49	; 0x31
 80051b4:	0021      	movs	r1, r4
 80051b6:	9804      	ldr	r0, [sp, #16]
 80051b8:	f009 f8de 	bl	800e378 <writePxMutex>
 80051bc:	e7ea      	b.n	8005194 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051be:	4643      	mov	r3, r8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d100      	bne.n	80051c6 <CLI_CommandParser+0x362>
 80051c4:	e68b      	b.n	8004ede <CLI_CommandParser+0x7a>
 80051c6:	e6b7      	b.n	8004f38 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80051c8:	2301      	movs	r3, #1
 80051ca:	425b      	negs	r3, r3
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	3333      	adds	r3, #51	; 0x33
 80051d0:	2238      	movs	r2, #56	; 0x38
 80051d2:	4919      	ldr	r1, [pc, #100]	; (8005238 <CLI_CommandParser+0x3d4>)
 80051d4:	9804      	ldr	r0, [sp, #16]
 80051d6:	f009 f8cf 	bl	800e378 <writePxMutex>
}
 80051da:	e043      	b.n	8005264 <CLI_CommandParser+0x400>
 80051dc:	200009cc 	.word	0x200009cc
 80051e0:	08017bd8 	.word	0x08017bd8
 80051e4:	08017c2c 	.word	0x08017c2c
 80051e8:	08017c78 	.word	0x08017c78
 80051ec:	08017bd4 	.word	0x08017bd4
 80051f0:	0801785c 	.word	0x0801785c
 80051f4:	08017c34 	.word	0x08017c34
 80051f8:	2000080e 	.word	0x2000080e
 80051fc:	08017d18 	.word	0x08017d18
 8005200:	200061fc 	.word	0x200061fc
 8005204:	200002b8 	.word	0x200002b8
 8005208:	20000890 	.word	0x20000890
 800520c:	2000105e 	.word	0x2000105e
 8005210:	08017d44 	.word	0x08017d44
 8005214:	08017c7c 	.word	0x08017c7c
 8005218:	08017ca4 	.word	0x08017ca4
 800521c:	20000530 	.word	0x20000530
 8005220:	200006d0 	.word	0x200006d0
 8005224:	08017ccc 	.word	0x08017ccc
 8005228:	2000099e 	.word	0x2000099e
 800522c:	2000065c 	.word	0x2000065c
 8005230:	08017cec 	.word	0x08017cec
 8005234:	08017d20 	.word	0x08017d20
 8005238:	08017d64 	.word	0x08017d64
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800523c:	0020      	movs	r0, r4
 800523e:	f7fa ff6b 	bl	8000118 <strlen>
 8005242:	0002      	movs	r2, r0
 8005244:	2100      	movs	r1, #0
 8005246:	0020      	movs	r0, r4
 8005248:	f00e fcb2 	bl	8013bb0 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 800524c:	2209      	movs	r2, #9
 800524e:	2100      	movs	r1, #0
 8005250:	a807      	add	r0, sp, #28
 8005252:	f00e fcad 	bl	8013bb0 <memset>
	if(!recordSnippet && enableOutput)
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <CLI_CommandParser+0x420>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <CLI_CommandParser+0x400>
 800525e:	4643      	mov	r3, r8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1b1      	bne.n	80051c8 <CLI_CommandParser+0x364>
}
 8005264:	b00b      	add	sp, #44	; 0x2c
 8005266:	bc3c      	pop	{r2, r3, r4, r5}
 8005268:	4690      	mov	r8, r2
 800526a:	4699      	mov	r9, r3
 800526c:	46a2      	mov	sl, r4
 800526e:	46ab      	mov	fp, r5
 8005270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005272:	0020      	movs	r0, r4
 8005274:	f7fa ff50 	bl	8000118 <strlen>
 8005278:	0002      	movs	r2, r0
 800527a:	2100      	movs	r1, #0
 800527c:	0020      	movs	r0, r4
 800527e:	f00e fc97 	bl	8013bb0 <memset>
 8005282:	e7e3      	b.n	800524c <CLI_CommandParser+0x3e8>
 8005284:	200009cc 	.word	0x200009cc

08005288 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	46ce      	mov	lr, r9
 800528c:	4647      	mov	r7, r8
 800528e:	b580      	push	{r7, lr}
 8005290:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 8005292:	230f      	movs	r3, #15
 8005294:	aa04      	add	r2, sp, #16
 8005296:	4694      	mov	ip, r2
 8005298:	4463      	add	r3, ip
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800529e:	2101      	movs	r1, #1
 80052a0:	4249      	negs	r1, r1
 80052a2:	2001      	movs	r0, #1
 80052a4:	f00a fd68 	bl	800fd78 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80052a8:	f009 faa8 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 80052ac:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80052ae:	23e1      	movs	r3, #225	; 0xe1
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	4a5b      	ldr	r2, [pc, #364]	; (8005420 <prvCLITask+0x198>)
 80052b4:	6892      	ldr	r2, [r2, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d00d      	beq.n	80052d6 <prvCLITask+0x4e>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80052ba:	2401      	movs	r4, #1
			if(port != PcPort)
 80052bc:	4e59      	ldr	r6, [pc, #356]	; (8005424 <prvCLITask+0x19c>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80052be:	001d      	movs	r5, r3
			if(port != PcPort)
 80052c0:	7833      	ldrb	r3, [r6, #0]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d003      	beq.n	80052ce <prvCLITask+0x46>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80052c6:	0029      	movs	r1, r5
 80052c8:	0020      	movs	r0, r4
 80052ca:	f009 f8c3 	bl	800e454 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80052ce:	3401      	adds	r4, #1
 80052d0:	b2e4      	uxtb	r4, r4
 80052d2:	2c04      	cmp	r4, #4
 80052d4:	d1f4      	bne.n	80052c0 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <prvCLITask+0x1a0>)
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	0053      	lsls	r3, r2, #1
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4a52      	ldr	r2, [pc, #328]	; (800542c <prvCLITask+0x1a4>)
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	4a52      	ldr	r2, [pc, #328]	; (8005430 <prvCLITask+0x1a8>)
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	4c52      	ldr	r4, [pc, #328]	; (8005434 <prvCLITask+0x1ac>)
 80052ea:	4d4e      	ldr	r5, [pc, #312]	; (8005424 <prvCLITask+0x19c>)
 80052ec:	7829      	ldrb	r1, [r5, #0]
 80052ee:	9100      	str	r1, [sp, #0]
 80052f0:	4951      	ldr	r1, [pc, #324]	; (8005438 <prvCLITask+0x1b0>)
 80052f2:	0020      	movs	r0, r4
 80052f4:	f00f f9ea 	bl	80146cc <siprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80052f8:	22a4      	movs	r2, #164	; 0xa4
 80052fa:	7828      	ldrb	r0, [r5, #0]
 80052fc:	230a      	movs	r3, #10
 80052fe:	0092      	lsls	r2, r2, #2
 8005300:	494e      	ldr	r1, [pc, #312]	; (800543c <prvCLITask+0x1b4>)
 8005302:	f009 f861 	bl	800e3c8 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005306:	0020      	movs	r0, r4
 8005308:	f7fa ff06 	bl	8000118 <strlen>
 800530c:	b282      	uxth	r2, r0
 800530e:	7828      	ldrb	r0, [r5, #0]
 8005310:	230a      	movs	r3, #10
 8005312:	0021      	movs	r1, r4
 8005314:	f009 f858 	bl	800e3c8 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005318:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800531a:	4b42      	ldr	r3, [pc, #264]	; (8005424 <prvCLITask+0x19c>)
 800531c:	4699      	mov	r9, r3
 800531e:	4b48      	ldr	r3, [pc, #288]	; (8005440 <prvCLITask+0x1b8>)
 8005320:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005322:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005324:	2301      	movs	r3, #1
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	e055      	b.n	80053d6 <prvCLITask+0x14e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 800532a:	240f      	movs	r4, #15
 800532c:	a904      	add	r1, sp, #16
 800532e:	468c      	mov	ip, r1
 8005330:	4464      	add	r4, ip
 8005332:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005334:	006a      	lsls	r2, r5, #1
 8005336:	1952      	adds	r2, r2, r5
 8005338:	0192      	lsls	r2, r2, #6
 800533a:	4c42      	ldr	r4, [pc, #264]	; (8005444 <prvCLITask+0x1bc>)
 800533c:	18a2      	adds	r2, r4, r2
 800533e:	2400      	movs	r4, #0
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005344:	4a3e      	ldr	r2, [pc, #248]	; (8005440 <prvCLITask+0x1b8>)
 8005346:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005348:	250f      	movs	r5, #15
 800534a:	ab04      	add	r3, sp, #16
 800534c:	469c      	mov	ip, r3
 800534e:	4465      	add	r5, ip
 8005350:	230a      	movs	r3, #10
 8005352:	2201      	movs	r2, #1
 8005354:	0029      	movs	r1, r5
 8005356:	f009 f837 	bl	800e3c8 <writePxITMutex>
		if(cRxedChar == '\r'){
 800535a:	782b      	ldrb	r3, [r5, #0]
 800535c:	2b0d      	cmp	r3, #13
 800535e:	d01d      	beq.n	800539c <prvCLITask+0x114>
			if(cRxedChar == '\n'){
 8005360:	2b0a      	cmp	r3, #10
 8005362:	d036      	beq.n	80053d2 <prvCLITask+0x14a>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005364:	2b08      	cmp	r3, #8
 8005366:	d052      	beq.n	800540e <prvCLITask+0x186>
 8005368:	2b7f      	cmp	r3, #127	; 0x7f
 800536a:	d050      	beq.n	800540e <prvCLITask+0x186>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 800536c:	001a      	movs	r2, r3
 800536e:	3a20      	subs	r2, #32
 8005370:	2a5e      	cmp	r2, #94	; 0x5e
 8005372:	d82e      	bhi.n	80053d2 <prvCLITask+0x14a>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005374:	2f31      	cmp	r7, #49	; 0x31
 8005376:	dc2c      	bgt.n	80053d2 <prvCLITask+0x14a>
						cInputString[cInputIndex] =cRxedChar;
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <prvCLITask+0x1c0>)
 800537a:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 800537c:	3701      	adds	r7, #1
 800537e:	b27f      	sxtb	r7, r7
 8005380:	e027      	b.n	80053d2 <prvCLITask+0x14a>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005382:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005384:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	5ce2      	ldrb	r2, [r4, r3]
 800538a:	2a00      	cmp	r2, #0
 800538c:	d1cd      	bne.n	800532a <prvCLITask+0xa2>
			if(chr == MSG_RX_BUF_SIZE - 1){
 800538e:	2bbf      	cmp	r3, #191	; 0xbf
 8005390:	d0f7      	beq.n	8005382 <prvCLITask+0xfa>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005392:	3301      	adds	r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	2bbf      	cmp	r3, #191	; 0xbf
 8005398:	d9f5      	bls.n	8005386 <prvCLITask+0xfe>
 800539a:	e7d5      	b.n	8005348 <prvCLITask+0xc0>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <prvCLITask+0x19c>)
 800539e:	7818      	ldrb	r0, [r3, #0]
 80053a0:	230a      	movs	r3, #10
 80053a2:	2202      	movs	r2, #2
 80053a4:	4929      	ldr	r1, [pc, #164]	; (800544c <prvCLITask+0x1c4>)
 80053a6:	f009 f80f 	bl	800e3c8 <writePxITMutex>
			if(cInputIndex == 0){
 80053aa:	2f00      	cmp	r7, #0
 80053ac:	d02a      	beq.n	8005404 <prvCLITask+0x17c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053ae:	4f26      	ldr	r7, [pc, #152]	; (8005448 <prvCLITask+0x1c0>)
 80053b0:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <prvCLITask+0x19c>)
 80053b2:	7818      	ldrb	r0, [r3, #0]
 80053b4:	9b05      	ldr	r3, [sp, #20]
 80053b6:	003a      	movs	r2, r7
 80053b8:	2101      	movs	r1, #1
 80053ba:	f7ff fd53 	bl	8004e64 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80053be:	0039      	movs	r1, r7
 80053c0:	4823      	ldr	r0, [pc, #140]	; (8005450 <prvCLITask+0x1c8>)
 80053c2:	f00f f9bf 	bl	8014744 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80053c6:	2232      	movs	r2, #50	; 0x32
 80053c8:	2100      	movs	r1, #0
 80053ca:	0038      	movs	r0, r7
 80053cc:	f00e fbf0 	bl	8013bb0 <memset>
			cInputIndex =0;
 80053d0:	2700      	movs	r7, #0
		taskYIELD();
 80053d2:	f00a ffab 	bl	801032c <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053d6:	464b      	mov	r3, r9
 80053d8:	7818      	ldrb	r0, [r3, #0]
 80053da:	1e45      	subs	r5, r0, #1
 80053dc:	4643      	mov	r3, r8
 80053de:	5d59      	ldrb	r1, [r3, r5]
 80053e0:	b28b      	uxth	r3, r1
 80053e2:	2bbf      	cmp	r3, #191	; 0xbf
 80053e4:	d8b0      	bhi.n	8005348 <prvCLITask+0xc0>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053e6:	9103      	str	r1, [sp, #12]
 80053e8:	006a      	lsls	r2, r5, #1
 80053ea:	1952      	adds	r2, r2, r5
 80053ec:	0192      	lsls	r2, r2, #6
 80053ee:	4c15      	ldr	r4, [pc, #84]	; (8005444 <prvCLITask+0x1bc>)
 80053f0:	18a2      	adds	r2, r4, r2
 80053f2:	5c52      	ldrb	r2, [r2, r1]
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	d198      	bne.n	800532a <prvCLITask+0xa2>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80053f8:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 80053fa:	006a      	lsls	r2, r5, #1
 80053fc:	1952      	adds	r2, r2, r5
 80053fe:	0192      	lsls	r2, r2, #6
 8005400:	18a4      	adds	r4, r4, r2
 8005402:	e7c4      	b.n	800538e <prvCLITask+0x106>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005404:	4912      	ldr	r1, [pc, #72]	; (8005450 <prvCLITask+0x1c8>)
 8005406:	4810      	ldr	r0, [pc, #64]	; (8005448 <prvCLITask+0x1c0>)
 8005408:	f00f f99c 	bl	8014744 <strcpy>
 800540c:	e7cf      	b.n	80053ae <prvCLITask+0x126>
				if(cInputIndex > 0){
 800540e:	2f00      	cmp	r7, #0
 8005410:	dddf      	ble.n	80053d2 <prvCLITask+0x14a>
					cInputIndex--;
 8005412:	3f01      	subs	r7, #1
 8005414:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <prvCLITask+0x1c0>)
 8005418:	2200      	movs	r2, #0
 800541a:	55da      	strb	r2, [r3, r7]
 800541c:	e7d9      	b.n	80053d2 <prvCLITask+0x14a>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	2000627c 	.word	0x2000627c
 8005424:	200002b8 	.word	0x200002b8
 8005428:	20000064 	.word	0x20000064
 800542c:	080178ac 	.word	0x080178ac
 8005430:	2000080e 	.word	0x2000080e
 8005434:	200009a0 	.word	0x200009a0
 8005438:	08017dd0 	.word	0x08017dd0
 800543c:	08017dfc 	.word	0x08017dfc
 8005440:	20000c8c 	.word	0x20000c8c
 8005444:	20000a4c 	.word	0x20000a4c
 8005448:	200008d0 	.word	0x200008d0
 800544c:	080196b8 	.word	0x080196b8
 8005450:	2000096c 	.word	0x2000096c

08005454 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005458:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <ParseSnippetCommand+0x78>)
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	3a01      	subs	r2, #1
 800545e:	0093      	lsls	r3, r2, #2
 8005460:	189b      	adds	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <ParseSnippetCommand+0x7c>)
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02c      	beq.n	80054c8 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800546e:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <ParseSnippetCommand+0x80>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d014      	beq.n	80054a0 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005476:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <ParseSnippetCommand+0x80>)
 8005478:	681d      	ldr	r5, [r3, #0]
 800547a:	782b      	ldrb	r3, [r5, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005480:	2113      	movs	r1, #19
 8005482:	0028      	movs	r0, r5
 8005484:	f00f f950 	bl	8014728 <strchr>
 8005488:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 800548a:	d011      	beq.n	80054b0 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 800548c:	1b42      	subs	r2, r0, r5
 800548e:	0029      	movs	r1, r5
 8005490:	0020      	movs	r0, r4
 8005492:	f00f f970 	bl	8014776 <strncpy>
		ptrStart =ptrEnd + 1;
 8005496:	3601      	adds	r6, #1
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <ParseSnippetCommand+0x80>)
 800549a:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800549c:	2001      	movs	r0, #1
 800549e:	e006      	b.n	80054ae <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <ParseSnippetCommand+0x80>)
 80054a2:	6018      	str	r0, [r3, #0]
 80054a4:	e7e7      	b.n	8005476 <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <ParseSnippetCommand+0x80>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
		return false;
 80054ac:	2000      	movs	r0, #0
}
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 80054b0:	0029      	movs	r1, r5
 80054b2:	0020      	movs	r0, r4
 80054b4:	f00f f946 	bl	8014744 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80054b8:	0020      	movs	r0, r4
 80054ba:	f7fa fe2d 	bl	8000118 <strlen>
 80054be:	182d      	adds	r5, r5, r0
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <ParseSnippetCommand+0x80>)
 80054c2:	601d      	str	r5, [r3, #0]
	return true;
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7f2      	b.n	80054ae <ParseSnippetCommand+0x5a>
		return false;
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7f0      	b.n	80054ae <ParseSnippetCommand+0x5a>
 80054cc:	2000099f 	.word	0x2000099f
 80054d0:	20006298 	.word	0x20006298
 80054d4:	200009c8 	.word	0x200009c8

080054d8 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	b083      	sub	sp, #12
 80054dc:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80054de:	0083      	lsls	r3, r0, #2
 80054e0:	181b      	adds	r3, r3, r0
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4a3f      	ldr	r2, [pc, #252]	; (80055e4 <CheckSnippetCondition+0x10c>)
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d003      	beq.n	80054f4 <CheckSnippetCondition+0x1c>
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d015      	beq.n	800551c <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80054f0:	2000      	movs	r0, #0
 80054f2:	e011      	b.n	8005518 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80054f4:	493b      	ldr	r1, [pc, #236]	; (80055e4 <CheckSnippetCondition+0x10c>)
 80054f6:	0083      	lsls	r3, r0, #2
 80054f8:	181a      	adds	r2, r3, r0
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80054fe:	7890      	ldrb	r0, [r2, #2]
 8005500:	00c2      	lsls	r2, r0, #3
 8005502:	1812      	adds	r2, r2, r0
 8005504:	191b      	adds	r3, r3, r4
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	18cb      	adds	r3, r1, r3
 800550a:	4937      	ldr	r1, [pc, #220]	; (80055e8 <CheckSnippetCondition+0x110>)
 800550c:	5c50      	ldrb	r0, [r2, r1]
 800550e:	78db      	ldrb	r3, [r3, #3]
 8005510:	1ac0      	subs	r0, r0, r3
 8005512:	4243      	negs	r3, r0
 8005514:	4158      	adcs	r0, r3
 8005516:	b2c0      	uxtb	r0, r0
}
 8005518:	b003      	add	sp, #12
 800551a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800551c:	4e31      	ldr	r6, [pc, #196]	; (80055e4 <CheckSnippetCondition+0x10c>)
 800551e:	0085      	lsls	r5, r0, #2
 8005520:	182b      	adds	r3, r5, r0
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	18f3      	adds	r3, r6, r3
 8005526:	78da      	ldrb	r2, [r3, #3]
 8005528:	3a01      	subs	r2, #1
 800552a:	0053      	lsls	r3, r2, #1
 800552c:	189b      	adds	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4a2e      	ldr	r2, [pc, #184]	; (80055ec <CheckSnippetCondition+0x114>)
 8005532:	589b      	ldr	r3, [r3, r2]
 8005534:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005536:	1829      	adds	r1, r5, r0
 8005538:	0089      	lsls	r1, r1, #2
 800553a:	3106      	adds	r1, #6
 800553c:	1989      	adds	r1, r1, r6
 800553e:	2204      	movs	r2, #4
 8005540:	a801      	add	r0, sp, #4
 8005542:	f00e fb2c 	bl	8013b9e <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005546:	192d      	adds	r5, r5, r4
 8005548:	00ad      	lsls	r5, r5, #2
 800554a:	1975      	adds	r5, r6, r5
 800554c:	786b      	ldrb	r3, [r5, #1]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d83f      	bhi.n	80055d2 <CheckSnippetCondition+0xfa>
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <CheckSnippetCondition+0x118>)
 8005556:	58d3      	ldr	r3, [r2, r3]
 8005558:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800555a:	1c39      	adds	r1, r7, #0
 800555c:	9801      	ldr	r0, [sp, #4]
 800555e:	f7fa ffad 	bl	80004bc <__aeabi_fcmpeq>
 8005562:	1e43      	subs	r3, r0, #1
 8005564:	4198      	sbcs	r0, r3
 8005566:	e7d7      	b.n	8005518 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005568:	1c39      	adds	r1, r7, #0
 800556a:	9801      	ldr	r0, [sp, #4]
 800556c:	f7fa ffac 	bl	80004c8 <__aeabi_fcmplt>
 8005570:	1e43      	subs	r3, r0, #1
 8005572:	4198      	sbcs	r0, r3
 8005574:	e7d0      	b.n	8005518 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005576:	1c39      	adds	r1, r7, #0
 8005578:	9801      	ldr	r0, [sp, #4]
 800557a:	f7fa ffb9 	bl	80004f0 <__aeabi_fcmpgt>
 800557e:	2800      	cmp	r0, #0
 8005580:	d029      	beq.n	80055d6 <CheckSnippetCondition+0xfe>
 8005582:	2100      	movs	r1, #0
 8005584:	1c38      	adds	r0, r7, #0
 8005586:	f7fa ff99 	bl	80004bc <__aeabi_fcmpeq>
 800558a:	4243      	negs	r3, r0
 800558c:	4158      	adcs	r0, r3
 800558e:	e7c3      	b.n	8005518 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005590:	1c39      	adds	r1, r7, #0
 8005592:	9801      	ldr	r0, [sp, #4]
 8005594:	f7fa ffa2 	bl	80004dc <__aeabi_fcmple>
 8005598:	1e43      	subs	r3, r0, #1
 800559a:	4198      	sbcs	r0, r3
 800559c:	e7bc      	b.n	8005518 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800559e:	1c39      	adds	r1, r7, #0
 80055a0:	9801      	ldr	r0, [sp, #4]
 80055a2:	f7fa ffaf 	bl	8000504 <__aeabi_fcmpge>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d017      	beq.n	80055da <CheckSnippetCondition+0x102>
 80055aa:	2100      	movs	r1, #0
 80055ac:	1c38      	adds	r0, r7, #0
 80055ae:	f7fa ff85 	bl	80004bc <__aeabi_fcmpeq>
 80055b2:	4243      	negs	r3, r0
 80055b4:	4158      	adcs	r0, r3
 80055b6:	e7af      	b.n	8005518 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 80055b8:	1c39      	adds	r1, r7, #0
 80055ba:	9801      	ldr	r0, [sp, #4]
 80055bc:	f7fa ff7e 	bl	80004bc <__aeabi_fcmpeq>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d10c      	bne.n	80055de <CheckSnippetCondition+0x106>
 80055c4:	2100      	movs	r1, #0
 80055c6:	1c38      	adds	r0, r7, #0
 80055c8:	f7fa ff78 	bl	80004bc <__aeabi_fcmpeq>
 80055cc:	4243      	negs	r3, r0
 80055ce:	4158      	adcs	r0, r3
 80055d0:	e7a2      	b.n	8005518 <CheckSnippetCondition+0x40>
	return false;
 80055d2:	2000      	movs	r0, #0
 80055d4:	e7a0      	b.n	8005518 <CheckSnippetCondition+0x40>
 80055d6:	2000      	movs	r0, #0
 80055d8:	e79e      	b.n	8005518 <CheckSnippetCondition+0x40>
 80055da:	2000      	movs	r0, #0
 80055dc:	e79c      	b.n	8005518 <CheckSnippetCondition+0x40>
 80055de:	2000      	movs	r0, #0
 80055e0:	e79a      	b.n	8005518 <CheckSnippetCondition+0x40>
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	20006298 	.word	0x20006298
 80055e8:	20000e04 	.word	0x20000e04
 80055ec:	2000009c 	.word	0x2000009c
 80055f0:	08017bb8 	.word	0x08017bb8

080055f4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055f6:	f009 f901 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 80055fa:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80055fc:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <ExecuteSnippet+0x7c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d032      	beq.n	800566a <ExecuteSnippet+0x76>
 8005604:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 8005606:	4f1b      	ldr	r7, [pc, #108]	; (8005674 <ExecuteSnippet+0x80>)
 8005608:	e01a      	b.n	8005640 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800560a:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <ExecuteSnippet+0x84>)
 800560c:	7818      	ldrb	r0, [r3, #0]
 800560e:	002b      	movs	r3, r5
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <ExecuteSnippet+0x88>)
 8005612:	2100      	movs	r1, #0
 8005614:	f7ff fc26 	bl	8004e64 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005618:	0028      	movs	r0, r5
 800561a:	f7fa fd7d 	bl	8000118 <strlen>
 800561e:	0002      	movs	r2, r0
 8005620:	2100      	movs	r1, #0
 8005622:	0028      	movs	r0, r5
 8005624:	f00e fac4 	bl	8013bb0 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005628:	4914      	ldr	r1, [pc, #80]	; (800567c <ExecuteSnippet+0x88>)
 800562a:	68f0      	ldr	r0, [r6, #12]
 800562c:	f7ff ff12 	bl	8005454 <ParseSnippetCommand>
 8005630:	2800      	cmp	r0, #0
 8005632:	d1ea      	bne.n	800560a <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005634:	3401      	adds	r4, #1
 8005636:	b2a4      	uxth	r4, r4
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <ExecuteSnippet+0x7c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	42a3      	cmp	r3, r4
 800563e:	d914      	bls.n	800566a <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005640:	00a3      	lsls	r3, r4, #2
 8005642:	191b      	adds	r3, r3, r4
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	7c1b      	ldrb	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f2      	beq.n	8005634 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800564e:	b2e0      	uxtb	r0, r4
 8005650:	f7ff ff42 	bl	80054d8 <CheckSnippetCondition>
 8005654:	2800      	cmp	r0, #0
 8005656:	d0ed      	beq.n	8005634 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <ExecuteSnippet+0x8c>)
 800565a:	2220      	movs	r2, #32
 800565c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800565e:	00a3      	lsls	r3, r4, #2
 8005660:	191e      	adds	r6, r3, r4
 8005662:	00b6      	lsls	r6, r6, #2
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <ExecuteSnippet+0x80>)
 8005666:	199e      	adds	r6, r3, r6
 8005668:	e7de      	b.n	8005628 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 800566a:	2000      	movs	r0, #0
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	2000099f 	.word	0x2000099f
 8005674:	20006298 	.word	0x20006298
 8005678:	200002b8 	.word	0x200002b8
 800567c:	20000938 	.word	0x20000938
 8005680:	200061fc 	.word	0x200061fc

08005684 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005684:	2000      	movs	r0, #0
 8005686:	4770      	bx	lr

08005688 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	0004      	movs	r4, r0
 800568e:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005690:	2300      	movs	r3, #0
 8005692:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005694:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005696:	2800      	cmp	r0, #0
 8005698:	d101      	bne.n	800569e <setBaudrateCommand+0x16>
 800569a:	b672      	cpsid	i
 800569c:	e7fe      	b.n	800569c <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800569e:	aa01      	add	r2, sp, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	0028      	movs	r0, r5
 80056a4:	f009 f8ae 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80056a8:	2300      	movs	r3, #0
 80056aa:	56c3      	ldrsb	r3, [r0, r3]
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d00c      	beq.n	80056ca <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056b0:	466a      	mov	r2, sp
 80056b2:	2102      	movs	r1, #2
 80056b4:	0028      	movs	r0, r5
 80056b6:	f009 f8a5 	bl	800e804 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056ba:	f00e f9fe 	bl	8013aba <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80056be:	2213      	movs	r2, #19
 80056c0:	490f      	ldr	r1, [pc, #60]	; (8005700 <setBaudrateCommand+0x78>)
 80056c2:	0020      	movs	r0, r4
 80056c4:	f00e fa6b 	bl	8013b9e <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80056c8:	e016      	b.n	80056f8 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056ca:	3001      	adds	r0, #1
 80056cc:	f00e f9f5 	bl	8013aba <atol>
 80056d0:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056d2:	466a      	mov	r2, sp
 80056d4:	2102      	movs	r1, #2
 80056d6:	0028      	movs	r0, r5
 80056d8:	f009 f894 	bl	800e804 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056dc:	f00e f9ed 	bl	8013aba <atol>
 80056e0:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 80056e2:	b2f0      	uxtb	r0, r6
 80056e4:	0029      	movs	r1, r5
 80056e6:	f008 feb5 	bl	800e454 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80056ea:	23ff      	movs	r3, #255	; 0xff
 80056ec:	4033      	ands	r3, r6
 80056ee:	002a      	movs	r2, r5
 80056f0:	4904      	ldr	r1, [pc, #16]	; (8005704 <setBaudrateCommand+0x7c>)
 80056f2:	0020      	movs	r0, r4
 80056f4:	f00e ffea 	bl	80146cc <siprintf>
}
 80056f8:	2000      	movs	r0, #0
 80056fa:	b002      	add	sp, #8
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	08018a88 	.word	0x08018a88
 8005704:	08018a60 	.word	0x08018a60

08005708 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005708:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800570a:	2800      	cmp	r0, #0
 800570c:	d101      	bne.n	8005712 <flashsizeCommand+0xa>
 800570e:	b672      	cpsid	i
 8005710:	e7fe      	b.n	8005710 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <flashsizeCommand+0x18>)
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	4903      	ldr	r1, [pc, #12]	; (8005724 <flashsizeCommand+0x1c>)
 8005718:	f00e ffd8 	bl	80146cc <siprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800571c:	2000      	movs	r0, #0
 800571e:	bd10      	pop	{r4, pc}
 8005720:	1ffff7cc 	.word	0x1ffff7cc
 8005724:	08018454 	.word	0x08018454

08005728 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005728:	b510      	push	{r4, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	0004      	movs	r4, r0
 800572e:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005730:	2300      	movs	r3, #0
 8005732:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005734:	2300      	movs	r3, #0
 8005736:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005738:	2c00      	cmp	r4, #0
 800573a:	d101      	bne.n	8005740 <GetReadPrecentageCommand+0x18>
 800573c:	b672      	cpsid	i
 800573e:	e7fe      	b.n	800573e <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005740:	aa01      	add	r2, sp, #4
 8005742:	2101      	movs	r1, #1
 8005744:	f009 f85e 	bl	800e804 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005748:	7803      	ldrb	r3, [r0, #0]
 800574a:	3b32      	subs	r3, #50	; 0x32
 800574c:	2b01      	cmp	r3, #1
 800574e:	d907      	bls.n	8005760 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005750:	2215      	movs	r2, #21
 8005752:	490b      	ldr	r1, [pc, #44]	; (8005780 <GetReadPrecentageCommand+0x58>)
 8005754:	0020      	movs	r0, r4
 8005756:	f00e fa22 	bl	8013b9e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800575a:	2000      	movs	r0, #0
 800575c:	b002      	add	sp, #8
 800575e:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005760:	f00e f9ab 	bl	8013aba <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005764:	b2c0      	uxtb	r0, r0
 8005766:	4669      	mov	r1, sp
 8005768:	f003 fb0a 	bl	8008d80 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800576c:	9800      	ldr	r0, [sp, #0]
 800576e:	f7fd fa87 	bl	8002c80 <__aeabi_f2d>
 8005772:	0002      	movs	r2, r0
 8005774:	000b      	movs	r3, r1
 8005776:	4903      	ldr	r1, [pc, #12]	; (8005784 <GetReadPrecentageCommand+0x5c>)
 8005778:	0020      	movs	r0, r4
 800577a:	f00e ffa7 	bl	80146cc <siprintf>
 800577e:	e7ec      	b.n	800575a <GetReadPrecentageCommand+0x32>
 8005780:	08018150 	.word	0x08018150
 8005784:	0801812c 	.word	0x0801812c

08005788 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005788:	b510      	push	{r4, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800578e:	2300      	movs	r3, #0
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005794:	2800      	cmp	r0, #0
 8005796:	d101      	bne.n	800579c <ReadVrefCommand+0x14>
 8005798:	b672      	cpsid	i
 800579a:	e7fe      	b.n	800579a <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800579c:	4669      	mov	r1, sp
 800579e:	a801      	add	r0, sp, #4
 80057a0:	f003 fa30 	bl	8008c04 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057a4:	a901      	add	r1, sp, #4
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00e ffcc 	bl	8014744 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80057ac:	9800      	ldr	r0, [sp, #0]
 80057ae:	f7fd fa67 	bl	8002c80 <__aeabi_f2d>
 80057b2:	0002      	movs	r2, r0
 80057b4:	000b      	movs	r3, r1
 80057b6:	4903      	ldr	r1, [pc, #12]	; (80057c4 <ReadVrefCommand+0x3c>)
 80057b8:	0020      	movs	r0, r4
 80057ba:	f00e ff87 	bl	80146cc <siprintf>
}
 80057be:	2000      	movs	r0, #0
 80057c0:	b002      	add	sp, #8
 80057c2:	bd10      	pop	{r4, pc}
 80057c4:	0801819c 	.word	0x0801819c

080057c8 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c8:	b510      	push	{r4, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d101      	bne.n	80057dc <ReadTempCommand+0x14>
 80057d8:	b672      	cpsid	i
 80057da:	e7fe      	b.n	80057da <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057dc:	4669      	mov	r1, sp
 80057de:	a801      	add	r0, sp, #4
 80057e0:	f003 fa10 	bl	8008c04 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057e4:	a901      	add	r1, sp, #4
 80057e6:	0020      	movs	r0, r4
 80057e8:	f00e ffac 	bl	8014744 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80057ec:	9801      	ldr	r0, [sp, #4]
 80057ee:	f7fd fa47 	bl	8002c80 <__aeabi_f2d>
 80057f2:	0002      	movs	r2, r0
 80057f4:	000b      	movs	r3, r1
 80057f6:	4903      	ldr	r1, [pc, #12]	; (8005804 <ReadTempCommand+0x3c>)
 80057f8:	0020      	movs	r0, r4
 80057fa:	f00e ff67 	bl	80146cc <siprintf>
}
 80057fe:	2000      	movs	r0, #0
 8005800:	b002      	add	sp, #8
 8005802:	bd10      	pop	{r4, pc}
 8005804:	08018168 	.word	0x08018168

08005808 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	0004      	movs	r4, r0
 800580e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005810:	2300      	movs	r3, #0
 8005812:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005814:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005816:	2300      	movs	r3, #0
 8005818:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800581a:	2800      	cmp	r0, #0
 800581c:	d101      	bne.n	8005822 <ADCReadCommand+0x1a>
 800581e:	b672      	cpsid	i
 8005820:	e7fe      	b.n	8005820 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005822:	aa03      	add	r2, sp, #12
 8005824:	2101      	movs	r1, #1
 8005826:	0030      	movs	r0, r6
 8005828:	f008 ffec 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800582c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800582e:	aa02      	add	r2, sp, #8
 8005830:	2102      	movs	r1, #2
 8005832:	0030      	movs	r0, r6
 8005834:	f008 ffe6 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8005838:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800583a:	782b      	ldrb	r3, [r5, #0]
 800583c:	3b32      	subs	r3, #50	; 0x32
 800583e:	2b01      	cmp	r3, #1
 8005840:	d907      	bls.n	8005852 <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005842:	2215      	movs	r2, #21
 8005844:	4919      	ldr	r1, [pc, #100]	; (80058ac <ADCReadCommand+0xa4>)
 8005846:	0020      	movs	r0, r4
 8005848:	f00e f9a9 	bl	8013b9e <memcpy>
}
 800584c:	2000      	movs	r0, #0
 800584e:	b004      	add	sp, #16
 8005850:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005852:	0028      	movs	r0, r5
 8005854:	f00e f931 	bl	8013aba <atol>
 8005858:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800585a:	4915      	ldr	r1, [pc, #84]	; (80058b0 <ADCReadCommand+0xa8>)
 800585c:	0030      	movs	r0, r6
 800585e:	f7fa fc51 	bl	8000104 <strcmp>
 8005862:	2800      	cmp	r0, #0
 8005864:	d005      	beq.n	8005872 <ADCReadCommand+0x6a>
 8005866:	4913      	ldr	r1, [pc, #76]	; (80058b4 <ADCReadCommand+0xac>)
 8005868:	0030      	movs	r0, r6
 800586a:	f7fa fc4b 	bl	8000104 <strcmp>
 800586e:	2800      	cmp	r0, #0
 8005870:	d116      	bne.n	80058a0 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 8005872:	4e0f      	ldr	r6, [pc, #60]	; (80058b0 <ADCReadCommand+0xa8>)
 8005874:	0031      	movs	r1, r6
 8005876:	0028      	movs	r0, r5
 8005878:	f003 fb4c 	bl	8008f14 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800587c:	aa01      	add	r2, sp, #4
 800587e:	0031      	movs	r1, r6
 8005880:	0028      	movs	r0, r5
 8005882:	f003 fb75 	bl	8008f70 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005886:	a901      	add	r1, sp, #4
 8005888:	0020      	movs	r0, r4
 800588a:	f00e ff5b 	bl	8014744 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800588e:	9801      	ldr	r0, [sp, #4]
 8005890:	f7fa fe6c 	bl	800056c <__aeabi_f2uiz>
 8005894:	b282      	uxth	r2, r0
 8005896:	4908      	ldr	r1, [pc, #32]	; (80058b8 <ADCReadCommand+0xb0>)
 8005898:	0020      	movs	r0, r4
 800589a:	f00e ff17 	bl	80146cc <siprintf>
 800589e:	e7d5      	b.n	800584c <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058a0:	2212      	movs	r2, #18
 80058a2:	4906      	ldr	r1, [pc, #24]	; (80058bc <ADCReadCommand+0xb4>)
 80058a4:	0020      	movs	r0, r4
 80058a6:	f00e f97a 	bl	8013b9e <memcpy>
 80058aa:	e7cf      	b.n	800584c <ADCReadCommand+0x44>
 80058ac:	08018150 	.word	0x08018150
 80058b0:	080180dc 	.word	0x080180dc
 80058b4:	080180e0 	.word	0x080180e0
 80058b8:	080180e8 	.word	0x080180e8
 80058bc:	080180f8 	.word	0x080180f8

080058c0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	46d6      	mov	lr, sl
 80058c4:	4647      	mov	r7, r8
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b085      	sub	sp, #20
 80058ca:	0004      	movs	r4, r0
 80058cc:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80058d2:	4b63      	ldr	r3, [pc, #396]	; (8005a60 <testportCommand+0x1a0>)
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	ab02      	add	r3, sp, #8
 80058d8:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 80058da:	2c00      	cmp	r4, #0
 80058dc:	d101      	bne.n	80058e2 <testportCommand+0x22>
 80058de:	b672      	cpsid	i
 80058e0:	e7fe      	b.n	80058e0 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058e2:	aa03      	add	r2, sp, #12
 80058e4:	2101      	movs	r1, #1
 80058e6:	f008 ff8d 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80058ea:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80058ec:	495d      	ldr	r1, [pc, #372]	; (8005a64 <testportCommand+0x1a4>)
 80058ee:	f7fa fc09 	bl	8000104 <strcmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d175      	bne.n	80059e2 <testportCommand+0x122>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80058f6:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <testportCommand+0x1a8>)
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	4b5c      	ldr	r3, [pc, #368]	; (8005a6c <testportCommand+0x1ac>)
 80058fc:	189b      	adds	r3, r3, r2
 80058fe:	3b01      	subs	r3, #1
 8005900:	781e      	ldrb	r6, [r3, #0]
 8005902:	2501      	movs	r5, #1
			if(PcPort != ports){
 8005904:	4b58      	ldr	r3, [pc, #352]	; (8005a68 <testportCommand+0x1a8>)
 8005906:	4698      	mov	r8, r3
 8005908:	e03e      	b.n	8005988 <testportCommand+0xc8>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800590a:	002a      	movs	r2, r5
 800590c:	4958      	ldr	r1, [pc, #352]	; (8005a70 <testportCommand+0x1b0>)
 800590e:	0020      	movs	r0, r4
 8005910:	f00e fedc 	bl	80146cc <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005914:	0020      	movs	r0, r4
 8005916:	f7fa fbff 	bl	8000118 <strlen>
 800591a:	b282      	uxth	r2, r0
 800591c:	4b52      	ldr	r3, [pc, #328]	; (8005a68 <testportCommand+0x1a8>)
 800591e:	7818      	ldrb	r0, [r3, #0]
 8005920:	2364      	movs	r3, #100	; 0x64
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	3b5a      	subs	r3, #90	; 0x5a
 8005926:	0021      	movs	r1, r4
 8005928:	f008 fd26 	bl	800e378 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800592c:	2254      	movs	r2, #84	; 0x54
 800592e:	4951      	ldr	r1, [pc, #324]	; (8005a74 <testportCommand+0x1b4>)
 8005930:	0020      	movs	r0, r4
 8005932:	f00e f934 	bl	8013b9e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005936:	0020      	movs	r0, r4
 8005938:	f7fa fbee 	bl	8000118 <strlen>
 800593c:	b282      	uxth	r2, r0
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <testportCommand+0x1a8>)
 8005940:	7818      	ldrb	r0, [r3, #0]
 8005942:	2364      	movs	r3, #100	; 0x64
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	3b5a      	subs	r3, #90	; 0x5a
 8005948:	0021      	movs	r1, r4
 800594a:	f008 fd15 	bl	800e378 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800594e:	3601      	adds	r6, #1
 8005950:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <testportCommand+0x1a8>)
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	3a01      	subs	r2, #1
 8005956:	0053      	lsls	r3, r2, #1
 8005958:	189b      	adds	r3, r3, r2
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	4a46      	ldr	r2, [pc, #280]	; (8005a78 <testportCommand+0x1b8>)
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	5d9b      	ldrb	r3, [r3, r6]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <testportCommand+0xc2>
 8005966:	4692      	mov	sl, r2
 8005968:	4f3f      	ldr	r7, [pc, #252]	; (8005a68 <testportCommand+0x1a8>)
					Delay_ms(1);
 800596a:	2001      	movs	r0, #1
 800596c:	f00a fe5c 	bl	8010628 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005970:	783a      	ldrb	r2, [r7, #0]
 8005972:	3a01      	subs	r2, #1
 8005974:	0053      	lsls	r3, r2, #1
 8005976:	189b      	adds	r3, r3, r2
 8005978:	019b      	lsls	r3, r3, #6
 800597a:	4453      	add	r3, sl
 800597c:	5d9b      	ldrb	r3, [r3, r6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f3      	beq.n	800596a <testportCommand+0xaa>
 8005982:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005984:	2d04      	cmp	r5, #4
 8005986:	d058      	beq.n	8005a3a <testportCommand+0x17a>
 8005988:	b2eb      	uxtb	r3, r5
 800598a:	469a      	mov	sl, r3
			if(PcPort != ports){
 800598c:	4643      	mov	r3, r8
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4553      	cmp	r3, sl
 8005992:	d0f6      	beq.n	8005982 <testportCommand+0xc2>
				WriteVaule[0] =rand();
 8005994:	f00e fe1a 	bl	80145cc <rand>
 8005998:	af02      	add	r7, sp, #8
 800599a:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800599c:	2364      	movs	r3, #100	; 0x64
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	3b5a      	subs	r3, #90	; 0x5a
 80059a2:	2201      	movs	r2, #1
 80059a4:	0039      	movs	r1, r7
 80059a6:	4650      	mov	r0, sl
 80059a8:	f008 fce6 	bl	800e378 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80059ac:	4650      	mov	r0, sl
 80059ae:	f008 fccf 	bl	800e350 <GetUart>
 80059b2:	6803      	ldr	r3, [r0, #0]
 80059b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80059b6:	783a      	ldrb	r2, [r7, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d0a5      	beq.n	800590a <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 80059be:	002a      	movs	r2, r5
 80059c0:	492e      	ldr	r1, [pc, #184]	; (8005a7c <testportCommand+0x1bc>)
 80059c2:	0020      	movs	r0, r4
 80059c4:	f00e fe82 	bl	80146cc <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059c8:	0020      	movs	r0, r4
 80059ca:	f7fa fba5 	bl	8000118 <strlen>
 80059ce:	b282      	uxth	r2, r0
 80059d0:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <testportCommand+0x1a8>)
 80059d2:	7818      	ldrb	r0, [r3, #0]
 80059d4:	2364      	movs	r3, #100	; 0x64
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	3b5a      	subs	r3, #90	; 0x5a
 80059da:	0021      	movs	r1, r4
 80059dc:	f008 fccc 	bl	800e378 <writePxMutex>
 80059e0:	e7a4      	b.n	800592c <testportCommand+0x6c>
	else if(pcParameterString1[0] == 'p'){
 80059e2:	2300      	movs	r3, #0
 80059e4:	56eb      	ldrsb	r3, [r5, r3]
 80059e6:	2b70      	cmp	r3, #112	; 0x70
 80059e8:	d005      	beq.n	80059f6 <testportCommand+0x136>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059ea:	220f      	movs	r2, #15
 80059ec:	4924      	ldr	r1, [pc, #144]	; (8005a80 <testportCommand+0x1c0>)
 80059ee:	0020      	movs	r0, r4
 80059f0:	f00e f8d5 	bl	8013b9e <memcpy>
 80059f4:	e021      	b.n	8005a3a <testportCommand+0x17a>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059f6:	1c68      	adds	r0, r5, #1
 80059f8:	f00e f85f 	bl	8013aba <atol>
 80059fc:	0005      	movs	r5, r0
 80059fe:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a00:	1e7b      	subs	r3, r7, #1
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d825      	bhi.n	8005a52 <testportCommand+0x192>
				WriteVaule[0] =rand();
 8005a06:	f00e fde1 	bl	80145cc <rand>
 8005a0a:	ae02      	add	r6, sp, #8
 8005a0c:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a0e:	2364      	movs	r3, #100	; 0x64
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	3b32      	subs	r3, #50	; 0x32
 8005a14:	2201      	movs	r2, #1
 8005a16:	0031      	movs	r1, r6
 8005a18:	0038      	movs	r0, r7
 8005a1a:	f008 fcad 	bl	800e378 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a1e:	0038      	movs	r0, r7
 8005a20:	f008 fc96 	bl	800e350 <GetUart>
 8005a24:	6803      	ldr	r3, [r0, #0]
 8005a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8005a28:	7832      	ldrb	r2, [r6, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d10a      	bne.n	8005a46 <testportCommand+0x186>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a30:	b2ea      	uxtb	r2, r5
 8005a32:	490f      	ldr	r1, [pc, #60]	; (8005a70 <testportCommand+0x1b0>)
 8005a34:	0020      	movs	r0, r4
 8005a36:	f00e fe49 	bl	80146cc <siprintf>
}
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	b005      	add	sp, #20
 8005a3e:	bc0c      	pop	{r2, r3}
 8005a40:	4690      	mov	r8, r2
 8005a42:	469a      	mov	sl, r3
 8005a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a46:	b2ea      	uxtb	r2, r5
 8005a48:	490c      	ldr	r1, [pc, #48]	; (8005a7c <testportCommand+0x1bc>)
 8005a4a:	0020      	movs	r0, r4
 8005a4c:	f00e fe3e 	bl	80146cc <siprintf>
 8005a50:	e7f3      	b.n	8005a3a <testportCommand+0x17a>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005a52:	221b      	movs	r2, #27
 8005a54:	490b      	ldr	r1, [pc, #44]	; (8005a84 <testportCommand+0x1c4>)
 8005a56:	0020      	movs	r0, r4
 8005a58:	f00e f8a1 	bl	8013b9e <memcpy>
	return pdFALSE;
 8005a5c:	e7ed      	b.n	8005a3a <testportCommand+0x17a>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	08017520 	.word	0x08017520
 8005a64:	0801787c 	.word	0x0801787c
 8005a68:	200002b8 	.word	0x200002b8
 8005a6c:	20000c8c 	.word	0x20000c8c
 8005a70:	08019d48 	.word	0x08019d48
 8005a74:	08019d78 	.word	0x08019d78
 8005a78:	20000a4c 	.word	0x20000a4c
 8005a7c:	08019d64 	.word	0x08019d64
 8005a80:	08019dcc 	.word	0x08019dcc
 8005a84:	08019ddc 	.word	0x08019ddc

08005a88 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	0004      	movs	r4, r0
 8005a8e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d101      	bne.n	8005a9e <unbridgeCommand+0x16>
 8005a9a:	b672      	cpsid	i
 8005a9c:	e7fe      	b.n	8005a9c <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a9e:	aa01      	add	r2, sp, #4
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	0028      	movs	r0, r5
 8005aa4:	f008 feae 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	56c3      	ldrsb	r3, [r0, r3]
 8005aac:	2b70      	cmp	r3, #112	; 0x70
 8005aae:	d00e      	beq.n	8005ace <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ab0:	466a      	mov	r2, sp
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	0028      	movs	r0, r5
 8005ab6:	f008 fea5 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005aba:	2300      	movs	r3, #0
 8005abc:	56c3      	ldrsb	r3, [r0, r3]
 8005abe:	2b70      	cmp	r3, #112	; 0x70
 8005ac0:	d01e      	beq.n	8005b00 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ac2:	220f      	movs	r2, #15
 8005ac4:	491a      	ldr	r1, [pc, #104]	; (8005b30 <unbridgeCommand+0xa8>)
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f00e f869 	bl	8013b9e <memcpy>
 8005acc:	e015      	b.n	8005afa <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f00d fff3 	bl	8013aba <atol>
 8005ad4:	0006      	movs	r6, r0
 8005ad6:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ad8:	466a      	mov	r2, sp
 8005ada:	2102      	movs	r1, #2
 8005adc:	0028      	movs	r0, r5
 8005ade:	f008 fe91 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	56c3      	ldrsb	r3, [r0, r3]
 8005ae6:	2b70      	cmp	r3, #112	; 0x70
 8005ae8:	d00e      	beq.n	8005b08 <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005aea:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005aec:	2867      	cmp	r0, #103	; 0x67
 8005aee:	d0e8      	beq.n	8005ac2 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005af0:	2219      	movs	r2, #25
 8005af2:	4910      	ldr	r1, [pc, #64]	; (8005b34 <unbridgeCommand+0xac>)
 8005af4:	0020      	movs	r0, r4
 8005af6:	f00e f852 	bl	8013b9e <memcpy>
}
 8005afa:	2000      	movs	r0, #0
 8005afc:	b003      	add	sp, #12
 8005afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b00:	3001      	adds	r0, #1
 8005b02:	f00d ffda 	bl	8013aba <atol>
 8005b06:	e7dc      	b.n	8005ac2 <unbridgeCommand+0x3a>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f00d ffd6 	bl	8013aba <atol>
 8005b0e:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005b10:	b2c1      	uxtb	r1, r0
 8005b12:	0038      	movs	r0, r7
 8005b14:	f7fe feaa 	bl	800486c <Unbridge>
	if(result == BOS_OK)
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d1e7      	bne.n	8005aec <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	002b      	movs	r3, r5
 8005b20:	4013      	ands	r3, r2
 8005b22:	4032      	ands	r2, r6
 8005b24:	4904      	ldr	r1, [pc, #16]	; (8005b38 <unbridgeCommand+0xb0>)
 8005b26:	0020      	movs	r0, r4
 8005b28:	f00e fdd0 	bl	80146cc <siprintf>
 8005b2c:	e7e5      	b.n	8005afa <unbridgeCommand+0x72>
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	08019dcc 	.word	0x08019dcc
 8005b34:	08019e94 	.word	0x08019e94
 8005b38:	08019e74 	.word	0x08019e74

08005b3c <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	0004      	movs	r4, r0
 8005b42:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d101      	bne.n	8005b52 <bridgeCommand+0x16>
 8005b4e:	b672      	cpsid	i
 8005b50:	e7fe      	b.n	8005b50 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b52:	aa01      	add	r2, sp, #4
 8005b54:	2101      	movs	r1, #1
 8005b56:	0028      	movs	r0, r5
 8005b58:	f008 fe54 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	56c3      	ldrsb	r3, [r0, r3]
 8005b60:	2b70      	cmp	r3, #112	; 0x70
 8005b62:	d00e      	beq.n	8005b82 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b64:	466a      	mov	r2, sp
 8005b66:	2102      	movs	r1, #2
 8005b68:	0028      	movs	r0, r5
 8005b6a:	f008 fe4b 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b6e:	2300      	movs	r3, #0
 8005b70:	56c3      	ldrsb	r3, [r0, r3]
 8005b72:	2b70      	cmp	r3, #112	; 0x70
 8005b74:	d01e      	beq.n	8005bb4 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b76:	220f      	movs	r2, #15
 8005b78:	491a      	ldr	r1, [pc, #104]	; (8005be4 <bridgeCommand+0xa8>)
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	f00e f80f 	bl	8013b9e <memcpy>
 8005b80:	e015      	b.n	8005bae <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b82:	3001      	adds	r0, #1
 8005b84:	f00d ff99 	bl	8013aba <atol>
 8005b88:	0006      	movs	r6, r0
 8005b8a:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b8c:	466a      	mov	r2, sp
 8005b8e:	2102      	movs	r1, #2
 8005b90:	0028      	movs	r0, r5
 8005b92:	f008 fe37 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b96:	2300      	movs	r3, #0
 8005b98:	56c3      	ldrsb	r3, [r0, r3]
 8005b9a:	2b70      	cmp	r3, #112	; 0x70
 8005b9c:	d00e      	beq.n	8005bbc <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005b9e:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005ba0:	2867      	cmp	r0, #103	; 0x67
 8005ba2:	d0e8      	beq.n	8005b76 <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005ba4:	2217      	movs	r2, #23
 8005ba6:	4910      	ldr	r1, [pc, #64]	; (8005be8 <bridgeCommand+0xac>)
 8005ba8:	0020      	movs	r0, r4
 8005baa:	f00d fff8 	bl	8013b9e <memcpy>
}
 8005bae:	2000      	movs	r0, #0
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f00d ff80 	bl	8013aba <atol>
 8005bba:	e7dc      	b.n	8005b76 <bridgeCommand+0x3a>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f00d ff7c 	bl	8013aba <atol>
 8005bc2:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005bc4:	b2c1      	uxtb	r1, r0
 8005bc6:	0038      	movs	r0, r7
 8005bc8:	f7fe fe3c 	bl	8004844 <Bridge>
	if(result == BOS_OK)
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1e7      	bne.n	8005ba0 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	002b      	movs	r3, r5
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	4032      	ands	r2, r6
 8005bd8:	4904      	ldr	r1, [pc, #16]	; (8005bec <bridgeCommand+0xb0>)
 8005bda:	0020      	movs	r0, r4
 8005bdc:	f00e fd76 	bl	80146cc <siprintf>
 8005be0:	e7e5      	b.n	8005bae <bridgeCommand+0x72>
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	08019dcc 	.word	0x08019dcc
 8005be8:	080182f0 	.word	0x080182f0
 8005bec:	080182cc 	.word	0x080182cc

08005bf0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	0005      	movs	r5, r0
 8005bf6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	d101      	bne.n	8005c04 <delSnipCommand+0x14>
 8005c00:	b672      	cpsid	i
 8005c02:	e7fe      	b.n	8005c02 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c04:	aa03      	add	r2, sp, #12
 8005c06:	2101      	movs	r1, #1
 8005c08:	f008 fdfc 	bl	800e804 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c0c:	f00d ff4f 	bl	8013aae <atoi>
 8005c10:	9001      	str	r0, [sp, #4]
 8005c12:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005c14:	2e00      	cmp	r6, #0
 8005c16:	d003      	beq.n	8005c20 <delSnipCommand+0x30>
 8005c18:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <delSnipCommand+0xc8>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	42b3      	cmp	r3, r6
 8005c1e:	d207      	bcs.n	8005c30 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c20:	2223      	movs	r2, #35	; 0x23
 8005c22:	4926      	ldr	r1, [pc, #152]	; (8005cbc <delSnipCommand+0xcc>)
 8005c24:	0028      	movs	r0, r5
 8005c26:	f00d ffba 	bl	8013b9e <memcpy>
}
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	b005      	add	sp, #20
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005c30:	466b      	mov	r3, sp
 8005c32:	791a      	ldrb	r2, [r3, #4]
 8005c34:	3a01      	subs	r2, #1
 8005c36:	4822      	ldr	r0, [pc, #136]	; (8005cc0 <delSnipCommand+0xd0>)
 8005c38:	2314      	movs	r3, #20
 8005c3a:	4353      	muls	r3, r2
 8005c3c:	2700      	movs	r7, #0
 8005c3e:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005c40:	18c4      	adds	r4, r0, r3
 8005c42:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c44:	3302      	adds	r3, #2
 8005c46:	1818      	adds	r0, r3, r0
 8005c48:	2204      	movs	r2, #4
 8005c4a:	0039      	movs	r1, r7
 8005c4c:	f00d ffb0 	bl	8013bb0 <memset>
		snippets[index - 1].state = false;
 8005c50:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005c52:	68e0      	ldr	r0, [r4, #12]
 8005c54:	f00d ff78 	bl	8013b48 <free>
		snippets[index - 1].cmd = NULL;
 8005c58:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <delSnipCommand+0xc8>)
 8005c5c:	781f      	ldrb	r7, [r3, #0]
 8005c5e:	42be      	cmp	r6, r7
 8005c60:	d213      	bcs.n	8005c8a <delSnipCommand+0x9a>
 8005c62:	466b      	mov	r3, sp
 8005c64:	7919      	ldrb	r1, [r3, #4]
 8005c66:	2214      	movs	r2, #20
 8005c68:	0014      	movs	r4, r2
 8005c6a:	434c      	muls	r4, r1
 8005c6c:	4814      	ldr	r0, [pc, #80]	; (8005cc0 <delSnipCommand+0xd0>)
 8005c6e:	1824      	adds	r4, r4, r0
 8005c70:	1e7b      	subs	r3, r7, #1
 8005c72:	1b9b      	subs	r3, r3, r6
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	185b      	adds	r3, r3, r1
 8005c78:	4353      	muls	r3, r2
 8005c7a:	1880      	adds	r0, r0, r2
 8005c7c:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005c7e:	7823      	ldrb	r3, [r4, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10d      	bne.n	8005ca0 <delSnipCommand+0xb0>
 8005c84:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c86:	42b4      	cmp	r4, r6
 8005c88:	d1f9      	bne.n	8005c7e <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005c8a:	1e7b      	subs	r3, r7, #1
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <delSnipCommand+0xc8>)
 8005c8e:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005c90:	f005 ff68 	bl	800bb64 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c94:	2236      	movs	r2, #54	; 0x36
 8005c96:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <delSnipCommand+0xd4>)
 8005c98:	0028      	movs	r0, r5
 8005c9a:	f00d ff80 	bl	8013b9e <memcpy>
 8005c9e:	e7c4      	b.n	8005c2a <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005ca0:	2214      	movs	r2, #20
 8005ca2:	0021      	movs	r1, r4
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	3814      	subs	r0, #20
 8005ca8:	f00d ff79 	bl	8013b9e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005cac:	2214      	movs	r2, #20
 8005cae:	2100      	movs	r1, #0
 8005cb0:	0020      	movs	r0, r4
 8005cb2:	f00d ff7d 	bl	8013bb0 <memset>
 8005cb6:	e7e5      	b.n	8005c84 <delSnipCommand+0x94>
 8005cb8:	2000099f 	.word	0x2000099f
 8005cbc:	08018410 	.word	0x08018410
 8005cc0:	20006298 	.word	0x20006298
 8005cc4:	080183d8 	.word	0x080183d8

08005cc8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	0004      	movs	r4, r0
 8005cce:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	d101      	bne.n	8005cdc <pauseSnipCommand+0x14>
 8005cd8:	b672      	cpsid	i
 8005cda:	e7fe      	b.n	8005cda <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005cdc:	aa01      	add	r2, sp, #4
 8005cde:	2101      	movs	r1, #1
 8005ce0:	f008 fd90 	bl	800e804 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ce4:	f00d fee3 	bl	8013aae <atoi>
 8005ce8:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <pauseSnipCommand+0x2e>
 8005cee:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <pauseSnipCommand+0x60>)
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d207      	bcs.n	8005d06 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005cf6:	2223      	movs	r2, #35	; 0x23
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <pauseSnipCommand+0x64>)
 8005cfa:	0020      	movs	r0, r4
 8005cfc:	f00d ff4f 	bl	8013b9e <memcpy>
}
 8005d00:	2000      	movs	r0, #0
 8005d02:	b002      	add	sp, #8
 8005d04:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005d06:	b2c0      	uxtb	r0, r0
 8005d08:	3801      	subs	r0, #1
 8005d0a:	2314      	movs	r3, #20
 8005d0c:	4343      	muls	r3, r0
 8005d0e:	4808      	ldr	r0, [pc, #32]	; (8005d30 <pauseSnipCommand+0x68>)
 8005d10:	18c0      	adds	r0, r0, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005d16:	f005 ff25 	bl	800bb64 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d1a:	2235      	movs	r2, #53	; 0x35
 8005d1c:	4905      	ldr	r1, [pc, #20]	; (8005d34 <pauseSnipCommand+0x6c>)
 8005d1e:	0020      	movs	r0, r4
 8005d20:	f00d ff3d 	bl	8013b9e <memcpy>
 8005d24:	e7ec      	b.n	8005d00 <pauseSnipCommand+0x38>
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	2000099f 	.word	0x2000099f
 8005d2c:	08018410 	.word	0x08018410
 8005d30:	20006298 	.word	0x20006298
 8005d34:	08018820 	.word	0x08018820

08005d38 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	0004      	movs	r4, r0
 8005d3e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005d44:	2c00      	cmp	r4, #0
 8005d46:	d101      	bne.n	8005d4c <actSnipCommand+0x14>
 8005d48:	b672      	cpsid	i
 8005d4a:	e7fe      	b.n	8005d4a <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d4c:	aa01      	add	r2, sp, #4
 8005d4e:	2101      	movs	r1, #1
 8005d50:	f008 fd58 	bl	800e804 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d54:	f00d feab 	bl	8013aae <atoi>
 8005d58:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <actSnipCommand+0x2e>
 8005d5e:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <actSnipCommand+0x60>)
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d207      	bcs.n	8005d76 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d66:	2223      	movs	r2, #35	; 0x23
 8005d68:	490c      	ldr	r1, [pc, #48]	; (8005d9c <actSnipCommand+0x64>)
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	f00d ff17 	bl	8013b9e <memcpy>
}
 8005d70:	2000      	movs	r0, #0
 8005d72:	b002      	add	sp, #8
 8005d74:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005d76:	b2c0      	uxtb	r0, r0
 8005d78:	3801      	subs	r0, #1
 8005d7a:	2314      	movs	r3, #20
 8005d7c:	4343      	muls	r3, r0
 8005d7e:	4808      	ldr	r0, [pc, #32]	; (8005da0 <actSnipCommand+0x68>)
 8005d80:	18c0      	adds	r0, r0, r3
 8005d82:	2301      	movs	r3, #1
 8005d84:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005d86:	f005 feed 	bl	800bb64 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d8a:	2238      	movs	r2, #56	; 0x38
 8005d8c:	4905      	ldr	r1, [pc, #20]	; (8005da4 <actSnipCommand+0x6c>)
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f00d ff05 	bl	8013b9e <memcpy>
 8005d94:	e7ec      	b.n	8005d70 <actSnipCommand+0x38>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	2000099f 	.word	0x2000099f
 8005d9c:	08018410 	.word	0x08018410
 8005da0:	20006298 	.word	0x20006298
 8005da4:	080181d4 	.word	0x080181d4

08005da8 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	46d6      	mov	lr, sl
 8005dac:	464f      	mov	r7, r9
 8005dae:	4646      	mov	r6, r8
 8005db0:	b5c0      	push	{r6, r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005db6:	aa06      	add	r2, sp, #24
 8005db8:	4b7a      	ldr	r3, [pc, #488]	; (8005fa4 <snipCommand+0x1fc>)
 8005dba:	3304      	adds	r3, #4
 8005dbc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005dbe:	c223      	stmia	r2!, {r0, r1, r5}
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	d101      	bne.n	8005dcc <snipCommand+0x24>
 8005dc8:	b672      	cpsid	i
 8005dca:	e7fe      	b.n	8005dca <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005dcc:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <snipCommand+0x200>)
 8005dce:	7818      	ldrb	r0, [r3, #0]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	425b      	negs	r3, r3
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	3333      	adds	r3, #51	; 0x33
 8005dd8:	2237      	movs	r2, #55	; 0x37
 8005dda:	4974      	ldr	r1, [pc, #464]	; (8005fac <snipCommand+0x204>)
 8005ddc:	f008 facc 	bl	800e378 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005de0:	4b73      	ldr	r3, [pc, #460]	; (8005fb0 <snipCommand+0x208>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d100      	bne.n	8005dea <snipCommand+0x42>
 8005de8:	e0d0      	b.n	8005f8c <snipCommand+0x1e4>
 8005dea:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005dec:	4b71      	ldr	r3, [pc, #452]	; (8005fb4 <snipCommand+0x20c>)
 8005dee:	4698      	mov	r8, r3
 8005df0:	e0ba      	b.n	8005f68 <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005df2:	4b70      	ldr	r3, [pc, #448]	; (8005fb4 <snipCommand+0x20c>)
 8005df4:	4699      	mov	r9, r3
 8005df6:	00ab      	lsls	r3, r5, #2
 8005df8:	469a      	mov	sl, r3
 8005dfa:	195b      	adds	r3, r3, r5
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	444b      	add	r3, r9
 8005e00:	7c1a      	ldrb	r2, [r3, #16]
 8005e02:	00d3      	lsls	r3, r2, #3
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	aa06      	add	r2, sp, #24
 8005e08:	4694      	mov	ip, r2
 8005e0a:	4463      	add	r3, ip
 8005e0c:	003a      	movs	r2, r7
 8005e0e:	496a      	ldr	r1, [pc, #424]	; (8005fb8 <snipCommand+0x210>)
 8005e10:	0020      	movs	r0, r4
 8005e12:	f00e fc5b 	bl	80146cc <siprintf>
		switch(snippets[s].cond.conditionType){
 8005e16:	4653      	mov	r3, sl
 8005e18:	195b      	adds	r3, r3, r5
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	5c9b      	ldrb	r3, [r3, r2]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d02d      	beq.n	8005e80 <snipCommand+0xd8>
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d000      	beq.n	8005e2a <snipCommand+0x82>
 8005e28:	e0a9      	b.n	8005f7e <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005e2a:	00a9      	lsls	r1, r5, #2
 8005e2c:	1949      	adds	r1, r1, r5
 8005e2e:	0089      	lsls	r1, r1, #2
 8005e30:	3106      	adds	r1, #6
 8005e32:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <snipCommand+0x20c>)
 8005e34:	4699      	mov	r9, r3
 8005e36:	4449      	add	r1, r9
 8005e38:	2204      	movs	r2, #4
 8005e3a:	a805      	add	r0, sp, #20
 8005e3c:	f00d feaf 	bl	8013b9e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005e40:	00ad      	lsls	r5, r5, #2
 8005e42:	19ad      	adds	r5, r5, r6
 8005e44:	00ad      	lsls	r5, r5, #2
 8005e46:	444d      	add	r5, r9
 8005e48:	78ea      	ldrb	r2, [r5, #3]
 8005e4a:	3a01      	subs	r2, #1
 8005e4c:	0053      	lsls	r3, r2, #1
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4a5a      	ldr	r2, [pc, #360]	; (8005fbc <snipCommand+0x214>)
 8005e54:	18d3      	adds	r3, r2, r3
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4699      	mov	r9, r3
 8005e5a:	9805      	ldr	r0, [sp, #20]
 8005e5c:	f7fc ff10 	bl	8002c80 <__aeabi_f2d>
 8005e60:	9002      	str	r0, [sp, #8]
 8005e62:	9103      	str	r1, [sp, #12]
 8005e64:	786b      	ldrb	r3, [r5, #1]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	005a      	lsls	r2, r3, #1
 8005e6a:	18d2      	adds	r2, r2, r3
 8005e6c:	4b54      	ldr	r3, [pc, #336]	; (8005fc0 <snipCommand+0x218>)
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	464b      	mov	r3, r9
 8005e74:	0022      	movs	r2, r4
 8005e76:	4953      	ldr	r1, [pc, #332]	; (8005fc4 <snipCommand+0x21c>)
 8005e78:	0020      	movs	r0, r4
 8005e7a:	f00e fc27 	bl	80146cc <siprintf>
				break;
 8005e7e:	e07e      	b.n	8005f7e <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005e80:	00ab      	lsls	r3, r5, #2
 8005e82:	195b      	adds	r3, r3, r5
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a4b      	ldr	r2, [pc, #300]	; (8005fb4 <snipCommand+0x20c>)
 8005e88:	18d3      	adds	r3, r2, r3
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	3b05      	subs	r3, #5
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	2a09      	cmp	r2, #9
 8005e92:	d874      	bhi.n	8005f7e <snipCommand+0x1d6>
 8005e94:	0093      	lsls	r3, r2, #2
 8005e96:	4a4c      	ldr	r2, [pc, #304]	; (8005fc8 <snipCommand+0x220>)
 8005e98:	58d3      	ldr	r3, [r2, r3]
 8005e9a:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e9c:	2314      	movs	r3, #20
 8005e9e:	436b      	muls	r3, r5
 8005ea0:	4a44      	ldr	r2, [pc, #272]	; (8005fb4 <snipCommand+0x20c>)
 8005ea2:	18d2      	adds	r2, r2, r3
 8005ea4:	7893      	ldrb	r3, [r2, #2]
 8005ea6:	68d2      	ldr	r2, [r2, #12]
 8005ea8:	9200      	str	r2, [sp, #0]
 8005eaa:	0022      	movs	r2, r4
 8005eac:	4947      	ldr	r1, [pc, #284]	; (8005fcc <snipCommand+0x224>)
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f00e fc0c 	bl	80146cc <siprintf>
						break;
 8005eb4:	e063      	b.n	8005f7e <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005eb6:	2314      	movs	r3, #20
 8005eb8:	436b      	muls	r3, r5
 8005eba:	4a3e      	ldr	r2, [pc, #248]	; (8005fb4 <snipCommand+0x20c>)
 8005ebc:	18d2      	adds	r2, r2, r3
 8005ebe:	7893      	ldrb	r3, [r2, #2]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	9200      	str	r2, [sp, #0]
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	4942      	ldr	r1, [pc, #264]	; (8005fd0 <snipCommand+0x228>)
 8005ec8:	0020      	movs	r0, r4
 8005eca:	f00e fbff 	bl	80146cc <siprintf>
						break;
 8005ece:	e056      	b.n	8005f7e <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ed0:	2314      	movs	r3, #20
 8005ed2:	436b      	muls	r3, r5
 8005ed4:	4a37      	ldr	r2, [pc, #220]	; (8005fb4 <snipCommand+0x20c>)
 8005ed6:	18d2      	adds	r2, r2, r3
 8005ed8:	7893      	ldrb	r3, [r2, #2]
 8005eda:	68d1      	ldr	r1, [r2, #12]
 8005edc:	9101      	str	r1, [sp, #4]
 8005ede:	7912      	ldrb	r2, [r2, #4]
 8005ee0:	9200      	str	r2, [sp, #0]
 8005ee2:	0022      	movs	r2, r4
 8005ee4:	493b      	ldr	r1, [pc, #236]	; (8005fd4 <snipCommand+0x22c>)
 8005ee6:	0020      	movs	r0, r4
 8005ee8:	f00e fbf0 	bl	80146cc <siprintf>
						break;
 8005eec:	e047      	b.n	8005f7e <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005eee:	2314      	movs	r3, #20
 8005ef0:	436b      	muls	r3, r5
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <snipCommand+0x20c>)
 8005ef4:	18d2      	adds	r2, r2, r3
 8005ef6:	7893      	ldrb	r3, [r2, #2]
 8005ef8:	68d1      	ldr	r1, [r2, #12]
 8005efa:	9101      	str	r1, [sp, #4]
 8005efc:	7912      	ldrb	r2, [r2, #4]
 8005efe:	9200      	str	r2, [sp, #0]
 8005f00:	0022      	movs	r2, r4
 8005f02:	4935      	ldr	r1, [pc, #212]	; (8005fd8 <snipCommand+0x230>)
 8005f04:	0020      	movs	r0, r4
 8005f06:	f00e fbe1 	bl	80146cc <siprintf>
						break;
 8005f0a:	e038      	b.n	8005f7e <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <snipCommand+0x234>)
 8005f0e:	0022      	movs	r2, r4
 8005f10:	4933      	ldr	r1, [pc, #204]	; (8005fe0 <snipCommand+0x238>)
 8005f12:	0020      	movs	r0, r4
 8005f14:	f00e fbda 	bl	80146cc <siprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005f18:	4830      	ldr	r0, [pc, #192]	; (8005fdc <snipCommand+0x234>)
 8005f1a:	f7fa f8fd 	bl	8000118 <strlen>
 8005f1e:	0002      	movs	r2, r0
 8005f20:	2100      	movs	r1, #0
 8005f22:	482e      	ldr	r0, [pc, #184]	; (8005fdc <snipCommand+0x234>)
 8005f24:	f00d fe44 	bl	8013bb0 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005f28:	0029      	movs	r1, r5
 8005f2a:	68f0      	ldr	r0, [r6, #12]
 8005f2c:	f7ff fa92 	bl	8005454 <ParseSnippetCommand>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d1eb      	bne.n	8005f0c <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005f34:	0020      	movs	r0, r4
 8005f36:	f7fa f8ef 	bl	8000118 <strlen>
 8005f3a:	1820      	adds	r0, r4, r0
 8005f3c:	220c      	movs	r2, #12
 8005f3e:	4929      	ldr	r1, [pc, #164]	; (8005fe4 <snipCommand+0x23c>)
 8005f40:	f00d fe2d 	bl	8013b9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005f44:	0020      	movs	r0, r4
 8005f46:	f7fa f8e7 	bl	8000118 <strlen>
 8005f4a:	b282      	uxth	r2, r0
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <snipCommand+0x200>)
 8005f4e:	7818      	ldrb	r0, [r3, #0]
 8005f50:	2301      	movs	r3, #1
 8005f52:	425b      	negs	r3, r3
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	3333      	adds	r3, #51	; 0x33
 8005f58:	0021      	movs	r1, r4
 8005f5a:	f008 fa0d 	bl	800e378 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005f5e:	003d      	movs	r5, r7
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <snipCommand+0x208>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	42bb      	cmp	r3, r7
 8005f66:	d911      	bls.n	8005f8c <snipCommand+0x1e4>
 8005f68:	1c6f      	adds	r7, r5, #1
 8005f6a:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005f6c:	002e      	movs	r6, r5
 8005f6e:	00ab      	lsls	r3, r5, #2
 8005f70:	195b      	adds	r3, r3, r5
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4642      	mov	r2, r8
 8005f76:	5c9b      	ldrb	r3, [r3, r2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d000      	beq.n	8005f7e <snipCommand+0x1d6>
 8005f7c:	e739      	b.n	8005df2 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005f7e:	4d17      	ldr	r5, [pc, #92]	; (8005fdc <snipCommand+0x234>)
 8005f80:	00b3      	lsls	r3, r6, #2
 8005f82:	199b      	adds	r3, r3, r6
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4e0b      	ldr	r6, [pc, #44]	; (8005fb4 <snipCommand+0x20c>)
 8005f88:	18f6      	adds	r6, r6, r3
 8005f8a:	e7cd      	b.n	8005f28 <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005f8c:	22b5      	movs	r2, #181	; 0xb5
 8005f8e:	4916      	ldr	r1, [pc, #88]	; (8005fe8 <snipCommand+0x240>)
 8005f90:	0020      	movs	r0, r4
 8005f92:	f00d fe04 	bl	8013b9e <memcpy>
}
 8005f96:	2000      	movs	r0, #0
 8005f98:	b00a      	add	sp, #40	; 0x28
 8005f9a:	bc1c      	pop	{r2, r3, r4}
 8005f9c:	4690      	mov	r8, r2
 8005f9e:	4699      	mov	r9, r3
 8005fa0:	46a2      	mov	sl, r4
 8005fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa4:	08017520 	.word	0x08017520
 8005fa8:	200002b8 	.word	0x200002b8
 8005fac:	08018cb4 	.word	0x08018cb4
 8005fb0:	2000099f 	.word	0x2000099f
 8005fb4:	20006298 	.word	0x20006298
 8005fb8:	08018cec 	.word	0x08018cec
 8005fbc:	2000009c 	.word	0x2000009c
 8005fc0:	080187e4 	.word	0x080187e4
 8005fc4:	08018d58 	.word	0x08018d58
 8005fc8:	08018090 	.word	0x08018090
 8005fcc:	08018cf8 	.word	0x08018cf8
 8005fd0:	08018d0c 	.word	0x08018d0c
 8005fd4:	08018d24 	.word	0x08018d24
 8005fd8:	08018d3c 	.word	0x08018d3c
 8005fdc:	200009d0 	.word	0x200009d0
 8005fe0:	08018d68 	.word	0x08018d68
 8005fe4:	08018d70 	.word	0x08018d70
 8005fe8:	08018d7c 	.word	0x08018d7c

08005fec <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fec:	b510      	push	{r4, lr}
 8005fee:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ff0:	d101      	bne.n	8005ff6 <idcodeCommand+0xa>
 8005ff2:	b672      	cpsid	i
 8005ff4:	e7fe      	b.n	8005ff4 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005ff6:	f00a fb2b 	bl	8010650 <HAL_GetDEVID>
	switch(dev){
 8005ffa:	0403      	lsls	r3, r0, #16
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <idcodeCommand+0x80>)
 8006000:	4694      	mov	ip, r2
 8006002:	4463      	add	r3, ip
 8006004:	2b08      	cmp	r3, #8
 8006006:	d82a      	bhi.n	800605e <idcodeCommand+0x72>
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <idcodeCommand+0x84>)
 800600c:	58d3      	ldr	r3, [r2, r3]
 800600e:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006010:	4a18      	ldr	r2, [pc, #96]	; (8006074 <idcodeCommand+0x88>)
 8006012:	4919      	ldr	r1, [pc, #100]	; (8006078 <idcodeCommand+0x8c>)
 8006014:	0020      	movs	r0, r4
 8006016:	f00e fb59 	bl	80146cc <siprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800601a:	f00a fb13 	bl	8010644 <HAL_GetREVID>
 800601e:	0b03      	lsrs	r3, r0, #12
 8006020:	0022      	movs	r2, r4
 8006022:	4916      	ldr	r1, [pc, #88]	; (800607c <idcodeCommand+0x90>)
 8006024:	0020      	movs	r0, r4
 8006026:	f00e fb51 	bl	80146cc <siprintf>
}
 800602a:	2000      	movs	r0, #0
 800602c:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 800602e:	4a14      	ldr	r2, [pc, #80]	; (8006080 <idcodeCommand+0x94>)
 8006030:	4911      	ldr	r1, [pc, #68]	; (8006078 <idcodeCommand+0x8c>)
 8006032:	0020      	movs	r0, r4
 8006034:	f00e fb4a 	bl	80146cc <siprintf>
			break;
 8006038:	e7ef      	b.n	800601a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <idcodeCommand+0x98>)
 800603c:	490e      	ldr	r1, [pc, #56]	; (8006078 <idcodeCommand+0x8c>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00e fb44 	bl	80146cc <siprintf>
			break;
 8006044:	e7e9      	b.n	800601a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8006046:	4a10      	ldr	r2, [pc, #64]	; (8006088 <idcodeCommand+0x9c>)
 8006048:	490b      	ldr	r1, [pc, #44]	; (8006078 <idcodeCommand+0x8c>)
 800604a:	0020      	movs	r0, r4
 800604c:	f00e fb3e 	bl	80146cc <siprintf>
			break;
 8006050:	e7e3      	b.n	800601a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <idcodeCommand+0xa0>)
 8006054:	4908      	ldr	r1, [pc, #32]	; (8006078 <idcodeCommand+0x8c>)
 8006056:	0020      	movs	r0, r4
 8006058:	f00e fb38 	bl	80146cc <siprintf>
			break;
 800605c:	e7dd      	b.n	800601a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 800605e:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <idcodeCommand+0xa4>)
 8006060:	4905      	ldr	r1, [pc, #20]	; (8006078 <idcodeCommand+0x8c>)
 8006062:	0020      	movs	r0, r4
 8006064:	f00e fb32 	bl	80146cc <siprintf>
			break;
 8006068:	e7d7      	b.n	800601a <idcodeCommand+0x2e>
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	fffffbc0 	.word	0xfffffbc0
 8006070:	080180b8 	.word	0x080180b8
 8006074:	080186e0 	.word	0x080186e0
 8006078:	080186ec 	.word	0x080186ec
 800607c:	08018738 	.word	0x08018738
 8006080:	08018700 	.word	0x08018700
 8006084:	0801870c 	.word	0x0801870c
 8006088:	08018718 	.word	0x08018718
 800608c:	08018724 	.word	0x08018724
 8006090:	08018730 	.word	0x08018730

08006094 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006098:	d101      	bne.n	800609e <uuidCommand+0xa>
 800609a:	b672      	cpsid	i
 800609c:	e7fe      	b.n	800609c <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 800609e:	220e      	movs	r2, #14
 80060a0:	4911      	ldr	r1, [pc, #68]	; (80060e8 <uuidCommand+0x54>)
 80060a2:	f00d fd7c 	bl	8013b9e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <uuidCommand+0x58>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4d11      	ldr	r5, [pc, #68]	; (80060f0 <uuidCommand+0x5c>)
 80060ac:	0022      	movs	r2, r4
 80060ae:	0029      	movs	r1, r5
 80060b0:	0020      	movs	r0, r4
 80060b2:	f00e fb0b 	bl	80146cc <siprintf>
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <uuidCommand+0x60>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	0022      	movs	r2, r4
 80060bc:	0029      	movs	r1, r5
 80060be:	0020      	movs	r0, r4
 80060c0:	f00e fb04 	bl	80146cc <siprintf>
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <uuidCommand+0x64>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	0022      	movs	r2, r4
 80060ca:	0029      	movs	r1, r5
 80060cc:	0020      	movs	r0, r4
 80060ce:	f00e fafd 	bl	80146cc <siprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 80060d2:	0020      	movs	r0, r4
 80060d4:	f7fa f820 	bl	8000118 <strlen>
 80060d8:	1820      	adds	r0, r4, r0
 80060da:	2203      	movs	r2, #3
 80060dc:	4907      	ldr	r1, [pc, #28]	; (80060fc <uuidCommand+0x68>)
 80060de:	f00d fd5e 	bl	8013b9e <memcpy>
}
 80060e2:	2000      	movs	r0, #0
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	08019ec0 	.word	0x08019ec0
 80060ec:	1ffff7ac 	.word	0x1ffff7ac
 80060f0:	08019ed0 	.word	0x08019ed0
 80060f4:	1ffff7b0 	.word	0x1ffff7b0
 80060f8:	1ffff7b4 	.word	0x1ffff7b4
 80060fc:	080196b8 	.word	0x080196b8

08006100 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006100:	b510      	push	{r4, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006106:	d101      	bne.n	800610c <timeCommand+0xc>
 8006108:	b672      	cpsid	i
 800610a:	e7fe      	b.n	800610a <timeCommand+0xa>
	GetTimeDate();
 800610c:	f007 ff4c 	bl	800dfa8 <GetTimeDate>
	if(BOS.hourformat == 24)
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <timeCommand+0x80>)
 8006112:	7b5b      	ldrb	r3, [r3, #13]
 8006114:	2b18      	cmp	r3, #24
 8006116:	d004      	beq.n	8006122 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d00e      	beq.n	800613a <timeCommand+0x3a>
}
 800611c:	2000      	movs	r0, #0
 800611e:	b004      	add	sp, #16
 8006120:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006122:	4917      	ldr	r1, [pc, #92]	; (8006180 <timeCommand+0x80>)
 8006124:	7c4b      	ldrb	r3, [r1, #17]
 8006126:	7c8a      	ldrb	r2, [r1, #18]
 8006128:	89c8      	ldrh	r0, [r1, #14]
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	7c09      	ldrb	r1, [r1, #16]
 800612e:	9100      	str	r1, [sp, #0]
 8006130:	4914      	ldr	r1, [pc, #80]	; (8006184 <timeCommand+0x84>)
 8006132:	0020      	movs	r0, r4
 8006134:	f00e faca 	bl	80146cc <siprintf>
 8006138:	e7f0      	b.n	800611c <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <timeCommand+0x80>)
 800613c:	7cdb      	ldrb	r3, [r3, #19]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10d      	bne.n	800615e <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8006142:	490f      	ldr	r1, [pc, #60]	; (8006180 <timeCommand+0x80>)
 8006144:	7c4b      	ldrb	r3, [r1, #17]
 8006146:	7c8a      	ldrb	r2, [r1, #18]
 8006148:	480f      	ldr	r0, [pc, #60]	; (8006188 <timeCommand+0x88>)
 800614a:	9002      	str	r0, [sp, #8]
 800614c:	89c8      	ldrh	r0, [r1, #14]
 800614e:	9001      	str	r0, [sp, #4]
 8006150:	7c09      	ldrb	r1, [r1, #16]
 8006152:	9100      	str	r1, [sp, #0]
 8006154:	490d      	ldr	r1, [pc, #52]	; (800618c <timeCommand+0x8c>)
 8006156:	0020      	movs	r0, r4
 8006158:	f00e fab8 	bl	80146cc <siprintf>
 800615c:	e7de      	b.n	800611c <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 800615e:	2b02      	cmp	r3, #2
 8006160:	d1dc      	bne.n	800611c <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8006162:	4907      	ldr	r1, [pc, #28]	; (8006180 <timeCommand+0x80>)
 8006164:	7c4b      	ldrb	r3, [r1, #17]
 8006166:	7c8a      	ldrb	r2, [r1, #18]
 8006168:	4809      	ldr	r0, [pc, #36]	; (8006190 <timeCommand+0x90>)
 800616a:	9002      	str	r0, [sp, #8]
 800616c:	89c8      	ldrh	r0, [r1, #14]
 800616e:	9001      	str	r0, [sp, #4]
 8006170:	7c09      	ldrb	r1, [r1, #16]
 8006172:	9100      	str	r1, [sp, #0]
 8006174:	4905      	ldr	r1, [pc, #20]	; (800618c <timeCommand+0x8c>)
 8006176:	0020      	movs	r0, r4
 8006178:	f00e faa8 	bl	80146cc <siprintf>
 800617c:	e7ce      	b.n	800611c <timeCommand+0x1c>
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	2000627c 	.word	0x2000627c
 8006184:	08019e08 	.word	0x08019e08
 8006188:	08019e5c 	.word	0x08019e5c
 800618c:	08019e30 	.word	0x08019e30
 8006190:	08019e60 	.word	0x08019e60

08006194 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006194:	b510      	push	{r4, lr}
 8006196:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006198:	d101      	bne.n	800619e <dateCommand+0xa>
 800619a:	b672      	cpsid	i
 800619c:	e7fe      	b.n	800619c <dateCommand+0x8>
	GetTimeDate();
 800619e:	f007 ff03 	bl	800dfa8 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80061a2:	f7fe fb2d 	bl	8004800 <GetDateString>
 80061a6:	0002      	movs	r2, r0
 80061a8:	4902      	ldr	r1, [pc, #8]	; (80061b4 <dateCommand+0x20>)
 80061aa:	0020      	movs	r0, r4
 80061ac:	f00e fa8e 	bl	80146cc <siprintf>
}
 80061b0:	2000      	movs	r0, #0
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	08018318 	.word	0x08018318

080061b8 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ba:	46c6      	mov	lr, r8
 80061bc:	b500      	push	{lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	0004      	movs	r4, r0
 80061c2:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d101      	bne.n	80061d2 <getCommand+0x1a>
 80061ce:	b672      	cpsid	i
 80061d0:	e7fe      	b.n	80061d0 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061d2:	aa01      	add	r2, sp, #4
 80061d4:	2101      	movs	r1, #1
 80061d6:	0030      	movs	r0, r6
 80061d8:	f008 fb14 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80061dc:	0005      	movs	r5, r0
 80061de:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <getCommand+0x1f8>)
 80061e0:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80061e2:	2204      	movs	r2, #4
 80061e4:	4973      	ldr	r1, [pc, #460]	; (80063b4 <getCommand+0x1fc>)
 80061e6:	f00e fab5 	bl	8014754 <strncmp>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d000      	beq.n	80061f0 <getCommand+0x38>
 80061ee:	e090      	b.n	8006312 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80061f0:	1d2f      	adds	r7, r5, #4
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	1f1e      	subs	r6, r3, #4
 80061f6:	0032      	movs	r2, r6
 80061f8:	496f      	ldr	r1, [pc, #444]	; (80063b8 <getCommand+0x200>)
 80061fa:	0038      	movs	r0, r7
 80061fc:	f00e faaa 	bl	8014754 <strncmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	d11e      	bne.n	8006242 <getCommand+0x8a>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006204:	4b6d      	ldr	r3, [pc, #436]	; (80063bc <getCommand+0x204>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b60      	cmp	r3, #96	; 0x60
 800620a:	d109      	bne.n	8006220 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800620c:	4a6c      	ldr	r2, [pc, #432]	; (80063c0 <getCommand+0x208>)
 800620e:	496d      	ldr	r1, [pc, #436]	; (80063c4 <getCommand+0x20c>)
 8006210:	0020      	movs	r0, r4
 8006212:	f00e fa5b 	bl	80146cc <siprintf>
}
 8006216:	2000      	movs	r0, #0
 8006218:	b002      	add	sp, #8
 800621a:	bc04      	pop	{r2}
 800621c:	4690      	mov	r8, r2
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006220:	2b20      	cmp	r3, #32
 8006222:	d105      	bne.n	8006230 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006224:	4a68      	ldr	r2, [pc, #416]	; (80063c8 <getCommand+0x210>)
 8006226:	4967      	ldr	r1, [pc, #412]	; (80063c4 <getCommand+0x20c>)
 8006228:	0020      	movs	r0, r4
 800622a:	f00e fa4f 	bl	80146cc <siprintf>
 800622e:	e7f2      	b.n	8006216 <getCommand+0x5e>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006230:	2b00      	cmp	r3, #0
 8006232:	d000      	beq.n	8006236 <getCommand+0x7e>
 8006234:	e0b6      	b.n	80063a4 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006236:	4a65      	ldr	r2, [pc, #404]	; (80063cc <getCommand+0x214>)
 8006238:	4962      	ldr	r1, [pc, #392]	; (80063c4 <getCommand+0x20c>)
 800623a:	0020      	movs	r0, r4
 800623c:	f00e fa46 	bl	80146cc <siprintf>
 8006240:	e7e9      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006242:	0032      	movs	r2, r6
 8006244:	4962      	ldr	r1, [pc, #392]	; (80063d0 <getCommand+0x218>)
 8006246:	0038      	movs	r0, r7
 8006248:	f00e fa84 	bl	8014754 <strncmp>
 800624c:	2800      	cmp	r0, #0
 800624e:	d11a      	bne.n	8006286 <getCommand+0xce>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006250:	4b5a      	ldr	r3, [pc, #360]	; (80063bc <getCommand+0x204>)
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d105      	bne.n	8006264 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006258:	4a59      	ldr	r2, [pc, #356]	; (80063c0 <getCommand+0x208>)
 800625a:	495a      	ldr	r1, [pc, #360]	; (80063c4 <getCommand+0x20c>)
 800625c:	0020      	movs	r0, r4
 800625e:	f00e fa35 	bl	80146cc <siprintf>
 8006262:	e7d8      	b.n	8006216 <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006268:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <getCommand+0x210>)
 800626a:	4956      	ldr	r1, [pc, #344]	; (80063c4 <getCommand+0x20c>)
 800626c:	0020      	movs	r0, r4
 800626e:	f00e fa2d 	bl	80146cc <siprintf>
 8006272:	e7d0      	b.n	8006216 <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006274:	2b00      	cmp	r3, #0
 8006276:	d000      	beq.n	800627a <getCommand+0xc2>
 8006278:	e094      	b.n	80063a4 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800627a:	4a54      	ldr	r2, [pc, #336]	; (80063cc <getCommand+0x214>)
 800627c:	4951      	ldr	r1, [pc, #324]	; (80063c4 <getCommand+0x20c>)
 800627e:	0020      	movs	r0, r4
 8006280:	f00e fa24 	bl	80146cc <siprintf>
 8006284:	e7c7      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006286:	0032      	movs	r2, r6
 8006288:	4952      	ldr	r1, [pc, #328]	; (80063d4 <getCommand+0x21c>)
 800628a:	0038      	movs	r0, r7
 800628c:	f00e fa62 	bl	8014754 <strncmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	d106      	bne.n	80062a2 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006294:	4b50      	ldr	r3, [pc, #320]	; (80063d8 <getCommand+0x220>)
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	4950      	ldr	r1, [pc, #320]	; (80063dc <getCommand+0x224>)
 800629a:	0020      	movs	r0, r4
 800629c:	f00e fa16 	bl	80146cc <siprintf>
 80062a0:	e7b9      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80062a2:	0032      	movs	r2, r6
 80062a4:	494e      	ldr	r1, [pc, #312]	; (80063e0 <getCommand+0x228>)
 80062a6:	0038      	movs	r0, r7
 80062a8:	f00e fa54 	bl	8014754 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d106      	bne.n	80062be <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80062b0:	4b49      	ldr	r3, [pc, #292]	; (80063d8 <getCommand+0x220>)
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	4949      	ldr	r1, [pc, #292]	; (80063dc <getCommand+0x224>)
 80062b6:	0020      	movs	r0, r4
 80062b8:	f00e fa08 	bl	80146cc <siprintf>
 80062bc:	e7ab      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80062be:	0032      	movs	r2, r6
 80062c0:	4948      	ldr	r1, [pc, #288]	; (80063e4 <getCommand+0x22c>)
 80062c2:	0038      	movs	r0, r7
 80062c4:	f00e fa46 	bl	8014754 <strncmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d106      	bne.n	80062da <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80062cc:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <getCommand+0x220>)
 80062ce:	885a      	ldrh	r2, [r3, #2]
 80062d0:	4942      	ldr	r1, [pc, #264]	; (80063dc <getCommand+0x224>)
 80062d2:	0020      	movs	r0, r4
 80062d4:	f00e f9fa 	bl	80146cc <siprintf>
 80062d8:	e79d      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80062da:	0032      	movs	r2, r6
 80062dc:	4942      	ldr	r1, [pc, #264]	; (80063e8 <getCommand+0x230>)
 80062de:	0038      	movs	r0, r7
 80062e0:	f00e fa38 	bl	8014754 <strncmp>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d106      	bne.n	80062f6 <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80062e8:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <getCommand+0x220>)
 80062ea:	791a      	ldrb	r2, [r3, #4]
 80062ec:	493b      	ldr	r1, [pc, #236]	; (80063dc <getCommand+0x224>)
 80062ee:	0020      	movs	r0, r4
 80062f0:	f00e f9ec 	bl	80146cc <siprintf>
 80062f4:	e78f      	b.n	8006216 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80062f6:	0032      	movs	r2, r6
 80062f8:	493c      	ldr	r1, [pc, #240]	; (80063ec <getCommand+0x234>)
 80062fa:	0038      	movs	r0, r7
 80062fc:	f00e fa2a 	bl	8014754 <strncmp>
 8006300:	2800      	cmp	r0, #0
 8006302:	d10d      	bne.n	8006320 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006304:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <getCommand+0x220>)
 8006306:	795a      	ldrb	r2, [r3, #5]
 8006308:	4934      	ldr	r1, [pc, #208]	; (80063dc <getCommand+0x224>)
 800630a:	0020      	movs	r0, r4
 800630c:	f00e f9de 	bl	80146cc <siprintf>
 8006310:	e781      	b.n	8006216 <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006312:	2205      	movs	r2, #5
 8006314:	4936      	ldr	r1, [pc, #216]	; (80063f0 <getCommand+0x238>)
 8006316:	0028      	movs	r0, r5
 8006318:	f00e fa1c 	bl	8014754 <strncmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	d005      	beq.n	800632c <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006320:	2213      	movs	r2, #19
 8006322:	4934      	ldr	r1, [pc, #208]	; (80063f4 <getCommand+0x23c>)
 8006324:	0020      	movs	r0, r4
 8006326:	f00d fc3a 	bl	8013b9e <memcpy>
 800632a:	e774      	b.n	8006216 <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800632c:	466a      	mov	r2, sp
 800632e:	2102      	movs	r1, #2
 8006330:	0030      	movs	r0, r6
 8006332:	f008 fa67 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006336:	0005      	movs	r5, r0
 8006338:	4f2f      	ldr	r7, [pc, #188]	; (80063f8 <getCommand+0x240>)
		for(i =0; i < MaxNumOfGroups; i++){
 800633a:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800633c:	0039      	movs	r1, r7
 800633e:	0028      	movs	r0, r5
 8006340:	f7f9 fee0 	bl	8000104 <strcmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	d011      	beq.n	800636c <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 8006348:	3601      	adds	r6, #1
 800634a:	b2f6      	uxtb	r6, r6
 800634c:	370a      	adds	r7, #10
 800634e:	2e0a      	cmp	r6, #10
 8006350:	d1f4      	bne.n	800633c <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006352:	002a      	movs	r2, r5
 8006354:	4929      	ldr	r1, [pc, #164]	; (80063fc <getCommand+0x244>)
 8006356:	0020      	movs	r0, r4
 8006358:	f00e f9b8 	bl	80146cc <siprintf>
			return pdFALSE;
 800635c:	e75b      	b.n	8006216 <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800635e:	002b      	movs	r3, r5
 8006360:	0022      	movs	r2, r4
 8006362:	4927      	ldr	r1, [pc, #156]	; (8006400 <getCommand+0x248>)
 8006364:	0020      	movs	r0, r4
 8006366:	f00e f9b1 	bl	80146cc <siprintf>
 800636a:	e015      	b.n	8006398 <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800636c:	002a      	movs	r2, r5
 800636e:	4925      	ldr	r1, [pc, #148]	; (8006404 <getCommand+0x24c>)
 8006370:	0020      	movs	r0, r4
 8006372:	f00e f9ab 	bl	80146cc <siprintf>
			for(j =1; j <= N; j++)						// N modules
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <getCommand+0x250>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d100      	bne.n	8006380 <getCommand+0x1c8>
 800637e:	e74a      	b.n	8006216 <getCommand+0x5e>
 8006380:	2501      	movs	r5, #1
 8006382:	002b      	movs	r3, r5
 8006384:	40b3      	lsls	r3, r6
 8006386:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 8006388:	4f20      	ldr	r7, [pc, #128]	; (800640c <getCommand+0x254>)
			for(j =1; j <= N; j++)						// N modules
 800638a:	4e1f      	ldr	r6, [pc, #124]	; (8006408 <getCommand+0x250>)
				if(InGroup(j,i)){
 800638c:	1e6b      	subs	r3, r5, #1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	5bdb      	ldrh	r3, [r3, r7]
 8006392:	4642      	mov	r2, r8
 8006394:	421a      	tst	r2, r3
 8006396:	d1e2      	bne.n	800635e <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 8006398:	3501      	adds	r5, #1
 800639a:	b2ed      	uxtb	r5, r5
 800639c:	7833      	ldrb	r3, [r6, #0]
 800639e:	42ab      	cmp	r3, r5
 80063a0:	d2f4      	bcs.n	800638c <getCommand+0x1d4>
 80063a2:	e738      	b.n	8006216 <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 80063a4:	002a      	movs	r2, r5
 80063a6:	491a      	ldr	r1, [pc, #104]	; (8006410 <getCommand+0x258>)
 80063a8:	0020      	movs	r0, r4
 80063aa:	f00e f98f 	bl	80146cc <siprintf>
 80063ae:	e732      	b.n	8006216 <getCommand+0x5e>
 80063b0:	20000a14 	.word	0x20000a14
 80063b4:	08018484 	.word	0x08018484
 80063b8:	0801848c 	.word	0x0801848c
 80063bc:	200061fc 	.word	0x200061fc
 80063c0:	0801787c 	.word	0x0801787c
 80063c4:	080176d4 	.word	0x080176d4
 80063c8:	08018498 	.word	0x08018498
 80063cc:	0801849c 	.word	0x0801849c
 80063d0:	080184a4 	.word	0x080184a4
 80063d4:	080184ac 	.word	0x080184ac
 80063d8:	2000627c 	.word	0x2000627c
 80063dc:	08017d3c 	.word	0x08017d3c
 80063e0:	080184b8 	.word	0x080184b8
 80063e4:	080184c4 	.word	0x080184c4
 80063e8:	080184d4 	.word	0x080184d4
 80063ec:	080184e8 	.word	0x080184e8
 80063f0:	080184fc 	.word	0x080184fc
 80063f4:	0801850c 	.word	0x0801850c
 80063f8:	200005f8 	.word	0x200005f8
 80063fc:	08018520 	.word	0x08018520
 8006400:	08018504 	.word	0x08018504
 8006404:	0801853c 	.word	0x0801853c
 8006408:	20000030 	.word	0x20000030
 800640c:	2000065c 	.word	0x2000065c
 8006410:	08018550 	.word	0x08018550

08006414 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	0004      	movs	r4, r0
 800641a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800641c:	2300      	movs	r3, #0
 800641e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006420:	2c00      	cmp	r4, #0
 8006422:	d101      	bne.n	8006428 <defaultCommand+0x14>
 8006424:	b672      	cpsid	i
 8006426:	e7fe      	b.n	8006426 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006428:	aa01      	add	r2, sp, #4
 800642a:	2101      	movs	r1, #1
 800642c:	f008 f9ea 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006430:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006432:	9e01      	ldr	r6, [sp, #4]
 8006434:	0032      	movs	r2, r6
 8006436:	491e      	ldr	r1, [pc, #120]	; (80064b0 <defaultCommand+0x9c>)
 8006438:	f00e f98c 	bl	8014754 <strncmp>
 800643c:	2800      	cmp	r0, #0
 800643e:	d01e      	beq.n	800647e <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006440:	0032      	movs	r2, r6
 8006442:	491c      	ldr	r1, [pc, #112]	; (80064b4 <defaultCommand+0xa0>)
 8006444:	0028      	movs	r0, r5
 8006446:	f00e f985 	bl	8014754 <strncmp>
 800644a:	2800      	cmp	r0, #0
 800644c:	d12a      	bne.n	80064a4 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800644e:	2200      	movs	r2, #0
 8006450:	2116      	movs	r1, #22
 8006452:	20ff      	movs	r0, #255	; 0xff
 8006454:	f003 fba8 	bl	8009ba8 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006458:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <defaultCommand+0xa4>)
 800645a:	2202      	movs	r2, #2
 800645c:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 800645e:	2064      	movs	r0, #100	; 0x64
 8006460:	f008 f8b7 	bl	800e5d2 <osDelay>
		ClearEEportsDir();
 8006464:	f7fd f97c 	bl	8003760 <ClearEEportsDir>
		ClearROtopology();
 8006468:	f005 fc84 	bl	800bd74 <ClearROtopology>
		osDelay(100);
 800646c:	2064      	movs	r0, #100	; 0x64
 800646e:	f008 f8b0 	bl	800e5d2 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006472:	2240      	movs	r2, #64	; 0x40
 8006474:	4911      	ldr	r1, [pc, #68]	; (80064bc <defaultCommand+0xa8>)
 8006476:	0020      	movs	r0, r4
 8006478:	f00d fb91 	bl	8013b9e <memcpy>
 800647c:	e00f      	b.n	800649e <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800647e:	4910      	ldr	r1, [pc, #64]	; (80064c0 <defaultCommand+0xac>)
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <defaultCommand+0xb0>)
 8006482:	000a      	movs	r2, r1
 8006484:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006486:	c223      	stmia	r2!, {r0, r1, r5}
 8006488:	cb23      	ldmia	r3!, {r0, r1, r5}
 800648a:	c223      	stmia	r2!, {r0, r1, r5}
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006490:	f7fd f922 	bl	80036d8 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006494:	2227      	movs	r2, #39	; 0x27
 8006496:	490c      	ldr	r1, [pc, #48]	; (80064c8 <defaultCommand+0xb4>)
 8006498:	0020      	movs	r0, r4
 800649a:	f00d fb80 	bl	8013b9e <memcpy>
}
 800649e:	2000      	movs	r0, #0
 80064a0:	b002      	add	sp, #8
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064a4:	220f      	movs	r2, #15
 80064a6:	4909      	ldr	r1, [pc, #36]	; (80064cc <defaultCommand+0xb8>)
 80064a8:	0020      	movs	r0, r4
 80064aa:	f00d fb78 	bl	8013b9e <memcpy>
 80064ae:	e7f6      	b.n	800649e <defaultCommand+0x8a>
 80064b0:	08018340 	.word	0x08018340
 80064b4:	08018370 	.word	0x08018370
 80064b8:	20000690 	.word	0x20000690
 80064bc:	08018388 	.word	0x08018388
 80064c0:	2000627c 	.word	0x2000627c
 80064c4:	20000014 	.word	0x20000014
 80064c8:	08018348 	.word	0x08018348
 80064cc:	08018378 	.word	0x08018378

080064d0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d2:	46ce      	mov	lr, r9
 80064d4:	4647      	mov	r7, r8
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b08d      	sub	sp, #52	; 0x34
 80064da:	0005      	movs	r5, r0
 80064dc:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80064de:	2300      	movs	r3, #0
 80064e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e2:	930a      	str	r3, [sp, #40]	; 0x28
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80064e6:	9308      	str	r3, [sp, #32]
 80064e8:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d101      	bne.n	80064f2 <setCommand+0x22>
 80064ee:	b672      	cpsid	i
 80064f0:	e7fe      	b.n	80064f0 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80064f4:	2101      	movs	r1, #1
 80064f6:	0020      	movs	r0, r4
 80064f8:	f008 f984 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80064fc:	0006      	movs	r6, r0
 80064fe:	4bb3      	ldr	r3, [pc, #716]	; (80067cc <setCommand+0x2fc>)
 8006500:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006502:	2204      	movs	r2, #4
 8006504:	49b2      	ldr	r1, [pc, #712]	; (80067d0 <setCommand+0x300>)
 8006506:	f00e f925 	bl	8014754 <strncmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	d015      	beq.n	800653a <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800650e:	2204      	movs	r2, #4
 8006510:	49b0      	ldr	r1, [pc, #704]	; (80067d4 <setCommand+0x304>)
 8006512:	0030      	movs	r0, r6
 8006514:	f00e f91e 	bl	8014754 <strncmp>
 8006518:	2800      	cmp	r0, #0
 800651a:	d100      	bne.n	800651e <setCommand+0x4e>
 800651c:	e182      	b.n	8006824 <setCommand+0x354>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800651e:	2204      	movs	r2, #4
 8006520:	49ad      	ldr	r1, [pc, #692]	; (80067d8 <setCommand+0x308>)
 8006522:	0030      	movs	r0, r6
 8006524:	f00e f916 	bl	8014754 <strncmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	d100      	bne.n	800652e <setCommand+0x5e>
 800652c:	e1e8      	b.n	8006900 <setCommand+0x430>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800652e:	2213      	movs	r2, #19
 8006530:	49aa      	ldr	r1, [pc, #680]	; (80067dc <setCommand+0x30c>)
 8006532:	0028      	movs	r0, r5
 8006534:	f00d fb33 	bl	8013b9e <memcpy>
 8006538:	e1d9      	b.n	80068ee <setCommand+0x41e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800653a:	aa0a      	add	r2, sp, #40	; 0x28
 800653c:	2102      	movs	r1, #2
 800653e:	0020      	movs	r0, r4
 8006540:	f008 f960 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006544:	0004      	movs	r4, r0
 8006546:	4ba6      	ldr	r3, [pc, #664]	; (80067e0 <setCommand+0x310>)
 8006548:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800654a:	4ba0      	ldr	r3, [pc, #640]	; (80067cc <setCommand+0x2fc>)
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	3604      	adds	r6, #4
 8006550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006552:	1f1f      	subs	r7, r3, #4
 8006554:	003a      	movs	r2, r7
 8006556:	49a3      	ldr	r1, [pc, #652]	; (80067e4 <setCommand+0x314>)
 8006558:	0030      	movs	r0, r6
 800655a:	f00e f8fb 	bl	8014754 <strncmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	d153      	bne.n	800660a <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006562:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006564:	0032      	movs	r2, r6
 8006566:	49a0      	ldr	r1, [pc, #640]	; (80067e8 <setCommand+0x318>)
 8006568:	0020      	movs	r0, r4
 800656a:	f00e f8f3 	bl	8014754 <strncmp>
 800656e:	2800      	cmp	r0, #0
 8006570:	d115      	bne.n	800659e <setCommand+0xce>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006572:	4b9e      	ldr	r3, [pc, #632]	; (80067ec <setCommand+0x31c>)
 8006574:	2160      	movs	r1, #96	; 0x60
 8006576:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	4319      	orrs	r1, r3
 800657e:	308a      	adds	r0, #138	; 0x8a
 8006580:	0040      	lsls	r0, r0, #1
 8006582:	f001 f9e1 	bl	8007948 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006586:	4b91      	ldr	r3, [pc, #580]	; (80067cc <setCommand+0x2fc>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800658e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006590:	4b93      	ldr	r3, [pc, #588]	; (80067e0 <setCommand+0x310>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4996      	ldr	r1, [pc, #600]	; (80067f0 <setCommand+0x320>)
 8006596:	0028      	movs	r0, r5
 8006598:	f00e f898 	bl	80146cc <siprintf>
	return pdFALSE;
 800659c:	e1a7      	b.n	80068ee <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800659e:	0032      	movs	r2, r6
 80065a0:	4994      	ldr	r1, [pc, #592]	; (80067f4 <setCommand+0x324>)
 80065a2:	0020      	movs	r0, r4
 80065a4:	f00e f8d6 	bl	8014754 <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d10a      	bne.n	80065c2 <setCommand+0xf2>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80065ac:	4b8f      	ldr	r3, [pc, #572]	; (80067ec <setCommand+0x31c>)
 80065ae:	2120      	movs	r1, #32
 80065b0:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	4319      	orrs	r1, r3
 80065b8:	308a      	adds	r0, #138	; 0x8a
 80065ba:	0040      	lsls	r0, r0, #1
 80065bc:	f001 f9c4 	bl	8007948 <EE_WriteVariable>
 80065c0:	e7e1      	b.n	8006586 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80065c2:	0032      	movs	r2, r6
 80065c4:	498c      	ldr	r1, [pc, #560]	; (80067f8 <setCommand+0x328>)
 80065c6:	0020      	movs	r0, r4
 80065c8:	f00e f8c4 	bl	8014754 <strncmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d10a      	bne.n	80065e6 <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80065d0:	4b86      	ldr	r3, [pc, #536]	; (80067ec <setCommand+0x31c>)
 80065d2:	2140      	movs	r1, #64	; 0x40
 80065d4:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	4319      	orrs	r1, r3
 80065dc:	308a      	adds	r0, #138	; 0x8a
 80065de:	0040      	lsls	r0, r0, #1
 80065e0:	f001 f9b2 	bl	8007948 <EE_WriteVariable>
 80065e4:	e7cf      	b.n	8006586 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80065e6:	0032      	movs	r2, r6
 80065e8:	4984      	ldr	r1, [pc, #528]	; (80067fc <setCommand+0x32c>)
 80065ea:	0020      	movs	r0, r4
 80065ec:	f00e f8b2 	bl	8014754 <strncmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d000      	beq.n	80065f6 <setCommand+0x126>
 80065f4:	e2a9      	b.n	8006b4a <setCommand+0x67a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80065f6:	4b7d      	ldr	r3, [pc, #500]	; (80067ec <setCommand+0x31c>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80065fc:	7859      	ldrb	r1, [r3, #1]
 80065fe:	0209      	lsls	r1, r1, #8
 8006600:	308a      	adds	r0, #138	; 0x8a
 8006602:	0040      	lsls	r0, r0, #1
 8006604:	f001 f9a0 	bl	8007948 <EE_WriteVariable>
 8006608:	e7bd      	b.n	8006586 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800660a:	003a      	movs	r2, r7
 800660c:	497c      	ldr	r1, [pc, #496]	; (8006800 <setCommand+0x330>)
 800660e:	0030      	movs	r0, r6
 8006610:	f00e f8a0 	bl	8014754 <strncmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	d14a      	bne.n	80066ae <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006618:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800661a:	0032      	movs	r2, r6
 800661c:	4972      	ldr	r1, [pc, #456]	; (80067e8 <setCommand+0x318>)
 800661e:	0020      	movs	r0, r4
 8006620:	f00e f898 	bl	8014754 <strncmp>
 8006624:	2800      	cmp	r0, #0
 8006626:	d10b      	bne.n	8006640 <setCommand+0x170>
				BOSMessaging.trace =TRACE_BOTH;
 8006628:	4b70      	ldr	r3, [pc, #448]	; (80067ec <setCommand+0x31c>)
 800662a:	2203      	movs	r2, #3
 800662c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	21c0      	movs	r1, #192	; 0xc0
 8006632:	0089      	lsls	r1, r1, #2
 8006634:	4319      	orrs	r1, r3
 8006636:	308a      	adds	r0, #138	; 0x8a
 8006638:	0040      	lsls	r0, r0, #1
 800663a:	f001 f985 	bl	8007948 <EE_WriteVariable>
 800663e:	e7a2      	b.n	8006586 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006640:	0032      	movs	r2, r6
 8006642:	496c      	ldr	r1, [pc, #432]	; (80067f4 <setCommand+0x324>)
 8006644:	0020      	movs	r0, r4
 8006646:	f00e f885 	bl	8014754 <strncmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	d10b      	bne.n	8006666 <setCommand+0x196>
				BOSMessaging.trace =TRACE_MESSAGE;
 800664e:	4b67      	ldr	r3, [pc, #412]	; (80067ec <setCommand+0x31c>)
 8006650:	2201      	movs	r2, #1
 8006652:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2180      	movs	r1, #128	; 0x80
 8006658:	0049      	lsls	r1, r1, #1
 800665a:	4319      	orrs	r1, r3
 800665c:	308a      	adds	r0, #138	; 0x8a
 800665e:	4090      	lsls	r0, r2
 8006660:	f001 f972 	bl	8007948 <EE_WriteVariable>
 8006664:	e78f      	b.n	8006586 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006666:	0032      	movs	r2, r6
 8006668:	495e      	ldr	r1, [pc, #376]	; (80067e4 <setCommand+0x314>)
 800666a:	0020      	movs	r0, r4
 800666c:	f00e f872 	bl	8014754 <strncmp>
 8006670:	2800      	cmp	r0, #0
 8006672:	d10b      	bne.n	800668c <setCommand+0x1bc>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006674:	4b5d      	ldr	r3, [pc, #372]	; (80067ec <setCommand+0x31c>)
 8006676:	2202      	movs	r2, #2
 8006678:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	0089      	lsls	r1, r1, #2
 8006680:	4319      	orrs	r1, r3
 8006682:	308a      	adds	r0, #138	; 0x8a
 8006684:	0040      	lsls	r0, r0, #1
 8006686:	f001 f95f 	bl	8007948 <EE_WriteVariable>
 800668a:	e77c      	b.n	8006586 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800668c:	0032      	movs	r2, r6
 800668e:	495b      	ldr	r1, [pc, #364]	; (80067fc <setCommand+0x32c>)
 8006690:	0020      	movs	r0, r4
 8006692:	f00e f85f 	bl	8014754 <strncmp>
 8006696:	2800      	cmp	r0, #0
 8006698:	d000      	beq.n	800669c <setCommand+0x1cc>
 800669a:	e256      	b.n	8006b4a <setCommand+0x67a>
				BOSMessaging.trace =TRACE_NONE;
 800669c:	4b53      	ldr	r3, [pc, #332]	; (80067ec <setCommand+0x31c>)
 800669e:	2200      	movs	r2, #0
 80066a0:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	308a      	adds	r0, #138	; 0x8a
 80066a6:	0040      	lsls	r0, r0, #1
 80066a8:	f001 f94e 	bl	8007948 <EE_WriteVariable>
 80066ac:	e76b      	b.n	8006586 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80066ae:	003a      	movs	r2, r7
 80066b0:	4954      	ldr	r1, [pc, #336]	; (8006804 <setCommand+0x334>)
 80066b2:	0030      	movs	r0, r6
 80066b4:	f00e f84e 	bl	8014754 <strncmp>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d128      	bne.n	800670e <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 80066bc:	0020      	movs	r0, r4
 80066be:	f00d f9f6 	bl	8013aae <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80066c2:	23e1      	movs	r3, #225	; 0xe1
 80066c4:	031b      	lsls	r3, r3, #12
 80066c6:	4298      	cmp	r0, r3
 80066c8:	d900      	bls.n	80066cc <setCommand+0x1fc>
 80066ca:	e23e      	b.n	8006b4a <setCommand+0x67a>
				BOS.clibaudrate =temp2;
 80066cc:	4c4e      	ldr	r4, [pc, #312]	; (8006808 <setCommand+0x338>)
 80066ce:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80066d0:	b281      	uxth	r1, r0
 80066d2:	208c      	movs	r0, #140	; 0x8c
 80066d4:	0040      	lsls	r0, r0, #1
 80066d6:	f001 f937 	bl	8007948 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80066da:	68a1      	ldr	r1, [r4, #8]
 80066dc:	0c09      	lsrs	r1, r1, #16
 80066de:	201a      	movs	r0, #26
 80066e0:	30ff      	adds	r0, #255	; 0xff
 80066e2:	f001 f931 	bl	8007948 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <setCommand+0x2fc>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ee:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066f0:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <setCommand+0x310>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	493e      	ldr	r1, [pc, #248]	; (80067f0 <setCommand+0x320>)
 80066f6:	0028      	movs	r0, r5
 80066f8:	f00d ffe8 	bl	80146cc <siprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80066fc:	4943      	ldr	r1, [pc, #268]	; (800680c <setCommand+0x33c>)
 80066fe:	0028      	movs	r0, r5
 8006700:	f00e f804 	bl	801470c <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006704:	4942      	ldr	r1, [pc, #264]	; (8006810 <setCommand+0x340>)
 8006706:	0028      	movs	r0, r5
 8006708:	f00e f800 	bl	801470c <strcat>
 800670c:	e0ef      	b.n	80068ee <setCommand+0x41e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800670e:	003a      	movs	r2, r7
 8006710:	4940      	ldr	r1, [pc, #256]	; (8006814 <setCommand+0x344>)
 8006712:	0030      	movs	r0, r6
 8006714:	f00e f81e 	bl	8014754 <strncmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	d10d      	bne.n	8006738 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 800671c:	0020      	movs	r0, r4
 800671e:	f00d f9c6 	bl	8013aae <atoi>
 8006722:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006724:	2900      	cmp	r1, #0
 8006726:	d100      	bne.n	800672a <setCommand+0x25a>
 8006728:	e20f      	b.n	8006b4a <setCommand+0x67a>
				BOS.buttons.debounce =temp16;
 800672a:	4b37      	ldr	r3, [pc, #220]	; (8006808 <setCommand+0x338>)
 800672c:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 800672e:	2016      	movs	r0, #22
 8006730:	30ff      	adds	r0, #255	; 0xff
 8006732:	f001 f909 	bl	8007948 <EE_WriteVariable>
 8006736:	e726      	b.n	8006586 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006738:	003a      	movs	r2, r7
 800673a:	4937      	ldr	r1, [pc, #220]	; (8006818 <setCommand+0x348>)
 800673c:	0030      	movs	r0, r6
 800673e:	f00e f809 	bl	8014754 <strncmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	d10d      	bne.n	8006762 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 8006746:	0020      	movs	r0, r4
 8006748:	f00d f9b1 	bl	8013aae <atoi>
 800674c:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800674e:	2900      	cmp	r1, #0
 8006750:	d100      	bne.n	8006754 <setCommand+0x284>
 8006752:	e1fa      	b.n	8006b4a <setCommand+0x67a>
				BOS.buttons.singleClickTime =temp16;
 8006754:	4b2c      	ldr	r3, [pc, #176]	; (8006808 <setCommand+0x338>)
 8006756:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006758:	208b      	movs	r0, #139	; 0x8b
 800675a:	0040      	lsls	r0, r0, #1
 800675c:	f001 f8f4 	bl	8007948 <EE_WriteVariable>
 8006760:	e711      	b.n	8006586 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006762:	003a      	movs	r2, r7
 8006764:	492d      	ldr	r1, [pc, #180]	; (800681c <setCommand+0x34c>)
 8006766:	0030      	movs	r0, r6
 8006768:	f00d fff4 	bl	8014754 <strncmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	d112      	bne.n	8006796 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006770:	0020      	movs	r0, r4
 8006772:	f00d f99c 	bl	8013aae <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006776:	1e43      	subs	r3, r0, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	2bfe      	cmp	r3, #254	; 0xfe
 800677c:	d900      	bls.n	8006780 <setCommand+0x2b0>
 800677e:	e1e4      	b.n	8006b4a <setCommand+0x67a>
				BOS.buttons.minInterClickTime =temp16;
 8006780:	b2c0      	uxtb	r0, r0
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <setCommand+0x338>)
 8006784:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006786:	7959      	ldrb	r1, [r3, #5]
 8006788:	0209      	lsls	r1, r1, #8
 800678a:	4301      	orrs	r1, r0
 800678c:	2018      	movs	r0, #24
 800678e:	30ff      	adds	r0, #255	; 0xff
 8006790:	f001 f8da 	bl	8007948 <EE_WriteVariable>
 8006794:	e6f7      	b.n	8006586 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006796:	003a      	movs	r2, r7
 8006798:	4921      	ldr	r1, [pc, #132]	; (8006820 <setCommand+0x350>)
 800679a:	0030      	movs	r0, r6
 800679c:	f00d ffda 	bl	8014754 <strncmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d000      	beq.n	80067a6 <setCommand+0x2d6>
 80067a4:	e6c3      	b.n	800652e <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 80067a6:	0020      	movs	r0, r4
 80067a8:	f00d f981 	bl	8013aae <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067ac:	1e43      	subs	r3, r0, #1
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2bfe      	cmp	r3, #254	; 0xfe
 80067b2:	d900      	bls.n	80067b6 <setCommand+0x2e6>
 80067b4:	e1c9      	b.n	8006b4a <setCommand+0x67a>
				BOS.buttons.maxInterClickTime =temp16;
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <setCommand+0x338>)
 80067b8:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067ba:	0200      	lsls	r0, r0, #8
 80067bc:	7919      	ldrb	r1, [r3, #4]
 80067be:	4301      	orrs	r1, r0
 80067c0:	b289      	uxth	r1, r1
 80067c2:	2018      	movs	r0, #24
 80067c4:	30ff      	adds	r0, #255	; 0xff
 80067c6:	f001 f8bf 	bl	8007948 <EE_WriteVariable>
 80067ca:	e6dc      	b.n	8006586 <setCommand+0xb6>
 80067cc:	20000a10 	.word	0x20000a10
 80067d0:	08018484 	.word	0x08018484
 80067d4:	08018bb0 	.word	0x08018bb0
 80067d8:	08018bbc 	.word	0x08018bbc
 80067dc:	0801850c 	.word	0x0801850c
 80067e0:	20000a1c 	.word	0x20000a1c
 80067e4:	0801848c 	.word	0x0801848c
 80067e8:	0801787c 	.word	0x0801787c
 80067ec:	200061fc 	.word	0x200061fc
 80067f0:	08018ab8 	.word	0x08018ab8
 80067f4:	08018aac 	.word	0x08018aac
 80067f8:	08018ab4 	.word	0x08018ab4
 80067fc:	0801849c 	.word	0x0801849c
 8006800:	080184a4 	.word	0x080184a4
 8006804:	080184ac 	.word	0x080184ac
 8006808:	2000627c 	.word	0x2000627c
 800680c:	08018acc 	.word	0x08018acc
 8006810:	08018afc 	.word	0x08018afc
 8006814:	080184b8 	.word	0x080184b8
 8006818:	080184c4 	.word	0x080184c4
 800681c:	080184d4 	.word	0x080184d4
 8006820:	080184e8 	.word	0x080184e8
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006824:	aa0a      	add	r2, sp, #40	; 0x28
 8006826:	2102      	movs	r1, #2
 8006828:	0020      	movs	r0, r4
 800682a:	f007 ffeb 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800682e:	4bca      	ldr	r3, [pc, #808]	; (8006b58 <setCommand+0x688>)
 8006830:	4699      	mov	r9, r3
 8006832:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006834:	aa09      	add	r2, sp, #36	; 0x24
 8006836:	2103      	movs	r1, #3
 8006838:	0020      	movs	r0, r4
 800683a:	f007 ffe3 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800683e:	4fc7      	ldr	r7, [pc, #796]	; (8006b5c <setCommand+0x68c>)
 8006840:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006842:	aa08      	add	r2, sp, #32
 8006844:	2104      	movs	r1, #4
 8006846:	0020      	movs	r0, r4
 8006848:	f007 ffdc 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800684c:	4ec4      	ldr	r6, [pc, #784]	; (8006b60 <setCommand+0x690>)
 800684e:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006850:	aa07      	add	r2, sp, #28
 8006852:	2105      	movs	r1, #5
 8006854:	0020      	movs	r0, r4
 8006856:	f007 ffd5 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800685a:	4cc2      	ldr	r4, [pc, #776]	; (8006b64 <setCommand+0x694>)
 800685c:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800685e:	464b      	mov	r3, r9
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f00d f924 	bl	8013aae <atoi>
 8006866:	b2c3      	uxtb	r3, r0
 8006868:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f00d f91f 	bl	8013aae <atoi>
 8006870:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006872:	6830      	ldr	r0, [r6, #0]
 8006874:	f00d f91b 	bl	8013aae <atoi>
 8006878:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 800687a:	6824      	ldr	r4, [r4, #0]
 800687c:	2c00      	cmp	r4, #0
 800687e:	d010      	beq.n	80068a2 <setCommand+0x3d2>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006880:	2202      	movs	r2, #2
 8006882:	49b9      	ldr	r1, [pc, #740]	; (8006b68 <setCommand+0x698>)
 8006884:	0020      	movs	r0, r4
 8006886:	f00d ff65 	bl	8014754 <strncmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	d035      	beq.n	80068fa <setCommand+0x42a>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800688e:	2202      	movs	r2, #2
 8006890:	49b6      	ldr	r1, [pc, #728]	; (8006b6c <setCommand+0x69c>)
 8006892:	0020      	movs	r0, r4
 8006894:	f00d ff5e 	bl	8014754 <strncmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	d000      	beq.n	800689e <setCommand+0x3ce>
 800689c:	e155      	b.n	8006b4a <setCommand+0x67a>
				temp84 =RTC_PM;
 800689e:	2302      	movs	r3, #2
 80068a0:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068a2:	464b      	mov	r3, r9
 80068a4:	2b17      	cmp	r3, #23
 80068a6:	d900      	bls.n	80068aa <setCommand+0x3da>
 80068a8:	e14f      	b.n	8006b4a <setCommand+0x67a>
 80068aa:	2f3b      	cmp	r7, #59	; 0x3b
 80068ac:	d900      	bls.n	80068b0 <setCommand+0x3e0>
 80068ae:	e14c      	b.n	8006b4a <setCommand+0x67a>
 80068b0:	2e3b      	cmp	r6, #59	; 0x3b
 80068b2:	d900      	bls.n	80068b6 <setCommand+0x3e6>
 80068b4:	e149      	b.n	8006b4a <setCommand+0x67a>
				GetTimeDate();
 80068b6:	f007 fb77 	bl	800dfa8 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80068ba:	4cad      	ldr	r4, [pc, #692]	; (8006b70 <setCommand+0x6a0>)
 80068bc:	7d23      	ldrb	r3, [r4, #20]
 80068be:	8b22      	ldrh	r2, [r4, #24]
 80068c0:	7d61      	ldrb	r1, [r4, #21]
 80068c2:	7da0      	ldrb	r0, [r4, #22]
 80068c4:	7b24      	ldrb	r4, [r4, #12]
 80068c6:	b264      	sxtb	r4, r4
 80068c8:	9404      	str	r4, [sp, #16]
 80068ca:	4644      	mov	r4, r8
 80068cc:	9403      	str	r4, [sp, #12]
 80068ce:	464c      	mov	r4, r9
 80068d0:	9402      	str	r4, [sp, #8]
 80068d2:	9701      	str	r7, [sp, #4]
 80068d4:	9600      	str	r6, [sp, #0]
 80068d6:	f007 fb0d 	bl	800def4 <BOS_CalendarConfig>
 80068da:	0006      	movs	r6, r0
	if(result == BOS_OK){
 80068dc:	2e00      	cmp	r6, #0
 80068de:	d100      	bne.n	80068e2 <setCommand+0x412>
 80068e0:	e651      	b.n	8006586 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 80068e2:	2e67      	cmp	r6, #103	; 0x67
 80068e4:	d100      	bne.n	80068e8 <setCommand+0x418>
 80068e6:	e622      	b.n	800652e <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 80068e8:	2e68      	cmp	r6, #104	; 0x68
 80068ea:	d100      	bne.n	80068ee <setCommand+0x41e>
 80068ec:	e12d      	b.n	8006b4a <setCommand+0x67a>
}
 80068ee:	2000      	movs	r0, #0
 80068f0:	b00d      	add	sp, #52	; 0x34
 80068f2:	bc0c      	pop	{r2, r3}
 80068f4:	4690      	mov	r8, r2
 80068f6:	4699      	mov	r9, r3
 80068f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 80068fa:	2301      	movs	r3, #1
 80068fc:	4698      	mov	r8, r3
 80068fe:	e7d0      	b.n	80068a2 <setCommand+0x3d2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006900:	aa0a      	add	r2, sp, #40	; 0x28
 8006902:	2102      	movs	r1, #2
 8006904:	0020      	movs	r0, r4
 8006906:	f007 ff7d 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800690a:	4e93      	ldr	r6, [pc, #588]	; (8006b58 <setCommand+0x688>)
 800690c:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800690e:	aa09      	add	r2, sp, #36	; 0x24
 8006910:	2103      	movs	r1, #3
 8006912:	0020      	movs	r0, r4
 8006914:	f007 ff76 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006918:	4b90      	ldr	r3, [pc, #576]	; (8006b5c <setCommand+0x68c>)
 800691a:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800691c:	aa08      	add	r2, sp, #32
 800691e:	2104      	movs	r1, #4
 8006920:	0020      	movs	r0, r4
 8006922:	f007 ff6f 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006926:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <setCommand+0x690>)
 8006928:	4698      	mov	r8, r3
 800692a:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800692c:	aa07      	add	r2, sp, #28
 800692e:	2105      	movs	r1, #5
 8006930:	0020      	movs	r0, r4
 8006932:	f007 ff67 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006936:	4c8b      	ldr	r4, [pc, #556]	; (8006b64 <setCommand+0x694>)
 8006938:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 800693a:	4643      	mov	r3, r8
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f00d f8b6 	bl	8013aae <atoi>
 8006942:	b2c3      	uxtb	r3, r0
 8006944:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	f00d f8b1 	bl	8013aae <atoi>
 800694c:	b283      	uxth	r3, r0
 800694e:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006950:	6834      	ldr	r4, [r6, #0]
 8006952:	2206      	movs	r2, #6
 8006954:	4987      	ldr	r1, [pc, #540]	; (8006b74 <setCommand+0x6a4>)
 8006956:	0020      	movs	r0, r4
 8006958:	f00d fefc 	bl	8014754 <strncmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	d100      	bne.n	8006962 <setCommand+0x492>
 8006960:	e195      	b.n	8006c8e <setCommand+0x7be>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006962:	2207      	movs	r2, #7
 8006964:	4984      	ldr	r1, [pc, #528]	; (8006b78 <setCommand+0x6a8>)
 8006966:	0020      	movs	r0, r4
 8006968:	f00d fef4 	bl	8014754 <strncmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	d100      	bne.n	8006972 <setCommand+0x4a2>
 8006970:	e19b      	b.n	8006caa <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006972:	2209      	movs	r2, #9
 8006974:	4981      	ldr	r1, [pc, #516]	; (8006b7c <setCommand+0x6ac>)
 8006976:	0020      	movs	r0, r4
 8006978:	f00d feec 	bl	8014754 <strncmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	d100      	bne.n	8006982 <setCommand+0x4b2>
 8006980:	e195      	b.n	8006cae <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006982:	2208      	movs	r2, #8
 8006984:	497e      	ldr	r1, [pc, #504]	; (8006b80 <setCommand+0x6b0>)
 8006986:	0020      	movs	r0, r4
 8006988:	f00d fee4 	bl	8014754 <strncmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	d100      	bne.n	8006992 <setCommand+0x4c2>
 8006990:	e18f      	b.n	8006cb2 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006992:	2206      	movs	r2, #6
 8006994:	497b      	ldr	r1, [pc, #492]	; (8006b84 <setCommand+0x6b4>)
 8006996:	0020      	movs	r0, r4
 8006998:	f00d fedc 	bl	8014754 <strncmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	d100      	bne.n	80069a2 <setCommand+0x4d2>
 80069a0:	e189      	b.n	8006cb6 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80069a2:	2208      	movs	r2, #8
 80069a4:	4978      	ldr	r1, [pc, #480]	; (8006b88 <setCommand+0x6b8>)
 80069a6:	0020      	movs	r0, r4
 80069a8:	f00d fed4 	bl	8014754 <strncmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d100      	bne.n	80069b2 <setCommand+0x4e2>
 80069b0:	e183      	b.n	8006cba <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80069b2:	2206      	movs	r2, #6
 80069b4:	4975      	ldr	r1, [pc, #468]	; (8006b8c <setCommand+0x6bc>)
 80069b6:	0020      	movs	r0, r4
 80069b8:	f00d fecc 	bl	8014754 <strncmp>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d100      	bne.n	80069c2 <setCommand+0x4f2>
 80069c0:	e17d      	b.n	8006cbe <setCommand+0x7ee>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069c2:	4b66      	ldr	r3, [pc, #408]	; (8006b5c <setCommand+0x68c>)
 80069c4:	681c      	ldr	r4, [r3, #0]
 80069c6:	2207      	movs	r2, #7
 80069c8:	4971      	ldr	r1, [pc, #452]	; (8006b90 <setCommand+0x6c0>)
 80069ca:	0020      	movs	r0, r4
 80069cc:	f00d fec2 	bl	8014754 <strncmp>
			result =BOS_ERR_WrongValue;
 80069d0:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d101      	bne.n	80069da <setCommand+0x50a>
			result =BOS_ERR_WrongValue;
 80069d6:	2668      	movs	r6, #104	; 0x68
 80069d8:	e783      	b.n	80068e2 <setCommand+0x412>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069da:	2202      	movs	r2, #2
 80069dc:	496d      	ldr	r1, [pc, #436]	; (8006b94 <setCommand+0x6c4>)
 80069de:	0020      	movs	r0, r4
 80069e0:	f00d feb8 	bl	8014754 <strncmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d100      	bne.n	80069ea <setCommand+0x51a>
 80069e8:	e104      	b.n	8006bf4 <setCommand+0x724>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80069ea:	2208      	movs	r2, #8
 80069ec:	496a      	ldr	r1, [pc, #424]	; (8006b98 <setCommand+0x6c8>)
 80069ee:	0020      	movs	r0, r4
 80069f0:	f00d feb0 	bl	8014754 <strncmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d100      	bne.n	80069fa <setCommand+0x52a>
 80069f8:	e11f      	b.n	8006c3a <setCommand+0x76a>
 80069fa:	2202      	movs	r2, #2
 80069fc:	4967      	ldr	r1, [pc, #412]	; (8006b9c <setCommand+0x6cc>)
 80069fe:	0020      	movs	r0, r4
 8006a00:	f00d fea8 	bl	8014754 <strncmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d100      	bne.n	8006a0a <setCommand+0x53a>
 8006a08:	e119      	b.n	8006c3e <setCommand+0x76e>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	4964      	ldr	r1, [pc, #400]	; (8006ba0 <setCommand+0x6d0>)
 8006a0e:	0020      	movs	r0, r4
 8006a10:	f00d fea0 	bl	8014754 <strncmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d100      	bne.n	8006a1a <setCommand+0x54a>
 8006a18:	e113      	b.n	8006c42 <setCommand+0x772>
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	4961      	ldr	r1, [pc, #388]	; (8006ba4 <setCommand+0x6d4>)
 8006a1e:	0020      	movs	r0, r4
 8006a20:	f00d fe98 	bl	8014754 <strncmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d100      	bne.n	8006a2a <setCommand+0x55a>
 8006a28:	e10d      	b.n	8006c46 <setCommand+0x776>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	495e      	ldr	r1, [pc, #376]	; (8006ba8 <setCommand+0x6d8>)
 8006a2e:	0020      	movs	r0, r4
 8006a30:	f00d fe90 	bl	8014754 <strncmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d100      	bne.n	8006a3a <setCommand+0x56a>
 8006a38:	e107      	b.n	8006c4a <setCommand+0x77a>
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	495b      	ldr	r1, [pc, #364]	; (8006bac <setCommand+0x6dc>)
 8006a3e:	0020      	movs	r0, r4
 8006a40:	f00d fe88 	bl	8014754 <strncmp>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d100      	bne.n	8006a4a <setCommand+0x57a>
 8006a48:	e101      	b.n	8006c4e <setCommand+0x77e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	4958      	ldr	r1, [pc, #352]	; (8006bb0 <setCommand+0x6e0>)
 8006a4e:	0020      	movs	r0, r4
 8006a50:	f00d fe80 	bl	8014754 <strncmp>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d100      	bne.n	8006a5a <setCommand+0x58a>
 8006a58:	e0fb      	b.n	8006c52 <setCommand+0x782>
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	4955      	ldr	r1, [pc, #340]	; (8006bb4 <setCommand+0x6e4>)
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f00d fe78 	bl	8014754 <strncmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d100      	bne.n	8006a6a <setCommand+0x59a>
 8006a68:	e0f5      	b.n	8006c56 <setCommand+0x786>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	4952      	ldr	r1, [pc, #328]	; (8006bb8 <setCommand+0x6e8>)
 8006a6e:	0020      	movs	r0, r4
 8006a70:	f00d fe70 	bl	8014754 <strncmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d100      	bne.n	8006a7a <setCommand+0x5aa>
 8006a78:	e0ef      	b.n	8006c5a <setCommand+0x78a>
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	494f      	ldr	r1, [pc, #316]	; (8006bbc <setCommand+0x6ec>)
 8006a7e:	0020      	movs	r0, r4
 8006a80:	f00d fe68 	bl	8014754 <strncmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d100      	bne.n	8006a8a <setCommand+0x5ba>
 8006a88:	e0e9      	b.n	8006c5e <setCommand+0x78e>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	494c      	ldr	r1, [pc, #304]	; (8006bc0 <setCommand+0x6f0>)
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f00d fe60 	bl	8014754 <strncmp>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d100      	bne.n	8006a9a <setCommand+0x5ca>
 8006a98:	e0e3      	b.n	8006c62 <setCommand+0x792>
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	4949      	ldr	r1, [pc, #292]	; (8006bc4 <setCommand+0x6f4>)
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	f00d fe58 	bl	8014754 <strncmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d100      	bne.n	8006aaa <setCommand+0x5da>
 8006aa8:	e0dd      	b.n	8006c66 <setCommand+0x796>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006aaa:	2205      	movs	r2, #5
 8006aac:	4946      	ldr	r1, [pc, #280]	; (8006bc8 <setCommand+0x6f8>)
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f00d fe50 	bl	8014754 <strncmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d100      	bne.n	8006aba <setCommand+0x5ea>
 8006ab8:	e0d7      	b.n	8006c6a <setCommand+0x79a>
 8006aba:	2202      	movs	r2, #2
 8006abc:	4943      	ldr	r1, [pc, #268]	; (8006bcc <setCommand+0x6fc>)
 8006abe:	0020      	movs	r0, r4
 8006ac0:	f00d fe48 	bl	8014754 <strncmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d100      	bne.n	8006aca <setCommand+0x5fa>
 8006ac8:	e0d1      	b.n	8006c6e <setCommand+0x79e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006aca:	2209      	movs	r2, #9
 8006acc:	4940      	ldr	r1, [pc, #256]	; (8006bd0 <setCommand+0x700>)
 8006ace:	0020      	movs	r0, r4
 8006ad0:	f00d fe40 	bl	8014754 <strncmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d100      	bne.n	8006ada <setCommand+0x60a>
 8006ad8:	e0cb      	b.n	8006c72 <setCommand+0x7a2>
 8006ada:	2202      	movs	r2, #2
 8006adc:	493d      	ldr	r1, [pc, #244]	; (8006bd4 <setCommand+0x704>)
 8006ade:	0020      	movs	r0, r4
 8006ae0:	f00d fe38 	bl	8014754 <strncmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d100      	bne.n	8006aea <setCommand+0x61a>
 8006ae8:	e0c5      	b.n	8006c76 <setCommand+0x7a6>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006aea:	2207      	movs	r2, #7
 8006aec:	493a      	ldr	r1, [pc, #232]	; (8006bd8 <setCommand+0x708>)
 8006aee:	0020      	movs	r0, r4
 8006af0:	f00d fe30 	bl	8014754 <strncmp>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d100      	bne.n	8006afa <setCommand+0x62a>
 8006af8:	e0bf      	b.n	8006c7a <setCommand+0x7aa>
 8006afa:	2202      	movs	r2, #2
 8006afc:	4937      	ldr	r1, [pc, #220]	; (8006bdc <setCommand+0x70c>)
 8006afe:	0020      	movs	r0, r4
 8006b00:	f00d fe28 	bl	8014754 <strncmp>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d100      	bne.n	8006b0a <setCommand+0x63a>
 8006b08:	e0b9      	b.n	8006c7e <setCommand+0x7ae>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	4934      	ldr	r1, [pc, #208]	; (8006be0 <setCommand+0x710>)
 8006b0e:	0020      	movs	r0, r4
 8006b10:	f00d fe20 	bl	8014754 <strncmp>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d100      	bne.n	8006b1a <setCommand+0x64a>
 8006b18:	e0b3      	b.n	8006c82 <setCommand+0x7b2>
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4931      	ldr	r1, [pc, #196]	; (8006be4 <setCommand+0x714>)
 8006b1e:	0020      	movs	r0, r4
 8006b20:	f00d fe18 	bl	8014754 <strncmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d100      	bne.n	8006b2a <setCommand+0x65a>
 8006b28:	e0ad      	b.n	8006c86 <setCommand+0x7b6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	492e      	ldr	r1, [pc, #184]	; (8006be8 <setCommand+0x718>)
 8006b2e:	0020      	movs	r0, r4
 8006b30:	f00d fe10 	bl	8014754 <strncmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d100      	bne.n	8006b3a <setCommand+0x66a>
 8006b38:	e0a7      	b.n	8006c8a <setCommand+0x7ba>
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	492b      	ldr	r1, [pc, #172]	; (8006bec <setCommand+0x71c>)
 8006b3e:	0020      	movs	r0, r4
 8006b40:	f00d fe08 	bl	8014754 <strncmp>
			temp82 =DECEMBER;
 8006b44:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d055      	beq.n	8006bf6 <setCommand+0x726>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006b4a:	220f      	movs	r2, #15
 8006b4c:	4928      	ldr	r1, [pc, #160]	; (8006bf0 <setCommand+0x720>)
 8006b4e:	0028      	movs	r0, r5
 8006b50:	f00d f825 	bl	8013b9e <memcpy>
 8006b54:	e6cb      	b.n	80068ee <setCommand+0x41e>
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	20000a1c 	.word	0x20000a1c
 8006b5c:	20000a24 	.word	0x20000a24
 8006b60:	20000a28 	.word	0x20000a28
 8006b64:	20000a2c 	.word	0x20000a2c
 8006b68:	0801a308 	.word	0x0801a308
 8006b6c:	08018bb8 	.word	0x08018bb8
 8006b70:	2000627c 	.word	0x2000627c
 8006b74:	08018bc4 	.word	0x08018bc4
 8006b78:	08018bcc 	.word	0x08018bcc
 8006b7c:	08018bd4 	.word	0x08018bd4
 8006b80:	08018be0 	.word	0x08018be0
 8006b84:	08018bec 	.word	0x08018bec
 8006b88:	08018bf4 	.word	0x08018bf4
 8006b8c:	08018c00 	.word	0x08018c00
 8006b90:	08018c9c 	.word	0x08018c9c
 8006b94:	08018c08 	.word	0x08018c08
 8006b98:	08018c0c 	.word	0x08018c0c
 8006b9c:	08018c18 	.word	0x08018c18
 8006ba0:	08018c1c 	.word	0x08018c1c
 8006ba4:	08018c24 	.word	0x08018c24
 8006ba8:	08018c28 	.word	0x08018c28
 8006bac:	08018c30 	.word	0x08018c30
 8006bb0:	08018c34 	.word	0x08018c34
 8006bb4:	08018c38 	.word	0x08018c38
 8006bb8:	08018c3c 	.word	0x08018c3c
 8006bbc:	08018c44 	.word	0x08018c44
 8006bc0:	08018c48 	.word	0x08018c48
 8006bc4:	08018c50 	.word	0x08018c50
 8006bc8:	08018c54 	.word	0x08018c54
 8006bcc:	08018c5c 	.word	0x08018c5c
 8006bd0:	08018c60 	.word	0x08018c60
 8006bd4:	08018c6c 	.word	0x08018c6c
 8006bd8:	08018c70 	.word	0x08018c70
 8006bdc:	08018c78 	.word	0x08018c78
 8006be0:	08018c7c 	.word	0x08018c7c
 8006be4:	08018c88 	.word	0x08018c88
 8006be8:	08018c8c 	.word	0x08018c8c
 8006bec:	08018c98 	.word	0x08018c98
 8006bf0:	08018378 	.word	0x08018378
			temp82 =JANUARY;
 8006bf4:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	d000      	beq.n	8006bfc <setCommand+0x72c>
 8006bfa:	e672      	b.n	80068e2 <setCommand+0x412>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006bfc:	4643      	mov	r3, r8
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	2b1e      	cmp	r3, #30
 8006c02:	d8a2      	bhi.n	8006b4a <setCommand+0x67a>
 8006c04:	4b2f      	ldr	r3, [pc, #188]	; (8006cc4 <setCommand+0x7f4>)
 8006c06:	444b      	add	r3, r9
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b64      	cmp	r3, #100	; 0x64
 8006c0c:	d89d      	bhi.n	8006b4a <setCommand+0x67a>
				GetTimeDate();
 8006c0e:	f007 f9cb 	bl	800dfa8 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006c12:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <setCommand+0x7f8>)
 8006c14:	220c      	movs	r2, #12
 8006c16:	569a      	ldrsb	r2, [r3, r2]
 8006c18:	9204      	str	r2, [sp, #16]
 8006c1a:	7cda      	ldrb	r2, [r3, #19]
 8006c1c:	9203      	str	r2, [sp, #12]
 8006c1e:	7c9a      	ldrb	r2, [r3, #18]
 8006c20:	9202      	str	r2, [sp, #8]
 8006c22:	7c5a      	ldrb	r2, [r3, #17]
 8006c24:	9201      	str	r2, [sp, #4]
 8006c26:	7c1b      	ldrb	r3, [r3, #16]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	003b      	movs	r3, r7
 8006c2c:	464a      	mov	r2, r9
 8006c2e:	4641      	mov	r1, r8
 8006c30:	0020      	movs	r0, r4
 8006c32:	f007 f95f 	bl	800def4 <BOS_CalendarConfig>
 8006c36:	0006      	movs	r6, r0
 8006c38:	e650      	b.n	80068dc <setCommand+0x40c>
			temp82 =FEBRUARY;
 8006c3a:	2402      	movs	r4, #2
 8006c3c:	e7db      	b.n	8006bf6 <setCommand+0x726>
 8006c3e:	2402      	movs	r4, #2
 8006c40:	e7d9      	b.n	8006bf6 <setCommand+0x726>
			temp82 =MARCH;
 8006c42:	2403      	movs	r4, #3
 8006c44:	e7d7      	b.n	8006bf6 <setCommand+0x726>
 8006c46:	2403      	movs	r4, #3
 8006c48:	e7d5      	b.n	8006bf6 <setCommand+0x726>
			temp82 =APRIL;
 8006c4a:	2404      	movs	r4, #4
 8006c4c:	e7d3      	b.n	8006bf6 <setCommand+0x726>
 8006c4e:	2404      	movs	r4, #4
 8006c50:	e7d1      	b.n	8006bf6 <setCommand+0x726>
			temp82 =MAY;
 8006c52:	2405      	movs	r4, #5
 8006c54:	e7cf      	b.n	8006bf6 <setCommand+0x726>
 8006c56:	2405      	movs	r4, #5
 8006c58:	e7cd      	b.n	8006bf6 <setCommand+0x726>
			temp82 =JUNE;
 8006c5a:	2406      	movs	r4, #6
 8006c5c:	e7cb      	b.n	8006bf6 <setCommand+0x726>
 8006c5e:	2406      	movs	r4, #6
 8006c60:	e7c9      	b.n	8006bf6 <setCommand+0x726>
			temp82 =JULY;
 8006c62:	2407      	movs	r4, #7
 8006c64:	e7c7      	b.n	8006bf6 <setCommand+0x726>
 8006c66:	2407      	movs	r4, #7
 8006c68:	e7c5      	b.n	8006bf6 <setCommand+0x726>
			temp82 =AUGUST;
 8006c6a:	2408      	movs	r4, #8
 8006c6c:	e7c3      	b.n	8006bf6 <setCommand+0x726>
 8006c6e:	2408      	movs	r4, #8
 8006c70:	e7c1      	b.n	8006bf6 <setCommand+0x726>
			temp82 =SEPTEMBER;
 8006c72:	2409      	movs	r4, #9
 8006c74:	e7bf      	b.n	8006bf6 <setCommand+0x726>
 8006c76:	2409      	movs	r4, #9
 8006c78:	e7bd      	b.n	8006bf6 <setCommand+0x726>
			temp82 =OCTOBER;
 8006c7a:	240a      	movs	r4, #10
 8006c7c:	e7bb      	b.n	8006bf6 <setCommand+0x726>
 8006c7e:	240a      	movs	r4, #10
 8006c80:	e7b9      	b.n	8006bf6 <setCommand+0x726>
			temp82 =NOVEMBER;
 8006c82:	240b      	movs	r4, #11
 8006c84:	e7b7      	b.n	8006bf6 <setCommand+0x726>
 8006c86:	240b      	movs	r4, #11
 8006c88:	e7b5      	b.n	8006bf6 <setCommand+0x726>
			temp82 =DECEMBER;
 8006c8a:	240c      	movs	r4, #12
 8006c8c:	e7b3      	b.n	8006bf6 <setCommand+0x726>
			temp81 =MONDAY;
 8006c8e:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c90:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <setCommand+0x7fc>)
 8006c92:	681c      	ldr	r4, [r3, #0]
 8006c94:	2207      	movs	r2, #7
 8006c96:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <setCommand+0x800>)
 8006c98:	0020      	movs	r0, r4
 8006c9a:	f00d fd5b 	bl	8014754 <strncmp>
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d000      	beq.n	8006ca6 <setCommand+0x7d6>
 8006ca4:	e699      	b.n	80069da <setCommand+0x50a>
			temp82 =JANUARY;
 8006ca6:	2401      	movs	r4, #1
 8006ca8:	e7a8      	b.n	8006bfc <setCommand+0x72c>
			temp81 =TUESDAY;
 8006caa:	2702      	movs	r7, #2
 8006cac:	e7f0      	b.n	8006c90 <setCommand+0x7c0>
			temp81 =WEDNESDAY;
 8006cae:	2703      	movs	r7, #3
 8006cb0:	e7ee      	b.n	8006c90 <setCommand+0x7c0>
			temp81 =THURSDAY;
 8006cb2:	2704      	movs	r7, #4
 8006cb4:	e7ec      	b.n	8006c90 <setCommand+0x7c0>
			temp81 =FRIDAY;
 8006cb6:	2705      	movs	r7, #5
 8006cb8:	e7ea      	b.n	8006c90 <setCommand+0x7c0>
			temp81 =SATURDAY;
 8006cba:	2706      	movs	r7, #6
 8006cbc:	e7e8      	b.n	8006c90 <setCommand+0x7c0>
			temp81 =SUNDAY;
 8006cbe:	2707      	movs	r7, #7
 8006cc0:	e7e6      	b.n	8006c90 <setCommand+0x7c0>
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	fffff830 	.word	0xfffff830
 8006cc8:	2000627c 	.word	0x2000627c
 8006ccc:	20000a24 	.word	0x20000a24
 8006cd0:	08018c9c 	.word	0x08018c9c

08006cd4 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd4:	b530      	push	{r4, r5, lr}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	0005      	movs	r5, r0
 8006cda:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	d101      	bne.n	8006ce8 <removebuttonCommand+0x14>
 8006ce4:	b672      	cpsid	i
 8006ce6:	e7fe      	b.n	8006ce6 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ce8:	aa01      	add	r2, sp, #4
 8006cea:	2101      	movs	r1, #1
 8006cec:	f007 fd8a 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006cf4:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006cf6:	2b70      	cmp	r3, #112	; 0x70
 8006cf8:	d007      	beq.n	8006d0a <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	f001 fd1e 	bl	800873c <RemovePortButton>
	if(result == BOS_OK){
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d007      	beq.n	8006d14 <removebuttonCommand+0x40>
}
 8006d04:	2000      	movs	r0, #0
 8006d06:	b003      	add	sp, #12
 8006d08:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f00c fed5 	bl	8013aba <atol>
 8006d10:	b2c4      	uxtb	r4, r0
 8006d12:	e7f2      	b.n	8006cfa <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006d14:	0023      	movs	r3, r4
 8006d16:	0022      	movs	r2, r4
 8006d18:	4902      	ldr	r1, [pc, #8]	; (8006d24 <removebuttonCommand+0x50>)
 8006d1a:	0028      	movs	r0, r5
 8006d1c:	f00d fcd6 	bl	80146cc <siprintf>
 8006d20:	e7f0      	b.n	8006d04 <removebuttonCommand+0x30>
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	0801895c 	.word	0x0801895c

08006d28 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	0006      	movs	r6, r0
 8006d2e:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d101      	bne.n	8006d3e <addbuttonCommand+0x16>
 8006d3a:	b672      	cpsid	i
 8006d3c:	e7fe      	b.n	8006d3c <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d3e:	aa05      	add	r2, sp, #20
 8006d40:	2101      	movs	r1, #1
 8006d42:	9803      	ldr	r0, [sp, #12]
 8006d44:	f007 fd5e 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006d48:	0004      	movs	r4, r0
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <addbuttonCommand+0xb0>)
 8006d4c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d4e:	9d05      	ldr	r5, [sp, #20]
 8006d50:	002a      	movs	r2, r5
 8006d52:	4922      	ldr	r1, [pc, #136]	; (8006ddc <addbuttonCommand+0xb4>)
 8006d54:	f00d fcfe 	bl	8014754 <strncmp>
		type =MOMENTARY_NO;
 8006d58:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d017      	beq.n	8006d8e <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006d5e:	002a      	movs	r2, r5
 8006d60:	491f      	ldr	r1, [pc, #124]	; (8006de0 <addbuttonCommand+0xb8>)
 8006d62:	0020      	movs	r0, r4
 8006d64:	f00d fcf6 	bl	8014754 <strncmp>
		type =MOMENTARY_NC;
 8006d68:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d00f      	beq.n	8006d8e <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006d6e:	002a      	movs	r2, r5
 8006d70:	491c      	ldr	r1, [pc, #112]	; (8006de4 <addbuttonCommand+0xbc>)
 8006d72:	0020      	movs	r0, r4
 8006d74:	f00d fcee 	bl	8014754 <strncmp>
		type =ONOFF_NO;
 8006d78:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d007      	beq.n	8006d8e <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006d7e:	002a      	movs	r2, r5
 8006d80:	4919      	ldr	r1, [pc, #100]	; (8006de8 <addbuttonCommand+0xc0>)
 8006d82:	0020      	movs	r0, r4
 8006d84:	f00d fce6 	bl	8014754 <strncmp>
		type =ONOFF_NC;
 8006d88:	4243      	negs	r3, r0
 8006d8a:	4158      	adcs	r0, r3
 8006d8c:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d8e:	aa04      	add	r2, sp, #16
 8006d90:	2102      	movs	r1, #2
 8006d92:	9803      	ldr	r0, [sp, #12]
 8006d94:	f007 fd36 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006d98:	2300      	movs	r3, #0
 8006d9a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006d9c:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006d9e:	2b70      	cmp	r3, #112	; 0x70
 8006da0:	d008      	beq.n	8006db4 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006da2:	0021      	movs	r1, r4
 8006da4:	0038      	movs	r0, r7
 8006da6:	f001 fc37 	bl	8008618 <AddPortButton>
	if(result == BOS_OK){
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d007      	beq.n	8006dbe <addbuttonCommand+0x96>
}
 8006dae:	2000      	movs	r0, #0
 8006db0:	b007      	add	sp, #28
 8006db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006db4:	3001      	adds	r0, #1
 8006db6:	f00c fe80 	bl	8013aba <atol>
 8006dba:	b2c4      	uxtb	r4, r0
 8006dbc:	e7f1      	b.n	8006da2 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006dbe:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <addbuttonCommand+0xb0>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9905      	ldr	r1, [sp, #20]
 8006dc6:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006dc8:	9400      	str	r4, [sp, #0]
 8006dca:	0023      	movs	r3, r4
 8006dcc:	4907      	ldr	r1, [pc, #28]	; (8006dec <addbuttonCommand+0xc4>)
 8006dce:	0030      	movs	r0, r6
 8006dd0:	f00d fc7c 	bl	80146cc <siprintf>
 8006dd4:	e7eb      	b.n	8006dae <addbuttonCommand+0x86>
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	20000a0c 	.word	0x20000a0c
 8006ddc:	0801821c 	.word	0x0801821c
 8006de0:	0801822c 	.word	0x0801822c
 8006de4:	0801823c 	.word	0x0801823c
 8006de8:	08018248 	.word	0x08018248
 8006dec:	08018254 	.word	0x08018254

08006df0 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	46de      	mov	lr, fp
 8006df4:	4657      	mov	r7, sl
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b09b      	sub	sp, #108	; 0x6c
 8006dfa:	0005      	movs	r5, r0
 8006dfc:	9009      	str	r0, [sp, #36]	; 0x24
 8006dfe:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	9319      	str	r3, [sp, #100]	; 0x64
 8006e04:	9318      	str	r3, [sp, #96]	; 0x60
 8006e06:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006e08:	9316      	str	r3, [sp, #88]	; 0x58
 8006e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8006e0c:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006e0e:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006e10:	220a      	movs	r2, #10
 8006e12:	2100      	movs	r1, #0
 8006e14:	a810      	add	r0, sp, #64	; 0x40
 8006e16:	f00c fecb 	bl	8013bb0 <memset>
 8006e1a:	220a      	movs	r2, #10
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	a80d      	add	r0, sp, #52	; 0x34
 8006e20:	f00c fec6 	bl	8013bb0 <memset>
 8006e24:	220a      	movs	r2, #10
 8006e26:	2100      	movs	r1, #0
 8006e28:	a80a      	add	r0, sp, #40	; 0x28
 8006e2a:	f00c fec1 	bl	8013bb0 <memset>
	configASSERT(pcWriteBuffer);
 8006e2e:	2d00      	cmp	r5, #0
 8006e30:	d101      	bne.n	8006e36 <scastCommand+0x46>
 8006e32:	b672      	cpsid	i
 8006e34:	e7fe      	b.n	8006e34 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e36:	aa19      	add	r2, sp, #100	; 0x64
 8006e38:	2101      	movs	r1, #1
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f007 fce2 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006e40:	2300      	movs	r3, #0
 8006e42:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e44:	2200      	movs	r2, #0
 8006e46:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006e48:	2b50      	cmp	r3, #80	; 0x50
 8006e4a:	d100      	bne.n	8006e4e <scastCommand+0x5e>
 8006e4c:	e06d      	b.n	8006f2a <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e4e:	aa18      	add	r2, sp, #96	; 0x60
 8006e50:	2102      	movs	r1, #2
 8006e52:	0020      	movs	r0, r4
 8006e54:	f007 fcd6 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006e58:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006e5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e5c:	a810      	add	r0, sp, #64	; 0x40
 8006e5e:	f00d fc8a 	bl	8014776 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006e62:	a810      	add	r0, sp, #64	; 0x40
 8006e64:	f7fd fa5a 	bl	800431c <GetID>
 8006e68:	b2c3      	uxtb	r3, r0
 8006e6a:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e6c:	aa17      	add	r2, sp, #92	; 0x5c
 8006e6e:	2103      	movs	r1, #3
 8006e70:	0020      	movs	r0, r4
 8006e72:	f007 fcc7 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006e76:	2300      	movs	r3, #0
 8006e78:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e7a:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006e7c:	2b70      	cmp	r3, #112	; 0x70
 8006e7e:	d05a      	beq.n	8006f36 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006e80:	aa16      	add	r2, sp, #88	; 0x58
 8006e82:	2104      	movs	r1, #4
 8006e84:	0020      	movs	r0, r4
 8006e86:	f007 fcbd 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8006e8a:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006e8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e8e:	a80d      	add	r0, sp, #52	; 0x34
 8006e90:	f00d fc71 	bl	8014776 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006e94:	a80d      	add	r0, sp, #52	; 0x34
 8006e96:	f7fd fa41 	bl	800431c <GetID>
 8006e9a:	b2c3      	uxtb	r3, r0
 8006e9c:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006e9e:	aa15      	add	r2, sp, #84	; 0x54
 8006ea0:	2105      	movs	r1, #5
 8006ea2:	0020      	movs	r0, r4
 8006ea4:	f007 fcae 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ea8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006eaa:	0032      	movs	r2, r6
 8006eac:	492b      	ldr	r1, [pc, #172]	; (8006f5c <scastCommand+0x16c>)
 8006eae:	9007      	str	r0, [sp, #28]
 8006eb0:	f00d fc50 	bl	8014754 <strncmp>
		direction =FORWARD;
 8006eb4:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d00f      	beq.n	8006eda <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006eba:	0032      	movs	r2, r6
 8006ebc:	4928      	ldr	r1, [pc, #160]	; (8006f60 <scastCommand+0x170>)
 8006ebe:	9807      	ldr	r0, [sp, #28]
 8006ec0:	f00d fc48 	bl	8014754 <strncmp>
		direction =BACKWARD;
 8006ec4:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d007      	beq.n	8006eda <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006eca:	0032      	movs	r2, r6
 8006ecc:	4925      	ldr	r1, [pc, #148]	; (8006f64 <scastCommand+0x174>)
 8006ece:	9807      	ldr	r0, [sp, #28]
 8006ed0:	f00d fc40 	bl	8014754 <strncmp>
		direction =BIDIRECTIONAL;
 8006ed4:	4243      	negs	r3, r0
 8006ed6:	4158      	adcs	r0, r3
 8006ed8:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006eda:	0032      	movs	r2, r6
 8006edc:	9907      	ldr	r1, [sp, #28]
 8006ede:	a80a      	add	r0, sp, #40	; 0x28
 8006ee0:	f00d fc49 	bl	8014776 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006ee4:	aa14      	add	r2, sp, #80	; 0x50
 8006ee6:	2106      	movs	r1, #6
 8006ee8:	0020      	movs	r0, r4
 8006eea:	f007 fc8b 	bl	800e804 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006eee:	f00c fde4 	bl	8013aba <atol>
 8006ef2:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ef4:	aa13      	add	r2, sp, #76	; 0x4c
 8006ef6:	2107      	movs	r1, #7
 8006ef8:	0020      	movs	r0, r4
 8006efa:	f007 fc83 	bl	800e804 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006efe:	f00c fddc 	bl	8013aba <atol>
 8006f02:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006f04:	2300      	movs	r3, #0
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	9601      	str	r6, [sp, #4]
 8006f0c:	9500      	str	r5, [sp, #0]
 8006f0e:	465b      	mov	r3, fp
 8006f10:	003a      	movs	r2, r7
 8006f12:	4651      	mov	r1, sl
 8006f14:	9808      	ldr	r0, [sp, #32]
 8006f16:	f002 fe6d 	bl	8009bf4 <StartScastDMAStream>
	if(result == BOS_OK){
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d010      	beq.n	8006f40 <scastCommand+0x150>
}
 8006f1e:	2000      	movs	r0, #0
 8006f20:	b01b      	add	sp, #108	; 0x6c
 8006f22:	bc0c      	pop	{r2, r3}
 8006f24:	4692      	mov	sl, r2
 8006f26:	469b      	mov	fp, r3
 8006f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f00c fdc5 	bl	8013aba <atol>
 8006f30:	b2c3      	uxtb	r3, r0
 8006f32:	9308      	str	r3, [sp, #32]
 8006f34:	e78b      	b.n	8006e4e <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f36:	3001      	adds	r0, #1
 8006f38:	f00c fdbf 	bl	8013aba <atol>
 8006f3c:	b2c7      	uxtb	r7, r0
 8006f3e:	e79f      	b.n	8006e80 <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006f40:	9404      	str	r4, [sp, #16]
 8006f42:	9603      	str	r6, [sp, #12]
 8006f44:	ab0d      	add	r3, sp, #52	; 0x34
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	9701      	str	r7, [sp, #4]
 8006f4a:	ab10      	add	r3, sp, #64	; 0x40
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	aa0a      	add	r2, sp, #40	; 0x28
 8006f52:	4905      	ldr	r1, [pc, #20]	; (8006f68 <scastCommand+0x178>)
 8006f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f56:	f00d fbb9 	bl	80146cc <siprintf>
 8006f5a:	e7e0      	b.n	8006f1e <scastCommand+0x12e>
 8006f5c:	080189a4 	.word	0x080189a4
 8006f60:	080189ac 	.word	0x080189ac
 8006f64:	080189b8 	.word	0x080189b8
 8006f68:	080189c8 	.word	0x080189c8

08006f6c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006f72:	d039      	beq.n	8006fe8 <infoCommand+0x7c>
	if(N > 1)
 8006f74:	4b26      	ldr	r3, [pc, #152]	; (8007010 <infoCommand+0xa4>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006f78:	2500      	movs	r5, #0
	if(N > 1)
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d902      	bls.n	8006f84 <infoCommand+0x18>
		result =ReadPortsDir();
 8006f7e:	f7fd fb21 	bl	80045c4 <ReadPortsDir>
 8006f82:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006f84:	4b22      	ldr	r3, [pc, #136]	; (8007010 <infoCommand+0xa4>)
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	4922      	ldr	r1, [pc, #136]	; (8007014 <infoCommand+0xa8>)
 8006f8a:	0020      	movs	r0, r4
 8006f8c:	f00d fb9e 	bl	80146cc <siprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006f90:	0020      	movs	r0, r4
 8006f92:	f7f9 f8c1 	bl	8000118 <strlen>
 8006f96:	b282      	uxth	r2, r0
 8006f98:	4e1f      	ldr	r6, [pc, #124]	; (8007018 <infoCommand+0xac>)
 8006f9a:	7830      	ldrb	r0, [r6, #0]
 8006f9c:	2701      	movs	r7, #1
 8006f9e:	427f      	negs	r7, r7
 8006fa0:	9700      	str	r7, [sp, #0]
 8006fa2:	2332      	movs	r3, #50	; 0x32
 8006fa4:	0021      	movs	r1, r4
 8006fa6:	f007 f9e7 	bl	800e378 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006faa:	2213      	movs	r2, #19
 8006fac:	491b      	ldr	r1, [pc, #108]	; (800701c <infoCommand+0xb0>)
 8006fae:	0020      	movs	r0, r4
 8006fb0:	f00c fdf5 	bl	8013b9e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006fb4:	0020      	movs	r0, r4
 8006fb6:	f7f9 f8af 	bl	8000118 <strlen>
 8006fba:	b282      	uxth	r2, r0
 8006fbc:	7830      	ldrb	r0, [r6, #0]
 8006fbe:	9700      	str	r7, [sp, #0]
 8006fc0:	2332      	movs	r3, #50	; 0x32
 8006fc2:	0021      	movs	r1, r4
 8006fc4:	f007 f9d8 	bl	800e378 <writePxMutex>
	DisplayTopology(PcPort);
 8006fc8:	7830      	ldrb	r0, [r6, #0]
 8006fca:	f7fc ff05 	bl	8003dd8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006fce:	7830      	ldrb	r0, [r6, #0]
 8006fd0:	f7fc ffd0 	bl	8003f74 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006fd4:	2d02      	cmp	r5, #2
 8006fd6:	d009      	beq.n	8006fec <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006fd8:	2202      	movs	r2, #2
 8006fda:	4911      	ldr	r1, [pc, #68]	; (8007020 <infoCommand+0xb4>)
 8006fdc:	0020      	movs	r0, r4
 8006fde:	f00c fdde 	bl	8013b9e <memcpy>
}
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	b003      	add	sp, #12
 8006fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006fe8:	b672      	cpsid	i
 8006fea:	e7fe      	b.n	8006fea <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006fec:	2244      	movs	r2, #68	; 0x44
 8006fee:	490d      	ldr	r1, [pc, #52]	; (8007024 <infoCommand+0xb8>)
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	f00c fdd4 	bl	8013b9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006ff6:	0020      	movs	r0, r4
 8006ff8:	f7f9 f88e 	bl	8000118 <strlen>
 8006ffc:	b282      	uxth	r2, r0
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <infoCommand+0xac>)
 8007000:	7818      	ldrb	r0, [r3, #0]
 8007002:	003b      	movs	r3, r7
 8007004:	9700      	str	r7, [sp, #0]
 8007006:	3333      	adds	r3, #51	; 0x33
 8007008:	0021      	movs	r1, r4
 800700a:	f007 f9b5 	bl	800e378 <writePxMutex>
 800700e:	e7e3      	b.n	8006fd8 <infoCommand+0x6c>
 8007010:	20000030 	.word	0x20000030
 8007014:	08018760 	.word	0x08018760
 8007018:	200002b8 	.word	0x200002b8
 800701c:	0801877c 	.word	0x0801877c
 8007020:	080176f4 	.word	0x080176f4
 8007024:	08018790 	.word	0x08018790

08007028 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007028:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 800702a:	2800      	cmp	r0, #0
 800702c:	d101      	bne.n	8007032 <statusCommand+0xa>
 800702e:	b672      	cpsid	i
 8007030:	e7fe      	b.n	8007030 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8007032:	2000      	movs	r0, #0
 8007034:	f7fd f812 	bl	800405c <DisplayModuleStatus>
}
 8007038:	2000      	movs	r0, #0
 800703a:	bd10      	pop	{r4, pc}

0800703c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703e:	46ce      	mov	lr, r9
 8007040:	b500      	push	{lr}
 8007042:	b090      	sub	sp, #64	; 0x40
 8007044:	0004      	movs	r4, r0
 8007046:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8007048:	2227      	movs	r2, #39	; 0x27
 800704a:	2100      	movs	r1, #0
 800704c:	a806      	add	r0, sp, #24
 800704e:	f00c fdaf 	bl	8013bb0 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8007052:	220a      	movs	r2, #10
 8007054:	2100      	movs	r1, #0
 8007056:	a803      	add	r0, sp, #12
 8007058:	f00c fdaa 	bl	8013bb0 <memset>
	configASSERT(pcWriteBuffer);
 800705c:	2c00      	cmp	r4, #0
 800705e:	d101      	bne.n	8007064 <groupCommand+0x28>
 8007060:	b672      	cpsid	i
 8007062:	e7fe      	b.n	8007062 <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007064:	4d54      	ldr	r5, [pc, #336]	; (80071b8 <groupCommand+0x17c>)
 8007066:	002a      	movs	r2, r5
 8007068:	2101      	movs	r1, #1
 800706a:	9801      	ldr	r0, [sp, #4]
 800706c:	f007 fbca 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8007070:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8007072:	682a      	ldr	r2, [r5, #0]
 8007074:	a803      	add	r0, sp, #12
 8007076:	f00d fb7e 	bl	8014776 <strncpy>
 800707a:	4d50      	ldr	r5, [pc, #320]	; (80071bc <groupCommand+0x180>)
 800707c:	002f      	movs	r7, r5
 800707e:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8007080:	0029      	movs	r1, r5
 8007082:	a803      	add	r0, sp, #12
 8007084:	f7f9 f83e 	bl	8000104 <strcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	d016      	beq.n	80070ba <groupCommand+0x7e>
 800708c:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 800708e:	42bd      	cmp	r5, r7
 8007090:	d1f6      	bne.n	8007080 <groupCommand+0x44>
	type =1;
 8007092:	2701      	movs	r7, #1
	count =2;
 8007094:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <groupCommand+0x184>)
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 800709a:	3208      	adds	r2, #8
 800709c:	4949      	ldr	r1, [pc, #292]	; (80071c4 <groupCommand+0x188>)
 800709e:	0020      	movs	r0, r4
 80070a0:	f00c fd7d 	bl	8013b9e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80070a4:	4a48      	ldr	r2, [pc, #288]	; (80071c8 <groupCommand+0x18c>)
 80070a6:	2102      	movs	r1, #2
 80070a8:	9801      	ldr	r0, [sp, #4]
 80070aa:	f007 fbab 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80070ae:	4b47      	ldr	r3, [pc, #284]	; (80071cc <groupCommand+0x190>)
 80070b0:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d061      	beq.n	800717a <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80070b6:	4e44      	ldr	r6, [pc, #272]	; (80071c8 <groupCommand+0x18c>)
 80070b8:	e011      	b.n	80070de <groupCommand+0xa2>
			type =0;
 80070ba:	2700      	movs	r7, #0
 80070bc:	e7ea      	b.n	8007094 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 80070be:	a906      	add	r1, sp, #24
 80070c0:	0020      	movs	r0, r4
 80070c2:	f00d fb23 	bl	801470c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 80070c6:	1c69      	adds	r1, r5, #1
 80070c8:	b249      	sxtb	r1, r1
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <groupCommand+0x184>)
 80070cc:	7019      	strb	r1, [r3, #0]
 80070ce:	4a3e      	ldr	r2, [pc, #248]	; (80071c8 <groupCommand+0x18c>)
 80070d0:	9801      	ldr	r0, [sp, #4]
 80070d2:	f007 fb97 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80070d6:	4b3d      	ldr	r3, [pc, #244]	; (80071cc <groupCommand+0x190>)
 80070d8:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 80070da:	2800      	cmp	r0, #0
 80070dc:	d04d      	beq.n	800717a <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80070de:	6833      	ldr	r3, [r6, #0]
 80070e0:	4699      	mov	r9, r3
 80070e2:	ad06      	add	r5, sp, #24
 80070e4:	001a      	movs	r2, r3
 80070e6:	0001      	movs	r1, r0
 80070e8:	0028      	movs	r0, r5
 80070ea:	f00d fb44 	bl	8014776 <strncpy>
		module[xParameterStringLength] ='\0';
 80070ee:	2300      	movs	r3, #0
 80070f0:	464a      	mov	r2, r9
 80070f2:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 80070f4:	0028      	movs	r0, r5
 80070f6:	f7fd f911 	bl	800431c <GetID>
		if(modID < 0)
 80070fa:	2800      	cmp	r0, #0
 80070fc:	db37      	blt.n	800716e <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 80070fe:	b2c0      	uxtb	r0, r0
 8007100:	a903      	add	r1, sp, #12
 8007102:	f7fd f9d7 	bl	80044b4 <AddModuleToGroup>
		if(result != BOS_OK)
 8007106:	2800      	cmp	r0, #0
 8007108:	d146      	bne.n	8007198 <groupCommand+0x15c>
		if(count > 2)
 800710a:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <groupCommand+0x184>)
 800710c:	2500      	movs	r5, #0
 800710e:	575d      	ldrsb	r5, [r3, r5]
 8007110:	2d02      	cmp	r5, #2
 8007112:	ddd4      	ble.n	80070be <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8007114:	0020      	movs	r0, r4
 8007116:	f7f8 ffff 	bl	8000118 <strlen>
 800711a:	1820      	adds	r0, r4, r0
 800711c:	2203      	movs	r2, #3
 800711e:	492c      	ldr	r1, [pc, #176]	; (80071d0 <groupCommand+0x194>)
 8007120:	f00c fd3d 	bl	8013b9e <memcpy>
 8007124:	e7cb      	b.n	80070be <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8007126:	2f00      	cmp	r7, #0
 8007128:	d009      	beq.n	800713e <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 800712a:	aa03      	add	r2, sp, #12
 800712c:	4929      	ldr	r1, [pc, #164]	; (80071d4 <groupCommand+0x198>)
 800712e:	a806      	add	r0, sp, #24
 8007130:	f00d facc 	bl	80146cc <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8007134:	a906      	add	r1, sp, #24
 8007136:	0020      	movs	r0, r4
 8007138:	f00d fae8 	bl	801470c <strcat>
 800713c:	e027      	b.n	800718e <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 800713e:	aa03      	add	r2, sp, #12
 8007140:	4925      	ldr	r1, [pc, #148]	; (80071d8 <groupCommand+0x19c>)
 8007142:	a806      	add	r0, sp, #24
 8007144:	f00d fac2 	bl	80146cc <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8007148:	a906      	add	r1, sp, #24
 800714a:	0020      	movs	r0, r4
 800714c:	f00d fade 	bl	801470c <strcat>
 8007150:	e01d      	b.n	800718e <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007152:	aa03      	add	r2, sp, #12
 8007154:	4921      	ldr	r1, [pc, #132]	; (80071dc <groupCommand+0x1a0>)
 8007156:	0020      	movs	r0, r4
 8007158:	f00d fab8 	bl	80146cc <siprintf>
 800715c:	e017      	b.n	800718e <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 800715e:	2808      	cmp	r0, #8
 8007160:	d115      	bne.n	800718e <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007162:	aa03      	add	r2, sp, #12
 8007164:	491e      	ldr	r1, [pc, #120]	; (80071e0 <groupCommand+0x1a4>)
 8007166:	0020      	movs	r0, r4
 8007168:	f00d fab0 	bl	80146cc <siprintf>
 800716c:	e00f      	b.n	800718e <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 800716e:	aa06      	add	r2, sp, #24
 8007170:	491c      	ldr	r1, [pc, #112]	; (80071e4 <groupCommand+0x1a8>)
 8007172:	0020      	movs	r0, r4
 8007174:	f00d faaa 	bl	80146cc <siprintf>
	return pdFALSE;
 8007178:	e009      	b.n	800718e <groupCommand+0x152>
	else if(count == 2)
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <groupCommand+0x184>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b25b      	sxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d1d0      	bne.n	8007126 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007184:	aa03      	add	r2, sp, #12
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <groupCommand+0x1ac>)
 8007188:	0020      	movs	r0, r4
 800718a:	f00d fa9f 	bl	80146cc <siprintf>
}
 800718e:	2000      	movs	r0, #0
 8007190:	b010      	add	sp, #64	; 0x40
 8007192:	bc04      	pop	{r2}
 8007194:	4691      	mov	r9, r2
 8007196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <groupCommand+0x184>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b25b      	sxtb	r3, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d0f0      	beq.n	8007184 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 80071a2:	2806      	cmp	r0, #6
 80071a4:	d0d5      	beq.n	8007152 <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 80071a6:	2807      	cmp	r0, #7
 80071a8:	d1d9      	bne.n	800715e <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80071aa:	aa03      	add	r2, sp, #12
 80071ac:	490f      	ldr	r1, [pc, #60]	; (80071ec <groupCommand+0x1b0>)
 80071ae:	0020      	movs	r0, r4
 80071b0:	f00d fa8c 	bl	80146cc <siprintf>
 80071b4:	e7eb      	b.n	800718e <groupCommand+0x152>
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	20000a3c 	.word	0x20000a3c
 80071bc:	200005f8 	.word	0x200005f8
 80071c0:	20000a02 	.word	0x20000a02
 80071c4:	08018580 	.word	0x08018580
 80071c8:	20000a30 	.word	0x20000a30
 80071cc:	20000a04 	.word	0x20000a04
 80071d0:	0801858c 	.word	0x0801858c
 80071d4:	080185bc 	.word	0x080185bc
 80071d8:	080185d8 	.word	0x080185d8
 80071dc:	080185f8 	.word	0x080185f8
 80071e0:	0801866c 	.word	0x0801866c
 80071e4:	080186ac 	.word	0x080186ac
 80071e8:	08018590 	.word	0x08018590
 80071ec:	08018638 	.word	0x08018638

080071f0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	0004      	movs	r4, r0
 80071f4:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	d101      	bne.n	80071fe <nameCommand+0xe>
 80071fa:	b672      	cpsid	i
 80071fc:	e7fe      	b.n	80071fc <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80071fe:	4d1c      	ldr	r5, [pc, #112]	; (8007270 <nameCommand+0x80>)
 8007200:	002a      	movs	r2, r5
 8007202:	2101      	movs	r1, #1
 8007204:	f007 fafe 	bl	800e804 <FreeRTOS_CLIGetParameter>
 8007208:	0001      	movs	r1, r0
 800720a:	4b1a      	ldr	r3, [pc, #104]	; (8007274 <nameCommand+0x84>)
 800720c:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	2b09      	cmp	r3, #9
 8007212:	dd01      	ble.n	8007218 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007214:	2300      	movs	r3, #0
 8007216:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <nameCommand+0x88>)
 800721a:	7818      	ldrb	r0, [r3, #0]
 800721c:	f7fd f8e2 	bl	80043e4 <NameModule>
	if(result == BOS_OK)
 8007220:	2800      	cmp	r0, #0
 8007222:	d007      	beq.n	8007234 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007224:	2806      	cmp	r0, #6
 8007226:	d00e      	beq.n	8007246 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007228:	2807      	cmp	r0, #7
 800722a:	d013      	beq.n	8007254 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 800722c:	2808      	cmp	r0, #8
 800722e:	d018      	beq.n	8007262 <nameCommand+0x72>
}
 8007230:	2000      	movs	r0, #0
 8007232:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <nameCommand+0x88>)
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <nameCommand+0x84>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	490f      	ldr	r1, [pc, #60]	; (800727c <nameCommand+0x8c>)
 800723e:	0020      	movs	r0, r4
 8007240:	f00d fa44 	bl	80146cc <siprintf>
 8007244:	e7f4      	b.n	8007230 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <nameCommand+0x84>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	490d      	ldr	r1, [pc, #52]	; (8007280 <nameCommand+0x90>)
 800724c:	0020      	movs	r0, r4
 800724e:	f00d fa3d 	bl	80146cc <siprintf>
 8007252:	e7ed      	b.n	8007230 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <nameCommand+0x84>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	490a      	ldr	r1, [pc, #40]	; (8007284 <nameCommand+0x94>)
 800725a:	0020      	movs	r0, r4
 800725c:	f00d fa36 	bl	80146cc <siprintf>
 8007260:	e7e6      	b.n	8007230 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007262:	4b04      	ldr	r3, [pc, #16]	; (8007274 <nameCommand+0x84>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4908      	ldr	r1, [pc, #32]	; (8007288 <nameCommand+0x98>)
 8007268:	0020      	movs	r0, r4
 800726a:	f00d fa2f 	bl	80146cc <siprintf>
 800726e:	e7df      	b.n	8007230 <nameCommand+0x40>
 8007270:	20000a38 	.word	0x20000a38
 8007274:	20000a08 	.word	0x20000a08
 8007278:	2000080e 	.word	0x2000080e
 800727c:	080187f8 	.word	0x080187f8
 8007280:	080185f8 	.word	0x080185f8
 8007284:	08018638 	.word	0x08018638
 8007288:	0801866c 	.word	0x0801866c

0800728c <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728e:	b085      	sub	sp, #20
 8007290:	1e04      	subs	r4, r0, #0
 8007292:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007294:	d101      	bne.n	800729a <bootloaderUpdateCommand+0xe>
 8007296:	b672      	cpsid	i
 8007298:	e7fe      	b.n	8007298 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800729a:	4a4b      	ldr	r2, [pc, #300]	; (80073c8 <bootloaderUpdateCommand+0x13c>)
 800729c:	2101      	movs	r1, #1
 800729e:	9803      	ldr	r0, [sp, #12]
 80072a0:	f007 fab0 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d040      	beq.n	800732a <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80072a8:	4b47      	ldr	r3, [pc, #284]	; (80073c8 <bootloaderUpdateCommand+0x13c>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4947      	ldr	r1, [pc, #284]	; (80073cc <bootloaderUpdateCommand+0x140>)
 80072ae:	f00d fa51 	bl	8014754 <strncmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d000      	beq.n	80072b8 <bootloaderUpdateCommand+0x2c>
 80072b6:	e080      	b.n	80073ba <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80072b8:	4a45      	ldr	r2, [pc, #276]	; (80073d0 <bootloaderUpdateCommand+0x144>)
 80072ba:	2102      	movs	r1, #2
 80072bc:	9803      	ldr	r0, [sp, #12]
 80072be:	f007 faa1 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80072c2:	4f44      	ldr	r7, [pc, #272]	; (80073d4 <bootloaderUpdateCommand+0x148>)
 80072c4:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80072c6:	4a44      	ldr	r2, [pc, #272]	; (80073d8 <bootloaderUpdateCommand+0x14c>)
 80072c8:	2103      	movs	r1, #3
 80072ca:	9803      	ldr	r0, [sp, #12]
 80072cc:	f007 fa9a 	bl	800e804 <FreeRTOS_CLIGetParameter>
 80072d0:	4b42      	ldr	r3, [pc, #264]	; (80073dc <bootloaderUpdateCommand+0x150>)
 80072d2:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 80072da:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80072dc:	2b23      	cmp	r3, #35	; 0x23
 80072de:	d04e      	beq.n	800737e <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 80072e0:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <bootloaderUpdateCommand+0x150>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	56c3      	ldrsb	r3, [r0, r3]
 80072e8:	2b70      	cmp	r3, #112	; 0x70
 80072ea:	d04e      	beq.n	800738a <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 80072ec:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80072ee:	4b3c      	ldr	r3, [pc, #240]	; (80073e0 <bootloaderUpdateCommand+0x154>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	42b3      	cmp	r3, r6
 80072f4:	d04e      	beq.n	8007394 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80072f6:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <bootloaderUpdateCommand+0x158>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80072fc:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <bootloaderUpdateCommand+0x15c>)
 80072fe:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007300:	3201      	adds	r2, #1
 8007302:	211a      	movs	r1, #26
 8007304:	0030      	movs	r0, r6
 8007306:	f002 fc4f 	bl	8009ba8 <SendMessageToModule>
				osDelay(100);
 800730a:	2064      	movs	r0, #100	; 0x64
 800730c:	f007 f961 	bl	800e5d2 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <bootloaderUpdateCommand+0x160>)
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <bootloaderUpdateCommand+0x154>)
 8007316:	7818      	ldrb	r0, [r3, #0]
 8007318:	002b      	movs	r3, r5
 800731a:	0031      	movs	r1, r6
 800731c:	f7fc fcda 	bl	8003cd4 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007320:	2f68      	cmp	r7, #104	; 0x68
 8007322:	d04a      	beq.n	80073ba <bootloaderUpdateCommand+0x12e>
}
 8007324:	2000      	movs	r0, #0
 8007326:	b005      	add	sp, #20
 8007328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 800732a:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <bootloaderUpdateCommand+0x154>)
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	4930      	ldr	r1, [pc, #192]	; (80073f0 <bootloaderUpdateCommand+0x164>)
 8007330:	0020      	movs	r0, r4
 8007332:	f00d f9cb 	bl	80146cc <siprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007336:	4b2f      	ldr	r3, [pc, #188]	; (80073f4 <bootloaderUpdateCommand+0x168>)
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	0020      	movs	r0, r4
 800733c:	f00d f9e6 	bl	801470c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007340:	0020      	movs	r0, r4
 8007342:	f7f8 fee9 	bl	8000118 <strlen>
 8007346:	b282      	uxth	r2, r0
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <bootloaderUpdateCommand+0x160>)
 800734a:	7818      	ldrb	r0, [r3, #0]
 800734c:	2301      	movs	r3, #1
 800734e:	425b      	negs	r3, r3
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	3333      	adds	r3, #51	; 0x33
 8007354:	0021      	movs	r1, r4
 8007356:	f007 f80f 	bl	800e378 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800735a:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <bootloaderUpdateCommand+0x16c>)
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <bootloaderUpdateCommand+0x170>)
 800735e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007360:	4b27      	ldr	r3, [pc, #156]	; (8007400 <bootloaderUpdateCommand+0x174>)
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007366:	200a      	movs	r0, #10
 8007368:	f007 f933 	bl	800e5d2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	4b24      	ldr	r3, [pc, #144]	; (8007404 <bootloaderUpdateCommand+0x178>)
 8007372:	4a25      	ldr	r2, [pc, #148]	; (8007408 <bootloaderUpdateCommand+0x17c>)
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	e7fd      	b.n	800737a <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800737e:	3001      	adds	r0, #1
 8007380:	f00c fb9b 	bl	8013aba <atol>
 8007384:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007386:	2700      	movs	r7, #0
 8007388:	e7aa      	b.n	80072e0 <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800738a:	3001      	adds	r0, #1
 800738c:	f00c fb95 	bl	8013aba <atol>
 8007390:	b2c5      	uxtb	r5, r0
 8007392:	e7ac      	b.n	80072ee <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007394:	2100      	movs	r1, #0
 8007396:	9100      	str	r1, [sp, #0]
 8007398:	2319      	movs	r3, #25
 800739a:	000a      	movs	r2, r1
 800739c:	0028      	movs	r0, r5
 800739e:	f002 f97d 	bl	800969c <SendMessageFromPort>
				osDelay(100);
 80073a2:	2064      	movs	r0, #100	; 0x64
 80073a4:	f007 f915 	bl	800e5d2 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80073a8:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <bootloaderUpdateCommand+0x154>)
 80073aa:	7818      	ldrb	r0, [r3, #0]
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <bootloaderUpdateCommand+0x160>)
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	002b      	movs	r3, r5
 80073b2:	0001      	movs	r1, r0
 80073b4:	f7fc fc8e 	bl	8003cd4 <remoteBootloaderUpdate>
 80073b8:	e7b2      	b.n	8007320 <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80073ba:	220f      	movs	r2, #15
 80073bc:	4913      	ldr	r1, [pc, #76]	; (800740c <bootloaderUpdateCommand+0x180>)
 80073be:	0020      	movs	r0, r4
 80073c0:	f00c fbed 	bl	8013b9e <memcpy>
 80073c4:	e7ae      	b.n	8007324 <bootloaderUpdateCommand+0x98>
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	20000a34 	.word	0x20000a34
 80073cc:	080182b8 	.word	0x080182b8
 80073d0:	20000a40 	.word	0x20000a40
 80073d4:	20000a18 	.word	0x20000a18
 80073d8:	20000a44 	.word	0x20000a44
 80073dc:	20000a20 	.word	0x20000a20
 80073e0:	2000080e 	.word	0x2000080e
 80073e4:	200061fc 	.word	0x200061fc
 80073e8:	200006d0 	.word	0x200006d0
 80073ec:	200002b8 	.word	0x200002b8
 80073f0:	08018298 	.word	0x08018298
 80073f4:	20000088 	.word	0x20000088
 80073f8:	20007ff0 	.word	0x20007ff0
 80073fc:	deadbeef 	.word	0xdeadbeef
 8007400:	20000690 	.word	0x20000690
 8007404:	e000ed00 	.word	0xe000ed00
 8007408:	05fa0004 	.word	0x05fa0004
 800740c:	08018378 	.word	0x08018378

08007410 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007410:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 8007412:	2800      	cmp	r0, #0
 8007414:	d01e      	beq.n	8007454 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <pingCommand+0x5c>)
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	0093      	lsls	r3, r2, #2
 800741c:	189b      	adds	r3, r3, r2
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	4913      	ldr	r1, [pc, #76]	; (8007470 <pingCommand+0x60>)
 8007422:	5c5b      	ldrb	r3, [r3, r1]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d117      	bne.n	8007458 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007428:	4912      	ldr	r1, [pc, #72]	; (8007474 <pingCommand+0x64>)
 800742a:	f00d f94f 	bl	80146cc <siprintf>
	RTOS_IND_blink(200);
 800742e:	2580      	movs	r5, #128	; 0x80
 8007430:	012d      	lsls	r5, r5, #4
 8007432:	2490      	movs	r4, #144	; 0x90
 8007434:	05e4      	lsls	r4, r4, #23
 8007436:	2201      	movs	r2, #1
 8007438:	0029      	movs	r1, r5
 800743a:	0020      	movs	r0, r4
 800743c:	f00a fda2 	bl	8011f84 <HAL_GPIO_WritePin>
 8007440:	20c8      	movs	r0, #200	; 0xc8
 8007442:	f007 f8c6 	bl	800e5d2 <osDelay>
 8007446:	2200      	movs	r2, #0
 8007448:	0029      	movs	r1, r5
 800744a:	0020      	movs	r0, r4
 800744c:	f00a fd9a 	bl	8011f84 <HAL_GPIO_WritePin>
}
 8007450:	2000      	movs	r0, #0
 8007452:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007454:	b672      	cpsid	i
 8007456:	e7fe      	b.n	8007456 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007458:	0093      	lsls	r3, r2, #2
 800745a:	189b      	adds	r3, r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4904      	ldr	r1, [pc, #16]	; (8007470 <pingCommand+0x60>)
 8007460:	185b      	adds	r3, r3, r1
 8007462:	4905      	ldr	r1, [pc, #20]	; (8007478 <pingCommand+0x68>)
 8007464:	f00d f932 	bl	80146cc <siprintf>
 8007468:	e7e1      	b.n	800742e <pingCommand+0x1e>
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	2000080e 	.word	0x2000080e
 8007470:	20000700 	.word	0x20000700
 8007474:	08018868 	.word	0x08018868
 8007478:	0801887c 	.word	0x0801887c

0800747c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800747c:	b510      	push	{r4, lr}
 800747e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007480:	d101      	bne.n	8007486 <prvRunTimeStatsCommand+0xa>
 8007482:	b672      	cpsid	i
 8007484:	e7fe      	b.n	8007484 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007486:	2241      	movs	r2, #65	; 0x41
 8007488:	4904      	ldr	r1, [pc, #16]	; (800749c <prvRunTimeStatsCommand+0x20>)
 800748a:	f00c fb88 	bl	8013b9e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800748e:	0020      	movs	r0, r4
 8007490:	3040      	adds	r0, #64	; 0x40
 8007492:	f008 fc0b 	bl	800fcac <vTaskGetRunTimeStats>
}
 8007496:	2000      	movs	r0, #0
 8007498:	bd10      	pop	{r4, pc}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	080188a8 	.word	0x080188a8

080074a0 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80074a0:	b510      	push	{r4, lr}
 80074a2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80074a4:	d101      	bne.n	80074aa <prvTaskStatsCommand+0xa>
 80074a6:	b672      	cpsid	i
 80074a8:	e7fe      	b.n	80074a8 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80074aa:	2250      	movs	r2, #80	; 0x50
 80074ac:	4904      	ldr	r1, [pc, #16]	; (80074c0 <prvTaskStatsCommand+0x20>)
 80074ae:	f00c fb76 	bl	8013b9e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80074b2:	0020      	movs	r0, r4
 80074b4:	304f      	adds	r0, #79	; 0x4f
 80074b6:	f008 fb99 	bl	800fbec <vTaskList>
}
 80074ba:	2000      	movs	r0, #0
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	080188fc 	.word	0x080188fc

080074c4 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d101      	bne.n	80074cc <resetCommand+0x8>
 80074c8:	b672      	cpsid	i
 80074ca:	e7fe      	b.n	80074ca <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <resetCommand+0x1c>)
 80074d2:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <resetCommand+0x20>)
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	e7fd      	b.n	80074da <resetCommand+0x16>
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	e000ed00 	.word	0xe000ed00
 80074e4:	05fa0004 	.word	0x05fa0004

080074e8 <RegisterUserCLICommands>:
}
 80074e8:	4770      	bx	lr
	...

080074ec <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80074ec:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80074ee:	4835      	ldr	r0, [pc, #212]	; (80075c4 <vRegisterCLICommands+0xd8>)
 80074f0:	f007 f8ea 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80074f4:	4834      	ldr	r0, [pc, #208]	; (80075c8 <vRegisterCLICommands+0xdc>)
 80074f6:	f007 f8e7 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80074fa:	4834      	ldr	r0, [pc, #208]	; (80075cc <vRegisterCLICommands+0xe0>)
 80074fc:	f007 f8e4 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007500:	4833      	ldr	r0, [pc, #204]	; (80075d0 <vRegisterCLICommands+0xe4>)
 8007502:	f007 f8e1 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007506:	4833      	ldr	r0, [pc, #204]	; (80075d4 <vRegisterCLICommands+0xe8>)
 8007508:	f007 f8de 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800750c:	4832      	ldr	r0, [pc, #200]	; (80075d8 <vRegisterCLICommands+0xec>)
 800750e:	f007 f8db 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007512:	4832      	ldr	r0, [pc, #200]	; (80075dc <vRegisterCLICommands+0xf0>)
 8007514:	f007 f8d8 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007518:	4831      	ldr	r0, [pc, #196]	; (80075e0 <vRegisterCLICommands+0xf4>)
 800751a:	f007 f8d5 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800751e:	4831      	ldr	r0, [pc, #196]	; (80075e4 <vRegisterCLICommands+0xf8>)
 8007520:	f007 f8d2 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007524:	4830      	ldr	r0, [pc, #192]	; (80075e8 <vRegisterCLICommands+0xfc>)
 8007526:	f007 f8cf 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800752a:	4830      	ldr	r0, [pc, #192]	; (80075ec <vRegisterCLICommands+0x100>)
 800752c:	f007 f8cc 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007530:	482f      	ldr	r0, [pc, #188]	; (80075f0 <vRegisterCLICommands+0x104>)
 8007532:	f007 f8c9 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007536:	482f      	ldr	r0, [pc, #188]	; (80075f4 <vRegisterCLICommands+0x108>)
 8007538:	f007 f8c6 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800753c:	482e      	ldr	r0, [pc, #184]	; (80075f8 <vRegisterCLICommands+0x10c>)
 800753e:	f007 f8c3 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007542:	482e      	ldr	r0, [pc, #184]	; (80075fc <vRegisterCLICommands+0x110>)
 8007544:	f007 f8c0 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007548:	482d      	ldr	r0, [pc, #180]	; (8007600 <vRegisterCLICommands+0x114>)
 800754a:	f007 f8bd 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800754e:	482d      	ldr	r0, [pc, #180]	; (8007604 <vRegisterCLICommands+0x118>)
 8007550:	f007 f8ba 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007554:	482c      	ldr	r0, [pc, #176]	; (8007608 <vRegisterCLICommands+0x11c>)
 8007556:	f007 f8b7 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800755a:	482c      	ldr	r0, [pc, #176]	; (800760c <vRegisterCLICommands+0x120>)
 800755c:	f007 f8b4 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007560:	482b      	ldr	r0, [pc, #172]	; (8007610 <vRegisterCLICommands+0x124>)
 8007562:	f007 f8b1 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007566:	482b      	ldr	r0, [pc, #172]	; (8007614 <vRegisterCLICommands+0x128>)
 8007568:	f007 f8ae 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800756c:	482a      	ldr	r0, [pc, #168]	; (8007618 <vRegisterCLICommands+0x12c>)
 800756e:	f007 f8ab 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007572:	482a      	ldr	r0, [pc, #168]	; (800761c <vRegisterCLICommands+0x130>)
 8007574:	f007 f8a8 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007578:	4829      	ldr	r0, [pc, #164]	; (8007620 <vRegisterCLICommands+0x134>)
 800757a:	f007 f8a5 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800757e:	4829      	ldr	r0, [pc, #164]	; (8007624 <vRegisterCLICommands+0x138>)
 8007580:	f007 f8a2 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007584:	4828      	ldr	r0, [pc, #160]	; (8007628 <vRegisterCLICommands+0x13c>)
 8007586:	f007 f89f 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800758a:	4828      	ldr	r0, [pc, #160]	; (800762c <vRegisterCLICommands+0x140>)
 800758c:	f007 f89c 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007590:	4827      	ldr	r0, [pc, #156]	; (8007630 <vRegisterCLICommands+0x144>)
 8007592:	f007 f899 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007596:	4827      	ldr	r0, [pc, #156]	; (8007634 <vRegisterCLICommands+0x148>)
 8007598:	f007 f896 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800759c:	4826      	ldr	r0, [pc, #152]	; (8007638 <vRegisterCLICommands+0x14c>)
 800759e:	f007 f893 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80075a2:	4826      	ldr	r0, [pc, #152]	; (800763c <vRegisterCLICommands+0x150>)
 80075a4:	f007 f890 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80075a8:	4825      	ldr	r0, [pc, #148]	; (8007640 <vRegisterCLICommands+0x154>)
 80075aa:	f007 f88d 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80075ae:	4825      	ldr	r0, [pc, #148]	; (8007644 <vRegisterCLICommands+0x158>)
 80075b0:	f007 f88a 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <vRegisterCLICommands+0x15c>)
 80075b6:	2223      	movs	r2, #35	; 0x23
 80075b8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80075ba:	f004 fc15 	bl	800bde8 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80075be:	f7ff ff93 	bl	80074e8 <RegisterUserCLICommands>
}
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	0801894c 	.word	0x0801894c
 80075c8:	080188ec 	.word	0x080188ec
 80075cc:	08018898 	.word	0x08018898
 80075d0:	080182bc 	.word	0x080182bc
 80075d4:	08018444 	.word	0x08018444
 80075d8:	08018994 	.word	0x08018994
 80075dc:	08018810 	.word	0x08018810
 80075e0:	080186d0 	.word	0x080186d0
 80075e4:	08018e44 	.word	0x08018e44
 80075e8:	080187d4 	.word	0x080187d4
 80075ec:	08018a50 	.word	0x08018a50
 80075f0:	08018288 	.word	0x08018288
 80075f4:	08018984 	.word	0x08018984
 80075f8:	08018ca4 	.word	0x08018ca4
 80075fc:	08018570 	.word	0x08018570
 8007600:	080183c8 	.word	0x080183c8
 8007604:	08019e64 	.word	0x08019e64
 8007608:	08018330 	.word	0x08018330
 800760c:	08018a9c 	.word	0x08018a9c
 8007610:	08019ed8 	.word	0x08019ed8
 8007614:	08018750 	.word	0x08018750
 8007618:	08018474 	.word	0x08018474
 800761c:	08018e34 	.word	0x08018e34
 8007620:	0801820c 	.word	0x0801820c
 8007624:	08018858 	.word	0x08018858
 8007628:	08018434 	.word	0x08018434
 800762c:	08018308 	.word	0x08018308
 8007630:	08019eb0 	.word	0x08019eb0
 8007634:	08019df8 	.word	0x08019df8
 8007638:	0801810c 	.word	0x0801810c
 800763c:	0801818c 	.word	0x0801818c
 8007640:	080181c4 	.word	0x080181c4
 8007644:	0801811c 	.word	0x0801811c
 8007648:	200061f8 	.word	0x200061f8

0800764c <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 800764c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800764e:	1e45      	subs	r5, r0, #1
 8007650:	00ec      	lsls	r4, r5, #3
 8007652:	1b60      	subs	r0, r4, r5
 8007654:	00c0      	lsls	r0, r0, #3
 8007656:	4e05      	ldr	r6, [pc, #20]	; (800766c <StopMsgDMA+0x20>)
 8007658:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800765a:	f009 fd52 	bl	8011102 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800765e:	1b64      	subs	r4, r4, r5
 8007660:	00e4      	lsls	r4, r4, #3
 8007662:	59a3      	ldr	r3, [r4, r6]
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
}
 8007668:	bd70      	pop	{r4, r5, r6, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	20001078 	.word	0x20001078

08007670 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8007670:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8007672:	1e44      	subs	r4, r0, #1
 8007674:	00e5      	lsls	r5, r4, #3
 8007676:	1b28      	subs	r0, r5, r4
 8007678:	00c0      	lsls	r0, r0, #3
 800767a:	4e07      	ldr	r6, [pc, #28]	; (8007698 <StopStreamDMA+0x28>)
 800767c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800767e:	f009 fd40 	bl	8011102 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007682:	1b2d      	subs	r5, r5, r4
 8007684:	00ed      	lsls	r5, r5, #3
 8007686:	59aa      	ldr	r2, [r5, r6]
 8007688:	2300      	movs	r3, #0
 800768a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 800768c:	00a4      	lsls	r4, r4, #2
 800768e:	4a03      	ldr	r2, [pc, #12]	; (800769c <StopStreamDMA+0x2c>)
 8007690:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8007692:	4a03      	ldr	r2, [pc, #12]	; (80076a0 <StopStreamDMA+0x30>)
 8007694:	50a3      	str	r3, [r4, r2]
	
}
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	20001270 	.word	0x20001270
 800769c:	20000cc8 	.word	0x20000cc8
 80076a0:	20000ce0 	.word	0x20000ce0

080076a4 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80076a4:	b510      	push	{r4, lr}
 80076a6:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80076a8:	f7ff ffd0 	bl	800764c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80076ac:	3c01      	subs	r4, #1
 80076ae:	00e0      	lsls	r0, r4, #3
 80076b0:	1b02      	subs	r2, r0, r4
 80076b2:	00d2      	lsls	r2, r2, #3
 80076b4:	4903      	ldr	r1, [pc, #12]	; (80076c4 <SwitchMsgDMAToStream+0x20>)
 80076b6:	5851      	ldr	r1, [r2, r1]
 80076b8:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <SwitchMsgDMAToStream+0x24>)
 80076ba:	18d0      	adds	r0, r2, r3
 80076bc:	f005 f978 	bl	800c9b0 <DMA_STREAM_CH_Init>
}
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	20001078 	.word	0x20001078
 80076c8:	20001270 	.word	0x20001270

080076cc <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80076cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ce:	b083      	sub	sp, #12
 80076d0:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80076d2:	f7ff ffcd 	bl	8007670 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80076d6:	9401      	str	r4, [sp, #4]
 80076d8:	3c01      	subs	r4, #1
 80076da:	00e7      	lsls	r7, r4, #3
 80076dc:	1b3d      	subs	r5, r7, r4
 80076de:	00ed      	lsls	r5, r5, #3
 80076e0:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <SwitchStreamDMAToMsg+0x54>)
 80076e2:	18ed      	adds	r5, r5, r3
 80076e4:	4e0f      	ldr	r6, [pc, #60]	; (8007724 <SwitchStreamDMAToMsg+0x58>)
 80076e6:	1b3b      	subs	r3, r7, r4
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	5999      	ldr	r1, [r3, r6]
 80076ec:	0028      	movs	r0, r5
 80076ee:	f005 f8f7 	bl	800c8e0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80076f2:	1b3b      	subs	r3, r7, r4
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	18f3      	adds	r3, r6, r3
 80076f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80076fa:	f004 fb91 	bl	800be20 <GetPort>
 80076fe:	2300      	movs	r3, #0
 8007700:	4a09      	ldr	r2, [pc, #36]	; (8007728 <SwitchStreamDMAToMsg+0x5c>)
 8007702:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007704:	1b3f      	subs	r7, r7, r4
 8007706:	00ff      	lsls	r7, r7, #3
 8007708:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 800770a:	00a4      	lsls	r4, r4, #2
 800770c:	4a07      	ldr	r2, [pc, #28]	; (800772c <SwitchStreamDMAToMsg+0x60>)
 800770e:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007710:	9801      	ldr	r0, [sp, #4]
 8007712:	f006 fe1d 	bl	800e350 <GetUart>
 8007716:	0029      	movs	r1, r5
 8007718:	f005 fd3e 	bl	800d198 <DMA_MSG_RX_Setup>
	
}
 800771c:	b003      	add	sp, #12
 800771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007720:	20001078 	.word	0x20001078
 8007724:	20001270 	.word	0x20001270
 8007728:	20000878 	.word	0x20000878
 800772c:	20000cd4 	.word	0x20000cd4

08007730 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	0005      	movs	r5, r0
 8007734:	000e      	movs	r6, r1
 8007736:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007738:	f004 fb72 	bl	800be20 <GetPort>
 800773c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800773e:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <StartDMAstream+0x44>)
 8007740:	5c1b      	ldrb	r3, [r3, r0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d902      	bls.n	800774c <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007746:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007748:	2b03      	cmp	r3, #3
 800774a:	d112      	bne.n	8007772 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800774c:	0020      	movs	r0, r4
 800774e:	f7ff ffa9 	bl	80076a4 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007752:	1e63      	subs	r3, r4, #1
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4a08      	ldr	r2, [pc, #32]	; (8007778 <StartDMAstream+0x48>)
 8007758:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800775a:	4a06      	ldr	r2, [pc, #24]	; (8007774 <StartDMAstream+0x44>)
 800775c:	2102      	movs	r1, #2
 800775e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007760:	4a06      	ldr	r2, [pc, #24]	; (800777c <StartDMAstream+0x4c>)
 8007762:	2100      	movs	r1, #0
 8007764:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007766:	003a      	movs	r2, r7
 8007768:	0031      	movs	r1, r6
 800776a:	0028      	movs	r0, r5
 800776c:	f005 fd5a 	bl	800d224 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007770:	2000      	movs	r0, #0
}
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	20000878 	.word	0x20000878
 8007778:	20000cd4 	.word	0x20000cd4
 800777c:	20000cc8 	.word	0x20000cc8

08007780 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007784:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <DMA_IRQHandler+0x50>)
 8007786:	5c1b      	ldrb	r3, [r3, r0]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d008      	beq.n	800779e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800778c:	3c01      	subs	r4, #1
 800778e:	00e0      	lsls	r0, r4, #3
 8007790:	1b00      	subs	r0, r0, r4
 8007792:	00c0      	lsls	r0, r0, #3
 8007794:	4c0f      	ldr	r4, [pc, #60]	; (80077d4 <DMA_IRQHandler+0x54>)
 8007796:	1900      	adds	r0, r0, r4
 8007798:	f009 fcdc 	bl	8011154 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 800779c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800779e:	1e45      	subs	r5, r0, #1
 80077a0:	00e8      	lsls	r0, r5, #3
 80077a2:	1b40      	subs	r0, r0, r5
 80077a4:	00c0      	lsls	r0, r0, #3
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <DMA_IRQHandler+0x58>)
 80077a8:	18c0      	adds	r0, r0, r3
 80077aa:	f009 fcd3 	bl	8011154 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80077ae:	00aa      	lsls	r2, r5, #2
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <DMA_IRQHandler+0x5c>)
 80077b2:	58d2      	ldr	r2, [r2, r3]
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d006      	beq.n	80077c6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80077b8:	4909      	ldr	r1, [pc, #36]	; (80077e0 <DMA_IRQHandler+0x60>)
 80077ba:	00ad      	lsls	r5, r5, #2
 80077bc:	586b      	ldr	r3, [r5, r1]
 80077be:	3301      	adds	r3, #1
 80077c0:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d8ea      	bhi.n	800779c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80077c6:	0020      	movs	r0, r4
 80077c8:	f7ff ff52 	bl	8007670 <StopStreamDMA>
}
 80077cc:	e7e6      	b.n	800779c <DMA_IRQHandler+0x1c>
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	20000878 	.word	0x20000878
 80077d4:	20001078 	.word	0x20001078
 80077d8:	20001270 	.word	0x20001270
 80077dc:	20000ce0 	.word	0x20000ce0
 80077e0:	20000cc8 	.word	0x20000cc8

080077e4 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <ResetUartORE+0x1c>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	2308      	movs	r3, #8
 80077ea:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80077ec:	4a05      	ldr	r2, [pc, #20]	; (8007804 <ResetUartORE+0x20>)
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80077f2:	4a05      	ldr	r2, [pc, #20]	; (8007808 <ResetUartORE+0x24>)
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80077f8:	4a04      	ldr	r2, [pc, #16]	; (800780c <ResetUartORE+0x28>)
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	6213      	str	r3, [r2, #32]
#endif
}
 80077fe:	4770      	bx	lr
 8007800:	20006464 	.word	0x20006464
 8007804:	200065d4 	.word	0x200065d4
 8007808:	200063b4 	.word	0x200063b4
 800780c:	200064e8 	.word	0x200064e8

08007810 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	0006      	movs	r6, r0
 8007814:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007816:	f00a f90d 	bl	8011a34 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800781a:	4b2b      	ldr	r3, [pc, #172]	; (80078c8 <EE_VerifyPageFullWriteVariable+0xb8>)
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007820:	4b2a      	ldr	r3, [pc, #168]	; (80078cc <EE_VerifyPageFullWriteVariable+0xbc>)
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800782a:	4929      	ldr	r1, [pc, #164]	; (80078d0 <EE_VerifyPageFullWriteVariable+0xc0>)
 800782c:	428a      	cmp	r2, r1
 800782e:	d007      	beq.n	8007840 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 8007830:	3302      	adds	r3, #2
 8007832:	e005      	b.n	8007840 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 8007834:	2a00      	cmp	r2, #0
 8007836:	d143      	bne.n	80078c0 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 8007838:	4925      	ldr	r1, [pc, #148]	; (80078d0 <EE_VerifyPageFullWriteVariable+0xc0>)
 800783a:	428b      	cmp	r3, r1
 800783c:	d042      	beq.n	80078c4 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800783e:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007840:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <EE_VerifyPageFullWriteVariable+0xc4>)
 8007842:	189c      	adds	r4, r3, r2
 8007844:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007846:	02db      	lsls	r3, r3, #11
 8007848:	4a23      	ldr	r2, [pc, #140]	; (80078d8 <EE_VerifyPageFullWriteVariable+0xc8>)
 800784a:	4694      	mov	ip, r2
 800784c:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	3201      	adds	r2, #1
 8007852:	d005      	beq.n	8007860 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007854:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007856:	429c      	cmp	r4, r3
 8007858:	d22e      	bcs.n	80078b8 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	3201      	adds	r2, #1
 800785e:	d1f9      	bne.n	8007854 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007860:	002a      	movs	r2, r5
 8007862:	2300      	movs	r3, #0
 8007864:	0021      	movs	r1, r4
 8007866:	2001      	movs	r0, #1
 8007868:	f00a f92e 	bl	8011ac8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800786c:	481b      	ldr	r0, [pc, #108]	; (80078dc <EE_VerifyPageFullWriteVariable+0xcc>)
 800786e:	f00a f8fd 	bl	8011a6c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007872:	2800      	cmp	r0, #0
 8007874:	d003      	beq.n	800787e <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 8007876:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007878:	69d8      	ldr	r0, [r3, #28]
 800787a:	b280      	uxth	r0, r0
 800787c:	e01f      	b.n	80078be <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800787e:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007880:	6913      	ldr	r3, [r2, #16]
 8007882:	2101      	movs	r1, #1
 8007884:	438b      	bics	r3, r1
 8007886:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007888:	1ca1      	adds	r1, r4, #2
 800788a:	0032      	movs	r2, r6
 800788c:	2300      	movs	r3, #0
 800788e:	2001      	movs	r0, #1
 8007890:	f00a f91a 	bl	8011ac8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007894:	4811      	ldr	r0, [pc, #68]	; (80078dc <EE_VerifyPageFullWriteVariable+0xcc>)
 8007896:	f00a f8e9 	bl	8011a6c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800789a:	2800      	cmp	r0, #0
 800789c:	d003      	beq.n	80078a6 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <EE_VerifyPageFullWriteVariable+0xd0>)
 80078a0:	69d8      	ldr	r0, [r3, #28]
 80078a2:	b280      	uxth	r0, r0
 80078a4:	e00b      	b.n	80078be <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078a6:	4a0f      	ldr	r2, [pc, #60]	; (80078e4 <EE_VerifyPageFullWriteVariable+0xd4>)
 80078a8:	6913      	ldr	r3, [r2, #16]
 80078aa:	2101      	movs	r1, #1
 80078ac:	438b      	bics	r3, r1
 80078ae:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <EE_VerifyPageFullWriteVariable+0xd0>)
 80078b2:	69d8      	ldr	r0, [r3, #28]
 80078b4:	b280      	uxth	r0, r0
 80078b6:	e002      	b.n	80078be <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 80078b8:	f00a f8ce 	bl	8011a58 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80078bc:	2080      	movs	r0, #128	; 0x80
}
 80078be:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 80078c0:	20ab      	movs	r0, #171	; 0xab
 80078c2:	e7fc      	b.n	80078be <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 80078c4:	2302      	movs	r3, #2
 80078c6:	e7bb      	b.n	8007840 <EE_VerifyPageFullWriteVariable+0x30>
 80078c8:	0801e000 	.word	0x0801e000
 80078cc:	0801f000 	.word	0x0801f000
 80078d0:	0000eeee 	.word	0x0000eeee
 80078d4:	0001003c 	.word	0x0001003c
 80078d8:	0801effe 	.word	0x0801effe
 80078dc:	0000c350 	.word	0x0000c350
 80078e0:	20006780 	.word	0x20006780
 80078e4:	40022000 	.word	0x40022000

080078e8 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 80078e8:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <EE_ReadVariable+0x50>)
 80078ec:	881c      	ldrh	r4, [r3, #0]
 80078ee:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <EE_ReadVariable+0x54>)
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	d006      	beq.n	8007908 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 80078fe:	20ab      	movs	r0, #171	; 0xab
 8007900:	e019      	b.n	8007936 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007902:	2001      	movs	r0, #1
 8007904:	e017      	b.n	8007936 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 8007906:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007908:	02e3      	lsls	r3, r4, #11
 800790a:	4a0d      	ldr	r2, [pc, #52]	; (8007940 <EE_ReadVariable+0x58>)
 800790c:	4694      	mov	ip, r2
 800790e:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007910:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 8007912:	4a0c      	ldr	r2, [pc, #48]	; (8007944 <EE_ReadVariable+0x5c>)
 8007914:	4694      	mov	ip, r2
 8007916:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 8007918:	881a      	ldrh	r2, [r3, #0]
 800791a:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800791c:	4290      	cmp	r0, r2
 800791e:	d006      	beq.n	800792e <EE_ReadVariable+0x46>
			Address =Address - 4;
 8007920:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007922:	42a3      	cmp	r3, r4
 8007924:	d9ed      	bls.n	8007902 <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007926:	881a      	ldrh	r2, [r3, #0]
 8007928:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800792a:	4282      	cmp	r2, r0
 800792c:	d1f8      	bne.n	8007920 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800792e:	3b02      	subs	r3, #2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8007934:	2000      	movs	r0, #0
}
 8007936:	bd10      	pop	{r4, pc}
 8007938:	0801e000 	.word	0x0801e000
 800793c:	0801f000 	.word	0x0801f000
 8007940:	0801effe 	.word	0x0801effe
 8007944:	0801e002 	.word	0x0801e002

08007948 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794a:	46de      	mov	lr, fp
 800794c:	4647      	mov	r7, r8
 800794e:	b580      	push	{r7, lr}
 8007950:	b083      	sub	sp, #12
 8007952:	0005      	movs	r5, r0
 8007954:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007956:	f00a f86d 	bl	8011a34 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800795a:	0031      	movs	r1, r6
 800795c:	0028      	movs	r0, r5
 800795e:	f7ff ff57 	bl	8007810 <EE_VerifyPageFullWriteVariable>
 8007962:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007964:	2880      	cmp	r0, #128	; 0x80
 8007966:	d007      	beq.n	8007978 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007968:	f00a f876 	bl	8011a58 <HAL_FLASH_Lock>
}
 800796c:	0020      	movs	r0, r4
 800796e:	b003      	add	sp, #12
 8007970:	bc0c      	pop	{r2, r3}
 8007972:	4690      	mov	r8, r2
 8007974:	469b      	mov	fp, r3
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007978:	f00a f85c 	bl	8011a34 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800797c:	4b3e      	ldr	r3, [pc, #248]	; (8007a78 <EE_WriteVariable+0x130>)
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007982:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <EE_WriteVariable+0x134>)
 8007984:	8812      	ldrh	r2, [r2, #0]
 8007986:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800798c:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800798e:	2a00      	cmp	r2, #0
 8007990:	d1ea      	bne.n	8007968 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <EE_WriteVariable+0x134>)
 8007994:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007996:	4b38      	ldr	r3, [pc, #224]	; (8007a78 <EE_WriteVariable+0x130>)
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	e003      	b.n	80079a4 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800799c:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <EE_WriteVariable+0x130>)
 800799e:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 80079a0:	4b36      	ldr	r3, [pc, #216]	; (8007a7c <EE_WriteVariable+0x134>)
 80079a2:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 80079a4:	4a36      	ldr	r2, [pc, #216]	; (8007a80 <EE_WriteVariable+0x138>)
 80079a6:	2300      	movs	r3, #0
 80079a8:	9901      	ldr	r1, [sp, #4]
 80079aa:	2001      	movs	r0, #1
 80079ac:	f00a f88c 	bl	8011ac8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b0:	4834      	ldr	r0, [pc, #208]	; (8007a84 <EE_WriteVariable+0x13c>)
 80079b2:	f00a f85b 	bl	8011a6c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d003      	beq.n	80079c2 <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 80079ba:	4b33      	ldr	r3, [pc, #204]	; (8007a88 <EE_WriteVariable+0x140>)
 80079bc:	69dc      	ldr	r4, [r3, #28]
 80079be:	b2a4      	uxth	r4, r4
 80079c0:	e7d2      	b.n	8007968 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c2:	4a32      	ldr	r2, [pc, #200]	; (8007a8c <EE_WriteVariable+0x144>)
 80079c4:	6913      	ldr	r3, [r2, #16]
 80079c6:	2101      	movs	r1, #1
 80079c8:	438b      	bics	r3, r1
 80079ca:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80079cc:	0031      	movs	r1, r6
 80079ce:	0028      	movs	r0, r5
 80079d0:	f7ff ff1e 	bl	8007810 <EE_VerifyPageFullWriteVariable>
 80079d4:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 80079d6:	d1c7      	bne.n	8007968 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80079d8:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80079da:	4b2d      	ldr	r3, [pc, #180]	; (8007a90 <EE_WriteVariable+0x148>)
 80079dc:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80079de:	4e2d      	ldr	r6, [pc, #180]	; (8007a94 <EE_WriteVariable+0x14c>)
 80079e0:	e003      	b.n	80079ea <EE_WriteVariable+0xa2>
 80079e2:	3701      	adds	r7, #1
 80079e4:	b2bf      	uxth	r7, r7
 80079e6:	42b7      	cmp	r7, r6
 80079e8:	d00f      	beq.n	8007a0a <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 80079ea:	42bd      	cmp	r5, r7
 80079ec:	d0f9      	beq.n	80079e2 <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 80079ee:	4928      	ldr	r1, [pc, #160]	; (8007a90 <EE_WriteVariable+0x148>)
 80079f0:	0038      	movs	r0, r7
 80079f2:	f7ff ff79 	bl	80078e8 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 80079f6:	2801      	cmp	r0, #1
 80079f8:	d0f3      	beq.n	80079e2 <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80079fa:	4643      	mov	r3, r8
 80079fc:	8819      	ldrh	r1, [r3, #0]
 80079fe:	0038      	movs	r0, r7
 8007a00:	f7ff ff06 	bl	8007810 <EE_VerifyPageFullWriteVariable>
 8007a04:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 8007a06:	d0ec      	beq.n	80079e2 <EE_WriteVariable+0x9a>
 8007a08:	e7ae      	b.n	8007968 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f00a f8d4 	bl	8011bb8 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a10:	481c      	ldr	r0, [pc, #112]	; (8007a84 <EE_WriteVariable+0x13c>)
 8007a12:	f00a f82b 	bl	8011a6c <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d003      	beq.n	8007a22 <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 8007a1a:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <EE_WriteVariable+0x140>)
 8007a1c:	69dc      	ldr	r4, [r3, #28]
 8007a1e:	b2a4      	uxth	r4, r4
 8007a20:	e7a2      	b.n	8007968 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007a22:	2080      	movs	r0, #128	; 0x80
 8007a24:	0100      	lsls	r0, r0, #4
 8007a26:	4458      	add	r0, fp
 8007a28:	f00a f8c6 	bl	8011bb8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a2c:	4815      	ldr	r0, [pc, #84]	; (8007a84 <EE_WriteVariable+0x13c>)
 8007a2e:	f00a f81d 	bl	8011a6c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d003      	beq.n	8007a3e <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <EE_WriteVariable+0x140>)
 8007a38:	69dc      	ldr	r4, [r3, #28]
 8007a3a:	b2a4      	uxth	r4, r4
 8007a3c:	e794      	b.n	8007968 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a3e:	4a13      	ldr	r2, [pc, #76]	; (8007a8c <EE_WriteVariable+0x144>)
 8007a40:	6913      	ldr	r3, [r2, #16]
 8007a42:	2102      	movs	r1, #2
 8007a44:	438b      	bics	r3, r1
 8007a46:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9901      	ldr	r1, [sp, #4]
 8007a4e:	2001      	movs	r0, #1
 8007a50:	f00a f83a 	bl	8011ac8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a54:	480b      	ldr	r0, [pc, #44]	; (8007a84 <EE_WriteVariable+0x13c>)
 8007a56:	f00a f809 	bl	8011a6c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d003      	beq.n	8007a66 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <EE_WriteVariable+0x140>)
 8007a60:	69dc      	ldr	r4, [r3, #28]
 8007a62:	b2a4      	uxth	r4, r4
 8007a64:	e780      	b.n	8007968 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a66:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <EE_WriteVariable+0x144>)
 8007a68:	6913      	ldr	r3, [r2, #16]
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	438b      	bics	r3, r1
 8007a6e:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007a70:	f009 fff2 	bl	8011a58 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007a74:	2400      	movs	r4, #0
 8007a76:	e777      	b.n	8007968 <EE_WriteVariable+0x20>
 8007a78:	0801e000 	.word	0x0801e000
 8007a7c:	0801f000 	.word	0x0801f000
 8007a80:	0000eeee 	.word	0x0000eeee
 8007a84:	0000c350 	.word	0x0000c350
 8007a88:	20006780 	.word	0x20006780
 8007a8c:	40022000 	.word	0x40022000
 8007a90:	20000cec 	.word	0x20000cec
 8007a94:	00000401 	.word	0x00000401

08007a98 <EE_Format>:
uint16_t EE_Format(void){
 8007a98:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007a9a:	f009 ffcb 	bl	8011a34 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a9e:	4829      	ldr	r0, [pc, #164]	; (8007b44 <EE_Format+0xac>)
 8007aa0:	f00a f88a 	bl	8011bb8 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa4:	4828      	ldr	r0, [pc, #160]	; (8007b48 <EE_Format+0xb0>)
 8007aa6:	f009 ffe1 	bl	8011a6c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d003      	beq.n	8007ab6 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007aae:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <EE_Format+0xb4>)
 8007ab0:	69d8      	ldr	r0, [r3, #28]
 8007ab2:	b280      	uxth	r0, r0
}
 8007ab4:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ab6:	4826      	ldr	r0, [pc, #152]	; (8007b50 <EE_Format+0xb8>)
 8007ab8:	f00a f87e 	bl	8011bb8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007abc:	4822      	ldr	r0, [pc, #136]	; (8007b48 <EE_Format+0xb0>)
 8007abe:	f009 ffd5 	bl	8011a6c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d003      	beq.n	8007ace <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007ac6:	4b21      	ldr	r3, [pc, #132]	; (8007b4c <EE_Format+0xb4>)
 8007ac8:	69d8      	ldr	r0, [r3, #28]
 8007aca:	b280      	uxth	r0, r0
 8007acc:	e7f2      	b.n	8007ab4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ace:	4a21      	ldr	r2, [pc, #132]	; (8007b54 <EE_Format+0xbc>)
 8007ad0:	6913      	ldr	r3, [r2, #16]
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	438b      	bics	r3, r1
 8007ad6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2300      	movs	r3, #0
 8007adc:	4919      	ldr	r1, [pc, #100]	; (8007b44 <EE_Format+0xac>)
 8007ade:	2001      	movs	r0, #1
 8007ae0:	f009 fff2 	bl	8011ac8 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae4:	4818      	ldr	r0, [pc, #96]	; (8007b48 <EE_Format+0xb0>)
 8007ae6:	f009 ffc1 	bl	8011a6c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d003      	beq.n	8007af6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007aee:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <EE_Format+0xb4>)
 8007af0:	69d8      	ldr	r0, [r3, #28]
 8007af2:	b280      	uxth	r0, r0
 8007af4:	e7de      	b.n	8007ab4 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007af6:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <EE_Format+0xbc>)
 8007af8:	6913      	ldr	r3, [r2, #16]
 8007afa:	2101      	movs	r1, #1
 8007afc:	438b      	bics	r3, r1
 8007afe:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b00:	4815      	ldr	r0, [pc, #84]	; (8007b58 <EE_Format+0xc0>)
 8007b02:	f00a f859 	bl	8011bb8 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b06:	4810      	ldr	r0, [pc, #64]	; (8007b48 <EE_Format+0xb0>)
 8007b08:	f009 ffb0 	bl	8011a6c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d003      	beq.n	8007b18 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007b10:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <EE_Format+0xb4>)
 8007b12:	69d8      	ldr	r0, [r3, #28]
 8007b14:	b280      	uxth	r0, r0
 8007b16:	e7cd      	b.n	8007ab4 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b18:	4810      	ldr	r0, [pc, #64]	; (8007b5c <EE_Format+0xc4>)
 8007b1a:	f00a f84d 	bl	8011bb8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b1e:	480a      	ldr	r0, [pc, #40]	; (8007b48 <EE_Format+0xb0>)
 8007b20:	f009 ffa4 	bl	8011a6c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d003      	beq.n	8007b30 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <EE_Format+0xb4>)
 8007b2a:	69d8      	ldr	r0, [r3, #28]
 8007b2c:	b280      	uxth	r0, r0
 8007b2e:	e7c1      	b.n	8007ab4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b30:	4a08      	ldr	r2, [pc, #32]	; (8007b54 <EE_Format+0xbc>)
 8007b32:	6913      	ldr	r3, [r2, #16]
 8007b34:	2101      	movs	r1, #1
 8007b36:	438b      	bics	r3, r1
 8007b38:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007b3a:	f009 ff8d 	bl	8011a58 <HAL_FLASH_Lock>
	return FlashStatus;
 8007b3e:	2000      	movs	r0, #0
 8007b40:	e7b8      	b.n	8007ab4 <EE_Format+0x1c>
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	0801e000 	.word	0x0801e000
 8007b48:	0000c350 	.word	0x0000c350
 8007b4c:	20006780 	.word	0x20006780
 8007b50:	0801e800 	.word	0x0801e800
 8007b54:	40022000 	.word	0x40022000
 8007b58:	0801f000 	.word	0x0801f000
 8007b5c:	0801f800 	.word	0x0801f800

08007b60 <EE_Init>:
uint16_t EE_Init(void){
 8007b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b62:	46c6      	mov	lr, r8
 8007b64:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007b66:	f009 ff65 	bl	8011a34 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b6a:	4bbe      	ldr	r3, [pc, #760]	; (8007e64 <EE_Init+0x304>)
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b70:	4abd      	ldr	r2, [pc, #756]	; (8007e68 <EE_Init+0x308>)
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007b76:	49bd      	ldr	r1, [pc, #756]	; (8007e6c <EE_Init+0x30c>)
 8007b78:	428b      	cmp	r3, r1
 8007b7a:	d100      	bne.n	8007b7e <EE_Init+0x1e>
 8007b7c:	e074      	b.n	8007c68 <EE_Init+0x108>
 8007b7e:	49bc      	ldr	r1, [pc, #752]	; (8007e70 <EE_Init+0x310>)
 8007b80:	428b      	cmp	r3, r1
 8007b82:	d011      	beq.n	8007ba8 <EE_Init+0x48>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d100      	bne.n	8007b8a <EE_Init+0x2a>
 8007b88:	e109      	b.n	8007d9e <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007b8a:	f7ff ff85 	bl	8007a98 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b8e:	48b9      	ldr	r0, [pc, #740]	; (8007e74 <EE_Init+0x314>)
 8007b90:	f009 ff6c 	bl	8011a6c <FLASH_WaitForLastOperation>
 8007b94:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d102      	bne.n	8007ba0 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007b9a:	f009 ff5d 	bl	8011a58 <HAL_FLASH_Lock>
	return HAL_OK;
 8007b9e:	2600      	movs	r6, #0
}
 8007ba0:	0030      	movs	r0, r6
 8007ba2:	bc04      	pop	{r2}
 8007ba4:	4690      	mov	r8, r2
 8007ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d00d      	beq.n	8007bc8 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007bac:	4baf      	ldr	r3, [pc, #700]	; (8007e6c <EE_Init+0x30c>)
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d028      	beq.n	8007c04 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007bb2:	f7ff ff71 	bl	8007a98 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bb6:	48af      	ldr	r0, [pc, #700]	; (8007e74 <EE_Init+0x314>)
 8007bb8:	f009 ff58 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0ec      	beq.n	8007b9a <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007bc0:	4bad      	ldr	r3, [pc, #692]	; (8007e78 <EE_Init+0x318>)
 8007bc2:	69de      	ldr	r6, [r3, #28]
 8007bc4:	b2b6      	uxth	r6, r6
 8007bc6:	e7eb      	b.n	8007ba0 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007bc8:	48a6      	ldr	r0, [pc, #664]	; (8007e64 <EE_Init+0x304>)
 8007bca:	f009 fff5 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bce:	48a9      	ldr	r0, [pc, #676]	; (8007e74 <EE_Init+0x314>)
 8007bd0:	f009 ff4c 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d003      	beq.n	8007be0 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007bd8:	4ba7      	ldr	r3, [pc, #668]	; (8007e78 <EE_Init+0x318>)
 8007bda:	69de      	ldr	r6, [r3, #28]
 8007bdc:	b2b6      	uxth	r6, r6
 8007bde:	e7df      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007be0:	48a6      	ldr	r0, [pc, #664]	; (8007e7c <EE_Init+0x31c>)
 8007be2:	f009 ffe9 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007be6:	48a3      	ldr	r0, [pc, #652]	; (8007e74 <EE_Init+0x314>)
 8007be8:	f009 ff40 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d105      	bne.n	8007bfc <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007bf0:	4aa3      	ldr	r2, [pc, #652]	; (8007e80 <EE_Init+0x320>)
 8007bf2:	6913      	ldr	r3, [r2, #16]
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	438b      	bics	r3, r1
 8007bf8:	6113      	str	r3, [r2, #16]
 8007bfa:	e7ce      	b.n	8007b9a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bfc:	4b9e      	ldr	r3, [pc, #632]	; (8007e78 <EE_Init+0x318>)
 8007bfe:	69de      	ldr	r6, [r3, #28]
 8007c00:	b2b6      	uxth	r6, r6
 8007c02:	e7cd      	b.n	8007ba0 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c04:	4897      	ldr	r0, [pc, #604]	; (8007e64 <EE_Init+0x304>)
 8007c06:	f009 ffd7 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c0a:	489a      	ldr	r0, [pc, #616]	; (8007e74 <EE_Init+0x314>)
 8007c0c:	f009 ff2e 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d003      	beq.n	8007c1c <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007c14:	4b98      	ldr	r3, [pc, #608]	; (8007e78 <EE_Init+0x318>)
 8007c16:	69de      	ldr	r6, [r3, #28]
 8007c18:	b2b6      	uxth	r6, r6
 8007c1a:	e7c1      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c1c:	4897      	ldr	r0, [pc, #604]	; (8007e7c <EE_Init+0x31c>)
 8007c1e:	f009 ffcb 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c22:	4894      	ldr	r0, [pc, #592]	; (8007e74 <EE_Init+0x314>)
 8007c24:	f009 ff22 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d003      	beq.n	8007c34 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007c2c:	4b92      	ldr	r3, [pc, #584]	; (8007e78 <EE_Init+0x318>)
 8007c2e:	69de      	ldr	r6, [r3, #28]
 8007c30:	b2b6      	uxth	r6, r6
 8007c32:	e7b5      	b.n	8007ba0 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c34:	4a92      	ldr	r2, [pc, #584]	; (8007e80 <EE_Init+0x320>)
 8007c36:	6913      	ldr	r3, [r2, #16]
 8007c38:	2102      	movs	r1, #2
 8007c3a:	438b      	bics	r3, r1
 8007c3c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2300      	movs	r3, #0
 8007c42:	4989      	ldr	r1, [pc, #548]	; (8007e68 <EE_Init+0x308>)
 8007c44:	2001      	movs	r0, #1
 8007c46:	f009 ff3f 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c4a:	488a      	ldr	r0, [pc, #552]	; (8007e74 <EE_Init+0x314>)
 8007c4c:	f009 ff0e 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d105      	bne.n	8007c60 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c54:	4a8a      	ldr	r2, [pc, #552]	; (8007e80 <EE_Init+0x320>)
 8007c56:	6913      	ldr	r3, [r2, #16]
 8007c58:	2101      	movs	r1, #1
 8007c5a:	438b      	bics	r3, r1
 8007c5c:	6113      	str	r3, [r2, #16]
 8007c5e:	e79c      	b.n	8007b9a <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007c60:	4b85      	ldr	r3, [pc, #532]	; (8007e78 <EE_Init+0x318>)
 8007c62:	69de      	ldr	r6, [r3, #28]
 8007c64:	b2b6      	uxth	r6, r6
 8007c66:	e79b      	b.n	8007ba0 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d157      	bne.n	8007d1c <EE_Init+0x1bc>
 8007c6c:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c6e:	2701      	movs	r7, #1
 8007c70:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007c72:	4d84      	ldr	r5, [pc, #528]	; (8007e84 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c74:	4b84      	ldr	r3, [pc, #528]	; (8007e88 <EE_Init+0x328>)
 8007c76:	4698      	mov	r8, r3
 8007c78:	e005      	b.n	8007c86 <EE_Init+0x126>
						x =VarIdx;
 8007c7a:	b227      	sxth	r7, r4
 8007c7c:	e008      	b.n	8007c90 <EE_Init+0x130>
 8007c7e:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007c80:	4b82      	ldr	r3, [pc, #520]	; (8007e8c <EE_Init+0x32c>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d018      	beq.n	8007cb8 <EE_Init+0x158>
 8007c86:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007c88:	882b      	ldrh	r3, [r5, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	42b3      	cmp	r3, r6
 8007c8e:	d0f4      	beq.n	8007c7a <EE_Init+0x11a>
					if(VarIdx != x){
 8007c90:	42bc      	cmp	r4, r7
 8007c92:	d0f4      	beq.n	8007c7e <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007c94:	497c      	ldr	r1, [pc, #496]	; (8007e88 <EE_Init+0x328>)
 8007c96:	0030      	movs	r0, r6
 8007c98:	f7ff fe26 	bl	80078e8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007c9c:	2801      	cmp	r0, #1
 8007c9e:	d0ee      	beq.n	8007c7e <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	8819      	ldrh	r1, [r3, #0]
 8007ca4:	0030      	movs	r0, r6
 8007ca6:	f7ff fdb3 	bl	8007810 <EE_VerifyPageFullWriteVariable>
 8007caa:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cac:	4871      	ldr	r0, [pc, #452]	; (8007e74 <EE_Init+0x314>)
 8007cae:	f009 fedd 	bl	8011a6c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d0e3      	beq.n	8007c7e <EE_Init+0x11e>
 8007cb6:	e773      	b.n	8007ba0 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4969      	ldr	r1, [pc, #420]	; (8007e64 <EE_Init+0x304>)
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f009 ff02 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cc4:	486b      	ldr	r0, [pc, #428]	; (8007e74 <EE_Init+0x314>)
 8007cc6:	f009 fed1 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d003      	beq.n	8007cd6 <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007cce:	4b6a      	ldr	r3, [pc, #424]	; (8007e78 <EE_Init+0x318>)
 8007cd0:	69de      	ldr	r6, [r3, #28]
 8007cd2:	b2b6      	uxth	r6, r6
 8007cd4:	e764      	b.n	8007ba0 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cd6:	4a6a      	ldr	r2, [pc, #424]	; (8007e80 <EE_Init+0x320>)
 8007cd8:	6913      	ldr	r3, [r2, #16]
 8007cda:	2101      	movs	r1, #1
 8007cdc:	438b      	bics	r3, r1
 8007cde:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007ce0:	4861      	ldr	r0, [pc, #388]	; (8007e68 <EE_Init+0x308>)
 8007ce2:	f009 ff69 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce6:	4863      	ldr	r0, [pc, #396]	; (8007e74 <EE_Init+0x314>)
 8007ce8:	f009 fec0 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d003      	beq.n	8007cf8 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007cf0:	4b61      	ldr	r3, [pc, #388]	; (8007e78 <EE_Init+0x318>)
 8007cf2:	69de      	ldr	r6, [r3, #28]
 8007cf4:	b2b6      	uxth	r6, r6
 8007cf6:	e753      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cf8:	4865      	ldr	r0, [pc, #404]	; (8007e90 <EE_Init+0x330>)
 8007cfa:	f009 ff5d 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cfe:	485d      	ldr	r0, [pc, #372]	; (8007e74 <EE_Init+0x314>)
 8007d00:	f009 feb4 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d105      	bne.n	8007d14 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d08:	4a5d      	ldr	r2, [pc, #372]	; (8007e80 <EE_Init+0x320>)
 8007d0a:	6913      	ldr	r3, [r2, #16]
 8007d0c:	2102      	movs	r1, #2
 8007d0e:	438b      	bics	r3, r1
 8007d10:	6113      	str	r3, [r2, #16]
 8007d12:	e742      	b.n	8007b9a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d14:	4b58      	ldr	r3, [pc, #352]	; (8007e78 <EE_Init+0x318>)
 8007d16:	69de      	ldr	r6, [r3, #28]
 8007d18:	b2b6      	uxth	r6, r6
 8007d1a:	e741      	b.n	8007ba0 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007d1c:	4b54      	ldr	r3, [pc, #336]	; (8007e70 <EE_Init+0x310>)
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d00b      	beq.n	8007d3a <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007d22:	f7ff feb9 	bl	8007a98 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d26:	4853      	ldr	r0, [pc, #332]	; (8007e74 <EE_Init+0x314>)
 8007d28:	f009 fea0 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d100      	bne.n	8007d32 <EE_Init+0x1d2>
 8007d30:	e733      	b.n	8007b9a <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007d32:	4b51      	ldr	r3, [pc, #324]	; (8007e78 <EE_Init+0x318>)
 8007d34:	69de      	ldr	r6, [r3, #28]
 8007d36:	b2b6      	uxth	r6, r6
 8007d38:	e732      	b.n	8007ba0 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007d3a:	484b      	ldr	r0, [pc, #300]	; (8007e68 <EE_Init+0x308>)
 8007d3c:	f009 ff3c 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d40:	484c      	ldr	r0, [pc, #304]	; (8007e74 <EE_Init+0x314>)
 8007d42:	f009 fe93 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d003      	beq.n	8007d52 <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007d4a:	4b4b      	ldr	r3, [pc, #300]	; (8007e78 <EE_Init+0x318>)
 8007d4c:	69de      	ldr	r6, [r3, #28]
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	e726      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007d52:	484f      	ldr	r0, [pc, #316]	; (8007e90 <EE_Init+0x330>)
 8007d54:	f009 ff30 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d58:	4846      	ldr	r0, [pc, #280]	; (8007e74 <EE_Init+0x314>)
 8007d5a:	f009 fe87 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d003      	beq.n	8007d6a <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007d62:	4b45      	ldr	r3, [pc, #276]	; (8007e78 <EE_Init+0x318>)
 8007d64:	69de      	ldr	r6, [r3, #28]
 8007d66:	b2b6      	uxth	r6, r6
 8007d68:	e71a      	b.n	8007ba0 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d6a:	4a45      	ldr	r2, [pc, #276]	; (8007e80 <EE_Init+0x320>)
 8007d6c:	6913      	ldr	r3, [r2, #16]
 8007d6e:	2102      	movs	r1, #2
 8007d70:	438b      	bics	r3, r1
 8007d72:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	493a      	ldr	r1, [pc, #232]	; (8007e64 <EE_Init+0x304>)
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f009 fea4 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d80:	483c      	ldr	r0, [pc, #240]	; (8007e74 <EE_Init+0x314>)
 8007d82:	f009 fe73 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d003      	beq.n	8007d92 <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007d8a:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <EE_Init+0x318>)
 8007d8c:	69de      	ldr	r6, [r3, #28]
 8007d8e:	b2b6      	uxth	r6, r6
 8007d90:	e706      	b.n	8007ba0 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d92:	4a3b      	ldr	r2, [pc, #236]	; (8007e80 <EE_Init+0x320>)
 8007d94:	6913      	ldr	r3, [r2, #16]
 8007d96:	2101      	movs	r1, #1
 8007d98:	438b      	bics	r3, r1
 8007d9a:	6113      	str	r3, [r2, #16]
 8007d9c:	e6fd      	b.n	8007b9a <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d009      	beq.n	8007db6 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007da2:	4b33      	ldr	r3, [pc, #204]	; (8007e70 <EE_Init+0x310>)
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d010      	beq.n	8007dca <EE_Init+0x26a>
 8007da8:	2401      	movs	r4, #1
	int16_t x =-1;
 8007daa:	2701      	movs	r7, #1
 8007dac:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007dae:	4d39      	ldr	r5, [pc, #228]	; (8007e94 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007db0:	4b35      	ldr	r3, [pc, #212]	; (8007e88 <EE_Init+0x328>)
 8007db2:	4698      	mov	r8, r3
 8007db4:	e02d      	b.n	8007e12 <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007db6:	f7ff fe6f 	bl	8007a98 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dba:	482e      	ldr	r0, [pc, #184]	; (8007e74 <EE_Init+0x314>)
 8007dbc:	f009 fe56 	bl	8011a6c <FLASH_WaitForLastOperation>
 8007dc0:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d100      	bne.n	8007dc8 <EE_Init+0x268>
 8007dc6:	e6e8      	b.n	8007b9a <EE_Init+0x3a>
 8007dc8:	e6ea      	b.n	8007ba0 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007dca:	4827      	ldr	r0, [pc, #156]	; (8007e68 <EE_Init+0x308>)
 8007dcc:	f009 fef4 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dd0:	4828      	ldr	r0, [pc, #160]	; (8007e74 <EE_Init+0x314>)
 8007dd2:	f009 fe4b 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d003      	beq.n	8007de2 <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007dda:	4b27      	ldr	r3, [pc, #156]	; (8007e78 <EE_Init+0x318>)
 8007ddc:	69de      	ldr	r6, [r3, #28]
 8007dde:	b2b6      	uxth	r6, r6
 8007de0:	e6de      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007de2:	482b      	ldr	r0, [pc, #172]	; (8007e90 <EE_Init+0x330>)
 8007de4:	f009 fee8 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007de8:	4822      	ldr	r0, [pc, #136]	; (8007e74 <EE_Init+0x314>)
 8007dea:	f009 fe3f 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d105      	bne.n	8007dfe <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007df2:	4a23      	ldr	r2, [pc, #140]	; (8007e80 <EE_Init+0x320>)
 8007df4:	6913      	ldr	r3, [r2, #16]
 8007df6:	2102      	movs	r1, #2
 8007df8:	438b      	bics	r3, r1
 8007dfa:	6113      	str	r3, [r2, #16]
 8007dfc:	e6cd      	b.n	8007b9a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <EE_Init+0x318>)
 8007e00:	69de      	ldr	r6, [r3, #28]
 8007e02:	b2b6      	uxth	r6, r6
 8007e04:	e6cc      	b.n	8007ba0 <EE_Init+0x40>
						x =VarIdx;
 8007e06:	b227      	sxth	r7, r4
 8007e08:	e008      	b.n	8007e1c <EE_Init+0x2bc>
 8007e0a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007e0c:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <EE_Init+0x32c>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d018      	beq.n	8007e44 <EE_Init+0x2e4>
 8007e12:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007e14:	882b      	ldrh	r3, [r5, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	42b3      	cmp	r3, r6
 8007e1a:	d0f4      	beq.n	8007e06 <EE_Init+0x2a6>
					if(VarIdx != x){
 8007e1c:	42bc      	cmp	r4, r7
 8007e1e:	d0f4      	beq.n	8007e0a <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007e20:	4919      	ldr	r1, [pc, #100]	; (8007e88 <EE_Init+0x328>)
 8007e22:	0030      	movs	r0, r6
 8007e24:	f7ff fd60 	bl	80078e8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007e28:	2801      	cmp	r0, #1
 8007e2a:	d0ee      	beq.n	8007e0a <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	8819      	ldrh	r1, [r3, #0]
 8007e30:	0030      	movs	r0, r6
 8007e32:	f7ff fced 	bl	8007810 <EE_VerifyPageFullWriteVariable>
 8007e36:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e38:	480e      	ldr	r0, [pc, #56]	; (8007e74 <EE_Init+0x314>)
 8007e3a:	f009 fe17 	bl	8011a6c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0e3      	beq.n	8007e0a <EE_Init+0x2aa>
 8007e42:	e6ad      	b.n	8007ba0 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4907      	ldr	r1, [pc, #28]	; (8007e68 <EE_Init+0x308>)
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	f009 fe3c 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e50:	4808      	ldr	r0, [pc, #32]	; (8007e74 <EE_Init+0x314>)
 8007e52:	f009 fe0b 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d01e      	beq.n	8007e98 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <EE_Init+0x318>)
 8007e5c:	69de      	ldr	r6, [r3, #28]
 8007e5e:	b2b6      	uxth	r6, r6
 8007e60:	e69e      	b.n	8007ba0 <EE_Init+0x40>
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	0801e000 	.word	0x0801e000
 8007e68:	0801f000 	.word	0x0801f000
 8007e6c:	0000eeee 	.word	0x0000eeee
 8007e70:	0000ffff 	.word	0x0000ffff
 8007e74:	0000c350 	.word	0x0000c350
 8007e78:	20006780 	.word	0x20006780
 8007e7c:	0801e800 	.word	0x0801e800
 8007e80:	40022000 	.word	0x40022000
 8007e84:	0801e006 	.word	0x0801e006
 8007e88:	20000cec 	.word	0x20000cec
 8007e8c:	00000401 	.word	0x00000401
 8007e90:	0801f800 	.word	0x0801f800
 8007e94:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e98:	4a11      	ldr	r2, [pc, #68]	; (8007ee0 <EE_Init+0x380>)
 8007e9a:	6913      	ldr	r3, [r2, #16]
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	438b      	bics	r3, r1
 8007ea0:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ea2:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <EE_Init+0x384>)
 8007ea4:	f009 fe88 	bl	8011bb8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ea8:	480f      	ldr	r0, [pc, #60]	; (8007ee8 <EE_Init+0x388>)
 8007eaa:	f009 fddf 	bl	8011a6c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d003      	beq.n	8007eba <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <EE_Init+0x38c>)
 8007eb4:	69de      	ldr	r6, [r3, #28]
 8007eb6:	b2b6      	uxth	r6, r6
 8007eb8:	e672      	b.n	8007ba0 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007eba:	480d      	ldr	r0, [pc, #52]	; (8007ef0 <EE_Init+0x390>)
 8007ebc:	f009 fe7c 	bl	8011bb8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ec0:	4809      	ldr	r0, [pc, #36]	; (8007ee8 <EE_Init+0x388>)
 8007ec2:	f009 fdd3 	bl	8011a6c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d105      	bne.n	8007ed6 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007eca:	4a05      	ldr	r2, [pc, #20]	; (8007ee0 <EE_Init+0x380>)
 8007ecc:	6913      	ldr	r3, [r2, #16]
 8007ece:	2102      	movs	r1, #2
 8007ed0:	438b      	bics	r3, r1
 8007ed2:	6113      	str	r3, [r2, #16]
 8007ed4:	e661      	b.n	8007b9a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <EE_Init+0x38c>)
 8007ed8:	69de      	ldr	r6, [r3, #28]
 8007eda:	b2b6      	uxth	r6, r6
 8007edc:	e660      	b.n	8007ba0 <EE_Init+0x40>
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	40022000 	.word	0x40022000
 8007ee4:	0801e000 	.word	0x0801e000
 8007ee8:	0000c350 	.word	0x0000c350
 8007eec:	20006780 	.word	0x20006780
 8007ef0:	0801e800 	.word	0x0801e800

08007ef4 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef6:	b08b      	sub	sp, #44	; 0x2c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007ef8:	25a0      	movs	r5, #160	; 0xa0
 8007efa:	006d      	lsls	r5, r5, #1
 8007efc:	2400      	movs	r4, #0
 8007efe:	9403      	str	r4, [sp, #12]
 8007f00:	9402      	str	r4, [sp, #8]
 8007f02:	4b3c      	ldr	r3, [pc, #240]	; (8007ff4 <MX_FREERTOS_Init+0x100>)
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2603      	movs	r6, #3
 8007f08:	9600      	str	r6, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	002a      	movs	r2, r5
 8007f0e:	493a      	ldr	r1, [pc, #232]	; (8007ff8 <MX_FREERTOS_Init+0x104>)
 8007f10:	483a      	ldr	r0, [pc, #232]	; (8007ffc <MX_FREERTOS_Init+0x108>)
 8007f12:	f007 f959 	bl	800f1c8 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007f16:	9403      	str	r4, [sp, #12]
 8007f18:	9402      	str	r4, [sp, #8]
 8007f1a:	4b39      	ldr	r3, [pc, #228]	; (8008000 <MX_FREERTOS_Init+0x10c>)
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	9600      	str	r6, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	002a      	movs	r2, r5
 8007f24:	4937      	ldr	r1, [pc, #220]	; (8008004 <MX_FREERTOS_Init+0x110>)
 8007f26:	4838      	ldr	r0, [pc, #224]	; (8008008 <MX_FREERTOS_Init+0x114>)
 8007f28:	f007 f94e 	bl	800f1c8 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007f2c:	9403      	str	r4, [sp, #12]
 8007f2e:	9402      	str	r4, [sp, #8]
 8007f30:	4b36      	ldr	r3, [pc, #216]	; (800800c <MX_FREERTOS_Init+0x118>)
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	9600      	str	r6, [sp, #0]
 8007f36:	2300      	movs	r3, #0
 8007f38:	002a      	movs	r2, r5
 8007f3a:	4935      	ldr	r1, [pc, #212]	; (8008010 <MX_FREERTOS_Init+0x11c>)
 8007f3c:	4835      	ldr	r0, [pc, #212]	; (8008014 <MX_FREERTOS_Init+0x120>)
 8007f3e:	f007 f943 	bl	800f1c8 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007f42:	f7ff fad3 	bl	80074ec <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007f46:	9403      	str	r4, [sp, #12]
 8007f48:	9402      	str	r4, [sp, #8]
 8007f4a:	4b33      	ldr	r3, [pc, #204]	; (8008018 <MX_FREERTOS_Init+0x124>)
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	9600      	str	r6, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	002a      	movs	r2, r5
 8007f54:	4931      	ldr	r1, [pc, #196]	; (800801c <MX_FREERTOS_Init+0x128>)
 8007f56:	4832      	ldr	r0, [pc, #200]	; (8008020 <MX_FREERTOS_Init+0x12c>)
 8007f58:	f007 f936 	bl	800f1c8 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007f5c:	4e31      	ldr	r6, [pc, #196]	; (8008024 <MX_FREERTOS_Init+0x130>)
 8007f5e:	9403      	str	r4, [sp, #12]
 8007f60:	9402      	str	r4, [sp, #8]
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <MX_FREERTOS_Init+0x134>)
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	2704      	movs	r7, #4
 8007f68:	9700      	str	r7, [sp, #0]
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	002a      	movs	r2, r5
 8007f6e:	492f      	ldr	r1, [pc, #188]	; (800802c <MX_FREERTOS_Init+0x138>)
 8007f70:	0030      	movs	r0, r6
 8007f72:	f007 f929 	bl	800f1c8 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007f76:	9403      	str	r4, [sp, #12]
 8007f78:	9402      	str	r4, [sp, #8]
 8007f7a:	4b2d      	ldr	r3, [pc, #180]	; (8008030 <MX_FREERTOS_Init+0x13c>)
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	9700      	str	r7, [sp, #0]
 8007f80:	2302      	movs	r3, #2
 8007f82:	002a      	movs	r2, r5
 8007f84:	492b      	ldr	r1, [pc, #172]	; (8008034 <MX_FREERTOS_Init+0x140>)
 8007f86:	0030      	movs	r0, r6
 8007f88:	f007 f91e 	bl	800f1c8 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007f8c:	9403      	str	r4, [sp, #12]
 8007f8e:	9402      	str	r4, [sp, #8]
 8007f90:	4b29      	ldr	r3, [pc, #164]	; (8008038 <MX_FREERTOS_Init+0x144>)
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	9700      	str	r7, [sp, #0]
 8007f96:	2303      	movs	r3, #3
 8007f98:	002a      	movs	r2, r5
 8007f9a:	4928      	ldr	r1, [pc, #160]	; (800803c <MX_FREERTOS_Init+0x148>)
 8007f9c:	0030      	movs	r0, r6
 8007f9e:	f007 f913 	bl	800f1c8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007fa2:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	a809      	add	r0, sp, #36	; 0x24
 8007fa8:	f006 fb1b 	bl	800e5e2 <osSemaphoreCreate>
 8007fac:	4e24      	ldr	r6, [pc, #144]	; (8008040 <MX_FREERTOS_Init+0x14c>)
 8007fae:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007fb0:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	a808      	add	r0, sp, #32
 8007fb6:	f006 fb14 	bl	800e5e2 <osSemaphoreCreate>
 8007fba:	4d22      	ldr	r5, [pc, #136]	; (8008044 <MX_FREERTOS_Init+0x150>)
 8007fbc:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007fbe:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	a807      	add	r0, sp, #28
 8007fc4:	f006 fb0d 	bl	800e5e2 <osSemaphoreCreate>
 8007fc8:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007fca:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007fcc:	2101      	movs	r1, #1
 8007fce:	a806      	add	r0, sp, #24
 8007fd0:	f006 fb07 	bl	800e5e2 <osSemaphoreCreate>
 8007fd4:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007fd6:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007fd8:	2101      	movs	r1, #1
 8007fda:	a805      	add	r0, sp, #20
 8007fdc:	f006 fb01 	bl	800e5e2 <osSemaphoreCreate>
 8007fe0:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007fe2:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	a804      	add	r0, sp, #16
 8007fe8:	f006 fafb 	bl	800e5e2 <osSemaphoreCreate>
 8007fec:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007fee:	b00b      	add	sp, #44	; 0x2c
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	20000d18 	.word	0x20000d18
 8007ff8:	08019ee8 	.word	0x08019ee8
 8007ffc:	080083e9 	.word	0x080083e9
 8008000:	20000cf0 	.word	0x20000cf0
 8008004:	08019ef4 	.word	0x08019ef4
 8008008:	08009d91 	.word	0x08009d91
 800800c:	20000d14 	.word	0x20000d14
 8008010:	08019f00 	.word	0x08019f00
 8008014:	08013aa3 	.word	0x08013aa3
 8008018:	20000dec 	.word	0x20000dec
 800801c:	08019f0c 	.word	0x08019f0c
 8008020:	08005289 	.word	0x08005289
 8008024:	0800a1dd 	.word	0x0800a1dd
 8008028:	20000cf4 	.word	0x20000cf4
 800802c:	08019f14 	.word	0x08019f14
 8008030:	20000cf8 	.word	0x20000cf8
 8008034:	08019f20 	.word	0x08019f20
 8008038:	20000cfc 	.word	0x20000cfc
 800803c:	08019f2c 	.word	0x08019f2c
 8008040:	20006320 	.word	0x20006320
 8008044:	20006300 	.word	0x20006300

08008048 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804a:	46de      	mov	lr, fp
 800804c:	4657      	mov	r7, sl
 800804e:	464e      	mov	r6, r9
 8008050:	4645      	mov	r5, r8
 8008052:	b5e0      	push	{r5, r6, r7, lr}
 8008054:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8008056:	4bd3      	ldr	r3, [pc, #844]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b03      	cmp	r3, #3
 800805c:	d000      	beq.n	8008060 <ExecuteMonitor+0x18>
 800805e:	e19a      	b.n	8008396 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8008060:	4bd0      	ldr	r3, [pc, #832]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
	flag=0;
 8008066:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8008068:	3220      	adds	r2, #32
 800806a:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800806c:	4bce      	ldr	r3, [pc, #824]	; (80083a8 <ExecuteMonitor+0x360>)
 800806e:	3301      	adds	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4bce      	ldr	r3, [pc, #824]	; (80083ac <ExecuteMonitor+0x364>)
 8008074:	3304      	adds	r3, #4
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	e186      	b.n	8008388 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800807a:	4bcd      	ldr	r3, [pc, #820]	; (80083b0 <ExecuteMonitor+0x368>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2220      	movs	r2, #32
 8008080:	4393      	bics	r3, r2
 8008082:	d018      	beq.n	80080b6 <ExecuteMonitor+0x6e>
 8008084:	4bc7      	ldr	r3, [pc, #796]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	1e5a      	subs	r2, r3, #1
 800808a:	2a01      	cmp	r2, #1
 800808c:	d800      	bhi.n	8008090 <ExecuteMonitor+0x48>
 800808e:	e0b8      	b.n	8008202 <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 8008090:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 8008092:	2064      	movs	r0, #100	; 0x64
 8008094:	f006 f81e 	bl	800e0d4 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8008098:	7963      	ldrb	r3, [r4, #5]
 800809a:	783a      	ldrb	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d0ec      	beq.n	800807a <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80080a0:	49c4      	ldr	r1, [pc, #784]	; (80083b4 <ExecuteMonitor+0x36c>)
 80080a2:	780a      	ldrb	r2, [r1, #0]
 80080a4:	1c50      	adds	r0, r2, #1
 80080a6:	7008      	strb	r0, [r1, #0]
 80080a8:	49c0      	ldr	r1, [pc, #768]	; (80083ac <ExecuteMonitor+0x364>)
 80080aa:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 80080ac:	4ac0      	ldr	r2, [pc, #768]	; (80083b0 <ExecuteMonitor+0x368>)
 80080ae:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80080b0:	4bbc      	ldr	r3, [pc, #752]	; (80083a4 <ExecuteMonitor+0x35c>)
 80080b2:	715e      	strb	r6, [r3, #5]
 80080b4:	e7e1      	b.n	800807a <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 80080b6:	4bbb      	ldr	r3, [pc, #748]	; (80083a4 <ExecuteMonitor+0x35c>)
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d000      	beq.n	80080c0 <ExecuteMonitor+0x78>
 80080be:	e0a0      	b.n	8008202 <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 80080c0:	4bbc      	ldr	r3, [pc, #752]	; (80083b4 <ExecuteMonitor+0x36c>)
 80080c2:	464a      	mov	r2, r9
 80080c4:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 80080c6:	4bb9      	ldr	r3, [pc, #740]	; (80083ac <ExecuteMonitor+0x364>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b5b      	cmp	r3, #91	; 0x5b
 80080cc:	d020      	beq.n	8008110 <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 80080ce:	2b23      	cmp	r3, #35	; 0x23
 80080d0:	d063      	beq.n	800819a <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 80080d2:	2b3d      	cmp	r3, #61	; 0x3d
 80080d4:	d074      	beq.n	80081c0 <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 80080d6:	4cb4      	ldr	r4, [pc, #720]	; (80083a8 <ExecuteMonitor+0x360>)
 80080d8:	7823      	ldrb	r3, [r4, #0]
 80080da:	4ab7      	ldr	r2, [pc, #732]	; (80083b8 <ExecuteMonitor+0x370>)
 80080dc:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80080de:	0118      	lsls	r0, r3, #4
 80080e0:	1ac3      	subs	r3, r0, r3
 80080e2:	48b6      	ldr	r0, [pc, #728]	; (80083bc <ExecuteMonitor+0x374>)
 80080e4:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80080e6:	220f      	movs	r2, #15
 80080e8:	0021      	movs	r1, r4
 80080ea:	f00b fd58 	bl	8013b9e <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80080ee:	2214      	movs	r2, #20
 80080f0:	4649      	mov	r1, r9
 80080f2:	48ae      	ldr	r0, [pc, #696]	; (80083ac <ExecuteMonitor+0x364>)
 80080f4:	f00b fd5c 	bl	8013bb0 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80080f8:	2214      	movs	r2, #20
 80080fa:	4649      	mov	r1, r9
 80080fc:	0020      	movs	r0, r4
 80080fe:	f00b fd57 	bl	8013bb0 <memset>
		                    nonProcessingParameterIndex=0;
 8008102:	465b      	mov	r3, fp
 8008104:	4652      	mov	r2, sl
 8008106:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8008108:	2603      	movs	r6, #3
 800810a:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 800810c:	4ca5      	ldr	r4, [pc, #660]	; (80083a4 <ExecuteMonitor+0x35c>)
 800810e:	e7bf      	b.n	8008090 <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 8008110:	4ba8      	ldr	r3, [pc, #672]	; (80083b4 <ExecuteMonitor+0x36c>)
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8008116:	4baa      	ldr	r3, [pc, #680]	; (80083c0 <ExecuteMonitor+0x378>)
 8008118:	781c      	ldrb	r4, [r3, #0]
 800811a:	4ba4      	ldr	r3, [pc, #656]	; (80083ac <ExecuteMonitor+0x364>)
 800811c:	7858      	ldrb	r0, [r3, #1]
 800811e:	210a      	movs	r1, #10
 8008120:	f7f8 f892 	bl	8000248 <__aeabi_uidivmod>
 8008124:	b2c9      	uxtb	r1, r1
 8008126:	2603      	movs	r6, #3
 8008128:	42a1      	cmp	r1, r4
 800812a:	d00d      	beq.n	8008148 <ExecuteMonitor+0x100>
 800812c:	4b9f      	ldr	r3, [pc, #636]	; (80083ac <ExecuteMonitor+0x364>)
 800812e:	4698      	mov	r8, r3
 8008130:	1cb5      	adds	r5, r6, #2
 8008132:	b2ed      	uxtb	r5, r5
 8008134:	4643      	mov	r3, r8
 8008136:	5d98      	ldrb	r0, [r3, r6]
 8008138:	210a      	movs	r1, #10
 800813a:	f7f8 f885 	bl	8000248 <__aeabi_uidivmod>
 800813e:	b2c9      	uxtb	r1, r1
 8008140:	42a1      	cmp	r1, r4
 8008142:	d002      	beq.n	800814a <ExecuteMonitor+0x102>
 8008144:	002e      	movs	r6, r5
 8008146:	e7f3      	b.n	8008130 <ExecuteMonitor+0xe8>
 8008148:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 800814a:	1c74      	adds	r4, r6, #1
 800814c:	b2e4      	uxtb	r4, r4
 800814e:	4b99      	ldr	r3, [pc, #612]	; (80083b4 <ExecuteMonitor+0x36c>)
 8008150:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8008152:	4b96      	ldr	r3, [pc, #600]	; (80083ac <ExecuteMonitor+0x364>)
 8008154:	5d1d      	ldrb	r5, [r3, r4]
 8008156:	210a      	movs	r1, #10
 8008158:	0028      	movs	r0, r5
 800815a:	f7f8 f875 	bl	8000248 <__aeabi_uidivmod>
 800815e:	4b92      	ldr	r3, [pc, #584]	; (80083a8 <ExecuteMonitor+0x360>)
 8008160:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8008162:	2d5d      	cmp	r5, #93	; 0x5d
 8008164:	d009      	beq.n	800817a <ExecuteMonitor+0x132>
 8008166:	3602      	adds	r6, #2
 8008168:	b2f4      	uxtb	r4, r6
 800816a:	4990      	ldr	r1, [pc, #576]	; (80083ac <ExecuteMonitor+0x364>)
 800816c:	e000      	b.n	8008170 <ExecuteMonitor+0x128>
 800816e:	001c      	movs	r4, r3
 8008170:	1c63      	adds	r3, r4, #1
 8008172:	b2db      	uxtb	r3, r3
 8008174:	5d0a      	ldrb	r2, [r1, r4]
 8008176:	2a5d      	cmp	r2, #93	; 0x5d
 8008178:	d1f9      	bne.n	800816e <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 800817a:	3401      	adds	r4, #1
 800817c:	b2e1      	uxtb	r1, r4
 800817e:	4b8d      	ldr	r3, [pc, #564]	; (80083b4 <ExecuteMonitor+0x36c>)
 8008180:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 8008182:	4b90      	ldr	r3, [pc, #576]	; (80083c4 <ExecuteMonitor+0x37c>)
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008188:	4887      	ldr	r0, [pc, #540]	; (80083a8 <ExecuteMonitor+0x360>)
 800818a:	3213      	adds	r2, #19
 800818c:	1a52      	subs	r2, r2, r1
 800818e:	4c87      	ldr	r4, [pc, #540]	; (80083ac <ExecuteMonitor+0x364>)
 8008190:	1861      	adds	r1, r4, r1
 8008192:	3001      	adds	r0, #1
 8008194:	f00b fd03 	bl	8013b9e <memcpy>
 8008198:	e79d      	b.n	80080d6 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800819a:	4c83      	ldr	r4, [pc, #524]	; (80083a8 <ExecuteMonitor+0x360>)
 800819c:	4d83      	ldr	r5, [pc, #524]	; (80083ac <ExecuteMonitor+0x364>)
 800819e:	7868      	ldrb	r0, [r5, #1]
 80081a0:	210a      	movs	r1, #10
 80081a2:	f7f8 f851 	bl	8000248 <__aeabi_uidivmod>
 80081a6:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 80081a8:	4b82      	ldr	r3, [pc, #520]	; (80083b4 <ExecuteMonitor+0x36c>)
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80081ae:	4b85      	ldr	r3, [pc, #532]	; (80083c4 <ExecuteMonitor+0x37c>)
 80081b0:	3a01      	subs	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80081b4:	1c60      	adds	r0, r4, #1
 80081b6:	1ca9      	adds	r1, r5, #2
 80081b8:	3211      	adds	r2, #17
 80081ba:	f00b fcf0 	bl	8013b9e <memcpy>
 80081be:	e78a      	b.n	80080d6 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80081c0:	4b7a      	ldr	r3, [pc, #488]	; (80083ac <ExecuteMonitor+0x364>)
 80081c2:	7858      	ldrb	r0, [r3, #1]
 80081c4:	210a      	movs	r1, #10
 80081c6:	f7f8 f83f 	bl	8000248 <__aeabi_uidivmod>
 80081ca:	4b7d      	ldr	r3, [pc, #500]	; (80083c0 <ExecuteMonitor+0x378>)
 80081cc:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80081ce:	4b77      	ldr	r3, [pc, #476]	; (80083ac <ExecuteMonitor+0x364>)
 80081d0:	7898      	ldrb	r0, [r3, #2]
 80081d2:	210a      	movs	r1, #10
 80081d4:	f7f8 f838 	bl	8000248 <__aeabi_uidivmod>
 80081d8:	4b7b      	ldr	r3, [pc, #492]	; (80083c8 <ExecuteMonitor+0x380>)
 80081da:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80081dc:	4b73      	ldr	r3, [pc, #460]	; (80083ac <ExecuteMonitor+0x364>)
 80081de:	78d8      	ldrb	r0, [r3, #3]
 80081e0:	210a      	movs	r1, #10
 80081e2:	f7f8 f831 	bl	8000248 <__aeabi_uidivmod>
 80081e6:	4b70      	ldr	r3, [pc, #448]	; (80083a8 <ExecuteMonitor+0x360>)
 80081e8:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 80081ea:	4b72      	ldr	r3, [pc, #456]	; (80083b4 <ExecuteMonitor+0x36c>)
 80081ec:	2204      	movs	r2, #4
 80081ee:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 80081f0:	4b74      	ldr	r3, [pc, #464]	; (80083c4 <ExecuteMonitor+0x37c>)
 80081f2:	3a03      	subs	r2, #3
 80081f4:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80081f6:	320f      	adds	r2, #15
 80081f8:	9901      	ldr	r1, [sp, #4]
 80081fa:	9800      	ldr	r0, [sp, #0]
 80081fc:	f00b fccf 	bl	8013b9e <memcpy>
 8008200:	e769      	b.n	80080d6 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 8008202:	2b01      	cmp	r3, #1
 8008204:	d015      	beq.n	8008232 <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8008206:	4b67      	ldr	r3, [pc, #412]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d000      	beq.n	8008210 <ExecuteMonitor+0x1c8>
 800820e:	e778      	b.n	8008102 <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 8008210:	2300      	movs	r3, #0
 8008212:	4a6e      	ldr	r2, [pc, #440]	; (80083cc <ExecuteMonitor+0x384>)
 8008214:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8008216:	4a6e      	ldr	r2, [pc, #440]	; (80083d0 <ExecuteMonitor+0x388>)
 8008218:	2101      	movs	r1, #1
 800821a:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800821c:	4a6d      	ldr	r2, [pc, #436]	; (80083d4 <ExecuteMonitor+0x38c>)
 800821e:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8008220:	4b69      	ldr	r3, [pc, #420]	; (80083c8 <ExecuteMonitor+0x380>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d100      	bne.n	800822a <ExecuteMonitor+0x1e2>
 8008228:	e07f      	b.n	800832a <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800822a:	0017      	movs	r7, r2
 800822c:	4e68      	ldr	r6, [pc, #416]	; (80083d0 <ExecuteMonitor+0x388>)
 800822e:	4d67      	ldr	r5, [pc, #412]	; (80083cc <ExecuteMonitor+0x384>)
 8008230:	e062      	b.n	80082f8 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 8008232:	4b66      	ldr	r3, [pc, #408]	; (80083cc <ExecuteMonitor+0x384>)
 8008234:	464a      	mov	r2, r9
 8008236:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 8008238:	4b65      	ldr	r3, [pc, #404]	; (80083d0 <ExecuteMonitor+0x388>)
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 800823e:	4b65      	ldr	r3, [pc, #404]	; (80083d4 <ExecuteMonitor+0x38c>)
 8008240:	464a      	mov	r2, r9
 8008242:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8008244:	4b60      	ldr	r3, [pc, #384]	; (80083c8 <ExecuteMonitor+0x380>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02a      	beq.n	80082a2 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800824c:	4b61      	ldr	r3, [pc, #388]	; (80083d4 <ExecuteMonitor+0x38c>)
 800824e:	4698      	mov	r8, r3
 8008250:	4e5f      	ldr	r6, [pc, #380]	; (80083d0 <ExecuteMonitor+0x388>)
 8008252:	4d5e      	ldr	r5, [pc, #376]	; (80083cc <ExecuteMonitor+0x384>)
 8008254:	e00b      	b.n	800826e <ExecuteMonitor+0x226>
		                   counter++;
 8008256:	4a5f      	ldr	r2, [pc, #380]	; (80083d4 <ExecuteMonitor+0x38c>)
 8008258:	7813      	ldrb	r3, [r2, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	b2db      	uxtb	r3, r3
 800825e:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8008260:	4a5b      	ldr	r2, [pc, #364]	; (80083d0 <ExecuteMonitor+0x388>)
 8008262:	2101      	movs	r1, #1
 8008264:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 8008266:	4a58      	ldr	r2, [pc, #352]	; (80083c8 <ExecuteMonitor+0x380>)
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d019      	beq.n	80082a2 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800826e:	4643      	mov	r3, r8
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	7830      	ldrb	r0, [r6, #0]
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	7033      	strb	r3, [r6, #0]
 8008278:	7829      	ldrb	r1, [r5, #0]
 800827a:	1c4b      	adds	r3, r1, #1
 800827c:	702b      	strb	r3, [r5, #0]
 800827e:	4c56      	ldr	r4, [pc, #344]	; (80083d8 <ExecuteMonitor+0x390>)
 8008280:	0113      	lsls	r3, r2, #4
 8008282:	1a9a      	subs	r2, r3, r2
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <ExecuteMonitor+0x374>)
 8008286:	189b      	adds	r3, r3, r2
 8008288:	5c1b      	ldrb	r3, [r3, r0]
 800828a:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 800828c:	2001      	movs	r0, #1
 800828e:	f008 f9cb 	bl	8010628 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008292:	782b      	ldrb	r3, [r5, #0]
 8008294:	18e4      	adds	r4, r4, r3
 8008296:	3c01      	subs	r4, #1
 8008298:	7823      	ldrb	r3, [r4, #0]
 800829a:	2220      	movs	r2, #32
 800829c:	4393      	bics	r3, r2
 800829e:	d1e6      	bne.n	800826e <ExecuteMonitor+0x226>
 80082a0:	e7d9      	b.n	8008256 <ExecuteMonitor+0x20e>
		          		   flag=0;
 80082a2:	4b40      	ldr	r3, [pc, #256]	; (80083a4 <ExecuteMonitor+0x35c>)
 80082a4:	464a      	mov	r2, r9
 80082a6:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 80082a8:	4b4a      	ldr	r3, [pc, #296]	; (80083d4 <ExecuteMonitor+0x38c>)
 80082aa:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082ac:	4b4b      	ldr	r3, [pc, #300]	; (80083dc <ExecuteMonitor+0x394>)
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082b2:	4e4b      	ldr	r6, [pc, #300]	; (80083e0 <ExecuteMonitor+0x398>)
 80082b4:	4d48      	ldr	r5, [pc, #288]	; (80083d8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082b6:	4c49      	ldr	r4, [pc, #292]	; (80083dc <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082b8:	18f2      	adds	r2, r6, r3
 80082ba:	3281      	adds	r2, #129	; 0x81
 80082bc:	32ff      	adds	r2, #255	; 0xff
 80082be:	5ceb      	ldrb	r3, [r5, r3]
 80082c0:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80082c2:	2001      	movs	r0, #1
 80082c4:	f008 f9b0 	bl	8010628 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082c8:	7823      	ldrb	r3, [r4, #0]
 80082ca:	3301      	adds	r3, #1
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	7023      	strb	r3, [r4, #0]
 80082d0:	2b3f      	cmp	r3, #63	; 0x3f
 80082d2:	d9f1      	bls.n	80082b8 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80082d4:	2240      	movs	r2, #64	; 0x40
 80082d6:	4649      	mov	r1, r9
 80082d8:	483f      	ldr	r0, [pc, #252]	; (80083d8 <ExecuteMonitor+0x390>)
 80082da:	f00b fc69 	bl	8013bb0 <memset>
 80082de:	e792      	b.n	8008206 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 80082e0:	4a3c      	ldr	r2, [pc, #240]	; (80083d4 <ExecuteMonitor+0x38c>)
 80082e2:	7813      	ldrb	r3, [r2, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 80082ea:	4a39      	ldr	r2, [pc, #228]	; (80083d0 <ExecuteMonitor+0x388>)
 80082ec:	2101      	movs	r1, #1
 80082ee:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 80082f0:	4a35      	ldr	r2, [pc, #212]	; (80083c8 <ExecuteMonitor+0x380>)
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d018      	beq.n	800832a <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80082f8:	783a      	ldrb	r2, [r7, #0]
 80082fa:	7830      	ldrb	r0, [r6, #0]
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	7033      	strb	r3, [r6, #0]
 8008300:	7829      	ldrb	r1, [r5, #0]
 8008302:	1c4b      	adds	r3, r1, #1
 8008304:	702b      	strb	r3, [r5, #0]
 8008306:	4c34      	ldr	r4, [pc, #208]	; (80083d8 <ExecuteMonitor+0x390>)
 8008308:	0113      	lsls	r3, r2, #4
 800830a:	1a9a      	subs	r2, r3, r2
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <ExecuteMonitor+0x374>)
 800830e:	189b      	adds	r3, r3, r2
 8008310:	5c1b      	ldrb	r3, [r3, r0]
 8008312:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8008314:	2001      	movs	r0, #1
 8008316:	f008 f987 	bl	8010628 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800831a:	782b      	ldrb	r3, [r5, #0]
 800831c:	18e4      	adds	r4, r4, r3
 800831e:	3c01      	subs	r4, #1
 8008320:	7823      	ldrb	r3, [r4, #0]
 8008322:	2220      	movs	r2, #32
 8008324:	4393      	bics	r3, r2
 8008326:	d1e7      	bne.n	80082f8 <ExecuteMonitor+0x2b0>
 8008328:	e7da      	b.n	80082e0 <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 800832a:	4b2a      	ldr	r3, [pc, #168]	; (80083d4 <ExecuteMonitor+0x38c>)
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01d      	beq.n	8008374 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008338:	4b28      	ldr	r3, [pc, #160]	; (80083dc <ExecuteMonitor+0x394>)
 800833a:	4699      	mov	r9, r3
 800833c:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800833e:	4f28      	ldr	r7, [pc, #160]	; (80083e0 <ExecuteMonitor+0x398>)
 8008340:	4e25      	ldr	r6, [pc, #148]	; (80083d8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008342:	464b      	mov	r3, r9
 8008344:	701d      	strb	r5, [r3, #0]
 8008346:	2300      	movs	r3, #0
 8008348:	4c24      	ldr	r4, [pc, #144]	; (80083dc <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800834a:	18fa      	adds	r2, r7, r3
 800834c:	3281      	adds	r2, #129	; 0x81
 800834e:	32ff      	adds	r2, #255	; 0xff
 8008350:	5cf3      	ldrb	r3, [r6, r3]
 8008352:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8008354:	20c8      	movs	r0, #200	; 0xc8
 8008356:	f005 febd 	bl	800e0d4 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800835a:	7823      	ldrb	r3, [r4, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	b2db      	uxtb	r3, r3
 8008360:	7023      	strb	r3, [r4, #0]
 8008362:	2b3f      	cmp	r3, #63	; 0x3f
 8008364:	d9f1      	bls.n	800834a <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 8008366:	4c0f      	ldr	r4, [pc, #60]	; (80083a4 <ExecuteMonitor+0x35c>)
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	f008 f95d 	bl	8010628 <HAL_Delay>
                  while(flag != NonActive)
 800836e:	7923      	ldrb	r3, [r4, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e6      	bne.n	8008342 <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008374:	2240      	movs	r2, #64	; 0x40
 8008376:	2100      	movs	r1, #0
 8008378:	4817      	ldr	r0, [pc, #92]	; (80083d8 <ExecuteMonitor+0x390>)
 800837a:	f00b fc19 	bl	8013bb0 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800837e:	22c0      	movs	r2, #192	; 0xc0
 8008380:	2100      	movs	r1, #0
 8008382:	4818      	ldr	r0, [pc, #96]	; (80083e4 <ExecuteMonitor+0x39c>)
 8008384:	f00b fc14 	bl	8013bb0 <memset>
		                    nonProcessingParameterIndex=0;
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <ExecuteMonitor+0x36c>)
 800838a:	469b      	mov	fp, r3
 800838c:	2300      	movs	r3, #0
 800838e:	4699      	mov	r9, r3
 8008390:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 8008392:	4f07      	ldr	r7, [pc, #28]	; (80083b0 <ExecuteMonitor+0x368>)
 8008394:	e6b5      	b.n	8008102 <ExecuteMonitor+0xba>
		           }
	}
  }
}
 8008396:	b003      	add	sp, #12
 8008398:	bc3c      	pop	{r2, r3, r4, r5}
 800839a:	4690      	mov	r8, r2
 800839c:	4699      	mov	r9, r3
 800839e:	46a2      	mov	sl, r4
 80083a0:	46ab      	mov	fp, r5
 80083a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a4:	20000000 	.word	0x20000000
 80083a8:	20000d00 	.word	0x20000d00
 80083ac:	20000d5c 	.word	0x20000d5c
 80083b0:	200062fc 	.word	0x200062fc
 80083b4:	2000631d 	.word	0x2000631d
 80083b8:	2000633f 	.word	0x2000633f
 80083bc:	20000d70 	.word	0x20000d70
 80083c0:	2000633e 	.word	0x2000633e
 80083c4:	2000631c 	.word	0x2000631c
 80083c8:	2000633c 	.word	0x2000633c
 80083cc:	20006340 	.word	0x20006340
 80083d0:	2000633d 	.word	0x2000633d
 80083d4:	2000631e 	.word	0x2000631e
 80083d8:	20000d1c 	.word	0x20000d1c
 80083dc:	200062fd 	.word	0x200062fd
 80083e0:	20000a4c 	.word	0x20000a4c
 80083e4:	20000bcc 	.word	0x20000bcc

080083e8 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80083e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ea:	46c6      	mov	lr, r8
 80083ec:	b500      	push	{lr}
		switch(indMode){
 80083ee:	4c2c      	ldr	r4, [pc, #176]	; (80084a0 <StartDefaultTask+0xb8>)
				indMode =IND_OFF;
 80083f0:	46a0      	mov	r8, r4
				indMode =IND_OFF;
 80083f2:	0027      	movs	r7, r4
 80083f4:	e022      	b.n	800843c <StartDefaultTask+0x54>
				RTOS_IND_blink(200);
 80083f6:	2680      	movs	r6, #128	; 0x80
 80083f8:	0136      	lsls	r6, r6, #4
 80083fa:	2590      	movs	r5, #144	; 0x90
 80083fc:	05ed      	lsls	r5, r5, #23
 80083fe:	2201      	movs	r2, #1
 8008400:	0031      	movs	r1, r6
 8008402:	0028      	movs	r0, r5
 8008404:	f009 fdbe 	bl	8011f84 <HAL_GPIO_WritePin>
 8008408:	20c8      	movs	r0, #200	; 0xc8
 800840a:	f006 f8e2 	bl	800e5d2 <osDelay>
 800840e:	2200      	movs	r2, #0
 8008410:	0031      	movs	r1, r6
 8008412:	0028      	movs	r0, r5
 8008414:	f009 fdb6 	bl	8011f84 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008418:	4b21      	ldr	r3, [pc, #132]	; (80084a0 <StartDefaultTask+0xb8>)
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 800841e:	f000 fe0d 	bl	800903c <CheckAttachedButtons>
		ExecuteSnippet();
 8008422:	f7fd f8e7 	bl	80055f4 <ExecuteSnippet>
		ExecuteMonitor();
 8008426:	f7ff fe0f 	bl	8008048 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800842a:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <StartDefaultTask+0xbc>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <StartDefaultTask+0x50>
			delayButtonStateReset = false;
 8008432:	4b1d      	ldr	r3, [pc, #116]	; (80084a8 <StartDefaultTask+0xc0>)
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8008438:	f007 ff78 	bl	801032c <vPortYield>
		switch(indMode){
 800843c:	7823      	ldrb	r3, [r4, #0]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d004      	beq.n	800844c <StartDefaultTask+0x64>
 8008442:	2b03      	cmp	r3, #3
 8008444:	d017      	beq.n	8008476 <StartDefaultTask+0x8e>
 8008446:	2b01      	cmp	r3, #1
 8008448:	d1e9      	bne.n	800841e <StartDefaultTask+0x36>
 800844a:	e7d4      	b.n	80083f6 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 800844c:	2680      	movs	r6, #128	; 0x80
 800844e:	0136      	lsls	r6, r6, #4
 8008450:	2590      	movs	r5, #144	; 0x90
 8008452:	05ed      	lsls	r5, r5, #23
 8008454:	2201      	movs	r2, #1
 8008456:	0031      	movs	r1, r6
 8008458:	0028      	movs	r0, r5
 800845a:	f009 fd93 	bl	8011f84 <HAL_GPIO_WritePin>
 800845e:	2064      	movs	r0, #100	; 0x64
 8008460:	f006 f8b7 	bl	800e5d2 <osDelay>
 8008464:	2200      	movs	r2, #0
 8008466:	0031      	movs	r1, r6
 8008468:	0028      	movs	r0, r5
 800846a:	f009 fd8b 	bl	8011f84 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800846e:	2300      	movs	r3, #0
 8008470:	4642      	mov	r2, r8
 8008472:	7013      	strb	r3, [r2, #0]
				break;
 8008474:	e7d3      	b.n	800841e <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8008476:	2680      	movs	r6, #128	; 0x80
 8008478:	0136      	lsls	r6, r6, #4
 800847a:	2590      	movs	r5, #144	; 0x90
 800847c:	05ed      	lsls	r5, r5, #23
 800847e:	2201      	movs	r2, #1
 8008480:	0031      	movs	r1, r6
 8008482:	0028      	movs	r0, r5
 8008484:	f009 fd7e 	bl	8011f84 <HAL_GPIO_WritePin>
 8008488:	201e      	movs	r0, #30
 800848a:	f006 f8a2 	bl	800e5d2 <osDelay>
 800848e:	2200      	movs	r2, #0
 8008490:	0031      	movs	r1, r6
 8008492:	0028      	movs	r0, r5
 8008494:	f009 fd76 	bl	8011f84 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008498:	2300      	movs	r3, #0
 800849a:	703b      	strb	r3, [r7, #0]
				break;
 800849c:	e7bf      	b.n	800841e <StartDefaultTask+0x36>
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	20000690 	.word	0x20000690
 80084a4:	20000e35 	.word	0x20000e35
 80084a8:	20000e34 	.word	0x20000e34

080084ac <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 80084ac:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <vMainConfigureTimerForRunTimeStats+0x14>)
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	4904      	ldr	r1, [pc, #16]	; (80084c4 <vMainConfigureTimerForRunTimeStats+0x18>)
 80084b4:	f7f7 fe42 	bl	800013c <__udivsi3>
 80084b8:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80084ba:	6018      	str	r0, [r3, #0]
}
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	200000ac 	.word	0x200000ac
 80084c4:	00002710 	.word	0x00002710
 80084c8:	20000de8 	.word	0x20000de8

080084cc <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80084cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <ulMainGetRunTimeCounterValue+0x40>)
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	21fa      	movs	r1, #250	; 0xfa
 80084d4:	0089      	lsls	r1, r1, #2
 80084d6:	f7f7 fe31 	bl	800013c <__udivsi3>
 80084da:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80084dc:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <ulMainGetRunTimeCounterValue+0x44>)
 80084de:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80084e0:	f007 f804 	bl	800f4ec <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <ulMainGetRunTimeCounterValue+0x48>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	015b      	lsls	r3, r3, #5
 80084ea:	d50d      	bpl.n	8008508 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80084ec:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80084ee:	4b08      	ldr	r3, [pc, #32]	; (8008510 <ulMainGetRunTimeCounterValue+0x44>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 80084f4:	0084      	lsls	r4, r0, #2
 80084f6:	1824      	adds	r4, r4, r0
 80084f8:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <ulMainGetRunTimeCounterValue+0x4c>)
 80084fc:	6819      	ldr	r1, [r3, #0]
 80084fe:	0028      	movs	r0, r5
 8008500:	f7f7 fe1c 	bl	800013c <__udivsi3>
 8008504:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008506:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008508:	1b2d      	subs	r5, r5, r4
 800850a:	e7f3      	b.n	80084f4 <ulMainGetRunTimeCounterValue+0x28>
 800850c:	200000ac 	.word	0x200000ac
 8008510:	e000e018 	.word	0xe000e018
 8008514:	e000ed04 	.word	0xe000ed04
 8008518:	20000de8 	.word	0x20000de8

0800851c <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800851c:	4770      	bx	lr
	...

08008520 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 8008520:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8008522:	00c2      	lsls	r2, r0, #3
 8008524:	1812      	adds	r2, r2, r0
 8008526:	4b1b      	ldr	r3, [pc, #108]	; (8008594 <CheckForTimedButtonPress+0x74>)
 8008528:	189b      	adds	r3, r3, r2
 800852a:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800852c:	0082      	lsls	r2, r0, #2
 800852e:	4b1a      	ldr	r3, [pc, #104]	; (8008598 <CheckForTimedButtonPress+0x78>)
 8008530:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8008532:	0163      	lsls	r3, r4, #5
 8008534:	1b1b      	subs	r3, r3, r4
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	191b      	adds	r3, r3, r4
 800853a:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800853c:	4299      	cmp	r1, r3
 800853e:	d01c      	beq.n	800857a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8008540:	00c2      	lsls	r2, r0, #3
 8008542:	1812      	adds	r2, r2, r0
 8008544:	4b13      	ldr	r3, [pc, #76]	; (8008594 <CheckForTimedButtonPress+0x74>)
 8008546:	189b      	adds	r3, r3, r2
 8008548:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800854a:	0163      	lsls	r3, r4, #5
 800854c:	1b1b      	subs	r3, r3, r4
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	191b      	adds	r3, r3, r4
 8008552:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 8008554:	4299      	cmp	r1, r3
 8008556:	d017      	beq.n	8008588 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 8008558:	00c2      	lsls	r2, r0, #3
 800855a:	1812      	adds	r2, r2, r0
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <CheckForTimedButtonPress+0x74>)
 800855e:	189b      	adds	r3, r3, r2
 8008560:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 8008562:	0163      	lsls	r3, r4, #5
 8008564:	1b1b      	subs	r3, r3, r4
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	191b      	adds	r3, r3, r4
 800856a:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800856c:	4299      	cmp	r1, r3
 800856e:	d109      	bne.n	8008584 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 8008570:	0010      	movs	r0, r2
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <CheckForTimedButtonPress+0x74>)
 8008574:	220a      	movs	r2, #10
 8008576:	54c2      	strb	r2, [r0, r3]
 8008578:	e004      	b.n	8008584 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800857a:	00c3      	lsls	r3, r0, #3
 800857c:	1818      	adds	r0, r3, r0
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <CheckForTimedButtonPress+0x74>)
 8008580:	2209      	movs	r2, #9
 8008582:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8008584:	2000      	movs	r0, #0
 8008586:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008588:	0010      	movs	r0, r2
 800858a:	4b02      	ldr	r3, [pc, #8]	; (8008594 <CheckForTimedButtonPress+0x74>)
 800858c:	220a      	movs	r2, #10
 800858e:	54c2      	strb	r2, [r0, r3]
 8008590:	e7f8      	b.n	8008584 <CheckForTimedButtonPress+0x64>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	20000e04 	.word	0x20000e04
 8008598:	20000e3c 	.word	0x20000e3c

0800859c <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800859c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800859e:	00c2      	lsls	r2, r0, #3
 80085a0:	1812      	adds	r2, r2, r0
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 80085a8:	0082      	lsls	r2, r0, #2
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <CheckForTimedButtonRelease+0x78>)
 80085ac:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 80085ae:	0163      	lsls	r3, r4, #5
 80085b0:	1b1b      	subs	r3, r3, r4
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	191b      	adds	r3, r3, r4
 80085b6:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d01c      	beq.n	80085f6 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80085bc:	00c2      	lsls	r2, r0, #3
 80085be:	1812      	adds	r2, r2, r0
 80085c0:	4b13      	ldr	r3, [pc, #76]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 80085c6:	0163      	lsls	r3, r4, #5
 80085c8:	1b1b      	subs	r3, r3, r4
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	191b      	adds	r3, r3, r4
 80085ce:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 80085d0:	4299      	cmp	r1, r3
 80085d2:	d017      	beq.n	8008604 <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 80085d4:	00c2      	lsls	r2, r0, #3
 80085d6:	1812      	adds	r2, r2, r0
 80085d8:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 80085de:	0163      	lsls	r3, r4, #5
 80085e0:	1b1b      	subs	r3, r3, r4
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	191b      	adds	r3, r3, r4
 80085e6:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 80085e8:	4299      	cmp	r1, r3
 80085ea:	d109      	bne.n	8008600 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 80085ec:	0010      	movs	r0, r2
 80085ee:	4b08      	ldr	r3, [pc, #32]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 80085f0:	220d      	movs	r2, #13
 80085f2:	54c2      	strb	r2, [r0, r3]
 80085f4:	e004      	b.n	8008600 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80085f6:	00c3      	lsls	r3, r0, #3
 80085f8:	1818      	adds	r0, r3, r0
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 80085fc:	220c      	movs	r2, #12
 80085fe:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8008600:	2000      	movs	r0, #0
 8008602:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008604:	0010      	movs	r0, r2
 8008606:	4b02      	ldr	r3, [pc, #8]	; (8008610 <CheckForTimedButtonRelease+0x74>)
 8008608:	220d      	movs	r2, #13
 800860a:	54c2      	strb	r2, [r0, r3]
 800860c:	e7f8      	b.n	8008600 <CheckForTimedButtonRelease+0x64>
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	20000e04 	.word	0x20000e04
 8008614:	20000e4c 	.word	0x20000e4c

08008618 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	b08d      	sub	sp, #52	; 0x34
 800861c:	0006      	movs	r6, r0
 800861e:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008620:	4b41      	ldr	r3, [pc, #260]	; (8008728 <AddPortButton+0x110>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d157      	bne.n	80086d8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 8008628:	4b40      	ldr	r3, [pc, #256]	; (800872c <AddPortButton+0x114>)
 800862a:	2204      	movs	r2, #4
 800862c:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800862e:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <AddPortButton+0x110>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d15a      	bne.n	80086ec <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008636:	2512      	movs	r5, #18
 8008638:	446d      	add	r5, sp
 800863a:	af04      	add	r7, sp, #16
 800863c:	9700      	str	r7, [sp, #0]
 800863e:	ab05      	add	r3, sp, #20
 8008640:	002a      	movs	r2, r5
 8008642:	a906      	add	r1, sp, #24
 8008644:	0020      	movs	r0, r4
 8008646:	f005 f9e7 	bl	800da18 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800864a:	882b      	ldrh	r3, [r5, #0]
 800864c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800864e:	2301      	movs	r3, #1
 8008650:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008652:	2500      	movs	r5, #0
 8008654:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008656:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008658:	a907      	add	r1, sp, #28
 800865a:	9806      	ldr	r0, [sp, #24]
 800865c:	f009 fb1e 	bl	8011c9c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008660:	883b      	ldrh	r3, [r7, #0]
 8008662:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008664:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008666:	2302      	movs	r3, #2
 8008668:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800866a:	a907      	add	r1, sp, #28
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	f009 fb15 	bl	8011c9c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 8008672:	00e2      	lsls	r2, r4, #3
 8008674:	1912      	adds	r2, r2, r4
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <AddPortButton+0x118>)
 8008678:	189b      	adds	r3, r3, r2
 800867a:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800867c:	0025      	movs	r5, r4
 800867e:	353a      	adds	r5, #58	; 0x3a
 8008680:	00ad      	lsls	r5, r5, #2
 8008682:	210e      	movs	r1, #14
 8008684:	4469      	add	r1, sp
 8008686:	0028      	movs	r0, r5
 8008688:	f7ff f92e 	bl	80078e8 <EE_ReadVariable>
	if (!res)											// This variable exists
 800868c:	2800      	cmp	r0, #0
 800868e:	d133      	bne.n	80086f8 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8008690:	230e      	movs	r3, #14
 8008692:	446b      	add	r3, sp
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008698:	091a      	lsrs	r2, r3, #4
 800869a:	42a2      	cmp	r2, r4
 800869c:	d103      	bne.n	80086a6 <AddPortButton+0x8e>
 800869e:	220f      	movs	r2, #15
 80086a0:	4013      	ands	r3, r2
 80086a2:	42b3      	cmp	r3, r6
 80086a4:	d015      	beq.n	80086d2 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 80086a6:	0324      	lsls	r4, r4, #12
 80086a8:	0231      	lsls	r1, r6, #8
 80086aa:	4321      	orrs	r1, r4
 80086ac:	b289      	uxth	r1, r1
 80086ae:	230e      	movs	r3, #14
 80086b0:	446b      	add	r3, sp
 80086b2:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 80086b4:	0028      	movs	r0, r5
 80086b6:	f7ff f947 	bl	8007948 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 80086ba:	1c68      	adds	r0, r5, #1
 80086bc:	2100      	movs	r1, #0
 80086be:	f7ff f943 	bl	8007948 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 80086c2:	1ca8      	adds	r0, r5, #2
 80086c4:	2100      	movs	r1, #0
 80086c6:	f7ff f93f 	bl	8007948 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80086ca:	1ce8      	adds	r0, r5, #3
 80086cc:	2100      	movs	r1, #0
 80086ce:	f7ff f93b 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 80086d2:	2000      	movs	r0, #0
 80086d4:	b00d      	add	sp, #52	; 0x34
 80086d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80086d8:	008d      	lsls	r5, r1, #2
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <AddPortButton+0x11c>)
 80086dc:	58e8      	ldr	r0, [r5, r3]
 80086de:	f005 ffc3 	bl	800e668 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <AddPortButton+0x120>)
 80086e4:	58e8      	ldr	r0, [r5, r3]
 80086e6:	f005 ffbf 	bl	800e668 <osSemaphoreRelease>
 80086ea:	e79d      	b.n	8008628 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80086ec:	0020      	movs	r0, r4
 80086ee:	f005 fe2f 	bl	800e350 <GetUart>
 80086f2:	f00a fc24 	bl	8012f3e <HAL_UART_DeInit>
 80086f6:	e79e      	b.n	8008636 <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 80086f8:	0324      	lsls	r4, r4, #12
 80086fa:	0231      	lsls	r1, r6, #8
 80086fc:	4321      	orrs	r1, r4
 80086fe:	b289      	uxth	r1, r1
 8008700:	230e      	movs	r3, #14
 8008702:	446b      	add	r3, sp
 8008704:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008706:	0028      	movs	r0, r5
 8008708:	f7ff f91e 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800870c:	1c68      	adds	r0, r5, #1
 800870e:	2100      	movs	r1, #0
 8008710:	f7ff f91a 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008714:	1ca8      	adds	r0, r5, #2
 8008716:	2100      	movs	r1, #0
 8008718:	f7ff f916 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800871c:	1ce8      	adds	r0, r5, #3
 800871e:	2100      	movs	r1, #0
 8008720:	f7ff f912 	bl	8007948 <EE_WriteVariable>
 8008724:	e7d5      	b.n	80086d2 <AddPortButton+0xba>
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	200002b6 	.word	0x200002b6
 800872c:	20000878 	.word	0x20000878
 8008730:	20000e04 	.word	0x20000e04
 8008734:	20006320 	.word	0x20006320
 8008738:	20006300 	.word	0x20006300

0800873c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008742:	4836      	ldr	r0, [pc, #216]	; (800881c <RemovePortButton+0xe0>)
 8008744:	00e9      	lsls	r1, r5, #3
 8008746:	1949      	adds	r1, r1, r5
 8008748:	1842      	adds	r2, r0, r1
 800874a:	2300      	movs	r3, #0
 800874c:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800874e:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008750:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 8008752:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 8008754:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 8008756:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 8008758:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800875a:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800875c:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800875e:	002c      	movs	r4, r5
 8008760:	343a      	adds	r4, #58	; 0x3a
 8008762:	00a4      	lsls	r4, r4, #2
 8008764:	466b      	mov	r3, sp
 8008766:	1d99      	adds	r1, r3, #6
 8008768:	0020      	movs	r0, r4
 800876a:	f7ff f8bd 	bl	80078e8 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800876e:	2800      	cmp	r0, #0
 8008770:	d02b      	beq.n	80087ca <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 8008772:	0028      	movs	r0, r5
 8008774:	f005 fdec 	bl	800e350 <GetUart>
 8008778:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	4a28      	ldr	r2, [pc, #160]	; (8008820 <RemovePortButton+0xe4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d034      	beq.n	80087ec <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 8008782:	4a28      	ldr	r2, [pc, #160]	; (8008824 <RemovePortButton+0xe8>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d035      	beq.n	80087f4 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 8008788:	4a27      	ldr	r2, [pc, #156]	; (8008828 <RemovePortButton+0xec>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d036      	beq.n	80087fc <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800878e:	4a27      	ldr	r2, [pc, #156]	; (800882c <RemovePortButton+0xf0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d037      	beq.n	8008804 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 8008794:	4a26      	ldr	r2, [pc, #152]	; (8008830 <RemovePortButton+0xf4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d03c      	beq.n	8008814 <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <RemovePortButton+0xf8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d035      	beq.n	800880c <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <RemovePortButton+0xfc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d038      	beq.n	8008818 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 80087a6:	4a25      	ldr	r2, [pc, #148]	; (800883c <RemovePortButton+0x100>)
 80087a8:	4694      	mov	ip, r2
 80087aa:	4463      	add	r3, ip
 80087ac:	1e5c      	subs	r4, r3, #1
 80087ae:	41a3      	sbcs	r3, r4
 80087b0:	425c      	negs	r4, r3
 80087b2:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 80087b4:	4b22      	ldr	r3, [pc, #136]	; (8008840 <RemovePortButton+0x104>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 80087ba:	3201      	adds	r2, #1
 80087bc:	4921      	ldr	r1, [pc, #132]	; (8008844 <RemovePortButton+0x108>)
 80087be:	0030      	movs	r0, r6
 80087c0:	f00a fc16 	bl	8012ff0 <HAL_UART_Receive_IT>

	return result;
}
 80087c4:	0020      	movs	r0, r4
 80087c6:	b002      	add	sp, #8
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 80087ca:	2100      	movs	r1, #0
 80087cc:	0020      	movs	r0, r4
 80087ce:	f7ff f8bb 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 80087d2:	1c60      	adds	r0, r4, #1
 80087d4:	2100      	movs	r1, #0
 80087d6:	f7ff f8b7 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 80087da:	1ca0      	adds	r0, r4, #2
 80087dc:	2100      	movs	r1, #0
 80087de:	f7ff f8b3 	bl	8007948 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80087e2:	1ce0      	adds	r0, r4, #3
 80087e4:	2100      	movs	r1, #0
 80087e6:	f7ff f8af 	bl	8007948 <EE_WriteVariable>
 80087ea:	e7c2      	b.n	8008772 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 80087ec:	f005 fc96 	bl	800e11c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 80087f0:	2400      	movs	r4, #0
 80087f2:	e7df      	b.n	80087b4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 80087f4:	f005 fcaa 	bl	800e14c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 80087f8:	2400      	movs	r4, #0
 80087fa:	e7db      	b.n	80087b4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80087fc:	f005 fcbe 	bl	800e17c <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008800:	2400      	movs	r4, #0
 8008802:	e7d7      	b.n	80087b4 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008804:	f005 fcd2 	bl	800e1ac <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008808:	2400      	movs	r4, #0
 800880a:	e7d3      	b.n	80087b4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800880c:	f005 fce6 	bl	800e1dc <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008810:	2400      	movs	r4, #0
 8008812:	e7cf      	b.n	80087b4 <RemovePortButton+0x78>
 8008814:	2400      	movs	r4, #0
 8008816:	e7cd      	b.n	80087b4 <RemovePortButton+0x78>
 8008818:	2400      	movs	r4, #0
 800881a:	e7cb      	b.n	80087b4 <RemovePortButton+0x78>
 800881c:	20000e04 	.word	0x20000e04
 8008820:	40013800 	.word	0x40013800
 8008824:	40004400 	.word	0x40004400
 8008828:	40004800 	.word	0x40004800
 800882c:	40004c00 	.word	0x40004c00
 8008830:	40005000 	.word	0x40005000
 8008834:	40011400 	.word	0x40011400
 8008838:	40011800 	.word	0x40011800
 800883c:	bffee400 	.word	0xbffee400
 8008840:	20000878 	.word	0x20000878
 8008844:	200005f4 	.word	0x200005f4

08008848 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 8008848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884a:	46de      	mov	lr, fp
 800884c:	4657      	mov	r7, sl
 800884e:	464e      	mov	r6, r9
 8008850:	4645      	mov	r5, r8
 8008852:	b5e0      	push	{r5, r6, r7, lr}
 8008854:	b085      	sub	sp, #20
 8008856:	0007      	movs	r7, r0
 8008858:	001e      	movs	r6, r3
 800885a:	ab0e      	add	r3, sp, #56	; 0x38
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	4698      	mov	r8, r3
 8008860:	ab0f      	add	r3, sp, #60	; 0x3c
 8008862:	781d      	ldrb	r5, [r3, #0]
 8008864:	ab10      	add	r3, sp, #64	; 0x40
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	469b      	mov	fp, r3
 800886a:	ab11      	add	r3, sp, #68	; 0x44
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	469a      	mov	sl, r3
 8008870:	ab12      	add	r3, sp, #72	; 0x48
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4699      	mov	r9, r3
 8008876:	ab13      	add	r3, sp, #76	; 0x4c
 8008878:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800887a:	00fc      	lsls	r4, r7, #3
 800887c:	19e4      	adds	r4, r4, r7
 800887e:	4b9e      	ldr	r3, [pc, #632]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008880:	191b      	adds	r3, r3, r4
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d04c      	beq.n	8008922 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 8008888:	00fc      	lsls	r4, r7, #3
 800888a:	19e4      	adds	r4, r4, r7
 800888c:	4b9a      	ldr	r3, [pc, #616]	; (8008af8 <SetButtonEvents+0x2b0>)
 800888e:	191b      	adds	r3, r3, r4
 8008890:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 8008892:	4644      	mov	r4, r8
 8008894:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 8008896:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008898:	465c      	mov	r4, fp
 800889a:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800889c:	4654      	mov	r4, sl
 800889e:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 80088a0:	464c      	mov	r4, r9
 80088a2:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 80088a4:	2801      	cmp	r0, #1
 80088a6:	d003      	beq.n	80088b0 <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d113      	bne.n	80088d4 <SetButtonEvents+0x8c>
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d042      	beq.n	8008936 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80088b0:	00f9      	lsls	r1, r7, #3
 80088b2:	19c9      	adds	r1, r1, r7
 80088b4:	4b90      	ldr	r3, [pc, #576]	; (8008af8 <SetButtonEvents+0x2b0>)
 80088b6:	185b      	adds	r3, r3, r1
 80088b8:	7a19      	ldrb	r1, [r3, #8]
 80088ba:	2401      	movs	r4, #1
 80088bc:	4321      	orrs	r1, r4
 80088be:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 80088c0:	2801      	cmp	r0, #1
 80088c2:	d10c      	bne.n	80088de <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80088c4:	00fa      	lsls	r2, r7, #3
 80088c6:	19d2      	adds	r2, r2, r7
 80088c8:	4b8b      	ldr	r3, [pc, #556]	; (8008af8 <SetButtonEvents+0x2b0>)
 80088ca:	189b      	adds	r3, r3, r2
 80088cc:	7a1a      	ldrb	r2, [r3, #8]
 80088ce:	2102      	movs	r1, #2
 80088d0:	430a      	orrs	r2, r1
 80088d2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 80088d4:	2801      	cmp	r0, #1
 80088d6:	d042      	beq.n	800895e <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 80088d8:	2800      	cmp	r0, #0
 80088da:	d152      	bne.n	8008982 <SetButtonEvents+0x13a>
 80088dc:	e03d      	b.n	800895a <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 80088de:	2800      	cmp	r0, #0
 80088e0:	d031      	beq.n	8008946 <SetButtonEvents+0xfe>
 80088e2:	e044      	b.n	800896e <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d059      	beq.n	800899c <SetButtonEvents+0x154>
 80088e8:	e06d      	b.n	80089c6 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d100      	bne.n	80088f0 <SetButtonEvents+0xa8>
 80088ee:	e082      	b.n	80089f6 <SetButtonEvents+0x1ae>
 80088f0:	e097      	b.n	8008a22 <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d100      	bne.n	80088f8 <SetButtonEvents+0xb0>
 80088f6:	e0f2      	b.n	8008ade <SetButtonEvents+0x296>
 80088f8:	e09f      	b.n	8008a3a <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 80088fa:	0a19      	lsrs	r1, r3, #8
 80088fc:	0209      	lsls	r1, r1, #8
 80088fe:	4311      	orrs	r1, r2
 8008900:	ab02      	add	r3, sp, #8
 8008902:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008904:	0020      	movs	r0, r4
 8008906:	f7ff f81f 	bl	8007948 <EE_WriteVariable>
 800890a:	e0ad      	b.n	8008a68 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800890c:	0019      	movs	r1, r3
 800890e:	9801      	ldr	r0, [sp, #4]
 8008910:	f7ff f81a 	bl	8007948 <EE_WriteVariable>
 8008914:	e0b7      	b.n	8008a86 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 8008916:	4653      	mov	r3, sl
 8008918:	4319      	orrs	r1, r3
 800891a:	0030      	movs	r0, r6
 800891c:	f7ff f814 	bl	8007948 <EE_WriteVariable>
 8008920:	e0c0      	b.n	8008aa4 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008922:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 8008924:	b005      	add	sp, #20
 8008926:	bc3c      	pop	{r2, r3, r4, r5}
 8008928:	4690      	mov	r8, r2
 800892a:	4699      	mov	r9, r3
 800892c:	46a2      	mov	sl, r4
 800892e:	46ab      	mov	fp, r5
 8008930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008932:	200b      	movs	r0, #11
 8008934:	e7f6      	b.n	8008924 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 8008936:	00f9      	lsls	r1, r7, #3
 8008938:	19c9      	adds	r1, r1, r7
 800893a:	4b6f      	ldr	r3, [pc, #444]	; (8008af8 <SetButtonEvents+0x2b0>)
 800893c:	185b      	adds	r3, r3, r1
 800893e:	7a19      	ldrb	r1, [r3, #8]
 8008940:	2401      	movs	r4, #1
 8008942:	43a1      	bics	r1, r4
 8008944:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8008946:	2a00      	cmp	r2, #0
 8008948:	d1bc      	bne.n	80088c4 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800894a:	00fa      	lsls	r2, r7, #3
 800894c:	19d2      	adds	r2, r2, r7
 800894e:	4b6a      	ldr	r3, [pc, #424]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008950:	189b      	adds	r3, r3, r2
 8008952:	7a1a      	ldrb	r2, [r3, #8]
 8008954:	2102      	movs	r1, #2
 8008956:	438a      	bics	r2, r1
 8008958:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800895a:	2e00      	cmp	r6, #0
 800895c:	d016      	beq.n	800898c <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800895e:	00fa      	lsls	r2, r7, #3
 8008960:	19d2      	adds	r2, r2, r7
 8008962:	4b65      	ldr	r3, [pc, #404]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008964:	189b      	adds	r3, r3, r2
 8008966:	7a1a      	ldrb	r2, [r3, #8]
 8008968:	2104      	movs	r1, #4
 800896a:	430a      	orrs	r2, r1
 800896c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800896e:	2801      	cmp	r0, #1
 8008970:	d1b8      	bne.n	80088e4 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008972:	00fa      	lsls	r2, r7, #3
 8008974:	19d2      	adds	r2, r2, r7
 8008976:	4b60      	ldr	r3, [pc, #384]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008978:	189b      	adds	r3, r3, r2
 800897a:	7a1a      	ldrb	r2, [r3, #8]
 800897c:	2108      	movs	r1, #8
 800897e:	430a      	orrs	r2, r1
 8008980:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008982:	2801      	cmp	r0, #1
 8008984:	d017      	beq.n	80089b6 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008986:	2800      	cmp	r0, #0
 8008988:	d128      	bne.n	80089dc <SetButtonEvents+0x194>
 800898a:	e012      	b.n	80089b2 <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800898c:	00fa      	lsls	r2, r7, #3
 800898e:	19d2      	adds	r2, r2, r7
 8008990:	4b59      	ldr	r3, [pc, #356]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008992:	189b      	adds	r3, r3, r2
 8008994:	7a1a      	ldrb	r2, [r3, #8]
 8008996:	2104      	movs	r1, #4
 8008998:	438a      	bics	r2, r1
 800899a:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800899c:	4643      	mov	r3, r8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e7      	bne.n	8008972 <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80089a2:	00fa      	lsls	r2, r7, #3
 80089a4:	19d2      	adds	r2, r2, r7
 80089a6:	4b54      	ldr	r3, [pc, #336]	; (8008af8 <SetButtonEvents+0x2b0>)
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	7a1a      	ldrb	r2, [r3, #8]
 80089ac:	2108      	movs	r1, #8
 80089ae:	438a      	bics	r2, r1
 80089b0:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	d017      	beq.n	80089e6 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80089b6:	00fa      	lsls	r2, r7, #3
 80089b8:	19d2      	adds	r2, r2, r7
 80089ba:	4b4f      	ldr	r3, [pc, #316]	; (8008af8 <SetButtonEvents+0x2b0>)
 80089bc:	189b      	adds	r3, r3, r2
 80089be:	7a1a      	ldrb	r2, [r3, #8]
 80089c0:	2110      	movs	r1, #16
 80089c2:	430a      	orrs	r2, r1
 80089c4:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80089c6:	2801      	cmp	r0, #1
 80089c8:	d000      	beq.n	80089cc <SetButtonEvents+0x184>
 80089ca:	e78e      	b.n	80088ea <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80089cc:	00fa      	lsls	r2, r7, #3
 80089ce:	19d2      	adds	r2, r2, r7
 80089d0:	4b49      	ldr	r3, [pc, #292]	; (8008af8 <SetButtonEvents+0x2b0>)
 80089d2:	189b      	adds	r3, r3, r2
 80089d4:	7a1a      	ldrb	r2, [r3, #8]
 80089d6:	2120      	movs	r1, #32
 80089d8:	430a      	orrs	r2, r1
 80089da:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80089dc:	2801      	cmp	r0, #1
 80089de:	d018      	beq.n	8008a12 <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d12a      	bne.n	8008a3a <SetButtonEvents+0x1f2>
 80089e4:	e012      	b.n	8008a0c <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80089e6:	00fa      	lsls	r2, r7, #3
 80089e8:	19d2      	adds	r2, r2, r7
 80089ea:	4b43      	ldr	r3, [pc, #268]	; (8008af8 <SetButtonEvents+0x2b0>)
 80089ec:	189b      	adds	r3, r3, r2
 80089ee:	7a1a      	ldrb	r2, [r3, #8]
 80089f0:	2110      	movs	r1, #16
 80089f2:	438a      	bics	r2, r1
 80089f4:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 80089f6:	465b      	mov	r3, fp
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e7      	bne.n	80089cc <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80089fc:	00fa      	lsls	r2, r7, #3
 80089fe:	19d2      	adds	r2, r2, r7
 8008a00:	4b3d      	ldr	r3, [pc, #244]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	7a1a      	ldrb	r2, [r3, #8]
 8008a06:	2120      	movs	r1, #32
 8008a08:	438a      	bics	r2, r1
 8008a0a:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008a0c:	4653      	mov	r3, sl
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d05d      	beq.n	8008ace <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a12:	00fa      	lsls	r2, r7, #3
 8008a14:	19d2      	adds	r2, r2, r7
 8008a16:	4b38      	ldr	r3, [pc, #224]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008a18:	189b      	adds	r3, r3, r2
 8008a1a:	7a1a      	ldrb	r2, [r3, #8]
 8008a1c:	2140      	movs	r1, #64	; 0x40
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008a22:	2801      	cmp	r0, #1
 8008a24:	d000      	beq.n	8008a28 <SetButtonEvents+0x1e0>
 8008a26:	e764      	b.n	80088f2 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008a28:	00fa      	lsls	r2, r7, #3
 8008a2a:	19d2      	adds	r2, r2, r7
 8008a2c:	4b32      	ldr	r3, [pc, #200]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008a2e:	189b      	adds	r3, r3, r2
 8008a30:	7a19      	ldrb	r1, [r3, #8]
 8008a32:	2280      	movs	r2, #128	; 0x80
 8008a34:	4252      	negs	r2, r2
 8008a36:	430a      	orrs	r2, r1
 8008a38:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008a3a:	003c      	movs	r4, r7
 8008a3c:	343a      	adds	r4, #58	; 0x3a
 8008a3e:	00a4      	lsls	r4, r4, #2
 8008a40:	ab02      	add	r3, sp, #8
 8008a42:	1d99      	adds	r1, r3, #6
 8008a44:	0020      	movs	r0, r4
 8008a46:	f7fe ff4f 	bl	80078e8 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d000      	beq.n	8008a50 <SetButtonEvents+0x208>
 8008a4e:	e770      	b.n	8008932 <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 8008a50:	ab02      	add	r3, sp, #8
 8008a52:	3306      	adds	r3, #6
 8008a54:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 8008a56:	00fa      	lsls	r2, r7, #3
 8008a58:	19d2      	adds	r2, r2, r7
 8008a5a:	4f27      	ldr	r7, [pc, #156]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008a5c:	18bf      	adds	r7, r7, r2
 8008a5e:	7a3a      	ldrb	r2, [r7, #8]
 8008a60:	b2d9      	uxtb	r1, r3
 8008a62:	4291      	cmp	r1, r2
 8008a64:	d000      	beq.n	8008a68 <SetButtonEvents+0x220>
 8008a66:	e748      	b.n	80088fa <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 8008a68:	1c63      	adds	r3, r4, #1
 8008a6a:	aa02      	add	r2, sp, #8
 8008a6c:	1d97      	adds	r7, r2, #6
 8008a6e:	0039      	movs	r1, r7
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	0018      	movs	r0, r3
 8008a74:	f7fe ff38 	bl	80078e8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 8008a78:	0236      	lsls	r6, r6, #8
 8008a7a:	883a      	ldrh	r2, [r7, #0]
 8008a7c:	465b      	mov	r3, fp
 8008a7e:	4333      	orrs	r3, r6
		if (temp16
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d000      	beq.n	8008a86 <SetButtonEvents+0x23e>
 8008a84:	e742      	b.n	800890c <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 8008a86:	1ca6      	adds	r6, r4, #2
 8008a88:	ab02      	add	r3, sp, #8
 8008a8a:	1d9f      	adds	r7, r3, #6
 8008a8c:	0039      	movs	r1, r7
 8008a8e:	0030      	movs	r0, r6
 8008a90:	f7fe ff2a 	bl	80078e8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 8008a94:	4643      	mov	r3, r8
 8008a96:	0219      	lsls	r1, r3, #8
 8008a98:	883a      	ldrh	r2, [r7, #0]
 8008a9a:	4653      	mov	r3, sl
 8008a9c:	430b      	orrs	r3, r1
		if (temp16
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d000      	beq.n	8008aa4 <SetButtonEvents+0x25c>
 8008aa2:	e738      	b.n	8008916 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 8008aa4:	3403      	adds	r4, #3
 8008aa6:	ab02      	add	r3, sp, #8
 8008aa8:	1d9e      	adds	r6, r3, #6
 8008aaa:	0031      	movs	r1, r6
 8008aac:	0020      	movs	r0, r4
 8008aae:	f7fe ff1b 	bl	80078e8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 8008ab2:	022d      	lsls	r5, r5, #8
 8008ab4:	8832      	ldrh	r2, [r6, #0]
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	432b      	orrs	r3, r5
	return result;
 8008aba:	2000      	movs	r0, #0
		if (temp16
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d100      	bne.n	8008ac2 <SetButtonEvents+0x27a>
 8008ac0:	e730      	b.n	8008924 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 8008ac2:	0019      	movs	r1, r3
 8008ac4:	0020      	movs	r0, r4
 8008ac6:	f7fe ff3f 	bl	8007948 <EE_WriteVariable>
	return result;
 8008aca:	2000      	movs	r0, #0
 8008acc:	e72a      	b.n	8008924 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008ace:	00fa      	lsls	r2, r7, #3
 8008ad0:	19d2      	adds	r2, r2, r7
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008ad4:	189b      	adds	r3, r3, r2
 8008ad6:	7a1a      	ldrb	r2, [r3, #8]
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	438a      	bics	r2, r1
 8008adc:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008ade:	464b      	mov	r3, r9
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1a1      	bne.n	8008a28 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008ae4:	00fa      	lsls	r2, r7, #3
 8008ae6:	19d2      	adds	r2, r2, r7
 8008ae8:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <SetButtonEvents+0x2b0>)
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	7a19      	ldrb	r1, [r3, #8]
 8008aee:	227f      	movs	r2, #127	; 0x7f
 8008af0:	400a      	ands	r2, r1
 8008af2:	721a      	strb	r2, [r3, #8]
 8008af4:	e7a1      	b.n	8008a3a <SetButtonEvents+0x1f2>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	20000e04 	.word	0x20000e04

08008afc <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8008afc:	b510      	push	{r4, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	0004      	movs	r4, r0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008b02:	2214      	movs	r2, #20
 8008b04:	2100      	movs	r1, #0
 8008b06:	a803      	add	r0, sp, #12
 8008b08:	f00b f852 	bl	8013bb0 <memset>
	if (adcHandle->Instance == ADC1) {
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <HAL_ADC_MspInit+0x58>)
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_ADC_MspInit+0x1c>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008b14:	b008      	add	sp, #32
 8008b16:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <HAL_ADC_MspInit+0x5c>)
 8008b1a:	6999      	ldr	r1, [r3, #24]
 8008b1c:	2080      	movs	r0, #128	; 0x80
 8008b1e:	0080      	lsls	r0, r0, #2
 8008b20:	4301      	orrs	r1, r0
 8008b22:	6199      	str	r1, [r3, #24]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	4002      	ands	r2, r0
 8008b28:	9201      	str	r2, [sp, #4]
 8008b2a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	2180      	movs	r1, #128	; 0x80
 8008b30:	0289      	lsls	r1, r1, #10
 8008b32:	430a      	orrs	r2, r1
 8008b34:	615a      	str	r2, [r3, #20]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	400b      	ands	r3, r1
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008b3e:	233c      	movs	r3, #60	; 0x3c
 8008b40:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b42:	3b39      	subs	r3, #57	; 0x39
 8008b44:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b46:	3871      	subs	r0, #113	; 0x71
 8008b48:	38ff      	subs	r0, #255	; 0xff
 8008b4a:	a903      	add	r1, sp, #12
 8008b4c:	05c0      	lsls	r0, r0, #23
 8008b4e:	f009 f8a5 	bl	8011c9c <HAL_GPIO_Init>
}
 8008b52:	e7df      	b.n	8008b14 <HAL_ADC_MspInit+0x18>
 8008b54:	40012400 	.word	0x40012400
 8008b58:	40021000 	.word	0x40021000

08008b5c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 8008b5c:	6803      	ldr	r3, [r0, #0]
 8008b5e:	4a0d      	ldr	r2, [pc, #52]	; (8008b94 <Get_channel+0x38>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 8008b64:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <Get_channel+0x3c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d008      	beq.n	8008b7c <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008b6a:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <Get_channel+0x40>)
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d00c      	beq.n	8008b8c <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 8008b72:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <Get_channel+0x44>)
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d1f8      	bne.n	8008b6a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008b78:	2003      	movs	r0, #3
 8008b7a:	e7f6      	b.n	8008b6a <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008b7c:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <Get_channel+0x40>)
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	d006      	beq.n	8008b90 <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <Get_channel+0x44>)
 8008b84:	4299      	cmp	r1, r3
 8008b86:	d1f0      	bne.n	8008b6a <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008b88:	2005      	movs	r0, #5
 8008b8a:	e7ee      	b.n	8008b6a <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	e7ec      	b.n	8008b6a <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008b90:	2004      	movs	r0, #4
 8008b92:	e7ea      	b.n	8008b6a <Get_channel+0xe>
 8008b94:	40004400 	.word	0x40004400
 8008b98:	40011400 	.word	0x40011400
 8008b9c:	080180dc 	.word	0x080180dc
 8008ba0:	080180e0 	.word	0x080180e0

08008ba4 <Error_Handler>:

void Error_Handler(void) {
 8008ba4:	b510      	push	{r4, lr}

	HAL_Delay(100);
 8008ba6:	2064      	movs	r0, #100	; 0x64
 8008ba8:	f007 fd3e 	bl	8010628 <HAL_Delay>

}
 8008bac:	bd10      	pop	{r4, pc}
	...

08008bb0 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 8008bb0:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008bb2:	4811      	ldr	r0, [pc, #68]	; (8008bf8 <MX_ADC_Init+0x48>)
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <MX_ADC_Init+0x4c>)
 8008bb6:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	061b      	lsls	r3, r3, #24
 8008bbc:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008bc2:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008bc8:	2104      	movs	r1, #4
 8008bca:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008bcc:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008bce:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008bd0:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008bd2:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008bd4:	21c2      	movs	r1, #194	; 0xc2
 8008bd6:	31ff      	adds	r1, #255	; 0xff
 8008bd8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008bda:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008bdc:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008bde:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008be0:	f007 fdfc 	bl	80107dc <HAL_ADC_Init>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d103      	bne.n	8008bf0 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <MX_ADC_Init+0x50>)
 8008bea:	2201      	movs	r2, #1
 8008bec:	701a      	strb	r2, [r3, #0]
}
 8008bee:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008bf0:	f7ff ffd8 	bl	8008ba4 <Error_Handler>
 8008bf4:	e7f8      	b.n	8008be8 <MX_ADC_Init+0x38>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	20006344 	.word	0x20006344
 8008bfc:	40012400 	.word	0x40012400
 8008c00:	20000df0 	.word	0x20000df0

08008c04 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	0005      	movs	r5, r0
 8008c0a:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 8008c0c:	4b4d      	ldr	r3, [pc, #308]	; (8008d44 <ReadTempAndVref+0x140>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d100      	bne.n	8008c16 <ReadTempAndVref+0x12>
 8008c14:	e087      	b.n	8008d26 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c16:	494c      	ldr	r1, [pc, #304]	; (8008d48 <ReadTempAndVref+0x144>)
 8008c18:	2310      	movs	r3, #16
 8008c1a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	015b      	lsls	r3, r3, #5
 8008c20:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c22:	2301      	movs	r3, #1
 8008c24:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c26:	4849      	ldr	r0, [pc, #292]	; (8008d4c <ReadTempAndVref+0x148>)
 8008c28:	f007 ff7c 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d000      	beq.n	8008c32 <ReadTempAndVref+0x2e>
 8008c30:	e07c      	b.n	8008d2c <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 8008c32:	4c46      	ldr	r4, [pc, #280]	; (8008d4c <ReadTempAndVref+0x148>)
 8008c34:	0020      	movs	r0, r4
 8008c36:	f007 fe79 	bl	801092c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008c3a:	2164      	movs	r1, #100	; 0x64
 8008c3c:	0020      	movs	r0, r4
 8008c3e:	f007 fec7 	bl	80109d0 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 8008c42:	0020      	movs	r0, r4
 8008c44:	f007 ff68 	bl	8010b18 <HAL_ADC_GetValue>
 8008c48:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <ReadTempAndVref+0x14c>)
 8008c4a:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008c4c:	0400      	lsls	r0, r0, #16
 8008c4e:	0c00      	lsrs	r0, r0, #16
 8008c50:	f7f9 ffaa 	bl	8002ba8 <__aeabi_i2d>
 8008c54:	4a3f      	ldr	r2, [pc, #252]	; (8008d54 <ReadTempAndVref+0x150>)
 8008c56:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <ReadTempAndVref+0x154>)
 8008c58:	f7f9 f99a 	bl	8001f90 <__aeabi_dmul>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4b3f      	ldr	r3, [pc, #252]	; (8008d5c <ReadTempAndVref+0x158>)
 8008c60:	f7f8 fd8c 	bl	800177c <__aeabi_ddiv>
 8008c64:	4a3e      	ldr	r2, [pc, #248]	; (8008d60 <ReadTempAndVref+0x15c>)
 8008c66:	4b3f      	ldr	r3, [pc, #252]	; (8008d64 <ReadTempAndVref+0x160>)
 8008c68:	f7f9 fc04 	bl	8002474 <__aeabi_dsub>
 8008c6c:	4a3e      	ldr	r2, [pc, #248]	; (8008d68 <ReadTempAndVref+0x164>)
 8008c6e:	4b3f      	ldr	r3, [pc, #252]	; (8008d6c <ReadTempAndVref+0x168>)
 8008c70:	f7f8 fd84 	bl	800177c <__aeabi_ddiv>
 8008c74:	2200      	movs	r2, #0
 8008c76:	4b3e      	ldr	r3, [pc, #248]	; (8008d70 <ReadTempAndVref+0x16c>)
 8008c78:	f7f8 fa64 	bl	8001144 <__aeabi_dadd>
 8008c7c:	f7fa f852 	bl	8002d24 <__aeabi_d2f>
 8008c80:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008c82:	0020      	movs	r0, r4
 8008c84:	f007 fe82 	bl	801098c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c88:	492f      	ldr	r1, [pc, #188]	; (8008d48 <ReadTempAndVref+0x144>)
 8008c8a:	2310      	movs	r3, #16
 8008c8c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c8e:	4b39      	ldr	r3, [pc, #228]	; (8008d74 <ReadTempAndVref+0x170>)
 8008c90:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c92:	2301      	movs	r3, #1
 8008c94:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c96:	0020      	movs	r0, r4
 8008c98:	f007 ff44 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d148      	bne.n	8008d32 <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008ca0:	4929      	ldr	r1, [pc, #164]	; (8008d48 <ReadTempAndVref+0x144>)
 8008ca2:	2311      	movs	r3, #17
 8008ca4:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	015b      	lsls	r3, r3, #5
 8008caa:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008cac:	2305      	movs	r3, #5
 8008cae:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008cb0:	4826      	ldr	r0, [pc, #152]	; (8008d4c <ReadTempAndVref+0x148>)
 8008cb2:	f007 ff37 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d13e      	bne.n	8008d38 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008cba:	4d24      	ldr	r5, [pc, #144]	; (8008d4c <ReadTempAndVref+0x148>)
 8008cbc:	0028      	movs	r0, r5
 8008cbe:	f007 fe35 	bl	801092c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008cc2:	2164      	movs	r1, #100	; 0x64
 8008cc4:	0028      	movs	r0, r5
 8008cc6:	f007 fe83 	bl	80109d0 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 8008cca:	0028      	movs	r0, r5
 8008ccc:	f007 ff24 	bl	8010b18 <HAL_ADC_GetValue>
 8008cd0:	0004      	movs	r4, r0
 8008cd2:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <ReadTempAndVref+0x174>)
 8008cd4:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008cd6:	4b29      	ldr	r3, [pc, #164]	; (8008d7c <ReadTempAndVref+0x178>)
 8008cd8:	8818      	ldrh	r0, [r3, #0]
 8008cda:	f7f9 ff65 	bl	8002ba8 <__aeabi_i2d>
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <ReadTempAndVref+0x150>)
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <ReadTempAndVref+0x154>)
 8008ce2:	f7f9 f955 	bl	8001f90 <__aeabi_dmul>
 8008ce6:	9000      	str	r0, [sp, #0]
 8008ce8:	9101      	str	r1, [sp, #4]
 8008cea:	0420      	lsls	r0, r4, #16
 8008cec:	0c00      	lsrs	r0, r0, #16
 8008cee:	f7f9 ff5b 	bl	8002ba8 <__aeabi_i2d>
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	000b      	movs	r3, r1
 8008cf6:	9800      	ldr	r0, [sp, #0]
 8008cf8:	9901      	ldr	r1, [sp, #4]
 8008cfa:	f7f8 fd3f 	bl	800177c <__aeabi_ddiv>
 8008cfe:	f7fa f811 	bl	8002d24 <__aeabi_d2f>
 8008d02:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008d04:	0028      	movs	r0, r5
 8008d06:	f007 fe41 	bl	801098c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008d0a:	490f      	ldr	r1, [pc, #60]	; (8008d48 <ReadTempAndVref+0x144>)
 8008d0c:	2311      	movs	r3, #17
 8008d0e:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008d10:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <ReadTempAndVref+0x170>)
 8008d12:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d14:	2301      	movs	r3, #1
 8008d16:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d18:	0028      	movs	r0, r5
 8008d1a:	f007 ff03 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d10d      	bne.n	8008d3e <ReadTempAndVref+0x13a>
}
 8008d22:	b002      	add	sp, #8
 8008d24:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008d26:	f7ff ff43 	bl	8008bb0 <MX_ADC_Init>
 8008d2a:	e774      	b.n	8008c16 <ReadTempAndVref+0x12>
		Error_Handler();
 8008d2c:	f7ff ff3a 	bl	8008ba4 <Error_Handler>
 8008d30:	e77f      	b.n	8008c32 <ReadTempAndVref+0x2e>
		Error_Handler();
 8008d32:	f7ff ff37 	bl	8008ba4 <Error_Handler>
 8008d36:	e7b3      	b.n	8008ca0 <ReadTempAndVref+0x9c>
		Error_Handler();
 8008d38:	f7ff ff34 	bl	8008ba4 <Error_Handler>
 8008d3c:	e7bd      	b.n	8008cba <ReadTempAndVref+0xb6>
		Error_Handler();
 8008d3e:	f7ff ff31 	bl	8008ba4 <Error_Handler>
}
 8008d42:	e7ee      	b.n	8008d22 <ReadTempAndVref+0x11e>
 8008d44:	20000df0 	.word	0x20000df0
 8008d48:	20000e5c 	.word	0x20000e5c
 8008d4c:	20006344 	.word	0x20006344
 8008d50:	20000df4 	.word	0x20000df4
 8008d54:	66666666 	.word	0x66666666
 8008d58:	400a6666 	.word	0x400a6666
 8008d5c:	40affe00 	.word	0x40affe00
 8008d60:	28f5c28f 	.word	0x28f5c28f
 8008d64:	3ff68f5c 	.word	0x3ff68f5c
 8008d68:	33333333 	.word	0x33333333
 8008d6c:	40113333 	.word	0x40113333
 8008d70:	40390000 	.word	0x40390000
 8008d74:	00001001 	.word	0x00001001
 8008d78:	20000df2 	.word	0x20000df2
 8008d7c:	1ffff7ba 	.word	0x1ffff7ba

08008d80 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	0004      	movs	r4, r0
 8008d86:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 8008d88:	1e83      	subs	r3, r0, #2
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d901      	bls.n	8008d92 <GetReadPrecentage+0x12>
}
 8008d8e:	b006      	add	sp, #24
 8008d90:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 8008d92:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <GetReadPrecentage+0x10c>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d055      	beq.n	8008e46 <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008d9a:	2090      	movs	r0, #144	; 0x90
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2110      	movs	r1, #16
 8008da0:	05c0      	lsls	r0, r0, #23
 8008da2:	f009 f8ef 	bl	8011f84 <HAL_GPIO_WritePin>
		Channel = Get_channel(GetUart(port), "bottom");
 8008da6:	0020      	movs	r0, r4
 8008da8:	f005 fad2 	bl	800e350 <GetUart>
 8008dac:	4938      	ldr	r1, [pc, #224]	; (8008e90 <GetReadPrecentage+0x110>)
 8008dae:	f7ff fed5 	bl	8008b5c <Get_channel>
 8008db2:	4b38      	ldr	r3, [pc, #224]	; (8008e94 <GetReadPrecentage+0x114>)
 8008db4:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008db6:	4938      	ldr	r1, [pc, #224]	; (8008e98 <GetReadPrecentage+0x118>)
 8008db8:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	015b      	lsls	r3, r3, #5
 8008dbe:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dc4:	4835      	ldr	r0, [pc, #212]	; (8008e9c <GetReadPrecentage+0x11c>)
 8008dc6:	f007 fead 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d15b      	bne.n	8008e86 <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008dce:	4c33      	ldr	r4, [pc, #204]	; (8008e9c <GetReadPrecentage+0x11c>)
 8008dd0:	0020      	movs	r0, r4
 8008dd2:	f007 fdab 	bl	801092c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008dd6:	2164      	movs	r1, #100	; 0x64
 8008dd8:	0020      	movs	r0, r4
 8008dda:	f007 fdf9 	bl	80109d0 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008dde:	0020      	movs	r0, r4
 8008de0:	f007 fe9a 	bl	8010b18 <HAL_ADC_GetValue>
 8008de4:	f7f8 f96e 	bl	80010c4 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008de8:	f7f9 ff4a 	bl	8002c80 <__aeabi_f2d>
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <GetReadPrecentage+0x120>)
 8008dee:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <GetReadPrecentage+0x124>)
 8008df0:	f7f9 f8ce 	bl	8001f90 <__aeabi_dmul>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b2c      	ldr	r3, [pc, #176]	; (8008ea8 <GetReadPrecentage+0x128>)
 8008df8:	f7f8 fcc0 	bl	800177c <__aeabi_ddiv>
 8008dfc:	f7f9 ff92 	bl	8002d24 <__aeabi_d2f>
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <GetReadPrecentage+0x12c>)
 8008e02:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 8008e04:	492a      	ldr	r1, [pc, #168]	; (8008eb0 <GetReadPrecentage+0x130>)
 8008e06:	f7f7 fe47 	bl	8000a98 <__aeabi_fmul>
 8008e0a:	f7f9 ff39 	bl	8002c80 <__aeabi_f2d>
 8008e0e:	4a24      	ldr	r2, [pc, #144]	; (8008ea0 <GetReadPrecentage+0x120>)
 8008e10:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <GetReadPrecentage+0x124>)
 8008e12:	f7f8 fcb3 	bl	800177c <__aeabi_ddiv>
 8008e16:	f7f9 ff85 	bl	8002d24 <__aeabi_d2f>
 8008e1a:	4b26      	ldr	r3, [pc, #152]	; (8008eb4 <GetReadPrecentage+0x134>)
 8008e1c:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 8008e1e:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008e20:	0020      	movs	r0, r4
 8008e22:	f007 fdb3 	bl	801098c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008e26:	491c      	ldr	r1, [pc, #112]	; (8008e98 <GetReadPrecentage+0x118>)
 8008e28:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <GetReadPrecentage+0x114>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e2e:	4b22      	ldr	r3, [pc, #136]	; (8008eb8 <GetReadPrecentage+0x138>)
 8008e30:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e32:	2301      	movs	r3, #1
 8008e34:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e36:	0020      	movs	r0, r4
 8008e38:	f007 fe74 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d0a6      	beq.n	8008d8e <GetReadPrecentage+0xe>
			Error_Handler();
 8008e40:	f7ff feb0 	bl	8008ba4 <Error_Handler>
 8008e44:	e7a3      	b.n	8008d8e <GetReadPrecentage+0xe>
			MX_ADC_Init();
 8008e46:	f7ff feb3 	bl	8008bb0 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008e4a:	0020      	movs	r0, r4
 8008e4c:	f005 fa80 	bl	800e350 <GetUart>
 8008e50:	f00a f875 	bl	8012f3e <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008e54:	2690      	movs	r6, #144	; 0x90
 8008e56:	05f6      	lsls	r6, r6, #23
 8008e58:	2110      	movs	r1, #16
 8008e5a:	0030      	movs	r0, r6
 8008e5c:	f008 fffe 	bl	8011e5c <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008e60:	480e      	ldr	r0, [pc, #56]	; (8008e9c <GetReadPrecentage+0x11c>)
 8008e62:	f007 ff03 	bl	8010c6c <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e66:	2310      	movs	r3, #16
 8008e68:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e6a:	3b0f      	subs	r3, #15
 8008e6c:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008e6e:	3302      	adds	r3, #2
 8008e70:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e72:	a901      	add	r1, sp, #4
 8008e74:	0030      	movs	r0, r6
 8008e76:	f008 ff11 	bl	8011c9c <HAL_GPIO_Init>
			portStatus[port - 1] = CUSTOM;
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <GetReadPrecentage+0x13c>)
 8008e7c:	191b      	adds	r3, r3, r4
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2206      	movs	r2, #6
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	e789      	b.n	8008d9a <GetReadPrecentage+0x1a>
			Error_Handler();
 8008e86:	f7ff fe8d 	bl	8008ba4 <Error_Handler>
 8008e8a:	e7a0      	b.n	8008dce <GetReadPrecentage+0x4e>
 8008e8c:	20000df0 	.word	0x20000df0
 8008e90:	080180e0 	.word	0x080180e0
 8008e94:	20000e00 	.word	0x20000e00
 8008e98:	20000e5c 	.word	0x20000e5c
 8008e9c:	20006344 	.word	0x20006344
 8008ea0:	66666666 	.word	0x66666666
 8008ea4:	400a6666 	.word	0x400a6666
 8008ea8:	40affe00 	.word	0x40affe00
 8008eac:	20000e38 	.word	0x20000e38
 8008eb0:	42c80000 	.word	0x42c80000
 8008eb4:	20000e2c 	.word	0x20000e2c
 8008eb8:	00001001 	.word	0x00001001
 8008ebc:	20000878 	.word	0x20000878

08008ec0 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008ec0:	2802      	cmp	r0, #2
 8008ec2:	d004      	beq.n	8008ece <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008ec4:	2803      	cmp	r0, #3
 8008ec6:	d010      	beq.n	8008eea <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <Get_Rank+0x48>)
 8008eca:	7818      	ldrb	r0, [r3, #0]
}
 8008ecc:	4770      	bx	lr
	if (Port == 2 && side == "top")
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <Get_Rank+0x4c>)
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	d006      	beq.n	8008ee2 <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <Get_Rank+0x50>)
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d1f6      	bne.n	8008ec8 <Get_Rank+0x8>
		Rank_t = 1;
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <Get_Rank+0x48>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	e7f2      	b.n	8008ec8 <Get_Rank+0x8>
		Rank_t = 0;
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <Get_Rank+0x48>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <Get_Rank+0x4c>)
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d006      	beq.n	8008efe <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <Get_Rank+0x50>)
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	d1e8      	bne.n	8008ec8 <Get_Rank+0x8>
		Rank_t = 3;
 8008ef6:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <Get_Rank+0x48>)
 8008ef8:	2203      	movs	r2, #3
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	e7e4      	b.n	8008ec8 <Get_Rank+0x8>
		Rank_t = 2;
 8008efe:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <Get_Rank+0x48>)
 8008f00:	2202      	movs	r2, #2
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e7e0      	b.n	8008ec8 <Get_Rank+0x8>
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	20000e01 	.word	0x20000e01
 8008f0c:	080180dc 	.word	0x080180dc
 8008f10:	080180e0 	.word	0x080180e0

08008f14 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	0004      	movs	r4, r0
 8008f18:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008f1a:	1e83      	subs	r3, r0, #2
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d900      	bls.n	8008f22 <ADCSelectChannel+0xe>
}
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008f22:	f005 fa15 	bl	800e350 <GetUart>
 8008f26:	f00a f80a 	bl	8012f3e <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <ADCSelectChannel+0x4c>)
 8008f2c:	191b      	adds	r3, r3, r4
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2206      	movs	r2, #6
 8008f32:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008f34:	0020      	movs	r0, r4
 8008f36:	f005 fa0b 	bl	800e350 <GetUart>
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	f7ff fe0e 	bl	8008b5c <Get_channel>
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <ADCSelectChannel+0x50>)
 8008f42:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 8008f44:	0029      	movs	r1, r5
 8008f46:	0020      	movs	r0, r4
 8008f48:	f7ff ffba 	bl	8008ec0 <Get_Rank>
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <ADCSelectChannel+0x54>)
 8008f4e:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <ADCSelectChannel+0x58>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e3      	bne.n	8008f20 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008f58:	f7ff fe2a 	bl	8008bb0 <MX_ADC_Init>
}
 8008f5c:	e7e0      	b.n	8008f20 <ADCSelectChannel+0xc>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	20000878 	.word	0x20000878
 8008f64:	20000e00 	.word	0x20000e00
 8008f68:	20000e01 	.word	0x20000e01
 8008f6c:	20000df0 	.word	0x20000df0

08008f70 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	0005      	movs	r5, r0
 8008f74:	000e      	movs	r6, r1
 8008f76:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 8008f78:	4b26      	ldr	r3, [pc, #152]	; (8009014 <ReadADCChannel+0xa4>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d008      	beq.n	8008f92 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <ReadADCChannel+0xa8>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4a25      	ldr	r2, [pc, #148]	; (800901c <ReadADCChannel+0xac>)
 8008f88:	5a98      	ldrh	r0, [r3, r2]
 8008f8a:	f7f8 f89b 	bl	80010c4 <__aeabi_ui2f>
 8008f8e:	6020      	str	r0, [r4, #0]
}
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008f92:	f005 f9dd 	bl	800e350 <GetUart>
 8008f96:	0031      	movs	r1, r6
 8008f98:	f7ff fde0 	bl	8008b5c <Get_channel>
 8008f9c:	4f20      	ldr	r7, [pc, #128]	; (8009020 <ReadADCChannel+0xb0>)
 8008f9e:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 8008fa0:	0031      	movs	r1, r6
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	f7ff ff8c 	bl	8008ec0 <Get_Rank>
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <ReadADCChannel+0xa8>)
 8008faa:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008fac:	491d      	ldr	r1, [pc, #116]	; (8009024 <ReadADCChannel+0xb4>)
 8008fae:	783b      	ldrb	r3, [r7, #0]
 8008fb0:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008fb2:	2380      	movs	r3, #128	; 0x80
 8008fb4:	015b      	lsls	r3, r3, #5
 8008fb6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008fbc:	481a      	ldr	r0, [pc, #104]	; (8009028 <ReadADCChannel+0xb8>)
 8008fbe:	f007 fdb1 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d122      	bne.n	800900c <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008fc6:	4d18      	ldr	r5, [pc, #96]	; (8009028 <ReadADCChannel+0xb8>)
 8008fc8:	0028      	movs	r0, r5
 8008fca:	f007 fcaf 	bl	801092c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	0028      	movs	r0, r5
 8008fd2:	f007 fcfd 	bl	80109d0 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008fd6:	0028      	movs	r0, r5
 8008fd8:	f007 fd9e 	bl	8010b18 <HAL_ADC_GetValue>
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <ReadADCChannel+0xa8>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	; (800901c <ReadADCChannel+0xac>)
 8008fe4:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008fe6:	0028      	movs	r0, r5
 8008fe8:	f007 fcd0 	bl	801098c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008fec:	490d      	ldr	r1, [pc, #52]	; (8009024 <ReadADCChannel+0xb4>)
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <ReadADCChannel+0xb0>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <ReadADCChannel+0xbc>)
 8008ff6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008ffc:	0028      	movs	r0, r5
 8008ffe:	f007 fd91 	bl	8010b24 <HAL_ADC_ConfigChannel>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0bc      	beq.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 8009006:	f7ff fdcd 	bl	8008ba4 <Error_Handler>
 800900a:	e7b9      	b.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 800900c:	f7ff fdca 	bl	8008ba4 <Error_Handler>
 8009010:	e7d9      	b.n	8008fc6 <ReadADCChannel+0x56>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	20000df0 	.word	0x20000df0
 8009018:	20000e01 	.word	0x20000e01
 800901c:	20000df8 	.word	0x20000df8
 8009020:	20000e00 	.word	0x20000e00
 8009024:	20000e5c 	.word	0x20000e5c
 8009028:	20006344 	.word	0x20006344
 800902c:	00001001 	.word	0x00001001

08009030 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 8009030:	4770      	bx	lr

08009032 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 8009032:	4770      	bx	lr

08009034 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 8009034:	4770      	bx	lr

08009036 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8009036:	4770      	bx	lr

08009038 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 8009038:	4770      	bx	lr
	...

0800903c <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	46de      	mov	lr, fp
 8009040:	4657      	mov	r7, sl
 8009042:	464e      	mov	r6, r9
 8009044:	4645      	mov	r5, r8
 8009046:	b5e0      	push	{r5, r6, r7, lr}
 8009048:	b089      	sub	sp, #36	; 0x24
 800904a:	4dbd      	ldr	r5, [pc, #756]	; (8009340 <CheckAttachedButtons+0x304>)
 800904c:	2404      	movs	r4, #4
 800904e:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	469b      	mov	fp, r3
 8009054:	4699      	mov	r9, r3
 8009056:	e111      	b.n	800927c <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8009058:	230e      	movs	r3, #14
 800905a:	aa02      	add	r2, sp, #8
 800905c:	4694      	mov	ip, r2
 800905e:	4463      	add	r3, ip
 8009060:	8819      	ldrh	r1, [r3, #0]
 8009062:	2201      	movs	r2, #1
 8009064:	9807      	ldr	r0, [sp, #28]
 8009066:	f008 ff8d 	bl	8011f84 <HAL_GPIO_WritePin>
				Delay_us(10);
 800906a:	200a      	movs	r0, #10
 800906c:	f005 f832 	bl	800e0d4 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8009070:	ab05      	add	r3, sp, #20
 8009072:	8819      	ldrh	r1, [r3, #0]
 8009074:	9806      	ldr	r0, [sp, #24]
 8009076:	f008 ff7f 	bl	8011f78 <HAL_GPIO_ReadPin>
 800907a:	4681      	mov	r9, r0
 800907c:	e126      	b.n	80092cc <CheckAttachedButtons+0x290>
			switch (button[i].type) {
 800907e:	2b01      	cmp	r3, #1
 8009080:	d105      	bne.n	800908e <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 8009082:	464b      	mov	r3, r9
 8009084:	2b01      	cmp	r3, #1
 8009086:	d046      	beq.n	8009116 <CheckAttachedButtons+0xda>
				else if (connected == GPIO_PIN_RESET)
 8009088:	2b00      	cmp	r3, #0
 800908a:	d100      	bne.n	800908e <CheckAttachedButtons+0x52>
 800908c:	e1c6      	b.n	800941c <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800908e:	465b      	mov	r3, fp
 8009090:	2b04      	cmp	r3, #4
 8009092:	d001      	beq.n	8009098 <CheckAttachedButtons+0x5c>
 8009094:	2b02      	cmp	r3, #2
 8009096:	d107      	bne.n	80090a8 <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)
 8009098:	4baa      	ldr	r3, [pc, #680]	; (8009344 <CheckAttachedButtons+0x308>)
 800909a:	58e3      	ldr	r3, [r4, r3]
 800909c:	4aaa      	ldr	r2, [pc, #680]	; (8009348 <CheckAttachedButtons+0x30c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d842      	bhi.n	8009128 <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 80090a2:	3301      	adds	r3, #1
 80090a4:	4aa7      	ldr	r2, [pc, #668]	; (8009344 <CheckAttachedButtons+0x308>)
 80090a6:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 80090a8:	23fd      	movs	r3, #253	; 0xfd
 80090aa:	465a      	mov	r2, fp
 80090ac:	4013      	ands	r3, r2
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d100      	bne.n	80090b4 <CheckAttachedButtons+0x78>
 80090b2:	e1b7      	b.n	8009424 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 80090b4:	4ba3      	ldr	r3, [pc, #652]	; (8009344 <CheckAttachedButtons+0x308>)
 80090b6:	58e3      	ldr	r3, [r4, r3]
 80090b8:	4aa4      	ldr	r2, [pc, #656]	; (800934c <CheckAttachedButtons+0x310>)
 80090ba:	8812      	ldrh	r2, [r2, #0]
 80090bc:	4293      	cmp	r3, r2
 80090be:	d36f      	bcc.n	80091a0 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce) {
 80090c0:	d045      	beq.n	800914e <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80090c2:	4ba3      	ldr	r3, [pc, #652]	; (8009350 <CheckAttachedButtons+0x314>)
 80090c4:	58e3      	ldr	r3, [r4, r3]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d202      	bcs.n	80090d0 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;
 80090ca:	4ba1      	ldr	r3, [pc, #644]	; (8009350 <CheckAttachedButtons+0x314>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 80090d0:	4b9c      	ldr	r3, [pc, #624]	; (8009344 <CheckAttachedButtons+0x308>)
 80090d2:	58e3      	ldr	r3, [r4, r3]
 80090d4:	4a9d      	ldr	r2, [pc, #628]	; (800934c <CheckAttachedButtons+0x310>)
 80090d6:	8852      	ldrh	r2, [r2, #2]
 80090d8:	4293      	cmp	r3, r2
 80090da:	d952      	bls.n	8009182 <CheckAttachedButtons+0x146>
						&& pressCounter[i] < 500) {
 80090dc:	22f4      	movs	r2, #244	; 0xf4
 80090de:	32ff      	adds	r2, #255	; 0xff
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d84e      	bhi.n	8009182 <CheckAttachedButtons+0x146>
					if (clicked == 0)
 80090e4:	4b9b      	ldr	r3, [pc, #620]	; (8009354 <CheckAttachedButtons+0x318>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d137      	bne.n	800915c <CheckAttachedButtons+0x120>
						clicked = 1;		// Record a possible single click
 80090ec:	4b99      	ldr	r3, [pc, #612]	; (8009354 <CheckAttachedButtons+0x318>)
 80090ee:	3af3      	subs	r2, #243	; 0xf3
 80090f0:	3aff      	subs	r2, #255	; 0xff
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e054      	b.n	80091a0 <CheckAttachedButtons+0x164>
				if (connected == GPIO_PIN_SET)
 80090f6:	464b      	mov	r3, r9
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d00f      	beq.n	800911c <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1c6      	bne.n	800908e <CheckAttachedButtons+0x52>
					state = OPEN;
 8009100:	2303      	movs	r3, #3
 8009102:	469b      	mov	fp, r3
 8009104:	e18e      	b.n	8009424 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 8009106:	464b      	mov	r3, r9
 8009108:	2b01      	cmp	r3, #1
 800910a:	d00a      	beq.n	8009122 <CheckAttachedButtons+0xe6>
				else if (connected == GPIO_PIN_RESET)
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1be      	bne.n	800908e <CheckAttachedButtons+0x52>
					state = OFF;
 8009110:	2301      	movs	r3, #1
 8009112:	469b      	mov	fp, r3
 8009114:	e186      	b.n	8009424 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 8009116:	2304      	movs	r3, #4
 8009118:	469b      	mov	fp, r3
 800911a:	e7bd      	b.n	8009098 <CheckAttachedButtons+0x5c>
					state = CLOSED;
 800911c:	2304      	movs	r3, #4
 800911e:	469b      	mov	fp, r3
 8009120:	e7ba      	b.n	8009098 <CheckAttachedButtons+0x5c>
 8009122:	2302      	movs	r3, #2
 8009124:	469b      	mov	fp, r3
 8009126:	e7b7      	b.n	8009098 <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;			// Reset debounce counter
 8009128:	4b86      	ldr	r3, [pc, #536]	; (8009344 <CheckAttachedButtons+0x308>)
 800912a:	2200      	movs	r2, #0
 800912c:	50e2      	str	r2, [r4, r3]
 800912e:	e7bb      	b.n	80090a8 <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;		// Reset debounce counter
 8009130:	4b87      	ldr	r3, [pc, #540]	; (8009350 <CheckAttachedButtons+0x314>)
 8009132:	2200      	movs	r2, #0
 8009134:	50e2      	str	r2, [r4, r3]
 8009136:	e17e      	b.n	8009436 <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8009138:	4b87      	ldr	r3, [pc, #540]	; (8009358 <CheckAttachedButtons+0x31c>)
 800913a:	5cf3      	ldrb	r3, [r6, r3]
 800913c:	4a83      	ldr	r2, [pc, #524]	; (800934c <CheckAttachedButtons+0x310>)
 800913e:	7952      	ldrb	r2, [r2, #5]
 8009140:	429a      	cmp	r2, r3
 8009142:	d200      	bcs.n	8009146 <CheckAttachedButtons+0x10a>
 8009144:	e183      	b.n	800944e <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8009146:	3301      	adds	r3, #1
 8009148:	4a83      	ldr	r2, [pc, #524]	; (8009358 <CheckAttachedButtons+0x31c>)
 800914a:	54b3      	strb	r3, [r6, r2]
 800914c:	e7b2      	b.n	80090b4 <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800914e:	2107      	movs	r1, #7
 8009150:	4640      	mov	r0, r8
 8009152:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 8009154:	3301      	adds	r3, #1
 8009156:	497b      	ldr	r1, [pc, #492]	; (8009344 <CheckAttachedButtons+0x308>)
 8009158:	5063      	str	r3, [r4, r1]
 800915a:	e7b2      	b.n	80090c2 <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 800915c:	2b02      	cmp	r3, #2
 800915e:	d11f      	bne.n	80091a0 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8009160:	4b7d      	ldr	r3, [pc, #500]	; (8009358 <CheckAttachedButtons+0x31c>)
 8009162:	5cf3      	ldrb	r3, [r6, r3]
 8009164:	4a79      	ldr	r2, [pc, #484]	; (800934c <CheckAttachedButtons+0x310>)
 8009166:	7912      	ldrb	r2, [r2, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d219      	bcs.n	80091a0 <CheckAttachedButtons+0x164>
										< BOS.buttons.maxInterClickTime) {
 800916c:	4a77      	ldr	r2, [pc, #476]	; (800934c <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 800916e:	7952      	ldrb	r2, [r2, #5]
 8009170:	429a      	cmp	r2, r3
 8009172:	d915      	bls.n	80091a0 <CheckAttachedButtons+0x164>
							clicked = 3;	// Record a possible double click
 8009174:	4b77      	ldr	r3, [pc, #476]	; (8009354 <CheckAttachedButtons+0x318>)
 8009176:	2203      	movs	r2, #3
 8009178:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800917a:	4b77      	ldr	r3, [pc, #476]	; (8009358 <CheckAttachedButtons+0x31c>)
 800917c:	2200      	movs	r2, #0
 800917e:	54f2      	strb	r2, [r6, r3]
 8009180:	e00e      	b.n	80091a0 <CheckAttachedButtons+0x164>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8009182:	3bf5      	subs	r3, #245	; 0xf5
 8009184:	3bff      	subs	r3, #255	; 0xff
 8009186:	4a75      	ldr	r2, [pc, #468]	; (800935c <CheckAttachedButtons+0x320>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d809      	bhi.n	80091a0 <CheckAttachedButtons+0x164>
					if (clicked)
 800918c:	4b71      	ldr	r3, [pc, #452]	; (8009354 <CheckAttachedButtons+0x318>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <CheckAttachedButtons+0x15e>
						clicked = 0;						// Cannot be a click
 8009194:	4b6f      	ldr	r3, [pc, #444]	; (8009354 <CheckAttachedButtons+0x318>)
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800919a:	9803      	ldr	r0, [sp, #12]
 800919c:	f7ff f9c0 	bl	8008520 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 80091a0:	4b6b      	ldr	r3, [pc, #428]	; (8009350 <CheckAttachedButtons+0x314>)
 80091a2:	58e3      	ldr	r3, [r4, r3]
 80091a4:	4a69      	ldr	r2, [pc, #420]	; (800934c <CheckAttachedButtons+0x310>)
 80091a6:	8812      	ldrh	r2, [r2, #0]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d34d      	bcc.n	8009248 <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 80091ac:	d02b      	beq.n	8009206 <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 80091ae:	4b65      	ldr	r3, [pc, #404]	; (8009344 <CheckAttachedButtons+0x308>)
 80091b0:	58e3      	ldr	r3, [r4, r3]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d202      	bcs.n	80091bc <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;
 80091b6:	4b63      	ldr	r3, [pc, #396]	; (8009344 <CheckAttachedButtons+0x308>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 80091bc:	4b64      	ldr	r3, [pc, #400]	; (8009350 <CheckAttachedButtons+0x314>)
 80091be:	58e3      	ldr	r3, [r4, r3]
 80091c0:	4a62      	ldr	r2, [pc, #392]	; (800934c <CheckAttachedButtons+0x310>)
 80091c2:	8852      	ldrh	r2, [r2, #2]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d93a      	bls.n	800923e <CheckAttachedButtons+0x202>
						&& releaseCounter[i] < 500) {
 80091c8:	22f4      	movs	r2, #244	; 0xf4
 80091ca:	32ff      	adds	r2, #255	; 0xff
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d836      	bhi.n	800923e <CheckAttachedButtons+0x202>
					if (clicked == 1) {
 80091d0:	4b60      	ldr	r3, [pc, #384]	; (8009354 <CheckAttachedButtons+0x318>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d01d      	beq.n	8009214 <CheckAttachedButtons+0x1d8>
					} else if (clicked == 3) {
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d135      	bne.n	8009248 <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 80091dc:	3303      	adds	r3, #3
 80091de:	4642      	mov	r2, r8
 80091e0:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 80091e2:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <CheckAttachedButtons+0x318>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 80091e8:	4b5d      	ldr	r3, [pc, #372]	; (8009360 <CheckAttachedButtons+0x324>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d13f      	bne.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 80091f0:	4643      	mov	r3, r8
 80091f2:	7c5b      	ldrb	r3, [r3, #17]
 80091f4:	079b      	lsls	r3, r3, #30
 80091f6:	d53b      	bpl.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 80091f8:	4b59      	ldr	r3, [pc, #356]	; (8009360 <CheckAttachedButtons+0x324>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 80091fe:	9803      	ldr	r0, [sp, #12]
 8009200:	f7ff ff18 	bl	8009034 <buttonDblClickedCallback>
 8009204:	e034      	b.n	8009270 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009206:	2108      	movs	r1, #8
 8009208:	4640      	mov	r0, r8
 800920a:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 800920c:	3301      	adds	r3, #1
 800920e:	4950      	ldr	r1, [pc, #320]	; (8009350 <CheckAttachedButtons+0x314>)
 8009210:	5063      	str	r3, [r4, r1]
 8009212:	e7cc      	b.n	80091ae <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;// Record a single button click event
 8009214:	3304      	adds	r3, #4
 8009216:	4642      	mov	r2, r8
 8009218:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 800921a:	4b4e      	ldr	r3, [pc, #312]	; (8009354 <CheckAttachedButtons+0x318>)
 800921c:	2202      	movs	r2, #2
 800921e:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8009220:	4b4f      	ldr	r3, [pc, #316]	; (8009360 <CheckAttachedButtons+0x324>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d123      	bne.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 8009228:	4643      	mov	r3, r8
 800922a:	7c5b      	ldrb	r3, [r3, #17]
 800922c:	07db      	lsls	r3, r3, #31
 800922e:	d51f      	bpl.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8009230:	4b4b      	ldr	r3, [pc, #300]	; (8009360 <CheckAttachedButtons+0x324>)
 8009232:	2201      	movs	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 8009236:	9803      	ldr	r0, [sp, #12]
 8009238:	f7ff fefb 	bl	8009032 <buttonClickedCallback>
 800923c:	e018      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& releaseCounter[i] < 0xFFFF) {
 800923e:	3bf5      	subs	r3, #245	; 0xf5
 8009240:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 8009242:	4a46      	ldr	r2, [pc, #280]	; (800935c <CheckAttachedButtons+0x320>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d909      	bls.n	800925c <CheckAttachedButtons+0x220>
			switch (button[i].state) {
 8009248:	4643      	mov	r3, r8
 800924a:	7a5b      	ldrb	r3, [r3, #9]
 800924c:	3b05      	subs	r3, #5
 800924e:	b2da      	uxtb	r2, r3
 8009250:	2a09      	cmp	r2, #9
 8009252:	d80d      	bhi.n	8009270 <CheckAttachedButtons+0x234>
 8009254:	0093      	lsls	r3, r2, #2
 8009256:	4a43      	ldr	r2, [pc, #268]	; (8009364 <CheckAttachedButtons+0x328>)
 8009258:	58d3      	ldr	r3, [r2, r3]
 800925a:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800925c:	9803      	ldr	r0, [sp, #12]
 800925e:	f7ff f99d 	bl	800859c <CheckForTimedButtonRelease>
 8009262:	e7f1      	b.n	8009248 <CheckAttachedButtons+0x20c>
				buttonPressedCallback(i);
 8009264:	9803      	ldr	r0, [sp, #12]
 8009266:	f7ff f959 	bl	800851c <buttonPressedCallback>
				button[i].state = NONE;
 800926a:	2300      	movs	r3, #0
 800926c:	4642      	mov	r2, r8
 800926e:	7253      	strb	r3, [r2, #9]
 8009270:	3601      	adds	r6, #1
 8009272:	3509      	adds	r5, #9
 8009274:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8009276:	2c10      	cmp	r4, #16
 8009278:	d100      	bne.n	800927c <CheckAttachedButtons+0x240>
 800927a:	e0ee      	b.n	800945a <CheckAttachedButtons+0x41e>
 800927c:	b2f3      	uxtb	r3, r6
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8009282:	7aab      	ldrb	r3, [r5, #10]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0f3      	beq.n	8009270 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)
 8009288:	4b35      	ldr	r3, [pc, #212]	; (8009360 <CheckAttachedButtons+0x324>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d100      	bne.n	8009292 <CheckAttachedButtons+0x256>
				button[i].state = NONE;
 8009290:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8009292:	230e      	movs	r3, #14
 8009294:	aa02      	add	r2, sp, #8
 8009296:	4694      	mov	ip, r2
 8009298:	4463      	add	r3, ip
 800929a:	469a      	mov	sl, r3
 800929c:	af05      	add	r7, sp, #20
 800929e:	9700      	str	r7, [sp, #0]
 80092a0:	ab06      	add	r3, sp, #24
 80092a2:	4652      	mov	r2, sl
 80092a4:	a907      	add	r1, sp, #28
 80092a6:	9803      	ldr	r0, [sp, #12]
 80092a8:	f004 fbb6 	bl	800da18 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 80092ac:	4653      	mov	r3, sl
 80092ae:	8819      	ldrh	r1, [r3, #0]
 80092b0:	2200      	movs	r2, #0
 80092b2:	9807      	ldr	r0, [sp, #28]
 80092b4:	f008 fe66 	bl	8011f84 <HAL_GPIO_WritePin>
			Delay_us(10);
 80092b8:	200a      	movs	r0, #10
 80092ba:	f004 ff0b 	bl	800e0d4 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 80092be:	8839      	ldrh	r1, [r7, #0]
 80092c0:	9806      	ldr	r0, [sp, #24]
 80092c2:	f008 fe59 	bl	8011f78 <HAL_GPIO_ReadPin>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d100      	bne.n	80092cc <CheckAttachedButtons+0x290>
 80092ca:	e6c5      	b.n	8009058 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 80092cc:	230e      	movs	r3, #14
 80092ce:	aa02      	add	r2, sp, #8
 80092d0:	4694      	mov	ip, r2
 80092d2:	4463      	add	r3, ip
 80092d4:	8819      	ldrh	r1, [r3, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	9807      	ldr	r0, [sp, #28]
 80092da:	f008 fe53 	bl	8011f84 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 80092de:	4643      	mov	r3, r8
 80092e0:	7a9b      	ldrb	r3, [r3, #10]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d100      	bne.n	80092e8 <CheckAttachedButtons+0x2ac>
 80092e6:	e706      	b.n	80090f6 <CheckAttachedButtons+0xba>
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	2a02      	cmp	r2, #2
 80092ec:	d800      	bhi.n	80092f0 <CheckAttachedButtons+0x2b4>
 80092ee:	e6c6      	b.n	800907e <CheckAttachedButtons+0x42>
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d100      	bne.n	80092f6 <CheckAttachedButtons+0x2ba>
 80092f4:	e707      	b.n	8009106 <CheckAttachedButtons+0xca>
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d000      	beq.n	80092fc <CheckAttachedButtons+0x2c0>
 80092fa:	e6c8      	b.n	800908e <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 80092fc:	464b      	mov	r3, r9
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d100      	bne.n	8009304 <CheckAttachedButtons+0x2c8>
 8009302:	e08e      	b.n	8009422 <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 8009304:	2b00      	cmp	r3, #0
 8009306:	d000      	beq.n	800930a <CheckAttachedButtons+0x2ce>
 8009308:	e6c1      	b.n	800908e <CheckAttachedButtons+0x52>
 800930a:	2302      	movs	r3, #2
 800930c:	469b      	mov	fp, r3
 800930e:	e6c3      	b.n	8009098 <CheckAttachedButtons+0x5c>
				buttonReleasedCallback(i);
 8009310:	9803      	ldr	r0, [sp, #12]
 8009312:	f7ff fe8d 	bl	8009030 <buttonReleasedCallback>
				button[i].state = NONE;
 8009316:	2300      	movs	r3, #0
 8009318:	4642      	mov	r2, r8
 800931a:	7253      	strb	r3, [r2, #9]
				break;
 800931c:	e7a8      	b.n	8009270 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800931e:	4b10      	ldr	r3, [pc, #64]	; (8009360 <CheckAttachedButtons+0x324>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1a4      	bne.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 8009326:	4643      	mov	r3, r8
 8009328:	7c5b      	ldrb	r3, [r3, #17]
 800932a:	075b      	lsls	r3, r3, #29
 800932c:	d5a0      	bpl.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800932e:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <CheckAttachedButtons+0x324>)
 8009330:	2201      	movs	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 8009334:	2101      	movs	r1, #1
 8009336:	9803      	ldr	r0, [sp, #12]
 8009338:	f7ff fe7d 	bl	8009036 <buttonPressedForXCallback>
 800933c:	e798      	b.n	8009270 <CheckAttachedButtons+0x234>
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	20000e04 	.word	0x20000e04
 8009344:	20000e3c 	.word	0x20000e3c
 8009348:	0000fffe 	.word	0x0000fffe
 800934c:	2000627c 	.word	0x2000627c
 8009350:	20000e4c 	.word	0x20000e4c
 8009354:	20000e28 	.word	0x20000e28
 8009358:	20000e30 	.word	0x20000e30
 800935c:	0000fe0a 	.word	0x0000fe0a
 8009360:	20000e34 	.word	0x20000e34
 8009364:	08019f38 	.word	0x08019f38
				if (!delayButtonStateReset
 8009368:	4b3f      	ldr	r3, [pc, #252]	; (8009468 <CheckAttachedButtons+0x42c>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d000      	beq.n	8009372 <CheckAttachedButtons+0x336>
 8009370:	e77e      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 8009372:	4643      	mov	r3, r8
 8009374:	7c5b      	ldrb	r3, [r3, #17]
 8009376:	071b      	lsls	r3, r3, #28
 8009378:	d400      	bmi.n	800937c <CheckAttachedButtons+0x340>
 800937a:	e779      	b.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800937c:	4b3a      	ldr	r3, [pc, #232]	; (8009468 <CheckAttachedButtons+0x42c>)
 800937e:	2201      	movs	r2, #1
 8009380:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 8009382:	2102      	movs	r1, #2
 8009384:	9803      	ldr	r0, [sp, #12]
 8009386:	f7ff fe56 	bl	8009036 <buttonPressedForXCallback>
 800938a:	e771      	b.n	8009270 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800938c:	4b36      	ldr	r3, [pc, #216]	; (8009468 <CheckAttachedButtons+0x42c>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d000      	beq.n	8009396 <CheckAttachedButtons+0x35a>
 8009394:	e76c      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8009396:	4643      	mov	r3, r8
 8009398:	7c5b      	ldrb	r3, [r3, #17]
 800939a:	06db      	lsls	r3, r3, #27
 800939c:	d400      	bmi.n	80093a0 <CheckAttachedButtons+0x364>
 800939e:	e767      	b.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 80093a0:	4b31      	ldr	r3, [pc, #196]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 80093a6:	2103      	movs	r1, #3
 80093a8:	9803      	ldr	r0, [sp, #12]
 80093aa:	f7ff fe44 	bl	8009036 <buttonPressedForXCallback>
 80093ae:	e75f      	b.n	8009270 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d000      	beq.n	80093ba <CheckAttachedButtons+0x37e>
 80093b8:	e75a      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 80093ba:	4643      	mov	r3, r8
 80093bc:	7c5b      	ldrb	r3, [r3, #17]
 80093be:	069b      	lsls	r3, r3, #26
 80093c0:	d400      	bmi.n	80093c4 <CheckAttachedButtons+0x388>
 80093c2:	e755      	b.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 80093c4:	4b28      	ldr	r3, [pc, #160]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 80093ca:	2101      	movs	r1, #1
 80093cc:	9803      	ldr	r0, [sp, #12]
 80093ce:	f7ff fe33 	bl	8009038 <buttonReleasedForYCallback>
 80093d2:	e74d      	b.n	8009270 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d000      	beq.n	80093de <CheckAttachedButtons+0x3a2>
 80093dc:	e748      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 80093de:	4643      	mov	r3, r8
 80093e0:	7c5b      	ldrb	r3, [r3, #17]
 80093e2:	065b      	lsls	r3, r3, #25
 80093e4:	d400      	bmi.n	80093e8 <CheckAttachedButtons+0x3ac>
 80093e6:	e743      	b.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 80093e8:	4b1f      	ldr	r3, [pc, #124]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 80093ee:	2102      	movs	r1, #2
 80093f0:	9803      	ldr	r0, [sp, #12]
 80093f2:	f7ff fe21 	bl	8009038 <buttonReleasedForYCallback>
 80093f6:	e73b      	b.n	8009270 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 80093f8:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <CheckAttachedButtons+0x42c>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d000      	beq.n	8009402 <CheckAttachedButtons+0x3c6>
 8009400:	e736      	b.n	8009270 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 8009402:	4643      	mov	r3, r8
 8009404:	7c5b      	ldrb	r3, [r3, #17]
 8009406:	2b7f      	cmp	r3, #127	; 0x7f
 8009408:	d800      	bhi.n	800940c <CheckAttachedButtons+0x3d0>
 800940a:	e731      	b.n	8009270 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800940c:	4b16      	ldr	r3, [pc, #88]	; (8009468 <CheckAttachedButtons+0x42c>)
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8009412:	2103      	movs	r1, #3
 8009414:	9803      	ldr	r0, [sp, #12]
 8009416:	f7ff fe0f 	bl	8009038 <buttonReleasedForYCallback>
 800941a:	e729      	b.n	8009270 <CheckAttachedButtons+0x234>
					state = OPEN;
 800941c:	2303      	movs	r3, #3
 800941e:	469b      	mov	fp, r3
 8009420:	e000      	b.n	8009424 <CheckAttachedButtons+0x3e8>
					state = OFF;
 8009422:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 8009424:	4b11      	ldr	r3, [pc, #68]	; (800946c <CheckAttachedButtons+0x430>)
 8009426:	58e3      	ldr	r3, [r4, r3]
 8009428:	4a11      	ldr	r2, [pc, #68]	; (8009470 <CheckAttachedButtons+0x434>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d900      	bls.n	8009430 <CheckAttachedButtons+0x3f4>
 800942e:	e67f      	b.n	8009130 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 8009430:	3301      	adds	r3, #1
 8009432:	4a0e      	ldr	r2, [pc, #56]	; (800946c <CheckAttachedButtons+0x430>)
 8009434:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <CheckAttachedButtons+0x438>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d100      	bne.n	8009440 <CheckAttachedButtons+0x404>
 800943e:	e67b      	b.n	8009138 <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <CheckAttachedButtons+0x43c>)
 8009442:	5cf2      	ldrb	r2, [r6, r3]
 8009444:	4b0d      	ldr	r3, [pc, #52]	; (800947c <CheckAttachedButtons+0x440>)
 8009446:	795b      	ldrb	r3, [r3, #5]
 8009448:	429a      	cmp	r2, r3
 800944a:	d800      	bhi.n	800944e <CheckAttachedButtons+0x412>
 800944c:	e632      	b.n	80090b4 <CheckAttachedButtons+0x78>
					clicked = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	4a08      	ldr	r2, [pc, #32]	; (8009474 <CheckAttachedButtons+0x438>)
 8009452:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8009454:	4a08      	ldr	r2, [pc, #32]	; (8009478 <CheckAttachedButtons+0x43c>)
 8009456:	54b3      	strb	r3, [r6, r2]
 8009458:	e62c      	b.n	80090b4 <CheckAttachedButtons+0x78>
}
 800945a:	b009      	add	sp, #36	; 0x24
 800945c:	bc3c      	pop	{r2, r3, r4, r5}
 800945e:	4690      	mov	r8, r2
 8009460:	4699      	mov	r9, r3
 8009462:	46a2      	mov	sl, r4
 8009464:	46ab      	mov	fp, r5
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	20000e34 	.word	0x20000e34
 800946c:	20000e4c 	.word	0x20000e4c
 8009470:	0000fffe 	.word	0x0000fffe
 8009474:	20000e28 	.word	0x20000e28
 8009478:	20000e30 	.word	0x20000e30
 800947c:	2000627c 	.word	0x2000627c

08009480 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009480:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009482:	f006 fef1 	bl	8010268 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8009486:	b2c4      	uxtb	r4, r0
 8009488:	0020      	movs	r0, r4
 800948a:	f7fe f8f1 	bl	8007670 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800948e:	0020      	movs	r0, r4
 8009490:	f7fe f91c 	bl	80076cc <SwitchStreamDMAToMsg>
}
 8009494:	bd10      	pop	{r4, pc}
	...

08009498 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	b085      	sub	sp, #20
 800949c:	000d      	movs	r5, r1
 800949e:	0014      	movs	r4, r2
 80094a0:	220f      	movs	r2, #15
 80094a2:	446a      	add	r2, sp
 80094a4:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80094a6:	aa0a      	add	r2, sp, #40	; 0x28
 80094a8:	7812      	ldrb	r2, [r2, #0]
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d058      	beq.n	8009560 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d100      	bne.n	80094b4 <SetupDMAStreams+0x1c>
 80094b2:	e0be      	b.n	8009632 <SetupDMAStreams+0x19a>
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d100      	bne.n	80094ba <SetupDMAStreams+0x22>
 80094b8:	e0bf      	b.n	800963a <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d055      	beq.n	800956a <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 80094be:	2801      	cmp	r0, #1
 80094c0:	d100      	bne.n	80094c4 <SetupDMAStreams+0x2c>
 80094c2:	e08b      	b.n	80095dc <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 80094c4:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80094c6:	2802      	cmp	r0, #2
 80094c8:	d000      	beq.n	80094cc <SetupDMAStreams+0x34>
 80094ca:	e0b3      	b.n	8009634 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80094cc:	0018      	movs	r0, r3
 80094ce:	f004 ff3f 	bl	800e350 <GetUart>
 80094d2:	0006      	movs	r6, r0
 80094d4:	ab0a      	add	r3, sp, #40	; 0x28
 80094d6:	7818      	ldrb	r0, [r3, #0]
 80094d8:	f004 ff3a 	bl	800e350 <GetUart>
 80094dc:	0001      	movs	r1, r0
 80094de:	2201      	movs	r2, #1
 80094e0:	0030      	movs	r0, r6
 80094e2:	f7fe f925 	bl	8007730 <StartDMAstream>
 80094e6:	0002      	movs	r2, r0
 80094e8:	2817      	cmp	r0, #23
 80094ea:	d100      	bne.n	80094ee <SetupDMAStreams+0x56>
 80094ec:	e0a2      	b.n	8009634 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80094ee:	0160      	lsls	r0, r4, #5
 80094f0:	1b00      	subs	r0, r0, r4
 80094f2:	0080      	lsls	r0, r0, #2
 80094f4:	1900      	adds	r0, r0, r4
 80094f6:	00c0      	lsls	r0, r0, #3
 80094f8:	21fa      	movs	r1, #250	; 0xfa
 80094fa:	0089      	lsls	r1, r1, #2
 80094fc:	f7f6 fe1e 	bl	800013c <__udivsi3>
 8009500:	0004      	movs	r4, r0
 8009502:	260f      	movs	r6, #15
 8009504:	446e      	add	r6, sp
 8009506:	4b4e      	ldr	r3, [pc, #312]	; (8009640 <SetupDMAStreams+0x1a8>)
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	0033      	movs	r3, r6
 800950c:	2200      	movs	r2, #0
 800950e:	0001      	movs	r1, r0
 8009510:	484c      	ldr	r0, [pc, #304]	; (8009644 <SetupDMAStreams+0x1ac>)
 8009512:	f006 fd4d 	bl	800ffb0 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009516:	7833      	ldrb	r3, [r6, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a4a      	ldr	r2, [pc, #296]	; (8009648 <SetupDMAStreams+0x1b0>)
 800951e:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009520:	ab0a      	add	r3, sp, #40	; 0x28
 8009522:	7818      	ldrb	r0, [r3, #0]
 8009524:	f004 ff14 	bl	800e350 <GetUart>
 8009528:	0007      	movs	r7, r0
 800952a:	7830      	ldrb	r0, [r6, #0]
 800952c:	f004 ff10 	bl	800e350 <GetUart>
 8009530:	0001      	movs	r1, r0
 8009532:	2201      	movs	r2, #1
 8009534:	0038      	movs	r0, r7
 8009536:	f7fe f8fb 	bl	8007730 <StartDMAstream>
 800953a:	0002      	movs	r2, r0
 800953c:	2817      	cmp	r0, #23
 800953e:	d079      	beq.n	8009634 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009540:	4b3f      	ldr	r3, [pc, #252]	; (8009640 <SetupDMAStreams+0x1a8>)
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	ab0a      	add	r3, sp, #40	; 0x28
 8009546:	2200      	movs	r2, #0
 8009548:	0021      	movs	r1, r4
 800954a:	483e      	ldr	r0, [pc, #248]	; (8009644 <SetupDMAStreams+0x1ac>)
 800954c:	f006 fd30 	bl	800ffb0 <xTimerCreate>
 8009550:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8009552:	ab0a      	add	r3, sp, #40	; 0x28
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	3b01      	subs	r3, #1
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4a3b      	ldr	r2, [pc, #236]	; (8009648 <SetupDMAStreams+0x1b0>)
 800955c:	509d      	str	r5, [r3, r2]
 800955e:	e02d      	b.n	80095bc <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8009560:	4a3a      	ldr	r2, [pc, #232]	; (800964c <SetupDMAStreams+0x1b4>)
 8009562:	2102      	movs	r1, #2
 8009564:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8009566:	2267      	movs	r2, #103	; 0x67
 8009568:	e064      	b.n	8009634 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800956a:	0018      	movs	r0, r3
 800956c:	f004 fef0 	bl	800e350 <GetUart>
 8009570:	0006      	movs	r6, r0
 8009572:	ab0a      	add	r3, sp, #40	; 0x28
 8009574:	7818      	ldrb	r0, [r3, #0]
 8009576:	f004 feeb 	bl	800e350 <GetUart>
 800957a:	0001      	movs	r1, r0
 800957c:	2201      	movs	r2, #1
 800957e:	0030      	movs	r0, r6
 8009580:	f7fe f8d6 	bl	8007730 <StartDMAstream>
 8009584:	0002      	movs	r2, r0
 8009586:	2817      	cmp	r0, #23
 8009588:	d054      	beq.n	8009634 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800958a:	260f      	movs	r6, #15
 800958c:	446e      	add	r6, sp
 800958e:	0160      	lsls	r0, r4, #5
 8009590:	1b00      	subs	r0, r0, r4
 8009592:	0080      	lsls	r0, r0, #2
 8009594:	1900      	adds	r0, r0, r4
 8009596:	00c0      	lsls	r0, r0, #3
 8009598:	21fa      	movs	r1, #250	; 0xfa
 800959a:	0089      	lsls	r1, r1, #2
 800959c:	f7f6 fdce 	bl	800013c <__udivsi3>
 80095a0:	0001      	movs	r1, r0
 80095a2:	4b27      	ldr	r3, [pc, #156]	; (8009640 <SetupDMAStreams+0x1a8>)
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	0033      	movs	r3, r6
 80095a8:	2200      	movs	r2, #0
 80095aa:	4826      	ldr	r0, [pc, #152]	; (8009644 <SetupDMAStreams+0x1ac>)
 80095ac:	f006 fd00 	bl	800ffb0 <xTimerCreate>
 80095b0:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80095b2:	7833      	ldrb	r3, [r6, #0]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4a23      	ldr	r2, [pc, #140]	; (8009648 <SetupDMAStreams+0x1b0>)
 80095ba:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 80095bc:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 80095be:	2c00      	cmp	r4, #0
 80095c0:	d038      	beq.n	8009634 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80095c2:	f005 ff8d 	bl	800f4e0 <xTaskGetTickCount>
 80095c6:	0002      	movs	r2, r0
 80095c8:	2301      	movs	r3, #1
 80095ca:	425b      	negs	r3, r3
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	2300      	movs	r3, #0
 80095d0:	2101      	movs	r1, #1
 80095d2:	0020      	movs	r0, r4
 80095d4:	f006 fd0c 	bl	800fff0 <xTimerGenericCommand>
	return BOS_OK;
 80095d8:	2200      	movs	r2, #0
 80095da:	e02b      	b.n	8009634 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80095dc:	0010      	movs	r0, r2
 80095de:	f004 feb7 	bl	800e350 <GetUart>
 80095e2:	0006      	movs	r6, r0
 80095e4:	230f      	movs	r3, #15
 80095e6:	446b      	add	r3, sp
 80095e8:	7818      	ldrb	r0, [r3, #0]
 80095ea:	f004 feb1 	bl	800e350 <GetUart>
 80095ee:	0001      	movs	r1, r0
 80095f0:	2201      	movs	r2, #1
 80095f2:	0030      	movs	r0, r6
 80095f4:	f7fe f89c 	bl	8007730 <StartDMAstream>
 80095f8:	0002      	movs	r2, r0
 80095fa:	2817      	cmp	r0, #23
 80095fc:	d01a      	beq.n	8009634 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80095fe:	0160      	lsls	r0, r4, #5
 8009600:	1b00      	subs	r0, r0, r4
 8009602:	0080      	lsls	r0, r0, #2
 8009604:	1900      	adds	r0, r0, r4
 8009606:	00c0      	lsls	r0, r0, #3
 8009608:	21fa      	movs	r1, #250	; 0xfa
 800960a:	0089      	lsls	r1, r1, #2
 800960c:	f7f6 fd96 	bl	800013c <__udivsi3>
 8009610:	0001      	movs	r1, r0
 8009612:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <SetupDMAStreams+0x1a8>)
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	ab0a      	add	r3, sp, #40	; 0x28
 8009618:	2200      	movs	r2, #0
 800961a:	480a      	ldr	r0, [pc, #40]	; (8009644 <SetupDMAStreams+0x1ac>)
 800961c:	f006 fcc8 	bl	800ffb0 <xTimerCreate>
 8009620:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8009622:	230f      	movs	r3, #15
 8009624:	446b      	add	r3, sp
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	3b01      	subs	r3, #1
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4a06      	ldr	r2, [pc, #24]	; (8009648 <SetupDMAStreams+0x1b0>)
 800962e:	509d      	str	r5, [r3, r2]
 8009630:	e7c4      	b.n	80095bc <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8009632:	2267      	movs	r2, #103	; 0x67
}
 8009634:	0010      	movs	r0, r2
 8009636:	b005      	add	sp, #20
 8009638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 800963a:	2267      	movs	r2, #103	; 0x67
 800963c:	e7fa      	b.n	8009634 <SetupDMAStreams+0x19c>
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	08009481 	.word	0x08009481
 8009644:	08019f60 	.word	0x08019f60
 8009648:	20000ce0 	.word	0x20000ce0
 800964c:	20000878 	.word	0x20000878

08009650 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009650:	b510      	push	{r4, lr}
	switch(port){
 8009652:	2802      	cmp	r0, #2
 8009654:	d00c      	beq.n	8009670 <NotifyMessagingTask+0x20>
 8009656:	2803      	cmp	r0, #3
 8009658:	d012      	beq.n	8009680 <NotifyMessagingTask+0x30>
 800965a:	2801      	cmp	r0, #1
 800965c:	d000      	beq.n	8009660 <NotifyMessagingTask+0x10>
			break;
#endif
		default:
			break;
	}
}
 800965e:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <NotifyMessagingTask+0x40>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	2202      	movs	r2, #2
 8009668:	2100      	movs	r1, #0
 800966a:	f006 fbd1 	bl	800fe10 <xTaskGenericNotify>
			break;
 800966e:	e7f6      	b.n	800965e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P2MsgTaskHandle)
 8009670:	4b08      	ldr	r3, [pc, #32]	; (8009694 <NotifyMessagingTask+0x44>)
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	2202      	movs	r2, #2
 8009678:	2100      	movs	r1, #0
 800967a:	f006 fbc9 	bl	800fe10 <xTaskGenericNotify>
			break;
 800967e:	e7ee      	b.n	800965e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009680:	4b05      	ldr	r3, [pc, #20]	; (8009698 <NotifyMessagingTask+0x48>)
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	2202      	movs	r2, #2
 8009688:	2100      	movs	r1, #0
 800968a:	f006 fbc1 	bl	800fe10 <xTaskGenericNotify>
}
 800968e:	e7e6      	b.n	800965e <NotifyMessagingTask+0xe>
 8009690:	20000cf4 	.word	0x20000cf4
 8009694:	20000cf8 	.word	0x20000cf8
 8009698:	20000cfc 	.word	0x20000cfc

0800969c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800969c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969e:	46de      	mov	lr, fp
 80096a0:	4657      	mov	r7, sl
 80096a2:	464e      	mov	r6, r9
 80096a4:	4645      	mov	r5, r8
 80096a6:	b5e0      	push	{r5, r6, r7, lr}
 80096a8:	b087      	sub	sp, #28
 80096aa:	0005      	movs	r5, r0
 80096ac:	9103      	str	r1, [sp, #12]
 80096ae:	0014      	movs	r4, r2
 80096b0:	4699      	mov	r9, r3
 80096b2:	ab10      	add	r3, sp, #64	; 0x40
 80096b4:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80096b6:	0003      	movs	r3, r0
 80096b8:	4313      	orrs	r3, r2
 80096ba:	d100      	bne.n	80096be <SendMessageFromPort+0x22>
 80096bc:	e1e8      	b.n	8009a90 <SendMessageFromPort+0x3f4>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d14d      	bne.n	800975e <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80096c2:	1c93      	adds	r3, r2, #2
 80096c4:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80096c6:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d900      	bls.n	80096ce <SendMessageFromPort+0x32>
 80096cc:	e162      	b.n	8009994 <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80096ce:	2000      	movs	r0, #0
 80096d0:	f005 fe6e 	bl	800f3b0 <uxTaskPriorityGet>
 80096d4:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80096d6:	2105      	movs	r1, #5
 80096d8:	2000      	movs	r0, #0
 80096da:	f005 fe79 	bl	800f3d0 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80096de:	4bc4      	ldr	r3, [pc, #784]	; (80099f0 <SendMessageFromPort+0x354>)
 80096e0:	2248      	movs	r2, #72	; 0x48
 80096e2:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80096e4:	3212      	adds	r2, #18
 80096e6:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d000      	beq.n	80096f0 <SendMessageFromPort+0x54>
 80096ee:	e1e8      	b.n	8009ac2 <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80096f0:	1e73      	subs	r3, r6, #1
 80096f2:	4ac0      	ldr	r2, [pc, #768]	; (80099f4 <SendMessageFromPort+0x358>)
 80096f4:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80096f6:	4ec0      	ldr	r6, [pc, #768]	; (80099f8 <SendMessageFromPort+0x35c>)
 80096f8:	00d9      	lsls	r1, r3, #3
 80096fa:	1ac9      	subs	r1, r1, r3
 80096fc:	00c9      	lsls	r1, r1, #3
 80096fe:	4bbf      	ldr	r3, [pc, #764]	; (80099fc <SendMessageFromPort+0x360>)
 8009700:	18c9      	adds	r1, r1, r3
 8009702:	003a      	movs	r2, r7
 8009704:	0030      	movs	r0, r6
 8009706:	f00a fa4a 	bl	8013b9e <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 800970a:	3e03      	subs	r6, #3
 800970c:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 800970e:	1cfb      	adds	r3, r7, #3
 8009710:	4698      	mov	r8, r3
 8009712:	001a      	movs	r2, r3
 8009714:	0031      	movs	r1, r6
 8009716:	48ba      	ldr	r0, [pc, #744]	; (8009a00 <SendMessageFromPort+0x364>)
 8009718:	f00a fa41 	bl	8013b9e <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800971c:	b2bf      	uxth	r7, r7
 800971e:	1cf9      	adds	r1, r7, #3
 8009720:	48b7      	ldr	r0, [pc, #732]	; (8009a00 <SendMessageFromPort+0x364>)
 8009722:	f004 f911 	bl	800d948 <CalculateCRC8>
 8009726:	4643      	mov	r3, r8
 8009728:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 800972a:	2238      	movs	r2, #56	; 0x38
 800972c:	2100      	movs	r1, #0
 800972e:	48b4      	ldr	r0, [pc, #720]	; (8009a00 <SendMessageFromPort+0x364>)
 8009730:	f00a fa3e 	bl	8013bb0 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009734:	3402      	adds	r4, #2
 8009736:	b2e4      	uxtb	r4, r4
 8009738:	2c01      	cmp	r4, #1
 800973a:	d800      	bhi.n	800973e <SendMessageFromPort+0xa2>
 800973c:	e14e      	b.n	80099dc <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800973e:	464b      	mov	r3, r9
 8009740:	3b2c      	subs	r3, #44	; 0x2c
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	d800      	bhi.n	800974a <SendMessageFromPort+0xae>
 8009748:	e110      	b.n	800996c <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800974a:	4bae      	ldr	r3, [pc, #696]	; (8009a04 <SendMessageFromPort+0x368>)
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	2600      	movs	r6, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d100      	bne.n	8009756 <SendMessageFromPort+0xba>
 8009754:	e111      	b.n	800997a <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009756:	3704      	adds	r7, #4
 8009758:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 800975a:	4cab      	ldr	r4, [pc, #684]	; (8009a08 <SendMessageFromPort+0x36c>)
 800975c:	e12d      	b.n	80099ba <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <SendMessageFromPort+0xce>
 8009764:	2a00      	cmp	r2, #0
 8009766:	d100      	bne.n	800976a <SendMessageFromPort+0xce>
 8009768:	e194      	b.n	8009a94 <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 800976a:	2000      	movs	r0, #0
 800976c:	f005 fe20 	bl	800f3b0 <uxTaskPriorityGet>
 8009770:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009772:	2105      	movs	r1, #5
 8009774:	2000      	movs	r0, #0
 8009776:	f005 fe2b 	bl	800f3d0 <vTaskPrioritySet>
	message[0] ='H';
 800977a:	4b9d      	ldr	r3, [pc, #628]	; (80099f0 <SendMessageFromPort+0x354>)
 800977c:	2248      	movs	r2, #72	; 0x48
 800977e:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009780:	3212      	adds	r2, #18
 8009782:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009784:	464b      	mov	r3, r9
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0b2      	beq.n	80096f0 <SendMessageFromPort+0x54>
		if(src == 0)
 800978a:	9b03      	ldr	r3, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <SendMessageFromPort+0xfa>
			src =myID;
 8009790:	4b9e      	ldr	r3, [pc, #632]	; (8009a0c <SendMessageFromPort+0x370>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8009796:	4a96      	ldr	r2, [pc, #600]	; (80099f0 <SendMessageFromPort+0x354>)
 8009798:	2300      	movs	r3, #0
 800979a:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 800979c:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80097a2:	4998      	ldr	r1, [pc, #608]	; (8009a04 <SendMessageFromPort+0x368>)
 80097a4:	790b      	ldrb	r3, [r1, #4]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	7848      	ldrb	r0, [r1, #1]
 80097aa:	0080      	lsls	r0, r0, #2
 80097ac:	4303      	orrs	r3, r0
 80097ae:	7809      	ldrb	r1, [r1, #0]
 80097b0:	430b      	orrs	r3, r1
		if(code > 0xFF)
 80097b2:	21ff      	movs	r1, #255	; 0xff
 80097b4:	4549      	cmp	r1, r9
 80097b6:	4189      	sbcs	r1, r1
 80097b8:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80097ba:	0049      	lsls	r1, r1, #1
 80097bc:	430b      	orrs	r3, r1
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 80097c2:	4649      	mov	r1, r9
 80097c4:	7191      	strb	r1, [r2, #6]
 80097c6:	2200      	movs	r2, #0
 80097c8:	4693      	mov	fp, r2
		if(extendCode == true){
 80097ca:	29ff      	cmp	r1, #255	; 0xff
 80097cc:	d904      	bls.n	80097d8 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 80097ce:	0a0a      	lsrs	r2, r1, #8
 80097d0:	4987      	ldr	r1, [pc, #540]	; (80099f0 <SendMessageFromPort+0x354>)
 80097d2:	71ca      	strb	r2, [r1, #7]
			++shift;
 80097d4:	2201      	movs	r2, #1
 80097d6:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80097d8:	2e2e      	cmp	r6, #46	; 0x2e
 80097da:	d932      	bls.n	8009842 <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	4252      	negs	r2, r2
 80097e0:	4313      	orrs	r3, r2
 80097e2:	4a83      	ldr	r2, [pc, #524]	; (80099f0 <SendMessageFromPort+0x354>)
 80097e4:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80097e6:	4b8a      	ldr	r3, [pc, #552]	; (8009a10 <SendMessageFromPort+0x374>)
 80097e8:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80097ee:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80097f0:	465b      	mov	r3, fp
 80097f2:	1ddf      	adds	r7, r3, #7
 80097f4:	003b      	movs	r3, r7
 80097f6:	4694      	mov	ip, r2
 80097f8:	4463      	add	r3, ip
 80097fa:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 80097fc:	4b84      	ldr	r3, [pc, #528]	; (8009a10 <SendMessageFromPort+0x374>)
 80097fe:	881f      	ldrh	r7, [r3, #0]
 8009800:	2f00      	cmp	r7, #0
 8009802:	d02d      	beq.n	8009860 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009804:	0031      	movs	r1, r6
 8009806:	0038      	movs	r0, r7
 8009808:	f7f6 fc98 	bl	800013c <__udivsi3>
 800980c:	b280      	uxth	r0, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d141      	bne.n	8009896 <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009812:	4b77      	ldr	r3, [pc, #476]	; (80099f0 <SendMessageFromPort+0x354>)
 8009814:	795a      	ldrb	r2, [r3, #5]
 8009816:	237f      	movs	r3, #127	; 0x7f
 8009818:	4013      	ands	r3, r2
 800981a:	4a75      	ldr	r2, [pc, #468]	; (80099f0 <SendMessageFromPort+0x354>)
 800981c:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800981e:	4e7d      	ldr	r6, [pc, #500]	; (8009a14 <SendMessageFromPort+0x378>)
 8009820:	8831      	ldrh	r1, [r6, #0]
 8009822:	4b7d      	ldr	r3, [pc, #500]	; (8009a18 <SendMessageFromPort+0x37c>)
 8009824:	18c9      	adds	r1, r1, r3
 8009826:	003a      	movs	r2, r7
 8009828:	9805      	ldr	r0, [sp, #20]
 800982a:	f00a f9b8 	bl	8013b9e <memcpy>
					ptrShift =0;
 800982e:	2300      	movs	r3, #0
 8009830:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8009832:	4a77      	ldr	r2, [pc, #476]	; (8009a10 <SendMessageFromPort+0x374>)
 8009834:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8009836:	1d3b      	adds	r3, r7, #4
 8009838:	445b      	add	r3, fp
 800983a:	b2db      	uxtb	r3, r3
 800983c:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 800983e:	003e      	movs	r6, r7
 8009840:	e7dc      	b.n	80097fc <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009842:	465b      	mov	r3, fp
 8009844:	3307      	adds	r3, #7
 8009846:	486a      	ldr	r0, [pc, #424]	; (80099f0 <SendMessageFromPort+0x354>)
 8009848:	1818      	adds	r0, r3, r0
 800984a:	4b72      	ldr	r3, [pc, #456]	; (8009a14 <SendMessageFromPort+0x378>)
 800984c:	8819      	ldrh	r1, [r3, #0]
 800984e:	4b72      	ldr	r3, [pc, #456]	; (8009a18 <SendMessageFromPort+0x37c>)
 8009850:	18c9      	adds	r1, r1, r3
 8009852:	0032      	movs	r2, r6
 8009854:	f00a f9a3 	bl	8013b9e <memcpy>
			length =numberOfParams + shift + 4;
 8009858:	1d31      	adds	r1, r6, #4
 800985a:	4459      	add	r1, fp
 800985c:	b2cb      	uxtb	r3, r1
 800985e:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8009860:	4b6e      	ldr	r3, [pc, #440]	; (8009a1c <SendMessageFromPort+0x380>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d058      	beq.n	800991a <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8009868:	4b6d      	ldr	r3, [pc, #436]	; (8009a20 <SendMessageFromPort+0x384>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2bff      	cmp	r3, #255	; 0xff
 800986e:	d100      	bne.n	8009872 <SendMessageFromPort+0x1d6>
 8009870:	e114      	b.n	8009a9c <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009872:	4a6c      	ldr	r2, [pc, #432]	; (8009a24 <SendMessageFromPort+0x388>)
 8009874:	7817      	ldrb	r7, [r2, #0]
 8009876:	2f00      	cmp	r7, #0
 8009878:	d076      	beq.n	8009968 <SendMessageFromPort+0x2cc>
 800987a:	2201      	movs	r2, #1
 800987c:	409a      	lsls	r2, r3
 800987e:	4690      	mov	r8, r2
 8009880:	4869      	ldr	r0, [pc, #420]	; (8009a28 <SendMessageFromPort+0x38c>)
 8009882:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009884:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009886:	495a      	ldr	r1, [pc, #360]	; (80099f0 <SendMessageFromPort+0x354>)
 8009888:	468c      	mov	ip, r1
 800988a:	44b4      	add	ip, r6
 800988c:	9505      	str	r5, [sp, #20]
 800988e:	4645      	mov	r5, r8
 8009890:	46a0      	mov	r8, r4
 8009892:	465c      	mov	r4, fp
 8009894:	e017      	b.n	80098c6 <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009896:	9600      	str	r6, [sp, #0]
 8009898:	464b      	mov	r3, r9
 800989a:	0022      	movs	r2, r4
 800989c:	9903      	ldr	r1, [sp, #12]
 800989e:	0028      	movs	r0, r5
 80098a0:	f7ff fefc 	bl	800969c <SendMessageFromPort>
					osDelay(10);
 80098a4:	200a      	movs	r0, #10
 80098a6:	f004 fe94 	bl	800e5d2 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80098aa:	4a59      	ldr	r2, [pc, #356]	; (8009a10 <SendMessageFromPort+0x374>)
 80098ac:	8813      	ldrh	r3, [r2, #0]
 80098ae:	1b9b      	subs	r3, r3, r6
 80098b0:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80098b2:	4a58      	ldr	r2, [pc, #352]	; (8009a14 <SendMessageFromPort+0x378>)
 80098b4:	8813      	ldrh	r3, [r2, #0]
 80098b6:	18f3      	adds	r3, r6, r3
 80098b8:	8013      	strh	r3, [r2, #0]
 80098ba:	e79f      	b.n	80097fc <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098bc:	3301      	adds	r3, #1
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3002      	adds	r0, #2
 80098c2:	42bb      	cmp	r3, r7
 80098c4:	d80e      	bhi.n	80098e4 <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 80098c6:	8801      	ldrh	r1, [r0, #0]
 80098c8:	420d      	tst	r5, r1
 80098ca:	d0f7      	beq.n	80098bc <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 80098cc:	3201      	adds	r2, #1
 80098ce:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80098d0:	18b1      	adds	r1, r6, r2
 80098d2:	3101      	adds	r1, #1
 80098d4:	292d      	cmp	r1, #45	; 0x2d
 80098d6:	dd00      	ble.n	80098da <SendMessageFromPort+0x23e>
 80098d8:	e0de      	b.n	8009a98 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80098da:	4661      	mov	r1, ip
 80098dc:	1889      	adds	r1, r1, r2
 80098de:	1909      	adds	r1, r1, r4
 80098e0:	718b      	strb	r3, [r1, #6]
 80098e2:	e7eb      	b.n	80098bc <SendMessageFromPort+0x220>
 80098e4:	46a3      	mov	fp, r4
 80098e6:	9d05      	ldr	r5, [sp, #20]
 80098e8:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80098ea:	465b      	mov	r3, fp
 80098ec:	3307      	adds	r3, #7
 80098ee:	199b      	adds	r3, r3, r6
 80098f0:	189b      	adds	r3, r3, r2
 80098f2:	493f      	ldr	r1, [pc, #252]	; (80099f0 <SendMessageFromPort+0x354>)
 80098f4:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098f6:	18b1      	adds	r1, r6, r2
 80098f8:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80098fa:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098fc:	292d      	cmp	r1, #45	; 0x2d
 80098fe:	dc49      	bgt.n	8009994 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009900:	484a      	ldr	r0, [pc, #296]	; (8009a2c <SendMessageFromPort+0x390>)
 8009902:	7801      	ldrb	r1, [r0, #0]
 8009904:	3101      	adds	r1, #1
 8009906:	b2c9      	uxtb	r1, r1
 8009908:	7001      	strb	r1, [r0, #0]
 800990a:	4839      	ldr	r0, [pc, #228]	; (80099f0 <SendMessageFromPort+0x354>)
 800990c:	18c3      	adds	r3, r0, r3
 800990e:	7059      	strb	r1, [r3, #1]
 8009910:	4651      	mov	r1, sl
 8009912:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009914:	188a      	adds	r2, r1, r2
 8009916:	b2d3      	uxtb	r3, r2
 8009918:	469a      	mov	sl, r3
	message[2] =length;
 800991a:	4b35      	ldr	r3, [pc, #212]	; (80099f0 <SendMessageFromPort+0x354>)
 800991c:	4698      	mov	r8, r3
 800991e:	4652      	mov	r2, sl
 8009920:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009922:	1cd6      	adds	r6, r2, #3
 8009924:	0032      	movs	r2, r6
 8009926:	4641      	mov	r1, r8
 8009928:	4835      	ldr	r0, [pc, #212]	; (8009a00 <SendMessageFromPort+0x364>)
 800992a:	f00a f938 	bl	8013b9e <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800992e:	4653      	mov	r3, sl
 8009930:	b29f      	uxth	r7, r3
 8009932:	0031      	movs	r1, r6
 8009934:	4832      	ldr	r0, [pc, #200]	; (8009a00 <SendMessageFromPort+0x364>)
 8009936:	f004 f807 	bl	800d948 <CalculateCRC8>
 800993a:	4643      	mov	r3, r8
 800993c:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 800993e:	2238      	movs	r2, #56	; 0x38
 8009940:	2100      	movs	r1, #0
 8009942:	482f      	ldr	r0, [pc, #188]	; (8009a00 <SendMessageFromPort+0x364>)
 8009944:	f00a f934 	bl	8013bb0 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009948:	3402      	adds	r4, #2
 800994a:	b2e4      	uxtb	r4, r4
 800994c:	2c01      	cmp	r4, #1
 800994e:	d900      	bls.n	8009952 <SendMessageFromPort+0x2b6>
 8009950:	e6f5      	b.n	800973e <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009952:	9803      	ldr	r0, [sp, #12]
 8009954:	f7fa f820 	bl	8003998 <FindBroadcastRoutes>
 8009958:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800995a:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800995c:	4b34      	ldr	r3, [pc, #208]	; (8009a30 <SendMessageFromPort+0x394>)
 800995e:	4699      	mov	r9, r3
 8009960:	4b2a      	ldr	r3, [pc, #168]	; (8009a0c <SendMessageFromPort+0x370>)
 8009962:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009964:	9503      	str	r5, [sp, #12]
 8009966:	e074      	b.n	8009a52 <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8009968:	2200      	movs	r2, #0
 800996a:	e7be      	b.n	80098ea <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 800996c:	1d3a      	adds	r2, r7, #4
 800996e:	b292      	uxth	r2, r2
 8009970:	2332      	movs	r3, #50	; 0x32
 8009972:	491f      	ldr	r1, [pc, #124]	; (80099f0 <SendMessageFromPort+0x354>)
 8009974:	0028      	movs	r0, r5
 8009976:	f004 fd49 	bl	800e40c <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 800997a:	2300      	movs	r3, #0
 800997c:	4a22      	ldr	r2, [pc, #136]	; (8009a08 <SendMessageFromPort+0x36c>)
 800997e:	7013      	strb	r3, [r2, #0]
 8009980:	4a2c      	ldr	r2, [pc, #176]	; (8009a34 <SendMessageFromPort+0x398>)
 8009982:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8009984:	9904      	ldr	r1, [sp, #16]
 8009986:	2000      	movs	r0, #0
 8009988:	f005 fd22 	bl	800f3d0 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <SendMessageFromPort+0x39c>)
 800998e:	2202      	movs	r2, #2
 8009990:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009992:	2000      	movs	r0, #0
}
 8009994:	b007      	add	sp, #28
 8009996:	bc3c      	pop	{r2, r3, r4, r5}
 8009998:	4690      	mov	r8, r2
 800999a:	4699      	mov	r9, r3
 800999c:	46a2      	mov	sl, r4
 800999e:	46ab      	mov	fp, r5
 80099a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80099a2:	2332      	movs	r3, #50	; 0x32
 80099a4:	003a      	movs	r2, r7
 80099a6:	4912      	ldr	r1, [pc, #72]	; (80099f0 <SendMessageFromPort+0x354>)
 80099a8:	0028      	movs	r0, r5
 80099aa:	f004 fd2f 	bl	800e40c <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80099ae:	3601      	adds	r6, #1
 80099b0:	b2f6      	uxtb	r6, r6
 80099b2:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <SendMessageFromPort+0x368>)
 80099b4:	88db      	ldrh	r3, [r3, #6]
 80099b6:	42b3      	cmp	r3, r6
 80099b8:	d9df      	bls.n	800997a <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80099ba:	2332      	movs	r3, #50	; 0x32
 80099bc:	003a      	movs	r2, r7
 80099be:	490c      	ldr	r1, [pc, #48]	; (80099f0 <SendMessageFromPort+0x354>)
 80099c0:	0028      	movs	r0, r5
 80099c2:	f004 fd23 	bl	800e40c <writePxDMAMutex>
				osDelay(200);
 80099c6:	20c8      	movs	r0, #200	; 0xc8
 80099c8:	f004 fe03 	bl	800e5d2 <osDelay>
				if(ACK_FLAG == true)
 80099cc:	7823      	ldrb	r3, [r4, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1d3      	bne.n	800997a <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <SendMessageFromPort+0x398>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0e9      	beq.n	80099ae <SendMessageFromPort+0x312>
 80099da:	e7e2      	b.n	80099a2 <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80099dc:	464b      	mov	r3, r9
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1b7      	bne.n	8009952 <SendMessageFromPort+0x2b6>
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1b4      	bne.n	8009952 <SendMessageFromPort+0x2b6>
			src =message[4];
 80099e8:	4b01      	ldr	r3, [pc, #4]	; (80099f0 <SendMessageFromPort+0x354>)
 80099ea:	791b      	ldrb	r3, [r3, #4]
 80099ec:	9303      	str	r3, [sp, #12]
 80099ee:	e7b0      	b.n	8009952 <SendMessageFromPort+0x2b6>
 80099f0:	20000694 	.word	0x20000694
 80099f4:	200006cc 	.word	0x200006cc
 80099f8:	20000697 	.word	0x20000697
 80099fc:	2000054c 	.word	0x2000054c
 8009a00:	20000c90 	.word	0x20000c90
 8009a04:	200061fc 	.word	0x200061fc
 8009a08:	200002b4 	.word	0x200002b4
 8009a0c:	2000080e 	.word	0x2000080e
 8009a10:	20000e6a 	.word	0x20000e6a
 8009a14:	20000e68 	.word	0x20000e68
 8009a18:	200006d0 	.word	0x200006d0
 8009a1c:	200002b5 	.word	0x200002b5
 8009a20:	20000031 	.word	0x20000031
 8009a24:	20000030 	.word	0x20000030
 8009a28:	2000065c 	.word	0x2000065c
 8009a2c:	200004f8 	.word	0x200004f8
 8009a30:	200004fc 	.word	0x200004fc
 8009a34:	20000884 	.word	0x20000884
 8009a38:	20000890 	.word	0x20000890
			rejected_FLAG=false;
 8009a3c:	4b23      	ldr	r3, [pc, #140]	; (8009acc <SendMessageFromPort+0x430>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8009a42:	200a      	movs	r0, #10
 8009a44:	f004 fb46 	bl	800e0d4 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009a48:	3401      	adds	r4, #1
 8009a4a:	b2e4      	uxtb	r4, r4
 8009a4c:	3601      	adds	r6, #1
 8009a4e:	2c04      	cmp	r4, #4
 8009a50:	d098      	beq.n	8009984 <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009a52:	4643      	mov	r3, r8
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	464a      	mov	r2, r9
 8009a5c:	5a9b      	ldrh	r3, [r3, r2]
 8009a5e:	4133      	asrs	r3, r6
 8009a60:	07db      	lsls	r3, r3, #31
 8009a62:	d5eb      	bpl.n	8009a3c <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009a64:	1d3d      	adds	r5, r7, #4
 8009a66:	b2ad      	uxth	r5, r5
 8009a68:	2332      	movs	r3, #50	; 0x32
 8009a6a:	002a      	movs	r2, r5
 8009a6c:	4918      	ldr	r1, [pc, #96]	; (8009ad0 <SendMessageFromPort+0x434>)
 8009a6e:	0020      	movs	r0, r4
 8009a70:	f004 fccc 	bl	800e40c <writePxDMAMutex>
				osDelay(200);
 8009a74:	20c8      	movs	r0, #200	; 0xc8
 8009a76:	f004 fdac 	bl	800e5d2 <osDelay>
				if(rejected_FLAG == true)
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <SendMessageFromPort+0x430>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0dc      	beq.n	8009a3c <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009a82:	2332      	movs	r3, #50	; 0x32
 8009a84:	002a      	movs	r2, r5
 8009a86:	4912      	ldr	r1, [pc, #72]	; (8009ad0 <SendMessageFromPort+0x434>)
 8009a88:	9803      	ldr	r0, [sp, #12]
 8009a8a:	f004 fcbf 	bl	800e40c <writePxDMAMutex>
 8009a8e:	e7d5      	b.n	8009a3c <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8009a90:	2067      	movs	r0, #103	; 0x67
 8009a92:	e77f      	b.n	8009994 <SendMessageFromPort+0x2f8>
 8009a94:	2067      	movs	r0, #103	; 0x67
 8009a96:	e77d      	b.n	8009994 <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a98:	2069      	movs	r0, #105	; 0x69
 8009a9a:	e77b      	b.n	8009994 <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009a9c:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a9e:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009aa0:	2b2d      	cmp	r3, #45	; 0x2d
 8009aa2:	dd00      	ble.n	8009aa6 <SendMessageFromPort+0x40a>
 8009aa4:	e776      	b.n	8009994 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 8009aa6:	4a0b      	ldr	r2, [pc, #44]	; (8009ad4 <SendMessageFromPort+0x438>)
 8009aa8:	7813      	ldrb	r3, [r2, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	7013      	strb	r3, [r2, #0]
 8009ab0:	4a07      	ldr	r2, [pc, #28]	; (8009ad0 <SendMessageFromPort+0x434>)
 8009ab2:	1992      	adds	r2, r2, r6
 8009ab4:	445a      	add	r2, fp
 8009ab6:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8009ab8:	4651      	mov	r1, sl
 8009aba:	3101      	adds	r1, #1
 8009abc:	b2cb      	uxtb	r3, r1
 8009abe:	469a      	mov	sl, r3
 8009ac0:	e72b      	b.n	800991a <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d100      	bne.n	8009aca <SendMessageFromPort+0x42e>
 8009ac8:	e612      	b.n	80096f0 <SendMessageFromPort+0x54>
 8009aca:	e664      	b.n	8009796 <SendMessageFromPort+0xfa>
 8009acc:	20000884 	.word	0x20000884
 8009ad0:	20000694 	.word	0x20000694
 8009ad4:	200004f8 	.word	0x200004f8

08009ad8 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009ad8:	b530      	push	{r4, r5, lr}
 8009ada:	b083      	sub	sp, #12
 8009adc:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <ForwardReceivedMessage+0x34>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009ae4:	1e42      	subs	r2, r0, #1
 8009ae6:	00d3      	lsls	r3, r2, #3
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <ForwardReceivedMessage+0x38>)
 8009aee:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009af0:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <ForwardReceivedMessage+0x3c>)
 8009af2:	7818      	ldrb	r0, [r3, #0]
 8009af4:	0021      	movs	r1, r4
 8009af6:	f7fa f81d 	bl	8003b34 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009afa:	9500      	str	r5, [sp, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	0022      	movs	r2, r4
 8009b00:	2100      	movs	r1, #0
 8009b02:	f7ff fdcb 	bl	800969c <SendMessageFromPort>
}
 8009b06:	2000      	movs	r0, #0
 8009b08:	b003      	add	sp, #12
 8009b0a:	bd30      	pop	{r4, r5, pc}
 8009b0c:	200002b5 	.word	0x200002b5
 8009b10:	2000054c 	.word	0x2000054c
 8009b14:	2000080e 	.word	0x2000080e

08009b18 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009b18:	b500      	push	{lr}
 8009b1a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <BroadcastReceivedMessage+0x38>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <BroadcastReceivedMessage+0x3c>)
 8009b24:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b26:	28ff      	cmp	r0, #255	; 0xff
 8009b28:	d009      	beq.n	8009b3e <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009b2a:	9100      	str	r1, [sp, #0]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	22fe      	movs	r2, #254	; 0xfe
 8009b30:	2100      	movs	r1, #0
 8009b32:	2000      	movs	r0, #0
 8009b34:	f7ff fdb2 	bl	800969c <SendMessageFromPort>
}
 8009b38:	2000      	movs	r0, #0
 8009b3a:	b003      	add	sp, #12
 8009b3c:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009b3e:	9100      	str	r1, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	32ff      	adds	r2, #255	; 0xff
 8009b44:	2100      	movs	r1, #0
 8009b46:	2000      	movs	r0, #0
 8009b48:	f7ff fda8 	bl	800969c <SendMessageFromPort>
 8009b4c:	e7f4      	b.n	8009b38 <BroadcastReceivedMessage+0x20>
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	200002b5 	.word	0x200002b5
 8009b54:	20000031 	.word	0x20000031

08009b58 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009b58:	b530      	push	{r4, r5, lr}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <BroadcastMessage+0x44>)
 8009b60:	2501      	movs	r5, #1
 8009b62:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <BroadcastMessage+0x48>)
 8009b66:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b68:	29ff      	cmp	r1, #255	; 0xff
 8009b6a:	d00e      	beq.n	8009b8a <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009b6c:	9400      	str	r4, [sp, #0]
 8009b6e:	0013      	movs	r3, r2
 8009b70:	22fe      	movs	r2, #254	; 0xfe
 8009b72:	0001      	movs	r1, r0
 8009b74:	2000      	movs	r0, #0
 8009b76:	f7ff fd91 	bl	800969c <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009b7a:	0022      	movs	r2, r4
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4809      	ldr	r0, [pc, #36]	; (8009ba4 <BroadcastMessage+0x4c>)
 8009b80:	f00a f816 	bl	8013bb0 <memset>
}
 8009b84:	2000      	movs	r0, #0
 8009b86:	b003      	add	sp, #12
 8009b88:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009b8a:	9400      	str	r4, [sp, #0]
 8009b8c:	0013      	movs	r3, r2
 8009b8e:	22ff      	movs	r2, #255	; 0xff
 8009b90:	0001      	movs	r1, r0
 8009b92:	2000      	movs	r0, #0
 8009b94:	f7ff fd82 	bl	800969c <SendMessageFromPort>
 8009b98:	e7ef      	b.n	8009b7a <BroadcastMessage+0x22>
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	200002b5 	.word	0x200002b5
 8009ba0:	20000031 	.word	0x20000031
 8009ba4:	200006d0 	.word	0x200006d0

08009ba8 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	b083      	sub	sp, #12
 8009bac:	0004      	movs	r4, r0
 8009bae:	000e      	movs	r6, r1
 8009bb0:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009bb2:	28ff      	cmp	r0, #255	; 0xff
 8009bb4:	d012      	beq.n	8009bdc <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009bb6:	4f0d      	ldr	r7, [pc, #52]	; (8009bec <SendMessageToModule+0x44>)
 8009bb8:	7838      	ldrb	r0, [r7, #0]
 8009bba:	0021      	movs	r1, r4
 8009bbc:	f7f9 ffba 	bl	8003b34 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009bc0:	7839      	ldrb	r1, [r7, #0]
 8009bc2:	9500      	str	r5, [sp, #0]
 8009bc4:	0033      	movs	r3, r6
 8009bc6:	0022      	movs	r2, r4
 8009bc8:	f7ff fd68 	bl	800969c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009bcc:	002a      	movs	r2, r5
 8009bce:	2100      	movs	r1, #0
 8009bd0:	4807      	ldr	r0, [pc, #28]	; (8009bf0 <SendMessageToModule+0x48>)
 8009bd2:	f009 ffed 	bl	8013bb0 <memset>
}
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	b003      	add	sp, #12
 8009bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009bdc:	4b03      	ldr	r3, [pc, #12]	; (8009bec <SendMessageToModule+0x44>)
 8009bde:	7818      	ldrb	r0, [r3, #0]
 8009be0:	0013      	movs	r3, r2
 8009be2:	000a      	movs	r2, r1
 8009be4:	21ff      	movs	r1, #255	; 0xff
 8009be6:	f7ff ffb7 	bl	8009b58 <BroadcastMessage>
 8009bea:	e7f4      	b.n	8009bd6 <SendMessageToModule+0x2e>
 8009bec:	2000080e 	.word	0x2000080e
 8009bf0:	200006d0 	.word	0x200006d0

08009bf4 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf6:	46de      	mov	lr, fp
 8009bf8:	4657      	mov	r7, sl
 8009bfa:	464e      	mov	r6, r9
 8009bfc:	4645      	mov	r5, r8
 8009bfe:	b5e0      	push	{r5, r6, r7, lr}
 8009c00:	b091      	sub	sp, #68	; 0x44
 8009c02:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c04:	000c      	movs	r4, r1
 8009c06:	9106      	str	r1, [sp, #24]
 8009c08:	0015      	movs	r5, r2
 8009c0a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c0c:	001e      	movs	r6, r3
 8009c0e:	ab1a      	add	r3, sp, #104	; 0x68
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	4698      	mov	r8, r3
 8009c14:	ab1d      	add	r3, sp, #116	; 0x74
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009c1a:	4b5a      	ldr	r3, [pc, #360]	; (8009d84 <StartScastDMAStream+0x190>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	428b      	cmp	r3, r1
 8009c20:	d11d      	bne.n	8009c5e <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c24:	0e1b      	lsrs	r3, r3, #24
 8009c26:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009c28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8009c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c3a:	0e1b      	lsrs	r3, r3, #24
 8009c3c:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009c3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c40:	0c1b      	lsrs	r3, r3, #16
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009c46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	469b      	mov	fp, r3
 8009c4e:	4d4e      	ldr	r5, [pc, #312]	; (8009d88 <StartScastDMAStream+0x194>)
 8009c50:	231a      	movs	r3, #26
 8009c52:	4699      	mov	r9, r3
 8009c54:	44a9      	add	r9, r5
				temp2 =dstP;
 8009c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c58:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c5a:	4c4c      	ldr	r4, [pc, #304]	; (8009d8c <StartScastDMAStream+0x198>)
 8009c5c:	e05c      	b.n	8009d18 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c5e:	4b4b      	ldr	r3, [pc, #300]	; (8009d8c <StartScastDMAStream+0x198>)
 8009c60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c62:	0e12      	lsrs	r2, r2, #24
 8009c64:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009c66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c68:	0c12      	lsrs	r2, r2, #16
 8009c6a:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009c6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c6e:	0a12      	lsrs	r2, r2, #8
 8009c70:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009c72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c74:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c78:	0e12      	lsrs	r2, r2, #24
 8009c7a:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009c7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c7e:	0c12      	lsrs	r2, r2, #16
 8009c80:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009c82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c84:	0a12      	lsrs	r2, r2, #8
 8009c86:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009c88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c8a:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009c90:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009c92:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009c94:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009c96:	4652      	mov	r2, sl
 8009c98:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c9a:	220d      	movs	r2, #13
 8009c9c:	211c      	movs	r1, #28
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	f7ff ff82 	bl	8009ba8 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	b011      	add	sp, #68	; 0x44
 8009ca8:	bc3c      	pop	{r2, r3, r4, r5}
 8009caa:	4690      	mov	r8, r2
 8009cac:	4699      	mov	r9, r3
 8009cae:	46a2      	mov	sl, r4
 8009cb0:	46ab      	mov	fp, r5
 8009cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009cb4:	9906      	ldr	r1, [sp, #24]
 8009cb6:	f7f9 ff3d 	bl	8003b34 <FindRoute>
 8009cba:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8009cbc:	0031      	movs	r1, r6
 8009cbe:	9806      	ldr	r0, [sp, #24]
 8009cc0:	f7f9 ff38 	bl	8003b34 <FindRoute>
			if(route[i] == dstM){
 8009cc4:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8009cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8009cc8:	42b0      	cmp	r0, r6
 8009cca:	d134      	bne.n	8009d36 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009ccc:	9a08      	ldr	r2, [sp, #32]
 8009cce:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd2:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd6:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009cd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009cda:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cde:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce2:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009ce4:	465a      	mov	r2, fp
 8009ce6:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009ce8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cea:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009cec:	4642      	mov	r2, r8
 8009cee:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009cf0:	9a07      	ldr	r2, [sp, #28]
 8009cf2:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009cf4:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009cf6:	4653      	mov	r3, sl
 8009cf8:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009cfa:	0031      	movs	r1, r6
 8009cfc:	9806      	ldr	r0, [sp, #24]
 8009cfe:	f7f9 ff19 	bl	8003b34 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009d02:	7878      	ldrb	r0, [r7, #1]
 8009d04:	220c      	movs	r2, #12
 8009d06:	211b      	movs	r1, #27
 8009d08:	f7ff ff4e 	bl	8009ba8 <SendMessageToModule>
			osDelay(10);
 8009d0c:	200a      	movs	r0, #10
 8009d0e:	f004 fc60 	bl	800e5d2 <osDelay>
 8009d12:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009d14:	454d      	cmp	r5, r9
 8009d16:	d013      	beq.n	8009d40 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009d18:	0031      	movs	r1, r6
 8009d1a:	9806      	ldr	r0, [sp, #24]
 8009d1c:	f7f9 ff0a 	bl	8003b34 <FindRoute>
 8009d20:	002f      	movs	r7, r5
		if(route[i]){
 8009d22:	7868      	ldrb	r0, [r5, #1]
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0f4      	beq.n	8009d12 <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009d28:	78a9      	ldrb	r1, [r5, #2]
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	d0c2      	beq.n	8009cb4 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009d2e:	f7f9 ff01 	bl	8003b34 <FindRoute>
 8009d32:	9007      	str	r0, [sp, #28]
 8009d34:	e7c2      	b.n	8009cbc <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009d36:	7839      	ldrb	r1, [r7, #0]
 8009d38:	f7f9 fefc 	bl	8003b34 <FindRoute>
 8009d3c:	0003      	movs	r3, r0
 8009d3e:	e7c5      	b.n	8009ccc <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8009d40:	9806      	ldr	r0, [sp, #24]
 8009d42:	42b0      	cmp	r0, r6
 8009d44:	d118      	bne.n	8009d78 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d50:	4640      	mov	r0, r8
 8009d52:	f7ff fba1 	bl	8009498 <SetupDMAStreams>
	if(stored){
 8009d56:	4653      	mov	r3, sl
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0a3      	beq.n	8009ca4 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d6e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d70:	4640      	mov	r0, r8
 8009d72:	f7f9 fc6b 	bl	800364c <SaveEEstreams>
 8009d76:	e795      	b.n	8009ca4 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009d78:	0031      	movs	r1, r6
 8009d7a:	f7f9 fedb 	bl	8003b34 <FindRoute>
 8009d7e:	900e      	str	r0, [sp, #56]	; 0x38
 8009d80:	e7e1      	b.n	8009d46 <StartScastDMAStream+0x152>
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	2000080e 	.word	0x2000080e
 8009d88:	2000638f 	.word	0x2000638f
 8009d8c:	200006d0 	.word	0x200006d0

08009d90 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d92:	46de      	mov	lr, fp
 8009d94:	4657      	mov	r7, sl
 8009d96:	464e      	mov	r6, r9
 8009d98:	4645      	mov	r5, r8
 8009d9a:	b5e0      	push	{r5, r6, r7, lr}
 8009d9c:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009d9e:	4bd2      	ldr	r3, [pc, #840]	; (800a0e8 <BackEndTask+0x358>)
 8009da0:	3b70      	subs	r3, #112	; 0x70
 8009da2:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009da4:	4bd0      	ldr	r3, [pc, #832]	; (800a0e8 <BackEndTask+0x358>)
 8009da6:	3b70      	subs	r3, #112	; 0x70
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	e201      	b.n	800a1b0 <BackEndTask+0x420>
 8009dac:	1eab      	subs	r3, r5, #2
 8009dae:	4699      	mov	r9, r3
 8009db0:	4bce      	ldr	r3, [pc, #824]	; (800a0ec <BackEndTask+0x35c>)
 8009db2:	444b      	add	r3, r9
 8009db4:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009db6:	7819      	ldrb	r1, [r3, #0]
 8009db8:	29bf      	cmp	r1, #191	; 0xbf
 8009dba:	dc17      	bgt.n	8009dec <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009dbc:	4bcc      	ldr	r3, [pc, #816]	; (800a0f0 <BackEndTask+0x360>)
 8009dbe:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009dc0:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e004      	b.n	8009dd0 <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009dc6:	2bbf      	cmp	r3, #191	; 0xbf
 8009dc8:	d02c      	beq.n	8009e24 <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009dca:	3301      	adds	r3, #1
 8009dcc:	2bc0      	cmp	r3, #192	; 0xc0
 8009dce:	d00a      	beq.n	8009de6 <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009dd0:	2bbe      	cmp	r3, #190	; 0xbe
 8009dd2:	dcf8      	bgt.n	8009dc6 <BackEndTask+0x36>
 8009dd4:	5ce2      	ldrb	r2, [r4, r3]
 8009dd6:	2a48      	cmp	r2, #72	; 0x48
 8009dd8:	d1f5      	bne.n	8009dc6 <BackEndTask+0x36>
 8009dda:	18e2      	adds	r2, r4, r3
 8009ddc:	7852      	ldrb	r2, [r2, #1]
 8009dde:	2a5a      	cmp	r2, #90	; 0x5a
 8009de0:	d1f1      	bne.n	8009dc6 <BackEndTask+0x36>
						packetStart =i;
 8009de2:	4ac4      	ldr	r2, [pc, #784]	; (800a0f4 <BackEndTask+0x364>)
 8009de4:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d000      	beq.n	8009dec <BackEndTask+0x5c>
 8009dea:	e1c1      	b.n	800a170 <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 8009dec:	4ac2      	ldr	r2, [pc, #776]	; (800a0f8 <BackEndTask+0x368>)
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009df4:	4bbf      	ldr	r3, [pc, #764]	; (800a0f4 <BackEndTask+0x364>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2bbd      	cmp	r3, #189	; 0xbd
 8009dfa:	d054      	beq.n	8009ea6 <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009dfc:	2bbe      	cmp	r3, #190	; 0xbe
 8009dfe:	d100      	bne.n	8009e02 <BackEndTask+0x72>
 8009e00:	e0bb      	b.n	8009f7a <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009e02:	2bbf      	cmp	r3, #191	; 0xbf
 8009e04:	d100      	bne.n	8009e08 <BackEndTask+0x78>
 8009e06:	e0bf      	b.n	8009f88 <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009e08:	464a      	mov	r2, r9
 8009e0a:	0052      	lsls	r2, r2, #1
 8009e0c:	444a      	add	r2, r9
 8009e0e:	0191      	lsls	r1, r2, #6
 8009e10:	4aba      	ldr	r2, [pc, #744]	; (800a0fc <BackEndTask+0x36c>)
 8009e12:	1852      	adds	r2, r2, r1
 8009e14:	18d2      	adds	r2, r2, r3
 8009e16:	7891      	ldrb	r1, [r2, #2]
 8009e18:	4ab9      	ldr	r2, [pc, #740]	; (800a100 <BackEndTask+0x370>)
 8009e1a:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8009e1c:	3303      	adds	r3, #3
 8009e1e:	4ab9      	ldr	r2, [pc, #740]	; (800a104 <BackEndTask+0x374>)
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	e048      	b.n	8009eb6 <BackEndTask+0x126>
 8009e24:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e26:	0023      	movs	r3, r4
 8009e28:	33bf      	adds	r3, #191	; 0xbf
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b48      	cmp	r3, #72	; 0x48
 8009e2e:	d004      	beq.n	8009e3a <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d000      	beq.n	8009e36 <BackEndTask+0xa6>
 8009e34:	e19c      	b.n	800a170 <BackEndTask+0x3e0>
 8009e36:	4660      	mov	r0, ip
 8009e38:	e00c      	b.n	8009e54 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e3a:	7823      	ldrb	r3, [r4, #0]
 8009e3c:	2b5a      	cmp	r3, #90	; 0x5a
 8009e3e:	d1f7      	bne.n	8009e30 <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009e40:	4bac      	ldr	r3, [pc, #688]	; (800a0f4 <BackEndTask+0x364>)
 8009e42:	22bf      	movs	r2, #191	; 0xbf
 8009e44:	601a      	str	r2, [r3, #0]
						break;
 8009e46:	e7ce      	b.n	8009de6 <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e48:	29bf      	cmp	r1, #191	; 0xbf
 8009e4a:	d027      	beq.n	8009e9c <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e4c:	3101      	adds	r1, #1
 8009e4e:	29c0      	cmp	r1, #192	; 0xc0
 8009e50:	d100      	bne.n	8009e54 <BackEndTask+0xc4>
 8009e52:	e18d      	b.n	800a170 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e54:	5c43      	ldrb	r3, [r0, r1]
 8009e56:	2b0d      	cmp	r3, #13
 8009e58:	d1f8      	bne.n	8009e4c <BackEndTask+0xbc>
 8009e5a:	29be      	cmp	r1, #190	; 0xbe
 8009e5c:	dcf4      	bgt.n	8009e48 <BackEndTask+0xb8>
 8009e5e:	1842      	adds	r2, r0, r1
 8009e60:	7853      	ldrb	r3, [r2, #1]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f0      	bne.n	8009e48 <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 8009e66:	464b      	mov	r3, r9
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	444b      	add	r3, r9
 8009e6c:	019b      	lsls	r3, r3, #6
 8009e6e:	4aa3      	ldr	r2, [pc, #652]	; (800a0fc <BackEndTask+0x36c>)
 8009e70:	18d3      	adds	r3, r2, r3
 8009e72:	2200      	movs	r2, #0
 8009e74:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009e76:	3101      	adds	r1, #1
 8009e78:	4653      	mov	r3, sl
 8009e7a:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009e7c:	4ba2      	ldr	r3, [pc, #648]	; (800a108 <BackEndTask+0x378>)
 8009e7e:	7819      	ldrb	r1, [r3, #0]
 8009e80:	48a2      	ldr	r0, [pc, #648]	; (800a10c <BackEndTask+0x37c>)
 8009e82:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009e84:	3203      	adds	r2, #3
 8009e86:	4641      	mov	r1, r8
 8009e88:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8009e8a:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009e8c:	4ba0      	ldr	r3, [pc, #640]	; (800a110 <BackEndTask+0x380>)
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	3a01      	subs	r2, #1
 8009e94:	2100      	movs	r1, #0
 8009e96:	f005 ffbb 	bl	800fe10 <xTaskGenericNotify>
										break;
 8009e9a:	e169      	b.n	800a170 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e9c:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 8009e9e:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1a0      	bne.n	8009de6 <BackEndTask+0x56>
 8009ea4:	e7df      	b.n	8009e66 <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009ea6:	0023      	movs	r3, r4
 8009ea8:	33bf      	adds	r3, #191	; 0xbf
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	4b94      	ldr	r3, [pc, #592]	; (800a100 <BackEndTask+0x370>)
 8009eae:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8009eb0:	4b94      	ldr	r3, [pc, #592]	; (800a104 <BackEndTask+0x374>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009eb6:	4b92      	ldr	r3, [pc, #584]	; (800a100 <BackEndTask+0x370>)
 8009eb8:	681e      	ldr	r6, [r3, #0]
 8009eba:	3603      	adds	r6, #3
 8009ebc:	4b8d      	ldr	r3, [pc, #564]	; (800a0f4 <BackEndTask+0x364>)
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009ec2:	2bbf      	cmp	r3, #191	; 0xbf
 8009ec4:	dc00      	bgt.n	8009ec8 <BackEndTask+0x138>
 8009ec6:	e179      	b.n	800a1bc <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009ec8:	3bc0      	subs	r3, #192	; 0xc0
 8009eca:	4a92      	ldr	r2, [pc, #584]	; (800a114 <BackEndTask+0x384>)
 8009ecc:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 8009ece:	4b91      	ldr	r3, [pc, #580]	; (800a114 <BackEndTask+0x384>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	d100      	bne.n	8009ed8 <BackEndTask+0x148>
 8009ed6:	e129      	b.n	800a12c <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 8009ed8:	da5d      	bge.n	8009f96 <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009eda:	006b      	lsls	r3, r5, #1
 8009edc:	195b      	adds	r3, r3, r5
 8009ede:	019b      	lsls	r3, r3, #6
 8009ee0:	3b81      	subs	r3, #129	; 0x81
 8009ee2:	3bff      	subs	r3, #255	; 0xff
 8009ee4:	1859      	adds	r1, r3, r1
 8009ee6:	4b85      	ldr	r3, [pc, #532]	; (800a0fc <BackEndTask+0x36c>)
 8009ee8:	18c9      	adds	r1, r1, r3
 8009eea:	0032      	movs	r2, r6
 8009eec:	488a      	ldr	r0, [pc, #552]	; (800a118 <BackEndTask+0x388>)
 8009eee:	f009 fe56 	bl	8013b9e <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009ef2:	4b83      	ldr	r3, [pc, #524]	; (800a100 <BackEndTask+0x370>)
 8009ef4:	6819      	ldr	r1, [r3, #0]
 8009ef6:	3103      	adds	r1, #3
 8009ef8:	b289      	uxth	r1, r1
 8009efa:	4e87      	ldr	r6, [pc, #540]	; (800a118 <BackEndTask+0x388>)
 8009efc:	0030      	movs	r0, r6
 8009efe:	f003 fd23 	bl	800d948 <CalculateCRC8>
 8009f02:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009f04:	2238      	movs	r2, #56	; 0x38
 8009f06:	2100      	movs	r1, #0
 8009f08:	0030      	movs	r0, r6
 8009f0a:	f009 fe51 	bl	8013bb0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009f0e:	4b81      	ldr	r3, [pc, #516]	; (800a114 <BackEndTask+0x384>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	464b      	mov	r3, r9
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	444b      	add	r3, r9
 8009f18:	019b      	lsls	r3, r3, #6
 8009f1a:	4978      	ldr	r1, [pc, #480]	; (800a0fc <BackEndTask+0x36c>)
 8009f1c:	18cb      	adds	r3, r1, r3
 8009f1e:	5c9b      	ldrb	r3, [r3, r2]
 8009f20:	9901      	ldr	r1, [sp, #4]
 8009f22:	428b      	cmp	r3, r1
 8009f24:	d04f      	beq.n	8009fc6 <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009f26:	4b73      	ldr	r3, [pc, #460]	; (800a0f4 <BackEndTask+0x364>)
 8009f28:	6819      	ldr	r1, [r3, #0]
 8009f2a:	428a      	cmp	r2, r1
 8009f2c:	dc00      	bgt.n	8009f30 <BackEndTask+0x1a0>
 8009f2e:	e0fd      	b.n	800a12c <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009f30:	4b73      	ldr	r3, [pc, #460]	; (800a100 <BackEndTask+0x370>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	3204      	adds	r2, #4
 8009f36:	0068      	lsls	r0, r5, #1
 8009f38:	1940      	adds	r0, r0, r5
 8009f3a:	0180      	lsls	r0, r0, #6
 8009f3c:	3881      	subs	r0, #129	; 0x81
 8009f3e:	38ff      	subs	r0, #255	; 0xff
 8009f40:	1841      	adds	r1, r0, r1
 8009f42:	486e      	ldr	r0, [pc, #440]	; (800a0fc <BackEndTask+0x36c>)
 8009f44:	1808      	adds	r0, r1, r0
 8009f46:	2100      	movs	r1, #0
 8009f48:	f009 fe32 	bl	8013bb0 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f4c:	4b71      	ldr	r3, [pc, #452]	; (800a114 <BackEndTask+0x384>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2bbf      	cmp	r3, #191	; 0xbf
 8009f52:	d100      	bne.n	8009f56 <BackEndTask+0x1c6>
 8009f54:	e101      	b.n	800a15a <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f56:	3301      	adds	r3, #1
 8009f58:	4652      	mov	r2, sl
 8009f5a:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009f5c:	00eb      	lsls	r3, r5, #3
 8009f5e:	1b5b      	subs	r3, r3, r5
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	3b6f      	subs	r3, #111	; 0x6f
 8009f64:	4a60      	ldr	r2, [pc, #384]	; (800a0e8 <BackEndTask+0x358>)
 8009f66:	5cd0      	ldrb	r0, [r2, r3]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	212d      	movs	r1, #45	; 0x2d
 8009f6c:	f7ff fe1c 	bl	8009ba8 <SendMessageToModule>
				++rejectedMsg;
 8009f70:	4a6a      	ldr	r2, [pc, #424]	; (800a11c <BackEndTask+0x38c>)
 8009f72:	8813      	ldrh	r3, [r2, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	8013      	strh	r3, [r2, #0]
 8009f78:	e107      	b.n	800a18a <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 8009f7a:	7822      	ldrb	r2, [r4, #0]
 8009f7c:	4b60      	ldr	r3, [pc, #384]	; (800a100 <BackEndTask+0x370>)
 8009f7e:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8009f80:	4b60      	ldr	r3, [pc, #384]	; (800a104 <BackEndTask+0x374>)
 8009f82:	2201      	movs	r2, #1
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e796      	b.n	8009eb6 <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009f88:	7862      	ldrb	r2, [r4, #1]
 8009f8a:	4b5d      	ldr	r3, [pc, #372]	; (800a100 <BackEndTask+0x370>)
 8009f8c:	601a      	str	r2, [r3, #0]
					parseStart =2;
 8009f8e:	4b5d      	ldr	r3, [pc, #372]	; (800a104 <BackEndTask+0x374>)
 8009f90:	2202      	movs	r2, #2
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e78f      	b.n	8009eb6 <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 8009f96:	22c0      	movs	r2, #192	; 0xc0
 8009f98:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009f9a:	006b      	lsls	r3, r5, #1
 8009f9c:	195b      	adds	r3, r3, r5
 8009f9e:	019b      	lsls	r3, r3, #6
 8009fa0:	3b81      	subs	r3, #129	; 0x81
 8009fa2:	3bff      	subs	r3, #255	; 0xff
 8009fa4:	1859      	adds	r1, r3, r1
 8009fa6:	4b55      	ldr	r3, [pc, #340]	; (800a0fc <BackEndTask+0x36c>)
 8009fa8:	18c9      	adds	r1, r1, r3
 8009faa:	9201      	str	r2, [sp, #4]
 8009fac:	485a      	ldr	r0, [pc, #360]	; (800a118 <BackEndTask+0x388>)
 8009fae:	f009 fdf6 	bl	8013b9e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009fb2:	4959      	ldr	r1, [pc, #356]	; (800a118 <BackEndTask+0x388>)
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	469c      	mov	ip, r3
 8009fb8:	4461      	add	r1, ip
 8009fba:	0008      	movs	r0, r1
 8009fbc:	1af2      	subs	r2, r6, r3
 8009fbe:	0021      	movs	r1, r4
 8009fc0:	f009 fded 	bl	8013b9e <memcpy>
 8009fc4:	e795      	b.n	8009ef2 <BackEndTask+0x162>
						portStatus[port] =MSG;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4642      	mov	r2, r8
 8009fca:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8009fcc:	4b4c      	ldr	r3, [pc, #304]	; (800a100 <BackEndTask+0x370>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4698      	mov	r8, r3
 8009fd2:	1eab      	subs	r3, r5, #2
 8009fd4:	4a52      	ldr	r2, [pc, #328]	; (800a120 <BackEndTask+0x390>)
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009fda:	4b4a      	ldr	r3, [pc, #296]	; (800a104 <BackEndTask+0x374>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	22bf      	movs	r2, #191	; 0xbf
 8009fe0:	1ad2      	subs	r2, r2, r3
 8009fe2:	4590      	cmp	r8, r2
 8009fe4:	dc41      	bgt.n	800a06a <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009fe6:	00e8      	lsls	r0, r5, #3
 8009fe8:	1b40      	subs	r0, r0, r5
 8009fea:	00c0      	lsls	r0, r0, #3
 8009fec:	9a03      	ldr	r2, [sp, #12]
 8009fee:	4694      	mov	ip, r2
 8009ff0:	4460      	add	r0, ip
 8009ff2:	0069      	lsls	r1, r5, #1
 8009ff4:	1949      	adds	r1, r1, r5
 8009ff6:	0189      	lsls	r1, r1, #6
 8009ff8:	3981      	subs	r1, #129	; 0x81
 8009ffa:	39ff      	subs	r1, #255	; 0xff
 8009ffc:	18c9      	adds	r1, r1, r3
 8009ffe:	4b3f      	ldr	r3, [pc, #252]	; (800a0fc <BackEndTask+0x36c>)
 800a000:	18c9      	adds	r1, r1, r3
 800a002:	4642      	mov	r2, r8
 800a004:	f009 fdcb 	bl	8013b9e <memcpy>
						if(packetStart < packetEnd){
 800a008:	4b3a      	ldr	r3, [pc, #232]	; (800a0f4 <BackEndTask+0x364>)
 800a00a:	6819      	ldr	r1, [r3, #0]
 800a00c:	4b41      	ldr	r3, [pc, #260]	; (800a114 <BackEndTask+0x384>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4299      	cmp	r1, r3
 800a012:	da4a      	bge.n	800a0aa <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 800a014:	4b3a      	ldr	r3, [pc, #232]	; (800a100 <BackEndTask+0x370>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	3204      	adds	r2, #4
 800a01a:	0068      	lsls	r0, r5, #1
 800a01c:	1940      	adds	r0, r0, r5
 800a01e:	0180      	lsls	r0, r0, #6
 800a020:	3881      	subs	r0, #129	; 0x81
 800a022:	38ff      	subs	r0, #255	; 0xff
 800a024:	1840      	adds	r0, r0, r1
 800a026:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <BackEndTask+0x36c>)
 800a028:	18c0      	adds	r0, r0, r3
 800a02a:	2100      	movs	r1, #0
 800a02c:	f009 fdc0 	bl	8013bb0 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800a030:	4b38      	ldr	r3, [pc, #224]	; (800a114 <BackEndTask+0x384>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2bbf      	cmp	r3, #191	; 0xbf
 800a036:	d04f      	beq.n	800a0d8 <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a038:	3301      	adds	r3, #1
 800a03a:	4652      	mov	r2, sl
 800a03c:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800a03e:	4a39      	ldr	r2, [pc, #228]	; (800a124 <BackEndTask+0x394>)
 800a040:	8813      	ldrh	r3, [r2, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 800a046:	00eb      	lsls	r3, r5, #3
 800a048:	1b5b      	subs	r3, r3, r5
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	3b70      	subs	r3, #112	; 0x70
 800a04e:	4a26      	ldr	r2, [pc, #152]	; (800a0e8 <BackEndTask+0x358>)
 800a050:	5cd3      	ldrb	r3, [r2, r3]
 800a052:	4a35      	ldr	r2, [pc, #212]	; (800a128 <BackEndTask+0x398>)
 800a054:	7812      	ldrb	r2, [r2, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d003      	beq.n	800a062 <BackEndTask+0x2d2>
 800a05a:	3302      	adds	r3, #2
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d83e      	bhi.n	800a0e0 <BackEndTask+0x350>
							NotifyMessagingTask(port);
 800a062:	0038      	movs	r0, r7
 800a064:	f7ff faf4 	bl	8009650 <NotifyMessagingTask>
 800a068:	e082      	b.n	800a170 <BackEndTask+0x3e0>
 800a06a:	00ee      	lsls	r6, r5, #3
 800a06c:	1b76      	subs	r6, r6, r5
 800a06e:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 800a070:	22c0      	movs	r2, #192	; 0xc0
 800a072:	1ad2      	subs	r2, r2, r3
 800a074:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a076:	9a02      	ldr	r2, [sp, #8]
 800a078:	1990      	adds	r0, r2, r6
 800a07a:	0069      	lsls	r1, r5, #1
 800a07c:	1949      	adds	r1, r1, r5
 800a07e:	0189      	lsls	r1, r1, #6
 800a080:	3981      	subs	r1, #129	; 0x81
 800a082:	39ff      	subs	r1, #255	; 0xff
 800a084:	18c9      	adds	r1, r1, r3
 800a086:	4b1d      	ldr	r3, [pc, #116]	; (800a0fc <BackEndTask+0x36c>)
 800a088:	18c9      	adds	r1, r1, r3
 800a08a:	464a      	mov	r2, r9
 800a08c:	f009 fd87 	bl	8013b9e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 800a090:	0030      	movs	r0, r6
 800a092:	3870      	subs	r0, #112	; 0x70
 800a094:	4448      	add	r0, r9
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <BackEndTask+0x358>)
 800a098:	469c      	mov	ip, r3
 800a09a:	4460      	add	r0, ip
 800a09c:	4643      	mov	r3, r8
 800a09e:	464a      	mov	r2, r9
 800a0a0:	1a9a      	subs	r2, r3, r2
 800a0a2:	0021      	movs	r1, r4
 800a0a4:	f009 fd7b 	bl	8013b9e <memcpy>
 800a0a8:	e7ae      	b.n	800a008 <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 800a0aa:	26c0      	movs	r6, #192	; 0xc0
 800a0ac:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a0ae:	0068      	lsls	r0, r5, #1
 800a0b0:	1940      	adds	r0, r0, r5
 800a0b2:	0180      	lsls	r0, r0, #6
 800a0b4:	3881      	subs	r0, #129	; 0x81
 800a0b6:	38ff      	subs	r0, #255	; 0xff
 800a0b8:	1840      	adds	r0, r0, r1
 800a0ba:	4b10      	ldr	r3, [pc, #64]	; (800a0fc <BackEndTask+0x36c>)
 800a0bc:	18c0      	adds	r0, r0, r3
 800a0be:	0032      	movs	r2, r6
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	f009 fd75 	bl	8013bb0 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <BackEndTask+0x370>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	3204      	adds	r2, #4
 800a0cc:	1b92      	subs	r2, r2, r6
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	0020      	movs	r0, r4
 800a0d2:	f009 fd6d 	bl	8013bb0 <memset>
 800a0d6:	e7ab      	b.n	800a030 <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4652      	mov	r2, sl
 800a0dc:	7013      	strb	r3, [r2, #0]
 800a0de:	e7ae      	b.n	800a03e <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 800a0e0:	0038      	movs	r0, r7
 800a0e2:	f7ff fcf9 	bl	8009ad8 <ForwardReceivedMessage>
 800a0e6:	e043      	b.n	800a170 <BackEndTask+0x3e0>
 800a0e8:	2000054c 	.word	0x2000054c
 800a0ec:	20000c8c 	.word	0x20000c8c
 800a0f0:	2000627c 	.word	0x2000627c
 800a0f4:	20001004 	.word	0x20001004
 800a0f8:	20001060 	.word	0x20001060
 800a0fc:	20000a4c 	.word	0x20000a4c
 800a100:	20001000 	.word	0x20001000
 800a104:	20001008 	.word	0x20001008
 800a108:	200002b8 	.word	0x200002b8
 800a10c:	20000878 	.word	0x20000878
 800a110:	20000dec 	.word	0x20000dec
 800a114:	20000ffc 	.word	0x20000ffc
 800a118:	20000c90 	.word	0x20000c90
 800a11c:	2000105c 	.word	0x2000105c
 800a120:	200006cc 	.word	0x200006cc
 800a124:	20000ea4 	.word	0x20000ea4
 800a128:	2000080e 	.word	0x2000080e
					MSG_RX_BUF_SIZE - packetStart);
 800a12c:	26c0      	movs	r6, #192	; 0xc0
 800a12e:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a130:	0068      	lsls	r0, r5, #1
 800a132:	1940      	adds	r0, r0, r5
 800a134:	0180      	lsls	r0, r0, #6
 800a136:	3881      	subs	r0, #129	; 0x81
 800a138:	38ff      	subs	r0, #255	; 0xff
 800a13a:	1841      	adds	r1, r0, r1
 800a13c:	4821      	ldr	r0, [pc, #132]	; (800a1c4 <BackEndTask+0x434>)
 800a13e:	1808      	adds	r0, r1, r0
 800a140:	0032      	movs	r2, r6
 800a142:	2100      	movs	r1, #0
 800a144:	f009 fd34 	bl	8013bb0 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a148:	4b1f      	ldr	r3, [pc, #124]	; (800a1c8 <BackEndTask+0x438>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	3204      	adds	r2, #4
 800a14e:	1b92      	subs	r2, r2, r6
 800a150:	2100      	movs	r1, #0
 800a152:	0020      	movs	r0, r4
 800a154:	f009 fd2c 	bl	8013bb0 <memset>
 800a158:	e6f8      	b.n	8009f4c <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	4652      	mov	r2, sl
 800a15e:	7013      	strb	r3, [r2, #0]
 800a160:	e6fc      	b.n	8009f5c <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800a162:	0038      	movs	r0, r7
 800a164:	f004 f8f4 	bl	800e350 <GetUart>
 800a168:	22c0      	movs	r2, #192	; 0xc0
 800a16a:	0021      	movs	r1, r4
 800a16c:	f009 f800 	bl	8013170 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 800a170:	3701      	adds	r7, #1
 800a172:	b2ff      	uxtb	r7, r7
 800a174:	3501      	adds	r5, #1
 800a176:	34c0      	adds	r4, #192	; 0xc0
 800a178:	2f04      	cmp	r7, #4
 800a17a:	d017      	beq.n	800a1ac <BackEndTask+0x41c>
 800a17c:	1e6b      	subs	r3, r5, #1
 800a17e:	445b      	add	r3, fp
 800a180:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d800      	bhi.n	800a18a <BackEndTask+0x3fa>
 800a188:	e610      	b.n	8009dac <BackEndTask+0x1c>
 800a18a:	1eab      	subs	r3, r5, #2
 800a18c:	4a0f      	ldr	r2, [pc, #60]	; (800a1cc <BackEndTask+0x43c>)
 800a18e:	4694      	mov	ip, r2
 800a190:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	2a00      	cmp	r2, #0
 800a196:	d0eb      	beq.n	800a170 <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 800a19c:	4643      	mov	r3, r8
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b05      	cmp	r3, #5
 800a1a2:	d1de      	bne.n	800a162 <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	7013      	strb	r3, [r2, #0]
 800a1aa:	e7da      	b.n	800a162 <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 800a1ac:	f006 f8be 	bl	801032c <vPortYield>
 800a1b0:	4c04      	ldr	r4, [pc, #16]	; (800a1c4 <BackEndTask+0x434>)
void BackEndTask(void *argument){
 800a1b2:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 800a1b4:	2701      	movs	r7, #1
 800a1b6:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <BackEndTask+0x440>)
 800a1b8:	469b      	mov	fp, r3
 800a1ba:	e7df      	b.n	800a17c <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a1bc:	4a05      	ldr	r2, [pc, #20]	; (800a1d4 <BackEndTask+0x444>)
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e685      	b.n	8009ece <BackEndTask+0x13e>
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	20000a4c 	.word	0x20000a4c
 800a1c8:	20001000 	.word	0x20001000
 800a1cc:	20000a48 	.word	0x20000a48
 800a1d0:	20000878 	.word	0x20000878
 800a1d4:	20000ffc 	.word	0x20000ffc

0800a1d8 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a1d8:	2001      	movs	r0, #1
 800a1da:	4770      	bx	lr

0800a1dc <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1de:	46de      	mov	lr, fp
 800a1e0:	4657      	mov	r7, sl
 800a1e2:	464e      	mov	r6, r9
 800a1e4:	4645      	mov	r5, r8
 800a1e6:	b5e0      	push	{r5, r6, r7, lr}
 800a1e8:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 800a1ea:	b2c3      	uxtb	r3, r0
 800a1ec:	9308      	str	r3, [sp, #32]
 800a1ee:	23ff      	movs	r3, #255	; 0xff
 800a1f0:	4003      	ands	r3, r0
 800a1f2:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800a1f4:	1e5d      	subs	r5, r3, #1
 800a1f6:	00eb      	lsls	r3, r5, #3
 800a1f8:	1b5b      	subs	r3, r3, r5
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a1fe:	4ae4      	ldr	r2, [pc, #912]	; (800a590 <PxMessagingTask+0x3b4>)
 800a200:	18d3      	adds	r3, r2, r3
 800a202:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 800a208:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 800a20a:	000e      	movs	r6, r1
 800a20c:	1853      	adds	r3, r2, r1
 800a20e:	3302      	adds	r3, #2
 800a210:	9309      	str	r3, [sp, #36]	; 0x24
 800a212:	468a      	mov	sl, r1
 800a214:	e062      	b.n	800a2dc <PxMessagingTask+0x100>
				longMessage =1;
 800a216:	4adf      	ldr	r2, [pc, #892]	; (800a594 <PxMessagingTask+0x3b8>)
 800a218:	2101      	movs	r1, #1
 800a21a:	7011      	strb	r1, [r2, #0]
 800a21c:	e06f      	b.n	800a2fe <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a21e:	4bdc      	ldr	r3, [pc, #880]	; (800a590 <PxMessagingTask+0x3b4>)
 800a220:	199b      	adds	r3, r3, r6
 800a222:	1818      	adds	r0, r3, r0
 800a224:	78c7      	ldrb	r7, [r0, #3]
 800a226:	e08e      	b.n	800a346 <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 800a228:	4bdb      	ldr	r3, [pc, #876]	; (800a598 <PxMessagingTask+0x3bc>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a22e:	212c      	movs	r1, #44	; 0x2c
 800a230:	9804      	ldr	r0, [sp, #16]
 800a232:	f7ff fcb9 	bl	8009ba8 <SendMessageToModule>
 800a236:	e089      	b.n	800a34c <PxMessagingTask+0x170>
					Delay_ms(100);
 800a238:	2064      	movs	r0, #100	; 0x64
 800a23a:	f006 f9f5 	bl	8010628 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a23e:	2300      	movs	r3, #0
 800a240:	9a08      	ldr	r2, [sp, #32]
 800a242:	4659      	mov	r1, fp
 800a244:	9804      	ldr	r0, [sp, #16]
 800a246:	f7f9 fd45 	bl	8003cd4 <remoteBootloaderUpdate>
 800a24a:	e02e      	b.n	800a2aa <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a24c:	4bd3      	ldr	r3, [pc, #844]	; (800a59c <PxMessagingTask+0x3c0>)
 800a24e:	5d5a      	ldrb	r2, [r3, r5]
 800a250:	4bcf      	ldr	r3, [pc, #828]	; (800a590 <PxMessagingTask+0x3b4>)
 800a252:	199b      	adds	r3, r3, r6
 800a254:	189b      	adds	r3, r3, r2
 800a256:	3b01      	subs	r3, #1
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4ad1      	ldr	r2, [pc, #836]	; (800a5a0 <PxMessagingTask+0x3c4>)
 800a25c:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a25e:	2103      	movs	r1, #3
 800a260:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a262:	429a      	cmp	r2, r3
 800a264:	d01e      	beq.n	800a2a4 <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a266:	4ace      	ldr	r2, [pc, #824]	; (800a5a0 <PxMessagingTask+0x3c4>)
 800a268:	7013      	strb	r3, [r2, #0]
 800a26a:	4ace      	ldr	r2, [pc, #824]	; (800a5a4 <PxMessagingTask+0x3c8>)
 800a26c:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a26e:	9908      	ldr	r1, [sp, #32]
 800a270:	20ff      	movs	r0, #255	; 0xff
 800a272:	f7ff fc51 	bl	8009b18 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a276:	4bc9      	ldr	r3, [pc, #804]	; (800a59c <PxMessagingTask+0x3c0>)
 800a278:	5d5a      	ldrb	r2, [r3, r5]
 800a27a:	4bc5      	ldr	r3, [pc, #788]	; (800a590 <PxMessagingTask+0x3b4>)
 800a27c:	199b      	adds	r3, r3, r6
 800a27e:	189b      	adds	r3, r3, r2
 800a280:	3b01      	subs	r3, #1
 800a282:	2200      	movs	r2, #0
 800a284:	701a      	strb	r2, [r3, #0]
				shift +=4;
 800a286:	9c06      	ldr	r4, [sp, #24]
 800a288:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a28a:	4bc4      	ldr	r3, [pc, #784]	; (800a59c <PxMessagingTask+0x3c0>)
 800a28c:	5d59      	ldrb	r1, [r3, r5]
 800a28e:	1b0a      	subs	r2, r1, r4
 800a290:	b2d3      	uxtb	r3, r2
 800a292:	9306      	str	r3, [sp, #24]
					switch(code){
 800a294:	2f2d      	cmp	r7, #45	; 0x2d
 800a296:	d901      	bls.n	800a29c <PxMessagingTask+0xc0>
 800a298:	f001 fabf 	bl	800b81a <PxMessagingTask+0x163e>
 800a29c:	00bb      	lsls	r3, r7, #2
 800a29e:	4ac2      	ldr	r2, [pc, #776]	; (800a5a8 <PxMessagingTask+0x3cc>)
 800a2a0:	58d3      	ldr	r3, [r2, r3]
 800a2a2:	469f      	mov	pc, r3
				if(result == BOS_OK){
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0ed      	beq.n	800a286 <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <PxMessagingTask+0xd8>
 800a2b0:	f001 fad5 	bl	800b85e <PxMessagingTask+0x1682>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a2b4:	4cb9      	ldr	r4, [pc, #740]	; (800a59c <PxMessagingTask+0x3c0>)
 800a2b6:	5d62      	ldrb	r2, [r4, r5]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	9807      	ldr	r0, [sp, #28]
 800a2bc:	f009 fc78 	bl	8013bb0 <memset>
		messageLength[port - 1] =0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a2c4:	4bb9      	ldr	r3, [pc, #740]	; (800a5ac <PxMessagingTask+0x3d0>)
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	5c9b      	ldrb	r3, [r3, r2]
 800a2ca:	3b02      	subs	r3, #2
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d903      	bls.n	800a2d8 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 800a2d0:	4bb6      	ldr	r3, [pc, #728]	; (800a5ac <PxMessagingTask+0x3d0>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a2d8:	f006 f828 	bl	801032c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a2dc:	2101      	movs	r1, #1
 800a2de:	4249      	negs	r1, r1
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f005 fd49 	bl	800fd78 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a2e6:	4bad      	ldr	r3, [pc, #692]	; (800a59c <PxMessagingTask+0x3c0>)
 800a2e8:	5d5b      	ldrb	r3, [r3, r5]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0dd      	beq.n	800a2aa <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b25a      	sxtb	r2, r3
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	db8e      	blt.n	800a216 <PxMessagingTask+0x3a>
				longMessage =0;
 800a2f8:	4aa6      	ldr	r2, [pc, #664]	; (800a594 <PxMessagingTask+0x3b8>)
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a2fe:	4aa4      	ldr	r2, [pc, #656]	; (800a590 <PxMessagingTask+0x3b4>)
 800a300:	5cb1      	ldrb	r1, [r6, r2]
 800a302:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800a304:	1992      	adds	r2, r2, r6
 800a306:	7852      	ldrb	r2, [r2, #1]
 800a308:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a30a:	2201      	movs	r2, #1
 800a30c:	0010      	movs	r0, r2
 800a30e:	4018      	ands	r0, r3
			shift =0;
 800a310:	9006      	str	r0, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a312:	49a1      	ldr	r1, [pc, #644]	; (800a598 <PxMessagingTask+0x3bc>)
 800a314:	071c      	lsls	r4, r3, #28
 800a316:	0fa4      	lsrs	r4, r4, #30
 800a318:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a31a:	091c      	lsrs	r4, r3, #4
 800a31c:	4022      	ands	r2, r4
 800a31e:	0014      	movs	r4, r2
 800a320:	1e67      	subs	r7, r4, #1
 800a322:	41bc      	sbcs	r4, r7
 800a324:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a326:	2460      	movs	r4, #96	; 0x60
 800a328:	401c      	ands	r4, r3
 800a32a:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 800a32c:	079b      	lsls	r3, r3, #30
 800a32e:	d400      	bmi.n	800a332 <PxMessagingTask+0x156>
 800a330:	e775      	b.n	800a21e <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a332:	4b97      	ldr	r3, [pc, #604]	; (800a590 <PxMessagingTask+0x3b4>)
 800a334:	199b      	adds	r3, r3, r6
 800a336:	181b      	adds	r3, r3, r0
 800a338:	7919      	ldrb	r1, [r3, #4]
 800a33a:	0209      	lsls	r1, r1, #8
 800a33c:	78df      	ldrb	r7, [r3, #3]
 800a33e:	187f      	adds	r7, r7, r1
 800a340:	b2bf      	uxth	r7, r7
				++shift;
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	9306      	str	r3, [sp, #24]
			if(true == BOSMessaging.received_Acknowledgment){
 800a346:	2a00      	cmp	r2, #0
 800a348:	d000      	beq.n	800a34c <PxMessagingTask+0x170>
 800a34a:	e76d      	b.n	800a228 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a34c:	465b      	mov	r3, fp
 800a34e:	3b01      	subs	r3, #1
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2bfc      	cmp	r3, #252	; 0xfc
 800a354:	d901      	bls.n	800a35a <PxMessagingTask+0x17e>
 800a356:	f001 fac3 	bl	800b8e0 <PxMessagingTask+0x1704>
 800a35a:	4b95      	ldr	r3, [pc, #596]	; (800a5b0 <PxMessagingTask+0x3d4>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	455b      	cmp	r3, fp
 800a360:	d101      	bne.n	800a366 <PxMessagingTask+0x18a>
 800a362:	f001 fabd 	bl	800b8e0 <PxMessagingTask+0x1704>
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <PxMessagingTask+0x192>
 800a36a:	f001 fab3 	bl	800b8d4 <PxMessagingTask+0x16f8>
				ForwardReceivedMessage(port);
 800a36e:	9808      	ldr	r0, [sp, #32]
 800a370:	f7ff fbb2 	bl	8009ad8 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a374:	4b88      	ldr	r3, [pc, #544]	; (800a598 <PxMessagingTask+0x3bc>)
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 800a37c:	4b8d      	ldr	r3, [pc, #564]	; (800a5b4 <PxMessagingTask+0x3d8>)
 800a37e:	2203      	movs	r2, #3
 800a380:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a382:	2f19      	cmp	r7, #25
 800a384:	d100      	bne.n	800a388 <PxMessagingTask+0x1ac>
 800a386:	e757      	b.n	800a238 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a388:	2f1a      	cmp	r7, #26
 800a38a:	d18e      	bne.n	800a2aa <PxMessagingTask+0xce>
					Delay_ms(100);
 800a38c:	2064      	movs	r0, #100	; 0x64
 800a38e:	f006 f94b 	bl	8010628 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a392:	4b7f      	ldr	r3, [pc, #508]	; (800a590 <PxMessagingTask+0x3b4>)
 800a394:	199b      	adds	r3, r3, r6
 800a396:	9a06      	ldr	r2, [sp, #24]
 800a398:	5c9b      	ldrb	r3, [r3, r2]
 800a39a:	9a08      	ldr	r2, [sp, #32]
 800a39c:	4659      	mov	r1, fp
 800a39e:	9804      	ldr	r0, [sp, #16]
 800a3a0:	f7f9 fc98 	bl	8003cd4 <remoteBootloaderUpdate>
 800a3a4:	e781      	b.n	800a2aa <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01f      	beq.n	800a3ec <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	1e58      	subs	r0, r3, #1
 800a3b0:	0042      	lsls	r2, r0, #1
 800a3b2:	4b81      	ldr	r3, [pc, #516]	; (800a5b8 <PxMessagingTask+0x3dc>)
 800a3b4:	5ad3      	ldrh	r3, [r2, r3]
 800a3b6:	4652      	mov	r2, sl
 800a3b8:	1911      	adds	r1, r2, r4
 800a3ba:	4a75      	ldr	r2, [pc, #468]	; (800a590 <PxMessagingTask+0x3b4>)
 800a3bc:	1889      	adds	r1, r1, r2
 800a3be:	3201      	adds	r2, #1
 800a3c0:	4452      	add	r2, sl
 800a3c2:	1914      	adds	r4, r2, r4
 800a3c4:	9a06      	ldr	r2, [sp, #24]
 800a3c6:	3a01      	subs	r2, #1
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	18a4      	adds	r4, r4, r2
 800a3cc:	2780      	movs	r7, #128	; 0x80
 800a3ce:	023f      	lsls	r7, r7, #8
 800a3d0:	4684      	mov	ip, r0
 800a3d2:	780a      	ldrb	r2, [r1, #0]
 800a3d4:	3a01      	subs	r2, #1
 800a3d6:	0038      	movs	r0, r7
 800a3d8:	4110      	asrs	r0, r2
 800a3da:	4303      	orrs	r3, r0
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 800a3e0:	42a1      	cmp	r1, r4
 800a3e2:	d1f6      	bne.n	800a3d2 <PxMessagingTask+0x1f6>
 800a3e4:	4660      	mov	r0, ip
 800a3e6:	0040      	lsls	r0, r0, #1
 800a3e8:	4a73      	ldr	r2, [pc, #460]	; (800a5b8 <PxMessagingTask+0x3dc>)
 800a3ea:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 800a3ec:	4b73      	ldr	r3, [pc, #460]	; (800a5bc <PxMessagingTask+0x3e0>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
							break;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4699      	mov	r9, r3
 800a3f6:	e75d      	b.n	800a2b4 <PxMessagingTask+0xd8>
							indMode =IND_PING;
 800a3f8:	4b6e      	ldr	r3, [pc, #440]	; (800a5b4 <PxMessagingTask+0x3d8>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a3fe:	200a      	movs	r0, #10
 800a400:	f004 f8e7 	bl	800e5d2 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a404:	4b64      	ldr	r3, [pc, #400]	; (800a598 <PxMessagingTask+0x3bc>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2240      	movs	r2, #64	; 0x40
 800a40a:	4393      	bics	r3, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	4691      	mov	r9, r2
 800a410:	2b20      	cmp	r3, #32
 800a412:	d000      	beq.n	800a416 <PxMessagingTask+0x23a>
 800a414:	e74e      	b.n	800a2b4 <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a416:	2102      	movs	r1, #2
 800a418:	9804      	ldr	r0, [sp, #16]
 800a41a:	f7ff fbc5 	bl	8009ba8 <SendMessageToModule>
 800a41e:	e749      	b.n	800a2b4 <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 800a420:	4b63      	ldr	r3, [pc, #396]	; (800a5b0 <PxMessagingTask+0x3d4>)
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	0093      	lsls	r3, r2, #2
 800a426:	189b      	adds	r3, r3, r2
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	4a65      	ldr	r2, [pc, #404]	; (800a5c0 <PxMessagingTask+0x3e4>)
 800a42c:	5c9b      	ldrb	r3, [r3, r2]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d118      	bne.n	800a464 <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a432:	9a04      	ldr	r2, [sp, #16]
 800a434:	4963      	ldr	r1, [pc, #396]	; (800a5c4 <PxMessagingTask+0x3e8>)
 800a436:	4864      	ldr	r0, [pc, #400]	; (800a5c8 <PxMessagingTask+0x3ec>)
 800a438:	f00a f948 	bl	80146cc <siprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a43c:	4c62      	ldr	r4, [pc, #392]	; (800a5c8 <PxMessagingTask+0x3ec>)
 800a43e:	0020      	movs	r0, r4
 800a440:	f7f5 fe6a 	bl	8000118 <strlen>
 800a444:	b282      	uxth	r2, r0
 800a446:	4b61      	ldr	r3, [pc, #388]	; (800a5cc <PxMessagingTask+0x3f0>)
 800a448:	7818      	ldrb	r0, [r3, #0]
 800a44a:	2301      	movs	r3, #1
 800a44c:	425b      	negs	r3, r3
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	3333      	adds	r3, #51	; 0x33
 800a452:	0021      	movs	r1, r4
 800a454:	f003 ff90 	bl	800e378 <writePxMutex>
							responseStatus =BOS_OK;
 800a458:	4b58      	ldr	r3, [pc, #352]	; (800a5bc <PxMessagingTask+0x3e0>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
							break;
 800a45e:	2300      	movs	r3, #0
 800a460:	4699      	mov	r9, r3
 800a462:	e727      	b.n	800a2b4 <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a464:	230a      	movs	r3, #10
 800a466:	9904      	ldr	r1, [sp, #16]
 800a468:	434b      	muls	r3, r1
 800a46a:	4a55      	ldr	r2, [pc, #340]	; (800a5c0 <PxMessagingTask+0x3e4>)
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	000a      	movs	r2, r1
 800a470:	4957      	ldr	r1, [pc, #348]	; (800a5d0 <PxMessagingTask+0x3f4>)
 800a472:	4855      	ldr	r0, [pc, #340]	; (800a5c8 <PxMessagingTask+0x3ec>)
 800a474:	f00a f92a 	bl	80146cc <siprintf>
 800a478:	e7e0      	b.n	800a43c <PxMessagingTask+0x260>
							IND_ON();
 800a47a:	2180      	movs	r1, #128	; 0x80
 800a47c:	2090      	movs	r0, #144	; 0x90
 800a47e:	2201      	movs	r2, #1
 800a480:	0109      	lsls	r1, r1, #4
 800a482:	05c0      	lsls	r0, r0, #23
 800a484:	f007 fd7e 	bl	8011f84 <HAL_GPIO_WritePin>
							break;
 800a488:	2300      	movs	r3, #0
 800a48a:	4699      	mov	r9, r3
 800a48c:	e712      	b.n	800a2b4 <PxMessagingTask+0xd8>
							IND_OFF();
 800a48e:	2180      	movs	r1, #128	; 0x80
 800a490:	2090      	movs	r0, #144	; 0x90
 800a492:	2200      	movs	r2, #0
 800a494:	0109      	lsls	r1, r1, #4
 800a496:	05c0      	lsls	r0, r0, #23
 800a498:	f007 fd74 	bl	8011f84 <HAL_GPIO_WritePin>
							break;
 800a49c:	2300      	movs	r3, #0
 800a49e:	4699      	mov	r9, r3
 800a4a0:	e708      	b.n	800a2b4 <PxMessagingTask+0xd8>
							IND_toggle();
 800a4a2:	2180      	movs	r1, #128	; 0x80
 800a4a4:	2090      	movs	r0, #144	; 0x90
 800a4a6:	0109      	lsls	r1, r1, #4
 800a4a8:	05c0      	lsls	r0, r0, #23
 800a4aa:	f007 fd71 	bl	8011f90 <HAL_GPIO_TogglePin>
							break;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4699      	mov	r9, r3
 800a4b2:	e6ff      	b.n	800a2b4 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a4b4:	4f47      	ldr	r7, [pc, #284]	; (800a5d4 <PxMessagingTask+0x3f8>)
 800a4b6:	00ab      	lsls	r3, r5, #2
 800a4b8:	4a35      	ldr	r2, [pc, #212]	; (800a590 <PxMessagingTask+0x3b4>)
 800a4ba:	1992      	adds	r2, r2, r6
 800a4bc:	1910      	adds	r0, r2, r4
 800a4be:	7881      	ldrb	r1, [r0, #2]
 800a4c0:	468c      	mov	ip, r1
 800a4c2:	9904      	ldr	r1, [sp, #16]
 800a4c4:	0209      	lsls	r1, r1, #8
 800a4c6:	4461      	add	r1, ip
 800a4c8:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a4ca:	18fb      	adds	r3, r7, r3
 800a4cc:	5d11      	ldrb	r1, [r2, r4]
 800a4ce:	0209      	lsls	r1, r1, #8
 800a4d0:	7842      	ldrb	r2, [r0, #1]
 800a4d2:	1852      	adds	r2, r2, r1
 800a4d4:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a4d6:	4b40      	ldr	r3, [pc, #256]	; (800a5d8 <PxMessagingTask+0x3fc>)
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	4a40      	ldr	r2, [pc, #256]	; (800a5dc <PxMessagingTask+0x400>)
 800a4dc:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a4e2:	9c08      	ldr	r4, [sp, #32]
 800a4e4:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a4e6:	2002      	movs	r0, #2
 800a4e8:	f004 f873 	bl	800e5d2 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	0020      	movs	r0, r4
 800a4f8:	f7ff f8d0 	bl	800969c <SendMessageFromPort>
							break;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4699      	mov	r9, r3
 800a500:	e6d8      	b.n	800a2b4 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a502:	4f34      	ldr	r7, [pc, #208]	; (800a5d4 <PxMessagingTask+0x3f8>)
 800a504:	00ab      	lsls	r3, r5, #2
 800a506:	4a22      	ldr	r2, [pc, #136]	; (800a590 <PxMessagingTask+0x3b4>)
 800a508:	1992      	adds	r2, r2, r6
 800a50a:	1910      	adds	r0, r2, r4
 800a50c:	7881      	ldrb	r1, [r0, #2]
 800a50e:	468c      	mov	ip, r1
 800a510:	9904      	ldr	r1, [sp, #16]
 800a512:	0209      	lsls	r1, r1, #8
 800a514:	4461      	add	r1, ip
 800a516:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a518:	18fb      	adds	r3, r7, r3
 800a51a:	5d11      	ldrb	r1, [r2, r4]
 800a51c:	0209      	lsls	r1, r1, #8
 800a51e:	7842      	ldrb	r2, [r0, #1]
 800a520:	1852      	adds	r2, r2, r1
 800a522:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <PxMessagingTask+0x3e0>)
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
							break;
 800a52a:	2300      	movs	r3, #0
 800a52c:	4699      	mov	r9, r3
 800a52e:	e6c1      	b.n	800a2b4 <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 800a530:	9808      	ldr	r0, [sp, #32]
 800a532:	f7f9 fa0d 	bl	8003950 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a536:	4b1f      	ldr	r3, [pc, #124]	; (800a5b4 <PxMessagingTask+0x3d8>)
 800a538:	2202      	movs	r2, #2
 800a53a:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a53c:	200a      	movs	r0, #10
 800a53e:	f004 f848 	bl	800e5d2 <osDelay>
 800a542:	2401      	movs	r4, #1
							temp =0;
 800a544:	2300      	movs	r3, #0
 800a546:	9305      	str	r3, [sp, #20]
								if(neighbors[p - 1][0]){
 800a548:	4f22      	ldr	r7, [pc, #136]	; (800a5d4 <PxMessagingTask+0x3f8>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a54a:	003b      	movs	r3, r7
 800a54c:	3b04      	subs	r3, #4
 800a54e:	4699      	mov	r9, r3
 800a550:	b2e2      	uxtb	r2, r4
 800a552:	00a1      	lsls	r1, r4, #2
								if(neighbors[p - 1][0]){
 800a554:	1f0b      	subs	r3, r1, #4
 800a556:	5afb      	ldrh	r3, [r7, r3]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <PxMessagingTask+0x398>
 800a55c:	3401      	adds	r4, #1
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a55e:	2c04      	cmp	r4, #4
 800a560:	d1f6      	bne.n	800a550 <PxMessagingTask+0x374>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a562:	466b      	mov	r3, sp
 800a564:	8a9a      	ldrh	r2, [r3, #20]
 800a566:	210d      	movs	r1, #13
 800a568:	9804      	ldr	r0, [sp, #16]
 800a56a:	f7ff fb1d 	bl	8009ba8 <SendMessageToModule>
							break;
 800a56e:	2300      	movs	r3, #0
 800a570:	4699      	mov	r9, r3
 800a572:	e69f      	b.n	800a2b4 <PxMessagingTask+0xd8>
									messageParams[temp] =p;
 800a574:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <PxMessagingTask+0x400>)
 800a576:	9805      	ldr	r0, [sp, #20]
 800a578:	541a      	strb	r2, [r3, r0]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a57a:	3001      	adds	r0, #1
 800a57c:	18c0      	adds	r0, r0, r3
 800a57e:	4449      	add	r1, r9
 800a580:	2204      	movs	r2, #4
 800a582:	f009 fb0c 	bl	8013b9e <memcpy>
									temp +=5;
 800a586:	9805      	ldr	r0, [sp, #20]
 800a588:	1d43      	adds	r3, r0, #5
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	e7e5      	b.n	800a55c <PxMessagingTask+0x380>
 800a590:	2000054c 	.word	0x2000054c
 800a594:	20000691 	.word	0x20000691
 800a598:	200061fc 	.word	0x200061fc
 800a59c:	200006cc 	.word	0x200006cc
 800a5a0:	20000ea6 	.word	0x20000ea6
 800a5a4:	200004f8 	.word	0x200004f8
 800a5a8:	08019f6c 	.word	0x08019f6c
 800a5ac:	20000878 	.word	0x20000878
 800a5b0:	2000080e 	.word	0x2000080e
 800a5b4:	20000690 	.word	0x20000690
 800a5b8:	2000670c 	.word	0x2000670c
 800a5bc:	20000890 	.word	0x20000890
 800a5c0:	20000700 	.word	0x20000700
 800a5c4:	08018868 	.word	0x08018868
 800a5c8:	2000100c 	.word	0x2000100c
 800a5cc:	200002b8 	.word	0x200002b8
 800a5d0:	0801887c 	.word	0x0801887c
 800a5d4:	20000810 	.word	0x20000810
 800a5d8:	20000064 	.word	0x20000064
 800a5dc:	200006d0 	.word	0x200006d0
							temp =numOfParams / 5;
 800a5e0:	2105      	movs	r1, #5
 800a5e2:	9806      	ldr	r0, [sp, #24]
 800a5e4:	f7f5 fdaa 	bl	800013c <__udivsi3>
 800a5e8:	b2c2      	uxtb	r2, r0
 800a5ea:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d018      	beq.n	800a622 <PxMessagingTask+0x446>
 800a5f0:	4653      	mov	r3, sl
 800a5f2:	191f      	adds	r7, r3, r4
 800a5f4:	4bdd      	ldr	r3, [pc, #884]	; (800a96c <PxMessagingTask+0x790>)
 800a5f6:	18ff      	adds	r7, r7, r3
 800a5f8:	3305      	adds	r3, #5
 800a5fa:	4453      	add	r3, sl
 800a5fc:	191c      	adds	r4, r3, r4
 800a5fe:	1e53      	subs	r3, r2, #1
 800a600:	b2db      	uxtb	r3, r3
 800a602:	009a      	lsls	r2, r3, #2
 800a604:	18d3      	adds	r3, r2, r3
 800a606:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a608:	4bd9      	ldr	r3, [pc, #868]	; (800a970 <PxMessagingTask+0x794>)
 800a60a:	4699      	mov	r9, r3
 800a60c:	7838      	ldrb	r0, [r7, #0]
 800a60e:	3801      	subs	r0, #1
 800a610:	0080      	lsls	r0, r0, #2
 800a612:	4448      	add	r0, r9
 800a614:	1c79      	adds	r1, r7, #1
 800a616:	2204      	movs	r2, #4
 800a618:	f009 fac1 	bl	8013b9e <memcpy>
 800a61c:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a61e:	42bc      	cmp	r4, r7
 800a620:	d1f4      	bne.n	800a60c <PxMessagingTask+0x430>
							responseStatus =BOS_OK;
 800a622:	4bd4      	ldr	r3, [pc, #848]	; (800a974 <PxMessagingTask+0x798>)
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
							break;
 800a628:	2300      	movs	r3, #0
 800a62a:	4699      	mov	r9, r3
 800a62c:	e642      	b.n	800a2b4 <PxMessagingTask+0xd8>
 800a62e:	4653      	mov	r3, sl
 800a630:	18e3      	adds	r3, r4, r3
 800a632:	4ace      	ldr	r2, [pc, #824]	; (800a96c <PxMessagingTask+0x790>)
 800a634:	4699      	mov	r9, r3
 800a636:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a638:	2701      	movs	r7, #1
								if(p != port)
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	42bb      	cmp	r3, r7
 800a63e:	d006      	beq.n	800a64e <PxMessagingTask+0x472>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a640:	0038      	movs	r0, r7
 800a642:	f003 fe85 	bl	800e350 <GetUart>
 800a646:	464b      	mov	r3, r9
 800a648:	7819      	ldrb	r1, [r3, #0]
 800a64a:	f003 ff0d 	bl	800e468 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a64e:	3701      	adds	r7, #1
 800a650:	b2ff      	uxtb	r7, r7
 800a652:	2301      	movs	r3, #1
 800a654:	469c      	mov	ip, r3
 800a656:	44e1      	add	r9, ip
 800a658:	2f04      	cmp	r7, #4
 800a65a:	d1ee      	bne.n	800a63a <PxMessagingTask+0x45e>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a65c:	9808      	ldr	r0, [sp, #32]
 800a65e:	f003 fe77 	bl	800e350 <GetUart>
 800a662:	4bc2      	ldr	r3, [pc, #776]	; (800a96c <PxMessagingTask+0x790>)
 800a664:	199b      	adds	r3, r3, r6
 800a666:	191c      	adds	r4, r3, r4
 800a668:	7aa1      	ldrb	r1, [r4, #10]
 800a66a:	f003 fefd 	bl	800e468 <SwapUartPins>
							break;
 800a66e:	2300      	movs	r3, #0
 800a670:	4699      	mov	r9, r3
 800a672:	e61f      	b.n	800a2b4 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a674:	0020      	movs	r0, r4
 800a676:	4bbd      	ldr	r3, [pc, #756]	; (800a96c <PxMessagingTask+0x790>)
 800a678:	199b      	adds	r3, r3, r6
 800a67a:	5d1b      	ldrb	r3, [r3, r4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <PxMessagingTask+0x4ba>
								myID =cMessage[port - 1][1 + shift];
 800a680:	2238      	movs	r2, #56	; 0x38
 800a682:	436a      	muls	r2, r5
 800a684:	4bb9      	ldr	r3, [pc, #740]	; (800a96c <PxMessagingTask+0x790>)
 800a686:	189b      	adds	r3, r3, r2
 800a688:	191c      	adds	r4, r3, r4
 800a68a:	7862      	ldrb	r2, [r4, #1]
 800a68c:	4bba      	ldr	r3, [pc, #744]	; (800a978 <PxMessagingTask+0x79c>)
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	2300      	movs	r3, #0
 800a692:	4699      	mov	r9, r3
 800a694:	e60e      	b.n	800a2b4 <PxMessagingTask+0xd8>
 800a696:	2200      	movs	r2, #0
 800a698:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d000      	beq.n	800a6a0 <PxMessagingTask+0x4c4>
 800a69e:	e609      	b.n	800a2b4 <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 800a6a0:	49b6      	ldr	r1, [pc, #728]	; (800a97c <PxMessagingTask+0x7a0>)
 800a6a2:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a6a4:	3238      	adds	r2, #56	; 0x38
 800a6a6:	436a      	muls	r2, r5
 800a6a8:	4bb0      	ldr	r3, [pc, #704]	; (800a96c <PxMessagingTask+0x790>)
 800a6aa:	189b      	adds	r3, r3, r2
 800a6ac:	181b      	adds	r3, r3, r0
 800a6ae:	785a      	ldrb	r2, [r3, #1]
 800a6b0:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a6b2:	7898      	ldrb	r0, [r3, #2]
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	330d      	adds	r3, #13
 800a6ba:	464a      	mov	r2, r9
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7fe ffed 	bl	800969c <SendMessageFromPort>
 800a6c2:	e5f7      	b.n	800a2b4 <PxMessagingTask+0xd8>
							if(longMessage){
 800a6c4:	4bae      	ldr	r3, [pc, #696]	; (800a980 <PxMessagingTask+0x7a4>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d012      	beq.n	800a6f2 <PxMessagingTask+0x516>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6cc:	4bad      	ldr	r3, [pc, #692]	; (800a984 <PxMessagingTask+0x7a8>)
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	881f      	ldrh	r7, [r3, #0]
 800a6d2:	48ad      	ldr	r0, [pc, #692]	; (800a988 <PxMessagingTask+0x7ac>)
 800a6d4:	1838      	adds	r0, r7, r0
 800a6d6:	4454      	add	r4, sl
 800a6d8:	49a4      	ldr	r1, [pc, #656]	; (800a96c <PxMessagingTask+0x790>)
 800a6da:	1861      	adds	r1, r4, r1
 800a6dc:	9c06      	ldr	r4, [sp, #24]
 800a6de:	0022      	movs	r2, r4
 800a6e0:	f009 fa5d 	bl	8013b9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6e4:	46a4      	mov	ip, r4
 800a6e6:	4467      	add	r7, ip
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	801f      	strh	r7, [r3, #0]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4699      	mov	r9, r3
 800a6f0:	e5e0      	b.n	800a2b4 <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6f2:	4ba4      	ldr	r3, [pc, #656]	; (800a984 <PxMessagingTask+0x7a8>)
 800a6f4:	469b      	mov	fp, r3
 800a6f6:	881f      	ldrh	r7, [r3, #0]
 800a6f8:	4ba3      	ldr	r3, [pc, #652]	; (800a988 <PxMessagingTask+0x7ac>)
 800a6fa:	4699      	mov	r9, r3
 800a6fc:	18f8      	adds	r0, r7, r3
 800a6fe:	4454      	add	r4, sl
 800a700:	499a      	ldr	r1, [pc, #616]	; (800a96c <PxMessagingTask+0x790>)
 800a702:	1861      	adds	r1, r4, r1
 800a704:	9c06      	ldr	r4, [sp, #24]
 800a706:	0022      	movs	r2, r4
 800a708:	f009 fa49 	bl	8013b9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a70c:	193c      	adds	r4, r7, r4
 800a70e:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a710:	2116      	movs	r1, #22
 800a712:	0020      	movs	r0, r4
 800a714:	f7f5 fd12 	bl	800013c <__udivsi3>
 800a718:	4b9c      	ldr	r3, [pc, #624]	; (800a98c <PxMessagingTask+0x7b0>)
 800a71a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a71c:	0022      	movs	r2, r4
 800a71e:	4649      	mov	r1, r9
 800a720:	489b      	ldr	r0, [pc, #620]	; (800a990 <PxMessagingTask+0x7b4>)
 800a722:	f009 fa3c 	bl	8013b9e <memcpy>
								longMessageLastPtr =0;
 800a726:	2400      	movs	r4, #0
 800a728:	465b      	mov	r3, fp
 800a72a:	801c      	strh	r4, [r3, #0]
 800a72c:	46a1      	mov	r9, r4
 800a72e:	e5c1      	b.n	800a2b4 <PxMessagingTask+0xd8>
							for(p =1; p <= NumOfPorts; p++){
 800a730:	2401      	movs	r4, #1
							temp =0;
 800a732:	2300      	movs	r3, #0
 800a734:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a736:	2780      	movs	r7, #128	; 0x80
 800a738:	023f      	lsls	r7, r7, #8
 800a73a:	0020      	movs	r0, r4
 800a73c:	f003 fe08 	bl	800e350 <GetUart>
 800a740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a742:	42bb      	cmp	r3, r7
 800a744:	d00c      	beq.n	800a760 <PxMessagingTask+0x584>
							for(p =1; p <= NumOfPorts; p++){
 800a746:	3401      	adds	r4, #1
 800a748:	b2e4      	uxtb	r4, r4
 800a74a:	2c04      	cmp	r4, #4
 800a74c:	d1f5      	bne.n	800a73a <PxMessagingTask+0x55e>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a74e:	466b      	mov	r3, sp
 800a750:	8a9a      	ldrh	r2, [r3, #20]
 800a752:	2114      	movs	r1, #20
 800a754:	9804      	ldr	r0, [sp, #16]
 800a756:	f7ff fa27 	bl	8009ba8 <SendMessageToModule>
							break;
 800a75a:	2300      	movs	r3, #0
 800a75c:	4699      	mov	r9, r3
 800a75e:	e5a9      	b.n	800a2b4 <PxMessagingTask+0xd8>
									messageParams[temp++] =p;
 800a760:	9a05      	ldr	r2, [sp, #20]
 800a762:	1c53      	adds	r3, r2, #1
 800a764:	4985      	ldr	r1, [pc, #532]	; (800a97c <PxMessagingTask+0x7a0>)
 800a766:	548c      	strb	r4, [r1, r2]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	e7eb      	b.n	800a746 <PxMessagingTask+0x56a>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a76e:	4b7f      	ldr	r3, [pc, #508]	; (800a96c <PxMessagingTask+0x790>)
 800a770:	199b      	adds	r3, r3, r6
 800a772:	5d1f      	ldrb	r7, [r3, r4]
 800a774:	063f      	lsls	r7, r7, #24
 800a776:	191b      	adds	r3, r3, r4
 800a778:	78da      	ldrb	r2, [r3, #3]
 800a77a:	18bf      	adds	r7, r7, r2
 800a77c:	785a      	ldrb	r2, [r3, #1]
 800a77e:	0412      	lsls	r2, r2, #16
 800a780:	18bf      	adds	r7, r7, r2
 800a782:	789a      	ldrb	r2, [r3, #2]
 800a784:	0212      	lsls	r2, r2, #8
 800a786:	18ba      	adds	r2, r7, r2
 800a788:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	2bff      	cmp	r3, #255	; 0xff
 800a78e:	d01c      	beq.n	800a7ca <PxMessagingTask+0x5ee>
								for(p =0; p < numOfParams; p++){
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d016      	beq.n	800a7c4 <PxMessagingTask+0x5e8>
 800a796:	4653      	mov	r3, sl
 800a798:	1d1a      	adds	r2, r3, #4
 800a79a:	1912      	adds	r2, r2, r4
 800a79c:	4b73      	ldr	r3, [pc, #460]	; (800a96c <PxMessagingTask+0x790>)
 800a79e:	18d7      	adds	r7, r2, r3
 800a7a0:	3305      	adds	r3, #5
 800a7a2:	4453      	add	r3, sl
 800a7a4:	191c      	adds	r4, r3, r4
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a7ae:	783b      	ldrb	r3, [r7, #0]
 800a7b0:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d919      	bls.n	800a7ec <PxMessagingTask+0x610>
 800a7b8:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a7ba:	42a7      	cmp	r7, r4
 800a7bc:	d1f7      	bne.n	800a7ae <PxMessagingTask+0x5d2>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4699      	mov	r9, r3
 800a7c2:	e577      	b.n	800a2b4 <PxMessagingTask+0xd8>
							temp =temp32 =0;
 800a7c4:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a7c6:	4699      	mov	r9, r3
 800a7c8:	e574      	b.n	800a2b4 <PxMessagingTask+0xd8>
									UpdateBaudrate(p,temp32);
 800a7ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a7cc:	0021      	movs	r1, r4
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f003 fe40 	bl	800e454 <UpdateBaudrate>
 800a7d4:	0021      	movs	r1, r4
 800a7d6:	2002      	movs	r0, #2
 800a7d8:	f003 fe3c 	bl	800e454 <UpdateBaudrate>
 800a7dc:	0021      	movs	r1, r4
 800a7de:	2003      	movs	r0, #3
 800a7e0:	f003 fe38 	bl	800e454 <UpdateBaudrate>
							temp =temp32 =0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9305      	str	r3, [sp, #20]
 800a7e8:	4699      	mov	r9, r3
 800a7ea:	e563      	b.n	800a2b4 <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 800a7ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7ee:	9805      	ldr	r0, [sp, #20]
 800a7f0:	f003 fe30 	bl	800e454 <UpdateBaudrate>
 800a7f4:	e7e0      	b.n	800a7b8 <PxMessagingTask+0x5dc>
							SaveToRO();
 800a7f6:	f001 f9b5 	bl	800bb64 <SaveToRO>
							SaveEEportsDir();
 800a7fa:	f7f8 febb 	bl	8003574 <SaveEEportsDir>
							indMode =IND_PING;
 800a7fe:	4b65      	ldr	r3, [pc, #404]	; (800a994 <PxMessagingTask+0x7b8>)
 800a800:	2201      	movs	r2, #1
 800a802:	701a      	strb	r2, [r3, #0]
							break;
 800a804:	2300      	movs	r3, #0
 800a806:	4699      	mov	r9, r3
 800a808:	e554      	b.n	800a2b4 <PxMessagingTask+0xd8>
							ClearEEportsDir();
 800a80a:	f7f8 ffa9 	bl	8003760 <ClearEEportsDir>
							ClearROtopology();
 800a80e:	f001 fab1 	bl	800bd74 <ClearROtopology>
							osDelay(100);
 800a812:	2064      	movs	r0, #100	; 0x64
 800a814:	f003 fedd 	bl	800e5d2 <osDelay>
							indMode =IND_TOPOLOGY;
 800a818:	4b5e      	ldr	r3, [pc, #376]	; (800a994 <PxMessagingTask+0x7b8>)
 800a81a:	2202      	movs	r2, #2
 800a81c:	701a      	strb	r2, [r3, #0]
							break;
 800a81e:	2300      	movs	r3, #0
 800a820:	4699      	mov	r9, r3
 800a822:	e547      	b.n	800a2b4 <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a824:	f003 ffea 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 800a828:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a82a:	465b      	mov	r3, fp
 800a82c:	2bff      	cmp	r3, #255	; 0xff
 800a82e:	d028      	beq.n	800a882 <PxMessagingTask+0x6a6>
							else if(dst == BOS_MULTICAST)
 800a830:	2bfe      	cmp	r3, #254	; 0xfe
 800a832:	d02f      	beq.n	800a894 <PxMessagingTask+0x6b8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a834:	4454      	add	r4, sl
 800a836:	494d      	ldr	r1, [pc, #308]	; (800a96c <PxMessagingTask+0x790>)
 800a838:	1861      	adds	r1, r4, r1
 800a83a:	9a06      	ldr	r2, [sp, #24]
 800a83c:	4856      	ldr	r0, [pc, #344]	; (800a998 <PxMessagingTask+0x7bc>)
 800a83e:	f009 f9ae 	bl	8013b9e <memcpy>
								temp =PcPort;
 800a842:	4c56      	ldr	r4, [pc, #344]	; (800a99c <PxMessagingTask+0x7c0>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a844:	4b54      	ldr	r3, [pc, #336]	; (800a998 <PxMessagingTask+0x7bc>)
 800a846:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a848:	4b55      	ldr	r3, [pc, #340]	; (800a9a0 <PxMessagingTask+0x7c4>)
 800a84a:	4699      	mov	r9, r3
								temp =PcPort;
 800a84c:	7823      	ldrb	r3, [r4, #0]
 800a84e:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a850:	9a08      	ldr	r2, [sp, #32]
 800a852:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a854:	2299      	movs	r2, #153	; 0x99
 800a856:	0092      	lsls	r2, r2, #2
 800a858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a85a:	4658      	mov	r0, fp
 800a85c:	f003 ff50 	bl	800e700 <FreeRTOS_CLIProcessCommand>
 800a860:	0007      	movs	r7, r0
								PcPort =temp;
 800a862:	9b05      	ldr	r3, [sp, #20]
 800a864:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a866:	464b      	mov	r3, r9
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b60      	cmp	r3, #96	; 0x60
 800a86c:	d01d      	beq.n	800a8aa <PxMessagingTask+0x6ce>
							} while(xReturned != pdFALSE);
 800a86e:	2f00      	cmp	r7, #0
 800a870:	d1ec      	bne.n	800a84c <PxMessagingTask+0x670>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a872:	2232      	movs	r2, #50	; 0x32
 800a874:	2100      	movs	r1, #0
 800a876:	4848      	ldr	r0, [pc, #288]	; (800a998 <PxMessagingTask+0x7bc>)
 800a878:	f009 f99a 	bl	8013bb0 <memset>
							break;
 800a87c:	2300      	movs	r3, #0
 800a87e:	4699      	mov	r9, r3
 800a880:	e518      	b.n	800a2b4 <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a882:	9a06      	ldr	r2, [sp, #24]
 800a884:	3a01      	subs	r2, #1
 800a886:	4454      	add	r4, sl
 800a888:	4938      	ldr	r1, [pc, #224]	; (800a96c <PxMessagingTask+0x790>)
 800a88a:	1861      	adds	r1, r4, r1
 800a88c:	4842      	ldr	r0, [pc, #264]	; (800a998 <PxMessagingTask+0x7bc>)
 800a88e:	f009 f986 	bl	8013b9e <memcpy>
 800a892:	e7d6      	b.n	800a842 <PxMessagingTask+0x666>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	9a05      	ldr	r2, [sp, #20]
 800a898:	1a9a      	subs	r2, r3, r2
 800a89a:	3a02      	subs	r2, #2
 800a89c:	4454      	add	r4, sl
 800a89e:	4933      	ldr	r1, [pc, #204]	; (800a96c <PxMessagingTask+0x790>)
 800a8a0:	1861      	adds	r1, r4, r1
 800a8a2:	483d      	ldr	r0, [pc, #244]	; (800a998 <PxMessagingTask+0x7bc>)
 800a8a4:	f009 f97b 	bl	8013b9e <memcpy>
 800a8a8:	e7cb      	b.n	800a842 <PxMessagingTask+0x666>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a8aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8ac:	f7f5 fc34 	bl	8000118 <strlen>
 800a8b0:	0002      	movs	r2, r0
 800a8b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8b4:	4831      	ldr	r0, [pc, #196]	; (800a97c <PxMessagingTask+0x7a0>)
 800a8b6:	f009 f972 	bl	8013b9e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a8ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8bc:	f7f5 fc2c 	bl	8000118 <strlen>
 800a8c0:	b282      	uxth	r2, r0
 800a8c2:	2118      	movs	r1, #24
 800a8c4:	9804      	ldr	r0, [sp, #16]
 800a8c6:	f7ff f96f 	bl	8009ba8 <SendMessageToModule>
									osDelay(10);
 800a8ca:	200a      	movs	r0, #10
 800a8cc:	f003 fe81 	bl	800e5d2 <osDelay>
 800a8d0:	e7cd      	b.n	800a86e <PxMessagingTask+0x692>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a8d2:	f003 ff93 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 800a8d6:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a8d8:	f7f5 fc1e 	bl	8000118 <strlen>
 800a8dc:	0002      	movs	r2, r0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	0038      	movs	r0, r7
 800a8e2:	f009 f965 	bl	8013bb0 <memset>
							if(longMessage){
 800a8e6:	4b26      	ldr	r3, [pc, #152]	; (800a980 <PxMessagingTask+0x7a4>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d013      	beq.n	800a916 <PxMessagingTask+0x73a>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a8ee:	4b25      	ldr	r3, [pc, #148]	; (800a984 <PxMessagingTask+0x7a8>)
 800a8f0:	4699      	mov	r9, r3
 800a8f2:	8818      	ldrh	r0, [r3, #0]
 800a8f4:	1838      	adds	r0, r7, r0
 800a8f6:	4454      	add	r4, sl
 800a8f8:	491c      	ldr	r1, [pc, #112]	; (800a96c <PxMessagingTask+0x790>)
 800a8fa:	1861      	adds	r1, r4, r1
 800a8fc:	9c06      	ldr	r4, [sp, #24]
 800a8fe:	0022      	movs	r2, r4
 800a900:	f009 f94d 	bl	8013b9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a904:	464b      	mov	r3, r9
 800a906:	881a      	ldrh	r2, [r3, #0]
 800a908:	46a4      	mov	ip, r4
 800a90a:	4462      	add	r2, ip
 800a90c:	464b      	mov	r3, r9
 800a90e:	801a      	strh	r2, [r3, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	4699      	mov	r9, r3
 800a914:	e4ce      	b.n	800a2b4 <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a916:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <PxMessagingTask+0x7a8>)
 800a918:	4699      	mov	r9, r3
 800a91a:	8818      	ldrh	r0, [r3, #0]
 800a91c:	1838      	adds	r0, r7, r0
 800a91e:	4454      	add	r4, sl
 800a920:	4912      	ldr	r1, [pc, #72]	; (800a96c <PxMessagingTask+0x790>)
 800a922:	1861      	adds	r1, r4, r1
 800a924:	9a06      	ldr	r2, [sp, #24]
 800a926:	f009 f93a 	bl	8013b9e <memcpy>
								longMessageLastPtr =0;
 800a92a:	2400      	movs	r4, #0
 800a92c:	464b      	mov	r3, r9
 800a92e:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <PxMessagingTask+0x798>)
 800a932:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a934:	0023      	movs	r3, r4
 800a936:	0022      	movs	r2, r4
 800a938:	0021      	movs	r1, r4
 800a93a:	481a      	ldr	r0, [pc, #104]	; (800a9a4 <PxMessagingTask+0x7c8>)
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f005 fa67 	bl	800fe10 <xTaskGenericNotify>
 800a942:	46a1      	mov	r9, r4
 800a944:	e4b6      	b.n	800a2b4 <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <PxMessagingTask+0x7cc>)
 800a948:	4a18      	ldr	r2, [pc, #96]	; (800a9ac <PxMessagingTask+0x7d0>)
 800a94a:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a94c:	4b11      	ldr	r3, [pc, #68]	; (800a994 <PxMessagingTask+0x7b8>)
 800a94e:	2201      	movs	r2, #1
 800a950:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a952:	200a      	movs	r0, #10
 800a954:	f003 fe3d 	bl	800e5d2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <PxMessagingTask+0x7d4>)
 800a95e:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <PxMessagingTask+0x7d8>)
 800a960:	60da      	str	r2, [r3, #12]
 800a962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a966:	46c0      	nop			; (mov r8, r8)
 800a968:	e7fd      	b.n	800a966 <PxMessagingTask+0x78a>
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	2000054c 	.word	0x2000054c
 800a970:	2000081c 	.word	0x2000081c
 800a974:	20000890 	.word	0x20000890
 800a978:	2000080e 	.word	0x2000080e
 800a97c:	200006d0 	.word	0x200006d0
 800a980:	20000691 	.word	0x20000691
 800a984:	20000692 	.word	0x20000692
 800a988:	20000edc 	.word	0x20000edc
 800a98c:	20000030 	.word	0x20000030
 800a990:	200002bc 	.word	0x200002bc
 800a994:	20000690 	.word	0x20000690
 800a998:	20000ea8 	.word	0x20000ea8
 800a99c:	200002b8 	.word	0x200002b8
 800a9a0:	200061fc 	.word	0x200061fc
 800a9a4:	20000dec 	.word	0x20000dec
 800a9a8:	20007ff0 	.word	0x20007ff0
 800a9ac:	deadbeef 	.word	0xdeadbeef
 800a9b0:	e000ed00 	.word	0xe000ed00
 800a9b4:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a9b8:	4fec      	ldr	r7, [pc, #944]	; (800ad6c <PxMessagingTask+0xb90>)
 800a9ba:	19bf      	adds	r7, r7, r6
 800a9bc:	5d38      	ldrb	r0, [r7, r4]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	3319      	adds	r3, #25
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	f7fe fe68 	bl	800969c <SendMessageFromPort>
							osDelay(100);
 800a9cc:	2064      	movs	r0, #100	; 0x64
 800a9ce:	f003 fe00 	bl	800e5d2 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a9d2:	5d3b      	ldrb	r3, [r7, r4]
 800a9d4:	4ae6      	ldr	r2, [pc, #920]	; (800ad70 <PxMessagingTask+0xb94>)
 800a9d6:	7811      	ldrb	r1, [r2, #0]
 800a9d8:	9a08      	ldr	r2, [sp, #32]
 800a9da:	9804      	ldr	r0, [sp, #16]
 800a9dc:	f7f9 f97a 	bl	8003cd4 <remoteBootloaderUpdate>
							break;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4699      	mov	r9, r3
 800a9e4:	e466      	b.n	800a2b4 <PxMessagingTask+0xd8>
							temp =cMessage[port - 1][11 + shift];
 800a9e6:	46a3      	mov	fp, r4
 800a9e8:	230b      	movs	r3, #11
 800a9ea:	4699      	mov	r9, r3
 800a9ec:	44a1      	add	r9, r4
 800a9ee:	4bdf      	ldr	r3, [pc, #892]	; (800ad6c <PxMessagingTask+0xb90>)
 800a9f0:	199b      	adds	r3, r3, r6
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	5c9b      	ldrb	r3, [r3, r2]
 800a9f6:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 800a9f8:	9b06      	ldr	r3, [sp, #24]
 800a9fa:	2b0f      	cmp	r3, #15
 800a9fc:	d100      	bne.n	800aa00 <PxMessagingTask+0x824>
 800a9fe:	e088      	b.n	800ab12 <PxMessagingTask+0x936>
							if(numOfParams == 17)
 800aa00:	9b06      	ldr	r3, [sp, #24]
 800aa02:	2b11      	cmp	r3, #17
 800aa04:	d100      	bne.n	800aa08 <PxMessagingTask+0x82c>
 800aa06:	e08c      	b.n	800ab22 <PxMessagingTask+0x946>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800aa08:	465b      	mov	r3, fp
 800aa0a:	1c59      	adds	r1, r3, #1
 800aa0c:	910c      	str	r1, [sp, #48]	; 0x30
 800aa0e:	1c98      	adds	r0, r3, #2
 800aa10:	900d      	str	r0, [sp, #52]	; 0x34
 800aa12:	1cda      	adds	r2, r3, #3
 800aa14:	920e      	str	r2, [sp, #56]	; 0x38
 800aa16:	4bd5      	ldr	r3, [pc, #852]	; (800ad6c <PxMessagingTask+0xb90>)
 800aa18:	199b      	adds	r3, r3, r6
 800aa1a:	465c      	mov	r4, fp
 800aa1c:	5d1c      	ldrb	r4, [r3, r4]
 800aa1e:	0624      	lsls	r4, r4, #24
 800aa20:	5c9a      	ldrb	r2, [r3, r2]
 800aa22:	18a4      	adds	r4, r4, r2
 800aa24:	5c5a      	ldrb	r2, [r3, r1]
 800aa26:	0412      	lsls	r2, r2, #16
 800aa28:	18a4      	adds	r4, r4, r2
 800aa2a:	5c1a      	ldrb	r2, [r3, r0]
 800aa2c:	0212      	lsls	r2, r2, #8
 800aa2e:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800aa30:	465a      	mov	r2, fp
 800aa32:	3204      	adds	r2, #4
 800aa34:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa36:	4659      	mov	r1, fp
 800aa38:	3105      	adds	r1, #5
 800aa3a:	9110      	str	r1, [sp, #64]	; 0x40
 800aa3c:	4658      	mov	r0, fp
 800aa3e:	3006      	adds	r0, #6
 800aa40:	9011      	str	r0, [sp, #68]	; 0x44
 800aa42:	465f      	mov	r7, fp
 800aa44:	3707      	adds	r7, #7
 800aa46:	9705      	str	r7, [sp, #20]
 800aa48:	5c9f      	ldrb	r7, [r3, r2]
 800aa4a:	063f      	lsls	r7, r7, #24
 800aa4c:	5c5a      	ldrb	r2, [r3, r1]
 800aa4e:	0412      	lsls	r2, r2, #16
 800aa50:	18bf      	adds	r7, r7, r2
 800aa52:	9a05      	ldr	r2, [sp, #20]
 800aa54:	5c9a      	ldrb	r2, [r3, r2]
 800aa56:	18bf      	adds	r7, r7, r2
 800aa58:	5c1b      	ldrb	r3, [r3, r0]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800aa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d166      	bne.n	800ab32 <PxMessagingTask+0x956>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800aa64:	4bc1      	ldr	r3, [pc, #772]	; (800ad6c <PxMessagingTask+0xb90>)
 800aa66:	199b      	adds	r3, r3, r6
 800aa68:	445b      	add	r3, fp
 800aa6a:	7a5b      	ldrb	r3, [r3, #9]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <PxMessagingTask+0x8ba>
 800aa70:	2138      	movs	r1, #56	; 0x38
 800aa72:	4369      	muls	r1, r5
 800aa74:	4abd      	ldr	r2, [pc, #756]	; (800ad6c <PxMessagingTask+0xb90>)
 800aa76:	1852      	adds	r2, r2, r1
 800aa78:	445a      	add	r2, fp
 800aa7a:	7a91      	ldrb	r1, [r2, #10]
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d00a      	beq.n	800aa96 <PxMessagingTask+0x8ba>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800aa80:	2038      	movs	r0, #56	; 0x38
 800aa82:	4368      	muls	r0, r5
 800aa84:	4ab9      	ldr	r2, [pc, #740]	; (800ad6c <PxMessagingTask+0xb90>)
 800aa86:	1812      	adds	r2, r2, r0
 800aa88:	445a      	add	r2, fp
 800aa8a:	7a10      	ldrb	r0, [r2, #8]
 800aa8c:	9100      	str	r1, [sp, #0]
 800aa8e:	003a      	movs	r2, r7
 800aa90:	0021      	movs	r1, r4
 800aa92:	f7fe fd01 	bl	8009498 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800aa96:	4bb5      	ldr	r3, [pc, #724]	; (800ad6c <PxMessagingTask+0xb90>)
 800aa98:	199b      	adds	r3, r3, r6
 800aa9a:	464a      	mov	r2, r9
 800aa9c:	5c9b      	ldrb	r3, [r3, r2]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d012      	beq.n	800aac8 <PxMessagingTask+0x8ec>
 800aaa2:	2138      	movs	r1, #56	; 0x38
 800aaa4:	4369      	muls	r1, r5
 800aaa6:	4ab1      	ldr	r2, [pc, #708]	; (800ad6c <PxMessagingTask+0xb90>)
 800aaa8:	1852      	adds	r2, r2, r1
 800aaaa:	445a      	add	r2, fp
 800aaac:	7b11      	ldrb	r1, [r2, #12]
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d00a      	beq.n	800aac8 <PxMessagingTask+0x8ec>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800aab2:	2038      	movs	r0, #56	; 0x38
 800aab4:	4368      	muls	r0, r5
 800aab6:	4aad      	ldr	r2, [pc, #692]	; (800ad6c <PxMessagingTask+0xb90>)
 800aab8:	1812      	adds	r2, r2, r0
 800aaba:	445a      	add	r2, fp
 800aabc:	7a10      	ldrb	r0, [r2, #8]
 800aabe:	9100      	str	r1, [sp, #0]
 800aac0:	003a      	movs	r2, r7
 800aac2:	0021      	movs	r1, r4
 800aac4:	f7fe fce8 	bl	8009498 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800aac8:	4ba8      	ldr	r3, [pc, #672]	; (800ad6c <PxMessagingTask+0xb90>)
 800aaca:	199b      	adds	r3, r3, r6
 800aacc:	445b      	add	r3, fp
 800aace:	7b5b      	ldrb	r3, [r3, #13]
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	2200      	movs	r2, #0
 800aad4:	4691      	mov	r9, r2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <PxMessagingTask+0x902>
 800aada:	f7ff fbeb 	bl	800a2b4 <PxMessagingTask+0xd8>
 800aade:	3238      	adds	r2, #56	; 0x38
 800aae0:	436a      	muls	r2, r5
 800aae2:	4ba2      	ldr	r3, [pc, #648]	; (800ad6c <PxMessagingTask+0xb90>)
 800aae4:	189b      	adds	r3, r3, r2
 800aae6:	445b      	add	r3, fp
 800aae8:	7b9a      	ldrb	r2, [r3, #14]
 800aaea:	454a      	cmp	r2, r9
 800aaec:	d101      	bne.n	800aaf2 <PxMessagingTask+0x916>
 800aaee:	f000 fec3 	bl	800b878 <PxMessagingTask+0x169c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aaf2:	2138      	movs	r1, #56	; 0x38
 800aaf4:	4369      	muls	r1, r5
 800aaf6:	4b9d      	ldr	r3, [pc, #628]	; (800ad6c <PxMessagingTask+0xb90>)
 800aaf8:	185b      	adds	r3, r3, r1
 800aafa:	445b      	add	r3, fp
 800aafc:	7a18      	ldrb	r0, [r3, #8]
 800aafe:	9200      	str	r2, [sp, #0]
 800ab00:	9b05      	ldr	r3, [sp, #20]
 800ab02:	003a      	movs	r2, r7
 800ab04:	0021      	movs	r1, r4
 800ab06:	f7fe fcc7 	bl	8009498 <SetupDMAStreams>
 800ab0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	f7ff fbd1 	bl	800a2b4 <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 800ab12:	2238      	movs	r2, #56	; 0x38
 800ab14:	436a      	muls	r2, r5
 800ab16:	4b95      	ldr	r3, [pc, #596]	; (800ad6c <PxMessagingTask+0xb90>)
 800ab18:	189b      	adds	r3, r3, r2
 800ab1a:	191c      	adds	r4, r3, r4
 800ab1c:	7b63      	ldrb	r3, [r4, #13]
 800ab1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab20:	e772      	b.n	800aa08 <PxMessagingTask+0x82c>
								temp =cMessage[port - 1][15 + shift];
 800ab22:	2238      	movs	r2, #56	; 0x38
 800ab24:	436a      	muls	r2, r5
 800ab26:	4b91      	ldr	r3, [pc, #580]	; (800ad6c <PxMessagingTask+0xb90>)
 800ab28:	189b      	adds	r3, r3, r2
 800ab2a:	445b      	add	r3, fp
 800ab2c:	7bdb      	ldrb	r3, [r3, #15]
 800ab2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab30:	e76a      	b.n	800aa08 <PxMessagingTask+0x82c>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800ab32:	2338      	movs	r3, #56	; 0x38
 800ab34:	436b      	muls	r3, r5
 800ab36:	4c8d      	ldr	r4, [pc, #564]	; (800ad6c <PxMessagingTask+0xb90>)
 800ab38:	18e4      	adds	r4, r4, r3
 800ab3a:	465b      	mov	r3, fp
 800ab3c:	18e6      	adds	r6, r4, r3
 800ab3e:	7a31      	ldrb	r1, [r6, #8]
 800ab40:	20e4      	movs	r0, #228	; 0xe4
 800ab42:	f7fc ff01 	bl	8007948 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800ab46:	465b      	mov	r3, fp
 800ab48:	5ce3      	ldrb	r3, [r4, r3]
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab4e:	5ca1      	ldrb	r1, [r4, r2]
 800ab50:	18c9      	adds	r1, r1, r3
 800ab52:	b289      	uxth	r1, r1
 800ab54:	20e5      	movs	r0, #229	; 0xe5
 800ab56:	f7fc fef7 	bl	8007948 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800ab5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab5c:	5ce3      	ldrb	r3, [r4, r3]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab62:	5ca1      	ldrb	r1, [r4, r2]
 800ab64:	18c9      	adds	r1, r1, r3
 800ab66:	b289      	uxth	r1, r1
 800ab68:	20e6      	movs	r0, #230	; 0xe6
 800ab6a:	f7fc feed 	bl	8007948 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800ab6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab70:	5ce3      	ldrb	r3, [r4, r3]
 800ab72:	021b      	lsls	r3, r3, #8
 800ab74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab76:	5ca1      	ldrb	r1, [r4, r2]
 800ab78:	18c9      	adds	r1, r1, r3
 800ab7a:	b289      	uxth	r1, r1
 800ab7c:	20e7      	movs	r0, #231	; 0xe7
 800ab7e:	f7fc fee3 	bl	8007948 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800ab82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab84:	5ce3      	ldrb	r3, [r4, r3]
 800ab86:	021b      	lsls	r3, r3, #8
 800ab88:	9a05      	ldr	r2, [sp, #20]
 800ab8a:	5ca1      	ldrb	r1, [r4, r2]
 800ab8c:	18c9      	adds	r1, r1, r3
 800ab8e:	b289      	uxth	r1, r1
 800ab90:	20e8      	movs	r0, #232	; 0xe8
 800ab92:	f7fc fed9 	bl	8007948 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800ab96:	7a73      	ldrb	r3, [r6, #9]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	7ab1      	ldrb	r1, [r6, #10]
 800ab9c:	18c9      	adds	r1, r1, r3
 800ab9e:	b289      	uxth	r1, r1
 800aba0:	20e9      	movs	r0, #233	; 0xe9
 800aba2:	f7fc fed1 	bl	8007948 <EE_WriteVariable>
								if(numOfParams == 19)
 800aba6:	9b06      	ldr	r3, [sp, #24]
 800aba8:	2b13      	cmp	r3, #19
 800abaa:	d116      	bne.n	800abda <PxMessagingTask+0x9fe>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800abac:	3325      	adds	r3, #37	; 0x25
 800abae:	436b      	muls	r3, r5
 800abb0:	4d6e      	ldr	r5, [pc, #440]	; (800ad6c <PxMessagingTask+0xb90>)
 800abb2:	18ed      	adds	r5, r5, r3
 800abb4:	464b      	mov	r3, r9
 800abb6:	5ceb      	ldrb	r3, [r5, r3]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	445d      	add	r5, fp
 800abbc:	7b29      	ldrb	r1, [r5, #12]
 800abbe:	18c9      	adds	r1, r1, r3
 800abc0:	b289      	uxth	r1, r1
 800abc2:	20ea      	movs	r0, #234	; 0xea
 800abc4:	f7fc fec0 	bl	8007948 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	4b69      	ldr	r3, [pc, #420]	; (800ad74 <PxMessagingTask+0xb98>)
 800abce:	4a6a      	ldr	r2, [pc, #424]	; (800ad78 <PxMessagingTask+0xb9c>)
 800abd0:	60da      	str	r2, [r3, #12]
 800abd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	e7fd      	b.n	800abd6 <PxMessagingTask+0x9fa>
								if(numOfParams == 21)
 800abda:	9b06      	ldr	r3, [sp, #24]
 800abdc:	2b15      	cmp	r3, #21
 800abde:	d1f3      	bne.n	800abc8 <PxMessagingTask+0x9ec>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800abe0:	3323      	adds	r3, #35	; 0x23
 800abe2:	435d      	muls	r5, r3
 800abe4:	4b61      	ldr	r3, [pc, #388]	; (800ad6c <PxMessagingTask+0xb90>)
 800abe6:	195b      	adds	r3, r3, r5
 800abe8:	445b      	add	r3, fp
 800abea:	7b5a      	ldrb	r2, [r3, #13]
 800abec:	0212      	lsls	r2, r2, #8
 800abee:	7b99      	ldrb	r1, [r3, #14]
 800abf0:	1889      	adds	r1, r1, r2
 800abf2:	b289      	uxth	r1, r1
 800abf4:	20eb      	movs	r0, #235	; 0xeb
 800abf6:	f7fc fea7 	bl	8007948 <EE_WriteVariable>
 800abfa:	e7e5      	b.n	800abc8 <PxMessagingTask+0x9ec>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800abfc:	4f5b      	ldr	r7, [pc, #364]	; (800ad6c <PxMessagingTask+0xb90>)
 800abfe:	19bf      	adds	r7, r7, r6
 800ac00:	1939      	adds	r1, r7, r4
 800ac02:	7a8b      	ldrb	r3, [r1, #10]
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	7aca      	ldrb	r2, [r1, #11]
 800ac08:	4859      	ldr	r0, [pc, #356]	; (800ad70 <PxMessagingTask+0xb94>)
 800ac0a:	7803      	ldrb	r3, [r0, #0]
 800ac0c:	4699      	mov	r9, r3
 800ac0e:	7a4b      	ldrb	r3, [r1, #9]
 800ac10:	469b      	mov	fp, r3
 800ac12:	7b08      	ldrb	r0, [r1, #12]
 800ac14:	0003      	movs	r3, r0
 800ac16:	1e58      	subs	r0, r3, #1
 800ac18:	4183      	sbcs	r3, r0
 800ac1a:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ac1c:	7908      	ldrb	r0, [r1, #4]
 800ac1e:	0603      	lsls	r3, r0, #24
 800ac20:	469c      	mov	ip, r3
 800ac22:	7948      	ldrb	r0, [r1, #5]
 800ac24:	0400      	lsls	r0, r0, #16
 800ac26:	4460      	add	r0, ip
 800ac28:	79cb      	ldrb	r3, [r1, #7]
 800ac2a:	469c      	mov	ip, r3
 800ac2c:	4460      	add	r0, ip
 800ac2e:	798b      	ldrb	r3, [r1, #6]
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	469c      	mov	ip, r3
 800ac34:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ac36:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ac38:	5d38      	ldrb	r0, [r7, r4]
 800ac3a:	0600      	lsls	r0, r0, #24
 800ac3c:	78cc      	ldrb	r4, [r1, #3]
 800ac3e:	1900      	adds	r0, r0, r4
 800ac40:	784c      	ldrb	r4, [r1, #1]
 800ac42:	0424      	lsls	r4, r4, #16
 800ac44:	1900      	adds	r0, r0, r4
 800ac46:	788c      	ldrb	r4, [r1, #2]
 800ac48:	0224      	lsls	r4, r4, #8
 800ac4a:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ac4c:	9001      	str	r0, [sp, #4]
 800ac4e:	7a09      	ldrb	r1, [r1, #8]
 800ac50:	9100      	str	r1, [sp, #0]
 800ac52:	9b06      	ldr	r3, [sp, #24]
 800ac54:	4649      	mov	r1, r9
 800ac56:	4658      	mov	r0, fp
 800ac58:	f7fe ffcc 	bl	8009bf4 <StartScastDMAStream>
							break;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4699      	mov	r9, r3
 800ac60:	f7ff fb28 	bl	800a2b4 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800ac64:	0023      	movs	r3, r4
 800ac66:	4a41      	ldr	r2, [pc, #260]	; (800ad6c <PxMessagingTask+0xb90>)
 800ac68:	1992      	adds	r2, r2, r6
 800ac6a:	5d12      	ldrb	r2, [r2, r4]
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	d000      	beq.n	800ac72 <PxMessagingTask+0xa96>
 800ac70:	e09a      	b.n	800ada8 <PxMessagingTask+0xbcc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ac72:	3238      	adds	r2, #56	; 0x38
 800ac74:	436a      	muls	r2, r5
 800ac76:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <PxMessagingTask+0xb90>)
 800ac78:	189b      	adds	r3, r3, r2
 800ac7a:	191c      	adds	r4, r3, r4
 800ac7c:	78a3      	ldrb	r3, [r4, #2]
 800ac7e:	061b      	lsls	r3, r3, #24
 800ac80:	78e2      	ldrb	r2, [r4, #3]
 800ac82:	0412      	lsls	r2, r2, #16
 800ac84:	189b      	adds	r3, r3, r2
 800ac86:	7962      	ldrb	r2, [r4, #5]
 800ac88:	189b      	adds	r3, r3, r2
 800ac8a:	7922      	ldrb	r2, [r4, #4]
 800ac8c:	0212      	lsls	r2, r2, #8
 800ac8e:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ac90:	7862      	ldrb	r2, [r4, #1]
 800ac92:	3a01      	subs	r2, #1
 800ac94:	b2d1      	uxtb	r1, r2
 800ac96:	2907      	cmp	r1, #7
 800ac98:	d901      	bls.n	800ac9e <PxMessagingTask+0xac2>
 800ac9a:	f000 fdd4 	bl	800b846 <PxMessagingTask+0x166a>
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	0092      	lsls	r2, r2, #2
 800aca2:	4936      	ldr	r1, [pc, #216]	; (800ad7c <PxMessagingTask+0xba0>)
 800aca4:	588a      	ldr	r2, [r1, r2]
 800aca6:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	4b35      	ldr	r3, [pc, #212]	; (800ad80 <PxMessagingTask+0xba4>)
 800acac:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800acae:	2201      	movs	r2, #1
 800acb0:	211f      	movs	r1, #31
 800acb2:	9804      	ldr	r0, [sp, #16]
 800acb4:	f7fe ff78 	bl	8009ba8 <SendMessageToModule>
										break;
 800acb8:	2300      	movs	r3, #0
 800acba:	4699      	mov	r9, r3
 800acbc:	f7ff fafa 	bl	800a2b4 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	4b2f      	ldr	r3, [pc, #188]	; (800ad80 <PxMessagingTask+0xba4>)
 800acc4:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800acc6:	2201      	movs	r2, #1
 800acc8:	211f      	movs	r1, #31
 800acca:	9804      	ldr	r0, [sp, #16]
 800accc:	f7fe ff6c 	bl	8009ba8 <SendMessageToModule>
										break;
 800acd0:	2300      	movs	r3, #0
 800acd2:	4699      	mov	r9, r3
 800acd4:	f7ff faee 	bl	800a2b4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800acd8:	8819      	ldrh	r1, [r3, #0]
 800acda:	4a29      	ldr	r2, [pc, #164]	; (800ad80 <PxMessagingTask+0xba4>)
 800acdc:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	0a1b      	lsrs	r3, r3, #8
 800ace2:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ace4:	2202      	movs	r2, #2
 800ace6:	211f      	movs	r1, #31
 800ace8:	9804      	ldr	r0, [sp, #16]
 800acea:	f7fe ff5d 	bl	8009ba8 <SendMessageToModule>
										break;
 800acee:	2300      	movs	r3, #0
 800acf0:	4699      	mov	r9, r3
 800acf2:	f7ff fadf 	bl	800a2b4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800acf6:	8819      	ldrh	r1, [r3, #0]
 800acf8:	4a21      	ldr	r2, [pc, #132]	; (800ad80 <PxMessagingTask+0xba4>)
 800acfa:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	121b      	asrs	r3, r3, #8
 800ad02:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ad04:	2202      	movs	r2, #2
 800ad06:	211f      	movs	r1, #31
 800ad08:	9804      	ldr	r0, [sp, #16]
 800ad0a:	f7fe ff4d 	bl	8009ba8 <SendMessageToModule>
										break;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4699      	mov	r9, r3
 800ad12:	f7ff facf 	bl	800a2b4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ad16:	6819      	ldr	r1, [r3, #0]
 800ad18:	4a19      	ldr	r2, [pc, #100]	; (800ad80 <PxMessagingTask+0xba4>)
 800ad1a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ad1c:	6819      	ldr	r1, [r3, #0]
 800ad1e:	0a09      	lsrs	r1, r1, #8
 800ad20:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ad22:	6819      	ldr	r1, [r3, #0]
 800ad24:	0c09      	lsrs	r1, r1, #16
 800ad26:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	0e1b      	lsrs	r3, r3, #24
 800ad2c:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad2e:	2204      	movs	r2, #4
 800ad30:	211f      	movs	r1, #31
 800ad32:	9804      	ldr	r0, [sp, #16]
 800ad34:	f7fe ff38 	bl	8009ba8 <SendMessageToModule>
										break;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4699      	mov	r9, r3
 800ad3c:	f7ff faba 	bl	800a2b4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ad40:	6819      	ldr	r1, [r3, #0]
 800ad42:	4a0f      	ldr	r2, [pc, #60]	; (800ad80 <PxMessagingTask+0xba4>)
 800ad44:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ad46:	6819      	ldr	r1, [r3, #0]
 800ad48:	1209      	asrs	r1, r1, #8
 800ad4a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ad4c:	6819      	ldr	r1, [r3, #0]
 800ad4e:	1409      	asrs	r1, r1, #16
 800ad50:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	161b      	asrs	r3, r3, #24
 800ad56:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad58:	2204      	movs	r2, #4
 800ad5a:	211f      	movs	r1, #31
 800ad5c:	9804      	ldr	r0, [sp, #16]
 800ad5e:	f7fe ff23 	bl	8009ba8 <SendMessageToModule>
										break;
 800ad62:	2300      	movs	r3, #0
 800ad64:	4699      	mov	r9, r3
 800ad66:	f7ff faa5 	bl	800a2b4 <PxMessagingTask+0xd8>
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	2000054c 	.word	0x2000054c
 800ad70:	2000080e 	.word	0x2000080e
 800ad74:	e000ed00 	.word	0xe000ed00
 800ad78:	05fa0004 	.word	0x05fa0004
 800ad7c:	0801a024 	.word	0x0801a024
 800ad80:	200006d0 	.word	0x200006d0
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ad84:	7819      	ldrb	r1, [r3, #0]
 800ad86:	4aef      	ldr	r2, [pc, #956]	; (800b144 <PxMessagingTask+0xf68>)
 800ad88:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ad8a:	7859      	ldrb	r1, [r3, #1]
 800ad8c:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ad8e:	7899      	ldrb	r1, [r3, #2]
 800ad90:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ad92:	78db      	ldrb	r3, [r3, #3]
 800ad94:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad96:	2208      	movs	r2, #8
 800ad98:	211f      	movs	r1, #31
 800ad9a:	9804      	ldr	r0, [sp, #16]
 800ad9c:	f7fe ff04 	bl	8009ba8 <SendMessageToModule>
										break; // You cannot bitwise floats
 800ada0:	2300      	movs	r3, #0
 800ada2:	4699      	mov	r9, r3
 800ada4:	f7ff fa86 	bl	800a2b4 <PxMessagingTask+0xd8>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ada8:	2a02      	cmp	r2, #2
 800adaa:	d000      	beq.n	800adae <PxMessagingTask+0xbd2>
 800adac:	e09f      	b.n	800aeee <PxMessagingTask+0xd12>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800adae:	48e6      	ldr	r0, [pc, #920]	; (800b148 <PxMessagingTask+0xf6c>)
 800adb0:	3236      	adds	r2, #54	; 0x36
 800adb2:	436a      	muls	r2, r5
 800adb4:	1882      	adds	r2, r0, r2
 800adb6:	1851      	adds	r1, r2, r1
 800adb8:	3901      	subs	r1, #1
 800adba:	2200      	movs	r2, #0
 800adbc:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800adbe:	3301      	adds	r3, #1
 800adc0:	4453      	add	r3, sl
 800adc2:	1818      	adds	r0, r3, r0
 800adc4:	f7f8 fd72 	bl	80038ac <IsModuleParameter>
 800adc8:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800adca:	2800      	cmp	r0, #0
 800adcc:	d108      	bne.n	800ade0 <PxMessagingTask+0xc04>
									SendMessageToModule(src,
 800adce:	2201      	movs	r2, #1
 800add0:	211f      	movs	r1, #31
 800add2:	9804      	ldr	r0, [sp, #16]
 800add4:	f7fe fee8 	bl	8009ba8 <SendMessageToModule>
 800add8:	2300      	movs	r3, #0
 800adda:	4699      	mov	r9, r3
 800addc:	f7ff fa6a 	bl	800a2b4 <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ade0:	3801      	subs	r0, #1
 800ade2:	4ada      	ldr	r2, [pc, #872]	; (800b14c <PxMessagingTask+0xf70>)
 800ade4:	210c      	movs	r1, #12
 800ade6:	4341      	muls	r1, r0
 800ade8:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800adea:	1852      	adds	r2, r2, r1
 800adec:	7912      	ldrb	r2, [r2, #4]
 800adee:	49d5      	ldr	r1, [pc, #852]	; (800b144 <PxMessagingTask+0xf68>)
 800adf0:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800adf2:	3a01      	subs	r2, #1
 800adf4:	b2d1      	uxtb	r1, r2
 800adf6:	2907      	cmp	r1, #7
 800adf8:	d901      	bls.n	800adfe <PxMessagingTask+0xc22>
 800adfa:	f000 fd28 	bl	800b84e <PxMessagingTask+0x1672>
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	0092      	lsls	r2, r2, #2
 800ae02:	49d3      	ldr	r1, [pc, #844]	; (800b150 <PxMessagingTask+0xf74>)
 800ae04:	588a      	ldr	r2, [r1, r2]
 800ae06:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	4bce      	ldr	r3, [pc, #824]	; (800b144 <PxMessagingTask+0xf68>)
 800ae0c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae0e:	2202      	movs	r2, #2
 800ae10:	211f      	movs	r1, #31
 800ae12:	9804      	ldr	r0, [sp, #16]
 800ae14:	f7fe fec8 	bl	8009ba8 <SendMessageToModule>
											break;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4699      	mov	r9, r3
 800ae1c:	f7ff fa4a 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	4bc8      	ldr	r3, [pc, #800]	; (800b144 <PxMessagingTask+0xf68>)
 800ae24:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae26:	2202      	movs	r2, #2
 800ae28:	211f      	movs	r1, #31
 800ae2a:	9804      	ldr	r0, [sp, #16]
 800ae2c:	f7fe febc 	bl	8009ba8 <SendMessageToModule>
											break;
 800ae30:	2300      	movs	r3, #0
 800ae32:	4699      	mov	r9, r3
 800ae34:	f7ff fa3e 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ae38:	8819      	ldrh	r1, [r3, #0]
 800ae3a:	4ac2      	ldr	r2, [pc, #776]	; (800b144 <PxMessagingTask+0xf68>)
 800ae3c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	0a1b      	lsrs	r3, r3, #8
 800ae42:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae44:	2203      	movs	r2, #3
 800ae46:	211f      	movs	r1, #31
 800ae48:	9804      	ldr	r0, [sp, #16]
 800ae4a:	f7fe fead 	bl	8009ba8 <SendMessageToModule>
											break;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4699      	mov	r9, r3
 800ae52:	f7ff fa2f 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae56:	8819      	ldrh	r1, [r3, #0]
 800ae58:	4aba      	ldr	r2, [pc, #744]	; (800b144 <PxMessagingTask+0xf68>)
 800ae5a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b21b      	sxth	r3, r3
 800ae60:	121b      	asrs	r3, r3, #8
 800ae62:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae64:	2203      	movs	r2, #3
 800ae66:	211f      	movs	r1, #31
 800ae68:	9804      	ldr	r0, [sp, #16]
 800ae6a:	f7fe fe9d 	bl	8009ba8 <SendMessageToModule>
											break;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4699      	mov	r9, r3
 800ae72:	f7ff fa1f 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ae76:	6819      	ldr	r1, [r3, #0]
 800ae78:	4ab2      	ldr	r2, [pc, #712]	; (800b144 <PxMessagingTask+0xf68>)
 800ae7a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	0a09      	lsrs	r1, r1, #8
 800ae80:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ae82:	6819      	ldr	r1, [r3, #0]
 800ae84:	0c09      	lsrs	r1, r1, #16
 800ae86:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	0e1b      	lsrs	r3, r3, #24
 800ae8c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae8e:	2205      	movs	r2, #5
 800ae90:	211f      	movs	r1, #31
 800ae92:	9804      	ldr	r0, [sp, #16]
 800ae94:	f7fe fe88 	bl	8009ba8 <SendMessageToModule>
											break;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4699      	mov	r9, r3
 800ae9c:	f7ff fa0a 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	4aa8      	ldr	r2, [pc, #672]	; (800b144 <PxMessagingTask+0xf68>)
 800aea4:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aea6:	6819      	ldr	r1, [r3, #0]
 800aea8:	1209      	asrs	r1, r1, #8
 800aeaa:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aeac:	6819      	ldr	r1, [r3, #0]
 800aeae:	1409      	asrs	r1, r1, #16
 800aeb0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	161b      	asrs	r3, r3, #24
 800aeb6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aeb8:	2205      	movs	r2, #5
 800aeba:	211f      	movs	r1, #31
 800aebc:	9804      	ldr	r0, [sp, #16]
 800aebe:	f7fe fe73 	bl	8009ba8 <SendMessageToModule>
											break;
 800aec2:	2300      	movs	r3, #0
 800aec4:	4699      	mov	r9, r3
 800aec6:	f7ff f9f5 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800aeca:	7819      	ldrb	r1, [r3, #0]
 800aecc:	4a9d      	ldr	r2, [pc, #628]	; (800b144 <PxMessagingTask+0xf68>)
 800aece:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800aed0:	7859      	ldrb	r1, [r3, #1]
 800aed2:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800aed4:	7899      	ldrb	r1, [r3, #2]
 800aed6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800aed8:	78db      	ldrb	r3, [r3, #3]
 800aeda:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aedc:	2209      	movs	r2, #9
 800aede:	211f      	movs	r1, #31
 800aee0:	9804      	ldr	r0, [sp, #16]
 800aee2:	f7fe fe61 	bl	8009ba8 <SendMessageToModule>
											break;
 800aee6:	2300      	movs	r3, #0
 800aee8:	4699      	mov	r9, r3
 800aeea:	f7ff f9e3 	bl	800a2b4 <PxMessagingTask+0xd8>
								}
 800aeee:	2300      	movs	r3, #0
 800aef0:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800aef2:	2a02      	cmp	r2, #2
 800aef4:	d801      	bhi.n	800aefa <PxMessagingTask+0xd1e>
 800aef6:	f7ff f9dd 	bl	800a2b4 <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800aefa:	3a04      	subs	r2, #4
 800aefc:	0092      	lsls	r2, r2, #2
 800aefe:	4b95      	ldr	r3, [pc, #596]	; (800b154 <PxMessagingTask+0xf78>)
 800af00:	58d1      	ldr	r1, [r2, r3]
 800af02:	220f      	movs	r2, #15
 800af04:	400a      	ands	r2, r1
 800af06:	4b8f      	ldr	r3, [pc, #572]	; (800b144 <PxMessagingTask+0xf68>)
 800af08:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800af0a:	454a      	cmp	r2, r9
 800af0c:	d106      	bne.n	800af1c <PxMessagingTask+0xd40>
									SendMessageToModule(src,
 800af0e:	2201      	movs	r2, #1
 800af10:	211f      	movs	r1, #31
 800af12:	9804      	ldr	r0, [sp, #16]
 800af14:	f7fe fe48 	bl	8009ba8 <SendMessageToModule>
 800af18:	f7ff f9cc 	bl	800a2b4 <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800af1c:	0c09      	lsrs	r1, r1, #16
 800af1e:	2380      	movs	r3, #128	; 0x80
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800af24:	3a01      	subs	r2, #1
 800af26:	b2d0      	uxtb	r0, r2
 800af28:	2807      	cmp	r0, #7
 800af2a:	d901      	bls.n	800af30 <PxMessagingTask+0xd54>
 800af2c:	f000 fc93 	bl	800b856 <PxMessagingTask+0x167a>
 800af30:	b2d2      	uxtb	r2, r2
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	4888      	ldr	r0, [pc, #544]	; (800b158 <PxMessagingTask+0xf7c>)
 800af36:	5882      	ldr	r2, [r0, r2]
 800af38:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	4b81      	ldr	r3, [pc, #516]	; (800b144 <PxMessagingTask+0xf68>)
 800af3e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af40:	2202      	movs	r2, #2
 800af42:	211f      	movs	r1, #31
 800af44:	9804      	ldr	r0, [sp, #16]
 800af46:	f7fe fe2f 	bl	8009ba8 <SendMessageToModule>
											break;
 800af4a:	2300      	movs	r3, #0
 800af4c:	4699      	mov	r9, r3
 800af4e:	f7ff f9b1 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	4b7b      	ldr	r3, [pc, #492]	; (800b144 <PxMessagingTask+0xf68>)
 800af56:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af58:	2202      	movs	r2, #2
 800af5a:	211f      	movs	r1, #31
 800af5c:	9804      	ldr	r0, [sp, #16]
 800af5e:	f7fe fe23 	bl	8009ba8 <SendMessageToModule>
											break;
 800af62:	2300      	movs	r3, #0
 800af64:	4699      	mov	r9, r3
 800af66:	f7ff f9a5 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800af6a:	8819      	ldrh	r1, [r3, #0]
 800af6c:	4a75      	ldr	r2, [pc, #468]	; (800b144 <PxMessagingTask+0xf68>)
 800af6e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	0a1b      	lsrs	r3, r3, #8
 800af74:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af76:	2203      	movs	r2, #3
 800af78:	211f      	movs	r1, #31
 800af7a:	9804      	ldr	r0, [sp, #16]
 800af7c:	f7fe fe14 	bl	8009ba8 <SendMessageToModule>
											break;
 800af80:	2300      	movs	r3, #0
 800af82:	4699      	mov	r9, r3
 800af84:	f7ff f996 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800af88:	8819      	ldrh	r1, [r3, #0]
 800af8a:	4a6e      	ldr	r2, [pc, #440]	; (800b144 <PxMessagingTask+0xf68>)
 800af8c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b21b      	sxth	r3, r3
 800af92:	121b      	asrs	r3, r3, #8
 800af94:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af96:	2203      	movs	r2, #3
 800af98:	211f      	movs	r1, #31
 800af9a:	9804      	ldr	r0, [sp, #16]
 800af9c:	f7fe fe04 	bl	8009ba8 <SendMessageToModule>
											break;
 800afa0:	2300      	movs	r3, #0
 800afa2:	4699      	mov	r9, r3
 800afa4:	f7ff f986 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800afa8:	6819      	ldr	r1, [r3, #0]
 800afaa:	4a66      	ldr	r2, [pc, #408]	; (800b144 <PxMessagingTask+0xf68>)
 800afac:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800afae:	6819      	ldr	r1, [r3, #0]
 800afb0:	0a09      	lsrs	r1, r1, #8
 800afb2:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800afb4:	6819      	ldr	r1, [r3, #0]
 800afb6:	0c09      	lsrs	r1, r1, #16
 800afb8:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	0e1b      	lsrs	r3, r3, #24
 800afbe:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800afc0:	2205      	movs	r2, #5
 800afc2:	211f      	movs	r1, #31
 800afc4:	9804      	ldr	r0, [sp, #16]
 800afc6:	f7fe fdef 	bl	8009ba8 <SendMessageToModule>
											break;
 800afca:	2300      	movs	r3, #0
 800afcc:	4699      	mov	r9, r3
 800afce:	f7ff f971 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	4a5b      	ldr	r2, [pc, #364]	; (800b144 <PxMessagingTask+0xf68>)
 800afd6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800afd8:	6819      	ldr	r1, [r3, #0]
 800afda:	1209      	asrs	r1, r1, #8
 800afdc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800afde:	6819      	ldr	r1, [r3, #0]
 800afe0:	1409      	asrs	r1, r1, #16
 800afe2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	161b      	asrs	r3, r3, #24
 800afe8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800afea:	2205      	movs	r2, #5
 800afec:	211f      	movs	r1, #31
 800afee:	9804      	ldr	r0, [sp, #16]
 800aff0:	f7fe fdda 	bl	8009ba8 <SendMessageToModule>
											break;
 800aff4:	2300      	movs	r3, #0
 800aff6:	4699      	mov	r9, r3
 800aff8:	f7ff f95c 	bl	800a2b4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800affc:	781a      	ldrb	r2, [r3, #0]
 800affe:	4b51      	ldr	r3, [pc, #324]	; (800b144 <PxMessagingTask+0xf68>)
 800b000:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b002:	4a56      	ldr	r2, [pc, #344]	; (800b15c <PxMessagingTask+0xf80>)
 800b004:	188a      	adds	r2, r1, r2
 800b006:	7812      	ldrb	r2, [r2, #0]
 800b008:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b00a:	4a55      	ldr	r2, [pc, #340]	; (800b160 <PxMessagingTask+0xf84>)
 800b00c:	188a      	adds	r2, r1, r2
 800b00e:	7812      	ldrb	r2, [r2, #0]
 800b010:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b012:	4a54      	ldr	r2, [pc, #336]	; (800b164 <PxMessagingTask+0xf88>)
 800b014:	4694      	mov	ip, r2
 800b016:	4461      	add	r1, ip
 800b018:	780a      	ldrb	r2, [r1, #0]
 800b01a:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800b01c:	2209      	movs	r2, #9
 800b01e:	211f      	movs	r1, #31
 800b020:	9804      	ldr	r0, [sp, #16]
 800b022:	f7fe fdc1 	bl	8009ba8 <SendMessageToModule>
											break;
 800b026:	2300      	movs	r3, #0
 800b028:	4699      	mov	r9, r3
 800b02a:	f7ff f943 	bl	800a2b4 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b02e:	4b4e      	ldr	r3, [pc, #312]	; (800b168 <PxMessagingTask+0xf8c>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2002      	movs	r0, #2
 800b036:	4240      	negs	r0, r0
 800b038:	17c1      	asrs	r1, r0, #31
 800b03a:	1812      	adds	r2, r2, r0
 800b03c:	414b      	adcs	r3, r1
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <PxMessagingTask+0xe80>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800b042:	4b4a      	ldr	r3, [pc, #296]	; (800b16c <PxMessagingTask+0xf90>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b10      	cmp	r3, #16
 800b048:	d101      	bne.n	800b04e <PxMessagingTask+0xe72>
 800b04a:	f000 fc1a 	bl	800b882 <PxMessagingTask+0x16a6>
								responseStatus =BOS_OK;
 800b04e:	4b47      	ldr	r3, [pc, #284]	; (800b16c <PxMessagingTask+0xf90>)
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	2300      	movs	r3, #0
 800b056:	4699      	mov	r9, r3
 800b058:	f7ff f92c 	bl	800a2b4 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <PxMessagingTask+0xe88>
 800b060:	2a01      	cmp	r2, #1
 800b062:	d8ee      	bhi.n	800b042 <PxMessagingTask+0xe66>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b064:	2138      	movs	r1, #56	; 0x38
 800b066:	4369      	muls	r1, r5
 800b068:	4a37      	ldr	r2, [pc, #220]	; (800b148 <PxMessagingTask+0xf6c>)
 800b06a:	1852      	adds	r2, r2, r1
 800b06c:	5d12      	ldrb	r2, [r2, r4]
 800b06e:	4940      	ldr	r1, [pc, #256]	; (800b170 <PxMessagingTask+0xf94>)
 800b070:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b072:	2a08      	cmp	r2, #8
 800b074:	d8e5      	bhi.n	800b042 <PxMessagingTask+0xe66>
 800b076:	0092      	lsls	r2, r2, #2
 800b078:	493e      	ldr	r1, [pc, #248]	; (800b174 <PxMessagingTask+0xf98>)
 800b07a:	588a      	ldr	r2, [r1, r2]
 800b07c:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b07e:	4b3b      	ldr	r3, [pc, #236]	; (800b16c <PxMessagingTask+0xf90>)
 800b080:	2210      	movs	r2, #16
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	2300      	movs	r3, #0
 800b086:	4699      	mov	r9, r3
 800b088:	f7ff f914 	bl	800a2b4 <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b08c:	4a36      	ldr	r2, [pc, #216]	; (800b168 <PxMessagingTask+0xf8c>)
 800b08e:	2038      	movs	r0, #56	; 0x38
 800b090:	4368      	muls	r0, r5
 800b092:	492d      	ldr	r1, [pc, #180]	; (800b148 <PxMessagingTask+0xf6c>)
 800b094:	1809      	adds	r1, r1, r0
 800b096:	1909      	adds	r1, r1, r4
 800b098:	784b      	ldrb	r3, [r1, #1]
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	2300      	movs	r3, #0
 800b09e:	6053      	str	r3, [r2, #4]
										break;
 800b0a0:	e7cf      	b.n	800b042 <PxMessagingTask+0xe66>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b0a2:	4a31      	ldr	r2, [pc, #196]	; (800b168 <PxMessagingTask+0xf8c>)
 800b0a4:	2038      	movs	r0, #56	; 0x38
 800b0a6:	4368      	muls	r0, r5
 800b0a8:	4927      	ldr	r1, [pc, #156]	; (800b148 <PxMessagingTask+0xf6c>)
 800b0aa:	1809      	adds	r1, r1, r0
 800b0ac:	1909      	adds	r1, r1, r4
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	56cb      	ldrsb	r3, [r1, r3]
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	17db      	asrs	r3, r3, #31
 800b0b6:	6053      	str	r3, [r2, #4]
										break;
 800b0b8:	e7c3      	b.n	800b042 <PxMessagingTask+0xe66>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800b0ba:	4a2b      	ldr	r2, [pc, #172]	; (800b168 <PxMessagingTask+0xf8c>)
 800b0bc:	2038      	movs	r0, #56	; 0x38
 800b0be:	4368      	muls	r0, r5
 800b0c0:	4921      	ldr	r1, [pc, #132]	; (800b148 <PxMessagingTask+0xf6c>)
 800b0c2:	1809      	adds	r1, r1, r0
 800b0c4:	1909      	adds	r1, r1, r4
 800b0c6:	788b      	ldrb	r3, [r1, #2]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	7849      	ldrb	r1, [r1, #1]
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	17db      	asrs	r3, r3, #31
 800b0d2:	6053      	str	r3, [r2, #4]
										break;
 800b0d4:	e7b5      	b.n	800b042 <PxMessagingTask+0xe66>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b0d6:	4a24      	ldr	r2, [pc, #144]	; (800b168 <PxMessagingTask+0xf8c>)
 800b0d8:	2038      	movs	r0, #56	; 0x38
 800b0da:	4368      	muls	r0, r5
 800b0dc:	491a      	ldr	r1, [pc, #104]	; (800b148 <PxMessagingTask+0xf6c>)
 800b0de:	1809      	adds	r1, r1, r0
 800b0e0:	1909      	adds	r1, r1, r4
 800b0e2:	788b      	ldrb	r3, [r1, #2]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	7849      	ldrb	r1, [r1, #1]
 800b0e8:	185b      	adds	r3, r3, r1
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	17db      	asrs	r3, r3, #31
 800b0ee:	6053      	str	r3, [r2, #4]
										break;
 800b0f0:	e7a7      	b.n	800b042 <PxMessagingTask+0xe66>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0f2:	4a1d      	ldr	r2, [pc, #116]	; (800b168 <PxMessagingTask+0xf8c>)
 800b0f4:	2038      	movs	r0, #56	; 0x38
 800b0f6:	4368      	muls	r0, r5
 800b0f8:	4913      	ldr	r1, [pc, #76]	; (800b148 <PxMessagingTask+0xf6c>)
 800b0fa:	1809      	adds	r1, r1, r0
 800b0fc:	1909      	adds	r1, r1, r4
 800b0fe:	788b      	ldrb	r3, [r1, #2]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	78c8      	ldrb	r0, [r1, #3]
 800b104:	0400      	lsls	r0, r0, #16
 800b106:	181b      	adds	r3, r3, r0
 800b108:	7848      	ldrb	r0, [r1, #1]
 800b10a:	181b      	adds	r3, r3, r0
 800b10c:	7909      	ldrb	r1, [r1, #4]
 800b10e:	0609      	lsls	r1, r1, #24
 800b110:	185b      	adds	r3, r3, r1
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	2300      	movs	r3, #0
 800b116:	6053      	str	r3, [r2, #4]
										break;
 800b118:	e793      	b.n	800b042 <PxMessagingTask+0xe66>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b11a:	4a13      	ldr	r2, [pc, #76]	; (800b168 <PxMessagingTask+0xf8c>)
 800b11c:	2038      	movs	r0, #56	; 0x38
 800b11e:	4368      	muls	r0, r5
 800b120:	4909      	ldr	r1, [pc, #36]	; (800b148 <PxMessagingTask+0xf6c>)
 800b122:	1809      	adds	r1, r1, r0
 800b124:	1909      	adds	r1, r1, r4
 800b126:	788b      	ldrb	r3, [r1, #2]
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	7848      	ldrb	r0, [r1, #1]
 800b12c:	181b      	adds	r3, r3, r0
 800b12e:	78c8      	ldrb	r0, [r1, #3]
 800b130:	0400      	lsls	r0, r0, #16
 800b132:	181b      	adds	r3, r3, r0
 800b134:	7909      	ldrb	r1, [r1, #4]
 800b136:	0609      	lsls	r1, r1, #24
 800b138:	185b      	adds	r3, r3, r1
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	17db      	asrs	r3, r3, #31
 800b13e:	6053      	str	r3, [r2, #4]
										break;
 800b140:	e77f      	b.n	800b042 <PxMessagingTask+0xe66>
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	200006d0 	.word	0x200006d0
 800b148:	2000054c 	.word	0x2000054c
 800b14c:	2000009c 	.word	0x2000009c
 800b150:	0801a044 	.word	0x0801a044
 800b154:	20006204 	.word	0x20006204
 800b158:	0801a064 	.word	0x0801a064
 800b15c:	20000001 	.word	0x20000001
 800b160:	20000002 	.word	0x20000002
 800b164:	20000003 	.word	0x20000003
 800b168:	20000888 	.word	0x20000888
 800b16c:	20000890 	.word	0x20000890
 800b170:	20000084 	.word	0x20000084
 800b174:	0801a084 	.word	0x0801a084
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b178:	4ad7      	ldr	r2, [pc, #860]	; (800b4d8 <PxMessagingTask+0x12fc>)
 800b17a:	2038      	movs	r0, #56	; 0x38
 800b17c:	4368      	muls	r0, r5
 800b17e:	49d7      	ldr	r1, [pc, #860]	; (800b4dc <PxMessagingTask+0x1300>)
 800b180:	1809      	adds	r1, r1, r0
 800b182:	1909      	adds	r1, r1, r4
 800b184:	788b      	ldrb	r3, [r1, #2]
 800b186:	021b      	lsls	r3, r3, #8
 800b188:	78c8      	ldrb	r0, [r1, #3]
 800b18a:	0400      	lsls	r0, r0, #16
 800b18c:	181b      	adds	r3, r3, r0
 800b18e:	7848      	ldrb	r0, [r1, #1]
 800b190:	181b      	adds	r3, r3, r0
 800b192:	7909      	ldrb	r1, [r1, #4]
 800b194:	0609      	lsls	r1, r1, #24
 800b196:	185b      	adds	r3, r3, r1
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	2300      	movs	r3, #0
 800b19c:	6053      	str	r3, [r2, #4]
										break;
 800b19e:	e750      	b.n	800b042 <PxMessagingTask+0xe66>
							responseStatus =BOS_OK; // Initialize response
 800b1a0:	4bcf      	ldr	r3, [pc, #828]	; (800b4e0 <PxMessagingTask+0x1304>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b1a6:	46a1      	mov	r9, r4
 800b1a8:	4bcc      	ldr	r3, [pc, #816]	; (800b4dc <PxMessagingTask+0x1300>)
 800b1aa:	199b      	adds	r3, r3, r6
 800b1ac:	5d1b      	ldrb	r3, [r3, r4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d100      	bne.n	800b1b4 <PxMessagingTask+0xfd8>
 800b1b2:	e10b      	b.n	800b3cc <PxMessagingTask+0x11f0>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b1b4:	2b1e      	cmp	r3, #30
 800b1b6:	d900      	bls.n	800b1ba <PxMessagingTask+0xfde>
 800b1b8:	e104      	b.n	800b3c4 <PxMessagingTask+0x11e8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b1ba:	1e5c      	subs	r4, r3, #1
 800b1bc:	00a2      	lsls	r2, r4, #2
 800b1be:	4bc9      	ldr	r3, [pc, #804]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b1c0:	58d1      	ldr	r1, [r2, r3]
 800b1c2:	0c0b      	lsrs	r3, r1, #16
 800b1c4:	2280      	movs	r2, #128	; 0x80
 800b1c6:	0592      	lsls	r2, r2, #22
 800b1c8:	4694      	mov	ip, r2
 800b1ca:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b1cc:	464a      	mov	r2, r9
 800b1ce:	1c57      	adds	r7, r2, #1
 800b1d0:	2038      	movs	r0, #56	; 0x38
 800b1d2:	4368      	muls	r0, r5
 800b1d4:	4ac1      	ldr	r2, [pc, #772]	; (800b4dc <PxMessagingTask+0x1300>)
 800b1d6:	1812      	adds	r2, r2, r0
 800b1d8:	5dd2      	ldrb	r2, [r2, r7]
 800b1da:	4693      	mov	fp, r2
 800b1dc:	3a01      	subs	r2, #1
 800b1de:	b2d0      	uxtb	r0, r2
 800b1e0:	2807      	cmp	r0, #7
 800b1e2:	d81b      	bhi.n	800b21c <PxMessagingTask+0x1040>
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	0092      	lsls	r2, r2, #2
 800b1e8:	48bf      	ldr	r0, [pc, #764]	; (800b4e8 <PxMessagingTask+0x130c>)
 800b1ea:	5882      	ldr	r2, [r0, r2]
 800b1ec:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b1ee:	070a      	lsls	r2, r1, #28
 800b1f0:	d109      	bne.n	800b206 <PxMessagingTask+0x102a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	f008 fc9e 	bl	8013b34 <malloc>
 800b1f8:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b1fa:	d00c      	beq.n	800b216 <PxMessagingTask+0x103a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b1fc:	00a4      	lsls	r4, r4, #2
 800b1fe:	0400      	lsls	r0, r0, #16
 800b200:	4458      	add	r0, fp
 800b202:	4ab8      	ldr	r2, [pc, #736]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b204:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b206:	2138      	movs	r1, #56	; 0x38
 800b208:	4369      	muls	r1, r5
 800b20a:	4ab4      	ldr	r2, [pc, #720]	; (800b4dc <PxMessagingTask+0x1300>)
 800b20c:	1852      	adds	r2, r2, r1
 800b20e:	444a      	add	r2, r9
 800b210:	7892      	ldrb	r2, [r2, #2]
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e002      	b.n	800b21c <PxMessagingTask+0x1040>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b216:	4bb2      	ldr	r3, [pc, #712]	; (800b4e0 <PxMessagingTask+0x1304>)
 800b218:	2212      	movs	r2, #18
 800b21a:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b21c:	2338      	movs	r3, #56	; 0x38
 800b21e:	436b      	muls	r3, r5
 800b220:	4aae      	ldr	r2, [pc, #696]	; (800b4dc <PxMessagingTask+0x1300>)
 800b222:	18d2      	adds	r2, r2, r3
 800b224:	464b      	mov	r3, r9
 800b226:	5cd3      	ldrb	r3, [r2, r3]
 800b228:	3b01      	subs	r3, #1
 800b22a:	0098      	lsls	r0, r3, #2
 800b22c:	49ad      	ldr	r1, [pc, #692]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b22e:	5841      	ldr	r1, [r0, r1]
 800b230:	5dd2      	ldrb	r2, [r2, r7]
 800b232:	200f      	movs	r0, #15
 800b234:	4008      	ands	r0, r1
 800b236:	4290      	cmp	r0, r2
 800b238:	d009      	beq.n	800b24e <PxMessagingTask+0x1072>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	48ab      	ldr	r0, [pc, #684]	; (800b4ec <PxMessagingTask+0x1310>)
 800b23e:	4684      	mov	ip, r0
 800b240:	4462      	add	r2, ip
 800b242:	400a      	ands	r2, r1
 800b244:	49a7      	ldr	r1, [pc, #668]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b246:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b248:	4ba5      	ldr	r3, [pc, #660]	; (800b4e0 <PxMessagingTask+0x1304>)
 800b24a:	2214      	movs	r2, #20
 800b24c:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800b24e:	4ba8      	ldr	r3, [pc, #672]	; (800b4f0 <PxMessagingTask+0x1314>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2240      	movs	r2, #64	; 0x40
 800b254:	4393      	bics	r3, r2
 800b256:	2200      	movs	r2, #0
 800b258:	4691      	mov	r9, r2
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d001      	beq.n	800b262 <PxMessagingTask+0x1086>
 800b25e:	f7ff f829 	bl	800a2b4 <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 800b262:	4b9f      	ldr	r3, [pc, #636]	; (800b4e0 <PxMessagingTask+0x1304>)
 800b264:	781a      	ldrb	r2, [r3, #0]
 800b266:	4ba3      	ldr	r3, [pc, #652]	; (800b4f4 <PxMessagingTask+0x1318>)
 800b268:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b26a:	2201      	movs	r2, #1
 800b26c:	2121      	movs	r1, #33	; 0x21
 800b26e:	9804      	ldr	r0, [sp, #16]
 800b270:	f7fe fc9a 	bl	8009ba8 <SendMessageToModule>
 800b274:	f7ff f81e 	bl	800a2b4 <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b278:	070a      	lsls	r2, r1, #28
 800b27a:	d10a      	bne.n	800b292 <PxMessagingTask+0x10b6>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b27c:	2001      	movs	r0, #1
 800b27e:	f008 fc59 	bl	8013b34 <malloc>
 800b282:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b284:	d100      	bne.n	800b288 <PxMessagingTask+0x10ac>
 800b286:	e37b      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b288:	00a4      	lsls	r4, r4, #2
 800b28a:	0400      	lsls	r0, r0, #16
 800b28c:	3002      	adds	r0, #2
 800b28e:	4a95      	ldr	r2, [pc, #596]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b290:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b292:	2138      	movs	r1, #56	; 0x38
 800b294:	4369      	muls	r1, r5
 800b296:	4a91      	ldr	r2, [pc, #580]	; (800b4dc <PxMessagingTask+0x1300>)
 800b298:	1852      	adds	r2, r2, r1
 800b29a:	444a      	add	r2, r9
 800b29c:	7892      	ldrb	r2, [r2, #2]
 800b29e:	b252      	sxtb	r2, r2
 800b2a0:	701a      	strb	r2, [r3, #0]
 800b2a2:	e7bb      	b.n	800b21c <PxMessagingTask+0x1040>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2a4:	070a      	lsls	r2, r1, #28
 800b2a6:	d10a      	bne.n	800b2be <PxMessagingTask+0x10e2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b2a8:	2002      	movs	r0, #2
 800b2aa:	f008 fc43 	bl	8013b34 <malloc>
 800b2ae:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2b0:	d100      	bne.n	800b2b4 <PxMessagingTask+0x10d8>
 800b2b2:	e365      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2b4:	00a4      	lsls	r4, r4, #2
 800b2b6:	0400      	lsls	r0, r0, #16
 800b2b8:	3003      	adds	r0, #3
 800b2ba:	4a8a      	ldr	r2, [pc, #552]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b2bc:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b2be:	2138      	movs	r1, #56	; 0x38
 800b2c0:	4369      	muls	r1, r5
 800b2c2:	4a86      	ldr	r2, [pc, #536]	; (800b4dc <PxMessagingTask+0x1300>)
 800b2c4:	1852      	adds	r2, r2, r1
 800b2c6:	444a      	add	r2, r9
 800b2c8:	78d1      	ldrb	r1, [r2, #3]
 800b2ca:	0209      	lsls	r1, r1, #8
 800b2cc:	7892      	ldrb	r2, [r2, #2]
 800b2ce:	1852      	adds	r2, r2, r1
 800b2d0:	b292      	uxth	r2, r2
 800b2d2:	801a      	strh	r2, [r3, #0]
 800b2d4:	e7a2      	b.n	800b21c <PxMessagingTask+0x1040>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2d6:	070a      	lsls	r2, r1, #28
 800b2d8:	d10a      	bne.n	800b2f0 <PxMessagingTask+0x1114>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b2da:	2002      	movs	r0, #2
 800b2dc:	f008 fc2a 	bl	8013b34 <malloc>
 800b2e0:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2e2:	d100      	bne.n	800b2e6 <PxMessagingTask+0x110a>
 800b2e4:	e34c      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2e6:	00a4      	lsls	r4, r4, #2
 800b2e8:	0400      	lsls	r0, r0, #16
 800b2ea:	3004      	adds	r0, #4
 800b2ec:	4a7d      	ldr	r2, [pc, #500]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b2ee:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b2f0:	2138      	movs	r1, #56	; 0x38
 800b2f2:	4369      	muls	r1, r5
 800b2f4:	4a79      	ldr	r2, [pc, #484]	; (800b4dc <PxMessagingTask+0x1300>)
 800b2f6:	1852      	adds	r2, r2, r1
 800b2f8:	444a      	add	r2, r9
 800b2fa:	78d1      	ldrb	r1, [r2, #3]
 800b2fc:	0209      	lsls	r1, r1, #8
 800b2fe:	7892      	ldrb	r2, [r2, #2]
 800b300:	1852      	adds	r2, r2, r1
 800b302:	b212      	sxth	r2, r2
 800b304:	801a      	strh	r2, [r3, #0]
 800b306:	e789      	b.n	800b21c <PxMessagingTask+0x1040>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b308:	070a      	lsls	r2, r1, #28
 800b30a:	d10a      	bne.n	800b322 <PxMessagingTask+0x1146>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b30c:	2004      	movs	r0, #4
 800b30e:	f008 fc11 	bl	8013b34 <malloc>
 800b312:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b314:	d100      	bne.n	800b318 <PxMessagingTask+0x113c>
 800b316:	e333      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b318:	00a4      	lsls	r4, r4, #2
 800b31a:	0400      	lsls	r0, r0, #16
 800b31c:	3005      	adds	r0, #5
 800b31e:	4a71      	ldr	r2, [pc, #452]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b320:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b322:	2238      	movs	r2, #56	; 0x38
 800b324:	436a      	muls	r2, r5
 800b326:	496d      	ldr	r1, [pc, #436]	; (800b4dc <PxMessagingTask+0x1300>)
 800b328:	1889      	adds	r1, r1, r2
 800b32a:	4449      	add	r1, r9
 800b32c:	78ca      	ldrb	r2, [r1, #3]
 800b32e:	0212      	lsls	r2, r2, #8
 800b330:	7908      	ldrb	r0, [r1, #4]
 800b332:	0400      	lsls	r0, r0, #16
 800b334:	1812      	adds	r2, r2, r0
 800b336:	7888      	ldrb	r0, [r1, #2]
 800b338:	1812      	adds	r2, r2, r0
 800b33a:	7949      	ldrb	r1, [r1, #5]
 800b33c:	0609      	lsls	r1, r1, #24
 800b33e:	1852      	adds	r2, r2, r1
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	e76b      	b.n	800b21c <PxMessagingTask+0x1040>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b344:	070a      	lsls	r2, r1, #28
 800b346:	d10a      	bne.n	800b35e <PxMessagingTask+0x1182>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b348:	2004      	movs	r0, #4
 800b34a:	f008 fbf3 	bl	8013b34 <malloc>
 800b34e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b350:	d100      	bne.n	800b354 <PxMessagingTask+0x1178>
 800b352:	e315      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b354:	00a4      	lsls	r4, r4, #2
 800b356:	0400      	lsls	r0, r0, #16
 800b358:	3006      	adds	r0, #6
 800b35a:	4a62      	ldr	r2, [pc, #392]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b35c:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b35e:	2238      	movs	r2, #56	; 0x38
 800b360:	436a      	muls	r2, r5
 800b362:	495e      	ldr	r1, [pc, #376]	; (800b4dc <PxMessagingTask+0x1300>)
 800b364:	1889      	adds	r1, r1, r2
 800b366:	4449      	add	r1, r9
 800b368:	78ca      	ldrb	r2, [r1, #3]
 800b36a:	0212      	lsls	r2, r2, #8
 800b36c:	7888      	ldrb	r0, [r1, #2]
 800b36e:	1812      	adds	r2, r2, r0
 800b370:	7908      	ldrb	r0, [r1, #4]
 800b372:	0400      	lsls	r0, r0, #16
 800b374:	1812      	adds	r2, r2, r0
 800b376:	7949      	ldrb	r1, [r1, #5]
 800b378:	0609      	lsls	r1, r1, #24
 800b37a:	1852      	adds	r2, r2, r1
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e74d      	b.n	800b21c <PxMessagingTask+0x1040>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b380:	070a      	lsls	r2, r1, #28
 800b382:	d10a      	bne.n	800b39a <PxMessagingTask+0x11be>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b384:	2004      	movs	r0, #4
 800b386:	f008 fbd5 	bl	8013b34 <malloc>
 800b38a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b38c:	d100      	bne.n	800b390 <PxMessagingTask+0x11b4>
 800b38e:	e2f7      	b.n	800b980 <PxMessagingTask+0x17a4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b390:	00a4      	lsls	r4, r4, #2
 800b392:	0400      	lsls	r0, r0, #16
 800b394:	3007      	adds	r0, #7
 800b396:	4a53      	ldr	r2, [pc, #332]	; (800b4e4 <PxMessagingTask+0x1308>)
 800b398:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b39a:	2238      	movs	r2, #56	; 0x38
 800b39c:	436a      	muls	r2, r5
 800b39e:	494f      	ldr	r1, [pc, #316]	; (800b4dc <PxMessagingTask+0x1300>)
 800b3a0:	1889      	adds	r1, r1, r2
 800b3a2:	4449      	add	r1, r9
 800b3a4:	78ca      	ldrb	r2, [r1, #3]
 800b3a6:	0212      	lsls	r2, r2, #8
 800b3a8:	7908      	ldrb	r0, [r1, #4]
 800b3aa:	0400      	lsls	r0, r0, #16
 800b3ac:	1812      	adds	r2, r2, r0
 800b3ae:	7888      	ldrb	r0, [r1, #2]
 800b3b0:	1812      	adds	r2, r2, r0
 800b3b2:	7949      	ldrb	r1, [r1, #5]
 800b3b4:	0609      	lsls	r1, r1, #24
 800b3b6:	1852      	adds	r2, r2, r1
 800b3b8:	4947      	ldr	r1, [pc, #284]	; (800b4d8 <PxMessagingTask+0x12fc>)
 800b3ba:	600a      	str	r2, [r1, #0]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e72b      	b.n	800b21c <PxMessagingTask+0x1040>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b3c4:	4b46      	ldr	r3, [pc, #280]	; (800b4e0 <PxMessagingTask+0x1304>)
 800b3c6:	2213      	movs	r2, #19
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	e740      	b.n	800b24e <PxMessagingTask+0x1072>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b3cc:	2238      	movs	r2, #56	; 0x38
 800b3ce:	436a      	muls	r2, r5
 800b3d0:	4b42      	ldr	r3, [pc, #264]	; (800b4dc <PxMessagingTask+0x1300>)
 800b3d2:	189b      	adds	r3, r3, r2
 800b3d4:	191b      	adds	r3, r3, r4
 800b3d6:	789c      	ldrb	r4, [r3, #2]
 800b3d8:	0624      	lsls	r4, r4, #24
 800b3da:	78da      	ldrb	r2, [r3, #3]
 800b3dc:	0412      	lsls	r2, r2, #16
 800b3de:	18a4      	adds	r4, r4, r2
 800b3e0:	795a      	ldrb	r2, [r3, #5]
 800b3e2:	18a4      	adds	r4, r4, r2
 800b3e4:	791b      	ldrb	r3, [r3, #4]
 800b3e6:	021b      	lsls	r3, r3, #8
 800b3e8:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b3ea:	23e0      	movs	r3, #224	; 0xe0
 800b3ec:	061b      	lsls	r3, r3, #24
 800b3ee:	18e2      	adds	r2, r4, r3
 800b3f0:	4b41      	ldr	r3, [pc, #260]	; (800b4f8 <PxMessagingTask+0x131c>)
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d900      	bls.n	800b3f8 <PxMessagingTask+0x121c>
 800b3f6:	e083      	b.n	800b500 <PxMessagingTask+0x1324>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b3f8:	2238      	movs	r2, #56	; 0x38
 800b3fa:	436a      	muls	r2, r5
 800b3fc:	4b37      	ldr	r3, [pc, #220]	; (800b4dc <PxMessagingTask+0x1300>)
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	444b      	add	r3, r9
 800b402:	785b      	ldrb	r3, [r3, #1]
 800b404:	3b01      	subs	r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	2a07      	cmp	r2, #7
 800b40a:	d900      	bls.n	800b40e <PxMessagingTask+0x1232>
 800b40c:	e71f      	b.n	800b24e <PxMessagingTask+0x1072>
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a3a      	ldr	r2, [pc, #232]	; (800b4fc <PxMessagingTask+0x1320>)
 800b414:	58d3      	ldr	r3, [r2, r3]
 800b416:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b418:	2238      	movs	r2, #56	; 0x38
 800b41a:	436a      	muls	r2, r5
 800b41c:	4b2f      	ldr	r3, [pc, #188]	; (800b4dc <PxMessagingTask+0x1300>)
 800b41e:	189b      	adds	r3, r3, r2
 800b420:	444b      	add	r3, r9
 800b422:	799b      	ldrb	r3, [r3, #6]
 800b424:	7023      	strb	r3, [r4, #0]
											break;
 800b426:	e712      	b.n	800b24e <PxMessagingTask+0x1072>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b428:	2238      	movs	r2, #56	; 0x38
 800b42a:	436a      	muls	r2, r5
 800b42c:	4b2b      	ldr	r3, [pc, #172]	; (800b4dc <PxMessagingTask+0x1300>)
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	444b      	add	r3, r9
 800b432:	799b      	ldrb	r3, [r3, #6]
 800b434:	b25b      	sxtb	r3, r3
 800b436:	7023      	strb	r3, [r4, #0]
											break;
 800b438:	e709      	b.n	800b24e <PxMessagingTask+0x1072>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b43a:	2238      	movs	r2, #56	; 0x38
 800b43c:	436a      	muls	r2, r5
 800b43e:	4b27      	ldr	r3, [pc, #156]	; (800b4dc <PxMessagingTask+0x1300>)
 800b440:	189b      	adds	r3, r3, r2
 800b442:	444b      	add	r3, r9
 800b444:	79da      	ldrb	r2, [r3, #7]
 800b446:	0212      	lsls	r2, r2, #8
 800b448:	799b      	ldrb	r3, [r3, #6]
 800b44a:	189b      	adds	r3, r3, r2
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	8023      	strh	r3, [r4, #0]
											break;
 800b450:	e6fd      	b.n	800b24e <PxMessagingTask+0x1072>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b452:	2238      	movs	r2, #56	; 0x38
 800b454:	436a      	muls	r2, r5
 800b456:	4b21      	ldr	r3, [pc, #132]	; (800b4dc <PxMessagingTask+0x1300>)
 800b458:	189b      	adds	r3, r3, r2
 800b45a:	444b      	add	r3, r9
 800b45c:	79da      	ldrb	r2, [r3, #7]
 800b45e:	0212      	lsls	r2, r2, #8
 800b460:	799b      	ldrb	r3, [r3, #6]
 800b462:	189b      	adds	r3, r3, r2
 800b464:	b21b      	sxth	r3, r3
 800b466:	8023      	strh	r3, [r4, #0]
											break;
 800b468:	e6f1      	b.n	800b24e <PxMessagingTask+0x1072>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b46a:	2338      	movs	r3, #56	; 0x38
 800b46c:	436b      	muls	r3, r5
 800b46e:	4a1b      	ldr	r2, [pc, #108]	; (800b4dc <PxMessagingTask+0x1300>)
 800b470:	18d2      	adds	r2, r2, r3
 800b472:	444a      	add	r2, r9
 800b474:	79d3      	ldrb	r3, [r2, #7]
 800b476:	021b      	lsls	r3, r3, #8
 800b478:	7a11      	ldrb	r1, [r2, #8]
 800b47a:	0409      	lsls	r1, r1, #16
 800b47c:	185b      	adds	r3, r3, r1
 800b47e:	7991      	ldrb	r1, [r2, #6]
 800b480:	185b      	adds	r3, r3, r1
 800b482:	7a52      	ldrb	r2, [r2, #9]
 800b484:	0612      	lsls	r2, r2, #24
 800b486:	189b      	adds	r3, r3, r2
 800b488:	6023      	str	r3, [r4, #0]
											break;
 800b48a:	e6e0      	b.n	800b24e <PxMessagingTask+0x1072>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b48c:	2338      	movs	r3, #56	; 0x38
 800b48e:	436b      	muls	r3, r5
 800b490:	4a12      	ldr	r2, [pc, #72]	; (800b4dc <PxMessagingTask+0x1300>)
 800b492:	18d2      	adds	r2, r2, r3
 800b494:	444a      	add	r2, r9
 800b496:	79d3      	ldrb	r3, [r2, #7]
 800b498:	021b      	lsls	r3, r3, #8
 800b49a:	7991      	ldrb	r1, [r2, #6]
 800b49c:	185b      	adds	r3, r3, r1
 800b49e:	7a11      	ldrb	r1, [r2, #8]
 800b4a0:	0409      	lsls	r1, r1, #16
 800b4a2:	185b      	adds	r3, r3, r1
 800b4a4:	7a52      	ldrb	r2, [r2, #9]
 800b4a6:	0612      	lsls	r2, r2, #24
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	6023      	str	r3, [r4, #0]
											break;
 800b4ac:	e6cf      	b.n	800b24e <PxMessagingTask+0x1072>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b4ae:	2338      	movs	r3, #56	; 0x38
 800b4b0:	436b      	muls	r3, r5
 800b4b2:	4a0a      	ldr	r2, [pc, #40]	; (800b4dc <PxMessagingTask+0x1300>)
 800b4b4:	18d2      	adds	r2, r2, r3
 800b4b6:	444a      	add	r2, r9
 800b4b8:	79d3      	ldrb	r3, [r2, #7]
 800b4ba:	021b      	lsls	r3, r3, #8
 800b4bc:	7a11      	ldrb	r1, [r2, #8]
 800b4be:	0409      	lsls	r1, r1, #16
 800b4c0:	185b      	adds	r3, r3, r1
 800b4c2:	7991      	ldrb	r1, [r2, #6]
 800b4c4:	185b      	adds	r3, r3, r1
 800b4c6:	7a52      	ldrb	r2, [r2, #9]
 800b4c8:	0612      	lsls	r2, r2, #24
 800b4ca:	189b      	adds	r3, r3, r2
 800b4cc:	4a02      	ldr	r2, [pc, #8]	; (800b4d8 <PxMessagingTask+0x12fc>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b4d4:	6023      	str	r3, [r4, #0]
											break;
 800b4d6:	e6ba      	b.n	800b24e <PxMessagingTask+0x1072>
 800b4d8:	20000888 	.word	0x20000888
 800b4dc:	2000054c 	.word	0x2000054c
 800b4e0:	20000890 	.word	0x20000890
 800b4e4:	20006204 	.word	0x20006204
 800b4e8:	0801a0a8 	.word	0x0801a0a8
 800b4ec:	0000fff0 	.word	0x0000fff0
 800b4f0:	200061fc 	.word	0x200061fc
 800b4f4:	200006d0 	.word	0x200006d0
 800b4f8:	00007fff 	.word	0x00007fff
 800b4fc:	0801a0c8 	.word	0x0801a0c8
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b500:	4ae2      	ldr	r2, [pc, #904]	; (800b88c <PxMessagingTask+0x16b0>)
 800b502:	23f8      	movs	r3, #248	; 0xf8
 800b504:	061b      	lsls	r3, r3, #24
 800b506:	18e3      	adds	r3, r4, r3
 800b508:	4293      	cmp	r3, r2
 800b50a:	d900      	bls.n	800b50e <PxMessagingTask+0x1332>
 800b50c:	e0a6      	b.n	800b65c <PxMessagingTask+0x1480>
									HAL_FLASH_Unlock();
 800b50e:	f006 fa91 	bl	8011a34 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b512:	2f22      	cmp	r7, #34	; 0x22
 800b514:	d111      	bne.n	800b53a <PxMessagingTask+0x135e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b516:	2300      	movs	r3, #0
 800b518:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b51a:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b51c:	3301      	adds	r3, #1
 800b51e:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b520:	a912      	add	r1, sp, #72	; 0x48
 800b522:	a813      	add	r0, sp, #76	; 0x4c
 800b524:	f006 fb5a 	bl	8011bdc <HAL_FLASHEx_Erase>
 800b528:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d102      	bne.n	800b534 <PxMessagingTask+0x1358>
 800b52e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b530:	3301      	adds	r3, #1
 800b532:	d002      	beq.n	800b53a <PxMessagingTask+0x135e>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b534:	4bd6      	ldr	r3, [pc, #856]	; (800b890 <PxMessagingTask+0x16b4>)
 800b536:	2216      	movs	r2, #22
 800b538:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b53a:	4bd5      	ldr	r3, [pc, #852]	; (800b890 <PxMessagingTask+0x16b4>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d116      	bne.n	800b570 <PxMessagingTask+0x1394>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b542:	2238      	movs	r2, #56	; 0x38
 800b544:	436a      	muls	r2, r5
 800b546:	4bd3      	ldr	r3, [pc, #844]	; (800b894 <PxMessagingTask+0x16b8>)
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	444b      	add	r3, r9
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	3b01      	subs	r3, #1
 800b550:	b2da      	uxtb	r2, r3
 800b552:	2a07      	cmp	r2, #7
 800b554:	d80c      	bhi.n	800b570 <PxMessagingTask+0x1394>
 800b556:	b2db      	uxtb	r3, r3
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4acf      	ldr	r2, [pc, #828]	; (800b898 <PxMessagingTask+0x16bc>)
 800b55c:	58d3      	ldr	r3, [r2, r3]
 800b55e:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b560:	8823      	ldrh	r3, [r4, #0]
 800b562:	b29b      	uxth	r3, r3
 800b564:	4acd      	ldr	r2, [pc, #820]	; (800b89c <PxMessagingTask+0x16c0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00c      	beq.n	800b584 <PxMessagingTask+0x13a8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b56a:	4bc9      	ldr	r3, [pc, #804]	; (800b890 <PxMessagingTask+0x16b4>)
 800b56c:	2216      	movs	r2, #22
 800b56e:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b570:	f006 fa72 	bl	8011a58 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d100      	bne.n	800b57c <PxMessagingTask+0x13a0>
 800b57a:	e668      	b.n	800b24e <PxMessagingTask+0x1072>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b57c:	4bc4      	ldr	r3, [pc, #784]	; (800b890 <PxMessagingTask+0x16b4>)
 800b57e:	2216      	movs	r2, #22
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	e664      	b.n	800b24e <PxMessagingTask+0x1072>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b584:	2238      	movs	r2, #56	; 0x38
 800b586:	436a      	muls	r2, r5
 800b588:	4bc2      	ldr	r3, [pc, #776]	; (800b894 <PxMessagingTask+0x16b8>)
 800b58a:	189b      	adds	r3, r3, r2
 800b58c:	444b      	add	r3, r9
 800b58e:	799a      	ldrb	r2, [r3, #6]
 800b590:	2300      	movs	r3, #0
 800b592:	49c3      	ldr	r1, [pc, #780]	; (800b8a0 <PxMessagingTask+0x16c4>)
 800b594:	600a      	str	r2, [r1, #0]
 800b596:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b598:	0021      	movs	r1, r4
 800b59a:	2001      	movs	r0, #1
 800b59c:	f006 fa94 	bl	8011ac8 <HAL_FLASH_Program>
 800b5a0:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b5a2:	e7e5      	b.n	800b570 <PxMessagingTask+0x1394>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b5a4:	8823      	ldrh	r3, [r4, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4abc      	ldr	r2, [pc, #752]	; (800b89c <PxMessagingTask+0x16c0>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d003      	beq.n	800b5b6 <PxMessagingTask+0x13da>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5ae:	4bb8      	ldr	r3, [pc, #736]	; (800b890 <PxMessagingTask+0x16b4>)
 800b5b0:	2216      	movs	r2, #22
 800b5b2:	701a      	strb	r2, [r3, #0]
													break;
 800b5b4:	e7dc      	b.n	800b570 <PxMessagingTask+0x1394>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b5b6:	2238      	movs	r2, #56	; 0x38
 800b5b8:	436a      	muls	r2, r5
 800b5ba:	4bb6      	ldr	r3, [pc, #728]	; (800b894 <PxMessagingTask+0x16b8>)
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	444b      	add	r3, r9
 800b5c0:	79da      	ldrb	r2, [r3, #7]
 800b5c2:	0212      	lsls	r2, r2, #8
 800b5c4:	799b      	ldrb	r3, [r3, #6]
 800b5c6:	18d2      	adds	r2, r2, r3
 800b5c8:	17d3      	asrs	r3, r2, #31
 800b5ca:	49b5      	ldr	r1, [pc, #724]	; (800b8a0 <PxMessagingTask+0x16c4>)
 800b5cc:	600a      	str	r2, [r1, #0]
 800b5ce:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b5d0:	0021      	movs	r1, r4
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	f006 fa78 	bl	8011ac8 <HAL_FLASH_Program>
 800b5d8:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b5da:	e7c9      	b.n	800b570 <PxMessagingTask+0x1394>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	d003      	beq.n	800b5ea <PxMessagingTask+0x140e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5e2:	4bab      	ldr	r3, [pc, #684]	; (800b890 <PxMessagingTask+0x16b4>)
 800b5e4:	2216      	movs	r2, #22
 800b5e6:	701a      	strb	r2, [r3, #0]
													break;
 800b5e8:	e7c2      	b.n	800b570 <PxMessagingTask+0x1394>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b5ea:	2238      	movs	r2, #56	; 0x38
 800b5ec:	436a      	muls	r2, r5
 800b5ee:	4ba9      	ldr	r3, [pc, #676]	; (800b894 <PxMessagingTask+0x16b8>)
 800b5f0:	189b      	adds	r3, r3, r2
 800b5f2:	444b      	add	r3, r9
 800b5f4:	79da      	ldrb	r2, [r3, #7]
 800b5f6:	0212      	lsls	r2, r2, #8
 800b5f8:	7a19      	ldrb	r1, [r3, #8]
 800b5fa:	0409      	lsls	r1, r1, #16
 800b5fc:	1852      	adds	r2, r2, r1
 800b5fe:	7999      	ldrb	r1, [r3, #6]
 800b600:	1852      	adds	r2, r2, r1
 800b602:	7a5b      	ldrb	r3, [r3, #9]
 800b604:	061b      	lsls	r3, r3, #24
 800b606:	18d2      	adds	r2, r2, r3
 800b608:	2300      	movs	r3, #0
 800b60a:	49a5      	ldr	r1, [pc, #660]	; (800b8a0 <PxMessagingTask+0x16c4>)
 800b60c:	600a      	str	r2, [r1, #0]
 800b60e:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b610:	0021      	movs	r1, r4
 800b612:	2002      	movs	r0, #2
 800b614:	f006 fa58 	bl	8011ac8 <HAL_FLASH_Program>
 800b618:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b61a:	e7a9      	b.n	800b570 <PxMessagingTask+0x1394>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	3301      	adds	r3, #1
 800b620:	d003      	beq.n	800b62a <PxMessagingTask+0x144e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b622:	4b9b      	ldr	r3, [pc, #620]	; (800b890 <PxMessagingTask+0x16b4>)
 800b624:	2216      	movs	r2, #22
 800b626:	701a      	strb	r2, [r3, #0]
													break;
 800b628:	e7a2      	b.n	800b570 <PxMessagingTask+0x1394>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b62a:	2238      	movs	r2, #56	; 0x38
 800b62c:	436a      	muls	r2, r5
 800b62e:	4b99      	ldr	r3, [pc, #612]	; (800b894 <PxMessagingTask+0x16b8>)
 800b630:	189b      	adds	r3, r3, r2
 800b632:	444b      	add	r3, r9
 800b634:	79da      	ldrb	r2, [r3, #7]
 800b636:	0212      	lsls	r2, r2, #8
 800b638:	7a19      	ldrb	r1, [r3, #8]
 800b63a:	0409      	lsls	r1, r1, #16
 800b63c:	1852      	adds	r2, r2, r1
 800b63e:	7999      	ldrb	r1, [r3, #6]
 800b640:	1852      	adds	r2, r2, r1
 800b642:	7a5b      	ldrb	r3, [r3, #9]
 800b644:	061b      	lsls	r3, r3, #24
 800b646:	18d2      	adds	r2, r2, r3
 800b648:	2300      	movs	r3, #0
 800b64a:	4995      	ldr	r1, [pc, #596]	; (800b8a0 <PxMessagingTask+0x16c4>)
 800b64c:	600a      	str	r2, [r1, #0]
 800b64e:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b650:	0021      	movs	r1, r4
 800b652:	2003      	movs	r0, #3
 800b654:	f006 fa38 	bl	8011ac8 <HAL_FLASH_Program>
 800b658:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b65a:	e789      	b.n	800b570 <PxMessagingTask+0x1394>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b65c:	4b8c      	ldr	r3, [pc, #560]	; (800b890 <PxMessagingTask+0x16b4>)
 800b65e:	2215      	movs	r2, #21
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e5f4      	b.n	800b24e <PxMessagingTask+0x1072>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b664:	4b8b      	ldr	r3, [pc, #556]	; (800b894 <PxMessagingTask+0x16b8>)
 800b666:	199b      	adds	r3, r3, r6
 800b668:	5d1a      	ldrb	r2, [r3, r4]
 800b66a:	4b89      	ldr	r3, [pc, #548]	; (800b890 <PxMessagingTask+0x16b4>)
 800b66c:	701a      	strb	r2, [r3, #0]
							break;
 800b66e:	2300      	movs	r3, #0
 800b670:	4699      	mov	r9, r3
 800b672:	f7fe fe1f 	bl	800a2b4 <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b676:	9a06      	ldr	r2, [sp, #24]
 800b678:	3a01      	subs	r2, #1
 800b67a:	b292      	uxth	r2, r2
 800b67c:	1c61      	adds	r1, r4, #1
 800b67e:	4451      	add	r1, sl
 800b680:	4b84      	ldr	r3, [pc, #528]	; (800b894 <PxMessagingTask+0x16b8>)
 800b682:	18c9      	adds	r1, r1, r3
 800b684:	199b      	adds	r3, r3, r6
 800b686:	5d18      	ldrb	r0, [r3, r4]
 800b688:	230a      	movs	r3, #10
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	f002 fe74 	bl	800e378 <writePxMutex>
							break;
 800b690:	2300      	movs	r3, #0
 800b692:	4699      	mov	r9, r3
 800b694:	f7fe fe0e 	bl	800a2b4 <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 800b698:	0027      	movs	r7, r4
 800b69a:	4b7e      	ldr	r3, [pc, #504]	; (800b894 <PxMessagingTask+0x16b8>)
 800b69c:	199b      	adds	r3, r3, r6
 800b69e:	5d18      	ldrb	r0, [r3, r4]
 800b6a0:	282b      	cmp	r0, #43	; 0x2b
 800b6a2:	d900      	bls.n	800b6a6 <PxMessagingTask+0x14ca>
 800b6a4:	e09e      	b.n	800b7e4 <PxMessagingTask+0x1608>
 800b6a6:	0083      	lsls	r3, r0, #2
 800b6a8:	4a7e      	ldr	r2, [pc, #504]	; (800b8a4 <PxMessagingTask+0x16c8>)
 800b6aa:	58d3      	ldr	r3, [r2, r3]
 800b6ac:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b6ae:	2238      	movs	r2, #56	; 0x38
 800b6b0:	436a      	muls	r2, r5
 800b6b2:	4b78      	ldr	r3, [pc, #480]	; (800b894 <PxMessagingTask+0x16b8>)
 800b6b4:	189b      	adds	r3, r3, r2
 800b6b6:	191f      	adds	r7, r3, r4
 800b6b8:	78bb      	ldrb	r3, [r7, #2]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	78fa      	ldrb	r2, [r7, #3]
 800b6be:	0412      	lsls	r2, r2, #16
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	787a      	ldrb	r2, [r7, #1]
 800b6c4:	189b      	adds	r3, r3, r2
 800b6c6:	793a      	ldrb	r2, [r7, #4]
 800b6c8:	0612      	lsls	r2, r2, #24
 800b6ca:	189b      	adds	r3, r3, r2
 800b6cc:	4a76      	ldr	r2, [pc, #472]	; (800b8a8 <PxMessagingTask+0x16cc>)
 800b6ce:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b6d0:	79bb      	ldrb	r3, [r7, #6]
 800b6d2:	021b      	lsls	r3, r3, #8
 800b6d4:	79f9      	ldrb	r1, [r7, #7]
 800b6d6:	0409      	lsls	r1, r1, #16
 800b6d8:	185b      	adds	r3, r3, r1
 800b6da:	7979      	ldrb	r1, [r7, #5]
 800b6dc:	185b      	adds	r3, r3, r1
 800b6de:	7a39      	ldrb	r1, [r7, #8]
 800b6e0:	0609      	lsls	r1, r1, #24
 800b6e2:	185b      	adds	r3, r3, r1
 800b6e4:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b6e6:	7abb      	ldrb	r3, [r7, #10]
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	7af9      	ldrb	r1, [r7, #11]
 800b6ec:	0409      	lsls	r1, r1, #16
 800b6ee:	185b      	adds	r3, r3, r1
 800b6f0:	7a79      	ldrb	r1, [r7, #9]
 800b6f2:	185b      	adds	r3, r3, r1
 800b6f4:	7b39      	ldrb	r1, [r7, #12]
 800b6f6:	0609      	lsls	r1, r1, #24
 800b6f8:	185b      	adds	r3, r3, r1
 800b6fa:	6093      	str	r3, [r2, #8]
									break;
 800b6fc:	e072      	b.n	800b7e4 <PxMessagingTask+0x1608>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b6fe:	2238      	movs	r2, #56	; 0x38
 800b700:	436a      	muls	r2, r5
 800b702:	4b64      	ldr	r3, [pc, #400]	; (800b894 <PxMessagingTask+0x16b8>)
 800b704:	189b      	adds	r3, r3, r2
 800b706:	191f      	adds	r7, r3, r4
 800b708:	78bb      	ldrb	r3, [r7, #2]
 800b70a:	021b      	lsls	r3, r3, #8
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	0412      	lsls	r2, r2, #16
 800b710:	189b      	adds	r3, r3, r2
 800b712:	787a      	ldrb	r2, [r7, #1]
 800b714:	189b      	adds	r3, r3, r2
 800b716:	793a      	ldrb	r2, [r7, #4]
 800b718:	0612      	lsls	r2, r2, #24
 800b71a:	189b      	adds	r3, r3, r2
 800b71c:	4a62      	ldr	r2, [pc, #392]	; (800b8a8 <PxMessagingTask+0x16cc>)
 800b71e:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b720:	79bb      	ldrb	r3, [r7, #6]
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	79f9      	ldrb	r1, [r7, #7]
 800b726:	0409      	lsls	r1, r1, #16
 800b728:	185b      	adds	r3, r3, r1
 800b72a:	7979      	ldrb	r1, [r7, #5]
 800b72c:	185b      	adds	r3, r3, r1
 800b72e:	7a39      	ldrb	r1, [r7, #8]
 800b730:	0609      	lsls	r1, r1, #24
 800b732:	185b      	adds	r3, r3, r1
 800b734:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b736:	7abb      	ldrb	r3, [r7, #10]
 800b738:	021b      	lsls	r3, r3, #8
 800b73a:	7af9      	ldrb	r1, [r7, #11]
 800b73c:	0409      	lsls	r1, r1, #16
 800b73e:	185b      	adds	r3, r3, r1
 800b740:	7a79      	ldrb	r1, [r7, #9]
 800b742:	185b      	adds	r3, r3, r1
 800b744:	7b39      	ldrb	r1, [r7, #12]
 800b746:	0609      	lsls	r1, r1, #24
 800b748:	185b      	adds	r3, r3, r1
 800b74a:	6153      	str	r3, [r2, #20]
									break;
 800b74c:	e04a      	b.n	800b7e4 <PxMessagingTask+0x1608>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b74e:	2338      	movs	r3, #56	; 0x38
 800b750:	436b      	muls	r3, r5
 800b752:	4a50      	ldr	r2, [pc, #320]	; (800b894 <PxMessagingTask+0x16b8>)
 800b754:	18d2      	adds	r2, r2, r3
 800b756:	1912      	adds	r2, r2, r4
 800b758:	7893      	ldrb	r3, [r2, #2]
 800b75a:	021b      	lsls	r3, r3, #8
 800b75c:	78d1      	ldrb	r1, [r2, #3]
 800b75e:	0409      	lsls	r1, r1, #16
 800b760:	185b      	adds	r3, r3, r1
 800b762:	7851      	ldrb	r1, [r2, #1]
 800b764:	185b      	adds	r3, r3, r1
 800b766:	7912      	ldrb	r2, [r2, #4]
 800b768:	0612      	lsls	r2, r2, #24
 800b76a:	189b      	adds	r3, r3, r2
 800b76c:	4a4e      	ldr	r2, [pc, #312]	; (800b8a8 <PxMessagingTask+0x16cc>)
 800b76e:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b770:	4b4e      	ldr	r3, [pc, #312]	; (800b8ac <PxMessagingTask+0x16d0>)
 800b772:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b774:	2238      	movs	r2, #56	; 0x38
 800b776:	436a      	muls	r2, r5
 800b778:	4b46      	ldr	r3, [pc, #280]	; (800b894 <PxMessagingTask+0x16b8>)
 800b77a:	189b      	adds	r3, r3, r2
 800b77c:	19db      	adds	r3, r3, r7
 800b77e:	785b      	ldrb	r3, [r3, #1]
 800b780:	4a4b      	ldr	r2, [pc, #300]	; (800b8b0 <PxMessagingTask+0x16d4>)
 800b782:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b784:	2b00      	cmp	r3, #0
 800b786:	d134      	bne.n	800b7f2 <PxMessagingTask+0x1616>
										ADCSelectChannel(ADCPort,"top");
 800b788:	4c4a      	ldr	r4, [pc, #296]	; (800b8b4 <PxMessagingTask+0x16d8>)
 800b78a:	0021      	movs	r1, r4
 800b78c:	f7fd fbc2 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b790:	4b46      	ldr	r3, [pc, #280]	; (800b8ac <PxMessagingTask+0x16d0>)
 800b792:	7818      	ldrb	r0, [r3, #0]
 800b794:	4a48      	ldr	r2, [pc, #288]	; (800b8b8 <PxMessagingTask+0x16dc>)
 800b796:	0021      	movs	r1, r4
 800b798:	f7fd fbea 	bl	8008f70 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b79c:	4947      	ldr	r1, [pc, #284]	; (800b8bc <PxMessagingTask+0x16e0>)
 800b79e:	4848      	ldr	r0, [pc, #288]	; (800b8c0 <PxMessagingTask+0x16e4>)
 800b7a0:	f7fd fa30 	bl	8008c04 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b7a4:	4c3b      	ldr	r4, [pc, #236]	; (800b894 <PxMessagingTask+0x16b8>)
 800b7a6:	19a4      	adds	r4, r4, r6
 800b7a8:	5de0      	ldrb	r0, [r4, r7]
 800b7aa:	4b40      	ldr	r3, [pc, #256]	; (800b8ac <PxMessagingTask+0x16d0>)
 800b7ac:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b7ae:	4945      	ldr	r1, [pc, #276]	; (800b8c4 <PxMessagingTask+0x16e8>)
 800b7b0:	f7fd fae6 	bl	8008d80 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b7b4:	19e7      	adds	r7, r4, r7
 800b7b6:	79bb      	ldrb	r3, [r7, #6]
 800b7b8:	021b      	lsls	r3, r3, #8
 800b7ba:	79fa      	ldrb	r2, [r7, #7]
 800b7bc:	0412      	lsls	r2, r2, #16
 800b7be:	189b      	adds	r3, r3, r2
 800b7c0:	797a      	ldrb	r2, [r7, #5]
 800b7c2:	189b      	adds	r3, r3, r2
 800b7c4:	7a3a      	ldrb	r2, [r7, #8]
 800b7c6:	0612      	lsls	r2, r2, #24
 800b7c8:	189b      	adds	r3, r3, r2
 800b7ca:	4a37      	ldr	r2, [pc, #220]	; (800b8a8 <PxMessagingTask+0x16cc>)
 800b7cc:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b7ce:	7abb      	ldrb	r3, [r7, #10]
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	7af9      	ldrb	r1, [r7, #11]
 800b7d4:	0409      	lsls	r1, r1, #16
 800b7d6:	185b      	adds	r3, r3, r1
 800b7d8:	7a79      	ldrb	r1, [r7, #9]
 800b7da:	185b      	adds	r3, r3, r1
 800b7dc:	7b39      	ldrb	r1, [r7, #12]
 800b7de:	0609      	lsls	r1, r1, #24
 800b7e0:	185b      	adds	r3, r3, r1
 800b7e2:	6213      	str	r3, [r2, #32]
							ACK_FLAG =1;
 800b7e4:	4b38      	ldr	r3, [pc, #224]	; (800b8c8 <PxMessagingTask+0x16ec>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
							break;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	4699      	mov	r9, r3
 800b7ee:	f7fe fd61 	bl	800a2b4 <PxMessagingTask+0xd8>
									else if(1 == ADCSide){
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d1d2      	bne.n	800b79c <PxMessagingTask+0x15c0>
										ADCSelectChannel(ADCPort,"bottom");
 800b7f6:	4c35      	ldr	r4, [pc, #212]	; (800b8cc <PxMessagingTask+0x16f0>)
 800b7f8:	0021      	movs	r1, r4
 800b7fa:	f7fd fb8b 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b7fe:	4b2b      	ldr	r3, [pc, #172]	; (800b8ac <PxMessagingTask+0x16d0>)
 800b800:	7818      	ldrb	r0, [r3, #0]
 800b802:	4a2d      	ldr	r2, [pc, #180]	; (800b8b8 <PxMessagingTask+0x16dc>)
 800b804:	0021      	movs	r1, r4
 800b806:	f7fd fbb3 	bl	8008f70 <ReadADCChannel>
 800b80a:	e7c7      	b.n	800b79c <PxMessagingTask+0x15c0>
							rejected_FLAG =1;
 800b80c:	4b30      	ldr	r3, [pc, #192]	; (800b8d0 <PxMessagingTask+0x16f4>)
 800b80e:	2201      	movs	r2, #1
 800b810:	701a      	strb	r2, [r3, #0]
							break;
 800b812:	2300      	movs	r3, #0
 800b814:	4699      	mov	r9, r3
 800b816:	f7fe fd4d 	bl	800a2b4 <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b81a:	9400      	str	r4, [sp, #0]
 800b81c:	465b      	mov	r3, fp
 800b81e:	9a04      	ldr	r2, [sp, #16]
 800b820:	9908      	ldr	r1, [sp, #32]
 800b822:	0038      	movs	r0, r7
 800b824:	f7fe fcd8 	bl	800a1d8 <User_MessagingParser>
 800b828:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800b82a:	2801      	cmp	r0, #1
 800b82c:	d001      	beq.n	800b832 <PxMessagingTask+0x1656>
 800b82e:	f7fe fd41 	bl	800a2b4 <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b832:	9400      	str	r4, [sp, #0]
 800b834:	465b      	mov	r3, fp
 800b836:	9a04      	ldr	r2, [sp, #16]
 800b838:	9908      	ldr	r1, [sp, #32]
 800b83a:	0038      	movs	r0, r7
 800b83c:	f000 fe04 	bl	800c448 <Module_MessagingTask>
 800b840:	4681      	mov	r9, r0
 800b842:	f7fe fd32 	bl	800a2aa <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b846:	2300      	movs	r3, #0
 800b848:	4699      	mov	r9, r3
 800b84a:	f7fe fd2e 	bl	800a2aa <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b84e:	2300      	movs	r3, #0
 800b850:	4699      	mov	r9, r3
 800b852:	f7fe fd2a 	bl	800a2aa <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b856:	2300      	movs	r3, #0
 800b858:	4699      	mov	r9, r3
 800b85a:	f7fe fd26 	bl	800a2aa <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b85e:	2200      	movs	r2, #0
 800b860:	2100      	movs	r1, #0
 800b862:	9804      	ldr	r0, [sp, #16]
 800b864:	f7fe f9a0 	bl	8009ba8 <SendMessageToModule>
			result =BOS_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	4699      	mov	r9, r3
 800b86c:	f7fe fd22 	bl	800a2b4 <PxMessagingTask+0xd8>
					switch(code){
 800b870:	2300      	movs	r3, #0
 800b872:	4699      	mov	r9, r3
 800b874:	f7fe fd1e 	bl	800a2b4 <PxMessagingTask+0xd8>
 800b878:	9205      	str	r2, [sp, #20]
 800b87a:	2300      	movs	r3, #0
 800b87c:	4699      	mov	r9, r3
 800b87e:	f7fe fd19 	bl	800a2b4 <PxMessagingTask+0xd8>
 800b882:	2300      	movs	r3, #0
 800b884:	4699      	mov	r9, r3
 800b886:	f7fe fd15 	bl	800a2b4 <PxMessagingTask+0xd8>
 800b88a:	46c0      	nop			; (mov r8, r8)
 800b88c:	0001ffff 	.word	0x0001ffff
 800b890:	20000890 	.word	0x20000890
 800b894:	2000054c 	.word	0x2000054c
 800b898:	0801a0e8 	.word	0x0801a0e8
 800b89c:	0000ffff 	.word	0x0000ffff
 800b8a0:	20000888 	.word	0x20000888
 800b8a4:	0801a108 	.word	0x0801a108
 800b8a8:	20000e80 	.word	0x20000e80
 800b8ac:	20000e70 	.word	0x20000e70
 800b8b0:	20000e72 	.word	0x20000e72
 800b8b4:	080180dc 	.word	0x080180dc
 800b8b8:	20000e74 	.word	0x20000e74
 800b8bc:	20000e7c 	.word	0x20000e7c
 800b8c0:	20000e78 	.word	0x20000e78
 800b8c4:	20000e6c 	.word	0x20000e6c
 800b8c8:	200002b4 	.word	0x200002b4
 800b8cc:	080180e0 	.word	0x080180e0
 800b8d0:	20000884 	.word	0x20000884
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b8d4:	455b      	cmp	r3, fp
 800b8d6:	d003      	beq.n	800b8e0 <PxMessagingTask+0x1704>
 800b8d8:	2f10      	cmp	r7, #16
 800b8da:	d001      	beq.n	800b8e0 <PxMessagingTask+0x1704>
 800b8dc:	f7fe fd47 	bl	800a36e <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	2bff      	cmp	r3, #255	; 0xff
 800b8e4:	d101      	bne.n	800b8ea <PxMessagingTask+0x170e>
 800b8e6:	f7fe fcb1 	bl	800a24c <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8ea:	2bfe      	cmp	r3, #254	; 0xfe
 800b8ec:	d001      	beq.n	800b8f2 <PxMessagingTask+0x1716>
 800b8ee:	f7fe fcd9 	bl	800a2a4 <PxMessagingTask+0xc8>
 800b8f2:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <PxMessagingTask+0x17c4>)
 800b8f4:	5d5a      	ldrb	r2, [r3, r5]
 800b8f6:	4b2b      	ldr	r3, [pc, #172]	; (800b9a4 <PxMessagingTask+0x17c8>)
 800b8f8:	199b      	adds	r3, r3, r6
 800b8fa:	189b      	adds	r3, r3, r2
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4a29      	ldr	r2, [pc, #164]	; (800b9a8 <PxMessagingTask+0x17cc>)
 800b902:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b904:	2103      	movs	r1, #3
 800b906:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b908:	429a      	cmp	r2, r3
 800b90a:	d101      	bne.n	800b910 <PxMessagingTask+0x1734>
 800b90c:	f7fe fccd 	bl	800a2aa <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b910:	4a25      	ldr	r2, [pc, #148]	; (800b9a8 <PxMessagingTask+0x17cc>)
 800b912:	7013      	strb	r3, [r2, #0]
 800b914:	4a25      	ldr	r2, [pc, #148]	; (800b9ac <PxMessagingTask+0x17d0>)
 800b916:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b918:	9908      	ldr	r1, [sp, #32]
 800b91a:	20fe      	movs	r0, #254	; 0xfe
 800b91c:	f7fe f8fc 	bl	8009b18 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b920:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <PxMessagingTask+0x17c4>)
 800b922:	5d59      	ldrb	r1, [r3, r5]
 800b924:	4b1f      	ldr	r3, [pc, #124]	; (800b9a4 <PxMessagingTask+0x17c8>)
 800b926:	199b      	adds	r3, r3, r6
 800b928:	185a      	adds	r2, r3, r1
 800b92a:	3a01      	subs	r2, #1
 800b92c:	2000      	movs	r0, #0
 800b92e:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b930:	1e8a      	subs	r2, r1, #2
 800b932:	5c9c      	ldrb	r4, [r3, r2]
 800b934:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b936:	2c00      	cmp	r4, #0
 800b938:	d02e      	beq.n	800b998 <PxMessagingTask+0x17bc>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b93a:	1b13      	subs	r3, r2, r4
 800b93c:	469c      	mov	ip, r3
 800b93e:	4b1c      	ldr	r3, [pc, #112]	; (800b9b0 <PxMessagingTask+0x17d4>)
 800b940:	7818      	ldrb	r0, [r3, #0]
 800b942:	4b18      	ldr	r3, [pc, #96]	; (800b9a4 <PxMessagingTask+0x17c8>)
 800b944:	199b      	adds	r3, r3, r6
 800b946:	4662      	mov	r2, ip
 800b948:	5c9b      	ldrb	r3, [r3, r2]
 800b94a:	4283      	cmp	r3, r0
 800b94c:	d011      	beq.n	800b972 <PxMessagingTask+0x1796>
 800b94e:	4653      	mov	r3, sl
 800b950:	3301      	adds	r3, #1
 800b952:	4463      	add	r3, ip
 800b954:	4a13      	ldr	r2, [pc, #76]	; (800b9a4 <PxMessagingTask+0x17c8>)
 800b956:	189b      	adds	r3, r3, r2
 800b958:	3201      	adds	r2, #1
 800b95a:	4452      	add	r2, sl
 800b95c:	3c01      	subs	r4, #1
 800b95e:	b2e4      	uxtb	r4, r4
 800b960:	1912      	adds	r2, r2, r4
 800b962:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b964:	4293      	cmp	r3, r2
 800b966:	d017      	beq.n	800b998 <PxMessagingTask+0x17bc>
 800b968:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b96a:	1e5c      	subs	r4, r3, #1
 800b96c:	7824      	ldrb	r4, [r4, #0]
 800b96e:	4284      	cmp	r4, r0
 800b970:	d1f8      	bne.n	800b964 <PxMessagingTask+0x1788>
				shift +=4;
 800b972:	9c06      	ldr	r4, [sp, #24]
 800b974:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b976:	1b0a      	subs	r2, r1, r4
 800b978:	b2d3      	uxtb	r3, r2
 800b97a:	9306      	str	r3, [sp, #24]
 800b97c:	f7fe fc8a 	bl	800a294 <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b980:	2338      	movs	r3, #56	; 0x38
 800b982:	436b      	muls	r3, r5
 800b984:	4a07      	ldr	r2, [pc, #28]	; (800b9a4 <PxMessagingTask+0x17c8>)
 800b986:	18d2      	adds	r2, r2, r3
 800b988:	464b      	mov	r3, r9
 800b98a:	5cd3      	ldrb	r3, [r2, r3]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	0098      	lsls	r0, r3, #2
 800b990:	4908      	ldr	r1, [pc, #32]	; (800b9b4 <PxMessagingTask+0x17d8>)
 800b992:	5841      	ldr	r1, [r0, r1]
 800b994:	5dd2      	ldrb	r2, [r2, r7]
 800b996:	e450      	b.n	800b23a <PxMessagingTask+0x105e>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b998:	2366      	movs	r3, #102	; 0x66
 800b99a:	4699      	mov	r9, r3
 800b99c:	f7fe fc8a 	bl	800a2b4 <PxMessagingTask+0xd8>
 800b9a0:	200006cc 	.word	0x200006cc
 800b9a4:	2000054c 	.word	0x2000054c
 800b9a8:	20000ea6 	.word	0x20000ea6
 800b9ac:	200004f8 	.word	0x200004f8
 800b9b0:	2000080e 	.word	0x2000080e
 800b9b4:	20006204 	.word	0x20006204

0800b9b8 <unitCommand>:
 |															Commands																 	|
 -----------------------------------------------------------------------
 */

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	0004      	movs	r4, r0
 800b9be:	0010      	movs	r0, r2
	Module_Status result = H2AR3_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9301      	str	r3, [sp, #4]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b9c4:	2c00      	cmp	r4, #0
 800b9c6:	d101      	bne.n	800b9cc <unitCommand+0x14>
 800b9c8:	b672      	cpsid	i
 800b9ca:	e7fe      	b.n	800b9ca <unitCommand+0x12>

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800b9cc:	aa01      	add	r2, sp, #4
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	f002 ff18 	bl	800e804 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 800b9d4:	7803      	ldrb	r3, [r0, #0]
 800b9d6:	2b76      	cmp	r3, #118	; 0x76
 800b9d8:	d009      	beq.n	800b9ee <unitCommand+0x36>
		unit = Volt;
		strcpy((char*) pcWriteBuffer,
				(char*) "Used measurement unit: Volt\r\n");
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 800b9da:	2b61      	cmp	r3, #97	; 0x61
 800b9dc:	d010      	beq.n	800ba00 <unitCommand+0x48>
		result = H2AR3_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H2AR3_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 800b9de:	2213      	movs	r2, #19
 800b9e0:	490c      	ldr	r1, [pc, #48]	; (800ba14 <unitCommand+0x5c>)
 800b9e2:	0020      	movs	r0, r4
 800b9e4:	f008 f8db 	bl	8013b9e <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	b002      	add	sp, #8
 800b9ec:	bd10      	pop	{r4, pc}
		unit = Volt;
 800b9ee:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <unitCommand+0x60>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800b9f4:	321d      	adds	r2, #29
 800b9f6:	4909      	ldr	r1, [pc, #36]	; (800ba1c <unitCommand+0x64>)
 800b9f8:	0020      	movs	r0, r4
 800b9fa:	f008 f8d0 	bl	8013b9e <memcpy>
 800b9fe:	e7f3      	b.n	800b9e8 <unitCommand+0x30>
		unit = Amp;
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <unitCommand+0x60>)
 800ba02:	2202      	movs	r2, #2
 800ba04:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800ba06:	321e      	adds	r2, #30
 800ba08:	4905      	ldr	r1, [pc, #20]	; (800ba20 <unitCommand+0x68>)
 800ba0a:	0020      	movs	r0, r4
 800ba0c:	f008 f8c7 	bl	8013b9e <memcpy>
 800ba10:	e7ea      	b.n	800b9e8 <unitCommand+0x30>
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	08018a88 	.word	0x08018a88
 800ba18:	200000a8 	.word	0x200000a8
 800ba1c:	0801a414 	.word	0x0801a414
 800ba20:	0801a434 	.word	0x0801a434

0800ba24 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800ba24:	b510      	push	{r4, lr}
 800ba26:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800ba28:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <CheckForEnterKey+0x5c>)
 800ba2a:	781c      	ldrb	r4, [r3, #0]
 800ba2c:	3c01      	subs	r4, #1
 800ba2e:	0063      	lsls	r3, r4, #1
 800ba30:	191b      	adds	r3, r3, r4
 800ba32:	019b      	lsls	r3, r3, #6
 800ba34:	4a13      	ldr	r2, [pc, #76]	; (800ba84 <CheckForEnterKey+0x60>)
 800ba36:	5c9b      	ldrb	r3, [r3, r2]
 800ba38:	2b0d      	cmp	r3, #13
 800ba3a:	d00c      	beq.n	800ba56 <CheckForEnterKey+0x32>
 800ba3c:	0061      	lsls	r1, r4, #1
 800ba3e:	1909      	adds	r1, r1, r4
 800ba40:	0189      	lsls	r1, r1, #6
 800ba42:	1889      	adds	r1, r1, r2
 800ba44:	2301      	movs	r3, #1
 800ba46:	0018      	movs	r0, r3
 800ba48:	5cca      	ldrb	r2, [r1, r3]
 800ba4a:	2a0d      	cmp	r2, #13
 800ba4c:	d004      	beq.n	800ba58 <CheckForEnterKey+0x34>
 800ba4e:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800ba50:	2bc0      	cmp	r3, #192	; 0xc0
 800ba52:	d1f8      	bne.n	800ba46 <CheckForEnterKey+0x22>
 800ba54:	e012      	b.n	800ba7c <CheckForEnterKey+0x58>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800ba56:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 800ba58:	0063      	lsls	r3, r4, #1
 800ba5a:	191c      	adds	r4, r3, r4
 800ba5c:	01a4      	lsls	r4, r4, #6
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <CheckForEnterKey+0x60>)
 800ba60:	191c      	adds	r4, r3, r4
 800ba62:	2300      	movs	r3, #0
 800ba64:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800ba66:	4a08      	ldr	r2, [pc, #32]	; (800ba88 <CheckForEnterKey+0x64>)
 800ba68:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 800ba6a:	4a08      	ldr	r2, [pc, #32]	; (800ba8c <CheckForEnterKey+0x68>)
 800ba6c:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 800ba6e:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <CheckForEnterKey+0x6c>)
 800ba70:	6810      	ldr	r0, [r2, #0]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2200      	movs	r2, #0
 800ba76:	2103      	movs	r1, #3
 800ba78:	f004 faba 	bl	800fff0 <xTimerGenericCommand>
}
 800ba7c:	b002      	add	sp, #8
 800ba7e:	bd10      	pop	{r4, pc}
 800ba80:	200002b8 	.word	0x200002b8
 800ba84:	20000a4c 	.word	0x20000a4c
 800ba88:	2000106c 	.word	0x2000106c
 800ba8c:	20006424 	.word	0x20006424
 800ba90:	20001074 	.word	0x20001074

0800ba94 <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 800ba94:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 800ba96:	f004 fbe7 	bl	8010268 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800ba9a:	28ff      	cmp	r0, #255	; 0xff
 800ba9c:	d000      	beq.n	800baa0 <HandleTimeout+0xc>
}
 800ba9e:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 800baa0:	2300      	movs	r3, #0
 800baa2:	4a02      	ldr	r2, [pc, #8]	; (800baac <HandleTimeout+0x18>)
 800baa4:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 800baa6:	4a02      	ldr	r2, [pc, #8]	; (800bab0 <HandleTimeout+0x1c>)
 800baa8:	7013      	strb	r3, [r2, #0]
}
 800baaa:	e7f8      	b.n	800ba9e <HandleTimeout+0xa>
 800baac:	20006424 	.word	0x20006424
 800bab0:	2000106c 	.word	0x2000106c

0800bab4 <SystemClock_Config>:
void SystemClock_Config(void) {
 800bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab6:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bab8:	2401      	movs	r4, #1
 800baba:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800babc:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800babe:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800bac0:	2310      	movs	r3, #16
 800bac2:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bac4:	2702      	movs	r7, #2
 800bac6:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bac8:	2680      	movs	r6, #128	; 0x80
 800baca:	0276      	lsls	r6, r6, #9
 800bacc:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bace:	2380      	movs	r3, #128	; 0x80
 800bad0:	035b      	lsls	r3, r3, #13
 800bad2:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bad4:	2500      	movs	r5, #0
 800bad6:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bad8:	a80d      	add	r0, sp, #52	; 0x34
 800bada:	f006 fa69 	bl	8011fb0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800bade:	2307      	movs	r3, #7
 800bae0:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bae2:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bae4:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bae6:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800bae8:	2101      	movs	r1, #1
 800baea:	a809      	add	r0, sp, #36	; 0x24
 800baec:	f006 fd22 	bl	8012534 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800baf0:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <SystemClock_Config+0xa8>)
 800baf2:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800baf4:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800baf6:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800baf8:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bafa:	a802      	add	r0, sp, #8
 800bafc:	f006 fec8 	bl	8012890 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bb00:	4d17      	ldr	r5, [pc, #92]	; (800bb60 <SystemClock_Config+0xac>)
 800bb02:	69ea      	ldr	r2, [r5, #28]
 800bb04:	2180      	movs	r1, #128	; 0x80
 800bb06:	0549      	lsls	r1, r1, #21
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	61ea      	str	r2, [r5, #28]
 800bb0c:	69eb      	ldr	r3, [r5, #28]
 800bb0e:	400b      	ands	r3, r1
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bb14:	f006 fa42 	bl	8011f9c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bb18:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bb1a:	23c0      	movs	r3, #192	; 0xc0
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bb20:	a802      	add	r0, sp, #8
 800bb22:	f006 feb5 	bl	8012890 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bb26:	f006 fe8f 	bl	8012848 <HAL_RCC_GetHCLKFreq>
 800bb2a:	21fa      	movs	r1, #250	; 0xfa
 800bb2c:	0089      	lsls	r1, r1, #2
 800bb2e:	f7f4 fb05 	bl	800013c <__udivsi3>
 800bb32:	f005 f931 	bl	8010d98 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bb36:	2004      	movs	r0, #4
 800bb38:	f005 f94a 	bl	8010dd0 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800bb3c:	69ab      	ldr	r3, [r5, #24]
 800bb3e:	4323      	orrs	r3, r4
 800bb40:	61ab      	str	r3, [r5, #24]
 800bb42:	69ab      	ldr	r3, [r5, #24]
 800bb44:	401c      	ands	r4, r3
 800bb46:	9401      	str	r4, [sp, #4]
 800bb48:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2100      	movs	r1, #0
 800bb50:	4240      	negs	r0, r0
 800bb52:	f005 f8d9 	bl	8010d08 <HAL_NVIC_SetPriority>
}
 800bb56:	b01b      	add	sp, #108	; 0x6c
 800bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	00040003 	.word	0x00040003
 800bb60:	40021000 	.word	0x40021000

0800bb64 <SaveToRO>:
uint8_t SaveToRO(void) {
 800bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb66:	46de      	mov	lr, fp
 800bb68:	4657      	mov	r7, sl
 800bb6a:	464e      	mov	r6, r9
 800bb6c:	4645      	mov	r5, r8
 800bb6e:	b5e0      	push	{r5, r6, r7, lr}
 800bb70:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800bb72:	2215      	movs	r2, #21
 800bb74:	2100      	movs	r1, #0
 800bb76:	a802      	add	r0, sp, #8
 800bb78:	f008 f81a 	bl	8013bb0 <memset>
	HAL_FLASH_Unlock();
 800bb7c:	f005 ff5a 	bl	8011a34 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800bb80:	4872      	ldr	r0, [pc, #456]	; (800bd4c <SaveToRO+0x1e8>)
 800bb82:	f006 f819 	bl	8011bb8 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800bb86:	4872      	ldr	r0, [pc, #456]	; (800bd50 <SaveToRO+0x1ec>)
 800bb88:	f005 ff70 	bl	8011a6c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d112      	bne.n	800bbb6 <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bb90:	4a70      	ldr	r2, [pc, #448]	; (800bd54 <SaveToRO+0x1f0>)
 800bb92:	6913      	ldr	r3, [r2, #16]
 800bb94:	2102      	movs	r1, #2
 800bb96:	438b      	bics	r3, r1
 800bb98:	6113      	str	r3, [r2, #16]
	if (myID) {
 800bb9a:	4b6f      	ldr	r3, [pc, #444]	; (800bd58 <SaveToRO+0x1f4>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d113      	bne.n	800bbca <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800bba2:	4b6e      	ldr	r3, [pc, #440]	; (800bd5c <SaveToRO+0x1f8>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d100      	bne.n	800bbac <SaveToRO+0x48>
 800bbaa:	e0ca      	b.n	800bd42 <SaveToRO+0x1de>
 800bbac:	2500      	movs	r5, #0
 800bbae:	4c6c      	ldr	r4, [pc, #432]	; (800bd60 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 800bbb0:	4b6c      	ldr	r3, [pc, #432]	; (800bd64 <SaveToRO+0x200>)
 800bbb2:	4698      	mov	r8, r3
 800bbb4:	e06e      	b.n	800bc94 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800bbb6:	4b6c      	ldr	r3, [pc, #432]	; (800bd68 <SaveToRO+0x204>)
 800bbb8:	69d8      	ldr	r0, [r3, #28]
 800bbba:	b2c0      	uxtb	r0, r0
}
 800bbbc:	b009      	add	sp, #36	; 0x24
 800bbbe:	bc3c      	pop	{r2, r3, r4, r5}
 800bbc0:	4690      	mov	r8, r2
 800bbc2:	4699      	mov	r9, r3
 800bbc4:	46a2      	mov	sl, r4
 800bbc6:	46ab      	mov	fp, r5
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800bbca:	4a68      	ldr	r2, [pc, #416]	; (800bd6c <SaveToRO+0x208>)
 800bbcc:	7812      	ldrb	r2, [r2, #0]
 800bbce:	0212      	lsls	r2, r2, #8
 800bbd0:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bbd2:	b292      	uxth	r2, r2
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	495d      	ldr	r1, [pc, #372]	; (800bd4c <SaveToRO+0x1e8>)
 800bbd8:	2001      	movs	r0, #1
 800bbda:	f005 ff75 	bl	8011ac8 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800bbde:	485c      	ldr	r0, [pc, #368]	; (800bd50 <SaveToRO+0x1ec>)
 800bbe0:	f005 ff44 	bl	8011a6c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d111      	bne.n	800bc0c <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bbe8:	4a5a      	ldr	r2, [pc, #360]	; (800bd54 <SaveToRO+0x1f0>)
 800bbea:	6913      	ldr	r3, [r2, #16]
 800bbec:	2101      	movs	r1, #1
 800bbee:	438b      	bics	r3, r1
 800bbf0:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800bbf2:	4b5e      	ldr	r3, [pc, #376]	; (800bd6c <SaveToRO+0x208>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800bbfa:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0d0      	beq.n	800bba2 <SaveToRO+0x3e>
 800bc00:	2316      	movs	r3, #22
 800bc02:	469b      	mov	fp, r3
 800bc04:	4b5a      	ldr	r3, [pc, #360]	; (800bd70 <SaveToRO+0x20c>)
 800bc06:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800bc08:	4698      	mov	r8, r3
 800bc0a:	e02a      	b.n	800bc62 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800bc0c:	4b56      	ldr	r3, [pc, #344]	; (800bd68 <SaveToRO+0x204>)
 800bc0e:	69d8      	ldr	r0, [r3, #28]
 800bc10:	b2c0      	uxtb	r0, r0
 800bc12:	e7d3      	b.n	800bbbc <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800bc14:	4b54      	ldr	r3, [pc, #336]	; (800bd68 <SaveToRO+0x204>)
 800bc16:	69d8      	ldr	r0, [r3, #28]
 800bc18:	b2c0      	uxtb	r0, r0
 800bc1a:	e7cf      	b.n	800bbbc <SaveToRO+0x58>
 800bc1c:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800bc1e:	42b4      	cmp	r4, r6
 800bc20:	d017      	beq.n	800bc52 <SaveToRO+0xee>
				if (array[i - 1][0]) {
 800bc22:	4643      	mov	r3, r8
 800bc24:	5afb      	ldrh	r3, [r7, r3]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0f8      	beq.n	800bc1c <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800bc2a:	8822      	ldrh	r2, [r4, #0]
 800bc2c:	4b47      	ldr	r3, [pc, #284]	; (800bd4c <SaveToRO+0x1e8>)
 800bc2e:	18e9      	adds	r1, r5, r3
 800bc30:	2300      	movs	r3, #0
 800bc32:	2001      	movs	r0, #1
 800bc34:	f005 ff48 	bl	8011ac8 <HAL_FLASH_Program>
					add += 2;
 800bc38:	3502      	adds	r5, #2
 800bc3a:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800bc3c:	4844      	ldr	r0, [pc, #272]	; (800bd50 <SaveToRO+0x1ec>)
 800bc3e:	f005 ff15 	bl	8011a6c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d1e6      	bne.n	800bc14 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bc46:	4a43      	ldr	r2, [pc, #268]	; (800bd54 <SaveToRO+0x1f0>)
 800bc48:	6913      	ldr	r3, [r2, #16]
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	438b      	bics	r3, r1
 800bc4e:	6113      	str	r3, [r2, #16]
 800bc50:	e7e4      	b.n	800bc1c <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 800bc52:	464b      	mov	r3, r9
 800bc54:	3301      	adds	r3, #1
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	4699      	mov	r9, r3
 800bc5a:	4b44      	ldr	r3, [pc, #272]	; (800bd6c <SaveToRO+0x208>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	454b      	cmp	r3, r9
 800bc60:	d39f      	bcc.n	800bba2 <SaveToRO+0x3e>
 800bc62:	465e      	mov	r6, fp
 800bc64:	464b      	mov	r3, r9
 800bc66:	435e      	muls	r6, r3
 800bc68:	0034      	movs	r4, r6
 800bc6a:	3c16      	subs	r4, #22
 800bc6c:	4454      	add	r4, sl
 800bc6e:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800bc70:	1e5f      	subs	r7, r3, #1
 800bc72:	465b      	mov	r3, fp
 800bc74:	435f      	muls	r7, r3
 800bc76:	e7d4      	b.n	800bc22 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800bc78:	4b3b      	ldr	r3, [pc, #236]	; (800bd68 <SaveToRO+0x204>)
 800bc7a:	69d8      	ldr	r0, [r3, #28]
 800bc7c:	b2c0      	uxtb	r0, r0
 800bc7e:	e79d      	b.n	800bbbc <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800bc80:	4b39      	ldr	r3, [pc, #228]	; (800bd68 <SaveToRO+0x204>)
 800bc82:	69d8      	ldr	r0, [r3, #28]
 800bc84:	b2c0      	uxtb	r0, r0
 800bc86:	e799      	b.n	800bbbc <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800bc88:	3501      	adds	r5, #1
 800bc8a:	b2ed      	uxtb	r5, r5
 800bc8c:	4b33      	ldr	r3, [pc, #204]	; (800bd5c <SaveToRO+0x1f8>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	42ab      	cmp	r3, r5
 800bc92:	d956      	bls.n	800bd42 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 800bc94:	9501      	str	r5, [sp, #4]
 800bc96:	00ab      	lsls	r3, r5, #2
 800bc98:	195b      	adds	r3, r3, r5
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	5c9b      	ldrb	r3, [r3, r2]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0f1      	beq.n	800bc88 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800bca4:	23fe      	movs	r3, #254	; 0xfe
 800bca6:	aa02      	add	r2, sp, #8
 800bca8:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800bcaa:	00a9      	lsls	r1, r5, #2
 800bcac:	1949      	adds	r1, r1, r5
 800bcae:	0089      	lsls	r1, r1, #2
 800bcb0:	4b2c      	ldr	r3, [pc, #176]	; (800bd64 <SaveToRO+0x200>)
 800bcb2:	469c      	mov	ip, r3
 800bcb4:	4461      	add	r1, ip
 800bcb6:	2214      	movs	r2, #20
 800bcb8:	ab02      	add	r3, sp, #8
 800bcba:	1c58      	adds	r0, r3, #1
 800bcbc:	f007 ff6f 	bl	8013b9e <memcpy>
 800bcc0:	2314      	movs	r3, #20
 800bcc2:	469b      	mov	fp, r3
 800bcc4:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 800bcc6:	ae02      	add	r6, sp, #8
 800bcc8:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bcca:	4f22      	ldr	r7, [pc, #136]	; (800bd54 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800bccc:	5b32      	ldrh	r2, [r6, r4]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	0021      	movs	r1, r4
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	f005 fef8 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800bcd8:	481d      	ldr	r0, [pc, #116]	; (800bd50 <SaveToRO+0x1ec>)
 800bcda:	f005 fec7 	bl	8011a6c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d1ca      	bne.n	800bc78 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2201      	movs	r2, #1
 800bce6:	4393      	bics	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800bcea:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800bcec:	455c      	cmp	r4, fp
 800bcee:	d1ed      	bne.n	800bccc <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bcf0:	2700      	movs	r7, #0
 800bcf2:	9a01      	ldr	r2, [sp, #4]
 800bcf4:	0093      	lsls	r3, r2, #2
 800bcf6:	189e      	adds	r6, r3, r2
 800bcf8:	00b6      	lsls	r6, r6, #2
 800bcfa:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <SaveToRO+0x200>)
 800bcfc:	469a      	mov	sl, r3
 800bcfe:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bd00:	4b14      	ldr	r3, [pc, #80]	; (800bd54 <SaveToRO+0x1f0>)
 800bd02:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bd04:	4653      	mov	r3, sl
 800bd06:	68de      	ldr	r6, [r3, #12]
 800bd08:	0030      	movs	r0, r6
 800bd0a:	f7f4 fa05 	bl	8000118 <strlen>
 800bd0e:	3001      	adds	r0, #1
 800bd10:	0840      	lsrs	r0, r0, #1
 800bd12:	4287      	cmp	r7, r0
 800bd14:	d2b8      	bcs.n	800bc88 <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800bd16:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800bd18:	5af2      	ldrh	r2, [r6, r3]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	0021      	movs	r1, r4
 800bd1e:	2001      	movs	r0, #1
 800bd20:	f005 fed2 	bl	8011ac8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800bd24:	480a      	ldr	r0, [pc, #40]	; (800bd50 <SaveToRO+0x1ec>)
 800bd26:	f005 fea1 	bl	8011a6c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d1a8      	bne.n	800bc80 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bd2e:	465b      	mov	r3, fp
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2201      	movs	r2, #1
 800bd34:	4393      	bics	r3, r2
 800bd36:	465a      	mov	r2, fp
 800bd38:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800bd3a:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bd3c:	3701      	adds	r7, #1
 800bd3e:	b2ff      	uxtb	r7, r7
 800bd40:	e7e0      	b.n	800bd04 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800bd42:	f005 fe89 	bl	8011a58 <HAL_FLASH_Lock>
	return result;
 800bd46:	2000      	movs	r0, #0
 800bd48:	e738      	b.n	800bbbc <SaveToRO+0x58>
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	0801d800 	.word	0x0801d800
 800bd50:	0000c350 	.word	0x0000c350
 800bd54:	40022000 	.word	0x40022000
 800bd58:	2000080e 	.word	0x2000080e
 800bd5c:	2000099f 	.word	0x2000099f
 800bd60:	0801dc00 	.word	0x0801dc00
 800bd64:	20006298 	.word	0x20006298
 800bd68:	20006780 	.word	0x20006780
 800bd6c:	20000030 	.word	0x20000030
 800bd70:	200002bc 	.word	0x200002bc

0800bd74 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800bd74:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800bd76:	228f      	movs	r2, #143	; 0x8f
 800bd78:	0092      	lsls	r2, r2, #2
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4805      	ldr	r0, [pc, #20]	; (800bd94 <ClearROtopology+0x20>)
 800bd7e:	f007 ff17 	bl	8013bb0 <memset>
	N = 1;
 800bd82:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <ClearROtopology+0x24>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800bd88:	4b04      	ldr	r3, [pc, #16]	; (800bd9c <ClearROtopology+0x28>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800bd8e:	f7ff fee9 	bl	800bb64 <SaveToRO>
}
 800bd92:	bd10      	pop	{r4, pc}
 800bd94:	200002bc 	.word	0x200002bc
 800bd98:	20000030 	.word	0x20000030
 800bd9c:	2000080e 	.word	0x2000080e

0800bda0 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800bda0:	b500      	push	{lr}
 800bda2:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800bda4:	f002 f9ba 	bl	800e11c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800bda8:	f002 f9d0 	bl	800e14c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bdac:	f002 f9e6 	bl	800e17c <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800bdb0:	f002 f9fc 	bl	800e1ac <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800bdb4:	f002 fa12 	bl	800e1dc <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 800bdb8:	22a0      	movs	r2, #160	; 0xa0
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9303      	str	r3, [sp, #12]
 800bdbe:	9302      	str	r3, [sp, #8]
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <Module_Peripheral_Init+0x3c>)
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	0052      	lsls	r2, r2, #1
 800bdcc:	4904      	ldr	r1, [pc, #16]	; (800bde0 <Module_Peripheral_Init+0x40>)
 800bdce:	4805      	ldr	r0, [pc, #20]	; (800bde4 <Module_Peripheral_Init+0x44>)
 800bdd0:	f003 f9fa 	bl	800f1c8 <xTaskGenericCreate>
	MX_ADC_Init();
 800bdd4:	f7fc feec 	bl	8008bb0 <MX_ADC_Init>
}
 800bdd8:	b005      	add	sp, #20
 800bdda:	bd00      	pop	{pc}
 800bddc:	20001068 	.word	0x20001068
 800bde0:	0801a1f0 	.word	0x0801a1f0
 800bde4:	0800c18d 	.word	0x0800c18d

0800bde8 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800bde8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800bdea:	4808      	ldr	r0, [pc, #32]	; (800be0c <RegisterModuleCLICommands+0x24>)
 800bdec:	f002 fc6c 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800bdf0:	4807      	ldr	r0, [pc, #28]	; (800be10 <RegisterModuleCLICommands+0x28>)
 800bdf2:	f002 fc69 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800bdf6:	4807      	ldr	r0, [pc, #28]	; (800be14 <RegisterModuleCLICommands+0x2c>)
 800bdf8:	f002 fc66 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800bdfc:	4806      	ldr	r0, [pc, #24]	; (800be18 <RegisterModuleCLICommands+0x30>)
 800bdfe:	f002 fc63 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800be02:	4806      	ldr	r0, [pc, #24]	; (800be1c <RegisterModuleCLICommands+0x34>)
 800be04:	f002 fc60 	bl	800e6c8 <FreeRTOS_CLIRegisterCommand>
}
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	0801a28c 	.word	0x0801a28c
 800be10:	0801a404 	.word	0x0801a404
 800be14:	0801a29c 	.word	0x0801a29c
 800be18:	0801a454 	.word	0x0801a454
 800be1c:	0801a27c 	.word	0x0801a27c

0800be20 <GetPort>:
	if (huart->Instance == USART2)
 800be20:	6800      	ldr	r0, [r0, #0]
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <GetPort+0x28>)
 800be24:	4298      	cmp	r0, r3
 800be26:	d00b      	beq.n	800be40 <GetPort+0x20>
	else if (huart->Instance == USART6)
 800be28:	4b08      	ldr	r3, [pc, #32]	; (800be4c <GetPort+0x2c>)
 800be2a:	4298      	cmp	r0, r3
 800be2c:	d00a      	beq.n	800be44 <GetPort+0x24>
	return 0;
 800be2e:	4b08      	ldr	r3, [pc, #32]	; (800be50 <GetPort+0x30>)
 800be30:	469c      	mov	ip, r3
 800be32:	4460      	add	r0, ip
 800be34:	4243      	negs	r3, r0
 800be36:	4158      	adcs	r0, r3
 800be38:	4240      	negs	r0, r0
 800be3a:	2303      	movs	r3, #3
 800be3c:	4018      	ands	r0, r3
}
 800be3e:	4770      	bx	lr
		return P1;
 800be40:	2001      	movs	r0, #1
 800be42:	e7fc      	b.n	800be3e <GetPort+0x1e>
		return P2;
 800be44:	2002      	movs	r0, #2
 800be46:	e7fa      	b.n	800be3e <GetPort+0x1e>
 800be48:	40004400 	.word	0x40004400
 800be4c:	40011400 	.word	0x40011400
 800be50:	bfffb800 	.word	0xbfffb800

0800be54 <SendResults>:
		uint8_t Module, float *Buffer) {
 800be54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be56:	b087      	sub	sp, #28
 800be58:	1c07      	adds	r7, r0, #0
 800be5a:	000c      	movs	r4, r1
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	ab0c      	add	r3, sp, #48	; 0x30
 800be60:	781d      	ldrb	r5, [r3, #0]
	uint32_t RawMsgInt = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800be66:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800be68:	f002 fcc8 	bl	800e7fc <FreeRTOS_CLIGetOutputBuffer>
 800be6c:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800be6e:	2c04      	cmp	r4, #4
 800be70:	d100      	bne.n	800be74 <SendResults+0x20>
 800be72:	e0ce      	b.n	800c012 <SendResults+0x1be>
 800be74:	2c02      	cmp	r4, #2
 800be76:	d11d      	bne.n	800beb4 <SendResults+0x60>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800be78:	4b67      	ldr	r3, [pc, #412]	; (800c018 <SendResults+0x1c4>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b05      	cmp	r3, #5
 800be7e:	d07d      	beq.n	800bf7c <SendResults+0x128>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800be80:	2b07      	cmp	r3, #7
 800be82:	d000      	beq.n	800be86 <SendResults+0x32>
 800be84:	e0be      	b.n	800c004 <SendResults+0x1b0>
			if (Module == myID) {
 800be86:	4b65      	ldr	r3, [pc, #404]	; (800c01c <SendResults+0x1c8>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	42ab      	cmp	r3, r5
 800be8c:	d100      	bne.n	800be90 <SendResults+0x3c>
 800be8e:	e0a3      	b.n	800bfd8 <SendResults+0x184>
				messageParams[0] = Port;
 800be90:	4b63      	ldr	r3, [pc, #396]	; (800c020 <SendResults+0x1cc>)
 800be92:	9a02      	ldr	r2, [sp, #8]
 800be94:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800be96:	aa05      	add	r2, sp, #20
 800be98:	78d1      	ldrb	r1, [r2, #3]
 800be9a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800be9c:	7891      	ldrb	r1, [r2, #2]
 800be9e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800bea0:	7851      	ldrb	r1, [r2, #1]
 800bea2:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800bea4:	7812      	ldrb	r2, [r2, #0]
 800bea6:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800bea8:	2205      	movs	r2, #5
 800beaa:	2123      	movs	r1, #35	; 0x23
 800beac:	0028      	movs	r0, r5
 800beae:	f7fd fe7b 	bl	8009ba8 <SendMessageToModule>
 800beb2:	e0a7      	b.n	800c004 <SendResults+0x1b0>
		strUnit = malloc(6 * sizeof(char));
 800beb4:	2006      	movs	r0, #6
 800beb6:	f007 fe3d 	bl	8013b34 <malloc>
 800beba:	0006      	movs	r6, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 800bebc:	2206      	movs	r2, #6
 800bebe:	2100      	movs	r1, #0
 800bec0:	f007 fe76 	bl	8013bb0 <memset>
		if (unit == Volt) {
 800bec4:	4b57      	ldr	r3, [pc, #348]	; (800c024 <SendResults+0x1d0>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d00d      	beq.n	800bee8 <SendResults+0x94>
		} else if (unit == Amp) {
 800becc:	2b02      	cmp	r3, #2
 800bece:	d011      	beq.n	800bef4 <SendResults+0xa0>
			sprintf((char*) strUnit, "Volt");
 800bed0:	4b55      	ldr	r3, [pc, #340]	; (800c028 <SendResults+0x1d4>)
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	6032      	str	r2, [r6, #0]
 800bed6:	791b      	ldrb	r3, [r3, #4]
 800bed8:	7133      	strb	r3, [r6, #4]
	switch (Mode) {
 800beda:	2c08      	cmp	r4, #8
 800bedc:	d900      	bls.n	800bee0 <SendResults+0x8c>
 800bede:	e095      	b.n	800c00c <SendResults+0x1b8>
 800bee0:	00a3      	lsls	r3, r4, #2
 800bee2:	4a52      	ldr	r2, [pc, #328]	; (800c02c <SendResults+0x1d8>)
 800bee4:	58d3      	ldr	r3, [r2, r3]
 800bee6:	469f      	mov	pc, r3
			sprintf((char*) strUnit, "Volt");
 800bee8:	4b4f      	ldr	r3, [pc, #316]	; (800c028 <SendResults+0x1d4>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	6032      	str	r2, [r6, #0]
 800beee:	791b      	ldrb	r3, [r3, #4]
 800bef0:	7133      	strb	r3, [r6, #4]
 800bef2:	e7f2      	b.n	800beda <SendResults+0x86>
			sprintf((char*) strUnit, "Amp");
 800bef4:	4b4e      	ldr	r3, [pc, #312]	; (800c030 <SendResults+0x1dc>)
 800bef6:	6033      	str	r3, [r6, #0]
 800bef8:	e7ef      	b.n	800beda <SendResults+0x86>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800befa:	4b47      	ldr	r3, [pc, #284]	; (800c018 <SendResults+0x1c4>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d01d      	beq.n	800bf3e <SendResults+0xea>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800bf02:	2b07      	cmp	r3, #7
 800bf04:	d17e      	bne.n	800c004 <SendResults+0x1b0>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800bf06:	1c38      	adds	r0, r7, #0
 800bf08:	f7f6 feba 	bl	8002c80 <__aeabi_f2d>
 800bf0c:	9000      	str	r0, [sp, #0]
 800bf0e:	9101      	str	r1, [sp, #4]
 800bf10:	0032      	movs	r2, r6
 800bf12:	4948      	ldr	r1, [pc, #288]	; (800c034 <SendResults+0x1e0>)
 800bf14:	9d03      	ldr	r5, [sp, #12]
 800bf16:	0028      	movs	r0, r5
 800bf18:	f008 fbd8 	bl	80146cc <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800bf1c:	0028      	movs	r0, r5
 800bf1e:	f7f4 f8fb 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800bf22:	23fa      	movs	r3, #250	; 0xfa
 800bf24:	b282      	uxth	r2, r0
 800bf26:	4944      	ldr	r1, [pc, #272]	; (800c038 <SendResults+0x1e4>)
 800bf28:	7808      	ldrb	r0, [r1, #0]
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4249      	negs	r1, r1
 800bf2e:	9100      	str	r1, [sp, #0]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	0029      	movs	r1, r5
 800bf34:	f002 fa20 	bl	800e378 <writePxMutex>
			CheckForEnterKey();
 800bf38:	f7ff fd74 	bl	800ba24 <CheckForEnterKey>
 800bf3c:	e062      	b.n	800c004 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800bf3e:	493f      	ldr	r1, [pc, #252]	; (800c03c <SendResults+0x1e8>)
 800bf40:	1c38      	adds	r0, r7, #0
 800bf42:	f7f4 fda9 	bl	8000a98 <__aeabi_fmul>
 800bf46:	f7f4 fb11 	bl	800056c <__aeabi_f2uiz>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800bf4e:	0032      	movs	r2, r6
 800bf50:	493b      	ldr	r1, [pc, #236]	; (800c040 <SendResults+0x1ec>)
 800bf52:	9d03      	ldr	r5, [sp, #12]
 800bf54:	0028      	movs	r0, r5
 800bf56:	f008 fbb9 	bl	80146cc <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800bf5a:	0028      	movs	r0, r5
 800bf5c:	f7f4 f8dc 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800bf60:	23fa      	movs	r3, #250	; 0xfa
 800bf62:	b282      	uxth	r2, r0
 800bf64:	4934      	ldr	r1, [pc, #208]	; (800c038 <SendResults+0x1e4>)
 800bf66:	7808      	ldrb	r0, [r1, #0]
 800bf68:	2101      	movs	r1, #1
 800bf6a:	4249      	negs	r1, r1
 800bf6c:	9100      	str	r1, [sp, #0]
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	0029      	movs	r1, r5
 800bf72:	f002 fa01 	bl	800e378 <writePxMutex>
			CheckForEnterKey();
 800bf76:	f7ff fd55 	bl	800ba24 <CheckForEnterKey>
 800bf7a:	e043      	b.n	800c004 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800bf7c:	492f      	ldr	r1, [pc, #188]	; (800c03c <SendResults+0x1e8>)
 800bf7e:	1c38      	adds	r0, r7, #0
 800bf80:	f7f4 fd8a 	bl	8000a98 <__aeabi_fmul>
 800bf84:	f7f4 faf2 	bl	800056c <__aeabi_f2uiz>
 800bf88:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800bf8a:	4b24      	ldr	r3, [pc, #144]	; (800c01c <SendResults+0x1c8>)
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	42ab      	cmp	r3, r5
 800bf90:	d011      	beq.n	800bfb6 <SendResults+0x162>
				messageParams[0] = Port;
 800bf92:	4b23      	ldr	r3, [pc, #140]	; (800c020 <SendResults+0x1cc>)
 800bf94:	9a02      	ldr	r2, [sp, #8]
 800bf96:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800bf98:	aa04      	add	r2, sp, #16
 800bf9a:	78d1      	ldrb	r1, [r2, #3]
 800bf9c:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800bf9e:	7891      	ldrb	r1, [r2, #2]
 800bfa0:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800bfa2:	7851      	ldrb	r1, [r2, #1]
 800bfa4:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800bfa6:	7812      	ldrb	r2, [r2, #0]
 800bfa8:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800bfaa:	2205      	movs	r2, #5
 800bfac:	2123      	movs	r1, #35	; 0x23
 800bfae:	0028      	movs	r0, r5
 800bfb0:	f7fd fdfa 	bl	8009ba8 <SendMessageToModule>
 800bfb4:	e026      	b.n	800c004 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800bfb6:	ab04      	add	r3, sp, #16
 800bfb8:	78da      	ldrb	r2, [r3, #3]
 800bfba:	4922      	ldr	r1, [pc, #136]	; (800c044 <SendResults+0x1f0>)
 800bfbc:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800bfbe:	789a      	ldrb	r2, [r3, #2]
 800bfc0:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800bfc2:	785a      	ldrb	r2, [r3, #1]
 800bfc4:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800bfca:	230a      	movs	r3, #10
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	2204      	movs	r2, #4
 800bfd0:	9802      	ldr	r0, [sp, #8]
 800bfd2:	f002 f9d1 	bl	800e378 <writePxMutex>
 800bfd6:	e015      	b.n	800c004 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800bfd8:	ab05      	add	r3, sp, #20
 800bfda:	78da      	ldrb	r2, [r3, #3]
 800bfdc:	4919      	ldr	r1, [pc, #100]	; (800c044 <SendResults+0x1f0>)
 800bfde:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800bfe0:	789a      	ldrb	r2, [r3, #2]
 800bfe2:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800bfe4:	785a      	ldrb	r2, [r3, #1]
 800bfe6:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800bfec:	230a      	movs	r3, #10
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	2204      	movs	r2, #4
 800bff2:	9802      	ldr	r0, [sp, #8]
 800bff4:	f002 f9c0 	bl	800e378 <writePxMutex>
 800bff8:	e004      	b.n	800c004 <SendResults+0x1b0>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800bffa:	2204      	movs	r2, #4
 800bffc:	a905      	add	r1, sp, #20
 800bffe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c000:	f007 fdcd 	bl	8013b9e <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800c004:	3c02      	subs	r4, #2
 800c006:	23fd      	movs	r3, #253	; 0xfd
 800c008:	421c      	tst	r4, r3
 800c00a:	d002      	beq.n	800c012 <SendResults+0x1be>
		free(strUnit);
 800c00c:	0030      	movs	r0, r6
 800c00e:	f007 fd9b 	bl	8013b48 <free>
}
 800c012:	2000      	movs	r0, #0
 800c014:	b007      	add	sp, #28
 800c016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c018:	20000098 	.word	0x20000098
 800c01c:	2000080e 	.word	0x2000080e
 800c020:	200006d0 	.word	0x200006d0
 800c024:	200000a8 	.word	0x200000a8
 800c028:	0801a1fc 	.word	0x0801a1fc
 800c02c:	0801a1b8 	.word	0x0801a1b8
 800c030:	00706d41 	.word	0x00706d41
 800c034:	0801a214 	.word	0x0801a214
 800c038:	200002b8 	.word	0x200002b8
 800c03c:	41200000 	.word	0x41200000
 800c040:	0801a204 	.word	0x0801a204
 800c044:	20001070 	.word	0x20001070

0800c048 <CalculationVolt>:
float CalculationVolt(void) {
 800c048:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH9();
 800c04a:	f000 fc25 	bl	800c898 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800c04e:	4c1a      	ldr	r4, [pc, #104]	; (800c0b8 <CalculationVolt+0x70>)
 800c050:	0020      	movs	r0, r4
 800c052:	f004 fc6b 	bl	801092c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800c056:	21fa      	movs	r1, #250	; 0xfa
 800c058:	0089      	lsls	r1, r1, #2
 800c05a:	0020      	movs	r0, r4
 800c05c:	f004 fcb8 	bl	80109d0 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800c060:	0020      	movs	r0, r4
 800c062:	f004 fd59 	bl	8010b18 <HAL_ADC_GetValue>
 800c066:	4d15      	ldr	r5, [pc, #84]	; (800c0bc <CalculationVolt+0x74>)
 800c068:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800c06a:	0020      	movs	r0, r4
 800c06c:	f004 fc8e 	bl	801098c <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800c070:	f000 fc24 	bl	800c8bc <ADC_Deselect_CH9>
	return tmp_adc;
 800c074:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Volt);
 800c076:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <CalculationVolt+0x78>)
 800c078:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	f7f5 f822 	bl	80010c4 <__aeabi_ui2f>
 800c080:	f7f6 fdfe 	bl	8002c80 <__aeabi_f2d>
 800c084:	4a0f      	ldr	r2, [pc, #60]	; (800c0c4 <CalculationVolt+0x7c>)
 800c086:	4b10      	ldr	r3, [pc, #64]	; (800c0c8 <CalculationVolt+0x80>)
 800c088:	f7f5 ff82 	bl	8001f90 <__aeabi_dmul>
 800c08c:	f7f6 fe4a 	bl	8002d24 <__aeabi_d2f>
	_volt = _volt - VRef;
 800c090:	f7f6 fdf6 	bl	8002c80 <__aeabi_f2d>
 800c094:	4a0d      	ldr	r2, [pc, #52]	; (800c0cc <CalculationVolt+0x84>)
 800c096:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <CalculationVolt+0x88>)
 800c098:	f7f6 f9ec 	bl	8002474 <__aeabi_dsub>
 800c09c:	f7f6 fe42 	bl	8002d24 <__aeabi_d2f>
 800c0a0:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <CalculationVolt+0x8c>)
 800c0a2:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * (4000150/(50*150))+40/*voltRatio*/; /////////////////final volt calculation here
 800c0a4:	490c      	ldr	r1, [pc, #48]	; (800c0d8 <CalculationVolt+0x90>)
 800c0a6:	f7f4 fcf7 	bl	8000a98 <__aeabi_fmul>
 800c0aa:	490c      	ldr	r1, [pc, #48]	; (800c0dc <CalculationVolt+0x94>)
 800c0ac:	f7f4 fa94 	bl	80005d8 <__aeabi_fadd>
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <CalculationVolt+0x98>)
 800c0b2:	6018      	str	r0, [r3, #0]
}
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	20006344 	.word	0x20006344
 800c0bc:	200064d8 	.word	0x200064d8
 800c0c0:	200064e4 	.word	0x200064e4
 800c0c4:	e734d9b4 	.word	0xe734d9b4
 800c0c8:	3f4a680c 	.word	0x3f4a680c
 800c0cc:	66666666 	.word	0x66666666
 800c0d0:	3ffa6666 	.word	0x3ffa6666
 800c0d4:	200063b0 	.word	0x200063b0
 800c0d8:	44054000 	.word	0x44054000
 800c0dc:	42200000 	.word	0x42200000
 800c0e0:	20006644 	.word	0x20006644

0800c0e4 <CalculationAmp>:
float CalculationAmp(void) {
 800c0e4:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH7();
 800c0e6:	f000 fbb3 	bl	800c850 <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 800c0ea:	4c1c      	ldr	r4, [pc, #112]	; (800c15c <CalculationAmp+0x78>)
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	f004 fc1d 	bl	801092c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800c0f2:	21fa      	movs	r1, #250	; 0xfa
 800c0f4:	0089      	lsls	r1, r1, #2
 800c0f6:	0020      	movs	r0, r4
 800c0f8:	f004 fc6a 	bl	80109d0 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800c0fc:	0020      	movs	r0, r4
 800c0fe:	f004 fd0b 	bl	8010b18 <HAL_ADC_GetValue>
 800c102:	4d17      	ldr	r5, [pc, #92]	; (800c160 <CalculationAmp+0x7c>)
 800c104:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800c106:	0020      	movs	r0, r4
 800c108:	f004 fc40 	bl	801098c <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 800c10c:	f000 fbb2 	bl	800c874 <ADC_Deselect_CH7>
	return tmp_adc;
 800c110:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Amp);
 800c112:	4b14      	ldr	r3, [pc, #80]	; (800c164 <CalculationAmp+0x80>)
 800c114:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800c116:	6818      	ldr	r0, [r3, #0]
 800c118:	f7f4 ffd4 	bl	80010c4 <__aeabi_ui2f>
 800c11c:	f7f6 fdb0 	bl	8002c80 <__aeabi_f2d>
 800c120:	4a11      	ldr	r2, [pc, #68]	; (800c168 <CalculationAmp+0x84>)
 800c122:	4b12      	ldr	r3, [pc, #72]	; (800c16c <CalculationAmp+0x88>)
 800c124:	f7f5 ff34 	bl	8001f90 <__aeabi_dmul>
 800c128:	f7f6 fdfc 	bl	8002d24 <__aeabi_d2f>
	_volt = _volt - VRef;
 800c12c:	f7f6 fda8 	bl	8002c80 <__aeabi_f2d>
 800c130:	4a0f      	ldr	r2, [pc, #60]	; (800c170 <CalculationAmp+0x8c>)
 800c132:	4b10      	ldr	r3, [pc, #64]	; (800c174 <CalculationAmp+0x90>)
 800c134:	f7f6 f99e 	bl	8002474 <__aeabi_dsub>
 800c138:	f7f6 fdf4 	bl	8002d24 <__aeabi_d2f>
 800c13c:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <CalculationAmp+0x94>)
 800c13e:	6018      	str	r0, [r3, #0]
	measured_amp = ((_volt * 100) / shuntResistor) * ampTranRatio; /////////////////final amp calculation here
 800c140:	490e      	ldr	r1, [pc, #56]	; (800c17c <CalculationAmp+0x98>)
 800c142:	f7f4 fca9 	bl	8000a98 <__aeabi_fmul>
 800c146:	f7f6 fd9b 	bl	8002c80 <__aeabi_f2d>
 800c14a:	4a0d      	ldr	r2, [pc, #52]	; (800c180 <CalculationAmp+0x9c>)
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <CalculationAmp+0xa0>)
 800c14e:	f7f5 fb15 	bl	800177c <__aeabi_ddiv>
 800c152:	f7f6 fde7 	bl	8002d24 <__aeabi_d2f>
 800c156:	4b0c      	ldr	r3, [pc, #48]	; (800c188 <CalculationAmp+0xa4>)
 800c158:	6018      	str	r0, [r3, #0]
}
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	20006344 	.word	0x20006344
 800c160:	200064d8 	.word	0x200064d8
 800c164:	200064e4 	.word	0x200064e4
 800c168:	e734d9b4 	.word	0xe734d9b4
 800c16c:	3f4a680c 	.word	0x3f4a680c
 800c170:	66666666 	.word	0x66666666
 800c174:	3ffa6666 	.word	0x3ffa6666
 800c178:	200063b0 	.word	0x200063b0
 800c17c:	42c80000 	.word	0x42c80000
 800c180:	9999999a 	.word	0x9999999a
 800c184:	3fb99999 	.word	0x3fb99999
 800c188:	200064d4 	.word	0x200064d4

0800c18c <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	46c6      	mov	lr, r8
 800c190:	b500      	push	{lr}
 800c192:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800c194:	483b      	ldr	r0, [pc, #236]	; (800c284 <VoltAmpTask+0xf8>)
 800c196:	f004 fc7b 	bl	8010a90 <HAL_ADC_Start_IT>
		switch (unit) {
 800c19a:	4c3b      	ldr	r4, [pc, #236]	; (800c288 <VoltAmpTask+0xfc>)
			DATA_To_SEND = CalculationVolt();
 800c19c:	4e3b      	ldr	r6, [pc, #236]	; (800c28c <VoltAmpTask+0x100>)
			DATA_To_SEND = CalculationVolt();
 800c19e:	46b0      	mov	r8, r6
 800c1a0:	e02e      	b.n	800c200 <VoltAmpTask+0x74>
			DATA_To_SEND = CalculationVolt();
 800c1a2:	f7ff ff51 	bl	800c048 <CalculationVolt>
 800c1a6:	6030      	str	r0, [r6, #0]
		switch (global_mode) {
 800c1a8:	4b39      	ldr	r3, [pc, #228]	; (800c290 <VoltAmpTask+0x104>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d031      	beq.n	800c214 <VoltAmpTask+0x88>
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d04c      	beq.n	800c24e <VoltAmpTask+0xc2>
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d008      	beq.n	800c1ca <VoltAmpTask+0x3e>
			global_mode = IDLE_CASE;
 800c1b8:	4b35      	ldr	r3, [pc, #212]	; (800c290 <VoltAmpTask+0x104>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
			break;
 800c1be:	e01d      	b.n	800c1fc <VoltAmpTask+0x70>
			DATA_To_SEND = CalculationAmp();
 800c1c0:	f7ff ff90 	bl	800c0e4 <CalculationAmp>
 800c1c4:	4b31      	ldr	r3, [pc, #196]	; (800c28c <VoltAmpTask+0x100>)
 800c1c6:	6018      	str	r0, [r3, #0]
			break;
 800c1c8:	e7ee      	b.n	800c1a8 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800c1ca:	f004 fa27 	bl	801061c <HAL_GetTick>
 800c1ce:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800c1d0:	4b2d      	ldr	r3, [pc, #180]	; (800c288 <VoltAmpTask+0xfc>)
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	4b2e      	ldr	r3, [pc, #184]	; (800c290 <VoltAmpTask+0x104>)
 800c1d6:	7819      	ldrb	r1, [r3, #0]
 800c1d8:	4b2c      	ldr	r3, [pc, #176]	; (800c28c <VoltAmpTask+0x100>)
 800c1da:	6818      	ldr	r0, [r3, #0]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	f7ff fe37 	bl	800be54 <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800c1e6:	4f2b      	ldr	r7, [pc, #172]	; (800c294 <VoltAmpTask+0x108>)
 800c1e8:	e001      	b.n	800c1ee <VoltAmpTask+0x62>
				taskYIELD();
 800c1ea:	f004 f89f 	bl	801032c <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800c1ee:	f004 fa15 	bl	801061c <HAL_GetTick>
 800c1f2:	1b40      	subs	r0, r0, r5
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4298      	cmp	r0, r3
 800c1fa:	d3f6      	bcc.n	800c1ea <VoltAmpTask+0x5e>
		taskYIELD();
 800c1fc:	f004 f896 	bl	801032c <vPortYield>
		switch (unit) {
 800c200:	7823      	ldrb	r3, [r4, #0]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d0cd      	beq.n	800c1a2 <VoltAmpTask+0x16>
 800c206:	2b02      	cmp	r3, #2
 800c208:	d0da      	beq.n	800c1c0 <VoltAmpTask+0x34>
			DATA_To_SEND = CalculationVolt();
 800c20a:	f7ff ff1d 	bl	800c048 <CalculationVolt>
 800c20e:	4643      	mov	r3, r8
 800c210:	6018      	str	r0, [r3, #0]
			break;
 800c212:	e7c9      	b.n	800c1a8 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800c214:	f004 fa02 	bl	801061c <HAL_GetTick>
 800c218:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800c21a:	4b1f      	ldr	r3, [pc, #124]	; (800c298 <VoltAmpTask+0x10c>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	4a1a      	ldr	r2, [pc, #104]	; (800c288 <VoltAmpTask+0xfc>)
 800c220:	7812      	ldrb	r2, [r2, #0]
 800c222:	491b      	ldr	r1, [pc, #108]	; (800c290 <VoltAmpTask+0x104>)
 800c224:	7809      	ldrb	r1, [r1, #0]
 800c226:	4819      	ldr	r0, [pc, #100]	; (800c28c <VoltAmpTask+0x100>)
 800c228:	6800      	ldr	r0, [r0, #0]
 800c22a:	2700      	movs	r7, #0
 800c22c:	9701      	str	r7, [sp, #4]
 800c22e:	4f1b      	ldr	r7, [pc, #108]	; (800c29c <VoltAmpTask+0x110>)
 800c230:	783f      	ldrb	r7, [r7, #0]
 800c232:	9700      	str	r7, [sp, #0]
 800c234:	f7ff fe0e 	bl	800be54 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800c238:	4f16      	ldr	r7, [pc, #88]	; (800c294 <VoltAmpTask+0x108>)
 800c23a:	e001      	b.n	800c240 <VoltAmpTask+0xb4>
				taskYIELD();
 800c23c:	f004 f876 	bl	801032c <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800c240:	f004 f9ec 	bl	801061c <HAL_GetTick>
 800c244:	1b40      	subs	r0, r0, r5
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	4298      	cmp	r0, r3
 800c24a:	d3f7      	bcc.n	800c23c <VoltAmpTask+0xb0>
 800c24c:	e7d6      	b.n	800c1fc <VoltAmpTask+0x70>
			t0 = HAL_GetTick();
 800c24e:	f004 f9e5 	bl	801061c <HAL_GetTick>
 800c252:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800c254:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <VoltAmpTask+0xfc>)
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <VoltAmpTask+0x104>)
 800c25a:	7819      	ldrb	r1, [r3, #0]
 800c25c:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <VoltAmpTask+0x100>)
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <VoltAmpTask+0x114>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	2300      	movs	r3, #0
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	f7ff fdf3 	bl	800be54 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800c26e:	4f09      	ldr	r7, [pc, #36]	; (800c294 <VoltAmpTask+0x108>)
 800c270:	e001      	b.n	800c276 <VoltAmpTask+0xea>
				taskYIELD();
 800c272:	f004 f85b 	bl	801032c <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800c276:	f004 f9d1 	bl	801061c <HAL_GetTick>
 800c27a:	1b40      	subs	r0, r0, r5
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	4298      	cmp	r0, r3
 800c280:	d3f7      	bcc.n	800c272 <VoltAmpTask+0xe6>
 800c282:	e7bb      	b.n	800c1fc <VoltAmpTask+0x70>
 800c284:	20006344 	.word	0x20006344
 800c288:	200000a8 	.word	0x200000a8
 800c28c:	20001064 	.word	0x20001064
 800c290:	20006424 	.word	0x20006424
 800c294:	200065d0 	.word	0x200065d0
 800c298:	20006425 	.word	0x20006425
 800c29c:	20006648 	.word	0x20006648
 800c2a0:	200064e0 	.word	0x200064e0

0800c2a4 <SampleV>:
uint8_t SampleV(float *volt) {
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	0004      	movs	r4, r0
	*volt = CalculationVolt();
 800c2a8:	f7ff fece 	bl	800c048 <CalculationVolt>
 800c2ac:	6020      	str	r0, [r4, #0]
}
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	bd10      	pop	{r4, pc}

0800c2b2 <SampleA>:
uint8_t SampleA(float *curr) {
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	0004      	movs	r4, r0
	*curr = CalculationAmp();
 800c2b6:	f7ff ff15 	bl	800c0e4 <CalculationAmp>
 800c2ba:	6020      	str	r0, [r4, #0]
}
 800c2bc:	2000      	movs	r0, #0
 800c2be:	bd10      	pop	{r4, pc}

0800c2c0 <sampleCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c2c6:	d009      	beq.n	800c2dc <sampleCommand+0x1c>

	switch (unit) {
 800c2c8:	4b14      	ldr	r3, [pc, #80]	; (800c31c <sampleCommand+0x5c>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d007      	beq.n	800c2e0 <sampleCommand+0x20>
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d01e      	beq.n	800c312 <sampleCommand+0x52>
		break;
	case Amp:
		SampleA(&DATA_To_SEND1);
		break;
	default:
		SampleV(&DATA_To_SEND1);
 800c2d4:	4812      	ldr	r0, [pc, #72]	; (800c320 <sampleCommand+0x60>)
 800c2d6:	f7ff ffe5 	bl	800c2a4 <SampleV>
 800c2da:	e004      	b.n	800c2e6 <sampleCommand+0x26>
	configASSERT(pcWriteBuffer);
 800c2dc:	b672      	cpsid	i
 800c2de:	e7fe      	b.n	800c2de <sampleCommand+0x1e>
		SampleV(&DATA_To_SEND1);
 800c2e0:	480f      	ldr	r0, [pc, #60]	; (800c320 <sampleCommand+0x60>)
 800c2e2:	f7ff ffdf 	bl	800c2a4 <SampleV>
	}

	global_mode = SAMPLE_CLI_CASE;
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <sampleCommand+0x64>)
 800c2e8:	2206      	movs	r2, #6
 800c2ea:	701a      	strb	r2, [r3, #0]
	SendResults(DATA_To_SEND1, global_mode, unit, 0, 0, NULL);
 800c2ec:	4b0b      	ldr	r3, [pc, #44]	; (800c31c <sampleCommand+0x5c>)
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	4b0b      	ldr	r3, [pc, #44]	; (800c320 <sampleCommand+0x60>)
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	2106      	movs	r1, #6
 800c2fc:	f7ff fdaa 	bl	800be54 <SendResults>

	if (result != H2AR3_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800c300:	2299      	movs	r2, #153	; 0x99
 800c302:	0092      	lsls	r2, r2, #2
 800c304:	2100      	movs	r1, #0
 800c306:	0020      	movs	r0, r4
 800c308:	f007 fc52 	bl	8013bb0 <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c30c:	2000      	movs	r0, #0
 800c30e:	b002      	add	sp, #8
 800c310:	bd10      	pop	{r4, pc}
		SampleA(&DATA_To_SEND1);
 800c312:	4803      	ldr	r0, [pc, #12]	; (800c320 <sampleCommand+0x60>)
 800c314:	f7ff ffcd 	bl	800c2b2 <SampleA>
		break;
 800c318:	e7e5      	b.n	800c2e6 <sampleCommand+0x26>
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	200000a8 	.word	0x200000a8
 800c320:	20000008 	.word	0x20000008
 800c324:	20006424 	.word	0x20006424

0800c328 <StreamVToPort>:
		uint32_t Timeout) {
 800c328:	b510      	push	{r4, lr}
 800c32a:	b082      	sub	sp, #8
	global_port = Port;
 800c32c:	4c19      	ldr	r4, [pc, #100]	; (800c394 <StreamVToPort+0x6c>)
 800c32e:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800c330:	4819      	ldr	r0, [pc, #100]	; (800c398 <StreamVToPort+0x70>)
 800c332:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800c334:	4919      	ldr	r1, [pc, #100]	; (800c39c <StreamVToPort+0x74>)
 800c336:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800c338:	4a19      	ldr	r2, [pc, #100]	; (800c3a0 <StreamVToPort+0x78>)
 800c33a:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800c33c:	4a19      	ldr	r2, [pc, #100]	; (800c3a4 <StreamVToPort+0x7c>)
 800c33e:	2102      	movs	r1, #2
 800c340:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800c342:	4a19      	ldr	r2, [pc, #100]	; (800c3a8 <StreamVToPort+0x80>)
 800c344:	3901      	subs	r1, #1
 800c346:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	3203      	adds	r2, #3
 800c34c:	d902      	bls.n	800c354 <StreamVToPort+0x2c>
}
 800c34e:	2000      	movs	r0, #0
 800c350:	b002      	add	sp, #8
 800c352:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800c354:	0158      	lsls	r0, r3, #5
 800c356:	1ac0      	subs	r0, r0, r3
 800c358:	0080      	lsls	r0, r0, #2
 800c35a:	18c0      	adds	r0, r0, r3
 800c35c:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800c35e:	21fa      	movs	r1, #250	; 0xfa
 800c360:	0089      	lsls	r1, r1, #2
 800c362:	f7f3 feeb 	bl	800013c <__udivsi3>
 800c366:	0001      	movs	r1, r0
 800c368:	4b10      	ldr	r3, [pc, #64]	; (800c3ac <StreamVToPort+0x84>)
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	23ff      	movs	r3, #255	; 0xff
 800c36e:	2200      	movs	r2, #0
 800c370:	480f      	ldr	r0, [pc, #60]	; (800c3b0 <StreamVToPort+0x88>)
 800c372:	f003 fe1d 	bl	800ffb0 <xTimerCreate>
 800c376:	0004      	movs	r4, r0
 800c378:	4b0e      	ldr	r3, [pc, #56]	; (800c3b4 <StreamVToPort+0x8c>)
 800c37a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800c37c:	f003 f8b0 	bl	800f4e0 <xTaskGetTickCount>
 800c380:	0002      	movs	r2, r0
 800c382:	2301      	movs	r3, #1
 800c384:	425b      	negs	r3, r3
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	2101      	movs	r1, #1
 800c38c:	0020      	movs	r0, r4
 800c38e:	f003 fe2f 	bl	800fff0 <xTimerGenericCommand>
 800c392:	e7dc      	b.n	800c34e <StreamVToPort+0x26>
 800c394:	20006425 	.word	0x20006425
 800c398:	20006648 	.word	0x20006648
 800c39c:	200065d0 	.word	0x200065d0
 800c3a0:	2000664c 	.word	0x2000664c
 800c3a4:	20006424 	.word	0x20006424
 800c3a8:	200000a8 	.word	0x200000a8
 800c3ac:	0800ba95 	.word	0x0800ba95
 800c3b0:	0801a238 	.word	0x0801a238
 800c3b4:	20001074 	.word	0x20001074

0800c3b8 <StreamAToPort>:
		uint32_t Timeout) {
 800c3b8:	b510      	push	{r4, lr}
 800c3ba:	b082      	sub	sp, #8
	global_port = Port;
 800c3bc:	4c19      	ldr	r4, [pc, #100]	; (800c424 <StreamAToPort+0x6c>)
 800c3be:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800c3c0:	4819      	ldr	r0, [pc, #100]	; (800c428 <StreamAToPort+0x70>)
 800c3c2:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800c3c4:	4919      	ldr	r1, [pc, #100]	; (800c42c <StreamAToPort+0x74>)
 800c3c6:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800c3c8:	4a19      	ldr	r2, [pc, #100]	; (800c430 <StreamAToPort+0x78>)
 800c3ca:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	4919      	ldr	r1, [pc, #100]	; (800c434 <StreamAToPort+0x7c>)
 800c3d0:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800c3d2:	4919      	ldr	r1, [pc, #100]	; (800c438 <StreamAToPort+0x80>)
 800c3d4:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800c3d6:	1e5a      	subs	r2, r3, #1
 800c3d8:	3203      	adds	r2, #3
 800c3da:	d902      	bls.n	800c3e2 <StreamAToPort+0x2a>
}
 800c3dc:	2000      	movs	r0, #0
 800c3de:	b002      	add	sp, #8
 800c3e0:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800c3e2:	0158      	lsls	r0, r3, #5
 800c3e4:	1ac0      	subs	r0, r0, r3
 800c3e6:	0080      	lsls	r0, r0, #2
 800c3e8:	18c0      	adds	r0, r0, r3
 800c3ea:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800c3ec:	21fa      	movs	r1, #250	; 0xfa
 800c3ee:	0089      	lsls	r1, r1, #2
 800c3f0:	f7f3 fea4 	bl	800013c <__udivsi3>
 800c3f4:	0001      	movs	r1, r0
 800c3f6:	4b11      	ldr	r3, [pc, #68]	; (800c43c <StreamAToPort+0x84>)
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	23ff      	movs	r3, #255	; 0xff
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4810      	ldr	r0, [pc, #64]	; (800c440 <StreamAToPort+0x88>)
 800c400:	f003 fdd6 	bl	800ffb0 <xTimerCreate>
 800c404:	0004      	movs	r4, r0
 800c406:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <StreamAToPort+0x8c>)
 800c408:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800c40a:	f003 f869 	bl	800f4e0 <xTaskGetTickCount>
 800c40e:	0002      	movs	r2, r0
 800c410:	2301      	movs	r3, #1
 800c412:	425b      	negs	r3, r3
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	2300      	movs	r3, #0
 800c418:	2101      	movs	r1, #1
 800c41a:	0020      	movs	r0, r4
 800c41c:	f003 fde8 	bl	800fff0 <xTimerGenericCommand>
 800c420:	e7dc      	b.n	800c3dc <StreamAToPort+0x24>
 800c422:	46c0      	nop			; (mov r8, r8)
 800c424:	20006425 	.word	0x20006425
 800c428:	20006648 	.word	0x20006648
 800c42c:	200065d0 	.word	0x200065d0
 800c430:	2000664c 	.word	0x2000664c
 800c434:	20006424 	.word	0x20006424
 800c438:	200000a8 	.word	0x200000a8
 800c43c:	0800ba95 	.word	0x0800ba95
 800c440:	0801a238 	.word	0x0801a238
 800c444:	20001074 	.word	0x20001074

0800c448 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800c448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44a:	46c6      	mov	lr, r8
 800c44c:	b500      	push	{lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	ab08      	add	r3, sp, #32
 800c452:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800c454:	4b39      	ldr	r3, [pc, #228]	; (800c53c <Module_MessagingTask+0xf4>)
 800c456:	469c      	mov	ip, r3
 800c458:	4460      	add	r0, ip
 800c45a:	b283      	uxth	r3, r0
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d86a      	bhi.n	800c536 <Module_MessagingTask+0xee>
 800c460:	0098      	lsls	r0, r3, #2
 800c462:	4b37      	ldr	r3, [pc, #220]	; (800c540 <Module_MessagingTask+0xf8>)
 800c464:	581b      	ldr	r3, [r3, r0]
 800c466:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c468:	1e4f      	subs	r7, r1, #1
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c46a:	4836      	ldr	r0, [pc, #216]	; (800c544 <Module_MessagingTask+0xfc>)
 800c46c:	00fd      	lsls	r5, r7, #3
 800c46e:	1bee      	subs	r6, r5, r7
 800c470:	00f6      	lsls	r6, r6, #3
 800c472:	1986      	adds	r6, r0, r6
 800c474:	1931      	adds	r1, r6, r4
 800c476:	798b      	ldrb	r3, [r1, #6]
 800c478:	061b      	lsls	r3, r3, #24
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800c47a:	79ca      	ldrb	r2, [r1, #7]
 800c47c:	0412      	lsls	r2, r2, #16
 800c47e:	189b      	adds	r3, r3, r2
				+ cMessage[port - 1][9 + shift];
 800c480:	7a4a      	ldrb	r2, [r1, #9]
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c482:	189b      	adds	r3, r3, r2
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800c484:	7a0a      	ldrb	r2, [r1, #8]
 800c486:	0212      	lsls	r2, r2, #8
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c488:	4698      	mov	r8, r3
 800c48a:	4490      	add	r8, r2
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c48c:	788a      	ldrb	r2, [r1, #2]
 800c48e:	0612      	lsls	r2, r2, #24
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800c490:	78cb      	ldrb	r3, [r1, #3]
 800c492:	041b      	lsls	r3, r3, #16
 800c494:	469c      	mov	ip, r3
 800c496:	4462      	add	r2, ip
				+ cMessage[port - 1][5 + shift];
 800c498:	794b      	ldrb	r3, [r1, #5]
 800c49a:	469c      	mov	ip, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c49c:	4462      	add	r2, ip
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800c49e:	7909      	ldrb	r1, [r1, #4]
 800c4a0:	0209      	lsls	r1, r1, #8
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c4a2:	1852      	adds	r2, r2, r1
		StreamVToPort(cMessage[port - 1][1 + shift],
 800c4a4:	5d31      	ldrb	r1, [r6, r4]
 800c4a6:	1934      	adds	r4, r6, r4
 800c4a8:	7860      	ldrb	r0, [r4, #1]
 800c4aa:	4643      	mov	r3, r8
 800c4ac:	f7ff ff3c 	bl	800c328 <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800c4b0:	2000      	movs	r0, #0
}
 800c4b2:	b002      	add	sp, #8
 800c4b4:	bc04      	pop	{r2}
 800c4b6:	4690      	mov	r8, r2
 800c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c4ba:	1e4f      	subs	r7, r1, #1
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c4bc:	4821      	ldr	r0, [pc, #132]	; (800c544 <Module_MessagingTask+0xfc>)
 800c4be:	00fd      	lsls	r5, r7, #3
 800c4c0:	1bee      	subs	r6, r5, r7
 800c4c2:	00f6      	lsls	r6, r6, #3
 800c4c4:	1986      	adds	r6, r0, r6
 800c4c6:	1931      	adds	r1, r6, r4
 800c4c8:	798b      	ldrb	r3, [r1, #6]
 800c4ca:	061b      	lsls	r3, r3, #24
						+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800c4cc:	79ca      	ldrb	r2, [r1, #7]
 800c4ce:	0412      	lsls	r2, r2, #16
 800c4d0:	189b      	adds	r3, r3, r2
						+ cMessage[port - 1][9 + shift];
 800c4d2:	7a4a      	ldrb	r2, [r1, #9]
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c4d4:	189b      	adds	r3, r3, r2
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800c4d6:	7a0a      	ldrb	r2, [r1, #8]
 800c4d8:	0212      	lsls	r2, r2, #8
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800c4da:	4698      	mov	r8, r3
 800c4dc:	4490      	add	r8, r2
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c4de:	788a      	ldrb	r2, [r1, #2]
 800c4e0:	0612      	lsls	r2, r2, #24
						+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800c4e2:	78cb      	ldrb	r3, [r1, #3]
 800c4e4:	041b      	lsls	r3, r3, #16
 800c4e6:	469c      	mov	ip, r3
 800c4e8:	4462      	add	r2, ip
						+ cMessage[port - 1][5 + shift];
 800c4ea:	794b      	ldrb	r3, [r1, #5]
 800c4ec:	469c      	mov	ip, r3
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c4ee:	4462      	add	r2, ip
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800c4f0:	7909      	ldrb	r1, [r1, #4]
 800c4f2:	0209      	lsls	r1, r1, #8
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800c4f4:	1852      	adds	r2, r2, r1
				StreamAToPort(cMessage[port - 1][1 + shift],
 800c4f6:	5d31      	ldrb	r1, [r6, r4]
 800c4f8:	1934      	adds	r4, r6, r4
 800c4fa:	7860      	ldrb	r0, [r4, #1]
 800c4fc:	4643      	mov	r3, r8
 800c4fe:	f7ff ff5b 	bl	800c3b8 <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800c502:	2000      	movs	r0, #0
		break;
 800c504:	e7d5      	b.n	800c4b2 <Module_MessagingTask+0x6a>
		global_mode = IDLE_CASE;
 800c506:	4b10      	ldr	r3, [pc, #64]	; (800c548 <Module_MessagingTask+0x100>)
 800c508:	2200      	movs	r2, #0
 800c50a:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800c50c:	4b0f      	ldr	r3, [pc, #60]	; (800c54c <Module_MessagingTask+0x104>)
 800c50e:	6818      	ldr	r0, [r3, #0]
 800c510:	2301      	movs	r3, #1
 800c512:	425b      	negs	r3, r3
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	2300      	movs	r3, #0
 800c518:	2103      	movs	r1, #3
 800c51a:	f003 fd69 	bl	800fff0 <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800c51e:	2000      	movs	r0, #0
		break;
 800c520:	e7c7      	b.n	800c4b2 <Module_MessagingTask+0x6a>
		SampleV(&H2AR3_Read_V);
 800c522:	480b      	ldr	r0, [pc, #44]	; (800c550 <Module_MessagingTask+0x108>)
 800c524:	f7ff febe 	bl	800c2a4 <SampleV>
	Module_Status result = H2AR3_OK;
 800c528:	2000      	movs	r0, #0
		break;
 800c52a:	e7c2      	b.n	800c4b2 <Module_MessagingTask+0x6a>
		SampleA(&H2AR3_Read_A);
 800c52c:	4809      	ldr	r0, [pc, #36]	; (800c554 <Module_MessagingTask+0x10c>)
 800c52e:	f7ff fec0 	bl	800c2b2 <SampleA>
	Module_Status result = H2AR3_OK;
 800c532:	2000      	movs	r0, #0
		break;
 800c534:	e7bd      	b.n	800c4b2 <Module_MessagingTask+0x6a>
		result = H2AR3_ERR_UnknownMessage;
 800c536:	2001      	movs	r0, #1
 800c538:	e7bb      	b.n	800c4b2 <Module_MessagingTask+0x6a>
 800c53a:	46c0      	nop			; (mov r8, r8)
 800c53c:	fffff7cc 	.word	0xfffff7cc
 800c540:	0801a1dc 	.word	0x0801a1dc
 800c544:	2000054c 	.word	0x2000054c
 800c548:	20006424 	.word	0x20006424
 800c54c:	20001074 	.word	0x20001074
 800c550:	20006558 	.word	0x20006558
 800c554:	2000655c 	.word	0x2000655c

0800c558 <Stop>:
uint8_t Stop(void) {
 800c558:	b500      	push	{lr}
 800c55a:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800c55c:	2300      	movs	r3, #0
 800c55e:	4a06      	ldr	r2, [pc, #24]	; (800c578 <Stop+0x20>)
 800c560:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800c562:	4a06      	ldr	r2, [pc, #24]	; (800c57c <Stop+0x24>)
 800c564:	6810      	ldr	r0, [r2, #0]
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2200      	movs	r2, #0
 800c56a:	2103      	movs	r1, #3
 800c56c:	f003 fd40 	bl	800fff0 <xTimerGenericCommand>
}
 800c570:	2000      	movs	r0, #0
 800c572:	b003      	add	sp, #12
 800c574:	bd00      	pop	{pc}
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	20006424 	.word	0x20006424
 800c57c:	20001074 	.word	0x20001074

0800c580 <stopCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800c580:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c582:	2800      	cmp	r0, #0
 800c584:	d101      	bne.n	800c58a <stopCommand+0xa>
 800c586:	b672      	cpsid	i
 800c588:	e7fe      	b.n	800c588 <stopCommand+0x8>
	volt_buffer = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	4a03      	ldr	r2, [pc, #12]	; (800c59c <stopCommand+0x1c>)
 800c58e:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800c590:	4a03      	ldr	r2, [pc, #12]	; (800c5a0 <stopCommand+0x20>)
 800c592:	6013      	str	r3, [r2, #0]
	Stop();
 800c594:	f7ff ffe0 	bl	800c558 <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c598:	2000      	movs	r0, #0
 800c59a:	bd10      	pop	{r4, pc}
 800c59c:	200064dc 	.word	0x200064dc
 800c5a0:	200063ac 	.word	0x200063ac

0800c5a4 <StreamVToCLI>:
{
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	b082      	sub	sp, #8
	global_period=Period;
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	; (800c614 <StreamVToCLI+0x70>)
 800c5aa:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800c5ac:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <StreamVToCLI+0x74>)
 800c5ae:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	4a1a      	ldr	r2, [pc, #104]	; (800c61c <StreamVToCLI+0x78>)
 800c5b4:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800c5b6:	4a1a      	ldr	r2, [pc, #104]	; (800c620 <StreamVToCLI+0x7c>)
 800c5b8:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c5ba:	1e4b      	subs	r3, r1, #1
 800c5bc:	3303      	adds	r3, #3
 800c5be:	d909      	bls.n	800c5d4 <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800c5c0:	4b15      	ldr	r3, [pc, #84]	; (800c618 <StreamVToCLI+0x74>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c5c8:	4b16      	ldr	r3, [pc, #88]	; (800c624 <StreamVToCLI+0x80>)
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	701a      	strb	r2, [r3, #0]
}
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c5d4:	0148      	lsls	r0, r1, #5
 800c5d6:	1a40      	subs	r0, r0, r1
 800c5d8:	0080      	lsls	r0, r0, #2
 800c5da:	1840      	adds	r0, r0, r1
 800c5dc:	00c0      	lsls	r0, r0, #3
 800c5de:	21fa      	movs	r1, #250	; 0xfa
 800c5e0:	0089      	lsls	r1, r1, #2
 800c5e2:	f7f3 fdab 	bl	800013c <__udivsi3>
 800c5e6:	0001      	movs	r1, r0
 800c5e8:	4b0f      	ldr	r3, [pc, #60]	; (800c628 <StreamVToCLI+0x84>)
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	23ff      	movs	r3, #255	; 0xff
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	480e      	ldr	r0, [pc, #56]	; (800c62c <StreamVToCLI+0x88>)
 800c5f2:	f003 fcdd 	bl	800ffb0 <xTimerCreate>
 800c5f6:	0004      	movs	r4, r0
 800c5f8:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <StreamVToCLI+0x8c>)
 800c5fa:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c5fc:	f002 ff70 	bl	800f4e0 <xTaskGetTickCount>
 800c600:	0002      	movs	r2, r0
 800c602:	2301      	movs	r3, #1
 800c604:	425b      	negs	r3, r3
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	2300      	movs	r3, #0
 800c60a:	2101      	movs	r1, #1
 800c60c:	0020      	movs	r0, r4
 800c60e:	f003 fcef 	bl	800fff0 <xTimerGenericCommand>
 800c612:	e7d5      	b.n	800c5c0 <StreamVToCLI+0x1c>
 800c614:	200065d0 	.word	0x200065d0
 800c618:	2000664c 	.word	0x2000664c
 800c61c:	20006424 	.word	0x20006424
 800c620:	200000a8 	.word	0x200000a8
 800c624:	2000106c 	.word	0x2000106c
 800c628:	0800ba95 	.word	0x0800ba95
 800c62c:	0801a224 	.word	0x0801a224
 800c630:	20001074 	.word	0x20001074

0800c634 <StreamAToCLI>:
{
 800c634:	b510      	push	{r4, lr}
 800c636:	b082      	sub	sp, #8
	global_period=Period;
 800c638:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <StreamAToCLI+0x74>)
 800c63a:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <StreamAToCLI+0x78>)
 800c63e:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c640:	4b1b      	ldr	r3, [pc, #108]	; (800c6b0 <StreamAToCLI+0x7c>)
 800c642:	2201      	movs	r2, #1
 800c644:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <StreamAToCLI+0x80>)
 800c648:	3201      	adds	r2, #1
 800c64a:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c64c:	1e4b      	subs	r3, r1, #1
 800c64e:	3303      	adds	r3, #3
 800c650:	d909      	bls.n	800c666 <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800c652:	4b16      	ldr	r3, [pc, #88]	; (800c6ac <StreamAToCLI+0x78>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c65a:	4b17      	ldr	r3, [pc, #92]	; (800c6b8 <StreamAToCLI+0x84>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	701a      	strb	r2, [r3, #0]
}
 800c660:	2000      	movs	r0, #0
 800c662:	b002      	add	sp, #8
 800c664:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c666:	0148      	lsls	r0, r1, #5
 800c668:	1a40      	subs	r0, r0, r1
 800c66a:	0080      	lsls	r0, r0, #2
 800c66c:	1840      	adds	r0, r0, r1
 800c66e:	00c0      	lsls	r0, r0, #3
 800c670:	21fa      	movs	r1, #250	; 0xfa
 800c672:	0089      	lsls	r1, r1, #2
 800c674:	f7f3 fd62 	bl	800013c <__udivsi3>
 800c678:	0001      	movs	r1, r0
 800c67a:	4b10      	ldr	r3, [pc, #64]	; (800c6bc <StreamAToCLI+0x88>)
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	23ff      	movs	r3, #255	; 0xff
 800c680:	2200      	movs	r2, #0
 800c682:	480f      	ldr	r0, [pc, #60]	; (800c6c0 <StreamAToCLI+0x8c>)
 800c684:	f003 fc94 	bl	800ffb0 <xTimerCreate>
 800c688:	0004      	movs	r4, r0
 800c68a:	4b0e      	ldr	r3, [pc, #56]	; (800c6c4 <StreamAToCLI+0x90>)
 800c68c:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c68e:	f002 ff27 	bl	800f4e0 <xTaskGetTickCount>
 800c692:	0002      	movs	r2, r0
 800c694:	2301      	movs	r3, #1
 800c696:	425b      	negs	r3, r3
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	2300      	movs	r3, #0
 800c69c:	2101      	movs	r1, #1
 800c69e:	0020      	movs	r0, r4
 800c6a0:	f003 fca6 	bl	800fff0 <xTimerGenericCommand>
 800c6a4:	e7d5      	b.n	800c652 <StreamAToCLI+0x1e>
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	200065d0 	.word	0x200065d0
 800c6ac:	2000664c 	.word	0x2000664c
 800c6b0:	20006424 	.word	0x20006424
 800c6b4:	200000a8 	.word	0x200000a8
 800c6b8:	2000106c 	.word	0x2000106c
 800c6bc:	0800ba95 	.word	0x0800ba95
 800c6c0:	0801a224 	.word	0x0801a224
 800c6c4:	20001074 	.word	0x20001074

0800c6c8 <demoCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800c6c8:	b530      	push	{r4, r5, lr}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c6ce:	d101      	bne.n	800c6d4 <demoCommand+0xc>
 800c6d0:	b672      	cpsid	i
 800c6d2:	e7fe      	b.n	800c6d2 <demoCommand+0xa>



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800c6d4:	222d      	movs	r2, #45	; 0x2d
 800c6d6:	491e      	ldr	r1, [pc, #120]	; (800c750 <demoCommand+0x88>)
 800c6d8:	f007 fa61 	bl	8013b9e <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c6dc:	0020      	movs	r0, r4
 800c6de:	f7f3 fd1b 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c6e2:	b282      	uxth	r2, r0
 800c6e4:	4b1b      	ldr	r3, [pc, #108]	; (800c754 <demoCommand+0x8c>)
 800c6e6:	7818      	ldrb	r0, [r3, #0]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	425b      	negs	r3, r3
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	3333      	adds	r3, #51	; 0x33
 800c6f0:	0021      	movs	r1, r4
 800c6f2:	f001 fe41 	bl	800e378 <writePxMutex>
		switch (unit) {
 800c6f6:	4b18      	ldr	r3, [pc, #96]	; (800c758 <demoCommand+0x90>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d007      	beq.n	800c70e <demoCommand+0x46>
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d020      	beq.n	800c744 <demoCommand+0x7c>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800c702:	20fa      	movs	r0, #250	; 0xfa
 800c704:	4915      	ldr	r1, [pc, #84]	; (800c75c <demoCommand+0x94>)
 800c706:	0040      	lsls	r0, r0, #1
 800c708:	f7ff ff4c 	bl	800c5a4 <StreamVToCLI>
 800c70c:	e004      	b.n	800c718 <demoCommand+0x50>
			StreamVToCLI(500, 10000);
 800c70e:	20fa      	movs	r0, #250	; 0xfa
 800c710:	4912      	ldr	r1, [pc, #72]	; (800c75c <demoCommand+0x94>)
 800c712:	0040      	lsls	r0, r0, #1
 800c714:	f7ff ff46 	bl	800c5a4 <StreamVToCLI>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <demoCommand+0x98>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d006      	beq.n	800c72e <demoCommand+0x66>
 800c720:	4d0f      	ldr	r5, [pc, #60]	; (800c760 <demoCommand+0x98>)
			Delay_ms(1);
 800c722:	2001      	movs	r0, #1
 800c724:	f003 ff80 	bl	8010628 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800c728:	782b      	ldrb	r3, [r5, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f9      	bne.n	800c722 <demoCommand+0x5a>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800c72e:	0020      	movs	r0, r4
 800c730:	f7f3 fcf2 	bl	8000118 <strlen>
 800c734:	0002      	movs	r2, r0
 800c736:	2100      	movs	r1, #0
 800c738:	0020      	movs	r0, r4
 800c73a:	f007 fa39 	bl	8013bb0 <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800c73e:	2000      	movs	r0, #0
 800c740:	b003      	add	sp, #12
 800c742:	bd30      	pop	{r4, r5, pc}
			StreamAToCLI(500, 10000);
 800c744:	20fa      	movs	r0, #250	; 0xfa
 800c746:	4905      	ldr	r1, [pc, #20]	; (800c75c <demoCommand+0x94>)
 800c748:	0040      	lsls	r0, r0, #1
 800c74a:	f7ff ff73 	bl	800c634 <StreamAToCLI>
			break;
 800c74e:	e7e3      	b.n	800c718 <demoCommand+0x50>
 800c750:	0801a24c 	.word	0x0801a24c
 800c754:	200002b8 	.word	0x200002b8
 800c758:	200000a8 	.word	0x200000a8
 800c75c:	00002710 	.word	0x00002710
 800c760:	2000106c 	.word	0x2000106c

0800c764 <streamCommand>:
{
 800c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c766:	b087      	sub	sp, #28
 800c768:	0005      	movs	r5, r0
 800c76a:	9100      	str	r1, [sp, #0]
 800c76c:	0014      	movs	r4, r2
	*pcWriteBuffer = '\0';
 800c76e:	2300      	movs	r3, #0
 800c770:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800c772:	9302      	str	r3, [sp, #8]
	portBASE_TYPE timeoutStrLen = 0;
 800c774:	9303      	str	r3, [sp, #12]
	portBASE_TYPE portStrLen = 0;
 800c776:	9304      	str	r3, [sp, #16]
	portBASE_TYPE modStrLen = 0;
 800c778:	9305      	str	r3, [sp, #20]
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &periodStrLen);
 800c77a:	aa02      	add	r2, sp, #8
 800c77c:	2101      	movs	r1, #1
 800c77e:	0020      	movs	r0, r4
 800c780:	f002 f840 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800c784:	0006      	movs	r6, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &timeoutStrLen);
 800c786:	aa03      	add	r2, sp, #12
 800c788:	2102      	movs	r1, #2
 800c78a:	0020      	movs	r0, r4
 800c78c:	f002 f83a 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800c790:	0007      	movs	r7, r0
	if ((pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800c792:	2e00      	cmp	r6, #0
 800c794:	d02d      	beq.n	800c7f2 <streamCommand+0x8e>
 800c796:	2800      	cmp	r0, #0
 800c798:	d02b      	beq.n	800c7f2 <streamCommand+0x8e>
	*pPeriod = atoi(pPeriodMSStr);
 800c79a:	0030      	movs	r0, r6
 800c79c:	f007 f987 	bl	8013aae <atoi>
 800c7a0:	9001      	str	r0, [sp, #4]
	*pTimeout = atoi(pTimeoutMSStr);
 800c7a2:	0038      	movs	r0, r7
 800c7a4:	f007 f983 	bl	8013aae <atoi>
 800c7a8:	0007      	movs	r7, r0
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &portStrLen);
 800c7aa:	aa04      	add	r2, sp, #16
 800c7ac:	2103      	movs	r1, #3
 800c7ae:	0020      	movs	r0, r4
 800c7b0:	f002 f828 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800c7b4:	0006      	movs	r6, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &modStrLen);
 800c7b6:	aa05      	add	r2, sp, #20
 800c7b8:	2104      	movs	r1, #4
 800c7ba:	0020      	movs	r0, r4
 800c7bc:	f002 f822 	bl	800e804 <FreeRTOS_CLIGetParameter>
 800c7c0:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c7c2:	d014      	beq.n	800c7ee <streamCommand+0x8a>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800c7c4:	2e00      	cmp	r6, #0
 800c7c6:	d014      	beq.n	800c7f2 <streamCommand+0x8e>
	*pPort = atoi(pPortStr);
 800c7c8:	0030      	movs	r0, r6
 800c7ca:	f007 f970 	bl	8013aae <atoi>
 800c7ce:	b2c6      	uxtb	r6, r0
	*pModule = atoi(pModStr);
 800c7d0:	0020      	movs	r0, r4
 800c7d2:	f007 f96c 	bl	8013aae <atoi>
 800c7d6:	b2c1      	uxtb	r1, r0
            if(unit == Volt)
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <streamCommand+0xe0>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
	*pPortOrCLI = false;
 800c7dc:	2200      	movs	r2, #0
            if(unit == Volt)
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d126      	bne.n	800c830 <streamCommand+0xcc>
				StreamVToPort(port, module, period, timeout);
 800c7e2:	003b      	movs	r3, r7
 800c7e4:	9a01      	ldr	r2, [sp, #4]
 800c7e6:	0030      	movs	r0, r6
 800c7e8:	f7ff fd9e 	bl	800c328 <StreamVToPort>
 800c7ec:	e022      	b.n	800c834 <streamCommand+0xd0>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c7ee:	2e00      	cmp	r6, #0
 800c7f0:	d012      	beq.n	800c818 <streamCommand+0xb4>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c7f2:	4a15      	ldr	r2, [pc, #84]	; (800c848 <streamCommand+0xe4>)
 800c7f4:	9900      	ldr	r1, [sp, #0]
 800c7f6:	0028      	movs	r0, r5
 800c7f8:	f007 ff36 	bl	8014668 <sniprintf>
		return pdFALSE;
 800c7fc:	e01f      	b.n	800c83e <streamCommand+0xda>
    		if (portOrCLI) {
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	d004      	beq.n	800c80c <streamCommand+0xa8>
    			StreamAToCLI(period, timeout);
 800c802:	0039      	movs	r1, r7
 800c804:	9801      	ldr	r0, [sp, #4]
 800c806:	f7ff ff15 	bl	800c634 <StreamAToCLI>
 800c80a:	e013      	b.n	800c834 <streamCommand+0xd0>
    			StreamAToPort(port, module, period, timeout);
 800c80c:	003b      	movs	r3, r7
 800c80e:	9a01      	ldr	r2, [sp, #4]
 800c810:	0030      	movs	r0, r6
 800c812:	f7ff fdd1 	bl	800c3b8 <StreamAToPort>
 800c816:	e00d      	b.n	800c834 <streamCommand+0xd0>
            if(unit == Volt)
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <streamCommand+0xe0>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d104      	bne.n	800c82a <streamCommand+0xc6>
				StreamVToCLI(period, timeout);
 800c820:	0039      	movs	r1, r7
 800c822:	9801      	ldr	r0, [sp, #4]
 800c824:	f7ff febe 	bl	800c5a4 <StreamVToCLI>
 800c828:	e004      	b.n	800c834 <streamCommand+0xd0>
	*pPortOrCLI = true;
 800c82a:	2201      	movs	r2, #1
	uint8_t module = 0;
 800c82c:	2100      	movs	r1, #0
	uint8_t port = 0;
 800c82e:	000e      	movs	r6, r1
            else if(unit == Amp)
 800c830:	2b02      	cmp	r3, #2
 800c832:	d0e4      	beq.n	800c7fe <streamCommand+0x9a>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800c834:	4a05      	ldr	r2, [pc, #20]	; (800c84c <streamCommand+0xe8>)
 800c836:	9900      	ldr	r1, [sp, #0]
 800c838:	0028      	movs	r0, r5
 800c83a:	f007 ff15 	bl	8014668 <sniprintf>
}
 800c83e:	2000      	movs	r0, #0
 800c840:	b007      	add	sp, #28
 800c842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c844:	200000a8 	.word	0x200000a8
 800c848:	0801a3f0 	.word	0x0801a3f0
 800c84c:	080196b8 	.word	0x080196b8

0800c850 <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800c850:	b500      	push	{lr}
 800c852:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800c854:	2307      	movs	r3, #7
 800c856:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c858:	2380      	movs	r3, #128	; 0x80
 800c85a:	015b      	lsls	r3, r3, #5
 800c85c:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c85e:	2304      	movs	r3, #4
 800c860:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c862:	a901      	add	r1, sp, #4
 800c864:	4802      	ldr	r0, [pc, #8]	; (800c870 <ADC_Select_CH7+0x20>)
 800c866:	f004 f95d 	bl	8010b24 <HAL_ADC_ConfigChannel>

	}

}
 800c86a:	b005      	add	sp, #20
 800c86c:	bd00      	pop	{pc}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	20006344 	.word	0x20006344

0800c874 <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800c874:	b500      	push	{lr}
 800c876:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800c878:	2307      	movs	r3, #7
 800c87a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800c87c:	4b04      	ldr	r3, [pc, #16]	; (800c890 <ADC_Deselect_CH7+0x1c>)
 800c87e:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c880:	2304      	movs	r3, #4
 800c882:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c884:	a901      	add	r1, sp, #4
 800c886:	4803      	ldr	r0, [pc, #12]	; (800c894 <ADC_Deselect_CH7+0x20>)
 800c888:	f004 f94c 	bl	8010b24 <HAL_ADC_ConfigChannel>

	}
}
 800c88c:	b005      	add	sp, #20
 800c88e:	bd00      	pop	{pc}
 800c890:	00001001 	.word	0x00001001
 800c894:	20006344 	.word	0x20006344

0800c898 <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800c898:	b500      	push	{lr}
 800c89a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800c89c:	2309      	movs	r3, #9
 800c89e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c8a0:	2380      	movs	r3, #128	; 0x80
 800c8a2:	015b      	lsls	r3, r3, #5
 800c8a4:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c8a6:	2304      	movs	r3, #4
 800c8a8:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8aa:	a901      	add	r1, sp, #4
 800c8ac:	4802      	ldr	r0, [pc, #8]	; (800c8b8 <ADC_Select_CH9+0x20>)
 800c8ae:	f004 f939 	bl	8010b24 <HAL_ADC_ConfigChannel>

	}

}
 800c8b2:	b005      	add	sp, #20
 800c8b4:	bd00      	pop	{pc}
 800c8b6:	46c0      	nop			; (mov r8, r8)
 800c8b8:	20006344 	.word	0x20006344

0800c8bc <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800c8bc:	b500      	push	{lr}
 800c8be:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800c8c0:	2309      	movs	r3, #9
 800c8c2:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800c8c4:	4b04      	ldr	r3, [pc, #16]	; (800c8d8 <ADC_Deselect_CH9+0x1c>)
 800c8c6:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8cc:	a901      	add	r1, sp, #4
 800c8ce:	4803      	ldr	r0, [pc, #12]	; (800c8dc <ADC_Deselect_CH9+0x20>)
 800c8d0:	f004 f928 	bl	8010b24 <HAL_ADC_ConfigChannel>

	}
}
 800c8d4:	b005      	add	sp, #20
 800c8d6:	bd00      	pop	{pc}
 800c8d8:	00001001 	.word	0x00001001
 800c8dc:	20006344 	.word	0x20006344

0800c8e0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c8e0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c8e2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c8e8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c8ea:	2280      	movs	r2, #128	; 0x80
 800c8ec:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c8ee:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8f0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8f2:	3320      	adds	r3, #32
 800c8f4:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c8f6:	2380      	movs	r3, #128	; 0x80
 800c8f8:	019b      	lsls	r3, r3, #6
 800c8fa:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c8fc:	f004 fba2 	bl	8011044 <HAL_DMA_Init>
}
 800c900:	bd10      	pop	{r4, pc}

0800c902 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c902:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c904:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c906:	2310      	movs	r3, #16
 800c908:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c90a:	2300      	movs	r3, #0
 800c90c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c90e:	2280      	movs	r2, #128	; 0x80
 800c910:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c912:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c914:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c916:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c918:	2380      	movs	r3, #128	; 0x80
 800c91a:	019b      	lsls	r3, r3, #6
 800c91c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c91e:	f004 fb91 	bl	8011044 <HAL_DMA_Init>
}
 800c922:	bd10      	pop	{r4, pc}

0800c924 <DMA_Init>:
{
 800c924:	b510      	push	{r4, lr}
 800c926:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c928:	4b18      	ldr	r3, [pc, #96]	; (800c98c <DMA_Init+0x68>)
 800c92a:	6959      	ldr	r1, [r3, #20]
 800c92c:	2201      	movs	r2, #1
 800c92e:	4311      	orrs	r1, r2
 800c930:	6159      	str	r1, [r3, #20]
 800c932:	6959      	ldr	r1, [r3, #20]
 800c934:	400a      	ands	r2, r1
 800c936:	9200      	str	r2, [sp, #0]
 800c938:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c93a:	6959      	ldr	r1, [r3, #20]
 800c93c:	2202      	movs	r2, #2
 800c93e:	4311      	orrs	r1, r2
 800c940:	6159      	str	r1, [r3, #20]
 800c942:	695b      	ldr	r3, [r3, #20]
 800c944:	401a      	ands	r2, r3
 800c946:	9201      	str	r2, [sp, #4]
 800c948:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c94a:	4c11      	ldr	r4, [pc, #68]	; (800c990 <DMA_Init+0x6c>)
 800c94c:	4911      	ldr	r1, [pc, #68]	; (800c994 <DMA_Init+0x70>)
 800c94e:	0020      	movs	r0, r4
 800c950:	f7ff ffc6 	bl	800c8e0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c954:	0020      	movs	r0, r4
 800c956:	3038      	adds	r0, #56	; 0x38
 800c958:	490f      	ldr	r1, [pc, #60]	; (800c998 <DMA_Init+0x74>)
 800c95a:	f7ff ffc1 	bl	800c8e0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c95e:	0020      	movs	r0, r4
 800c960:	3070      	adds	r0, #112	; 0x70
 800c962:	490e      	ldr	r1, [pc, #56]	; (800c99c <DMA_Init+0x78>)
 800c964:	f7ff ffbc 	bl	800c8e0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c968:	4c0d      	ldr	r4, [pc, #52]	; (800c9a0 <DMA_Init+0x7c>)
 800c96a:	490e      	ldr	r1, [pc, #56]	; (800c9a4 <DMA_Init+0x80>)
 800c96c:	0020      	movs	r0, r4
 800c96e:	f7ff ffc8 	bl	800c902 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c972:	0020      	movs	r0, r4
 800c974:	3038      	adds	r0, #56	; 0x38
 800c976:	490c      	ldr	r1, [pc, #48]	; (800c9a8 <DMA_Init+0x84>)
 800c978:	f7ff ffc3 	bl	800c902 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c97c:	0020      	movs	r0, r4
 800c97e:	3070      	adds	r0, #112	; 0x70
 800c980:	490a      	ldr	r1, [pc, #40]	; (800c9ac <DMA_Init+0x88>)
 800c982:	f7ff ffbe 	bl	800c902 <DMA_MSG_TX_CH_Init>
}
 800c986:	b002      	add	sp, #8
 800c988:	bd10      	pop	{r4, pc}
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	40021000 	.word	0x40021000
 800c990:	20001078 	.word	0x20001078
 800c994:	40020008 	.word	0x40020008
 800c998:	40020030 	.word	0x40020030
 800c99c:	40020058 	.word	0x40020058
 800c9a0:	200011c8 	.word	0x200011c8
 800c9a4:	4002001c 	.word	0x4002001c
 800c9a8:	40020044 	.word	0x40020044
 800c9ac:	40020080 	.word	0x40020080

0800c9b0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c9b0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c9b2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c9b8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c9ba:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c9bc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c9be:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c9c0:	3320      	adds	r3, #32
 800c9c2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c9c4:	2380      	movs	r3, #128	; 0x80
 800c9c6:	015b      	lsls	r3, r3, #5
 800c9c8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c9ca:	f004 fb3b 	bl	8011044 <HAL_DMA_Init>
}
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c9d0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c9d2:	6803      	ldr	r3, [r0, #0]
 800c9d4:	4a20      	ldr	r2, [pc, #128]	; (800ca58 <SetupDMAInterrupts+0x88>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d020      	beq.n	800ca1c <SetupDMAInterrupts+0x4c>
 800c9da:	d827      	bhi.n	800ca2c <SetupDMAInterrupts+0x5c>
 800c9dc:	4a1f      	ldr	r2, [pc, #124]	; (800ca5c <SetupDMAInterrupts+0x8c>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00e      	beq.n	800ca00 <SetupDMAInterrupts+0x30>
 800c9e2:	d815      	bhi.n	800ca10 <SetupDMAInterrupts+0x40>
 800c9e4:	4a1e      	ldr	r2, [pc, #120]	; (800ca60 <SetupDMAInterrupts+0x90>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d107      	bne.n	800c9fa <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2009      	movs	r0, #9
 800c9ee:	f004 f98b 	bl	8010d08 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c9f2:	2009      	movs	r0, #9
 800c9f4:	f004 f9bc 	bl	8010d70 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c9f8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <SetupDMAInterrupts+0x94>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d1fb      	bne.n	800c9f8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ca00:	2200      	movs	r2, #0
 800ca02:	200a      	movs	r0, #10
 800ca04:	f004 f980 	bl	8010d08 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ca08:	200a      	movs	r0, #10
 800ca0a:	f004 f9b1 	bl	8010d70 <HAL_NVIC_EnableIRQ>
			break;
 800ca0e:	e7f3      	b.n	800c9f8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ca10:	4a15      	ldr	r2, [pc, #84]	; (800ca68 <SetupDMAInterrupts+0x98>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d002      	beq.n	800ca1c <SetupDMAInterrupts+0x4c>
 800ca16:	4a15      	ldr	r2, [pc, #84]	; (800ca6c <SetupDMAInterrupts+0x9c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d1ed      	bne.n	800c9f8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	200b      	movs	r0, #11
 800ca20:	f004 f972 	bl	8010d08 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ca24:	200b      	movs	r0, #11
 800ca26:	f004 f9a3 	bl	8010d70 <HAL_NVIC_EnableIRQ>
}
 800ca2a:	e7e5      	b.n	800c9f8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ca2c:	4a10      	ldr	r2, [pc, #64]	; (800ca70 <SetupDMAInterrupts+0xa0>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d0e6      	beq.n	800ca00 <SetupDMAInterrupts+0x30>
 800ca32:	d909      	bls.n	800ca48 <SetupDMAInterrupts+0x78>
 800ca34:	4a0f      	ldr	r2, [pc, #60]	; (800ca74 <SetupDMAInterrupts+0xa4>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d0f0      	beq.n	800ca1c <SetupDMAInterrupts+0x4c>
 800ca3a:	4a0f      	ldr	r2, [pc, #60]	; (800ca78 <SetupDMAInterrupts+0xa8>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d0ed      	beq.n	800ca1c <SetupDMAInterrupts+0x4c>
 800ca40:	4a0e      	ldr	r2, [pc, #56]	; (800ca7c <SetupDMAInterrupts+0xac>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d1d8      	bne.n	800c9f8 <SetupDMAInterrupts+0x28>
 800ca46:	e7e9      	b.n	800ca1c <SetupDMAInterrupts+0x4c>
 800ca48:	4a0d      	ldr	r2, [pc, #52]	; (800ca80 <SetupDMAInterrupts+0xb0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d0e6      	beq.n	800ca1c <SetupDMAInterrupts+0x4c>
 800ca4e:	4a0d      	ldr	r2, [pc, #52]	; (800ca84 <SetupDMAInterrupts+0xb4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d0d5      	beq.n	800ca00 <SetupDMAInterrupts+0x30>
 800ca54:	e7d0      	b.n	800c9f8 <SetupDMAInterrupts+0x28>
 800ca56:	46c0      	nop			; (mov r8, r8)
 800ca58:	4002006c 	.word	0x4002006c
 800ca5c:	40020030 	.word	0x40020030
 800ca60:	40020008 	.word	0x40020008
 800ca64:	4002001c 	.word	0x4002001c
 800ca68:	40020044 	.word	0x40020044
 800ca6c:	40020058 	.word	0x40020058
 800ca70:	4002041c 	.word	0x4002041c
 800ca74:	40020444 	.word	0x40020444
 800ca78:	40020458 	.word	0x40020458
 800ca7c:	40020430 	.word	0x40020430
 800ca80:	40020080 	.word	0x40020080
 800ca84:	40020408 	.word	0x40020408

0800ca88 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800ca88:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ca8a:	6803      	ldr	r3, [r0, #0]
 800ca8c:	4a1a      	ldr	r2, [pc, #104]	; (800caf8 <UnSetupDMAInterrupts+0x70>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d018      	beq.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800ca92:	d81b      	bhi.n	800cacc <UnSetupDMAInterrupts+0x44>
 800ca94:	4a19      	ldr	r2, [pc, #100]	; (800cafc <UnSetupDMAInterrupts+0x74>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d00a      	beq.n	800cab0 <UnSetupDMAInterrupts+0x28>
 800ca9a:	d80d      	bhi.n	800cab8 <UnSetupDMAInterrupts+0x30>
 800ca9c:	4a18      	ldr	r2, [pc, #96]	; (800cb00 <UnSetupDMAInterrupts+0x78>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d103      	bne.n	800caaa <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800caa2:	2009      	movs	r0, #9
 800caa4:	f004 f96e 	bl	8010d84 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800caa8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800caaa:	4a16      	ldr	r2, [pc, #88]	; (800cb04 <UnSetupDMAInterrupts+0x7c>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d1fb      	bne.n	800caa8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cab0:	200a      	movs	r0, #10
 800cab2:	f004 f967 	bl	8010d84 <HAL_NVIC_DisableIRQ>
			break;
 800cab6:	e7f7      	b.n	800caa8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cab8:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <UnSetupDMAInterrupts+0x80>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d002      	beq.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800cabe:	4a13      	ldr	r2, [pc, #76]	; (800cb0c <UnSetupDMAInterrupts+0x84>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d1f1      	bne.n	800caa8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cac4:	200b      	movs	r0, #11
 800cac6:	f004 f95d 	bl	8010d84 <HAL_NVIC_DisableIRQ>
}
 800caca:	e7ed      	b.n	800caa8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cacc:	4a10      	ldr	r2, [pc, #64]	; (800cb10 <UnSetupDMAInterrupts+0x88>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d0ee      	beq.n	800cab0 <UnSetupDMAInterrupts+0x28>
 800cad2:	d909      	bls.n	800cae8 <UnSetupDMAInterrupts+0x60>
 800cad4:	4a0f      	ldr	r2, [pc, #60]	; (800cb14 <UnSetupDMAInterrupts+0x8c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d0f4      	beq.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800cada:	4a0f      	ldr	r2, [pc, #60]	; (800cb18 <UnSetupDMAInterrupts+0x90>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d0f1      	beq.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800cae0:	4a0e      	ldr	r2, [pc, #56]	; (800cb1c <UnSetupDMAInterrupts+0x94>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d1e0      	bne.n	800caa8 <UnSetupDMAInterrupts+0x20>
 800cae6:	e7ed      	b.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800cae8:	4a0d      	ldr	r2, [pc, #52]	; (800cb20 <UnSetupDMAInterrupts+0x98>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d0ea      	beq.n	800cac4 <UnSetupDMAInterrupts+0x3c>
 800caee:	4a0d      	ldr	r2, [pc, #52]	; (800cb24 <UnSetupDMAInterrupts+0x9c>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d0dd      	beq.n	800cab0 <UnSetupDMAInterrupts+0x28>
 800caf4:	e7d8      	b.n	800caa8 <UnSetupDMAInterrupts+0x20>
 800caf6:	46c0      	nop			; (mov r8, r8)
 800caf8:	4002006c 	.word	0x4002006c
 800cafc:	40020030 	.word	0x40020030
 800cb00:	40020008 	.word	0x40020008
 800cb04:	4002001c 	.word	0x4002001c
 800cb08:	40020044 	.word	0x40020044
 800cb0c:	40020058 	.word	0x40020058
 800cb10:	4002041c 	.word	0x4002041c
 800cb14:	40020444 	.word	0x40020444
 800cb18:	40020458 	.word	0x40020458
 800cb1c:	40020430 	.word	0x40020430
 800cb20:	40020080 	.word	0x40020080
 800cb24:	40020408 	.word	0x40020408

0800cb28 <DMA_MSG_TX_UnSetup>:
{	
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800cb2c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cb2e:	f7ff ffab 	bl	800ca88 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800cb32:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800cb34:	2300      	movs	r3, #0
 800cb36:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800cb38:	6623      	str	r3, [r4, #96]	; 0x60
}
 800cb3a:	bd10      	pop	{r4, pc}

0800cb3c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cb3c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cb3e:	6803      	ldr	r3, [r0, #0]
 800cb40:	4abd      	ldr	r2, [pc, #756]	; (800ce38 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d02f      	beq.n	800cba6 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cb46:	4abd      	ldr	r2, [pc, #756]	; (800ce3c <RemapAndLinkDMAtoUARTRx+0x300>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d100      	bne.n	800cb4e <RemapAndLinkDMAtoUARTRx+0x12>
 800cb4c:	e087      	b.n	800cc5e <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cb4e:	4abc      	ldr	r2, [pc, #752]	; (800ce40 <RemapAndLinkDMAtoUARTRx+0x304>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d100      	bne.n	800cb56 <RemapAndLinkDMAtoUARTRx+0x1a>
 800cb54:	e0dc      	b.n	800cd10 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cb56:	4abb      	ldr	r2, [pc, #748]	; (800ce44 <RemapAndLinkDMAtoUARTRx+0x308>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d000      	beq.n	800cb5e <RemapAndLinkDMAtoUARTRx+0x22>
 800cb5c:	e18a      	b.n	800ce74 <RemapAndLinkDMAtoUARTRx+0x338>
 800cb5e:	680b      	ldr	r3, [r1, #0]
 800cb60:	4ab9      	ldr	r2, [pc, #740]	; (800ce48 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d100      	bne.n	800cb68 <RemapAndLinkDMAtoUARTRx+0x2c>
 800cb66:	e12d      	b.n	800cdc4 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cb68:	4ab8      	ldr	r2, [pc, #736]	; (800ce4c <RemapAndLinkDMAtoUARTRx+0x310>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d100      	bne.n	800cb70 <RemapAndLinkDMAtoUARTRx+0x34>
 800cb6e:	e134      	b.n	800cdda <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cb70:	4ab7      	ldr	r2, [pc, #732]	; (800ce50 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d100      	bne.n	800cb78 <RemapAndLinkDMAtoUARTRx+0x3c>
 800cb76:	e13c      	b.n	800cdf2 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cb78:	4ab6      	ldr	r2, [pc, #728]	; (800ce54 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d100      	bne.n	800cb80 <RemapAndLinkDMAtoUARTRx+0x44>
 800cb7e:	e144      	b.n	800ce0a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cb80:	4ab5      	ldr	r2, [pc, #724]	; (800ce58 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d100      	bne.n	800cb88 <RemapAndLinkDMAtoUARTRx+0x4c>
 800cb86:	e14c      	b.n	800ce22 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cb88:	4ab4      	ldr	r2, [pc, #720]	; (800ce5c <RemapAndLinkDMAtoUARTRx+0x320>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d11e      	bne.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cb8e:	4ab4      	ldr	r2, [pc, #720]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cb90:	23a8      	movs	r3, #168	; 0xa8
 800cb92:	58d4      	ldr	r4, [r2, r3]
 800cb94:	4db3      	ldr	r5, [pc, #716]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cb96:	402c      	ands	r4, r5
 800cb98:	50d4      	str	r4, [r2, r3]
 800cb9a:	58d5      	ldr	r5, [r2, r3]
 800cb9c:	24b0      	movs	r4, #176	; 0xb0
 800cb9e:	0124      	lsls	r4, r4, #4
 800cba0:	432c      	orrs	r4, r5
 800cba2:	50d4      	str	r4, [r2, r3]
 800cba4:	e012      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cba6:	680b      	ldr	r3, [r1, #0]
 800cba8:	4aa7      	ldr	r2, [pc, #668]	; (800ce48 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d011      	beq.n	800cbd2 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800cbae:	4aa7      	ldr	r2, [pc, #668]	; (800ce4c <RemapAndLinkDMAtoUARTRx+0x310>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d019      	beq.n	800cbe8 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800cbb4:	4aa6      	ldr	r2, [pc, #664]	; (800ce50 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d022      	beq.n	800cc00 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800cbba:	4aa6      	ldr	r2, [pc, #664]	; (800ce54 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d02b      	beq.n	800cc18 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800cbc0:	4aa5      	ldr	r2, [pc, #660]	; (800ce58 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d034      	beq.n	800cc30 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800cbc6:	4aa5      	ldr	r2, [pc, #660]	; (800ce5c <RemapAndLinkDMAtoUARTRx+0x320>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d03c      	beq.n	800cc46 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800cbcc:	6641      	str	r1, [r0, #100]	; 0x64
 800cbce:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800cbd2:	4aa5      	ldr	r2, [pc, #660]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbd4:	23a8      	movs	r3, #168	; 0xa8
 800cbd6:	58d4      	ldr	r4, [r2, r3]
 800cbd8:	250f      	movs	r5, #15
 800cbda:	43ac      	bics	r4, r5
 800cbdc:	50d4      	str	r4, [r2, r3]
 800cbde:	58d4      	ldr	r4, [r2, r3]
 800cbe0:	3d07      	subs	r5, #7
 800cbe2:	432c      	orrs	r4, r5
 800cbe4:	50d4      	str	r4, [r2, r3]
 800cbe6:	e7f1      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800cbe8:	4a9f      	ldr	r2, [pc, #636]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbea:	23a8      	movs	r3, #168	; 0xa8
 800cbec:	58d4      	ldr	r4, [r2, r3]
 800cbee:	4d9d      	ldr	r5, [pc, #628]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cbf0:	402c      	ands	r4, r5
 800cbf2:	50d4      	str	r4, [r2, r3]
 800cbf4:	58d5      	ldr	r5, [r2, r3]
 800cbf6:	2480      	movs	r4, #128	; 0x80
 800cbf8:	0124      	lsls	r4, r4, #4
 800cbfa:	432c      	orrs	r4, r5
 800cbfc:	50d4      	str	r4, [r2, r3]
 800cbfe:	e7e5      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800cc00:	4a99      	ldr	r2, [pc, #612]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cc02:	23a8      	movs	r3, #168	; 0xa8
 800cc04:	58d4      	ldr	r4, [r2, r3]
 800cc06:	4d99      	ldr	r5, [pc, #612]	; (800ce6c <RemapAndLinkDMAtoUARTRx+0x330>)
 800cc08:	402c      	ands	r4, r5
 800cc0a:	50d4      	str	r4, [r2, r3]
 800cc0c:	58d5      	ldr	r5, [r2, r3]
 800cc0e:	2480      	movs	r4, #128	; 0x80
 800cc10:	0324      	lsls	r4, r4, #12
 800cc12:	432c      	orrs	r4, r5
 800cc14:	50d4      	str	r4, [r2, r3]
 800cc16:	e7d9      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800cc18:	4a93      	ldr	r2, [pc, #588]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cc1a:	23a8      	movs	r3, #168	; 0xa8
 800cc1c:	58d4      	ldr	r4, [r2, r3]
 800cc1e:	4d94      	ldr	r5, [pc, #592]	; (800ce70 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cc20:	402c      	ands	r4, r5
 800cc22:	50d4      	str	r4, [r2, r3]
 800cc24:	58d5      	ldr	r5, [r2, r3]
 800cc26:	2480      	movs	r4, #128	; 0x80
 800cc28:	0424      	lsls	r4, r4, #16
 800cc2a:	432c      	orrs	r4, r5
 800cc2c:	50d4      	str	r4, [r2, r3]
 800cc2e:	e7cd      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800cc30:	4a8b      	ldr	r2, [pc, #556]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cc32:	23a8      	movs	r3, #168	; 0xa8
 800cc34:	58d4      	ldr	r4, [r2, r3]
 800cc36:	25f0      	movs	r5, #240	; 0xf0
 800cc38:	43ac      	bics	r4, r5
 800cc3a:	50d4      	str	r4, [r2, r3]
 800cc3c:	58d4      	ldr	r4, [r2, r3]
 800cc3e:	3d70      	subs	r5, #112	; 0x70
 800cc40:	432c      	orrs	r4, r5
 800cc42:	50d4      	str	r4, [r2, r3]
 800cc44:	e7c2      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800cc46:	4a86      	ldr	r2, [pc, #536]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cc48:	23a8      	movs	r3, #168	; 0xa8
 800cc4a:	58d4      	ldr	r4, [r2, r3]
 800cc4c:	4d85      	ldr	r5, [pc, #532]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cc4e:	402c      	ands	r4, r5
 800cc50:	50d4      	str	r4, [r2, r3]
 800cc52:	58d5      	ldr	r5, [r2, r3]
 800cc54:	2480      	movs	r4, #128	; 0x80
 800cc56:	0124      	lsls	r4, r4, #4
 800cc58:	432c      	orrs	r4, r5
 800cc5a:	50d4      	str	r4, [r2, r3]
 800cc5c:	e7b6      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cc5e:	680b      	ldr	r3, [r1, #0]
 800cc60:	4a79      	ldr	r2, [pc, #484]	; (800ce48 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d01a      	beq.n	800cc9c <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800cc66:	4a79      	ldr	r2, [pc, #484]	; (800ce4c <RemapAndLinkDMAtoUARTRx+0x310>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d022      	beq.n	800ccb2 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800cc6c:	4a78      	ldr	r2, [pc, #480]	; (800ce50 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d02b      	beq.n	800ccca <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800cc72:	4a78      	ldr	r2, [pc, #480]	; (800ce54 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d034      	beq.n	800cce2 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800cc78:	4a77      	ldr	r2, [pc, #476]	; (800ce58 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d03d      	beq.n	800ccfa <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800cc7e:	4a77      	ldr	r2, [pc, #476]	; (800ce5c <RemapAndLinkDMAtoUARTRx+0x320>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d1a3      	bne.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800cc84:	4a76      	ldr	r2, [pc, #472]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cc86:	23a8      	movs	r3, #168	; 0xa8
 800cc88:	58d4      	ldr	r4, [r2, r3]
 800cc8a:	4d76      	ldr	r5, [pc, #472]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cc8c:	402c      	ands	r4, r5
 800cc8e:	50d4      	str	r4, [r2, r3]
 800cc90:	58d5      	ldr	r5, [r2, r3]
 800cc92:	2490      	movs	r4, #144	; 0x90
 800cc94:	0124      	lsls	r4, r4, #4
 800cc96:	432c      	orrs	r4, r5
 800cc98:	50d4      	str	r4, [r2, r3]
 800cc9a:	e797      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800cc9c:	4a72      	ldr	r2, [pc, #456]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cc9e:	23a8      	movs	r3, #168	; 0xa8
 800cca0:	58d4      	ldr	r4, [r2, r3]
 800cca2:	250f      	movs	r5, #15
 800cca4:	43ac      	bics	r4, r5
 800cca6:	50d4      	str	r4, [r2, r3]
 800cca8:	58d4      	ldr	r4, [r2, r3]
 800ccaa:	3d06      	subs	r5, #6
 800ccac:	432c      	orrs	r4, r5
 800ccae:	50d4      	str	r4, [r2, r3]
 800ccb0:	e78c      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ccb2:	4a6d      	ldr	r2, [pc, #436]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ccb4:	23a8      	movs	r3, #168	; 0xa8
 800ccb6:	58d4      	ldr	r4, [r2, r3]
 800ccb8:	4d6a      	ldr	r5, [pc, #424]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ccba:	402c      	ands	r4, r5
 800ccbc:	50d4      	str	r4, [r2, r3]
 800ccbe:	58d5      	ldr	r5, [r2, r3]
 800ccc0:	2490      	movs	r4, #144	; 0x90
 800ccc2:	0124      	lsls	r4, r4, #4
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	50d4      	str	r4, [r2, r3]
 800ccc8:	e780      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ccca:	4a67      	ldr	r2, [pc, #412]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cccc:	23a8      	movs	r3, #168	; 0xa8
 800ccce:	58d4      	ldr	r4, [r2, r3]
 800ccd0:	4d66      	ldr	r5, [pc, #408]	; (800ce6c <RemapAndLinkDMAtoUARTRx+0x330>)
 800ccd2:	402c      	ands	r4, r5
 800ccd4:	50d4      	str	r4, [r2, r3]
 800ccd6:	58d5      	ldr	r5, [r2, r3]
 800ccd8:	2490      	movs	r4, #144	; 0x90
 800ccda:	0324      	lsls	r4, r4, #12
 800ccdc:	432c      	orrs	r4, r5
 800ccde:	50d4      	str	r4, [r2, r3]
 800cce0:	e774      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800cce2:	4a61      	ldr	r2, [pc, #388]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cce4:	23a8      	movs	r3, #168	; 0xa8
 800cce6:	58d4      	ldr	r4, [r2, r3]
 800cce8:	4d61      	ldr	r5, [pc, #388]	; (800ce70 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ccea:	402c      	ands	r4, r5
 800ccec:	50d4      	str	r4, [r2, r3]
 800ccee:	58d5      	ldr	r5, [r2, r3]
 800ccf0:	2490      	movs	r4, #144	; 0x90
 800ccf2:	0424      	lsls	r4, r4, #16
 800ccf4:	432c      	orrs	r4, r5
 800ccf6:	50d4      	str	r4, [r2, r3]
 800ccf8:	e768      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ccfa:	4a59      	ldr	r2, [pc, #356]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ccfc:	23a8      	movs	r3, #168	; 0xa8
 800ccfe:	58d4      	ldr	r4, [r2, r3]
 800cd00:	25f0      	movs	r5, #240	; 0xf0
 800cd02:	43ac      	bics	r4, r5
 800cd04:	50d4      	str	r4, [r2, r3]
 800cd06:	58d4      	ldr	r4, [r2, r3]
 800cd08:	3d60      	subs	r5, #96	; 0x60
 800cd0a:	432c      	orrs	r4, r5
 800cd0c:	50d4      	str	r4, [r2, r3]
 800cd0e:	e75d      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cd10:	680b      	ldr	r3, [r1, #0]
 800cd12:	4a4d      	ldr	r2, [pc, #308]	; (800ce48 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d01b      	beq.n	800cd50 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cd18:	4a4c      	ldr	r2, [pc, #304]	; (800ce4c <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d023      	beq.n	800cd66 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cd1e:	4a4c      	ldr	r2, [pc, #304]	; (800ce50 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d02c      	beq.n	800cd7e <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800cd24:	4a4b      	ldr	r2, [pc, #300]	; (800ce54 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d035      	beq.n	800cd96 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cd2a:	4a4b      	ldr	r2, [pc, #300]	; (800ce58 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d03e      	beq.n	800cdae <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cd30:	4a4a      	ldr	r2, [pc, #296]	; (800ce5c <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d000      	beq.n	800cd38 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cd36:	e749      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cd38:	4a49      	ldr	r2, [pc, #292]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cd3a:	23a8      	movs	r3, #168	; 0xa8
 800cd3c:	58d4      	ldr	r4, [r2, r3]
 800cd3e:	4d49      	ldr	r5, [pc, #292]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd40:	402c      	ands	r4, r5
 800cd42:	50d4      	str	r4, [r2, r3]
 800cd44:	58d5      	ldr	r5, [r2, r3]
 800cd46:	24a0      	movs	r4, #160	; 0xa0
 800cd48:	0124      	lsls	r4, r4, #4
 800cd4a:	432c      	orrs	r4, r5
 800cd4c:	50d4      	str	r4, [r2, r3]
 800cd4e:	e73d      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cd50:	4a45      	ldr	r2, [pc, #276]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd52:	23a8      	movs	r3, #168	; 0xa8
 800cd54:	58d4      	ldr	r4, [r2, r3]
 800cd56:	250f      	movs	r5, #15
 800cd58:	43ac      	bics	r4, r5
 800cd5a:	50d4      	str	r4, [r2, r3]
 800cd5c:	58d4      	ldr	r4, [r2, r3]
 800cd5e:	3d05      	subs	r5, #5
 800cd60:	432c      	orrs	r4, r5
 800cd62:	50d4      	str	r4, [r2, r3]
 800cd64:	e732      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cd66:	4a40      	ldr	r2, [pc, #256]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd68:	23a8      	movs	r3, #168	; 0xa8
 800cd6a:	58d4      	ldr	r4, [r2, r3]
 800cd6c:	4d3d      	ldr	r5, [pc, #244]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd6e:	402c      	ands	r4, r5
 800cd70:	50d4      	str	r4, [r2, r3]
 800cd72:	58d5      	ldr	r5, [r2, r3]
 800cd74:	24a0      	movs	r4, #160	; 0xa0
 800cd76:	0124      	lsls	r4, r4, #4
 800cd78:	432c      	orrs	r4, r5
 800cd7a:	50d4      	str	r4, [r2, r3]
 800cd7c:	e726      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cd7e:	4a3a      	ldr	r2, [pc, #232]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd80:	23a8      	movs	r3, #168	; 0xa8
 800cd82:	58d4      	ldr	r4, [r2, r3]
 800cd84:	4d39      	ldr	r5, [pc, #228]	; (800ce6c <RemapAndLinkDMAtoUARTRx+0x330>)
 800cd86:	402c      	ands	r4, r5
 800cd88:	50d4      	str	r4, [r2, r3]
 800cd8a:	58d5      	ldr	r5, [r2, r3]
 800cd8c:	24a0      	movs	r4, #160	; 0xa0
 800cd8e:	0324      	lsls	r4, r4, #12
 800cd90:	432c      	orrs	r4, r5
 800cd92:	50d4      	str	r4, [r2, r3]
 800cd94:	e71a      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cd96:	4a34      	ldr	r2, [pc, #208]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd98:	23a8      	movs	r3, #168	; 0xa8
 800cd9a:	58d4      	ldr	r4, [r2, r3]
 800cd9c:	4d34      	ldr	r5, [pc, #208]	; (800ce70 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cd9e:	402c      	ands	r4, r5
 800cda0:	50d4      	str	r4, [r2, r3]
 800cda2:	58d5      	ldr	r5, [r2, r3]
 800cda4:	24a0      	movs	r4, #160	; 0xa0
 800cda6:	0424      	lsls	r4, r4, #16
 800cda8:	432c      	orrs	r4, r5
 800cdaa:	50d4      	str	r4, [r2, r3]
 800cdac:	e70e      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cdae:	4a2c      	ldr	r2, [pc, #176]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cdb0:	23a8      	movs	r3, #168	; 0xa8
 800cdb2:	58d4      	ldr	r4, [r2, r3]
 800cdb4:	25f0      	movs	r5, #240	; 0xf0
 800cdb6:	43ac      	bics	r4, r5
 800cdb8:	50d4      	str	r4, [r2, r3]
 800cdba:	58d4      	ldr	r4, [r2, r3]
 800cdbc:	3d50      	subs	r5, #80	; 0x50
 800cdbe:	432c      	orrs	r4, r5
 800cdc0:	50d4      	str	r4, [r2, r3]
 800cdc2:	e703      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cdc4:	4a28      	ldr	r2, [pc, #160]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdc6:	23a8      	movs	r3, #168	; 0xa8
 800cdc8:	58d4      	ldr	r4, [r2, r3]
 800cdca:	250f      	movs	r5, #15
 800cdcc:	43ac      	bics	r4, r5
 800cdce:	50d4      	str	r4, [r2, r3]
 800cdd0:	58d4      	ldr	r4, [r2, r3]
 800cdd2:	3d04      	subs	r5, #4
 800cdd4:	432c      	orrs	r4, r5
 800cdd6:	50d4      	str	r4, [r2, r3]
 800cdd8:	e6f8      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cdda:	4a23      	ldr	r2, [pc, #140]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cddc:	23a8      	movs	r3, #168	; 0xa8
 800cdde:	58d4      	ldr	r4, [r2, r3]
 800cde0:	4d20      	ldr	r5, [pc, #128]	; (800ce64 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cde2:	402c      	ands	r4, r5
 800cde4:	50d4      	str	r4, [r2, r3]
 800cde6:	58d5      	ldr	r5, [r2, r3]
 800cde8:	24b0      	movs	r4, #176	; 0xb0
 800cdea:	0124      	lsls	r4, r4, #4
 800cdec:	432c      	orrs	r4, r5
 800cdee:	50d4      	str	r4, [r2, r3]
 800cdf0:	e6ec      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cdf2:	4a1d      	ldr	r2, [pc, #116]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdf4:	23a8      	movs	r3, #168	; 0xa8
 800cdf6:	58d4      	ldr	r4, [r2, r3]
 800cdf8:	4d1c      	ldr	r5, [pc, #112]	; (800ce6c <RemapAndLinkDMAtoUARTRx+0x330>)
 800cdfa:	402c      	ands	r4, r5
 800cdfc:	50d4      	str	r4, [r2, r3]
 800cdfe:	58d5      	ldr	r5, [r2, r3]
 800ce00:	24b0      	movs	r4, #176	; 0xb0
 800ce02:	0324      	lsls	r4, r4, #12
 800ce04:	432c      	orrs	r4, r5
 800ce06:	50d4      	str	r4, [r2, r3]
 800ce08:	e6e0      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800ce0a:	4a17      	ldr	r2, [pc, #92]	; (800ce68 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce0c:	23a8      	movs	r3, #168	; 0xa8
 800ce0e:	58d4      	ldr	r4, [r2, r3]
 800ce10:	4d17      	ldr	r5, [pc, #92]	; (800ce70 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ce12:	402c      	ands	r4, r5
 800ce14:	50d4      	str	r4, [r2, r3]
 800ce16:	58d5      	ldr	r5, [r2, r3]
 800ce18:	24b0      	movs	r4, #176	; 0xb0
 800ce1a:	0424      	lsls	r4, r4, #16
 800ce1c:	432c      	orrs	r4, r5
 800ce1e:	50d4      	str	r4, [r2, r3]
 800ce20:	e6d4      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800ce22:	4a0f      	ldr	r2, [pc, #60]	; (800ce60 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce24:	23a8      	movs	r3, #168	; 0xa8
 800ce26:	58d4      	ldr	r4, [r2, r3]
 800ce28:	25f0      	movs	r5, #240	; 0xf0
 800ce2a:	43ac      	bics	r4, r5
 800ce2c:	50d4      	str	r4, [r2, r3]
 800ce2e:	58d4      	ldr	r4, [r2, r3]
 800ce30:	3d40      	subs	r5, #64	; 0x40
 800ce32:	432c      	orrs	r4, r5
 800ce34:	50d4      	str	r4, [r2, r3]
 800ce36:	e6c9      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
 800ce38:	40013800 	.word	0x40013800
 800ce3c:	40004400 	.word	0x40004400
 800ce40:	40004800 	.word	0x40004800
 800ce44:	40004c00 	.word	0x40004c00
 800ce48:	40020008 	.word	0x40020008
 800ce4c:	40020030 	.word	0x40020030
 800ce50:	40020058 	.word	0x40020058
 800ce54:	4002006c 	.word	0x4002006c
 800ce58:	4002041c 	.word	0x4002041c
 800ce5c:	40020430 	.word	0x40020430
 800ce60:	40020400 	.word	0x40020400
 800ce64:	fffff0ff 	.word	0xfffff0ff
 800ce68:	40020000 	.word	0x40020000
 800ce6c:	fff0ffff 	.word	0xfff0ffff
 800ce70:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ce74:	4ab9      	ldr	r2, [pc, #740]	; (800d15c <RemapAndLinkDMAtoUARTRx+0x620>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d159      	bne.n	800cf2e <RemapAndLinkDMAtoUARTRx+0x3f2>
 800ce7a:	680b      	ldr	r3, [r1, #0]
 800ce7c:	4ab8      	ldr	r2, [pc, #736]	; (800d160 <RemapAndLinkDMAtoUARTRx+0x624>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d01b      	beq.n	800ceba <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800ce82:	4ab8      	ldr	r2, [pc, #736]	; (800d164 <RemapAndLinkDMAtoUARTRx+0x628>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d023      	beq.n	800ced0 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800ce88:	4ab7      	ldr	r2, [pc, #732]	; (800d168 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d02c      	beq.n	800cee8 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800ce8e:	4ab7      	ldr	r2, [pc, #732]	; (800d16c <RemapAndLinkDMAtoUARTRx+0x630>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d035      	beq.n	800cf00 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800ce94:	4ab6      	ldr	r2, [pc, #728]	; (800d170 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d03e      	beq.n	800cf18 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800ce9a:	4ab6      	ldr	r2, [pc, #728]	; (800d174 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d000      	beq.n	800cea2 <RemapAndLinkDMAtoUARTRx+0x366>
 800cea0:	e694      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800cea2:	4ab5      	ldr	r2, [pc, #724]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cea4:	23a8      	movs	r3, #168	; 0xa8
 800cea6:	58d4      	ldr	r4, [r2, r3]
 800cea8:	4db4      	ldr	r5, [pc, #720]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800ceaa:	402c      	ands	r4, r5
 800ceac:	50d4      	str	r4, [r2, r3]
 800ceae:	58d5      	ldr	r5, [r2, r3]
 800ceb0:	24c0      	movs	r4, #192	; 0xc0
 800ceb2:	0124      	lsls	r4, r4, #4
 800ceb4:	432c      	orrs	r4, r5
 800ceb6:	50d4      	str	r4, [r2, r3]
 800ceb8:	e688      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800ceba:	4ab1      	ldr	r2, [pc, #708]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cebc:	23a8      	movs	r3, #168	; 0xa8
 800cebe:	58d4      	ldr	r4, [r2, r3]
 800cec0:	250f      	movs	r5, #15
 800cec2:	43ac      	bics	r4, r5
 800cec4:	50d4      	str	r4, [r2, r3]
 800cec6:	58d4      	ldr	r4, [r2, r3]
 800cec8:	3d03      	subs	r5, #3
 800ceca:	432c      	orrs	r4, r5
 800cecc:	50d4      	str	r4, [r2, r3]
 800cece:	e67d      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800ced0:	4aab      	ldr	r2, [pc, #684]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ced2:	23a8      	movs	r3, #168	; 0xa8
 800ced4:	58d4      	ldr	r4, [r2, r3]
 800ced6:	4da9      	ldr	r5, [pc, #676]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800ced8:	402c      	ands	r4, r5
 800ceda:	50d4      	str	r4, [r2, r3]
 800cedc:	58d5      	ldr	r5, [r2, r3]
 800cede:	24c0      	movs	r4, #192	; 0xc0
 800cee0:	0124      	lsls	r4, r4, #4
 800cee2:	432c      	orrs	r4, r5
 800cee4:	50d4      	str	r4, [r2, r3]
 800cee6:	e671      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800cee8:	4aa5      	ldr	r2, [pc, #660]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ceea:	23a8      	movs	r3, #168	; 0xa8
 800ceec:	58d4      	ldr	r4, [r2, r3]
 800ceee:	4da5      	ldr	r5, [pc, #660]	; (800d184 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cef0:	402c      	ands	r4, r5
 800cef2:	50d4      	str	r4, [r2, r3]
 800cef4:	58d5      	ldr	r5, [r2, r3]
 800cef6:	24c0      	movs	r4, #192	; 0xc0
 800cef8:	0324      	lsls	r4, r4, #12
 800cefa:	432c      	orrs	r4, r5
 800cefc:	50d4      	str	r4, [r2, r3]
 800cefe:	e665      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800cf00:	4a9f      	ldr	r2, [pc, #636]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cf02:	23a8      	movs	r3, #168	; 0xa8
 800cf04:	58d4      	ldr	r4, [r2, r3]
 800cf06:	4da0      	ldr	r5, [pc, #640]	; (800d188 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cf08:	402c      	ands	r4, r5
 800cf0a:	50d4      	str	r4, [r2, r3]
 800cf0c:	58d5      	ldr	r5, [r2, r3]
 800cf0e:	24c0      	movs	r4, #192	; 0xc0
 800cf10:	0424      	lsls	r4, r4, #16
 800cf12:	432c      	orrs	r4, r5
 800cf14:	50d4      	str	r4, [r2, r3]
 800cf16:	e659      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800cf18:	4a97      	ldr	r2, [pc, #604]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cf1a:	23a8      	movs	r3, #168	; 0xa8
 800cf1c:	58d4      	ldr	r4, [r2, r3]
 800cf1e:	25f0      	movs	r5, #240	; 0xf0
 800cf20:	43ac      	bics	r4, r5
 800cf22:	50d4      	str	r4, [r2, r3]
 800cf24:	58d4      	ldr	r4, [r2, r3]
 800cf26:	3d30      	subs	r5, #48	; 0x30
 800cf28:	432c      	orrs	r4, r5
 800cf2a:	50d4      	str	r4, [r2, r3]
 800cf2c:	e64e      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cf2e:	4a97      	ldr	r2, [pc, #604]	; (800d18c <RemapAndLinkDMAtoUARTRx+0x650>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d159      	bne.n	800cfe8 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800cf34:	680b      	ldr	r3, [r1, #0]
 800cf36:	4a8a      	ldr	r2, [pc, #552]	; (800d160 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d01b      	beq.n	800cf74 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cf3c:	4a89      	ldr	r2, [pc, #548]	; (800d164 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d023      	beq.n	800cf8a <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cf42:	4a89      	ldr	r2, [pc, #548]	; (800d168 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d02c      	beq.n	800cfa2 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cf48:	4a88      	ldr	r2, [pc, #544]	; (800d16c <RemapAndLinkDMAtoUARTRx+0x630>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d035      	beq.n	800cfba <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cf4e:	4a88      	ldr	r2, [pc, #544]	; (800d170 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d03e      	beq.n	800cfd2 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cf54:	4a87      	ldr	r2, [pc, #540]	; (800d174 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d000      	beq.n	800cf5c <RemapAndLinkDMAtoUARTRx+0x420>
 800cf5a:	e637      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cf5c:	4a86      	ldr	r2, [pc, #536]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cf5e:	23a8      	movs	r3, #168	; 0xa8
 800cf60:	58d4      	ldr	r4, [r2, r3]
 800cf62:	4d86      	ldr	r5, [pc, #536]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800cf64:	402c      	ands	r4, r5
 800cf66:	50d4      	str	r4, [r2, r3]
 800cf68:	58d5      	ldr	r5, [r2, r3]
 800cf6a:	24d0      	movs	r4, #208	; 0xd0
 800cf6c:	0124      	lsls	r4, r4, #4
 800cf6e:	432c      	orrs	r4, r5
 800cf70:	50d4      	str	r4, [r2, r3]
 800cf72:	e62b      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800cf74:	4a82      	ldr	r2, [pc, #520]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cf76:	23a8      	movs	r3, #168	; 0xa8
 800cf78:	58d4      	ldr	r4, [r2, r3]
 800cf7a:	250f      	movs	r5, #15
 800cf7c:	43ac      	bics	r4, r5
 800cf7e:	50d4      	str	r4, [r2, r3]
 800cf80:	58d4      	ldr	r4, [r2, r3]
 800cf82:	3d02      	subs	r5, #2
 800cf84:	432c      	orrs	r4, r5
 800cf86:	50d4      	str	r4, [r2, r3]
 800cf88:	e620      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800cf8a:	4a7d      	ldr	r2, [pc, #500]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cf8c:	23a8      	movs	r3, #168	; 0xa8
 800cf8e:	58d4      	ldr	r4, [r2, r3]
 800cf90:	4d7a      	ldr	r5, [pc, #488]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800cf92:	402c      	ands	r4, r5
 800cf94:	50d4      	str	r4, [r2, r3]
 800cf96:	58d5      	ldr	r5, [r2, r3]
 800cf98:	24d0      	movs	r4, #208	; 0xd0
 800cf9a:	0124      	lsls	r4, r4, #4
 800cf9c:	432c      	orrs	r4, r5
 800cf9e:	50d4      	str	r4, [r2, r3]
 800cfa0:	e614      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800cfa2:	4a77      	ldr	r2, [pc, #476]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cfa4:	23a8      	movs	r3, #168	; 0xa8
 800cfa6:	58d4      	ldr	r4, [r2, r3]
 800cfa8:	4d76      	ldr	r5, [pc, #472]	; (800d184 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cfaa:	402c      	ands	r4, r5
 800cfac:	50d4      	str	r4, [r2, r3]
 800cfae:	58d5      	ldr	r5, [r2, r3]
 800cfb0:	24d0      	movs	r4, #208	; 0xd0
 800cfb2:	0324      	lsls	r4, r4, #12
 800cfb4:	432c      	orrs	r4, r5
 800cfb6:	50d4      	str	r4, [r2, r3]
 800cfb8:	e608      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800cfba:	4a71      	ldr	r2, [pc, #452]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cfbc:	23a8      	movs	r3, #168	; 0xa8
 800cfbe:	58d4      	ldr	r4, [r2, r3]
 800cfc0:	4d71      	ldr	r5, [pc, #452]	; (800d188 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cfc2:	402c      	ands	r4, r5
 800cfc4:	50d4      	str	r4, [r2, r3]
 800cfc6:	58d5      	ldr	r5, [r2, r3]
 800cfc8:	24d0      	movs	r4, #208	; 0xd0
 800cfca:	0424      	lsls	r4, r4, #16
 800cfcc:	432c      	orrs	r4, r5
 800cfce:	50d4      	str	r4, [r2, r3]
 800cfd0:	e5fc      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800cfd2:	4a69      	ldr	r2, [pc, #420]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cfd4:	23a8      	movs	r3, #168	; 0xa8
 800cfd6:	58d4      	ldr	r4, [r2, r3]
 800cfd8:	25f0      	movs	r5, #240	; 0xf0
 800cfda:	43ac      	bics	r4, r5
 800cfdc:	50d4      	str	r4, [r2, r3]
 800cfde:	58d4      	ldr	r4, [r2, r3]
 800cfe0:	3d20      	subs	r5, #32
 800cfe2:	432c      	orrs	r4, r5
 800cfe4:	50d4      	str	r4, [r2, r3]
 800cfe6:	e5f1      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cfe8:	4a69      	ldr	r2, [pc, #420]	; (800d190 <RemapAndLinkDMAtoUARTRx+0x654>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d159      	bne.n	800d0a2 <RemapAndLinkDMAtoUARTRx+0x566>
 800cfee:	680b      	ldr	r3, [r1, #0]
 800cff0:	4a5b      	ldr	r2, [pc, #364]	; (800d160 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d01b      	beq.n	800d02e <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cff6:	4a5b      	ldr	r2, [pc, #364]	; (800d164 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d023      	beq.n	800d044 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cffc:	4a5a      	ldr	r2, [pc, #360]	; (800d168 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d02c      	beq.n	800d05c <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d002:	4a5a      	ldr	r2, [pc, #360]	; (800d16c <RemapAndLinkDMAtoUARTRx+0x630>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d035      	beq.n	800d074 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d008:	4a59      	ldr	r2, [pc, #356]	; (800d170 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d03e      	beq.n	800d08c <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d00e:	4a59      	ldr	r2, [pc, #356]	; (800d174 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d000      	beq.n	800d016 <RemapAndLinkDMAtoUARTRx+0x4da>
 800d014:	e5da      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d016:	4a58      	ldr	r2, [pc, #352]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d018:	23a8      	movs	r3, #168	; 0xa8
 800d01a:	58d4      	ldr	r4, [r2, r3]
 800d01c:	4d57      	ldr	r5, [pc, #348]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d01e:	402c      	ands	r4, r5
 800d020:	50d4      	str	r4, [r2, r3]
 800d022:	58d5      	ldr	r5, [r2, r3]
 800d024:	24e0      	movs	r4, #224	; 0xe0
 800d026:	0124      	lsls	r4, r4, #4
 800d028:	432c      	orrs	r4, r5
 800d02a:	50d4      	str	r4, [r2, r3]
 800d02c:	e5ce      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d02e:	4a54      	ldr	r2, [pc, #336]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d030:	23a8      	movs	r3, #168	; 0xa8
 800d032:	58d4      	ldr	r4, [r2, r3]
 800d034:	250f      	movs	r5, #15
 800d036:	43ac      	bics	r4, r5
 800d038:	50d4      	str	r4, [r2, r3]
 800d03a:	58d4      	ldr	r4, [r2, r3]
 800d03c:	3d01      	subs	r5, #1
 800d03e:	432c      	orrs	r4, r5
 800d040:	50d4      	str	r4, [r2, r3]
 800d042:	e5c3      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d044:	4a4e      	ldr	r2, [pc, #312]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d046:	23a8      	movs	r3, #168	; 0xa8
 800d048:	58d4      	ldr	r4, [r2, r3]
 800d04a:	4d4c      	ldr	r5, [pc, #304]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d04c:	402c      	ands	r4, r5
 800d04e:	50d4      	str	r4, [r2, r3]
 800d050:	58d5      	ldr	r5, [r2, r3]
 800d052:	24e0      	movs	r4, #224	; 0xe0
 800d054:	0124      	lsls	r4, r4, #4
 800d056:	432c      	orrs	r4, r5
 800d058:	50d4      	str	r4, [r2, r3]
 800d05a:	e5b7      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d05c:	4a48      	ldr	r2, [pc, #288]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d05e:	23a8      	movs	r3, #168	; 0xa8
 800d060:	58d4      	ldr	r4, [r2, r3]
 800d062:	4d48      	ldr	r5, [pc, #288]	; (800d184 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d064:	402c      	ands	r4, r5
 800d066:	50d4      	str	r4, [r2, r3]
 800d068:	58d5      	ldr	r5, [r2, r3]
 800d06a:	24e0      	movs	r4, #224	; 0xe0
 800d06c:	0324      	lsls	r4, r4, #12
 800d06e:	432c      	orrs	r4, r5
 800d070:	50d4      	str	r4, [r2, r3]
 800d072:	e5ab      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d074:	4a42      	ldr	r2, [pc, #264]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d076:	23a8      	movs	r3, #168	; 0xa8
 800d078:	58d4      	ldr	r4, [r2, r3]
 800d07a:	4d43      	ldr	r5, [pc, #268]	; (800d188 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d07c:	402c      	ands	r4, r5
 800d07e:	50d4      	str	r4, [r2, r3]
 800d080:	58d5      	ldr	r5, [r2, r3]
 800d082:	24e0      	movs	r4, #224	; 0xe0
 800d084:	0424      	lsls	r4, r4, #16
 800d086:	432c      	orrs	r4, r5
 800d088:	50d4      	str	r4, [r2, r3]
 800d08a:	e59f      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d08c:	4a3a      	ldr	r2, [pc, #232]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d08e:	23a8      	movs	r3, #168	; 0xa8
 800d090:	58d4      	ldr	r4, [r2, r3]
 800d092:	25f0      	movs	r5, #240	; 0xf0
 800d094:	43ac      	bics	r4, r5
 800d096:	50d4      	str	r4, [r2, r3]
 800d098:	58d4      	ldr	r4, [r2, r3]
 800d09a:	3d10      	subs	r5, #16
 800d09c:	432c      	orrs	r4, r5
 800d09e:	50d4      	str	r4, [r2, r3]
 800d0a0:	e594      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d0a2:	4a3c      	ldr	r2, [pc, #240]	; (800d194 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d000      	beq.n	800d0aa <RemapAndLinkDMAtoUARTRx+0x56e>
 800d0a8:	e590      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
 800d0aa:	680b      	ldr	r3, [r1, #0]
 800d0ac:	4a2c      	ldr	r2, [pc, #176]	; (800d160 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d01b      	beq.n	800d0ea <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d0b2:	4a2c      	ldr	r2, [pc, #176]	; (800d164 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d022      	beq.n	800d0fe <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d0b8:	4a2b      	ldr	r2, [pc, #172]	; (800d168 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d02b      	beq.n	800d116 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d0be:	4a2b      	ldr	r2, [pc, #172]	; (800d16c <RemapAndLinkDMAtoUARTRx+0x630>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d034      	beq.n	800d12e <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d0c4:	4a2a      	ldr	r2, [pc, #168]	; (800d170 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d03d      	beq.n	800d146 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d0ca:	4a2a      	ldr	r2, [pc, #168]	; (800d174 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d000      	beq.n	800d0d2 <RemapAndLinkDMAtoUARTRx+0x596>
 800d0d0:	e57c      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d0d2:	4a29      	ldr	r2, [pc, #164]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d0d4:	23a8      	movs	r3, #168	; 0xa8
 800d0d6:	58d4      	ldr	r4, [r2, r3]
 800d0d8:	4d28      	ldr	r5, [pc, #160]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d0da:	402c      	ands	r4, r5
 800d0dc:	50d4      	str	r4, [r2, r3]
 800d0de:	58d5      	ldr	r5, [r2, r3]
 800d0e0:	24f0      	movs	r4, #240	; 0xf0
 800d0e2:	0124      	lsls	r4, r4, #4
 800d0e4:	432c      	orrs	r4, r5
 800d0e6:	50d4      	str	r4, [r2, r3]
 800d0e8:	e570      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d0ea:	4a25      	ldr	r2, [pc, #148]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0ec:	23a8      	movs	r3, #168	; 0xa8
 800d0ee:	58d5      	ldr	r5, [r2, r3]
 800d0f0:	260f      	movs	r6, #15
 800d0f2:	43b5      	bics	r5, r6
 800d0f4:	50d5      	str	r5, [r2, r3]
 800d0f6:	58d4      	ldr	r4, [r2, r3]
 800d0f8:	4334      	orrs	r4, r6
 800d0fa:	50d4      	str	r4, [r2, r3]
 800d0fc:	e566      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d0fe:	4a20      	ldr	r2, [pc, #128]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d100:	23a8      	movs	r3, #168	; 0xa8
 800d102:	58d4      	ldr	r4, [r2, r3]
 800d104:	4d1d      	ldr	r5, [pc, #116]	; (800d17c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d106:	402c      	ands	r4, r5
 800d108:	50d4      	str	r4, [r2, r3]
 800d10a:	58d5      	ldr	r5, [r2, r3]
 800d10c:	24f0      	movs	r4, #240	; 0xf0
 800d10e:	0124      	lsls	r4, r4, #4
 800d110:	432c      	orrs	r4, r5
 800d112:	50d4      	str	r4, [r2, r3]
 800d114:	e55a      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d116:	4a1a      	ldr	r2, [pc, #104]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d118:	23a8      	movs	r3, #168	; 0xa8
 800d11a:	58d4      	ldr	r4, [r2, r3]
 800d11c:	4d19      	ldr	r5, [pc, #100]	; (800d184 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d11e:	402c      	ands	r4, r5
 800d120:	50d4      	str	r4, [r2, r3]
 800d122:	58d5      	ldr	r5, [r2, r3]
 800d124:	24f0      	movs	r4, #240	; 0xf0
 800d126:	0324      	lsls	r4, r4, #12
 800d128:	432c      	orrs	r4, r5
 800d12a:	50d4      	str	r4, [r2, r3]
 800d12c:	e54e      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d12e:	4a14      	ldr	r2, [pc, #80]	; (800d180 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d130:	23a8      	movs	r3, #168	; 0xa8
 800d132:	58d4      	ldr	r4, [r2, r3]
 800d134:	4d14      	ldr	r5, [pc, #80]	; (800d188 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d136:	402c      	ands	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	58d5      	ldr	r5, [r2, r3]
 800d13c:	24f0      	movs	r4, #240	; 0xf0
 800d13e:	0424      	lsls	r4, r4, #16
 800d140:	432c      	orrs	r4, r5
 800d142:	50d4      	str	r4, [r2, r3]
 800d144:	e542      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d146:	4a0c      	ldr	r2, [pc, #48]	; (800d178 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d148:	23a8      	movs	r3, #168	; 0xa8
 800d14a:	58d5      	ldr	r5, [r2, r3]
 800d14c:	26f0      	movs	r6, #240	; 0xf0
 800d14e:	43b5      	bics	r5, r6
 800d150:	50d5      	str	r5, [r2, r3]
 800d152:	58d4      	ldr	r4, [r2, r3]
 800d154:	4334      	orrs	r4, r6
 800d156:	50d4      	str	r4, [r2, r3]
 800d158:	e538      	b.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x90>
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	40005000 	.word	0x40005000
 800d160:	40020008 	.word	0x40020008
 800d164:	40020030 	.word	0x40020030
 800d168:	40020058 	.word	0x40020058
 800d16c:	4002006c 	.word	0x4002006c
 800d170:	4002041c 	.word	0x4002041c
 800d174:	40020430 	.word	0x40020430
 800d178:	40020400 	.word	0x40020400
 800d17c:	fffff0ff 	.word	0xfffff0ff
 800d180:	40020000 	.word	0x40020000
 800d184:	fff0ffff 	.word	0xfff0ffff
 800d188:	ff0fffff 	.word	0xff0fffff
 800d18c:	40011400 	.word	0x40011400
 800d190:	40011800 	.word	0x40011800
 800d194:	40011c00 	.word	0x40011c00

0800d198 <DMA_MSG_RX_Setup>:
{	
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	0004      	movs	r4, r0
 800d19c:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d19e:	f7ff fccd 	bl	800cb3c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	0028      	movs	r0, r5
 800d1a6:	f7ff fc13 	bl	800c9d0 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d1aa:	0020      	movs	r0, r4
 800d1ac:	f7fe fe38 	bl	800be20 <GetPort>
 800d1b0:	3801      	subs	r0, #1
 800d1b2:	0041      	lsls	r1, r0, #1
 800d1b4:	1809      	adds	r1, r1, r0
 800d1b6:	0189      	lsls	r1, r1, #6
 800d1b8:	4803      	ldr	r0, [pc, #12]	; (800d1c8 <DMA_MSG_RX_Setup+0x30>)
 800d1ba:	1809      	adds	r1, r1, r0
 800d1bc:	22c0      	movs	r2, #192	; 0xc0
 800d1be:	0020      	movs	r0, r4
 800d1c0:	f005 ffd6 	bl	8013170 <HAL_UART_Receive_DMA>
}
 800d1c4:	bd70      	pop	{r4, r5, r6, pc}
 800d1c6:	46c0      	nop			; (mov r8, r8)
 800d1c8:	20000a4c 	.word	0x20000a4c

0800d1cc <SetupMessagingRxDMAs>:
{	
 800d1cc:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d1ce:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <SetupMessagingRxDMAs+0x3c>)
 800d1d0:	785b      	ldrb	r3, [r3, #1]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d008      	beq.n	800d1e8 <SetupMessagingRxDMAs+0x1c>
	if (portStatus[P2] == FREE)	
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <SetupMessagingRxDMAs+0x3c>)
 800d1d8:	789b      	ldrb	r3, [r3, #2]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <SetupMessagingRxDMAs+0x26>
	if (portStatus[P3] == FREE)
 800d1de:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <SetupMessagingRxDMAs+0x3c>)
 800d1e0:	78db      	ldrb	r3, [r3, #3]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00a      	beq.n	800d1fc <SetupMessagingRxDMAs+0x30>
}
 800d1e6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d1e8:	4908      	ldr	r1, [pc, #32]	; (800d20c <SetupMessagingRxDMAs+0x40>)
 800d1ea:	4809      	ldr	r0, [pc, #36]	; (800d210 <SetupMessagingRxDMAs+0x44>)
 800d1ec:	f7ff ffd4 	bl	800d198 <DMA_MSG_RX_Setup>
 800d1f0:	e7f1      	b.n	800d1d6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d1f2:	4908      	ldr	r1, [pc, #32]	; (800d214 <SetupMessagingRxDMAs+0x48>)
 800d1f4:	4808      	ldr	r0, [pc, #32]	; (800d218 <SetupMessagingRxDMAs+0x4c>)
 800d1f6:	f7ff ffcf 	bl	800d198 <DMA_MSG_RX_Setup>
 800d1fa:	e7f0      	b.n	800d1de <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d1fc:	4907      	ldr	r1, [pc, #28]	; (800d21c <SetupMessagingRxDMAs+0x50>)
 800d1fe:	4808      	ldr	r0, [pc, #32]	; (800d220 <SetupMessagingRxDMAs+0x54>)
 800d200:	f7ff ffca 	bl	800d198 <DMA_MSG_RX_Setup>
}
 800d204:	e7ef      	b.n	800d1e6 <SetupMessagingRxDMAs+0x1a>
 800d206:	46c0      	nop			; (mov r8, r8)
 800d208:	20000878 	.word	0x20000878
 800d20c:	20001078 	.word	0x20001078
 800d210:	200065d4 	.word	0x200065d4
 800d214:	200010b0 	.word	0x200010b0
 800d218:	200064e8 	.word	0x200064e8
 800d21c:	200010e8 	.word	0x200010e8
 800d220:	200063b4 	.word	0x200063b4

0800d224 <DMA_STREAM_Setup>:
{	
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	0005      	movs	r5, r0
 800d228:	000f      	movs	r7, r1
 800d22a:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d22c:	f7fe fdf8 	bl	800be20 <GetPort>
	hDMA = &streamDMA[port-1];
 800d230:	3801      	subs	r0, #1
 800d232:	00c4      	lsls	r4, r0, #3
 800d234:	1a24      	subs	r4, r4, r0
 800d236:	00e4      	lsls	r4, r4, #3
 800d238:	4809      	ldr	r0, [pc, #36]	; (800d260 <DMA_STREAM_Setup+0x3c>)
 800d23a:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d23c:	0021      	movs	r1, r4
 800d23e:	0028      	movs	r0, r5
 800d240:	f7ff fc7c 	bl	800cb3c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d244:	2101      	movs	r1, #1
 800d246:	0020      	movs	r0, r4
 800d248:	f7ff fbc2 	bl	800c9d0 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d24c:	2369      	movs	r3, #105	; 0x69
 800d24e:	2201      	movs	r2, #1
 800d250:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	3128      	adds	r1, #40	; 0x28
 800d256:	0032      	movs	r2, r6
 800d258:	0028      	movs	r0, r5
 800d25a:	f005 ff89 	bl	8013170 <HAL_UART_Receive_DMA>
}
 800d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d260:	20001270 	.word	0x20001270

0800d264 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d264:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d266:	6803      	ldr	r3, [r0, #0]
 800d268:	4abd      	ldr	r2, [pc, #756]	; (800d560 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d02f      	beq.n	800d2ce <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d26e:	4abd      	ldr	r2, [pc, #756]	; (800d564 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d100      	bne.n	800d276 <RemapAndLinkDMAtoUARTTx+0x12>
 800d274:	e087      	b.n	800d386 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d276:	4abc      	ldr	r2, [pc, #752]	; (800d568 <RemapAndLinkDMAtoUARTTx+0x304>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d100      	bne.n	800d27e <RemapAndLinkDMAtoUARTTx+0x1a>
 800d27c:	e0dc      	b.n	800d438 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d27e:	4abb      	ldr	r2, [pc, #748]	; (800d56c <RemapAndLinkDMAtoUARTTx+0x308>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d000      	beq.n	800d286 <RemapAndLinkDMAtoUARTTx+0x22>
 800d284:	e18a      	b.n	800d59c <RemapAndLinkDMAtoUARTTx+0x338>
 800d286:	680b      	ldr	r3, [r1, #0]
 800d288:	4ab9      	ldr	r2, [pc, #740]	; (800d570 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d100      	bne.n	800d290 <RemapAndLinkDMAtoUARTTx+0x2c>
 800d28e:	e12d      	b.n	800d4ec <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d290:	4ab8      	ldr	r2, [pc, #736]	; (800d574 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d100      	bne.n	800d298 <RemapAndLinkDMAtoUARTTx+0x34>
 800d296:	e134      	b.n	800d502 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d298:	4ab7      	ldr	r2, [pc, #732]	; (800d578 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d100      	bne.n	800d2a0 <RemapAndLinkDMAtoUARTTx+0x3c>
 800d29e:	e13c      	b.n	800d51a <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d2a0:	4ab6      	ldr	r2, [pc, #728]	; (800d57c <RemapAndLinkDMAtoUARTTx+0x318>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d100      	bne.n	800d2a8 <RemapAndLinkDMAtoUARTTx+0x44>
 800d2a6:	e144      	b.n	800d532 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d2a8:	4ab5      	ldr	r2, [pc, #724]	; (800d580 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d100      	bne.n	800d2b0 <RemapAndLinkDMAtoUARTTx+0x4c>
 800d2ae:	e14b      	b.n	800d548 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d2b0:	4ab4      	ldr	r2, [pc, #720]	; (800d584 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d11e      	bne.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d2b6:	4ab4      	ldr	r2, [pc, #720]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d2b8:	23a8      	movs	r3, #168	; 0xa8
 800d2ba:	58d4      	ldr	r4, [r2, r3]
 800d2bc:	4db3      	ldr	r5, [pc, #716]	; (800d58c <RemapAndLinkDMAtoUARTTx+0x328>)
 800d2be:	402c      	ands	r4, r5
 800d2c0:	50d4      	str	r4, [r2, r3]
 800d2c2:	58d5      	ldr	r5, [r2, r3]
 800d2c4:	24b0      	movs	r4, #176	; 0xb0
 800d2c6:	0324      	lsls	r4, r4, #12
 800d2c8:	432c      	orrs	r4, r5
 800d2ca:	50d4      	str	r4, [r2, r3]
 800d2cc:	e012      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d2ce:	680b      	ldr	r3, [r1, #0]
 800d2d0:	4aa7      	ldr	r2, [pc, #668]	; (800d570 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d011      	beq.n	800d2fa <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d2d6:	4aa7      	ldr	r2, [pc, #668]	; (800d574 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d019      	beq.n	800d310 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d2dc:	4aa6      	ldr	r2, [pc, #664]	; (800d578 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d022      	beq.n	800d328 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d2e2:	4aa6      	ldr	r2, [pc, #664]	; (800d57c <RemapAndLinkDMAtoUARTTx+0x318>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d02b      	beq.n	800d340 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d2e8:	4aa5      	ldr	r2, [pc, #660]	; (800d580 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d033      	beq.n	800d356 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d2ee:	4aa5      	ldr	r2, [pc, #660]	; (800d584 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d03c      	beq.n	800d36e <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d2f4:	6601      	str	r1, [r0, #96]	; 0x60
 800d2f6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d2f8:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d2fa:	4aa5      	ldr	r2, [pc, #660]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d2fc:	23a8      	movs	r3, #168	; 0xa8
 800d2fe:	58d4      	ldr	r4, [r2, r3]
 800d300:	25f0      	movs	r5, #240	; 0xf0
 800d302:	43ac      	bics	r4, r5
 800d304:	50d4      	str	r4, [r2, r3]
 800d306:	58d4      	ldr	r4, [r2, r3]
 800d308:	3d70      	subs	r5, #112	; 0x70
 800d30a:	432c      	orrs	r4, r5
 800d30c:	50d4      	str	r4, [r2, r3]
 800d30e:	e7f1      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d310:	4a9f      	ldr	r2, [pc, #636]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d312:	23a8      	movs	r3, #168	; 0xa8
 800d314:	58d4      	ldr	r4, [r2, r3]
 800d316:	4d9f      	ldr	r5, [pc, #636]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d318:	402c      	ands	r4, r5
 800d31a:	50d4      	str	r4, [r2, r3]
 800d31c:	58d5      	ldr	r5, [r2, r3]
 800d31e:	2480      	movs	r4, #128	; 0x80
 800d320:	0224      	lsls	r4, r4, #8
 800d322:	432c      	orrs	r4, r5
 800d324:	50d4      	str	r4, [r2, r3]
 800d326:	e7e5      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d328:	4a99      	ldr	r2, [pc, #612]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d32a:	23a8      	movs	r3, #168	; 0xa8
 800d32c:	58d4      	ldr	r4, [r2, r3]
 800d32e:	4d9a      	ldr	r5, [pc, #616]	; (800d598 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d330:	402c      	ands	r4, r5
 800d332:	50d4      	str	r4, [r2, r3]
 800d334:	58d5      	ldr	r5, [r2, r3]
 800d336:	2480      	movs	r4, #128	; 0x80
 800d338:	0524      	lsls	r4, r4, #20
 800d33a:	432c      	orrs	r4, r5
 800d33c:	50d4      	str	r4, [r2, r3]
 800d33e:	e7d9      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d340:	4a91      	ldr	r2, [pc, #580]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d342:	23a8      	movs	r3, #168	; 0xa8
 800d344:	58d4      	ldr	r4, [r2, r3]
 800d346:	250f      	movs	r5, #15
 800d348:	43ac      	bics	r4, r5
 800d34a:	50d4      	str	r4, [r2, r3]
 800d34c:	58d4      	ldr	r4, [r2, r3]
 800d34e:	3d07      	subs	r5, #7
 800d350:	432c      	orrs	r4, r5
 800d352:	50d4      	str	r4, [r2, r3]
 800d354:	e7ce      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d356:	4a8c      	ldr	r2, [pc, #560]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d358:	23a8      	movs	r3, #168	; 0xa8
 800d35a:	58d4      	ldr	r4, [r2, r3]
 800d35c:	4d8d      	ldr	r5, [pc, #564]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d35e:	402c      	ands	r4, r5
 800d360:	50d4      	str	r4, [r2, r3]
 800d362:	58d5      	ldr	r5, [r2, r3]
 800d364:	2480      	movs	r4, #128	; 0x80
 800d366:	0224      	lsls	r4, r4, #8
 800d368:	432c      	orrs	r4, r5
 800d36a:	50d4      	str	r4, [r2, r3]
 800d36c:	e7c2      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d36e:	4a86      	ldr	r2, [pc, #536]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d370:	23a8      	movs	r3, #168	; 0xa8
 800d372:	58d4      	ldr	r4, [r2, r3]
 800d374:	4d85      	ldr	r5, [pc, #532]	; (800d58c <RemapAndLinkDMAtoUARTTx+0x328>)
 800d376:	402c      	ands	r4, r5
 800d378:	50d4      	str	r4, [r2, r3]
 800d37a:	58d5      	ldr	r5, [r2, r3]
 800d37c:	2480      	movs	r4, #128	; 0x80
 800d37e:	0324      	lsls	r4, r4, #12
 800d380:	432c      	orrs	r4, r5
 800d382:	50d4      	str	r4, [r2, r3]
 800d384:	e7b6      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d386:	680b      	ldr	r3, [r1, #0]
 800d388:	4a79      	ldr	r2, [pc, #484]	; (800d570 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d01a      	beq.n	800d3c4 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d38e:	4a79      	ldr	r2, [pc, #484]	; (800d574 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d022      	beq.n	800d3da <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d394:	4a78      	ldr	r2, [pc, #480]	; (800d578 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d02b      	beq.n	800d3f2 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d39a:	4a78      	ldr	r2, [pc, #480]	; (800d57c <RemapAndLinkDMAtoUARTTx+0x318>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d034      	beq.n	800d40a <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d3a0:	4a77      	ldr	r2, [pc, #476]	; (800d580 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d03c      	beq.n	800d420 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d3a6:	4a77      	ldr	r2, [pc, #476]	; (800d584 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d1a3      	bne.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d3ac:	4a76      	ldr	r2, [pc, #472]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d3ae:	23a8      	movs	r3, #168	; 0xa8
 800d3b0:	58d4      	ldr	r4, [r2, r3]
 800d3b2:	4d76      	ldr	r5, [pc, #472]	; (800d58c <RemapAndLinkDMAtoUARTTx+0x328>)
 800d3b4:	402c      	ands	r4, r5
 800d3b6:	50d4      	str	r4, [r2, r3]
 800d3b8:	58d5      	ldr	r5, [r2, r3]
 800d3ba:	2490      	movs	r4, #144	; 0x90
 800d3bc:	0324      	lsls	r4, r4, #12
 800d3be:	432c      	orrs	r4, r5
 800d3c0:	50d4      	str	r4, [r2, r3]
 800d3c2:	e797      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d3c4:	4a72      	ldr	r2, [pc, #456]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d3c6:	23a8      	movs	r3, #168	; 0xa8
 800d3c8:	58d4      	ldr	r4, [r2, r3]
 800d3ca:	25f0      	movs	r5, #240	; 0xf0
 800d3cc:	43ac      	bics	r4, r5
 800d3ce:	50d4      	str	r4, [r2, r3]
 800d3d0:	58d4      	ldr	r4, [r2, r3]
 800d3d2:	3d60      	subs	r5, #96	; 0x60
 800d3d4:	432c      	orrs	r4, r5
 800d3d6:	50d4      	str	r4, [r2, r3]
 800d3d8:	e78c      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d3da:	4a6d      	ldr	r2, [pc, #436]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d3dc:	23a8      	movs	r3, #168	; 0xa8
 800d3de:	58d4      	ldr	r4, [r2, r3]
 800d3e0:	4d6c      	ldr	r5, [pc, #432]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d3e2:	402c      	ands	r4, r5
 800d3e4:	50d4      	str	r4, [r2, r3]
 800d3e6:	58d5      	ldr	r5, [r2, r3]
 800d3e8:	2490      	movs	r4, #144	; 0x90
 800d3ea:	0224      	lsls	r4, r4, #8
 800d3ec:	432c      	orrs	r4, r5
 800d3ee:	50d4      	str	r4, [r2, r3]
 800d3f0:	e780      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d3f2:	4a67      	ldr	r2, [pc, #412]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d3f4:	23a8      	movs	r3, #168	; 0xa8
 800d3f6:	58d4      	ldr	r4, [r2, r3]
 800d3f8:	4d67      	ldr	r5, [pc, #412]	; (800d598 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d3fa:	402c      	ands	r4, r5
 800d3fc:	50d4      	str	r4, [r2, r3]
 800d3fe:	58d5      	ldr	r5, [r2, r3]
 800d400:	2490      	movs	r4, #144	; 0x90
 800d402:	0524      	lsls	r4, r4, #20
 800d404:	432c      	orrs	r4, r5
 800d406:	50d4      	str	r4, [r2, r3]
 800d408:	e774      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d40a:	4a5f      	ldr	r2, [pc, #380]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d40c:	23a8      	movs	r3, #168	; 0xa8
 800d40e:	58d4      	ldr	r4, [r2, r3]
 800d410:	250f      	movs	r5, #15
 800d412:	43ac      	bics	r4, r5
 800d414:	50d4      	str	r4, [r2, r3]
 800d416:	58d4      	ldr	r4, [r2, r3]
 800d418:	3d06      	subs	r5, #6
 800d41a:	432c      	orrs	r4, r5
 800d41c:	50d4      	str	r4, [r2, r3]
 800d41e:	e769      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d420:	4a59      	ldr	r2, [pc, #356]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d422:	23a8      	movs	r3, #168	; 0xa8
 800d424:	58d4      	ldr	r4, [r2, r3]
 800d426:	4d5b      	ldr	r5, [pc, #364]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d428:	402c      	ands	r4, r5
 800d42a:	50d4      	str	r4, [r2, r3]
 800d42c:	58d5      	ldr	r5, [r2, r3]
 800d42e:	2490      	movs	r4, #144	; 0x90
 800d430:	0224      	lsls	r4, r4, #8
 800d432:	432c      	orrs	r4, r5
 800d434:	50d4      	str	r4, [r2, r3]
 800d436:	e75d      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d438:	680b      	ldr	r3, [r1, #0]
 800d43a:	4a4d      	ldr	r2, [pc, #308]	; (800d570 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d01b      	beq.n	800d478 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d440:	4a4c      	ldr	r2, [pc, #304]	; (800d574 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d023      	beq.n	800d48e <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d446:	4a4c      	ldr	r2, [pc, #304]	; (800d578 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d02c      	beq.n	800d4a6 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d44c:	4a4b      	ldr	r2, [pc, #300]	; (800d57c <RemapAndLinkDMAtoUARTTx+0x318>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d035      	beq.n	800d4be <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d452:	4a4b      	ldr	r2, [pc, #300]	; (800d580 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d03d      	beq.n	800d4d4 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d458:	4a4a      	ldr	r2, [pc, #296]	; (800d584 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d000      	beq.n	800d460 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d45e:	e749      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d460:	4a49      	ldr	r2, [pc, #292]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d462:	23a8      	movs	r3, #168	; 0xa8
 800d464:	58d4      	ldr	r4, [r2, r3]
 800d466:	4d49      	ldr	r5, [pc, #292]	; (800d58c <RemapAndLinkDMAtoUARTTx+0x328>)
 800d468:	402c      	ands	r4, r5
 800d46a:	50d4      	str	r4, [r2, r3]
 800d46c:	58d5      	ldr	r5, [r2, r3]
 800d46e:	24a0      	movs	r4, #160	; 0xa0
 800d470:	0324      	lsls	r4, r4, #12
 800d472:	432c      	orrs	r4, r5
 800d474:	50d4      	str	r4, [r2, r3]
 800d476:	e73d      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d478:	4a45      	ldr	r2, [pc, #276]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d47a:	23a8      	movs	r3, #168	; 0xa8
 800d47c:	58d4      	ldr	r4, [r2, r3]
 800d47e:	25f0      	movs	r5, #240	; 0xf0
 800d480:	43ac      	bics	r4, r5
 800d482:	50d4      	str	r4, [r2, r3]
 800d484:	58d4      	ldr	r4, [r2, r3]
 800d486:	3d50      	subs	r5, #80	; 0x50
 800d488:	432c      	orrs	r4, r5
 800d48a:	50d4      	str	r4, [r2, r3]
 800d48c:	e732      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d48e:	4a40      	ldr	r2, [pc, #256]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d490:	23a8      	movs	r3, #168	; 0xa8
 800d492:	58d4      	ldr	r4, [r2, r3]
 800d494:	4d3f      	ldr	r5, [pc, #252]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d496:	402c      	ands	r4, r5
 800d498:	50d4      	str	r4, [r2, r3]
 800d49a:	58d5      	ldr	r5, [r2, r3]
 800d49c:	24a0      	movs	r4, #160	; 0xa0
 800d49e:	0224      	lsls	r4, r4, #8
 800d4a0:	432c      	orrs	r4, r5
 800d4a2:	50d4      	str	r4, [r2, r3]
 800d4a4:	e726      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d4a6:	4a3a      	ldr	r2, [pc, #232]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d4a8:	23a8      	movs	r3, #168	; 0xa8
 800d4aa:	58d4      	ldr	r4, [r2, r3]
 800d4ac:	4d3a      	ldr	r5, [pc, #232]	; (800d598 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d4ae:	402c      	ands	r4, r5
 800d4b0:	50d4      	str	r4, [r2, r3]
 800d4b2:	58d5      	ldr	r5, [r2, r3]
 800d4b4:	24a0      	movs	r4, #160	; 0xa0
 800d4b6:	0524      	lsls	r4, r4, #20
 800d4b8:	432c      	orrs	r4, r5
 800d4ba:	50d4      	str	r4, [r2, r3]
 800d4bc:	e71a      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d4be:	4a32      	ldr	r2, [pc, #200]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d4c0:	23a8      	movs	r3, #168	; 0xa8
 800d4c2:	58d4      	ldr	r4, [r2, r3]
 800d4c4:	250f      	movs	r5, #15
 800d4c6:	43ac      	bics	r4, r5
 800d4c8:	50d4      	str	r4, [r2, r3]
 800d4ca:	58d4      	ldr	r4, [r2, r3]
 800d4cc:	3d05      	subs	r5, #5
 800d4ce:	432c      	orrs	r4, r5
 800d4d0:	50d4      	str	r4, [r2, r3]
 800d4d2:	e70f      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d4d4:	4a2c      	ldr	r2, [pc, #176]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d4d6:	23a8      	movs	r3, #168	; 0xa8
 800d4d8:	58d4      	ldr	r4, [r2, r3]
 800d4da:	4d2e      	ldr	r5, [pc, #184]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d4dc:	402c      	ands	r4, r5
 800d4de:	50d4      	str	r4, [r2, r3]
 800d4e0:	58d5      	ldr	r5, [r2, r3]
 800d4e2:	24a0      	movs	r4, #160	; 0xa0
 800d4e4:	0224      	lsls	r4, r4, #8
 800d4e6:	432c      	orrs	r4, r5
 800d4e8:	50d4      	str	r4, [r2, r3]
 800d4ea:	e703      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d4ec:	4a28      	ldr	r2, [pc, #160]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d4ee:	23a8      	movs	r3, #168	; 0xa8
 800d4f0:	58d4      	ldr	r4, [r2, r3]
 800d4f2:	25f0      	movs	r5, #240	; 0xf0
 800d4f4:	43ac      	bics	r4, r5
 800d4f6:	50d4      	str	r4, [r2, r3]
 800d4f8:	58d4      	ldr	r4, [r2, r3]
 800d4fa:	3d40      	subs	r5, #64	; 0x40
 800d4fc:	432c      	orrs	r4, r5
 800d4fe:	50d4      	str	r4, [r2, r3]
 800d500:	e6f8      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d502:	4a23      	ldr	r2, [pc, #140]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d504:	23a8      	movs	r3, #168	; 0xa8
 800d506:	58d4      	ldr	r4, [r2, r3]
 800d508:	4d22      	ldr	r5, [pc, #136]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d50a:	402c      	ands	r4, r5
 800d50c:	50d4      	str	r4, [r2, r3]
 800d50e:	58d5      	ldr	r5, [r2, r3]
 800d510:	24b0      	movs	r4, #176	; 0xb0
 800d512:	0224      	lsls	r4, r4, #8
 800d514:	432c      	orrs	r4, r5
 800d516:	50d4      	str	r4, [r2, r3]
 800d518:	e6ec      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d51a:	4a1d      	ldr	r2, [pc, #116]	; (800d590 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d51c:	23a8      	movs	r3, #168	; 0xa8
 800d51e:	58d4      	ldr	r4, [r2, r3]
 800d520:	4d1d      	ldr	r5, [pc, #116]	; (800d598 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d522:	402c      	ands	r4, r5
 800d524:	50d4      	str	r4, [r2, r3]
 800d526:	58d5      	ldr	r5, [r2, r3]
 800d528:	24b0      	movs	r4, #176	; 0xb0
 800d52a:	0524      	lsls	r4, r4, #20
 800d52c:	432c      	orrs	r4, r5
 800d52e:	50d4      	str	r4, [r2, r3]
 800d530:	e6e0      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d532:	4a15      	ldr	r2, [pc, #84]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d534:	23a8      	movs	r3, #168	; 0xa8
 800d536:	58d4      	ldr	r4, [r2, r3]
 800d538:	250f      	movs	r5, #15
 800d53a:	43ac      	bics	r4, r5
 800d53c:	50d4      	str	r4, [r2, r3]
 800d53e:	58d4      	ldr	r4, [r2, r3]
 800d540:	3d04      	subs	r5, #4
 800d542:	432c      	orrs	r4, r5
 800d544:	50d4      	str	r4, [r2, r3]
 800d546:	e6d5      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d548:	4a0f      	ldr	r2, [pc, #60]	; (800d588 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d54a:	23a8      	movs	r3, #168	; 0xa8
 800d54c:	58d4      	ldr	r4, [r2, r3]
 800d54e:	4d11      	ldr	r5, [pc, #68]	; (800d594 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d550:	402c      	ands	r4, r5
 800d552:	50d4      	str	r4, [r2, r3]
 800d554:	58d5      	ldr	r5, [r2, r3]
 800d556:	24b0      	movs	r4, #176	; 0xb0
 800d558:	0224      	lsls	r4, r4, #8
 800d55a:	432c      	orrs	r4, r5
 800d55c:	50d4      	str	r4, [r2, r3]
 800d55e:	e6c9      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
 800d560:	40013800 	.word	0x40013800
 800d564:	40004400 	.word	0x40004400
 800d568:	40004800 	.word	0x40004800
 800d56c:	40004c00 	.word	0x40004c00
 800d570:	4002001c 	.word	0x4002001c
 800d574:	40020044 	.word	0x40020044
 800d578:	40020080 	.word	0x40020080
 800d57c:	40020408 	.word	0x40020408
 800d580:	40020444 	.word	0x40020444
 800d584:	40020458 	.word	0x40020458
 800d588:	40020400 	.word	0x40020400
 800d58c:	fff0ffff 	.word	0xfff0ffff
 800d590:	40020000 	.word	0x40020000
 800d594:	ffff0fff 	.word	0xffff0fff
 800d598:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d59c:	4ab9      	ldr	r2, [pc, #740]	; (800d884 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d159      	bne.n	800d656 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d5a2:	680b      	ldr	r3, [r1, #0]
 800d5a4:	4ab8      	ldr	r2, [pc, #736]	; (800d888 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d01b      	beq.n	800d5e2 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d5aa:	4ab8      	ldr	r2, [pc, #736]	; (800d88c <RemapAndLinkDMAtoUARTTx+0x628>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d023      	beq.n	800d5f8 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d5b0:	4ab7      	ldr	r2, [pc, #732]	; (800d890 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d02c      	beq.n	800d610 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d5b6:	4ab7      	ldr	r2, [pc, #732]	; (800d894 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d035      	beq.n	800d628 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d5bc:	4ab6      	ldr	r2, [pc, #728]	; (800d898 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d03d      	beq.n	800d63e <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d5c2:	4ab6      	ldr	r2, [pc, #728]	; (800d89c <RemapAndLinkDMAtoUARTTx+0x638>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d000      	beq.n	800d5ca <RemapAndLinkDMAtoUARTTx+0x366>
 800d5c8:	e694      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d5ca:	4ab5      	ldr	r2, [pc, #724]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d5cc:	23a8      	movs	r3, #168	; 0xa8
 800d5ce:	58d4      	ldr	r4, [r2, r3]
 800d5d0:	4db4      	ldr	r5, [pc, #720]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d5d2:	402c      	ands	r4, r5
 800d5d4:	50d4      	str	r4, [r2, r3]
 800d5d6:	58d5      	ldr	r5, [r2, r3]
 800d5d8:	24c0      	movs	r4, #192	; 0xc0
 800d5da:	0324      	lsls	r4, r4, #12
 800d5dc:	432c      	orrs	r4, r5
 800d5de:	50d4      	str	r4, [r2, r3]
 800d5e0:	e688      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d5e2:	4ab1      	ldr	r2, [pc, #708]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d5e4:	23a8      	movs	r3, #168	; 0xa8
 800d5e6:	58d4      	ldr	r4, [r2, r3]
 800d5e8:	25f0      	movs	r5, #240	; 0xf0
 800d5ea:	43ac      	bics	r4, r5
 800d5ec:	50d4      	str	r4, [r2, r3]
 800d5ee:	58d4      	ldr	r4, [r2, r3]
 800d5f0:	3d30      	subs	r5, #48	; 0x30
 800d5f2:	432c      	orrs	r4, r5
 800d5f4:	50d4      	str	r4, [r2, r3]
 800d5f6:	e67d      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d5f8:	4aab      	ldr	r2, [pc, #684]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d5fa:	23a8      	movs	r3, #168	; 0xa8
 800d5fc:	58d4      	ldr	r4, [r2, r3]
 800d5fe:	4dab      	ldr	r5, [pc, #684]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d600:	402c      	ands	r4, r5
 800d602:	50d4      	str	r4, [r2, r3]
 800d604:	58d5      	ldr	r5, [r2, r3]
 800d606:	24c0      	movs	r4, #192	; 0xc0
 800d608:	0224      	lsls	r4, r4, #8
 800d60a:	432c      	orrs	r4, r5
 800d60c:	50d4      	str	r4, [r2, r3]
 800d60e:	e671      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d610:	4aa5      	ldr	r2, [pc, #660]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d612:	23a8      	movs	r3, #168	; 0xa8
 800d614:	58d4      	ldr	r4, [r2, r3]
 800d616:	4da6      	ldr	r5, [pc, #664]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d618:	402c      	ands	r4, r5
 800d61a:	50d4      	str	r4, [r2, r3]
 800d61c:	58d5      	ldr	r5, [r2, r3]
 800d61e:	24c0      	movs	r4, #192	; 0xc0
 800d620:	0524      	lsls	r4, r4, #20
 800d622:	432c      	orrs	r4, r5
 800d624:	50d4      	str	r4, [r2, r3]
 800d626:	e665      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d628:	4a9d      	ldr	r2, [pc, #628]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d62a:	23a8      	movs	r3, #168	; 0xa8
 800d62c:	58d4      	ldr	r4, [r2, r3]
 800d62e:	250f      	movs	r5, #15
 800d630:	43ac      	bics	r4, r5
 800d632:	50d4      	str	r4, [r2, r3]
 800d634:	58d4      	ldr	r4, [r2, r3]
 800d636:	3d03      	subs	r5, #3
 800d638:	432c      	orrs	r4, r5
 800d63a:	50d4      	str	r4, [r2, r3]
 800d63c:	e65a      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d63e:	4a98      	ldr	r2, [pc, #608]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d640:	23a8      	movs	r3, #168	; 0xa8
 800d642:	58d4      	ldr	r4, [r2, r3]
 800d644:	4d99      	ldr	r5, [pc, #612]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d646:	402c      	ands	r4, r5
 800d648:	50d4      	str	r4, [r2, r3]
 800d64a:	58d5      	ldr	r5, [r2, r3]
 800d64c:	24c0      	movs	r4, #192	; 0xc0
 800d64e:	0224      	lsls	r4, r4, #8
 800d650:	432c      	orrs	r4, r5
 800d652:	50d4      	str	r4, [r2, r3]
 800d654:	e64e      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d656:	4a97      	ldr	r2, [pc, #604]	; (800d8b4 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d159      	bne.n	800d710 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d65c:	680b      	ldr	r3, [r1, #0]
 800d65e:	4a8a      	ldr	r2, [pc, #552]	; (800d888 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d01b      	beq.n	800d69c <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d664:	4a89      	ldr	r2, [pc, #548]	; (800d88c <RemapAndLinkDMAtoUARTTx+0x628>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d023      	beq.n	800d6b2 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d66a:	4a89      	ldr	r2, [pc, #548]	; (800d890 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d02c      	beq.n	800d6ca <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d670:	4a88      	ldr	r2, [pc, #544]	; (800d894 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d035      	beq.n	800d6e2 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d676:	4a88      	ldr	r2, [pc, #544]	; (800d898 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d03d      	beq.n	800d6f8 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d67c:	4a87      	ldr	r2, [pc, #540]	; (800d89c <RemapAndLinkDMAtoUARTTx+0x638>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d000      	beq.n	800d684 <RemapAndLinkDMAtoUARTTx+0x420>
 800d682:	e637      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d684:	4a86      	ldr	r2, [pc, #536]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d686:	23a8      	movs	r3, #168	; 0xa8
 800d688:	58d4      	ldr	r4, [r2, r3]
 800d68a:	4d86      	ldr	r5, [pc, #536]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d68c:	402c      	ands	r4, r5
 800d68e:	50d4      	str	r4, [r2, r3]
 800d690:	58d5      	ldr	r5, [r2, r3]
 800d692:	24d0      	movs	r4, #208	; 0xd0
 800d694:	0324      	lsls	r4, r4, #12
 800d696:	432c      	orrs	r4, r5
 800d698:	50d4      	str	r4, [r2, r3]
 800d69a:	e62b      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d69c:	4a82      	ldr	r2, [pc, #520]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d69e:	23a8      	movs	r3, #168	; 0xa8
 800d6a0:	58d4      	ldr	r4, [r2, r3]
 800d6a2:	25f0      	movs	r5, #240	; 0xf0
 800d6a4:	43ac      	bics	r4, r5
 800d6a6:	50d4      	str	r4, [r2, r3]
 800d6a8:	58d4      	ldr	r4, [r2, r3]
 800d6aa:	3d20      	subs	r5, #32
 800d6ac:	432c      	orrs	r4, r5
 800d6ae:	50d4      	str	r4, [r2, r3]
 800d6b0:	e620      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d6b2:	4a7d      	ldr	r2, [pc, #500]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d6b4:	23a8      	movs	r3, #168	; 0xa8
 800d6b6:	58d4      	ldr	r4, [r2, r3]
 800d6b8:	4d7c      	ldr	r5, [pc, #496]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d6ba:	402c      	ands	r4, r5
 800d6bc:	50d4      	str	r4, [r2, r3]
 800d6be:	58d5      	ldr	r5, [r2, r3]
 800d6c0:	24d0      	movs	r4, #208	; 0xd0
 800d6c2:	0224      	lsls	r4, r4, #8
 800d6c4:	432c      	orrs	r4, r5
 800d6c6:	50d4      	str	r4, [r2, r3]
 800d6c8:	e614      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d6ca:	4a77      	ldr	r2, [pc, #476]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d6cc:	23a8      	movs	r3, #168	; 0xa8
 800d6ce:	58d4      	ldr	r4, [r2, r3]
 800d6d0:	4d77      	ldr	r5, [pc, #476]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d6d2:	402c      	ands	r4, r5
 800d6d4:	50d4      	str	r4, [r2, r3]
 800d6d6:	58d5      	ldr	r5, [r2, r3]
 800d6d8:	24d0      	movs	r4, #208	; 0xd0
 800d6da:	0524      	lsls	r4, r4, #20
 800d6dc:	432c      	orrs	r4, r5
 800d6de:	50d4      	str	r4, [r2, r3]
 800d6e0:	e608      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d6e2:	4a6f      	ldr	r2, [pc, #444]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d6e4:	23a8      	movs	r3, #168	; 0xa8
 800d6e6:	58d4      	ldr	r4, [r2, r3]
 800d6e8:	250f      	movs	r5, #15
 800d6ea:	43ac      	bics	r4, r5
 800d6ec:	50d4      	str	r4, [r2, r3]
 800d6ee:	58d4      	ldr	r4, [r2, r3]
 800d6f0:	3d02      	subs	r5, #2
 800d6f2:	432c      	orrs	r4, r5
 800d6f4:	50d4      	str	r4, [r2, r3]
 800d6f6:	e5fd      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d6f8:	4a69      	ldr	r2, [pc, #420]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d6fa:	23a8      	movs	r3, #168	; 0xa8
 800d6fc:	58d4      	ldr	r4, [r2, r3]
 800d6fe:	4d6b      	ldr	r5, [pc, #428]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d700:	402c      	ands	r4, r5
 800d702:	50d4      	str	r4, [r2, r3]
 800d704:	58d5      	ldr	r5, [r2, r3]
 800d706:	24d0      	movs	r4, #208	; 0xd0
 800d708:	0224      	lsls	r4, r4, #8
 800d70a:	432c      	orrs	r4, r5
 800d70c:	50d4      	str	r4, [r2, r3]
 800d70e:	e5f1      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d710:	4a69      	ldr	r2, [pc, #420]	; (800d8b8 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d159      	bne.n	800d7ca <RemapAndLinkDMAtoUARTTx+0x566>
 800d716:	680b      	ldr	r3, [r1, #0]
 800d718:	4a5b      	ldr	r2, [pc, #364]	; (800d888 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d01b      	beq.n	800d756 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d71e:	4a5b      	ldr	r2, [pc, #364]	; (800d88c <RemapAndLinkDMAtoUARTTx+0x628>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d023      	beq.n	800d76c <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d724:	4a5a      	ldr	r2, [pc, #360]	; (800d890 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d02c      	beq.n	800d784 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d72a:	4a5a      	ldr	r2, [pc, #360]	; (800d894 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d035      	beq.n	800d79c <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d730:	4a59      	ldr	r2, [pc, #356]	; (800d898 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d03d      	beq.n	800d7b2 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d736:	4a59      	ldr	r2, [pc, #356]	; (800d89c <RemapAndLinkDMAtoUARTTx+0x638>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d000      	beq.n	800d73e <RemapAndLinkDMAtoUARTTx+0x4da>
 800d73c:	e5da      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d73e:	4a58      	ldr	r2, [pc, #352]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d740:	23a8      	movs	r3, #168	; 0xa8
 800d742:	58d4      	ldr	r4, [r2, r3]
 800d744:	4d57      	ldr	r5, [pc, #348]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d746:	402c      	ands	r4, r5
 800d748:	50d4      	str	r4, [r2, r3]
 800d74a:	58d5      	ldr	r5, [r2, r3]
 800d74c:	24e0      	movs	r4, #224	; 0xe0
 800d74e:	0324      	lsls	r4, r4, #12
 800d750:	432c      	orrs	r4, r5
 800d752:	50d4      	str	r4, [r2, r3]
 800d754:	e5ce      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d756:	4a54      	ldr	r2, [pc, #336]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d758:	23a8      	movs	r3, #168	; 0xa8
 800d75a:	58d4      	ldr	r4, [r2, r3]
 800d75c:	25f0      	movs	r5, #240	; 0xf0
 800d75e:	43ac      	bics	r4, r5
 800d760:	50d4      	str	r4, [r2, r3]
 800d762:	58d4      	ldr	r4, [r2, r3]
 800d764:	3d10      	subs	r5, #16
 800d766:	432c      	orrs	r4, r5
 800d768:	50d4      	str	r4, [r2, r3]
 800d76a:	e5c3      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d76c:	4a4e      	ldr	r2, [pc, #312]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d76e:	23a8      	movs	r3, #168	; 0xa8
 800d770:	58d4      	ldr	r4, [r2, r3]
 800d772:	4d4e      	ldr	r5, [pc, #312]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d774:	402c      	ands	r4, r5
 800d776:	50d4      	str	r4, [r2, r3]
 800d778:	58d5      	ldr	r5, [r2, r3]
 800d77a:	24e0      	movs	r4, #224	; 0xe0
 800d77c:	0224      	lsls	r4, r4, #8
 800d77e:	432c      	orrs	r4, r5
 800d780:	50d4      	str	r4, [r2, r3]
 800d782:	e5b7      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d784:	4a48      	ldr	r2, [pc, #288]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d786:	23a8      	movs	r3, #168	; 0xa8
 800d788:	58d4      	ldr	r4, [r2, r3]
 800d78a:	4d49      	ldr	r5, [pc, #292]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d78c:	402c      	ands	r4, r5
 800d78e:	50d4      	str	r4, [r2, r3]
 800d790:	58d5      	ldr	r5, [r2, r3]
 800d792:	24e0      	movs	r4, #224	; 0xe0
 800d794:	0524      	lsls	r4, r4, #20
 800d796:	432c      	orrs	r4, r5
 800d798:	50d4      	str	r4, [r2, r3]
 800d79a:	e5ab      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d79c:	4a40      	ldr	r2, [pc, #256]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d79e:	23a8      	movs	r3, #168	; 0xa8
 800d7a0:	58d4      	ldr	r4, [r2, r3]
 800d7a2:	250f      	movs	r5, #15
 800d7a4:	43ac      	bics	r4, r5
 800d7a6:	50d4      	str	r4, [r2, r3]
 800d7a8:	58d4      	ldr	r4, [r2, r3]
 800d7aa:	3d01      	subs	r5, #1
 800d7ac:	432c      	orrs	r4, r5
 800d7ae:	50d4      	str	r4, [r2, r3]
 800d7b0:	e5a0      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d7b2:	4a3b      	ldr	r2, [pc, #236]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d7b4:	23a8      	movs	r3, #168	; 0xa8
 800d7b6:	58d4      	ldr	r4, [r2, r3]
 800d7b8:	4d3c      	ldr	r5, [pc, #240]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d7ba:	402c      	ands	r4, r5
 800d7bc:	50d4      	str	r4, [r2, r3]
 800d7be:	58d5      	ldr	r5, [r2, r3]
 800d7c0:	24e0      	movs	r4, #224	; 0xe0
 800d7c2:	0224      	lsls	r4, r4, #8
 800d7c4:	432c      	orrs	r4, r5
 800d7c6:	50d4      	str	r4, [r2, r3]
 800d7c8:	e594      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d7ca:	4a3c      	ldr	r2, [pc, #240]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x658>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d000      	beq.n	800d7d2 <RemapAndLinkDMAtoUARTTx+0x56e>
 800d7d0:	e590      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
 800d7d2:	680b      	ldr	r3, [r1, #0]
 800d7d4:	4a2c      	ldr	r2, [pc, #176]	; (800d888 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d01b      	beq.n	800d812 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d7da:	4a2c      	ldr	r2, [pc, #176]	; (800d88c <RemapAndLinkDMAtoUARTTx+0x628>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d022      	beq.n	800d826 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d7e0:	4a2b      	ldr	r2, [pc, #172]	; (800d890 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d02b      	beq.n	800d83e <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d7e6:	4a2b      	ldr	r2, [pc, #172]	; (800d894 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d034      	beq.n	800d856 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d7ec:	4a2a      	ldr	r2, [pc, #168]	; (800d898 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d03b      	beq.n	800d86a <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d7f2:	4a2a      	ldr	r2, [pc, #168]	; (800d89c <RemapAndLinkDMAtoUARTTx+0x638>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d000      	beq.n	800d7fa <RemapAndLinkDMAtoUARTTx+0x596>
 800d7f8:	e57c      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d7fa:	4a29      	ldr	r2, [pc, #164]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d7fc:	23a8      	movs	r3, #168	; 0xa8
 800d7fe:	58d4      	ldr	r4, [r2, r3]
 800d800:	4d28      	ldr	r5, [pc, #160]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d802:	402c      	ands	r4, r5
 800d804:	50d4      	str	r4, [r2, r3]
 800d806:	58d5      	ldr	r5, [r2, r3]
 800d808:	24f0      	movs	r4, #240	; 0xf0
 800d80a:	0324      	lsls	r4, r4, #12
 800d80c:	432c      	orrs	r4, r5
 800d80e:	50d4      	str	r4, [r2, r3]
 800d810:	e570      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d812:	4a25      	ldr	r2, [pc, #148]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d814:	23a8      	movs	r3, #168	; 0xa8
 800d816:	58d5      	ldr	r5, [r2, r3]
 800d818:	26f0      	movs	r6, #240	; 0xf0
 800d81a:	43b5      	bics	r5, r6
 800d81c:	50d5      	str	r5, [r2, r3]
 800d81e:	58d4      	ldr	r4, [r2, r3]
 800d820:	4334      	orrs	r4, r6
 800d822:	50d4      	str	r4, [r2, r3]
 800d824:	e566      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d826:	4a20      	ldr	r2, [pc, #128]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d828:	23a8      	movs	r3, #168	; 0xa8
 800d82a:	58d4      	ldr	r4, [r2, r3]
 800d82c:	4d1f      	ldr	r5, [pc, #124]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d82e:	402c      	ands	r4, r5
 800d830:	50d4      	str	r4, [r2, r3]
 800d832:	58d5      	ldr	r5, [r2, r3]
 800d834:	24f0      	movs	r4, #240	; 0xf0
 800d836:	0224      	lsls	r4, r4, #8
 800d838:	432c      	orrs	r4, r5
 800d83a:	50d4      	str	r4, [r2, r3]
 800d83c:	e55a      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d83e:	4a1a      	ldr	r2, [pc, #104]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d840:	23a8      	movs	r3, #168	; 0xa8
 800d842:	58d4      	ldr	r4, [r2, r3]
 800d844:	4d1a      	ldr	r5, [pc, #104]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d846:	402c      	ands	r4, r5
 800d848:	50d4      	str	r4, [r2, r3]
 800d84a:	58d5      	ldr	r5, [r2, r3]
 800d84c:	24f0      	movs	r4, #240	; 0xf0
 800d84e:	0524      	lsls	r4, r4, #20
 800d850:	432c      	orrs	r4, r5
 800d852:	50d4      	str	r4, [r2, r3]
 800d854:	e54e      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d856:	4a12      	ldr	r2, [pc, #72]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d858:	23a8      	movs	r3, #168	; 0xa8
 800d85a:	58d5      	ldr	r5, [r2, r3]
 800d85c:	260f      	movs	r6, #15
 800d85e:	43b5      	bics	r5, r6
 800d860:	50d5      	str	r5, [r2, r3]
 800d862:	58d4      	ldr	r4, [r2, r3]
 800d864:	4334      	orrs	r4, r6
 800d866:	50d4      	str	r4, [r2, r3]
 800d868:	e544      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d86a:	4a0d      	ldr	r2, [pc, #52]	; (800d8a0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d86c:	23a8      	movs	r3, #168	; 0xa8
 800d86e:	58d4      	ldr	r4, [r2, r3]
 800d870:	4d0e      	ldr	r5, [pc, #56]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x648>)
 800d872:	402c      	ands	r4, r5
 800d874:	50d4      	str	r4, [r2, r3]
 800d876:	58d5      	ldr	r5, [r2, r3]
 800d878:	24f0      	movs	r4, #240	; 0xf0
 800d87a:	0224      	lsls	r4, r4, #8
 800d87c:	432c      	orrs	r4, r5
 800d87e:	50d4      	str	r4, [r2, r3]
 800d880:	e538      	b.n	800d2f4 <RemapAndLinkDMAtoUARTTx+0x90>
 800d882:	46c0      	nop			; (mov r8, r8)
 800d884:	40005000 	.word	0x40005000
 800d888:	4002001c 	.word	0x4002001c
 800d88c:	40020044 	.word	0x40020044
 800d890:	40020080 	.word	0x40020080
 800d894:	40020408 	.word	0x40020408
 800d898:	40020444 	.word	0x40020444
 800d89c:	40020458 	.word	0x40020458
 800d8a0:	40020400 	.word	0x40020400
 800d8a4:	fff0ffff 	.word	0xfff0ffff
 800d8a8:	40020000 	.word	0x40020000
 800d8ac:	ffff0fff 	.word	0xffff0fff
 800d8b0:	f0ffffff 	.word	0xf0ffffff
 800d8b4:	40011400 	.word	0x40011400
 800d8b8:	40011800 	.word	0x40011800
 800d8bc:	40011c00 	.word	0x40011c00

0800d8c0 <DMA_MSG_TX_Setup>:
{	
 800d8c0:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <DMA_MSG_TX_Setup+0x38>)
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d012      	beq.n	800d8f0 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d8ca:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <DMA_MSG_TX_Setup+0x38>)
 800d8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d010      	beq.n	800d8f4 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d8d2:	4a09      	ldr	r2, [pc, #36]	; (800d8f8 <DMA_MSG_TX_Setup+0x38>)
 800d8d4:	2394      	movs	r3, #148	; 0x94
 800d8d6:	58d3      	ldr	r3, [r2, r3]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d007      	beq.n	800d8ec <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d8dc:	0021      	movs	r1, r4
 800d8de:	f7ff fcc1 	bl	800d264 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	0020      	movs	r0, r4
 800d8e6:	f7ff f873 	bl	800c9d0 <SetupDMAInterrupts>
}
 800d8ea:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d8ec:	4c03      	ldr	r4, [pc, #12]	; (800d8fc <DMA_MSG_TX_Setup+0x3c>)
 800d8ee:	e7f5      	b.n	800d8dc <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d8f0:	4c01      	ldr	r4, [pc, #4]	; (800d8f8 <DMA_MSG_TX_Setup+0x38>)
 800d8f2:	e7f3      	b.n	800d8dc <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d8f4:	4c02      	ldr	r4, [pc, #8]	; (800d900 <DMA_MSG_TX_Setup+0x40>)
 800d8f6:	e7f1      	b.n	800d8dc <DMA_MSG_TX_Setup+0x1c>
 800d8f8:	200011c8 	.word	0x200011c8
 800d8fc:	20001238 	.word	0x20001238
 800d900:	20001200 	.word	0x20001200

0800d904 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d904:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d906:	4807      	ldr	r0, [pc, #28]	; (800d924 <CRC_Init+0x20>)
 800d908:	4b07      	ldr	r3, [pc, #28]	; (800d928 <CRC_Init+0x24>)
 800d90a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d90c:	2310      	movs	r3, #16
 800d90e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d910:	2300      	movs	r3, #0
 800d912:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d914:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d916:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d918:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d91a:	3303      	adds	r3, #3
 800d91c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d91e:	f003 fabd 	bl	8010e9c <HAL_CRC_Init>
}
 800d922:	bd10      	pop	{r4, pc}
 800d924:	20006650 	.word	0x20006650
 800d928:	40023000 	.word	0x40023000

0800d92c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d92c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d92e:	4a05      	ldr	r2, [pc, #20]	; (800d944 <HAL_CRC_MspInit+0x18>)
 800d930:	6951      	ldr	r1, [r2, #20]
 800d932:	2340      	movs	r3, #64	; 0x40
 800d934:	4319      	orrs	r1, r3
 800d936:	6151      	str	r1, [r2, #20]
 800d938:	6952      	ldr	r2, [r2, #20]
 800d93a:	4013      	ands	r3, r2
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	9b01      	ldr	r3, [sp, #4]
}
 800d940:	b002      	add	sp, #8
 800d942:	4770      	bx	lr
 800d944:	40021000 	.word	0x40021000

0800d948 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	0004      	movs	r4, r0
 800d94c:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800d94e:	2800      	cmp	r0, #0
 800d950:	d015      	beq.n	800d97e <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800d952:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800d954:	2900      	cmp	r1, #0
 800d956:	d100      	bne.n	800d95a <CalculateCRC8+0x12>
}
 800d958:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800d95a:	088e      	lsrs	r6, r1, #2
 800d95c:	0032      	movs	r2, r6
 800d95e:	0021      	movs	r1, r4
 800d960:	4808      	ldr	r0, [pc, #32]	; (800d984 <CalculateCRC8+0x3c>)
 800d962:	f003 faf8 	bl	8010f56 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800d966:	07ab      	lsls	r3, r5, #30
 800d968:	d101      	bne.n	800d96e <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800d96a:	b2c0      	uxtb	r0, r0
 800d96c:	e7f4      	b.n	800d958 <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800d96e:	00b1      	lsls	r1, r6, #2
 800d970:	1861      	adds	r1, r4, r1
 800d972:	2201      	movs	r2, #1
 800d974:	4803      	ldr	r0, [pc, #12]	; (800d984 <CalculateCRC8+0x3c>)
 800d976:	f003 fac2 	bl	8010efe <HAL_CRC_Accumulate>
 800d97a:	b2c0      	uxtb	r0, r0
 800d97c:	e7ec      	b.n	800d958 <CalculateCRC8+0x10>
  return 0;
 800d97e:	2000      	movs	r0, #0
 800d980:	e7ea      	b.n	800d958 <CalculateCRC8+0x10>
 800d982:	46c0      	nop			; (mov r8, r8)
 800d984:	20006650 	.word	0x20006650

0800d988 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800d988:	b500      	push	{lr}
 800d98a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d98c:	2380      	movs	r3, #128	; 0x80
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d992:	2301      	movs	r3, #1
 800d994:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d996:	2300      	movs	r3, #0
 800d998:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d99a:	3303      	adds	r3, #3
 800d99c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d99e:	2090      	movs	r0, #144	; 0x90
 800d9a0:	a901      	add	r1, sp, #4
 800d9a2:	05c0      	lsls	r0, r0, #23
 800d9a4:	f004 f97a 	bl	8011c9c <HAL_GPIO_Init>
}
 800d9a8:	b007      	add	sp, #28
 800d9aa:	bd00      	pop	{pc}

0800d9ac <GPIO_Init>:
{
 800d9ac:	b500      	push	{lr}
 800d9ae:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d9b0:	4b18      	ldr	r3, [pc, #96]	; (800da14 <GPIO_Init+0x68>)
 800d9b2:	6959      	ldr	r1, [r3, #20]
 800d9b4:	2080      	movs	r0, #128	; 0x80
 800d9b6:	0300      	lsls	r0, r0, #12
 800d9b8:	4301      	orrs	r1, r0
 800d9ba:	6159      	str	r1, [r3, #20]
 800d9bc:	695a      	ldr	r2, [r3, #20]
 800d9be:	4002      	ands	r2, r0
 800d9c0:	9201      	str	r2, [sp, #4]
 800d9c2:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d9c4:	6959      	ldr	r1, [r3, #20]
 800d9c6:	2080      	movs	r0, #128	; 0x80
 800d9c8:	0280      	lsls	r0, r0, #10
 800d9ca:	4301      	orrs	r1, r0
 800d9cc:	6159      	str	r1, [r3, #20]
 800d9ce:	695a      	ldr	r2, [r3, #20]
 800d9d0:	4002      	ands	r2, r0
 800d9d2:	9202      	str	r2, [sp, #8]
 800d9d4:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d9d6:	6959      	ldr	r1, [r3, #20]
 800d9d8:	2080      	movs	r0, #128	; 0x80
 800d9da:	0340      	lsls	r0, r0, #13
 800d9dc:	4301      	orrs	r1, r0
 800d9de:	6159      	str	r1, [r3, #20]
 800d9e0:	695a      	ldr	r2, [r3, #20]
 800d9e2:	4002      	ands	r2, r0
 800d9e4:	9203      	str	r2, [sp, #12]
 800d9e6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d9e8:	6959      	ldr	r1, [r3, #20]
 800d9ea:	2080      	movs	r0, #128	; 0x80
 800d9ec:	02c0      	lsls	r0, r0, #11
 800d9ee:	4301      	orrs	r1, r0
 800d9f0:	6159      	str	r1, [r3, #20]
 800d9f2:	695a      	ldr	r2, [r3, #20]
 800d9f4:	4002      	ands	r2, r0
 800d9f6:	9204      	str	r2, [sp, #16]
 800d9f8:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d9fa:	695a      	ldr	r2, [r3, #20]
 800d9fc:	2180      	movs	r1, #128	; 0x80
 800d9fe:	03c9      	lsls	r1, r1, #15
 800da00:	430a      	orrs	r2, r1
 800da02:	615a      	str	r2, [r3, #20]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	400b      	ands	r3, r1
 800da08:	9305      	str	r3, [sp, #20]
 800da0a:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800da0c:	f7ff ffbc 	bl	800d988 <IND_LED_Init>
}
 800da10:	b007      	add	sp, #28
 800da12:	bd00      	pop	{pc}
 800da14:	40021000 	.word	0x40021000

0800da18 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	000e      	movs	r6, r1
 800da1c:	0014      	movs	r4, r2
 800da1e:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800da20:	f000 fc96 	bl	800e350 <GetUart>


#ifdef _Usart2	
	if (huart == &huart2)
 800da24:	4b16      	ldr	r3, [pc, #88]	; (800da80 <GetPortGPIOs+0x68>)
 800da26:	4298      	cmp	r0, r3
 800da28:	d008      	beq.n	800da3c <GetPortGPIOs+0x24>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800da2a:	4b16      	ldr	r3, [pc, #88]	; (800da84 <GetPortGPIOs+0x6c>)
 800da2c:	4298      	cmp	r0, r3
 800da2e:	d010      	beq.n	800da52 <GetPortGPIOs+0x3a>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800da30:	4a15      	ldr	r2, [pc, #84]	; (800da88 <GetPortGPIOs+0x70>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800da32:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800da34:	4290      	cmp	r0, r2
 800da36:	d018      	beq.n	800da6a <GetPortGPIOs+0x52>
	
	return result;	
}
 800da38:	0018      	movs	r0, r3
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800da3c:	2390      	movs	r3, #144	; 0x90
 800da3e:	05db      	lsls	r3, r3, #23
 800da40:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800da42:	2204      	movs	r2, #4
 800da44:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800da46:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800da48:	2308      	movs	r3, #8
 800da4a:	9a04      	ldr	r2, [sp, #16]
 800da4c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	e7f2      	b.n	800da38 <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800da52:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <GetPortGPIOs+0x74>)
 800da54:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800da56:	2280      	movs	r2, #128	; 0x80
 800da58:	00d2      	lsls	r2, r2, #3
 800da5a:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800da5c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800da5e:	2380      	movs	r3, #128	; 0x80
 800da60:	011b      	lsls	r3, r3, #4
 800da62:	9a04      	ldr	r2, [sp, #16]
 800da64:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800da66:	2300      	movs	r3, #0
 800da68:	e7e6      	b.n	800da38 <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800da6a:	2390      	movs	r3, #144	; 0x90
 800da6c:	05db      	lsls	r3, r3, #23
 800da6e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800da70:	2210      	movs	r2, #16
 800da72:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800da74:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800da76:	2320      	movs	r3, #32
 800da78:	9a04      	ldr	r2, [sp, #16]
 800da7a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	e7db      	b.n	800da38 <GetPortGPIOs+0x20>
 800da80:	200065d4 	.word	0x200065d4
 800da84:	200063b4 	.word	0x200063b4
 800da88:	200064e8 	.word	0x200064e8
 800da8c:	48000400 	.word	0x48000400

0800da90 <IsFactoryReset>:
{
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800da94:	4b39      	ldr	r3, [pc, #228]	; (800db7c <IsFactoryReset+0xec>)
 800da96:	6959      	ldr	r1, [r3, #20]
 800da98:	2080      	movs	r0, #128	; 0x80
 800da9a:	0280      	lsls	r0, r0, #10
 800da9c:	4301      	orrs	r1, r0
 800da9e:	6159      	str	r1, [r3, #20]
 800daa0:	695a      	ldr	r2, [r3, #20]
 800daa2:	4002      	ands	r2, r0
 800daa4:	9203      	str	r2, [sp, #12]
 800daa6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800daa8:	6959      	ldr	r1, [r3, #20]
 800daaa:	2080      	movs	r0, #128	; 0x80
 800daac:	02c0      	lsls	r0, r0, #11
 800daae:	4301      	orrs	r1, r0
 800dab0:	6159      	str	r1, [r3, #20]
 800dab2:	695a      	ldr	r2, [r3, #20]
 800dab4:	4002      	ands	r2, r0
 800dab6:	9204      	str	r2, [sp, #16]
 800dab8:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800daba:	6959      	ldr	r1, [r3, #20]
 800dabc:	2080      	movs	r0, #128	; 0x80
 800dabe:	0300      	lsls	r0, r0, #12
 800dac0:	4301      	orrs	r1, r0
 800dac2:	6159      	str	r1, [r3, #20]
 800dac4:	695a      	ldr	r2, [r3, #20]
 800dac6:	4002      	ands	r2, r0
 800dac8:	9205      	str	r2, [sp, #20]
 800daca:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800dacc:	695a      	ldr	r2, [r3, #20]
 800dace:	2180      	movs	r1, #128	; 0x80
 800dad0:	0349      	lsls	r1, r1, #13
 800dad2:	430a      	orrs	r2, r1
 800dad4:	615a      	str	r2, [r3, #20]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	400b      	ands	r3, r1
 800dada:	9306      	str	r3, [sp, #24]
 800dadc:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800dade:	2522      	movs	r5, #34	; 0x22
 800dae0:	446d      	add	r5, sp
 800dae2:	ab08      	add	r3, sp, #32
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	ab0b      	add	r3, sp, #44	; 0x2c
 800dae8:	002a      	movs	r2, r5
 800daea:	a90c      	add	r1, sp, #48	; 0x30
 800daec:	2001      	movs	r0, #1
 800daee:	f7ff ff93 	bl	800da18 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800daf2:	ac07      	add	r4, sp, #28
 800daf4:	9400      	str	r4, [sp, #0]
 800daf6:	ab09      	add	r3, sp, #36	; 0x24
 800daf8:	221e      	movs	r2, #30
 800dafa:	446a      	add	r2, sp
 800dafc:	a90a      	add	r1, sp, #40	; 0x28
 800dafe:	2003      	movs	r0, #3
 800db00:	f7ff ff8a 	bl	800da18 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800db04:	2301      	movs	r3, #1
 800db06:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db08:	2600      	movs	r6, #0
 800db0a:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800db0c:	882b      	ldrh	r3, [r5, #0]
 800db0e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800db10:	a90d      	add	r1, sp, #52	; 0x34
 800db12:	980c      	ldr	r0, [sp, #48]	; 0x30
 800db14:	f004 f8c2 	bl	8011c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db18:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800db1a:	2302      	movs	r3, #2
 800db1c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800db1e:	8823      	ldrh	r3, [r4, #0]
 800db20:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800db22:	a90d      	add	r1, sp, #52	; 0x34
 800db24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db26:	f004 f8b9 	bl	8011c9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800db2a:	8829      	ldrh	r1, [r5, #0]
 800db2c:	2200      	movs	r2, #0
 800db2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800db30:	f004 fa28 	bl	8011f84 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800db34:	2005      	movs	r0, #5
 800db36:	f000 fadf 	bl	800e0f8 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800db3a:	8821      	ldrh	r1, [r4, #0]
 800db3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db3e:	f004 fa1b 	bl	8011f78 <HAL_GPIO_ReadPin>
 800db42:	2800      	cmp	r0, #0
 800db44:	d006      	beq.n	800db54 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800db46:	4b0e      	ldr	r3, [pc, #56]	; (800db80 <IsFactoryReset+0xf0>)
 800db48:	2201      	movs	r2, #1
 800db4a:	4252      	negs	r2, r2
 800db4c:	601a      	str	r2, [r3, #0]
	return 0;
 800db4e:	2000      	movs	r0, #0
}
 800db50:	b012      	add	sp, #72	; 0x48
 800db52:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800db54:	2322      	movs	r3, #34	; 0x22
 800db56:	446b      	add	r3, sp
 800db58:	8819      	ldrh	r1, [r3, #0]
 800db5a:	2201      	movs	r2, #1
 800db5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800db5e:	f004 fa11 	bl	8011f84 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800db62:	2005      	movs	r0, #5
 800db64:	f000 fac8 	bl	800e0f8 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800db68:	ab07      	add	r3, sp, #28
 800db6a:	8819      	ldrh	r1, [r3, #0]
 800db6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db6e:	f004 fa03 	bl	8011f78 <HAL_GPIO_ReadPin>
 800db72:	2801      	cmp	r0, #1
 800db74:	d1e7      	bne.n	800db46 <IsFactoryReset+0xb6>
			return 1;
 800db76:	2001      	movs	r0, #1
 800db78:	e7ea      	b.n	800db50 <IsFactoryReset+0xc0>
 800db7a:	46c0      	nop			; (mov r8, r8)
 800db7c:	40021000 	.word	0x40021000
 800db80:	20007ff0 	.word	0x20007ff0

0800db84 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800db84:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800db86:	f002 fd41 	bl	801060c <HAL_IncTick>
  osSystickHandler();  
 800db8a:	f000 fd95 	bl	800e6b8 <osSystickHandler>

}
 800db8e:	bd10      	pop	{r4, pc}

0800db90 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800db90:	e7fe      	b.n	800db90 <HardFault_Handler>
	...

0800db94 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800db94:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800db96:	4802      	ldr	r0, [pc, #8]	; (800dba0 <USART1_IRQHandler+0xc>)
 800db98:	f005 ff01 	bl	801399e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800db9c:	bd10      	pop	{r4, pc}
 800db9e:	46c0      	nop			; (mov r8, r8)
 800dba0:	20006464 	.word	0x20006464

0800dba4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800dba4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800dba6:	4802      	ldr	r0, [pc, #8]	; (800dbb0 <USART2_IRQHandler+0xc>)
 800dba8:	f005 fef9 	bl	801399e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	46c0      	nop			; (mov r8, r8)
 800dbb0:	200065d4 	.word	0x200065d4

0800dbb4 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dbb4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dbb6:	4805      	ldr	r0, [pc, #20]	; (800dbcc <USART3_8_IRQHandler+0x18>)
 800dbb8:	f005 fef1 	bl	801399e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800dbbc:	4804      	ldr	r0, [pc, #16]	; (800dbd0 <USART3_8_IRQHandler+0x1c>)
 800dbbe:	f005 feee 	bl	801399e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800dbc2:	4804      	ldr	r0, [pc, #16]	; (800dbd4 <USART3_8_IRQHandler+0x20>)
 800dbc4:	f005 feeb 	bl	801399e <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dbc8:	bd10      	pop	{r4, pc}
 800dbca:	46c0      	nop			; (mov r8, r8)
 800dbcc:	200063b4 	.word	0x200063b4
 800dbd0:	20006560 	.word	0x20006560
 800dbd4:	200064e8 	.word	0x200064e8

0800dbd8 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800dbd8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800dbda:	2001      	movs	r0, #1
 800dbdc:	f7f9 fdd0 	bl	8007780 <DMA_IRQHandler>
	
}
 800dbe0:	bd10      	pop	{r4, pc}
	...

0800dbe4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dbe4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800dbe6:	4b0c      	ldr	r3, [pc, #48]	; (800dc18 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	06db      	lsls	r3, r3, #27
 800dbec:	d408      	bmi.n	800dc00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dbee:	4b0b      	ldr	r3, [pc, #44]	; (800dc1c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	05db      	lsls	r3, r3, #23
 800dbf4:	d408      	bmi.n	800dc08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	06db      	lsls	r3, r3, #27
 800dbfc:	d408      	bmi.n	800dc10 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800dbfe:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800dc00:	2005      	movs	r0, #5
 800dc02:	f7f9 fdbd 	bl	8007780 <DMA_IRQHandler>
 800dc06:	e7fa      	b.n	800dbfe <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800dc08:	2002      	movs	r0, #2
 800dc0a:	f7f9 fdb9 	bl	8007780 <DMA_IRQHandler>
 800dc0e:	e7f6      	b.n	800dbfe <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800dc10:	4803      	ldr	r0, [pc, #12]	; (800dc20 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800dc12:	f003 fa9f 	bl	8011154 <HAL_DMA_IRQHandler>
}
 800dc16:	e7f2      	b.n	800dbfe <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800dc18:	40020400 	.word	0x40020400
 800dc1c:	40020000 	.word	0x40020000
 800dc20:	200011c8 	.word	0x200011c8

0800dc24 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800dc24:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	03db      	lsls	r3, r3, #15
 800dc2c:	d413      	bmi.n	800dc56 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800dc2e:	4b12      	ldr	r3, [pc, #72]	; (800dc78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	02db      	lsls	r3, r3, #11
 800dc34:	d413      	bmi.n	800dc5e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800dc36:	4b11      	ldr	r3, [pc, #68]	; (800dc7c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	05db      	lsls	r3, r3, #23
 800dc3c:	d413      	bmi.n	800dc66 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800dc3e:	4b0e      	ldr	r3, [pc, #56]	; (800dc78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	04db      	lsls	r3, r3, #19
 800dc44:	d413      	bmi.n	800dc6e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800dc46:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	01db      	lsls	r3, r3, #7
 800dc4c:	d506      	bpl.n	800dc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800dc4e:	480c      	ldr	r0, [pc, #48]	; (800dc80 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800dc50:	f003 fa80 	bl	8011154 <HAL_DMA_IRQHandler>
	}
}
 800dc54:	e002      	b.n	800dc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800dc56:	2003      	movs	r0, #3
 800dc58:	f7f9 fd92 	bl	8007780 <DMA_IRQHandler>
}
 800dc5c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800dc5e:	2004      	movs	r0, #4
 800dc60:	f7f9 fd8e 	bl	8007780 <DMA_IRQHandler>
 800dc64:	e7fa      	b.n	800dc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800dc66:	2006      	movs	r0, #6
 800dc68:	f7f9 fd8a 	bl	8007780 <DMA_IRQHandler>
 800dc6c:	e7f6      	b.n	800dc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800dc6e:	4805      	ldr	r0, [pc, #20]	; (800dc84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800dc70:	f003 fa70 	bl	8011154 <HAL_DMA_IRQHandler>
 800dc74:	e7f2      	b.n	800dc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800dc76:	46c0      	nop			; (mov r8, r8)
 800dc78:	40020000 	.word	0x40020000
 800dc7c:	40020400 	.word	0x40020400
 800dc80:	20001238 	.word	0x20001238
 800dc84:	20001200 	.word	0x20001200

0800dc88 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800dc92:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dc98:	f7fe ff46 	bl	800cb28 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dc9c:	0020      	movs	r0, r4
 800dc9e:	f7fe f8bf 	bl	800be20 <GetPort>
 800dca2:	0080      	lsls	r0, r0, #2
 800dca4:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <HAL_UART_TxCpltCallback+0x2c>)
 800dca6:	58c0      	ldr	r0, [r0, r3]
 800dca8:	a901      	add	r1, sp, #4
 800dcaa:	f001 f889 	bl	800edc0 <xQueueGiveFromISR>
}
 800dcae:	b002      	add	sp, #8
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	46c0      	nop			; (mov r8, r8)
 800dcb4:	20006300 	.word	0x20006300

0800dcb8 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800dcbc:	2369      	movs	r3, #105	; 0x69
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800dcc2:	f7fe f8ad 	bl	800be20 <GetPort>
	if (portStatus[port] == STREAM) {
 800dcc6:	4b0c      	ldr	r3, [pc, #48]	; (800dcf8 <HAL_UART_ErrorCallback+0x40>)
 800dcc8:	5c1b      	ldrb	r3, [r3, r0]
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d005      	beq.n	800dcda <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dcce:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <HAL_UART_ErrorCallback+0x44>)
 800dcd0:	1818      	adds	r0, r3, r0
 800dcd2:	3801      	subs	r0, #1
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	7003      	strb	r3, [r0, #0]
	}	
}
 800dcd8:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800dcda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	b292      	uxth	r2, r2
 800dce2:	3801      	subs	r0, #1
 800dce4:	0080      	lsls	r0, r0, #2
 800dce6:	4b06      	ldr	r3, [pc, #24]	; (800dd00 <HAL_UART_ErrorCallback+0x48>)
 800dce8:	58c3      	ldr	r3, [r0, r3]
 800dcea:	6819      	ldr	r1, [r3, #0]
 800dcec:	3128      	adds	r1, #40	; 0x28
 800dcee:	0020      	movs	r0, r4
 800dcf0:	f005 fa3e 	bl	8013170 <HAL_UART_Receive_DMA>
 800dcf4:	e7f0      	b.n	800dcd8 <HAL_UART_ErrorCallback+0x20>
 800dcf6:	46c0      	nop			; (mov r8, r8)
 800dcf8:	20000878 	.word	0x20000878
 800dcfc:	20000a48 	.word	0x20000a48
 800dd00:	20000cd4 	.word	0x20000cd4

0800dd04 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd04:	b510      	push	{r4, lr}
 800dd06:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800dd08:	f7fe f88a 	bl	800be20 <GetPort>
 800dd0c:	4b13      	ldr	r3, [pc, #76]	; (800dd5c <HAL_UART_RxCpltCallback+0x58>)
 800dd0e:	5c1b      	ldrb	r3, [r3, r0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d006      	beq.n	800dd22 <HAL_UART_RxCpltCallback+0x1e>
 800dd14:	0020      	movs	r0, r4
 800dd16:	f7fe f883 	bl	800be20 <GetPort>
 800dd1a:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <HAL_UART_RxCpltCallback+0x58>)
 800dd1c:	5c1b      	ldrb	r3, [r3, r0]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d11a      	bne.n	800dd58 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800dd22:	0020      	movs	r0, r4
 800dd24:	f7fe f87c 	bl	800be20 <GetPort>
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <HAL_UART_RxCpltCallback+0x5c>)
 800dd2a:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800dd2c:	0020      	movs	r0, r4
 800dd2e:	f7fe f877 	bl	800be20 <GetPort>
 800dd32:	4b0a      	ldr	r3, [pc, #40]	; (800dd5c <HAL_UART_RxCpltCallback+0x58>)
 800dd34:	2205      	movs	r2, #5
 800dd36:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800dd38:	0020      	movs	r0, r4
 800dd3a:	f7fe f871 	bl	800be20 <GetPort>
 800dd3e:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <HAL_UART_RxCpltCallback+0x60>)
 800dd40:	1818      	adds	r0, r3, r0
 800dd42:	3801      	subs	r0, #1
 800dd44:	2300      	movs	r3, #0
 800dd46:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800dd48:	0020      	movs	r0, r4
 800dd4a:	f7fe f869 	bl	800be20 <GetPort>
 800dd4e:	4b06      	ldr	r3, [pc, #24]	; (800dd68 <HAL_UART_RxCpltCallback+0x64>)
 800dd50:	1818      	adds	r0, r3, r0
 800dd52:	3801      	subs	r0, #1
 800dd54:	2301      	movs	r3, #1
 800dd56:	7003      	strb	r3, [r0, #0]
	}

}
 800dd58:	bd10      	pop	{r4, pc}
 800dd5a:	46c0      	nop			; (mov r8, r8)
 800dd5c:	20000878 	.word	0x20000878
 800dd60:	200061fc 	.word	0x200061fc
 800dd64:	20000c8c 	.word	0x20000c8c
 800dd68:	20000a48 	.word	0x20000a48

0800dd6c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800dd6c:	b672      	cpsid	i
 800dd6e:	e7fe      	b.n	800dd6e <vApplicationStackOverflowHook+0x2>

0800dd70 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800dd70:	b672      	cpsid	i
 800dd72:	e7fe      	b.n	800dd72 <vApplicationMallocFailedHook+0x2>

0800dd74 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd76:	46ce      	mov	lr, r9
 800dd78:	b500      	push	{lr}
 800dd7a:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800dd7c:	ac05      	add	r4, sp, #20
 800dd7e:	4b34      	ldr	r3, [pc, #208]	; (800de50 <RTC_CalendarConfig+0xdc>)
 800dd80:	0022      	movs	r2, r4
 800dd82:	cb43      	ldmia	r3!, {r0, r1, r6}
 800dd84:	c243      	stmia	r2!, {r0, r1, r6}
 800dd86:	aa02      	add	r2, sp, #8
 800dd88:	4b32      	ldr	r3, [pc, #200]	; (800de54 <RTC_CalendarConfig+0xe0>)
 800dd8a:	cb03      	ldmia	r3!, {r0, r1}
 800dd8c:	c203      	stmia	r2!, {r0, r1}
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800dd92:	2015      	movs	r0, #21
 800dd94:	ab02      	add	r3, sp, #8
 800dd96:	469c      	mov	ip, r3
 800dd98:	4460      	add	r0, ip
 800dd9a:	f005 fe88 	bl	8013aae <atoi>
 800dd9e:	b2c3      	uxtb	r3, r0
 800dda0:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800dda2:	2600      	movs	r6, #0
 800dda4:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800dda6:	a806      	add	r0, sp, #24
 800dda8:	f005 fe81 	bl	8013aae <atoi>
 800ddac:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800ddae:	70e6      	strb	r6, [r4, #3]
 800ddb0:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800ddb2:	4e29      	ldr	r6, [pc, #164]	; (800de58 <RTC_CalendarConfig+0xe4>)
 800ddb4:	e002      	b.n	800ddbc <RTC_CalendarConfig+0x48>
 800ddb6:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800ddb8:	2c0d      	cmp	r4, #13
 800ddba:	d009      	beq.n	800ddd0 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800ddbc:	00a3      	lsls	r3, r4, #2
 800ddbe:	3b04      	subs	r3, #4
 800ddc0:	58f1      	ldr	r1, [r6, r3]
 800ddc2:	a805      	add	r0, sp, #20
 800ddc4:	f7f2 f99e 	bl	8000104 <strcmp>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d1f4      	bne.n	800ddb6 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800ddcc:	b2e5      	uxtb	r5, r4
 800ddce:	e7f2      	b.n	800ddb6 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ddd0:	ab02      	add	r3, sp, #8
 800ddd2:	1d98      	adds	r0, r3, #6
 800ddd4:	f005 fe6b 	bl	8013aae <atoi>
 800ddd8:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800ddda:	ac05      	add	r4, sp, #20
 800dddc:	2600      	movs	r6, #0
 800ddde:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800dde0:	ab02      	add	r3, sp, #8
 800dde2:	1cd8      	adds	r0, r3, #3
 800dde4:	f005 fe63 	bl	8013aae <atoi>
 800dde8:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800ddea:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800ddec:	a802      	add	r0, sp, #8
 800ddee:	f005 fe5e 	bl	8013aae <atoi>
 800ddf2:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800ddf4:	a90d      	add	r1, sp, #52	; 0x34
 800ddf6:	464b      	mov	r3, r9
 800ddf8:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800ddfa:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800ddfc:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ddfe:	2301      	movs	r3, #1
 800de00:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800de02:	2200      	movs	r2, #0
 800de04:	4815      	ldr	r0, [pc, #84]	; (800de5c <RTC_CalendarConfig+0xe8>)
 800de06:	f004 feff 	bl	8012c08 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800de0a:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d119      	bne.n	800de44 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800de10:	a908      	add	r1, sp, #32
 800de12:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800de14:	9b01      	ldr	r3, [sp, #4]
 800de16:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800de18:	9b00      	ldr	r3, [sp, #0]
 800de1a:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800de1c:	2300      	movs	r3, #0
 800de1e:	720b      	strb	r3, [r1, #8]
 800de20:	4a0f      	ldr	r2, [pc, #60]	; (800de60 <RTC_CalendarConfig+0xec>)
 800de22:	3018      	adds	r0, #24
 800de24:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800de26:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800de28:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800de2a:	2200      	movs	r2, #0
 800de2c:	480b      	ldr	r0, [pc, #44]	; (800de5c <RTC_CalendarConfig+0xe8>)
 800de2e:	f004 fe65 	bl	8012afc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800de32:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800de34:	2800      	cmp	r0, #0
 800de36:	d105      	bne.n	800de44 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800de38:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <RTC_CalendarConfig+0xf0>)
 800de3a:	2101      	movs	r1, #1
 800de3c:	4807      	ldr	r0, [pc, #28]	; (800de5c <RTC_CalendarConfig+0xe8>)
 800de3e:	f004 ffa7 	bl	8012d90 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	0018      	movs	r0, r3
 800de46:	b00e      	add	sp, #56	; 0x38
 800de48:	bc04      	pop	{r2}
 800de4a:	4691      	mov	r9, r2
 800de4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de4e:	46c0      	nop			; (mov r8, r8)
 800de50:	08017690 	.word	0x08017690
 800de54:	080176b4 	.word	0x080176b4
 800de58:	20000034 	.word	0x20000034
 800de5c:	20006674 	.word	0x20006674
 800de60:	2000627c 	.word	0x2000627c
 800de64:	000032f2 	.word	0x000032f2

0800de68 <RTC_Init>:
{
 800de68:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800de6a:	4a1c      	ldr	r2, [pc, #112]	; (800dedc <RTC_Init+0x74>)
 800de6c:	6a11      	ldr	r1, [r2, #32]
 800de6e:	2380      	movs	r3, #128	; 0x80
 800de70:	021b      	lsls	r3, r3, #8
 800de72:	430b      	orrs	r3, r1
 800de74:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800de76:	481a      	ldr	r0, [pc, #104]	; (800dee0 <RTC_Init+0x78>)
 800de78:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <RTC_Init+0x7c>)
 800de7a:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800de7c:	2300      	movs	r3, #0
 800de7e:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800de80:	227c      	movs	r2, #124	; 0x7c
 800de82:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800de84:	4a18      	ldr	r2, [pc, #96]	; (800dee8 <RTC_Init+0x80>)
 800de86:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800de88:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800de8a:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800de8c:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800de8e:	f004 fdd7 	bl	8012a40 <HAL_RTC_Init>
 800de92:	23ff      	movs	r3, #255	; 0xff
 800de94:	2800      	cmp	r0, #0
 800de96:	d11e      	bne.n	800ded6 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800de98:	2101      	movs	r1, #1
 800de9a:	4811      	ldr	r0, [pc, #68]	; (800dee0 <RTC_Init+0x78>)
 800de9c:	f004 ff7e 	bl	8012d9c <HAL_RTCEx_BKUPRead>
 800dea0:	4b12      	ldr	r3, [pc, #72]	; (800deec <RTC_Init+0x84>)
 800dea2:	4298      	cmp	r0, r3
 800dea4:	d10e      	bne.n	800dec4 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <RTC_Init+0x74>)
 800dea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deaa:	011b      	lsls	r3, r3, #4
 800deac:	d502      	bpl.n	800deb4 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800deae:	4b10      	ldr	r3, [pc, #64]	; (800def0 <RTC_Init+0x88>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <RTC_Init+0x74>)
 800deb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb8:	015b      	lsls	r3, r3, #5
 800deba:	d505      	bpl.n	800dec8 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800debc:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <RTC_Init+0x88>)
 800debe:	2201      	movs	r2, #1
 800dec0:	701a      	strb	r2, [r3, #0]
 800dec2:	e001      	b.n	800dec8 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800dec4:	f7ff ff56 	bl	800dd74 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800dec8:	4a04      	ldr	r2, [pc, #16]	; (800dedc <RTC_Init+0x74>)
 800deca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	045b      	lsls	r3, r3, #17
 800ded0:	430b      	orrs	r3, r1
 800ded2:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	0018      	movs	r0, r3
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	40021000 	.word	0x40021000
 800dee0:	20006674 	.word	0x20006674
 800dee4:	40002800 	.word	0x40002800
 800dee8:	000007cf 	.word	0x000007cf
 800deec:	000032f2 	.word	0x000032f2
 800def0:	200013c0 	.word	0x200013c0

0800def4 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800def4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800def6:	46c6      	mov	lr, r8
 800def8:	b500      	push	{lr}
 800defa:	b086      	sub	sp, #24
 800defc:	ac0c      	add	r4, sp, #48	; 0x30
 800defe:	7827      	ldrb	r7, [r4, #0]
 800df00:	ac0d      	add	r4, sp, #52	; 0x34
 800df02:	7824      	ldrb	r4, [r4, #0]
 800df04:	46a0      	mov	r8, r4
 800df06:	ac0e      	add	r4, sp, #56	; 0x38
 800df08:	7825      	ldrb	r5, [r4, #0]
 800df0a:	ac0f      	add	r4, sp, #60	; 0x3c
 800df0c:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800df0e:	ac05      	add	r4, sp, #20
 800df10:	3230      	adds	r2, #48	; 0x30
 800df12:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800df14:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800df16:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800df18:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800df1a:	2200      	movs	r2, #0
 800df1c:	0021      	movs	r1, r4
 800df1e:	481f      	ldr	r0, [pc, #124]	; (800df9c <BOS_CalendarConfig+0xa8>)
 800df20:	f004 fe72 	bl	8012c08 <HAL_RTC_SetDate>
 800df24:	2800      	cmp	r0, #0
 800df26:	d136      	bne.n	800df96 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800df28:	466b      	mov	r3, sp
 800df2a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800df2c:	4642      	mov	r2, r8
 800df2e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800df30:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800df32:	2300      	movs	r3, #0
 800df34:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800df36:	2e01      	cmp	r6, #1
 800df38:	d020      	beq.n	800df7c <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800df3a:	2e02      	cmp	r6, #2
 800df3c:	d024      	beq.n	800df88 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800df3e:	4b18      	ldr	r3, [pc, #96]	; (800dfa0 <BOS_CalendarConfig+0xac>)
 800df40:	2218      	movs	r2, #24
 800df42:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800df44:	2200      	movs	r2, #0
 800df46:	4669      	mov	r1, sp
 800df48:	4814      	ldr	r0, [pc, #80]	; (800df9c <BOS_CalendarConfig+0xa8>)
 800df4a:	f004 fdd7 	bl	8012afc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800df4e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800df50:	2800      	cmp	r0, #0
 800df52:	d10e      	bne.n	800df72 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800df54:	4a12      	ldr	r2, [pc, #72]	; (800dfa0 <BOS_CalendarConfig+0xac>)
 800df56:	7b53      	ldrb	r3, [r2, #13]
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	7911      	ldrb	r1, [r2, #4]
 800df5c:	4319      	orrs	r1, r3
 800df5e:	308d      	adds	r0, #141	; 0x8d
 800df60:	0040      	lsls	r0, r0, #1
 800df62:	f7f9 fcf1 	bl	8007948 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800df66:	4a0f      	ldr	r2, [pc, #60]	; (800dfa4 <BOS_CalendarConfig+0xb0>)
 800df68:	2101      	movs	r1, #1
 800df6a:	480c      	ldr	r0, [pc, #48]	; (800df9c <BOS_CalendarConfig+0xa8>)
 800df6c:	f004 ff10 	bl	8012d90 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	0018      	movs	r0, r3
 800df74:	b006      	add	sp, #24
 800df76:	bc04      	pop	{r2}
 800df78:	4690      	mov	r8, r2
 800df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800df7c:	466a      	mov	r2, sp
 800df7e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <BOS_CalendarConfig+0xac>)
 800df82:	220c      	movs	r2, #12
 800df84:	735a      	strb	r2, [r3, #13]
 800df86:	e7dd      	b.n	800df44 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	466a      	mov	r2, sp
 800df8c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800df8e:	4b04      	ldr	r3, [pc, #16]	; (800dfa0 <BOS_CalendarConfig+0xac>)
 800df90:	220c      	movs	r2, #12
 800df92:	735a      	strb	r2, [r3, #13]
 800df94:	e7d6      	b.n	800df44 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800df96:	23ff      	movs	r3, #255	; 0xff
 800df98:	e7eb      	b.n	800df72 <BOS_CalendarConfig+0x7e>
 800df9a:	46c0      	nop			; (mov r8, r8)
 800df9c:	20006674 	.word	0x20006674
 800dfa0:	2000627c 	.word	0x2000627c
 800dfa4:	000032f2 	.word	0x000032f2

0800dfa8 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800dfa8:	b530      	push	{r4, r5, lr}
 800dfaa:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800dfac:	4d16      	ldr	r5, [pc, #88]	; (800e008 <GetTimeDate+0x60>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	a902      	add	r1, sp, #8
 800dfb2:	0028      	movs	r0, r5
 800dfb4:	f004 fea4 	bl	8012d00 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800dfb8:	ac07      	add	r4, sp, #28
 800dfba:	2200      	movs	r2, #0
 800dfbc:	0021      	movs	r1, r4
 800dfbe:	0028      	movs	r0, r5
 800dfc0:	f004 fec4 	bl	8012d4c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800dfc4:	4b11      	ldr	r3, [pc, #68]	; (800e00c <GetTimeDate+0x64>)
 800dfc6:	aa02      	add	r2, sp, #8
 800dfc8:	7a12      	ldrb	r2, [r2, #8]
 800dfca:	09d2      	lsrs	r2, r2, #7
 800dfcc:	3201      	adds	r2, #1
 800dfce:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800dfd0:	9a03      	ldr	r2, [sp, #12]
 800dfd2:	9201      	str	r2, [sp, #4]
 800dfd4:	0852      	lsrs	r2, r2, #1
 800dfd6:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800dfd8:	aa02      	add	r2, sp, #8
 800dfda:	7892      	ldrb	r2, [r2, #2]
 800dfdc:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800dfde:	aa02      	add	r2, sp, #8
 800dfe0:	7852      	ldrb	r2, [r2, #1]
 800dfe2:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800dfe4:	aa02      	add	r2, sp, #8
 800dfe6:	7812      	ldrb	r2, [r2, #0]
 800dfe8:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800dfea:	78a2      	ldrb	r2, [r4, #2]
 800dfec:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800dfee:	7862      	ldrb	r2, [r4, #1]
 800dff0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800dff2:	7822      	ldrb	r2, [r4, #0]
 800dff4:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800dff6:	78e2      	ldrb	r2, [r4, #3]
 800dff8:	21fa      	movs	r1, #250	; 0xfa
 800dffa:	00c9      	lsls	r1, r1, #3
 800dffc:	468c      	mov	ip, r1
 800dffe:	4462      	add	r2, ip
 800e000:	831a      	strh	r2, [r3, #24]
}
 800e002:	b009      	add	sp, #36	; 0x24
 800e004:	bd30      	pop	{r4, r5, pc}
 800e006:	46c0      	nop			; (mov r8, r8)
 800e008:	20006674 	.word	0x20006674
 800e00c:	2000627c 	.word	0x2000627c

0800e010 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e010:	b530      	push	{r4, r5, lr}
 800e012:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e014:	4a12      	ldr	r2, [pc, #72]	; (800e060 <TIM_USEC_Init+0x50>)
 800e016:	69d1      	ldr	r1, [r2, #28]
 800e018:	2080      	movs	r0, #128	; 0x80
 800e01a:	0040      	lsls	r0, r0, #1
 800e01c:	4301      	orrs	r1, r0
 800e01e:	61d1      	str	r1, [r2, #28]
 800e020:	69d3      	ldr	r3, [r2, #28]
 800e022:	4003      	ands	r3, r0
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e028:	4c0e      	ldr	r4, [pc, #56]	; (800e064 <TIM_USEC_Init+0x54>)
 800e02a:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <TIM_USEC_Init+0x58>)
 800e02c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e02e:	f004 fc1f 	bl	8012870 <HAL_RCC_GetPCLK1Freq>
 800e032:	490e      	ldr	r1, [pc, #56]	; (800e06c <TIM_USEC_Init+0x5c>)
 800e034:	f7f2 f882 	bl	800013c <__udivsi3>
 800e038:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e03a:	2500      	movs	r5, #0
 800e03c:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e03e:	4b0c      	ldr	r3, [pc, #48]	; (800e070 <TIM_USEC_Init+0x60>)
 800e040:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e042:	0020      	movs	r0, r4
 800e044:	f004 ff3a 	bl	8012ebc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e048:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e04a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e04c:	a902      	add	r1, sp, #8
 800e04e:	0020      	movs	r0, r4
 800e050:	f004 ff4e 	bl	8012ef0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e054:	0020      	movs	r0, r4
 800e056:	f004 fea8 	bl	8012daa <HAL_TIM_Base_Start>
}
 800e05a:	b005      	add	sp, #20
 800e05c:	bd30      	pop	{r4, r5, pc}
 800e05e:	46c0      	nop			; (mov r8, r8)
 800e060:	40021000 	.word	0x40021000
 800e064:	200066d0 	.word	0x200066d0
 800e068:	40002000 	.word	0x40002000
 800e06c:	000f4240 	.word	0x000f4240
 800e070:	0000ffff 	.word	0x0000ffff

0800e074 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e074:	b530      	push	{r4, r5, lr}
 800e076:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e078:	4a12      	ldr	r2, [pc, #72]	; (800e0c4 <TIM_MSEC_Init+0x50>)
 800e07a:	6991      	ldr	r1, [r2, #24]
 800e07c:	2080      	movs	r0, #128	; 0x80
 800e07e:	0240      	lsls	r0, r0, #9
 800e080:	4301      	orrs	r1, r0
 800e082:	6191      	str	r1, [r2, #24]
 800e084:	6993      	ldr	r3, [r2, #24]
 800e086:	4003      	ands	r3, r0
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e08c:	4c0e      	ldr	r4, [pc, #56]	; (800e0c8 <TIM_MSEC_Init+0x54>)
 800e08e:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <TIM_MSEC_Init+0x58>)
 800e090:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e092:	f004 fbed 	bl	8012870 <HAL_RCC_GetPCLK1Freq>
 800e096:	21fa      	movs	r1, #250	; 0xfa
 800e098:	0089      	lsls	r1, r1, #2
 800e09a:	f7f2 f84f 	bl	800013c <__udivsi3>
 800e09e:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0a0:	2500      	movs	r5, #0
 800e0a2:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <TIM_MSEC_Init+0x5c>)
 800e0a6:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	f004 ff07 	bl	8012ebc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0ae:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0b0:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e0b2:	a902      	add	r1, sp, #8
 800e0b4:	0020      	movs	r0, r4
 800e0b6:	f004 ff1b 	bl	8012ef0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e0ba:	0020      	movs	r0, r4
 800e0bc:	f004 fe75 	bl	8012daa <HAL_TIM_Base_Start>
}
 800e0c0:	b005      	add	sp, #20
 800e0c2:	bd30      	pop	{r4, r5, pc}
 800e0c4:	40021000 	.word	0x40021000
 800e0c8:	20006694 	.word	0x20006694
 800e0cc:	40014000 	.word	0x40014000
 800e0d0:	0000ffff 	.word	0x0000ffff

0800e0d4 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e0d8:	f002 f934 	bl	8010344 <vPortEnterCritical>
	
	if (Delay)
 800e0dc:	2c00      	cmp	r4, #0
 800e0de:	d006      	beq.n	800e0ee <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e0e0:	4b04      	ldr	r3, [pc, #16]	; (800e0f4 <StartMicroDelay+0x20>)
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e0e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e0e8:	1a5b      	subs	r3, r3, r1
 800e0ea:	42a3      	cmp	r3, r4
 800e0ec:	d9fb      	bls.n	800e0e6 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e0ee:	f002 f935 	bl	801035c <vPortExitCritical>
}
 800e0f2:	bd10      	pop	{r4, pc}
 800e0f4:	200066d0 	.word	0x200066d0

0800e0f8 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e0fc:	f002 f922 	bl	8010344 <vPortEnterCritical>
	
	if (Delay)
 800e100:	2c00      	cmp	r4, #0
 800e102:	d006      	beq.n	800e112 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <StartMilliDelay+0x20>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e10a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e10c:	1a5b      	subs	r3, r3, r1
 800e10e:	42a3      	cmp	r3, r4
 800e110:	d9fb      	bls.n	800e10a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e112:	f002 f923 	bl	801035c <vPortExitCritical>
}
 800e116:	bd10      	pop	{r4, pc}
 800e118:	20006694 	.word	0x20006694

0800e11c <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e11c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e11e:	4809      	ldr	r0, [pc, #36]	; (800e144 <MX_USART1_UART_Init+0x28>)
 800e120:	4b09      	ldr	r3, [pc, #36]	; (800e148 <MX_USART1_UART_Init+0x2c>)
 800e122:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e124:	23e1      	movs	r3, #225	; 0xe1
 800e126:	031b      	lsls	r3, r3, #12
 800e128:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e12a:	2300      	movs	r3, #0
 800e12c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e12e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e130:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e132:	220c      	movs	r2, #12
 800e134:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e136:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e138:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e13a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e13c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e13e:	f005 fb57 	bl	80137f0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e142:	bd10      	pop	{r4, pc}
 800e144:	20006464 	.word	0x20006464
 800e148:	40013800 	.word	0x40013800

0800e14c <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e14c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e14e:	4809      	ldr	r0, [pc, #36]	; (800e174 <MX_USART2_UART_Init+0x28>)
 800e150:	4b09      	ldr	r3, [pc, #36]	; (800e178 <MX_USART2_UART_Init+0x2c>)
 800e152:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e154:	23e1      	movs	r3, #225	; 0xe1
 800e156:	031b      	lsls	r3, r3, #12
 800e158:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e15a:	2300      	movs	r3, #0
 800e15c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e15e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e160:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e162:	220c      	movs	r2, #12
 800e164:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e166:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e168:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e16a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e16c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e16e:	f005 fb3f 	bl	80137f0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800e172:	bd10      	pop	{r4, pc}
 800e174:	200065d4 	.word	0x200065d4
 800e178:	40004400 	.word	0x40004400

0800e17c <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e17c:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e17e:	4809      	ldr	r0, [pc, #36]	; (800e1a4 <MX_USART3_UART_Init+0x28>)
 800e180:	4b09      	ldr	r3, [pc, #36]	; (800e1a8 <MX_USART3_UART_Init+0x2c>)
 800e182:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e184:	23e1      	movs	r3, #225	; 0xe1
 800e186:	031b      	lsls	r3, r3, #12
 800e188:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e18a:	2300      	movs	r3, #0
 800e18c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e18e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e190:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e192:	220c      	movs	r2, #12
 800e194:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e196:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e198:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e19a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e19c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e19e:	f005 fb27 	bl	80137f0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e1a2:	bd10      	pop	{r4, pc}
 800e1a4:	200063b4 	.word	0x200063b4
 800e1a8:	40004800 	.word	0x40004800

0800e1ac <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e1ac:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e1ae:	4809      	ldr	r0, [pc, #36]	; (800e1d4 <MX_USART4_UART_Init+0x28>)
 800e1b0:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <MX_USART4_UART_Init+0x2c>)
 800e1b2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e1b4:	23e1      	movs	r3, #225	; 0xe1
 800e1b6:	031b      	lsls	r3, r3, #12
 800e1b8:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e1be:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e1c0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e1c2:	220c      	movs	r2, #12
 800e1c4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1c6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e1c8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e1ca:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e1cc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e1ce:	f005 fb0f 	bl	80137f0 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e1d2:	bd10      	pop	{r4, pc}
 800e1d4:	20006560 	.word	0x20006560
 800e1d8:	40004c00 	.word	0x40004c00

0800e1dc <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e1dc:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e1de:	4809      	ldr	r0, [pc, #36]	; (800e204 <MX_USART6_UART_Init+0x28>)
 800e1e0:	4b09      	ldr	r3, [pc, #36]	; (800e208 <MX_USART6_UART_Init+0x2c>)
 800e1e2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e1e4:	23e1      	movs	r3, #225	; 0xe1
 800e1e6:	031b      	lsls	r3, r3, #12
 800e1e8:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e1ee:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e1f0:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e1f2:	220c      	movs	r2, #12
 800e1f4:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1f6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e1f8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e1fa:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e1fc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e1fe:	f005 faf7 	bl	80137f0 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e202:	bd10      	pop	{r4, pc}
 800e204:	200064e8 	.word	0x200064e8
 800e208:	40011400 	.word	0x40011400

0800e20c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20e:	46ce      	mov	lr, r9
 800e210:	b500      	push	{lr}
 800e212:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART2)
 800e214:	6803      	ldr	r3, [r0, #0]
 800e216:	4a49      	ldr	r2, [pc, #292]	; (800e33c <HAL_UART_MspInit+0x130>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d009      	beq.n	800e230 <HAL_UART_MspInit+0x24>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e21c:	4a48      	ldr	r2, [pc, #288]	; (800e340 <HAL_UART_MspInit+0x134>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d032      	beq.n	800e288 <HAL_UART_MspInit+0x7c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e222:	4a48      	ldr	r2, [pc, #288]	; (800e344 <HAL_UART_MspInit+0x138>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d05c      	beq.n	800e2e2 <HAL_UART_MspInit+0xd6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e228:	b008      	add	sp, #32
 800e22a:	bc04      	pop	{r2}
 800e22c:	4691      	mov	r9, r2
 800e22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800e230:	4a45      	ldr	r2, [pc, #276]	; (800e348 <HAL_UART_MspInit+0x13c>)
 800e232:	69d1      	ldr	r1, [r2, #28]
 800e234:	2080      	movs	r0, #128	; 0x80
 800e236:	0280      	lsls	r0, r0, #10
 800e238:	4301      	orrs	r1, r0
 800e23a:	61d1      	str	r1, [r2, #28]
 800e23c:	69d3      	ldr	r3, [r2, #28]
 800e23e:	4003      	ands	r3, r0
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e244:	2304      	movs	r3, #4
 800e246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e248:	2702      	movs	r7, #2
 800e24a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e24c:	2401      	movs	r4, #1
 800e24e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e250:	2603      	movs	r6, #3
 800e252:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e254:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e256:	2590      	movs	r5, #144	; 0x90
 800e258:	05ed      	lsls	r5, r5, #23
 800e25a:	a903      	add	r1, sp, #12
 800e25c:	0028      	movs	r0, r5
 800e25e:	f003 fd1d 	bl	8011c9c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e262:	2308      	movs	r3, #8
 800e264:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e266:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e268:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e26a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;
 800e26c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e26e:	a903      	add	r1, sp, #12
 800e270:	0028      	movs	r0, r5
 800e272:	f003 fd13 	bl	8011c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e276:	2200      	movs	r2, #0
 800e278:	2101      	movs	r1, #1
 800e27a:	201c      	movs	r0, #28
 800e27c:	f002 fd44 	bl	8010d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e280:	201c      	movs	r0, #28
 800e282:	f002 fd75 	bl	8010d70 <HAL_NVIC_EnableIRQ>
 800e286:	e7cf      	b.n	800e228 <HAL_UART_MspInit+0x1c>
    __USART3_CLK_ENABLE();
 800e288:	4a2f      	ldr	r2, [pc, #188]	; (800e348 <HAL_UART_MspInit+0x13c>)
 800e28a:	69d1      	ldr	r1, [r2, #28]
 800e28c:	2080      	movs	r0, #128	; 0x80
 800e28e:	02c0      	lsls	r0, r0, #11
 800e290:	4301      	orrs	r1, r0
 800e292:	61d1      	str	r1, [r2, #28]
 800e294:	69d3      	ldr	r3, [r2, #28]
 800e296:	4003      	ands	r3, r0
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e29c:	2380      	movs	r3, #128	; 0x80
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2a2:	2402      	movs	r4, #2
 800e2a4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2a6:	2701      	movs	r7, #1
 800e2a8:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e2aa:	2603      	movs	r6, #3
 800e2ac:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e2ae:	2504      	movs	r5, #4
 800e2b0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e2b2:	a903      	add	r1, sp, #12
 800e2b4:	4825      	ldr	r0, [pc, #148]	; (800e34c <HAL_UART_MspInit+0x140>)
 800e2b6:	f003 fcf1 	bl	8011c9c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e2ba:	2380      	movs	r3, #128	; 0x80
 800e2bc:	011b      	lsls	r3, r3, #4
 800e2be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2c0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2c2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e2c4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;
 800e2c6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e2c8:	a903      	add	r1, sp, #12
 800e2ca:	4820      	ldr	r0, [pc, #128]	; (800e34c <HAL_UART_MspInit+0x140>)
 800e2cc:	f003 fce6 	bl	8011c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	201d      	movs	r0, #29
 800e2d6:	f002 fd17 	bl	8010d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e2da:	201d      	movs	r0, #29
 800e2dc:	f002 fd48 	bl	8010d70 <HAL_NVIC_EnableIRQ>
 800e2e0:	e7a2      	b.n	800e228 <HAL_UART_MspInit+0x1c>
    __USART6_CLK_ENABLE();
 800e2e2:	4b19      	ldr	r3, [pc, #100]	; (800e348 <HAL_UART_MspInit+0x13c>)
 800e2e4:	699a      	ldr	r2, [r3, #24]
 800e2e6:	2420      	movs	r4, #32
 800e2e8:	4322      	orrs	r2, r4
 800e2ea:	619a      	str	r2, [r3, #24]
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	4023      	ands	r3, r4
 800e2f0:	9302      	str	r3, [sp, #8]
 800e2f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e2f4:	2310      	movs	r3, #16
 800e2f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2f8:	3b0e      	subs	r3, #14
 800e2fa:	4699      	mov	r9, r3
 800e2fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2fe:	2501      	movs	r5, #1
 800e300:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e302:	2703      	movs	r7, #3
 800e304:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e306:	2605      	movs	r6, #5
 800e308:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e30a:	a903      	add	r1, sp, #12
 800e30c:	2090      	movs	r0, #144	; 0x90
 800e30e:	05c0      	lsls	r0, r0, #23
 800e310:	f003 fcc4 	bl	8011c9c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e314:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e316:	464b      	mov	r3, r9
 800e318:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e31a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e31c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;
 800e31e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e320:	a903      	add	r1, sp, #12
 800e322:	2090      	movs	r0, #144	; 0x90
 800e324:	05c0      	lsls	r0, r0, #23
 800e326:	f003 fcb9 	bl	8011c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e32a:	2200      	movs	r2, #0
 800e32c:	2101      	movs	r1, #1
 800e32e:	201d      	movs	r0, #29
 800e330:	f002 fcea 	bl	8010d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e334:	201d      	movs	r0, #29
 800e336:	f002 fd1b 	bl	8010d70 <HAL_NVIC_EnableIRQ>
}
 800e33a:	e775      	b.n	800e228 <HAL_UART_MspInit+0x1c>
 800e33c:	40004400 	.word	0x40004400
 800e340:	40004800 	.word	0x40004800
 800e344:	40011400 	.word	0x40011400
 800e348:	40021000 	.word	0x40021000
 800e34c:	48000400 	.word	0x48000400

0800e350 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e350:	2802      	cmp	r0, #2
 800e352:	d005      	beq.n	800e360 <GetUart+0x10>
 800e354:	2803      	cmp	r0, #3
 800e356:	d005      	beq.n	800e364 <GetUart+0x14>
 800e358:	2801      	cmp	r0, #1
 800e35a:	d005      	beq.n	800e368 <GetUart+0x18>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e35c:	2000      	movs	r0, #0
 800e35e:	e000      	b.n	800e362 <GetUart+0x12>
			return P2uart;
 800e360:	4802      	ldr	r0, [pc, #8]	; (800e36c <GetUart+0x1c>)
	}		
}
 800e362:	4770      	bx	lr
			return P3uart;
 800e364:	4802      	ldr	r0, [pc, #8]	; (800e370 <GetUart+0x20>)
 800e366:	e7fc      	b.n	800e362 <GetUart+0x12>
			return P1uart;	
 800e368:	4802      	ldr	r0, [pc, #8]	; (800e374 <GetUart+0x24>)
 800e36a:	e7fa      	b.n	800e362 <GetUart+0x12>
 800e36c:	200064e8 	.word	0x200064e8
 800e370:	200063b4 	.word	0x200063b4
 800e374:	200065d4 	.word	0x200065d4

0800e378 <writePxMutex>:
{
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	b083      	sub	sp, #12
 800e37c:	0005      	movs	r5, r0
 800e37e:	9100      	str	r1, [sp, #0]
 800e380:	0017      	movs	r7, r2
 800e382:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e384:	f7ff ffe4 	bl	800e350 <GetUart>
 800e388:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e38a:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d016      	beq.n	800e3be <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e390:	00ab      	lsls	r3, r5, #2
 800e392:	4a0c      	ldr	r2, [pc, #48]	; (800e3c4 <writePxMutex+0x4c>)
 800e394:	5898      	ldr	r0, [r3, r2]
 800e396:	9901      	ldr	r1, [sp, #4]
 800e398:	f000 f93a 	bl	800e610 <osSemaphoreWait>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d10e      	bne.n	800e3be <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e3a0:	9b08      	ldr	r3, [sp, #32]
 800e3a2:	003a      	movs	r2, r7
 800e3a4:	9900      	ldr	r1, [sp, #0]
 800e3a6:	0020      	movs	r0, r4
 800e3a8:	f005 f97c 	bl	80136a4 <HAL_UART_Transmit>
 800e3ac:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e3ae:	d001      	beq.n	800e3b4 <writePxMutex+0x3c>
 800e3b0:	2803      	cmp	r0, #3
 800e3b2:	d1f5      	bne.n	800e3a0 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e3b4:	00ad      	lsls	r5, r5, #2
 800e3b6:	4b03      	ldr	r3, [pc, #12]	; (800e3c4 <writePxMutex+0x4c>)
 800e3b8:	58e8      	ldr	r0, [r5, r3]
 800e3ba:	f000 f955 	bl	800e668 <osSemaphoreRelease>
}
 800e3be:	0030      	movs	r0, r6
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c4:	20006300 	.word	0x20006300

0800e3c8 <writePxITMutex>:
{
 800e3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	0004      	movs	r4, r0
 800e3ce:	9101      	str	r1, [sp, #4]
 800e3d0:	0017      	movs	r7, r2
 800e3d2:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e3d4:	f7ff ffbc 	bl	800e350 <GetUart>
 800e3d8:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e3da:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d008      	beq.n	800e3f2 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3e0:	00a4      	lsls	r4, r4, #2
 800e3e2:	4b09      	ldr	r3, [pc, #36]	; (800e408 <writePxITMutex+0x40>)
 800e3e4:	58e0      	ldr	r0, [r4, r3]
 800e3e6:	0029      	movs	r1, r5
 800e3e8:	f000 f912 	bl	800e610 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e3ec:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d002      	beq.n	800e3f8 <writePxITMutex+0x30>
}
 800e3f2:	0018      	movs	r0, r3
 800e3f4:	b003      	add	sp, #12
 800e3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e3f8:	003a      	movs	r2, r7
 800e3fa:	9901      	ldr	r1, [sp, #4]
 800e3fc:	0030      	movs	r0, r6
 800e3fe:	f004 fdbb 	bl	8012f78 <HAL_UART_Transmit_IT>
 800e402:	0003      	movs	r3, r0
 800e404:	e7f5      	b.n	800e3f2 <writePxITMutex+0x2a>
 800e406:	46c0      	nop			; (mov r8, r8)
 800e408:	20006300 	.word	0x20006300

0800e40c <writePxDMAMutex>:
{
 800e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e40e:	b083      	sub	sp, #12
 800e410:	0004      	movs	r4, r0
 800e412:	000f      	movs	r7, r1
 800e414:	9201      	str	r2, [sp, #4]
 800e416:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e418:	f7ff ff9a 	bl	800e350 <GetUart>
 800e41c:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e41e:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e420:	2800      	cmp	r0, #0
 800e422:	d008      	beq.n	800e436 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e424:	00a4      	lsls	r4, r4, #2
 800e426:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <writePxDMAMutex+0x44>)
 800e428:	58e0      	ldr	r0, [r4, r3]
 800e42a:	0031      	movs	r1, r6
 800e42c:	f000 f8f0 	bl	800e610 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e430:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e432:	2800      	cmp	r0, #0
 800e434:	d002      	beq.n	800e43c <writePxDMAMutex+0x30>
}
 800e436:	0018      	movs	r0, r3
 800e438:	b003      	add	sp, #12
 800e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e43c:	0028      	movs	r0, r5
 800e43e:	f7ff fa3f 	bl	800d8c0 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e442:	9a01      	ldr	r2, [sp, #4]
 800e444:	0039      	movs	r1, r7
 800e446:	0028      	movs	r0, r5
 800e448:	f004 fe42 	bl	80130d0 <HAL_UART_Transmit_DMA>
 800e44c:	0003      	movs	r3, r0
 800e44e:	e7f2      	b.n	800e436 <writePxDMAMutex+0x2a>
 800e450:	20006300 	.word	0x20006300

0800e454 <UpdateBaudrate>:
{
 800e454:	b510      	push	{r4, lr}
 800e456:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e458:	f7ff ff7a 	bl	800e350 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e45c:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e45e:	f005 f9c7 	bl	80137f0 <HAL_UART_Init>
}
 800e462:	2000      	movs	r0, #0
 800e464:	bd10      	pop	{r4, pc}
	...

0800e468 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e46c:	d003      	beq.n	800e476 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e46e:	2901      	cmp	r1, #1
 800e470:	d002      	beq.n	800e478 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e472:	2900      	cmp	r1, #0
 800e474:	d016      	beq.n	800e4a4 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e476:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e478:	f7fd fcd2 	bl	800be20 <GetPort>
 800e47c:	4b14      	ldr	r3, [pc, #80]	; (800e4d0 <SwapUartPins+0x68>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	3b01      	subs	r3, #1
 800e482:	4d14      	ldr	r5, [pc, #80]	; (800e4d4 <SwapUartPins+0x6c>)
 800e484:	005b      	lsls	r3, r3, #1
 800e486:	3801      	subs	r0, #1
 800e488:	2180      	movs	r1, #128	; 0x80
 800e48a:	0209      	lsls	r1, r1, #8
 800e48c:	000a      	movs	r2, r1
 800e48e:	4102      	asrs	r2, r0
 800e490:	5b58      	ldrh	r0, [r3, r5]
 800e492:	4302      	orrs	r2, r0
 800e494:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e496:	2308      	movs	r3, #8
 800e498:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e49a:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e49c:	0020      	movs	r0, r4
 800e49e:	f005 f9a7 	bl	80137f0 <HAL_UART_Init>
 800e4a2:	e7e8      	b.n	800e476 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e4a4:	f7fd fcbc 	bl	800be20 <GetPort>
 800e4a8:	4b09      	ldr	r3, [pc, #36]	; (800e4d0 <SwapUartPins+0x68>)
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	4d09      	ldr	r5, [pc, #36]	; (800e4d4 <SwapUartPins+0x6c>)
 800e4b0:	005b      	lsls	r3, r3, #1
 800e4b2:	3801      	subs	r0, #1
 800e4b4:	2180      	movs	r1, #128	; 0x80
 800e4b6:	0209      	lsls	r1, r1, #8
 800e4b8:	4101      	asrs	r1, r0
 800e4ba:	5b5a      	ldrh	r2, [r3, r5]
 800e4bc:	438a      	bics	r2, r1
 800e4be:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e4c0:	2308      	movs	r3, #8
 800e4c2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e4c8:	0020      	movs	r0, r4
 800e4ca:	f005 f991 	bl	80137f0 <HAL_UART_Init>
}
 800e4ce:	e7d2      	b.n	800e476 <SwapUartPins+0xe>
 800e4d0:	2000080e 	.word	0x2000080e
 800e4d4:	2000670c 	.word	0x2000670c

0800e4d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e4d8:	4816      	ldr	r0, [pc, #88]	; (800e534 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e4da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e4dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e4de:	e003      	b.n	800e4e8 <LoopCopyDataInit>

0800e4e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e4e0:	4b15      	ldr	r3, [pc, #84]	; (800e538 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e4e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e4e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e4e6:	3104      	adds	r1, #4

0800e4e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e4e8:	4814      	ldr	r0, [pc, #80]	; (800e53c <LoopForever+0xc>)
  ldr r3, =_edata
 800e4ea:	4b15      	ldr	r3, [pc, #84]	; (800e540 <LoopForever+0x10>)
  adds r2, r0, r1
 800e4ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e4ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e4f0:	d3f6      	bcc.n	800e4e0 <CopyDataInit>
  ldr r2, =_sbss
 800e4f2:	4a14      	ldr	r2, [pc, #80]	; (800e544 <LoopForever+0x14>)
  b LoopFillZerobss
 800e4f4:	e002      	b.n	800e4fc <LoopFillZerobss>

0800e4f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e4f6:	2300      	movs	r3, #0
  str  r3, [r2]
 800e4f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e4fa:	3204      	adds	r2, #4

0800e4fc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e4fc:	4b12      	ldr	r3, [pc, #72]	; (800e548 <LoopForever+0x18>)
  cmp r2, r3
 800e4fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e500:	d3f9      	bcc.n	800e4f6 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e502:	4812      	ldr	r0, [pc, #72]	; (800e54c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e504:	4912      	ldr	r1, [pc, #72]	; (800e550 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e506:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e508:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e50a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e50c:	d005      	beq.n	800e51a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e50e:	f000 f82b 	bl	800e568 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e512:	f005 fad9 	bl	8013ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e516:	f005 fac0 	bl	8013a9a <main>

0800e51a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e51a:	480e      	ldr	r0, [pc, #56]	; (800e554 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e51c:	490e      	ldr	r1, [pc, #56]	; (800e558 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e51e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e520:	480e      	ldr	r0, [pc, #56]	; (800e55c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e522:	490d      	ldr	r1, [pc, #52]	; (800e558 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e524:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e526:	480e      	ldr	r0, [pc, #56]	; (800e560 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e528:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e52a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e52c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e52e:	4700      	bx	r0

0800e530 <LoopForever>:


LoopForever:
    b LoopForever
 800e530:	e7fe      	b.n	800e530 <LoopForever>
 800e532:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e534:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e538:	0801a8f4 	.word	0x0801a8f4
  ldr r0, =_sdata
 800e53c:	2000000c 	.word	0x2000000c
  ldr r3, =_edata
 800e540:	20000294 	.word	0x20000294
  ldr r2, =_sbss
 800e544:	20000298 	.word	0x20000298
  ldr r3, = _ebss
 800e548:	200067a4 	.word	0x200067a4
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e54c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e550:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e554:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e558:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e55c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e560:	1fffd800 	.word	0x1fffd800

0800e564 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e564:	e7fe      	b.n	800e564 <ADC1_COMP_IRQHandler>
	...

0800e568 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e568:	4b11      	ldr	r3, [pc, #68]	; (800e5b0 <SystemInit+0x48>)
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	2101      	movs	r1, #1
 800e56e:	430a      	orrs	r2, r1
 800e570:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	480f      	ldr	r0, [pc, #60]	; (800e5b4 <SystemInit+0x4c>)
 800e576:	4002      	ands	r2, r0
 800e578:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	480e      	ldr	r0, [pc, #56]	; (800e5b8 <SystemInit+0x50>)
 800e57e:	4002      	ands	r2, r0
 800e580:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	480d      	ldr	r0, [pc, #52]	; (800e5bc <SystemInit+0x54>)
 800e586:	4002      	ands	r2, r0
 800e588:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	480c      	ldr	r0, [pc, #48]	; (800e5c0 <SystemInit+0x58>)
 800e58e:	4002      	ands	r2, r0
 800e590:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	200f      	movs	r0, #15
 800e596:	4382      	bics	r2, r0
 800e598:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e59c:	4809      	ldr	r0, [pc, #36]	; (800e5c4 <SystemInit+0x5c>)
 800e59e:	4002      	ands	r2, r0
 800e5a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e5a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5a4:	438a      	bics	r2, r1
 800e5a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	609a      	str	r2, [r3, #8]

}
 800e5ac:	4770      	bx	lr
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	40021000 	.word	0x40021000
 800e5b4:	08ffb80c 	.word	0x08ffb80c
 800e5b8:	fef6ffff 	.word	0xfef6ffff
 800e5bc:	fffbffff 	.word	0xfffbffff
 800e5c0:	ffc0ffff 	.word	0xffc0ffff
 800e5c4:	fff0feac 	.word	0xfff0feac

0800e5c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e5c8:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e5ca:	f000 ff55 	bl	800f478 <vTaskStartScheduler>
  
  return osOK;
}
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	bd10      	pop	{r4, pc}

0800e5d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e5d2:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d100      	bne.n	800e5da <osDelay+0x8>
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f001 f889 	bl	800f6f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e5de:	2000      	movs	r0, #0
 800e5e0:	bd10      	pop	{r4, pc}

0800e5e2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e5e2:	b510      	push	{r4, lr}
 800e5e4:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e5e6:	2901      	cmp	r1, #1
 800e5e8:	d005      	beq.n	800e5f6 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f000 faf6 	bl	800ebdc <xQueueCreateCountingSemaphore>
 800e5f0:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e5f2:	0020      	movs	r0, r4
 800e5f4:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e5f6:	2203      	movs	r2, #3
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	f000 fac8 	bl	800eb8e <xQueueGenericCreate>
 800e5fe:	1e04      	subs	r4, r0, #0
 800e600:	d0f7      	beq.n	800e5f2 <osSemaphoreCreate+0x10>
 800e602:	2300      	movs	r3, #0
 800e604:	2200      	movs	r2, #0
 800e606:	2100      	movs	r1, #0
 800e608:	f000 fafc 	bl	800ec04 <xQueueGenericSend>
 800e60c:	e7f1      	b.n	800e5f2 <osSemaphoreCreate+0x10>
	...

0800e610 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e610:	b500      	push	{lr}
 800e612:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e614:	2300      	movs	r3, #0
 800e616:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e618:	2800      	cmp	r0, #0
 800e61a:	d021      	beq.n	800e660 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e61c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e620:	2b00      	cmp	r3, #0
 800e622:	d010      	beq.n	800e646 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e624:	aa01      	add	r2, sp, #4
 800e626:	2100      	movs	r1, #0
 800e628:	f000 fcae 	bl	800ef88 <xQueueReceiveFromISR>
 800e62c:	0003      	movs	r3, r0
      return osErrorOS;
 800e62e:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e630:	2b01      	cmp	r3, #1
 800e632:	d113      	bne.n	800e65c <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e634:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e636:	9b01      	ldr	r3, [sp, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00f      	beq.n	800e65c <osSemaphoreWait+0x4c>
 800e63c:	4b09      	ldr	r3, [pc, #36]	; (800e664 <osSemaphoreWait+0x54>)
 800e63e:	2280      	movs	r2, #128	; 0x80
 800e640:	0552      	lsls	r2, r2, #21
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e00a      	b.n	800e65c <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e646:	2300      	movs	r3, #0
 800e648:	000a      	movs	r2, r1
 800e64a:	2100      	movs	r1, #0
 800e64c:	f000 fbf3 	bl	800ee36 <xQueueGenericReceive>
  return osOK;
 800e650:	3801      	subs	r0, #1
 800e652:	1e43      	subs	r3, r0, #1
 800e654:	4198      	sbcs	r0, r3
 800e656:	4240      	negs	r0, r0
 800e658:	23ff      	movs	r3, #255	; 0xff
 800e65a:	4018      	ands	r0, r3
}
 800e65c:	b003      	add	sp, #12
 800e65e:	bd00      	pop	{pc}
    return osErrorParameter;
 800e660:	2080      	movs	r0, #128	; 0x80
 800e662:	e7fb      	b.n	800e65c <osSemaphoreWait+0x4c>
 800e664:	e000ed04 	.word	0xe000ed04

0800e668 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e668:	b500      	push	{lr}
 800e66a:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e66c:	2300      	movs	r3, #0
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00f      	beq.n	800e698 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e678:	a901      	add	r1, sp, #4
 800e67a:	f000 fba1 	bl	800edc0 <xQueueGiveFromISR>
 800e67e:	0003      	movs	r3, r0
      return osErrorOS;
 800e680:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e682:	2b01      	cmp	r3, #1
 800e684:	d114      	bne.n	800e6b0 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e686:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d010      	beq.n	800e6b0 <osSemaphoreRelease+0x48>
 800e68e:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <osSemaphoreRelease+0x4c>)
 800e690:	2280      	movs	r2, #128	; 0x80
 800e692:	0552      	lsls	r2, r2, #21
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	e00b      	b.n	800e6b0 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e698:	2300      	movs	r3, #0
 800e69a:	2200      	movs	r2, #0
 800e69c:	2100      	movs	r1, #0
 800e69e:	f000 fab1 	bl	800ec04 <xQueueGenericSend>
      result = osErrorOS;
 800e6a2:	3801      	subs	r0, #1
 800e6a4:	4243      	negs	r3, r0
 800e6a6:	4158      	adcs	r0, r3
 800e6a8:	4240      	negs	r0, r0
 800e6aa:	23fe      	movs	r3, #254	; 0xfe
 800e6ac:	4398      	bics	r0, r3
 800e6ae:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e6b0:	b003      	add	sp, #12
 800e6b2:	bd00      	pop	{pc}
 800e6b4:	e000ed04 	.word	0xe000ed04

0800e6b8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e6b8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e6ba:	f001 fa0f 	bl	800fadc <xTaskGetSchedulerState>
 800e6be:	2801      	cmp	r0, #1
 800e6c0:	d001      	beq.n	800e6c6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e6c2:	f001 fe85 	bl	80103d0 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e6c6:	bd10      	pop	{r4, pc}

0800e6c8 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e6cc:	d101      	bne.n	800e6d2 <FreeRTOS_CLIRegisterCommand+0xa>
 800e6ce:	b672      	cpsid	i
 800e6d0:	e7fe      	b.n	800e6d0 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e6d2:	2008      	movs	r0, #8
 800e6d4:	f001 feb8 	bl	8010448 <pvPortMalloc>
 800e6d8:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e6da:	d101      	bne.n	800e6e0 <FreeRTOS_CLIRegisterCommand+0x18>
 800e6dc:	b672      	cpsid	i
 800e6de:	e7fe      	b.n	800e6de <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e6e0:	f001 fe30 	bl	8010344 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e6e4:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e6ea:	4b04      	ldr	r3, [pc, #16]	; (800e6fc <FreeRTOS_CLIRegisterCommand+0x34>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e6f0:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e6f2:	f001 fe33 	bl	801035c <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	bd70      	pop	{r4, r5, r6, pc}
 800e6fa:	46c0      	nop			; (mov r8, r8)
 800e6fc:	200000b0 	.word	0x200000b0

0800e700 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e702:	46d6      	mov	lr, sl
 800e704:	b500      	push	{lr}
 800e706:	b084      	sub	sp, #16
 800e708:	9001      	str	r0, [sp, #4]
 800e70a:	9102      	str	r1, [sp, #8]
 800e70c:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e70e:	4b37      	ldr	r3, [pc, #220]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00e      	beq.n	800e734 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	9a01      	ldr	r2, [sp, #4]
 800e71c:	9903      	ldr	r1, [sp, #12]
 800e71e:	9802      	ldr	r0, [sp, #8]
 800e720:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e722:	2800      	cmp	r0, #0
 800e724:	d102      	bne.n	800e72c <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e726:	4b31      	ldr	r3, [pc, #196]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e728:	2200      	movs	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e72c:	b004      	add	sp, #16
 800e72e:	bc04      	pop	{r2}
 800e730:	4692      	mov	sl, r2
 800e732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e734:	4d2e      	ldr	r5, [pc, #184]	; (800e7f0 <FreeRTOS_CLIProcessCommand+0xf0>)
 800e736:	4a2d      	ldr	r2, [pc, #180]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e738:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e73a:	3320      	adds	r3, #32
 800e73c:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e73e:	0017      	movs	r7, r2
 800e740:	e00a      	b.n	800e758 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e742:	0002      	movs	r2, r0
 800e744:	0021      	movs	r1, r4
 800e746:	9801      	ldr	r0, [sp, #4]
 800e748:	f006 f804 	bl	8014754 <strncmp>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d00e      	beq.n	800e76e <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e750:	686d      	ldr	r5, [r5, #4]
 800e752:	603d      	str	r5, [r7, #0]
 800e754:	2d00      	cmp	r5, #0
 800e756:	d012      	beq.n	800e77e <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e758:	682e      	ldr	r6, [r5, #0]
 800e75a:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e75c:	0020      	movs	r0, r4
 800e75e:	f7f1 fcdb 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	5c1b      	ldrb	r3, [r3, r0]
 800e766:	4652      	mov	r2, sl
 800e768:	4393      	bics	r3, r2
 800e76a:	d1f1      	bne.n	800e750 <FreeRTOS_CLIProcessCommand+0x50>
 800e76c:	e7e9      	b.n	800e742 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e76e:	200c      	movs	r0, #12
 800e770:	5630      	ldrsb	r0, [r6, r0]
 800e772:	2800      	cmp	r0, #0
 800e774:	da0a      	bge.n	800e78c <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e776:	4b1d      	ldr	r3, [pc, #116]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1cb      	bne.n	800e716 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e77e:	9a03      	ldr	r2, [sp, #12]
 800e780:	491c      	ldr	r1, [pc, #112]	; (800e7f4 <FreeRTOS_CLIProcessCommand+0xf4>)
 800e782:	9802      	ldr	r0, [sp, #8]
 800e784:	f005 fff7 	bl	8014776 <strncpy>
		xReturn = pdFALSE;
 800e788:	2000      	movs	r0, #0
	return xReturn;
 800e78a:	e7cf      	b.n	800e72c <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e78c:	9a01      	ldr	r2, [sp, #4]
 800e78e:	2300      	movs	r3, #0
 800e790:	56d3      	ldrsb	r3, [r2, r3]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d027      	beq.n	800e7e6 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e796:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e798:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e79a:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e79c:	2501      	movs	r5, #1
 800e79e:	e009      	b.n	800e7b4 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e7a0:	2901      	cmp	r1, #1
 800e7a2:	d002      	beq.n	800e7aa <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e7a4:	3401      	adds	r4, #1
 800e7a6:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e7a8:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e7aa:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	56d3      	ldrsb	r3, [r2, r3]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d003      	beq.n	800e7bc <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e7b4:	2b20      	cmp	r3, #32
 800e7b6:	d0f3      	beq.n	800e7a0 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e7b8:	0031      	movs	r1, r6
 800e7ba:	e7f6      	b.n	800e7aa <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e7bc:	2901      	cmp	r1, #1
 800e7be:	d00f      	beq.n	800e7e0 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e7c0:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0da      	beq.n	800e77e <FreeRTOS_CLIProcessCommand+0x7e>
 800e7c8:	42a0      	cmp	r0, r4
 800e7ca:	d0a4      	beq.n	800e716 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e7cc:	9a03      	ldr	r2, [sp, #12]
 800e7ce:	490a      	ldr	r1, [pc, #40]	; (800e7f8 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e7d0:	9802      	ldr	r0, [sp, #8]
 800e7d2:	f005 ffd0 	bl	8014776 <strncpy>
		pxCommand = NULL;
 800e7d6:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <FreeRTOS_CLIProcessCommand+0xec>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e7a5      	b.n	800e72c <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e7e0:	3c01      	subs	r4, #1
 800e7e2:	b264      	sxtb	r4, r4
 800e7e4:	e7ec      	b.n	800e7c0 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e7e6:	2400      	movs	r4, #0
 800e7e8:	e7ea      	b.n	800e7c0 <FreeRTOS_CLIProcessCommand+0xc0>
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	2000162c 	.word	0x2000162c
 800e7f0:	200000b4 	.word	0x200000b4
 800e7f4:	0801a4bc 	.word	0x0801a4bc
 800e7f8:	0801a464 	.word	0x0801a464

0800e7fc <FreeRTOS_CLIGetOutputBuffer>:
}
 800e7fc:	4800      	ldr	r0, [pc, #0]	; (800e800 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e7fe:	4770      	bx	lr
 800e800:	200013c4 	.word	0x200013c4

0800e804 <FreeRTOS_CLIGetParameter>:
{
 800e804:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e80a:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e80c:	2900      	cmp	r1, #0
 800e80e:	d10b      	bne.n	800e828 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e810:	2000      	movs	r0, #0
 800e812:	e02a      	b.n	800e86a <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e814:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e816:	2300      	movs	r3, #0
 800e818:	56c3      	ldrsb	r3, [r0, r3]
 800e81a:	2b20      	cmp	r3, #32
 800e81c:	d0fa      	beq.n	800e814 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d022      	beq.n	800e868 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e822:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e824:	42a1      	cmp	r1, r4
 800e826:	d00d      	beq.n	800e844 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e828:	2300      	movs	r3, #0
 800e82a:	56c3      	ldrsb	r3, [r0, r3]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01f      	beq.n	800e870 <FreeRTOS_CLIGetParameter+0x6c>
 800e830:	2b20      	cmp	r3, #32
 800e832:	d0ef      	beq.n	800e814 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e834:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e836:	2300      	movs	r3, #0
 800e838:	56c3      	ldrsb	r3, [r0, r3]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d018      	beq.n	800e870 <FreeRTOS_CLIGetParameter+0x6c>
 800e83e:	2b20      	cmp	r3, #32
 800e840:	d1f8      	bne.n	800e834 <FreeRTOS_CLIGetParameter+0x30>
 800e842:	e7e7      	b.n	800e814 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e844:	7803      	ldrb	r3, [r0, #0]
 800e846:	2120      	movs	r1, #32
 800e848:	438b      	bics	r3, r1
 800e84a:	d00f      	beq.n	800e86c <FreeRTOS_CLIGetParameter+0x68>
 800e84c:	0004      	movs	r4, r0
 800e84e:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e850:	6813      	ldr	r3, [r2, #0]
 800e852:	3301      	adds	r3, #1
 800e854:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e856:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e858:	7821      	ldrb	r1, [r4, #0]
 800e85a:	43a9      	bics	r1, r5
 800e85c:	d1f8      	bne.n	800e850 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e85e:	1e5a      	subs	r2, r3, #1
 800e860:	4193      	sbcs	r3, r2
 800e862:	425b      	negs	r3, r3
 800e864:	4018      	ands	r0, r3
 800e866:	e000      	b.n	800e86a <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e868:	2000      	movs	r0, #0
}
 800e86a:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e86c:	2000      	movs	r0, #0
 800e86e:	e7fc      	b.n	800e86a <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e870:	2300      	movs	r3, #0
 800e872:	56c3      	ldrsb	r3, [r0, r3]
 800e874:	e7d3      	b.n	800e81e <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e878 <prvHelpCommand>:
{
 800e878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87a:	b083      	sub	sp, #12
 800e87c:	0004      	movs	r4, r0
 800e87e:	000d      	movs	r5, r1
 800e880:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e886:	aa01      	add	r2, sp, #4
 800e888:	2101      	movs	r1, #1
 800e88a:	f7ff ffbb 	bl	800e804 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e88e:	2800      	cmp	r0, #0
 800e890:	d027      	beq.n	800e8e2 <prvHelpCommand+0x6a>
 800e892:	2206      	movs	r2, #6
 800e894:	4930      	ldr	r1, [pc, #192]	; (800e958 <prvHelpCommand+0xe0>)
 800e896:	f005 ff5d 	bl	8014754 <strncmp>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d149      	bne.n	800e932 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e89e:	4b2f      	ldr	r3, [pc, #188]	; (800e95c <prvHelpCommand+0xe4>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b07      	cmp	r3, #7
 800e8a4:	d012      	beq.n	800e8cc <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e8a6:	1c5f      	adds	r7, r3, #1
 800e8a8:	b2ff      	uxtb	r7, r7
 800e8aa:	4a2c      	ldr	r2, [pc, #176]	; (800e95c <prvHelpCommand+0xe4>)
 800e8ac:	7017      	strb	r7, [r2, #0]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4a2b      	ldr	r2, [pc, #172]	; (800e960 <prvHelpCommand+0xe8>)
 800e8b2:	5899      	ldr	r1, [r3, r2]
 800e8b4:	002a      	movs	r2, r5
 800e8b6:	0020      	movs	r0, r4
 800e8b8:	f005 ff5d 	bl	8014776 <strncpy>
			xReturn = pdTRUE;
 800e8bc:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e8be:	2f07      	cmp	r7, #7
 800e8c0:	d137      	bne.n	800e932 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e8c2:	4b26      	ldr	r3, [pc, #152]	; (800e95c <prvHelpCommand+0xe4>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	701a      	strb	r2, [r3, #0]
 800e8c8:	2600      	movs	r6, #0
 800e8ca:	e032      	b.n	800e932 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e8cc:	4b23      	ldr	r3, [pc, #140]	; (800e95c <prvHelpCommand+0xe4>)
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	701a      	strb	r2, [r3, #0]
 800e8d2:	4b23      	ldr	r3, [pc, #140]	; (800e960 <prvHelpCommand+0xe8>)
 800e8d4:	6819      	ldr	r1, [r3, #0]
 800e8d6:	002a      	movs	r2, r5
 800e8d8:	0020      	movs	r0, r4
 800e8da:	f005 ff4c 	bl	8014776 <strncpy>
			xReturn = pdTRUE;
 800e8de:	2601      	movs	r6, #1
 800e8e0:	e027      	b.n	800e932 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e8e2:	4b20      	ldr	r3, [pc, #128]	; (800e964 <prvHelpCommand+0xec>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d026      	beq.n	800e938 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e8ea:	4b1f      	ldr	r3, [pc, #124]	; (800e968 <prvHelpCommand+0xf0>)
 800e8ec:	781a      	ldrb	r2, [r3, #0]
 800e8ee:	4b1f      	ldr	r3, [pc, #124]	; (800e96c <prvHelpCommand+0xf4>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d927      	bls.n	800e946 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e8f6:	002a      	movs	r2, r5
 800e8f8:	3a08      	subs	r2, #8
 800e8fa:	4b1a      	ldr	r3, [pc, #104]	; (800e964 <prvHelpCommand+0xec>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6859      	ldr	r1, [r3, #4]
 800e902:	0020      	movs	r0, r4
 800e904:	3008      	adds	r0, #8
 800e906:	f005 ff36 	bl	8014776 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e90a:	1c60      	adds	r0, r4, #1
 800e90c:	4918      	ldr	r1, [pc, #96]	; (800e970 <prvHelpCommand+0xf8>)
 800e90e:	f005 ff19 	bl	8014744 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e912:	2328      	movs	r3, #40	; 0x28
 800e914:	7023      	strb	r3, [r4, #0]
 800e916:	3301      	adds	r3, #1
 800e918:	71a3      	strb	r3, [r4, #6]
 800e91a:	3b09      	subs	r3, #9
 800e91c:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e91e:	4b11      	ldr	r3, [pc, #68]	; (800e964 <prvHelpCommand+0xec>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	6856      	ldr	r6, [r2, #4]
 800e924:	601e      	str	r6, [r3, #0]
		counter++;
 800e926:	4a10      	ldr	r2, [pc, #64]	; (800e968 <prvHelpCommand+0xf0>)
 800e928:	7813      	ldrb	r3, [r2, #0]
 800e92a:	3301      	adds	r3, #1
 800e92c:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e92e:	1e73      	subs	r3, r6, #1
 800e930:	419e      	sbcs	r6, r3
}
 800e932:	0030      	movs	r0, r6
 800e934:	b003      	add	sp, #12
 800e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e938:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <prvHelpCommand+0xec>)
 800e93a:	4a0e      	ldr	r2, [pc, #56]	; (800e974 <prvHelpCommand+0xfc>)
 800e93c:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <prvHelpCommand+0xf0>)
 800e940:	2201      	movs	r2, #1
 800e942:	701a      	strb	r2, [r3, #0]
 800e944:	e7d1      	b.n	800e8ea <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e946:	4b07      	ldr	r3, [pc, #28]	; (800e964 <prvHelpCommand+0xec>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6859      	ldr	r1, [r3, #4]
 800e94e:	002a      	movs	r2, r5
 800e950:	0020      	movs	r0, r4
 800e952:	f005 ff10 	bl	8014776 <strncpy>
 800e956:	e7e2      	b.n	800e91e <prvHelpCommand+0xa6>
 800e958:	08018340 	.word	0x08018340
 800e95c:	20001634 	.word	0x20001634
 800e960:	20000068 	.word	0x20000068
 800e964:	20001630 	.word	0x20001630
 800e968:	20001628 	.word	0x20001628
 800e96c:	200061f8 	.word	0x200061f8
 800e970:	08017948 	.word	0x08017948
 800e974:	200000b4 	.word	0x200000b4

0800e978 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e978:	0003      	movs	r3, r0
 800e97a:	3308      	adds	r3, #8
 800e97c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e97e:	2201      	movs	r2, #1
 800e980:	4252      	negs	r2, r2
 800e982:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e984:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e986:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e988:	2300      	movs	r3, #0
 800e98a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e98c:	4770      	bx	lr

0800e98e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e992:	4770      	bx	lr

0800e994 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e994:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e996:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e998:	689a      	ldr	r2, [r3, #8]
 800e99a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e99c:	689a      	ldr	r2, [r3, #8]
 800e99e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9a0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e9a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e9a4:	6803      	ldr	r3, [r0, #0]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	6003      	str	r3, [r0, #0]
}
 800e9aa:	4770      	bx	lr

0800e9ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9ac:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9ae:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9b0:	0002      	movs	r2, r0
 800e9b2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e9b4:	1c63      	adds	r3, r4, #1
 800e9b6:	d102      	bne.n	800e9be <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9b8:	6902      	ldr	r2, [r0, #16]
 800e9ba:	e004      	b.n	800e9c6 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9bc:	001a      	movs	r2, r3
 800e9be:	6853      	ldr	r3, [r2, #4]
 800e9c0:	681d      	ldr	r5, [r3, #0]
 800e9c2:	42a5      	cmp	r5, r4
 800e9c4:	d9fa      	bls.n	800e9bc <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9c6:	6853      	ldr	r3, [r2, #4]
 800e9c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9ca:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9cc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9ce:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e9d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e9d2:	6803      	ldr	r3, [r0, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	6003      	str	r3, [r0, #0]
}
 800e9d8:	bd30      	pop	{r4, r5, pc}

0800e9da <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e9da:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e9dc:	6842      	ldr	r2, [r0, #4]
 800e9de:	6881      	ldr	r1, [r0, #8]
 800e9e0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e9e2:	6882      	ldr	r2, [r0, #8]
 800e9e4:	6841      	ldr	r1, [r0, #4]
 800e9e6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	4282      	cmp	r2, r0
 800e9ec:	d005      	beq.n	800e9fa <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	1e50      	subs	r0, r2, #1
 800e9f6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e9f8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e9fa:	6882      	ldr	r2, [r0, #8]
 800e9fc:	605a      	str	r2, [r3, #4]
 800e9fe:	e7f6      	b.n	800e9ee <uxListRemove+0x14>

0800ea00 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	0004      	movs	r4, r0
 800ea04:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ea08:	2a00      	cmp	r2, #0
 800ea0a:	d10d      	bne.n	800ea28 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ea0c:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d003      	beq.n	800ea1c <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ea14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea16:	3301      	adds	r3, #1
 800ea18:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ea1c:	6860      	ldr	r0, [r4, #4]
 800ea1e:	f001 f8ab 	bl	800fb78 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	6063      	str	r3, [r4, #4]
 800ea26:	e7f5      	b.n	800ea14 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ea28:	2d00      	cmp	r5, #0
 800ea2a:	d10e      	bne.n	800ea4a <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ea2c:	6880      	ldr	r0, [r0, #8]
 800ea2e:	f005 f8b6 	bl	8013b9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ea36:	4694      	mov	ip, r2
 800ea38:	4463      	add	r3, ip
 800ea3a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ea3c:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea3e:	6862      	ldr	r2, [r4, #4]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d3e7      	bcc.n	800ea14 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	60a3      	str	r3, [r4, #8]
 800ea48:	e7e4      	b.n	800ea14 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea4a:	68c0      	ldr	r0, [r0, #12]
 800ea4c:	f005 f8a7 	bl	8013b9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ea50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea52:	425a      	negs	r2, r3
 800ea54:	68e3      	ldr	r3, [r4, #12]
 800ea56:	189b      	adds	r3, r3, r2
 800ea58:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea5a:	6821      	ldr	r1, [r4, #0]
 800ea5c:	428b      	cmp	r3, r1
 800ea5e:	d203      	bcs.n	800ea68 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ea60:	6863      	ldr	r3, [r4, #4]
 800ea62:	469c      	mov	ip, r3
 800ea64:	4462      	add	r2, ip
 800ea66:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ea68:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ea6a:	2d02      	cmp	r5, #2
 800ea6c:	d1d2      	bne.n	800ea14 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0cf      	beq.n	800ea14 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ea74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea76:	3b01      	subs	r3, #1
 800ea78:	63a3      	str	r3, [r4, #56]	; 0x38
 800ea7a:	e7cb      	b.n	800ea14 <prvCopyDataToQueue+0x14>

0800ea7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	d00b      	beq.n	800ea9e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ea86:	68c3      	ldr	r3, [r0, #12]
 800ea88:	189b      	adds	r3, r3, r2
 800ea8a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea8c:	6841      	ldr	r1, [r0, #4]
 800ea8e:	428b      	cmp	r3, r1
 800ea90:	d301      	bcc.n	800ea96 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ea92:	6803      	ldr	r3, [r0, #0]
 800ea94:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ea96:	68c1      	ldr	r1, [r0, #12]
 800ea98:	0020      	movs	r0, r4
 800ea9a:	f005 f880 	bl	8013b9e <memcpy>
	}
}
 800ea9e:	bd10      	pop	{r4, pc}

0800eaa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eaa4:	f001 fc4e 	bl	8010344 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800eaa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dd04      	ble.n	800eab8 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaae:	0025      	movs	r5, r4
 800eab0:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d11f      	bne.n	800eaf8 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800eab8:	2301      	movs	r3, #1
 800eaba:	425b      	negs	r3, r3
 800eabc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800eabe:	f001 fc4d 	bl	801035c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eac2:	f001 fc3f 	bl	8010344 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800eac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	dd04      	ble.n	800ead6 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eacc:	0025      	movs	r5, r4
 800eace:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d121      	bne.n	800eb1a <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800ead6:	2301      	movs	r3, #1
 800ead8:	425b      	negs	r3, r3
 800eada:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eadc:	f001 fc3e 	bl	801035c <vPortExitCritical>
}
 800eae0:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800eae2:	f000 fff5 	bl	800fad0 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800eae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eae8:	3b01      	subs	r3, #1
 800eaea:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800eaec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	dde2      	ble.n	800eab8 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d0df      	beq.n	800eab8 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaf8:	0028      	movs	r0, r5
 800eafa:	f000 ff67 	bl	800f9cc <xTaskRemoveFromEventList>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d0f1      	beq.n	800eae6 <prvUnlockQueue+0x46>
 800eb02:	e7ee      	b.n	800eae2 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800eb04:	f000 ffe4 	bl	800fad0 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800eb08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800eb0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dde0      	ble.n	800ead6 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0dd      	beq.n	800ead6 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb1a:	0028      	movs	r0, r5
 800eb1c:	f000 ff56 	bl	800f9cc <xTaskRemoveFromEventList>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d0f1      	beq.n	800eb08 <prvUnlockQueue+0x68>
 800eb24:	e7ee      	b.n	800eb04 <prvUnlockQueue+0x64>

0800eb26 <xQueueGenericReset>:
{
 800eb26:	b570      	push	{r4, r5, r6, lr}
 800eb28:	0004      	movs	r4, r0
 800eb2a:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d101      	bne.n	800eb34 <xQueueGenericReset+0xe>
 800eb30:	b672      	cpsid	i
 800eb32:	e7fe      	b.n	800eb32 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800eb34:	f001 fc06 	bl	8010344 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800eb38:	6822      	ldr	r2, [r4, #0]
 800eb3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb3e:	434b      	muls	r3, r1
 800eb40:	18d0      	adds	r0, r2, r3
 800eb42:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb44:	2000      	movs	r0, #0
 800eb46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb48:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800eb4a:	1a5b      	subs	r3, r3, r1
 800eb4c:	18d3      	adds	r3, r2, r3
 800eb4e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800eb50:	2301      	movs	r3, #1
 800eb52:	425b      	negs	r3, r3
 800eb54:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800eb56:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d10f      	bne.n	800eb7c <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb5c:	6923      	ldr	r3, [r4, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800eb62:	f001 fbfb 	bl	801035c <vPortExitCritical>
}
 800eb66:	2001      	movs	r0, #1
 800eb68:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800eb6a:	0020      	movs	r0, r4
 800eb6c:	3010      	adds	r0, #16
 800eb6e:	f000 ff2d 	bl	800f9cc <xTaskRemoveFromEventList>
 800eb72:	2801      	cmp	r0, #1
 800eb74:	d1f5      	bne.n	800eb62 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800eb76:	f001 fbd9 	bl	801032c <vPortYield>
 800eb7a:	e7f2      	b.n	800eb62 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb7c:	0020      	movs	r0, r4
 800eb7e:	3010      	adds	r0, #16
 800eb80:	f7ff fefa 	bl	800e978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb84:	0020      	movs	r0, r4
 800eb86:	3024      	adds	r0, #36	; 0x24
 800eb88:	f7ff fef6 	bl	800e978 <vListInitialise>
 800eb8c:	e7e9      	b.n	800eb62 <xQueueGenericReset+0x3c>

0800eb8e <xQueueGenericCreate>:
{
 800eb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb90:	0005      	movs	r5, r0
 800eb92:	000e      	movs	r6, r1
 800eb94:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d101      	bne.n	800eb9e <xQueueGenericCreate+0x10>
 800eb9a:	b672      	cpsid	i
 800eb9c:	e7fe      	b.n	800eb9c <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800eb9e:	2900      	cmp	r1, #0
 800eba0:	d00c      	beq.n	800ebbc <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eba2:	0008      	movs	r0, r1
 800eba4:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eba6:	3055      	adds	r0, #85	; 0x55
 800eba8:	f001 fc4e 	bl	8010448 <pvPortMalloc>
 800ebac:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ebae:	d101      	bne.n	800ebb4 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800ebb0:	b672      	cpsid	i
 800ebb2:	e7fe      	b.n	800ebb2 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800ebb4:	0003      	movs	r3, r0
 800ebb6:	3354      	adds	r3, #84	; 0x54
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	e005      	b.n	800ebc8 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ebbc:	2054      	movs	r0, #84	; 0x54
 800ebbe:	f001 fc43 	bl	8010448 <pvPortMalloc>
 800ebc2:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ebc4:	d0f4      	beq.n	800ebb0 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ebc6:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ebc8:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ebca:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ebcc:	2101      	movs	r1, #1
 800ebce:	0020      	movs	r0, r4
 800ebd0:	f7ff ffa9 	bl	800eb26 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ebd4:	2350      	movs	r3, #80	; 0x50
 800ebd6:	54e7      	strb	r7, [r4, r3]
}
 800ebd8:	0020      	movs	r0, r4
 800ebda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebdc <xQueueCreateCountingSemaphore>:
	{
 800ebdc:	b510      	push	{r4, lr}
 800ebde:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d101      	bne.n	800ebe8 <xQueueCreateCountingSemaphore+0xc>
 800ebe4:	b672      	cpsid	i
 800ebe6:	e7fe      	b.n	800ebe6 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ebe8:	4288      	cmp	r0, r1
 800ebea:	d201      	bcs.n	800ebf0 <xQueueCreateCountingSemaphore+0x14>
 800ebec:	b672      	cpsid	i
 800ebee:	e7fe      	b.n	800ebee <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ebf0:	2202      	movs	r2, #2
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	f7ff ffcb 	bl	800eb8e <xQueueGenericCreate>
		if( xHandle != NULL )
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d001      	beq.n	800ec00 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ebfc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ebfe:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ec00:	b672      	cpsid	i
 800ec02:	e7fe      	b.n	800ec02 <xQueueCreateCountingSemaphore+0x26>

0800ec04 <xQueueGenericSend>:
{
 800ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec06:	46ce      	mov	lr, r9
 800ec08:	b500      	push	{lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	0004      	movs	r4, r0
 800ec0e:	9100      	str	r1, [sp, #0]
 800ec10:	9201      	str	r2, [sp, #4]
 800ec12:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d007      	beq.n	800ec28 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec18:	9b00      	ldr	r3, [sp, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <xQueueGenericSend+0x28>
 800ec1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d003      	beq.n	800ec2c <xQueueGenericSend+0x28>
 800ec24:	b672      	cpsid	i
 800ec26:	e7fe      	b.n	800ec26 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800ec28:	b672      	cpsid	i
 800ec2a:	e7fe      	b.n	800ec2a <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec2c:	2d02      	cmp	r5, #2
 800ec2e:	d104      	bne.n	800ec3a <xQueueGenericSend+0x36>
 800ec30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d001      	beq.n	800ec3a <xQueueGenericSend+0x36>
 800ec36:	b672      	cpsid	i
 800ec38:	e7fe      	b.n	800ec38 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec3a:	f000 ff4f 	bl	800fadc <xTaskGetSchedulerState>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d104      	bne.n	800ec4c <xQueueGenericSend+0x48>
 800ec42:	9b01      	ldr	r3, [sp, #4]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d004      	beq.n	800ec52 <xQueueGenericSend+0x4e>
 800ec48:	b672      	cpsid	i
 800ec4a:	e7fe      	b.n	800ec4a <xQueueGenericSend+0x46>
 800ec4c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ec4e:	2700      	movs	r7, #0
 800ec50:	e02f      	b.n	800ecb2 <xQueueGenericSend+0xae>
 800ec52:	2600      	movs	r6, #0
 800ec54:	e7fb      	b.n	800ec4e <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec56:	002a      	movs	r2, r5
 800ec58:	9900      	ldr	r1, [sp, #0]
 800ec5a:	0020      	movs	r0, r4
 800ec5c:	f7ff fed0 	bl	800ea00 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d104      	bne.n	800ec70 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d00a      	beq.n	800ec80 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800ec6a:	f001 fb5f 	bl	801032c <vPortYield>
 800ec6e:	e007      	b.n	800ec80 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800ec70:	0020      	movs	r0, r4
 800ec72:	3024      	adds	r0, #36	; 0x24
 800ec74:	f000 feaa 	bl	800f9cc <xTaskRemoveFromEventList>
 800ec78:	2801      	cmp	r0, #1
 800ec7a:	d101      	bne.n	800ec80 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800ec7c:	f001 fb56 	bl	801032c <vPortYield>
				taskEXIT_CRITICAL();
 800ec80:	f001 fb6c 	bl	801035c <vPortExitCritical>
				return pdPASS;
 800ec84:	2001      	movs	r0, #1
}
 800ec86:	b004      	add	sp, #16
 800ec88:	bc04      	pop	{r2}
 800ec8a:	4691      	mov	r9, r2
 800ec8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800ec8e:	f001 fb65 	bl	801035c <vPortExitCritical>
					return errQUEUE_FULL;
 800ec92:	2000      	movs	r0, #0
 800ec94:	e7f7      	b.n	800ec86 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800ec96:	a802      	add	r0, sp, #8
 800ec98:	f000 fed8 	bl	800fa4c <vTaskSetTimeOutState>
 800ec9c:	e016      	b.n	800eccc <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800ec9e:	6467      	str	r7, [r4, #68]	; 0x44
 800eca0:	e01d      	b.n	800ecde <xQueueGenericSend+0xda>
 800eca2:	64a7      	str	r7, [r4, #72]	; 0x48
 800eca4:	e01e      	b.n	800ece4 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800eca6:	0020      	movs	r0, r4
 800eca8:	f7ff fefa 	bl	800eaa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecac:	f000 fcb0 	bl	800f610 <xTaskResumeAll>
 800ecb0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ecb2:	f001 fb47 	bl	8010344 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ecb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d3cb      	bcc.n	800ec56 <xQueueGenericSend+0x52>
 800ecbe:	2d02      	cmp	r5, #2
 800ecc0:	d0c9      	beq.n	800ec56 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecc2:	9b01      	ldr	r3, [sp, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0e2      	beq.n	800ec8e <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800ecc8:	2e00      	cmp	r6, #0
 800ecca:	d0e4      	beq.n	800ec96 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800eccc:	f001 fb46 	bl	801035c <vPortExitCritical>
		vTaskSuspendAll();
 800ecd0:	f000 fbfe 	bl	800f4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecd4:	f001 fb36 	bl	8010344 <vPortEnterCritical>
 800ecd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ecda:	3301      	adds	r3, #1
 800ecdc:	d0df      	beq.n	800ec9e <xQueueGenericSend+0x9a>
 800ecde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ece0:	3301      	adds	r3, #1
 800ece2:	d0de      	beq.n	800eca2 <xQueueGenericSend+0x9e>
 800ece4:	f001 fb3a 	bl	801035c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ece8:	a901      	add	r1, sp, #4
 800ecea:	a802      	add	r0, sp, #8
 800ecec:	f000 febe 	bl	800fa6c <xTaskCheckForTimeOut>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d117      	bne.n	800ed24 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecf4:	f001 fb26 	bl	8010344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ecf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ecfe:	f001 fb2d 	bl	801035c <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed02:	45b1      	cmp	r9, r6
 800ed04:	d1cf      	bne.n	800eca6 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed06:	0020      	movs	r0, r4
 800ed08:	3010      	adds	r0, #16
 800ed0a:	9901      	ldr	r1, [sp, #4]
 800ed0c:	f000 fe20 	bl	800f950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed10:	0020      	movs	r0, r4
 800ed12:	f7ff fec5 	bl	800eaa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed16:	f000 fc7b 	bl	800f610 <xTaskResumeAll>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d1c8      	bne.n	800ecb0 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800ed1e:	f001 fb05 	bl	801032c <vPortYield>
 800ed22:	e7c5      	b.n	800ecb0 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800ed24:	0020      	movs	r0, r4
 800ed26:	f7ff febb 	bl	800eaa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed2a:	f000 fc71 	bl	800f610 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ed2e:	2000      	movs	r0, #0
 800ed30:	e7a9      	b.n	800ec86 <xQueueGenericSend+0x82>

0800ed32 <xQueueGenericSendFromISR>:
{
 800ed32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed34:	b083      	sub	sp, #12
 800ed36:	0004      	movs	r4, r0
 800ed38:	000d      	movs	r5, r1
 800ed3a:	0016      	movs	r6, r2
 800ed3c:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d006      	beq.n	800ed50 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed42:	2900      	cmp	r1, #0
 800ed44:	d106      	bne.n	800ed54 <xQueueGenericSendFromISR+0x22>
 800ed46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d003      	beq.n	800ed54 <xQueueGenericSendFromISR+0x22>
 800ed4c:	b672      	cpsid	i
 800ed4e:	e7fe      	b.n	800ed4e <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800ed50:	b672      	cpsid	i
 800ed52:	e7fe      	b.n	800ed52 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed54:	2f02      	cmp	r7, #2
 800ed56:	d12a      	bne.n	800edae <xQueueGenericSendFromISR+0x7c>
 800ed58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d011      	beq.n	800ed82 <xQueueGenericSendFromISR+0x50>
 800ed5e:	b672      	cpsid	i
 800ed60:	e7fe      	b.n	800ed60 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800ed62:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d01b      	beq.n	800eda2 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed6a:	0020      	movs	r0, r4
 800ed6c:	3024      	adds	r0, #36	; 0x24
 800ed6e:	f000 fe2d 	bl	800f9cc <xTaskRemoveFromEventList>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d015      	beq.n	800eda2 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d001      	beq.n	800ed7e <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed7a:	6035      	str	r5, [r6, #0]
 800ed7c:	e011      	b.n	800eda2 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800ed7e:	2501      	movs	r5, #1
 800ed80:	e00f      	b.n	800eda2 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed82:	f001 fafb 	bl	801037c <ulSetInterruptMaskFromISR>
 800ed86:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed8a:	003a      	movs	r2, r7
 800ed8c:	0029      	movs	r1, r5
 800ed8e:	0020      	movs	r0, r4
 800ed90:	f7ff fe36 	bl	800ea00 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ed94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed96:	3301      	adds	r3, #1
 800ed98:	d0e3      	beq.n	800ed62 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800ed9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eda0:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eda2:	9801      	ldr	r0, [sp, #4]
 800eda4:	f001 faef 	bl	8010386 <vClearInterruptMaskFromISR>
}
 800eda8:	0028      	movs	r0, r5
 800edaa:	b003      	add	sp, #12
 800edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edae:	f001 fae5 	bl	801037c <ulSetInterruptMaskFromISR>
 800edb2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800edb8:	4293      	cmp	r3, r2
 800edba:	d3e6      	bcc.n	800ed8a <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800edbc:	2500      	movs	r5, #0
 800edbe:	e7f0      	b.n	800eda2 <xQueueGenericSendFromISR+0x70>

0800edc0 <xQueueGiveFromISR>:
{
 800edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc2:	0004      	movs	r4, r0
 800edc4:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d004      	beq.n	800edd4 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800edca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <xQueueGiveFromISR+0x18>
 800edd0:	b672      	cpsid	i
 800edd2:	e7fe      	b.n	800edd2 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800edd4:	b672      	cpsid	i
 800edd6:	e7fe      	b.n	800edd6 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800edd8:	6803      	ldr	r3, [r0, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d01f      	beq.n	800ee1e <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edde:	f001 facd 	bl	801037c <ulSetInterruptMaskFromISR>
 800ede2:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ede4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800ede6:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ede8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800edea:	4293      	cmp	r3, r2
 800edec:	d212      	bcs.n	800ee14 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800edee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edf0:	3301      	adds	r3, #1
 800edf2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800edf4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800edf6:	3301      	adds	r3, #1
 800edf8:	d116      	bne.n	800ee28 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800edfa:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d008      	beq.n	800ee14 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee02:	0020      	movs	r0, r4
 800ee04:	3024      	adds	r0, #36	; 0x24
 800ee06:	f000 fde1 	bl	800f9cc <xTaskRemoveFromEventList>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d002      	beq.n	800ee14 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800ee0e:	2f00      	cmp	r7, #0
 800ee10:	d00f      	beq.n	800ee32 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee12:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ee14:	0030      	movs	r0, r6
 800ee16:	f001 fab6 	bl	8010386 <vClearInterruptMaskFromISR>
}
 800ee1a:	0028      	movs	r0, r5
 800ee1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ee1e:	6843      	ldr	r3, [r0, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d0dc      	beq.n	800edde <xQueueGiveFromISR+0x1e>
 800ee24:	b672      	cpsid	i
 800ee26:	e7fe      	b.n	800ee26 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800ee28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ee2e:	2501      	movs	r5, #1
 800ee30:	e7f0      	b.n	800ee14 <xQueueGiveFromISR+0x54>
 800ee32:	2501      	movs	r5, #1
 800ee34:	e7ee      	b.n	800ee14 <xQueueGiveFromISR+0x54>

0800ee36 <xQueueGenericReceive>:
{
 800ee36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee38:	46c6      	mov	lr, r8
 800ee3a:	b500      	push	{lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	0004      	movs	r4, r0
 800ee40:	000e      	movs	r6, r1
 800ee42:	9201      	str	r2, [sp, #4]
 800ee44:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d006      	beq.n	800ee58 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee4a:	2900      	cmp	r1, #0
 800ee4c:	d106      	bne.n	800ee5c <xQueueGenericReceive+0x26>
 800ee4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <xQueueGenericReceive+0x26>
 800ee54:	b672      	cpsid	i
 800ee56:	e7fe      	b.n	800ee56 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800ee58:	b672      	cpsid	i
 800ee5a:	e7fe      	b.n	800ee5a <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee5c:	f000 fe3e 	bl	800fadc <xTaskGetSchedulerState>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	d104      	bne.n	800ee6e <xQueueGenericReceive+0x38>
 800ee64:	9b01      	ldr	r3, [sp, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d004      	beq.n	800ee74 <xQueueGenericReceive+0x3e>
 800ee6a:	b672      	cpsid	i
 800ee6c:	e7fe      	b.n	800ee6c <xQueueGenericReceive+0x36>
 800ee6e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ee70:	2700      	movs	r7, #0
 800ee72:	e04b      	b.n	800ef0c <xQueueGenericReceive+0xd6>
 800ee74:	2500      	movs	r5, #0
 800ee76:	e7fb      	b.n	800ee70 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ee78:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee7a:	0031      	movs	r1, r6
 800ee7c:	0020      	movs	r0, r4
 800ee7e:	f7ff fdfd 	bl	800ea7c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800ee82:	4643      	mov	r3, r8
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d11a      	bne.n	800eebe <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800ee88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d102      	bne.n	800ee9a <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ee94:	f000 ff62 	bl	800fd5c <pvTaskIncrementMutexHeldCount>
 800ee98:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee9a:	6923      	ldr	r3, [r4, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d007      	beq.n	800eeb0 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800eea0:	0020      	movs	r0, r4
 800eea2:	3010      	adds	r0, #16
 800eea4:	f000 fd92 	bl	800f9cc <xTaskRemoveFromEventList>
 800eea8:	2801      	cmp	r0, #1
 800eeaa:	d101      	bne.n	800eeb0 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800eeac:	f001 fa3e 	bl	801032c <vPortYield>
				taskEXIT_CRITICAL();
 800eeb0:	f001 fa54 	bl	801035c <vPortExitCritical>
				return pdPASS;
 800eeb4:	2001      	movs	r0, #1
}
 800eeb6:	b004      	add	sp, #16
 800eeb8:	bc04      	pop	{r2}
 800eeba:	4690      	mov	r8, r2
 800eebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800eebe:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0f4      	beq.n	800eeb0 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eec6:	0020      	movs	r0, r4
 800eec8:	3024      	adds	r0, #36	; 0x24
 800eeca:	f000 fd7f 	bl	800f9cc <xTaskRemoveFromEventList>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d0ee      	beq.n	800eeb0 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800eed2:	f001 fa2b 	bl	801032c <vPortYield>
 800eed6:	e7eb      	b.n	800eeb0 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800eed8:	f001 fa40 	bl	801035c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800eedc:	2000      	movs	r0, #0
 800eede:	e7ea      	b.n	800eeb6 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800eee0:	a802      	add	r0, sp, #8
 800eee2:	f000 fdb3 	bl	800fa4c <vTaskSetTimeOutState>
 800eee6:	e01b      	b.n	800ef20 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800eee8:	6467      	str	r7, [r4, #68]	; 0x44
 800eeea:	e022      	b.n	800ef32 <xQueueGenericReceive+0xfc>
 800eeec:	64a7      	str	r7, [r4, #72]	; 0x48
 800eeee:	e023      	b.n	800ef38 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800eef0:	f001 fa28 	bl	8010344 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800eef4:	6860      	ldr	r0, [r4, #4]
 800eef6:	f000 fe01 	bl	800fafc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800eefa:	f001 fa2f 	bl	801035c <vPortExitCritical>
 800eefe:	e02d      	b.n	800ef5c <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800ef00:	0020      	movs	r0, r4
 800ef02:	f7ff fdcd 	bl	800eaa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef06:	f000 fb83 	bl	800f610 <xTaskResumeAll>
 800ef0a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800ef0c:	f001 fa1a 	bl	8010344 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1b0      	bne.n	800ee78 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d0dd      	beq.n	800eed8 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800ef1c:	2d00      	cmp	r5, #0
 800ef1e:	d0df      	beq.n	800eee0 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800ef20:	f001 fa1c 	bl	801035c <vPortExitCritical>
		vTaskSuspendAll();
 800ef24:	f000 fad4 	bl	800f4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef28:	f001 fa0c 	bl	8010344 <vPortEnterCritical>
 800ef2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef2e:	3301      	adds	r3, #1
 800ef30:	d0da      	beq.n	800eee8 <xQueueGenericReceive+0xb2>
 800ef32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef34:	3301      	adds	r3, #1
 800ef36:	d0d9      	beq.n	800eeec <xQueueGenericReceive+0xb6>
 800ef38:	f001 fa10 	bl	801035c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef3c:	a901      	add	r1, sp, #4
 800ef3e:	a802      	add	r0, sp, #8
 800ef40:	f000 fd94 	bl	800fa6c <xTaskCheckForTimeOut>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d118      	bne.n	800ef7a <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800ef48:	f001 f9fc 	bl	8010344 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800ef4e:	f001 fa05 	bl	801035c <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef52:	2d00      	cmp	r5, #0
 800ef54:	d1d4      	bne.n	800ef00 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0c9      	beq.n	800eef0 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef5c:	0020      	movs	r0, r4
 800ef5e:	3024      	adds	r0, #36	; 0x24
 800ef60:	9901      	ldr	r1, [sp, #4]
 800ef62:	f000 fcf5 	bl	800f950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef66:	0020      	movs	r0, r4
 800ef68:	f7ff fd9a 	bl	800eaa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef6c:	f000 fb50 	bl	800f610 <xTaskResumeAll>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d1ca      	bne.n	800ef0a <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800ef74:	f001 f9da 	bl	801032c <vPortYield>
 800ef78:	e7c7      	b.n	800ef0a <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800ef7a:	0020      	movs	r0, r4
 800ef7c:	f7ff fd90 	bl	800eaa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef80:	f000 fb46 	bl	800f610 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800ef84:	2000      	movs	r0, #0
 800ef86:	e796      	b.n	800eeb6 <xQueueGenericReceive+0x80>

0800ef88 <xQueueReceiveFromISR>:
{
 800ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	0004      	movs	r4, r0
 800ef8e:	000f      	movs	r7, r1
 800ef90:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d006      	beq.n	800efa4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef96:	2900      	cmp	r1, #0
 800ef98:	d106      	bne.n	800efa8 <xQueueReceiveFromISR+0x20>
 800ef9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d003      	beq.n	800efa8 <xQueueReceiveFromISR+0x20>
 800efa0:	b672      	cpsid	i
 800efa2:	e7fe      	b.n	800efa2 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800efa4:	b672      	cpsid	i
 800efa6:	e7fe      	b.n	800efa6 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efa8:	f001 f9e8 	bl	801037c <ulSetInterruptMaskFromISR>
 800efac:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800efb0:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d01b      	beq.n	800efee <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800efb6:	0039      	movs	r1, r7
 800efb8:	0020      	movs	r0, r4
 800efba:	f7ff fd5f 	bl	800ea7c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800efbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efc0:	3b01      	subs	r3, #1
 800efc2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800efc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800efc6:	3301      	adds	r3, #1
 800efc8:	d004      	beq.n	800efd4 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800efca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800efcc:	3301      	adds	r3, #1
 800efce:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800efd0:	2501      	movs	r5, #1
 800efd2:	e00c      	b.n	800efee <xQueueReceiveFromISR+0x66>
 800efd4:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efd6:	6923      	ldr	r3, [r4, #16]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d008      	beq.n	800efee <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efdc:	0020      	movs	r0, r4
 800efde:	3010      	adds	r0, #16
 800efe0:	f000 fcf4 	bl	800f9cc <xTaskRemoveFromEventList>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d002      	beq.n	800efee <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800efe8:	2e00      	cmp	r6, #0
 800efea:	d006      	beq.n	800effa <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800efec:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800efee:	9801      	ldr	r0, [sp, #4]
 800eff0:	f001 f9c9 	bl	8010386 <vClearInterruptMaskFromISR>
}
 800eff4:	0028      	movs	r0, r5
 800eff6:	b003      	add	sp, #12
 800eff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800effa:	2501      	movs	r5, #1
 800effc:	e7f7      	b.n	800efee <xQueueReceiveFromISR+0x66>
	...

0800f000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f000:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f002:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <vQueueAddToRegistry+0x2c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f00a:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f00c:	4c07      	ldr	r4, [pc, #28]	; (800f02c <vQueueAddToRegistry+0x2c>)
 800f00e:	00da      	lsls	r2, r3, #3
 800f010:	58a2      	ldr	r2, [r4, r2]
 800f012:	2a00      	cmp	r2, #0
 800f014:	d004      	beq.n	800f020 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f016:	3301      	adds	r3, #1
 800f018:	2b08      	cmp	r3, #8
 800f01a:	d1f8      	bne.n	800f00e <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f01c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f01e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f020:	4a02      	ldr	r2, [pc, #8]	; (800f02c <vQueueAddToRegistry+0x2c>)
 800f022:	00db      	lsls	r3, r3, #3
 800f024:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f026:	18d3      	adds	r3, r2, r3
 800f028:	6058      	str	r0, [r3, #4]
				break;
 800f02a:	e7f7      	b.n	800f01c <vQueueAddToRegistry+0x1c>
 800f02c:	20006740 	.word	0x20006740

0800f030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	0004      	movs	r4, r0
 800f034:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f036:	f001 f985 	bl	8010344 <vPortEnterCritical>
 800f03a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f03c:	3301      	adds	r3, #1
 800f03e:	d00b      	beq.n	800f058 <vQueueWaitForMessageRestricted+0x28>
 800f040:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f042:	3301      	adds	r3, #1
 800f044:	d00b      	beq.n	800f05e <vQueueWaitForMessageRestricted+0x2e>
 800f046:	f001 f989 	bl	801035c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f04a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d009      	beq.n	800f064 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f050:	0020      	movs	r0, r4
 800f052:	f7ff fd25 	bl	800eaa0 <prvUnlockQueue>
	}
 800f056:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f058:	2300      	movs	r3, #0
 800f05a:	6463      	str	r3, [r4, #68]	; 0x44
 800f05c:	e7f0      	b.n	800f040 <vQueueWaitForMessageRestricted+0x10>
 800f05e:	2300      	movs	r3, #0
 800f060:	64a3      	str	r3, [r4, #72]	; 0x48
 800f062:	e7f0      	b.n	800f046 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f064:	0020      	movs	r0, r4
 800f066:	3024      	adds	r0, #36	; 0x24
 800f068:	0029      	movs	r1, r5
 800f06a:	f000 fc95 	bl	800f998 <vTaskPlaceOnEventListRestricted>
 800f06e:	e7ef      	b.n	800f050 <vQueueWaitForMessageRestricted+0x20>

0800f070 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f072:	46d6      	mov	lr, sl
 800f074:	464f      	mov	r7, r9
 800f076:	4646      	mov	r6, r8
 800f078:	b5c0      	push	{r6, r7, lr}
 800f07a:	0006      	movs	r6, r0
 800f07c:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f07e:	6808      	ldr	r0, [r1, #0]
 800f080:	2800      	cmp	r0, #0
 800f082:	d044      	beq.n	800f10e <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f084:	684b      	ldr	r3, [r1, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	604b      	str	r3, [r1, #4]
 800f08a:	2208      	movs	r2, #8
 800f08c:	4690      	mov	r8, r2
 800f08e:	4488      	add	r8, r1
 800f090:	4543      	cmp	r3, r8
 800f092:	d006      	beq.n	800f0a2 <prvListTaskWithinSingleList+0x32>
 800f094:	684b      	ldr	r3, [r1, #4]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f09a:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f09c:	2302      	movs	r3, #2
 800f09e:	469a      	mov	sl, r3
 800f0a0:	e018      	b.n	800f0d4 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f0a2:	68cb      	ldr	r3, [r1, #12]
 800f0a4:	604b      	str	r3, [r1, #4]
 800f0a6:	e7f5      	b.n	800f094 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f0a8:	68cb      	ldr	r3, [r1, #12]
 800f0aa:	604b      	str	r3, [r1, #4]
 800f0ac:	e017      	b.n	800f0de <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f0ae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f0b0:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f0b2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f0b4:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f0b6:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f0b8:	783b      	ldrb	r3, [r7, #0]
 800f0ba:	2ba5      	cmp	r3, #165	; 0xa5
 800f0bc:	d125      	bne.n	800f10a <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f0be:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f0c0:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f0c2:	5cfc      	ldrb	r4, [r7, r3]
 800f0c4:	2ca5      	cmp	r4, #165	; 0xa5
 800f0c6:	d0fb      	beq.n	800f0c0 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f0c8:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f0ca:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f0d0:	45a9      	cmp	r9, r5
 800f0d2:	d01c      	beq.n	800f10e <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f0d4:	684b      	ldr	r3, [r1, #4]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	604b      	str	r3, [r1, #4]
 800f0da:	4598      	cmp	r8, r3
 800f0dc:	d0e4      	beq.n	800f0a8 <prvListTaskWithinSingleList+0x38>
 800f0de:	684b      	ldr	r3, [r1, #4]
 800f0e0:	68dd      	ldr	r5, [r3, #12]
 800f0e2:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f0e4:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f0e6:	002b      	movs	r3, r5
 800f0e8:	3334      	adds	r3, #52	; 0x34
 800f0ea:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f0ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f0ee:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f0f0:	4663      	mov	r3, ip
 800f0f2:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f0f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f0f6:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f0f8:	4663      	mov	r3, ip
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d1d7      	bne.n	800f0ae <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f0fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f100:	2b00      	cmp	r3, #0
 800f102:	d0d4      	beq.n	800f0ae <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f104:	4653      	mov	r3, sl
 800f106:	7333      	strb	r3, [r6, #12]
 800f108:	e7d1      	b.n	800f0ae <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f10a:	2300      	movs	r3, #0
 800f10c:	e7dc      	b.n	800f0c8 <prvListTaskWithinSingleList+0x58>
	}
 800f10e:	bc1c      	pop	{r2, r3, r4}
 800f110:	4690      	mov	r8, r2
 800f112:	4699      	mov	r9, r3
 800f114:	46a2      	mov	sl, r4
 800f116:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f118 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f118:	4b08      	ldr	r3, [pc, #32]	; (800f13c <prvResetNextTaskUnblockTime+0x24>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d007      	beq.n	800f132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f122:	4b06      	ldr	r3, [pc, #24]	; (800f13c <prvResetNextTaskUnblockTime+0x24>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	4b04      	ldr	r3, [pc, #16]	; (800f140 <prvResetNextTaskUnblockTime+0x28>)
 800f12e:	601a      	str	r2, [r3, #0]
	}
}
 800f130:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f132:	4b03      	ldr	r3, [pc, #12]	; (800f140 <prvResetNextTaskUnblockTime+0x28>)
 800f134:	2201      	movs	r2, #1
 800f136:	4252      	negs	r2, r2
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	e7f9      	b.n	800f130 <prvResetNextTaskUnblockTime+0x18>
 800f13c:	2000163c 	.word	0x2000163c
 800f140:	200000bc 	.word	0x200000bc

0800f144 <prvAddCurrentTaskToDelayedList>:
{
 800f144:	b510      	push	{r4, lr}
 800f146:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f148:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <prvAddCurrentTaskToDelayedList+0x40>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f14e:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <prvAddCurrentTaskToDelayedList+0x44>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4283      	cmp	r3, r0
 800f154:	d80d      	bhi.n	800f172 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f156:	4b0d      	ldr	r3, [pc, #52]	; (800f18c <prvAddCurrentTaskToDelayedList+0x48>)
 800f158:	6818      	ldr	r0, [r3, #0]
 800f15a:	4b0a      	ldr	r3, [pc, #40]	; (800f184 <prvAddCurrentTaskToDelayedList+0x40>)
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	3104      	adds	r1, #4
 800f160:	f7ff fc24 	bl	800e9ac <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f164:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	42a3      	cmp	r3, r4
 800f16a:	d909      	bls.n	800f180 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f16c:	4b08      	ldr	r3, [pc, #32]	; (800f190 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f16e:	601c      	str	r4, [r3, #0]
}
 800f170:	e006      	b.n	800f180 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f172:	4b08      	ldr	r3, [pc, #32]	; (800f194 <prvAddCurrentTaskToDelayedList+0x50>)
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	4b03      	ldr	r3, [pc, #12]	; (800f184 <prvAddCurrentTaskToDelayedList+0x40>)
 800f178:	6819      	ldr	r1, [r3, #0]
 800f17a:	3104      	adds	r1, #4
 800f17c:	f7ff fc16 	bl	800e9ac <vListInsert>
}
 800f180:	bd10      	pop	{r4, pc}
 800f182:	46c0      	nop			; (mov r8, r8)
 800f184:	20001638 	.word	0x20001638
 800f188:	20001758 	.word	0x20001758
 800f18c:	2000163c 	.word	0x2000163c
 800f190:	200000bc 	.word	0x200000bc
 800f194:	20001640 	.word	0x20001640

0800f198 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f198:	b510      	push	{r4, lr}
 800f19a:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f19c:	f005 fad2 	bl	8014744 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f1a0:	0020      	movs	r0, r4
 800f1a2:	f7f0 ffb9 	bl	8000118 <strlen>
 800f1a6:	0003      	movs	r3, r0
 800f1a8:	280b      	cmp	r0, #11
 800f1aa:	dc08      	bgt.n	800f1be <prvWriteNameToBuffer+0x26>
 800f1ac:	1820      	adds	r0, r4, r0
 800f1ae:	0022      	movs	r2, r4
 800f1b0:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f1b2:	2320      	movs	r3, #32
 800f1b4:	7003      	strb	r3, [r0, #0]
 800f1b6:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f1b8:	4290      	cmp	r0, r2
 800f1ba:	d1fb      	bne.n	800f1b4 <prvWriteNameToBuffer+0x1c>
 800f1bc:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f1be:	18e0      	adds	r0, r4, r3
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f1c4:	bd10      	pop	{r4, pc}
	...

0800f1c8 <xTaskGenericCreate>:
{
 800f1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ca:	46d6      	mov	lr, sl
 800f1cc:	4647      	mov	r7, r8
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b085      	sub	sp, #20
 800f1d2:	9002      	str	r0, [sp, #8]
 800f1d4:	000d      	movs	r5, r1
 800f1d6:	0016      	movs	r6, r2
 800f1d8:	9303      	str	r3, [sp, #12]
 800f1da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d101      	bne.n	800f1e4 <xTaskGenericCreate+0x1c>
 800f1e0:	b672      	cpsid	i
 800f1e2:	e7fe      	b.n	800f1e2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f1e4:	2f06      	cmp	r7, #6
 800f1e6:	d901      	bls.n	800f1ec <xTaskGenericCreate+0x24>
 800f1e8:	b672      	cpsid	i
 800f1ea:	e7fe      	b.n	800f1ea <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d106      	bne.n	800f200 <xTaskGenericCreate+0x38>
 800f1f2:	0090      	lsls	r0, r2, #2
 800f1f4:	f001 f928 	bl	8010448 <pvPortMalloc>
 800f1f8:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d100      	bne.n	800f200 <xTaskGenericCreate+0x38>
 800f1fe:	e0b7      	b.n	800f370 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f200:	2060      	movs	r0, #96	; 0x60
 800f202:	f001 f921 	bl	8010448 <pvPortMalloc>
 800f206:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f208:	d100      	bne.n	800f20c <xTaskGenericCreate+0x44>
 800f20a:	e08b      	b.n	800f324 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f20c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f20e:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f210:	00b2      	lsls	r2, r6, #2
 800f212:	21a5      	movs	r1, #165	; 0xa5
 800f214:	0018      	movs	r0, r3
 800f216:	f004 fccb 	bl	8013bb0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f21a:	4b57      	ldr	r3, [pc, #348]	; (800f378 <xTaskGenericCreate+0x1b0>)
 800f21c:	18f3      	adds	r3, r6, r3
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f222:	4694      	mov	ip, r2
 800f224:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f226:	2207      	movs	r2, #7
 800f228:	4393      	bics	r3, r2
 800f22a:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f22c:	782a      	ldrb	r2, [r5, #0]
 800f22e:	2334      	movs	r3, #52	; 0x34
 800f230:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f232:	782b      	ldrb	r3, [r5, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d000      	beq.n	800f23a <xTaskGenericCreate+0x72>
 800f238:	e07e      	b.n	800f338 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f23a:	2500      	movs	r5, #0
 800f23c:	2340      	movs	r3, #64	; 0x40
 800f23e:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f240:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f242:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f244:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f246:	1d23      	adds	r3, r4, #4
 800f248:	9301      	str	r3, [sp, #4]
 800f24a:	0018      	movs	r0, r3
 800f24c:	f7ff fb9f 	bl	800e98e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f250:	0020      	movs	r0, r4
 800f252:	3018      	adds	r0, #24
 800f254:	f7ff fb9b 	bl	800e98e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f258:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f25a:	2307      	movs	r3, #7
 800f25c:	1bdb      	subs	r3, r3, r7
 800f25e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f260:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f262:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f264:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f266:	235c      	movs	r3, #92	; 0x5c
 800f268:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f26a:	9a03      	ldr	r2, [sp, #12]
 800f26c:	9902      	ldr	r1, [sp, #8]
 800f26e:	4650      	mov	r0, sl
 800f270:	f001 f820 	bl	80102b4 <pxPortInitialiseStack>
 800f274:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f278:	42ab      	cmp	r3, r5
 800f27a:	d000      	beq.n	800f27e <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f27c:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f27e:	f001 f861 	bl	8010344 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f282:	4a3e      	ldr	r2, [pc, #248]	; (800f37c <xTaskGenericCreate+0x1b4>)
 800f284:	6813      	ldr	r3, [r2, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f28a:	4b3d      	ldr	r3, [pc, #244]	; (800f380 <xTaskGenericCreate+0x1b8>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d162      	bne.n	800f358 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f292:	4b3b      	ldr	r3, [pc, #236]	; (800f380 <xTaskGenericCreate+0x1b8>)
 800f294:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f296:	6813      	ldr	r3, [r2, #0]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d120      	bne.n	800f2de <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f29c:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f29e:	3313      	adds	r3, #19
 800f2a0:	4698      	mov	r8, r3
 800f2a2:	4e38      	ldr	r6, [pc, #224]	; (800f384 <xTaskGenericCreate+0x1bc>)
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	4368      	muls	r0, r5
 800f2a8:	1980      	adds	r0, r0, r6
 800f2aa:	f7ff fb65 	bl	800e978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2ae:	3501      	adds	r5, #1
 800f2b0:	2d07      	cmp	r5, #7
 800f2b2:	d1f7      	bne.n	800f2a4 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f2b4:	4e34      	ldr	r6, [pc, #208]	; (800f388 <xTaskGenericCreate+0x1c0>)
 800f2b6:	0030      	movs	r0, r6
 800f2b8:	f7ff fb5e 	bl	800e978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2bc:	4d33      	ldr	r5, [pc, #204]	; (800f38c <xTaskGenericCreate+0x1c4>)
 800f2be:	0028      	movs	r0, r5
 800f2c0:	f7ff fb5a 	bl	800e978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2c4:	4832      	ldr	r0, [pc, #200]	; (800f390 <xTaskGenericCreate+0x1c8>)
 800f2c6:	f7ff fb57 	bl	800e978 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f2ca:	4832      	ldr	r0, [pc, #200]	; (800f394 <xTaskGenericCreate+0x1cc>)
 800f2cc:	f7ff fb54 	bl	800e978 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f2d0:	4831      	ldr	r0, [pc, #196]	; (800f398 <xTaskGenericCreate+0x1d0>)
 800f2d2:	f7ff fb51 	bl	800e978 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2d6:	4b31      	ldr	r3, [pc, #196]	; (800f39c <xTaskGenericCreate+0x1d4>)
 800f2d8:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2da:	4b31      	ldr	r3, [pc, #196]	; (800f3a0 <xTaskGenericCreate+0x1d8>)
 800f2dc:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f2de:	4a31      	ldr	r2, [pc, #196]	; (800f3a4 <xTaskGenericCreate+0x1dc>)
 800f2e0:	6813      	ldr	r3, [r2, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2e6:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f2e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2ea:	4a2f      	ldr	r2, [pc, #188]	; (800f3a8 <xTaskGenericCreate+0x1e0>)
 800f2ec:	6812      	ldr	r2, [r2, #0]
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d901      	bls.n	800f2f6 <xTaskGenericCreate+0x12e>
 800f2f2:	4a2d      	ldr	r2, [pc, #180]	; (800f3a8 <xTaskGenericCreate+0x1e0>)
 800f2f4:	6013      	str	r3, [r2, #0]
 800f2f6:	2014      	movs	r0, #20
 800f2f8:	4358      	muls	r0, r3
 800f2fa:	4b22      	ldr	r3, [pc, #136]	; (800f384 <xTaskGenericCreate+0x1bc>)
 800f2fc:	18c0      	adds	r0, r0, r3
 800f2fe:	9901      	ldr	r1, [sp, #4]
 800f300:	f7ff fb48 	bl	800e994 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f304:	f001 f82a 	bl	801035c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f308:	4b28      	ldr	r3, [pc, #160]	; (800f3ac <xTaskGenericCreate+0x1e4>)
 800f30a:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f30c:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00d      	beq.n	800f32e <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f312:	4b1b      	ldr	r3, [pc, #108]	; (800f380 <xTaskGenericCreate+0x1b8>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	42bb      	cmp	r3, r7
 800f31a:	d208      	bcs.n	800f32e <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f31c:	f001 f806 	bl	801032c <vPortYield>
			xReturn = pdPASS;
 800f320:	2001      	movs	r0, #1
 800f322:	e004      	b.n	800f32e <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f324:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f326:	f001 f925 	bl	8010574 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f32a:	2001      	movs	r0, #1
 800f32c:	4240      	negs	r0, r0
}
 800f32e:	b005      	add	sp, #20
 800f330:	bc0c      	pop	{r2, r3}
 800f332:	4690      	mov	r8, r2
 800f334:	469a      	mov	sl, r3
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	1c6b      	adds	r3, r5, #1
 800f33a:	0022      	movs	r2, r4
 800f33c:	3235      	adds	r2, #53	; 0x35
 800f33e:	0021      	movs	r1, r4
 800f340:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f342:	7818      	ldrb	r0, [r3, #0]
 800f344:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f346:	7818      	ldrb	r0, [r3, #0]
 800f348:	2800      	cmp	r0, #0
 800f34a:	d100      	bne.n	800f34e <xTaskGenericCreate+0x186>
 800f34c:	e775      	b.n	800f23a <xTaskGenericCreate+0x72>
 800f34e:	3301      	adds	r3, #1
 800f350:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f352:	4291      	cmp	r1, r2
 800f354:	d1f5      	bne.n	800f342 <xTaskGenericCreate+0x17a>
 800f356:	e770      	b.n	800f23a <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f358:	4b14      	ldr	r3, [pc, #80]	; (800f3ac <xTaskGenericCreate+0x1e4>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d1be      	bne.n	800f2de <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <xTaskGenericCreate+0x1b8>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f366:	42bb      	cmp	r3, r7
 800f368:	d8b9      	bhi.n	800f2de <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f36a:	4b05      	ldr	r3, [pc, #20]	; (800f380 <xTaskGenericCreate+0x1b8>)
 800f36c:	601c      	str	r4, [r3, #0]
 800f36e:	e7b6      	b.n	800f2de <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f370:	2001      	movs	r0, #1
 800f372:	4240      	negs	r0, r0
 800f374:	e7db      	b.n	800f32e <xTaskGenericCreate+0x166>
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	3fffffff 	.word	0x3fffffff
 800f37c:	200016d4 	.word	0x200016d4
 800f380:	20001638 	.word	0x20001638
 800f384:	20001644 	.word	0x20001644
 800f388:	200016ec 	.word	0x200016ec
 800f38c:	20001700 	.word	0x20001700
 800f390:	20001718 	.word	0x20001718
 800f394:	20001744 	.word	0x20001744
 800f398:	20001730 	.word	0x20001730
 800f39c:	2000163c 	.word	0x2000163c
 800f3a0:	20001640 	.word	0x20001640
 800f3a4:	200016e0 	.word	0x200016e0
 800f3a8:	200016e8 	.word	0x200016e8
 800f3ac:	2000172c 	.word	0x2000172c

0800f3b0 <uxTaskPriorityGet>:
	{
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f3b4:	f000 ffc6 	bl	8010344 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	d004      	beq.n	800f3c6 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f3bc:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f3be:	f000 ffcd 	bl	801035c <vPortExitCritical>
	}
 800f3c2:	0020      	movs	r0, r4
 800f3c4:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f3c6:	4b01      	ldr	r3, [pc, #4]	; (800f3cc <uxTaskPriorityGet+0x1c>)
 800f3c8:	681c      	ldr	r4, [r3, #0]
 800f3ca:	e7f7      	b.n	800f3bc <uxTaskPriorityGet+0xc>
 800f3cc:	20001638 	.word	0x20001638

0800f3d0 <vTaskPrioritySet>:
	{
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	0004      	movs	r4, r0
 800f3d4:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f3d6:	2906      	cmp	r1, #6
 800f3d8:	d901      	bls.n	800f3de <vTaskPrioritySet+0xe>
 800f3da:	b672      	cpsid	i
 800f3dc:	e7fe      	b.n	800f3dc <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f3de:	f000 ffb1 	bl	8010344 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f3e2:	2c00      	cmp	r4, #0
 800f3e4:	d101      	bne.n	800f3ea <vTaskPrioritySet+0x1a>
 800f3e6:	4b21      	ldr	r3, [pc, #132]	; (800f46c <vTaskPrioritySet+0x9c>)
 800f3e8:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f3ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f3ec:	4295      	cmp	r5, r2
 800f3ee:	d032      	beq.n	800f456 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f3f0:	d934      	bls.n	800f45c <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f3f2:	4b1e      	ldr	r3, [pc, #120]	; (800f46c <vTaskPrioritySet+0x9c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	d036      	beq.n	800f468 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f3fa:	4b1c      	ldr	r3, [pc, #112]	; (800f46c <vTaskPrioritySet+0x9c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f400:	2600      	movs	r6, #0
 800f402:	429d      	cmp	r5, r3
 800f404:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f406:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f408:	428a      	cmp	r2, r1
 800f40a:	d100      	bne.n	800f40e <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f40c:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f40e:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f410:	69a3      	ldr	r3, [r4, #24]
 800f412:	2b00      	cmp	r3, #0
 800f414:	db02      	blt.n	800f41c <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f416:	2207      	movs	r2, #7
 800f418:	1b55      	subs	r5, r2, r5
 800f41a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f41c:	2314      	movs	r3, #20
 800f41e:	434b      	muls	r3, r1
 800f420:	4a13      	ldr	r2, [pc, #76]	; (800f470 <vTaskPrioritySet+0xa0>)
 800f422:	189b      	adds	r3, r3, r2
 800f424:	6962      	ldr	r2, [r4, #20]
 800f426:	429a      	cmp	r2, r3
 800f428:	d111      	bne.n	800f44e <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f42a:	1d25      	adds	r5, r4, #4
 800f42c:	0028      	movs	r0, r5
 800f42e:	f7ff fad4 	bl	800e9da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f434:	4a0f      	ldr	r2, [pc, #60]	; (800f474 <vTaskPrioritySet+0xa4>)
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	4293      	cmp	r3, r2
 800f43a:	d901      	bls.n	800f440 <vTaskPrioritySet+0x70>
 800f43c:	4a0d      	ldr	r2, [pc, #52]	; (800f474 <vTaskPrioritySet+0xa4>)
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	2014      	movs	r0, #20
 800f442:	4358      	muls	r0, r3
 800f444:	4b0a      	ldr	r3, [pc, #40]	; (800f470 <vTaskPrioritySet+0xa0>)
 800f446:	18c0      	adds	r0, r0, r3
 800f448:	0029      	movs	r1, r5
 800f44a:	f7ff faa3 	bl	800e994 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f44e:	2e01      	cmp	r6, #1
 800f450:	d101      	bne.n	800f456 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f452:	f000 ff6b 	bl	801032c <vPortYield>
		taskEXIT_CRITICAL();
 800f456:	f000 ff81 	bl	801035c <vPortExitCritical>
	}
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f45c:	4b03      	ldr	r3, [pc, #12]	; (800f46c <vTaskPrioritySet+0x9c>)
 800f45e:	681e      	ldr	r6, [r3, #0]
 800f460:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f462:	4273      	negs	r3, r6
 800f464:	415e      	adcs	r6, r3
 800f466:	e7ce      	b.n	800f406 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f468:	2600      	movs	r6, #0
 800f46a:	e7cc      	b.n	800f406 <vTaskPrioritySet+0x36>
 800f46c:	20001638 	.word	0x20001638
 800f470:	20001644 	.word	0x20001644
 800f474:	200016e8 	.word	0x200016e8

0800f478 <vTaskStartScheduler>:
{
 800f478:	b500      	push	{lr}
 800f47a:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f47c:	2300      	movs	r3, #0
 800f47e:	9303      	str	r3, [sp, #12]
 800f480:	9302      	str	r3, [sp, #8]
 800f482:	9301      	str	r3, [sp, #4]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	22a0      	movs	r2, #160	; 0xa0
 800f488:	490d      	ldr	r1, [pc, #52]	; (800f4c0 <vTaskStartScheduler+0x48>)
 800f48a:	480e      	ldr	r0, [pc, #56]	; (800f4c4 <vTaskStartScheduler+0x4c>)
 800f48c:	f7ff fe9c 	bl	800f1c8 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f490:	2801      	cmp	r0, #1
 800f492:	d003      	beq.n	800f49c <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f494:	2800      	cmp	r0, #0
 800f496:	d110      	bne.n	800f4ba <vTaskStartScheduler+0x42>
 800f498:	b672      	cpsid	i
 800f49a:	e7fe      	b.n	800f49a <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f49c:	f000 fd68 	bl	800ff70 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f4a0:	2801      	cmp	r0, #1
 800f4a2:	d1f7      	bne.n	800f494 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f4a4:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <vTaskStartScheduler+0x50>)
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f4ac:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <vTaskStartScheduler+0x54>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f4b2:	f7f8 fffb 	bl	80084ac <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f4b6:	f000 ff0f 	bl	80102d8 <xPortStartScheduler>
}
 800f4ba:	b005      	add	sp, #20
 800f4bc:	bd00      	pop	{pc}
 800f4be:	46c0      	nop			; (mov r8, r8)
 800f4c0:	0801a5dc 	.word	0x0801a5dc
 800f4c4:	0800f739 	.word	0x0800f739
 800f4c8:	2000172c 	.word	0x2000172c
 800f4cc:	20001758 	.word	0x20001758

0800f4d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f4d0:	4a02      	ldr	r2, [pc, #8]	; (800f4dc <vTaskSuspendAll+0xc>)
 800f4d2:	6813      	ldr	r3, [r2, #0]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	6013      	str	r3, [r2, #0]
}
 800f4d8:	4770      	bx	lr
 800f4da:	46c0      	nop			; (mov r8, r8)
 800f4dc:	200016dc 	.word	0x200016dc

0800f4e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f4e0:	4b01      	ldr	r3, [pc, #4]	; (800f4e8 <xTaskGetTickCount+0x8>)
 800f4e2:	6818      	ldr	r0, [r3, #0]
}
 800f4e4:	4770      	bx	lr
 800f4e6:	46c0      	nop			; (mov r8, r8)
 800f4e8:	20001758 	.word	0x20001758

0800f4ec <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f4ec:	4b01      	ldr	r3, [pc, #4]	; (800f4f4 <xTaskGetTickCountFromISR+0x8>)
 800f4ee:	6818      	ldr	r0, [r3, #0]
}
 800f4f0:	4770      	bx	lr
 800f4f2:	46c0      	nop			; (mov r8, r8)
 800f4f4:	20001758 	.word	0x20001758

0800f4f8 <xTaskIncrementTick>:
{
 800f4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4fa:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4fc:	4b39      	ldr	r3, [pc, #228]	; (800f5e4 <xTaskIncrementTick+0xec>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d161      	bne.n	800f5c8 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f504:	4b38      	ldr	r3, [pc, #224]	; (800f5e8 <xTaskIncrementTick+0xf0>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	3201      	adds	r2, #1
 800f50a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f50c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f50e:	2e00      	cmp	r6, #0
 800f510:	d112      	bne.n	800f538 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f512:	4b36      	ldr	r3, [pc, #216]	; (800f5ec <xTaskIncrementTick+0xf4>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <xTaskIncrementTick+0x28>
 800f51c:	b672      	cpsid	i
 800f51e:	e7fe      	b.n	800f51e <xTaskIncrementTick+0x26>
 800f520:	4a32      	ldr	r2, [pc, #200]	; (800f5ec <xTaskIncrementTick+0xf4>)
 800f522:	6811      	ldr	r1, [r2, #0]
 800f524:	4b32      	ldr	r3, [pc, #200]	; (800f5f0 <xTaskIncrementTick+0xf8>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	6010      	str	r0, [r2, #0]
 800f52a:	6019      	str	r1, [r3, #0]
 800f52c:	4a31      	ldr	r2, [pc, #196]	; (800f5f4 <xTaskIncrementTick+0xfc>)
 800f52e:	6813      	ldr	r3, [r2, #0]
 800f530:	3301      	adds	r3, #1
 800f532:	6013      	str	r3, [r2, #0]
 800f534:	f7ff fdf0 	bl	800f118 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f538:	4b2f      	ldr	r3, [pc, #188]	; (800f5f8 <xTaskIncrementTick+0x100>)
 800f53a:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f53c:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f53e:	42b3      	cmp	r3, r6
 800f540:	d833      	bhi.n	800f5aa <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f542:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f544:	4d29      	ldr	r5, [pc, #164]	; (800f5ec <xTaskIncrementTick+0xf4>)
 800f546:	682b      	ldr	r3, [r5, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d029      	beq.n	800f5a2 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f54e:	4b27      	ldr	r3, [pc, #156]	; (800f5ec <xTaskIncrementTick+0xf4>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f556:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f558:	429e      	cmp	r6, r3
 800f55a:	d332      	bcc.n	800f5c2 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f55c:	1d23      	adds	r3, r4, #4
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	0018      	movs	r0, r3
 800f562:	f7ff fa3a 	bl	800e9da <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f56c:	0020      	movs	r0, r4
 800f56e:	3018      	adds	r0, #24
 800f570:	f7ff fa33 	bl	800e9da <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f576:	4a21      	ldr	r2, [pc, #132]	; (800f5fc <xTaskIncrementTick+0x104>)
 800f578:	6812      	ldr	r2, [r2, #0]
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d901      	bls.n	800f582 <xTaskIncrementTick+0x8a>
 800f57e:	4a1f      	ldr	r2, [pc, #124]	; (800f5fc <xTaskIncrementTick+0x104>)
 800f580:	6013      	str	r3, [r2, #0]
 800f582:	0098      	lsls	r0, r3, #2
 800f584:	18c0      	adds	r0, r0, r3
 800f586:	0080      	lsls	r0, r0, #2
 800f588:	4b1d      	ldr	r3, [pc, #116]	; (800f600 <xTaskIncrementTick+0x108>)
 800f58a:	18c0      	adds	r0, r0, r3
 800f58c:	9901      	ldr	r1, [sp, #4]
 800f58e:	f7ff fa01 	bl	800e994 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f592:	4b1c      	ldr	r3, [pc, #112]	; (800f604 <xTaskIncrementTick+0x10c>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d3d3      	bcc.n	800f546 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f59e:	2701      	movs	r7, #1
 800f5a0:	e7d1      	b.n	800f546 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f5a2:	4b15      	ldr	r3, [pc, #84]	; (800f5f8 <xTaskIncrementTick+0x100>)
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	4252      	negs	r2, r2
 800f5a8:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f5aa:	4b16      	ldr	r3, [pc, #88]	; (800f604 <xTaskIncrementTick+0x10c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b0:	0093      	lsls	r3, r2, #2
 800f5b2:	189b      	adds	r3, r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4a12      	ldr	r2, [pc, #72]	; (800f600 <xTaskIncrementTick+0x108>)
 800f5b8:	589b      	ldr	r3, [r3, r2]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d909      	bls.n	800f5d2 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f5be:	2701      	movs	r7, #1
 800f5c0:	e007      	b.n	800f5d2 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f5c2:	4a0d      	ldr	r2, [pc, #52]	; (800f5f8 <xTaskIncrementTick+0x100>)
 800f5c4:	6013      	str	r3, [r2, #0]
							break;
 800f5c6:	e7f0      	b.n	800f5aa <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f5c8:	4a0f      	ldr	r2, [pc, #60]	; (800f608 <xTaskIncrementTick+0x110>)
 800f5ca:	6813      	ldr	r3, [r2, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f5d0:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f5d2:	4b0e      	ldr	r3, [pc, #56]	; (800f60c <xTaskIncrementTick+0x114>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d000      	beq.n	800f5dc <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f5da:	2701      	movs	r7, #1
}
 800f5dc:	0038      	movs	r0, r7
 800f5de:	b003      	add	sp, #12
 800f5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5e2:	46c0      	nop			; (mov r8, r8)
 800f5e4:	200016dc 	.word	0x200016dc
 800f5e8:	20001758 	.word	0x20001758
 800f5ec:	2000163c 	.word	0x2000163c
 800f5f0:	20001640 	.word	0x20001640
 800f5f4:	20001714 	.word	0x20001714
 800f5f8:	200000bc 	.word	0x200000bc
 800f5fc:	200016e8 	.word	0x200016e8
 800f600:	20001644 	.word	0x20001644
 800f604:	20001638 	.word	0x20001638
 800f608:	200016d8 	.word	0x200016d8
 800f60c:	2000175c 	.word	0x2000175c

0800f610 <xTaskResumeAll>:
{
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f612:	4b2f      	ldr	r3, [pc, #188]	; (800f6d0 <xTaskResumeAll+0xc0>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <xTaskResumeAll+0xe>
 800f61a:	b672      	cpsid	i
 800f61c:	e7fe      	b.n	800f61c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f61e:	f000 fe91 	bl	8010344 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f622:	4b2b      	ldr	r3, [pc, #172]	; (800f6d0 <xTaskResumeAll+0xc0>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	3a01      	subs	r2, #1
 800f628:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f62a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f62c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f62e:	42a3      	cmp	r3, r4
 800f630:	d105      	bne.n	800f63e <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f632:	4b28      	ldr	r3, [pc, #160]	; (800f6d4 <xTaskResumeAll+0xc4>)
 800f634:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f636:	4d28      	ldr	r5, [pc, #160]	; (800f6d8 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f638:	42a3      	cmp	r3, r4
 800f63a:	d12a      	bne.n	800f692 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800f63c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f63e:	f000 fe8d 	bl	801035c <vPortExitCritical>
}
 800f642:	0020      	movs	r0, r4
 800f644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800f646:	0098      	lsls	r0, r3, #2
 800f648:	18c0      	adds	r0, r0, r3
 800f64a:	0080      	lsls	r0, r0, #2
 800f64c:	4b23      	ldr	r3, [pc, #140]	; (800f6dc <xTaskResumeAll+0xcc>)
 800f64e:	18c0      	adds	r0, r0, r3
 800f650:	0021      	movs	r1, r4
 800f652:	f7ff f99f 	bl	800e994 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f656:	4b22      	ldr	r3, [pc, #136]	; (800f6e0 <xTaskResumeAll+0xd0>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65e:	429a      	cmp	r2, r3
 800f660:	d214      	bcs.n	800f68c <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f662:	6833      	ldr	r3, [r6, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d016      	beq.n	800f696 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f668:	68eb      	ldr	r3, [r5, #12]
 800f66a:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f66c:	0038      	movs	r0, r7
 800f66e:	3018      	adds	r0, #24
 800f670:	f7ff f9b3 	bl	800e9da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f674:	1d3c      	adds	r4, r7, #4
 800f676:	0020      	movs	r0, r4
 800f678:	f7ff f9af 	bl	800e9da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	4a19      	ldr	r2, [pc, #100]	; (800f6e4 <xTaskResumeAll+0xd4>)
 800f680:	6812      	ldr	r2, [r2, #0]
 800f682:	4293      	cmp	r3, r2
 800f684:	d9df      	bls.n	800f646 <xTaskResumeAll+0x36>
 800f686:	4a17      	ldr	r2, [pc, #92]	; (800f6e4 <xTaskResumeAll+0xd4>)
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	e7dc      	b.n	800f646 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800f68c:	4b16      	ldr	r3, [pc, #88]	; (800f6e8 <xTaskResumeAll+0xd8>)
 800f68e:	2201      	movs	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f692:	4e11      	ldr	r6, [pc, #68]	; (800f6d8 <xTaskResumeAll+0xc8>)
 800f694:	e7e5      	b.n	800f662 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f696:	4b15      	ldr	r3, [pc, #84]	; (800f6ec <xTaskResumeAll+0xdc>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d005      	beq.n	800f6aa <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f69e:	4e13      	ldr	r6, [pc, #76]	; (800f6ec <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800f6a0:	4c11      	ldr	r4, [pc, #68]	; (800f6e8 <xTaskResumeAll+0xd8>)
 800f6a2:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f6a4:	6833      	ldr	r3, [r6, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d108      	bne.n	800f6bc <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800f6aa:	4b0f      	ldr	r3, [pc, #60]	; (800f6e8 <xTaskResumeAll+0xd8>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6ae:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d1c4      	bne.n	800f63e <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800f6b4:	f000 fe3a 	bl	801032c <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f6b8:	3401      	adds	r4, #1
 800f6ba:	e7c0      	b.n	800f63e <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800f6bc:	f7ff ff1c 	bl	800f4f8 <xTaskIncrementTick>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d000      	beq.n	800f6c6 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800f6c4:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800f6c6:	4a09      	ldr	r2, [pc, #36]	; (800f6ec <xTaskResumeAll+0xdc>)
 800f6c8:	6813      	ldr	r3, [r2, #0]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	e7e9      	b.n	800f6a4 <xTaskResumeAll+0x94>
 800f6d0:	200016dc 	.word	0x200016dc
 800f6d4:	200016d4 	.word	0x200016d4
 800f6d8:	20001718 	.word	0x20001718
 800f6dc:	20001644 	.word	0x20001644
 800f6e0:	20001638 	.word	0x20001638
 800f6e4:	200016e8 	.word	0x200016e8
 800f6e8:	2000175c 	.word	0x2000175c
 800f6ec:	200016d8 	.word	0x200016d8

0800f6f0 <vTaskDelay>:
	{
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f6f4:	d016      	beq.n	800f724 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <vTaskDelay+0x3c>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d001      	beq.n	800f702 <vTaskDelay+0x12>
 800f6fe:	b672      	cpsid	i
 800f700:	e7fe      	b.n	800f700 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f702:	f7ff fee5 	bl	800f4d0 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f706:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <vTaskDelay+0x40>)
 800f708:	681c      	ldr	r4, [r3, #0]
 800f70a:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f70c:	4b09      	ldr	r3, [pc, #36]	; (800f734 <vTaskDelay+0x44>)
 800f70e:	6818      	ldr	r0, [r3, #0]
 800f710:	3004      	adds	r0, #4
 800f712:	f7ff f962 	bl	800e9da <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f716:	0020      	movs	r0, r4
 800f718:	f7ff fd14 	bl	800f144 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f71c:	f7ff ff78 	bl	800f610 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f720:	2800      	cmp	r0, #0
 800f722:	d101      	bne.n	800f728 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f724:	f000 fe02 	bl	801032c <vPortYield>
	}
 800f728:	bd70      	pop	{r4, r5, r6, pc}
 800f72a:	46c0      	nop			; (mov r8, r8)
 800f72c:	200016dc 	.word	0x200016dc
 800f730:	20001758 	.word	0x20001758
 800f734:	20001638 	.word	0x20001638

0800f738 <prvIdleTask>:
{
 800f738:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f73a:	4d16      	ldr	r5, [pc, #88]	; (800f794 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f73c:	4e16      	ldr	r6, [pc, #88]	; (800f798 <prvIdleTask+0x60>)
 800f73e:	e003      	b.n	800f748 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f740:	4b16      	ldr	r3, [pc, #88]	; (800f79c <prvIdleTask+0x64>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d822      	bhi.n	800f78e <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d0f8      	beq.n	800f740 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f74e:	f7ff febf 	bl	800f4d0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f752:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800f754:	f7ff ff5c 	bl	800f610 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f758:	2c00      	cmp	r4, #0
 800f75a:	d0f5      	beq.n	800f748 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f75c:	f000 fdf2 	bl	8010344 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f760:	4b0d      	ldr	r3, [pc, #52]	; (800f798 <prvIdleTask+0x60>)
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f766:	1d20      	adds	r0, r4, #4
 800f768:	f7ff f937 	bl	800e9da <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f76c:	4a0c      	ldr	r2, [pc, #48]	; (800f7a0 <prvIdleTask+0x68>)
 800f76e:	6813      	ldr	r3, [r2, #0]
 800f770:	3b01      	subs	r3, #1
 800f772:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f774:	4a07      	ldr	r2, [pc, #28]	; (800f794 <prvIdleTask+0x5c>)
 800f776:	6813      	ldr	r3, [r2, #0]
 800f778:	3b01      	subs	r3, #1
 800f77a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f77c:	f000 fdee 	bl	801035c <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f780:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f782:	f000 fef7 	bl	8010574 <vPortFree>
		vPortFree( pxTCB );
 800f786:	0020      	movs	r0, r4
 800f788:	f000 fef4 	bl	8010574 <vPortFree>
 800f78c:	e7dc      	b.n	800f748 <prvIdleTask+0x10>
				taskYIELD();
 800f78e:	f000 fdcd 	bl	801032c <vPortYield>
 800f792:	e7d9      	b.n	800f748 <prvIdleTask+0x10>
 800f794:	200016e4 	.word	0x200016e4
 800f798:	20001744 	.word	0x20001744
 800f79c:	20001644 	.word	0x20001644
 800f7a0:	200016d4 	.word	0x200016d4

0800f7a4 <uxTaskGetSystemState>:
	{
 800f7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a6:	46c6      	mov	lr, r8
 800f7a8:	b500      	push	{lr}
 800f7aa:	0006      	movs	r6, r0
 800f7ac:	000d      	movs	r5, r1
 800f7ae:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f7b0:	f7ff fe8e 	bl	800f4d0 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f7b4:	4b1e      	ldr	r3, [pc, #120]	; (800f830 <uxTaskGetSystemState+0x8c>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f7b8:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f7ba:	42ab      	cmp	r3, r5
 800f7bc:	d831      	bhi.n	800f822 <uxTaskGetSystemState+0x7e>
 800f7be:	4d1d      	ldr	r5, [pc, #116]	; (800f834 <uxTaskGetSystemState+0x90>)
 800f7c0:	002f      	movs	r7, r5
 800f7c2:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f7c4:	0160      	lsls	r0, r4, #5
 800f7c6:	1830      	adds	r0, r6, r0
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	0029      	movs	r1, r5
 800f7cc:	f7ff fc50 	bl	800f070 <prvListTaskWithinSingleList>
 800f7d0:	1824      	adds	r4, r4, r0
 800f7d2:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7d4:	42bd      	cmp	r5, r7
 800f7d6:	d1f5      	bne.n	800f7c4 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f7d8:	4b17      	ldr	r3, [pc, #92]	; (800f838 <uxTaskGetSystemState+0x94>)
 800f7da:	6819      	ldr	r1, [r3, #0]
 800f7dc:	0160      	lsls	r0, r4, #5
 800f7de:	1830      	adds	r0, r6, r0
 800f7e0:	2202      	movs	r2, #2
 800f7e2:	f7ff fc45 	bl	800f070 <prvListTaskWithinSingleList>
 800f7e6:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f7e8:	4b14      	ldr	r3, [pc, #80]	; (800f83c <uxTaskGetSystemState+0x98>)
 800f7ea:	6819      	ldr	r1, [r3, #0]
 800f7ec:	0160      	lsls	r0, r4, #5
 800f7ee:	1830      	adds	r0, r6, r0
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	f7ff fc3d 	bl	800f070 <prvListTaskWithinSingleList>
 800f7f6:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f7f8:	0160      	lsls	r0, r4, #5
 800f7fa:	1830      	adds	r0, r6, r0
 800f7fc:	2204      	movs	r2, #4
 800f7fe:	4910      	ldr	r1, [pc, #64]	; (800f840 <uxTaskGetSystemState+0x9c>)
 800f800:	f7ff fc36 	bl	800f070 <prvListTaskWithinSingleList>
 800f804:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f806:	0160      	lsls	r0, r4, #5
 800f808:	1830      	adds	r0, r6, r0
 800f80a:	2203      	movs	r2, #3
 800f80c:	490d      	ldr	r1, [pc, #52]	; (800f844 <uxTaskGetSystemState+0xa0>)
 800f80e:	f7ff fc2f 	bl	800f070 <prvListTaskWithinSingleList>
 800f812:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f814:	4643      	mov	r3, r8
 800f816:	2b00      	cmp	r3, #0
 800f818:	d003      	beq.n	800f822 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f81a:	f7f8 fe57 	bl	80084cc <ulMainGetRunTimeCounterValue>
 800f81e:	4643      	mov	r3, r8
 800f820:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f822:	f7ff fef5 	bl	800f610 <xTaskResumeAll>
	}
 800f826:	0020      	movs	r0, r4
 800f828:	bc04      	pop	{r2}
 800f82a:	4690      	mov	r8, r2
 800f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82e:	46c0      	nop			; (mov r8, r8)
 800f830:	200016d4 	.word	0x200016d4
 800f834:	200016bc 	.word	0x200016bc
 800f838:	2000163c 	.word	0x2000163c
 800f83c:	20001640 	.word	0x20001640
 800f840:	20001744 	.word	0x20001744
 800f844:	20001730 	.word	0x20001730

0800f848 <vTaskSwitchContext>:
{
 800f848:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f84a:	4b3a      	ldr	r3, [pc, #232]	; (800f934 <vTaskSwitchContext+0xec>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f852:	4b39      	ldr	r3, [pc, #228]	; (800f938 <vTaskSwitchContext+0xf0>)
 800f854:	2201      	movs	r2, #1
 800f856:	601a      	str	r2, [r3, #0]
}
 800f858:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f85a:	4b37      	ldr	r3, [pc, #220]	; (800f938 <vTaskSwitchContext+0xf0>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f860:	f7f8 fe34 	bl	80084cc <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f864:	4b35      	ldr	r3, [pc, #212]	; (800f93c <vTaskSwitchContext+0xf4>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4298      	cmp	r0, r3
 800f86a:	d905      	bls.n	800f878 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f86c:	4a34      	ldr	r2, [pc, #208]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f872:	1acb      	subs	r3, r1, r3
 800f874:	181b      	adds	r3, r3, r0
 800f876:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f878:	4b30      	ldr	r3, [pc, #192]	; (800f93c <vTaskSwitchContext+0xf4>)
 800f87a:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f87c:	4b30      	ldr	r3, [pc, #192]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f886:	429a      	cmp	r2, r3
 800f888:	d805      	bhi.n	800f896 <vTaskSwitchContext+0x4e>
 800f88a:	4b2d      	ldr	r3, [pc, #180]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	6819      	ldr	r1, [r3, #0]
 800f890:	3134      	adds	r1, #52	; 0x34
 800f892:	f7fe fa6b 	bl	800dd6c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f896:	4b2a      	ldr	r3, [pc, #168]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f89c:	2214      	movs	r2, #20
 800f89e:	4929      	ldr	r1, [pc, #164]	; (800f944 <vTaskSwitchContext+0xfc>)
 800f8a0:	f004 f96e 	bl	8013b80 <memcmp>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d005      	beq.n	800f8b4 <vTaskSwitchContext+0x6c>
 800f8a8:	4b25      	ldr	r3, [pc, #148]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f8aa:	6818      	ldr	r0, [r3, #0]
 800f8ac:	6819      	ldr	r1, [r3, #0]
 800f8ae:	3134      	adds	r1, #52	; 0x34
 800f8b0:	f7fe fa5c 	bl	800dd6c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f8b4:	4b24      	ldr	r3, [pc, #144]	; (800f948 <vTaskSwitchContext+0x100>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	0093      	lsls	r3, r2, #2
 800f8ba:	189b      	adds	r3, r3, r2
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	4a23      	ldr	r2, [pc, #140]	; (800f94c <vTaskSwitchContext+0x104>)
 800f8c0:	589b      	ldr	r3, [r3, r2]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d115      	bne.n	800f8f2 <vTaskSwitchContext+0xaa>
 800f8c6:	4b20      	ldr	r3, [pc, #128]	; (800f948 <vTaskSwitchContext+0x100>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00f      	beq.n	800f8ee <vTaskSwitchContext+0xa6>
 800f8ce:	4a1e      	ldr	r2, [pc, #120]	; (800f948 <vTaskSwitchContext+0x100>)
 800f8d0:	4c1e      	ldr	r4, [pc, #120]	; (800f94c <vTaskSwitchContext+0x104>)
 800f8d2:	0010      	movs	r0, r2
 800f8d4:	6813      	ldr	r3, [r2, #0]
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	6013      	str	r3, [r2, #0]
 800f8da:	6811      	ldr	r1, [r2, #0]
 800f8dc:	008b      	lsls	r3, r1, #2
 800f8de:	185b      	adds	r3, r3, r1
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	591b      	ldr	r3, [r3, r4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d104      	bne.n	800f8f2 <vTaskSwitchContext+0xaa>
 800f8e8:	6803      	ldr	r3, [r0, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1f2      	bne.n	800f8d4 <vTaskSwitchContext+0x8c>
 800f8ee:	b672      	cpsid	i
 800f8f0:	e7fe      	b.n	800f8f0 <vTaskSwitchContext+0xa8>
 800f8f2:	4b15      	ldr	r3, [pc, #84]	; (800f948 <vTaskSwitchContext+0x100>)
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	4c15      	ldr	r4, [pc, #84]	; (800f94c <vTaskSwitchContext+0x104>)
 800f8f8:	0093      	lsls	r3, r2, #2
 800f8fa:	1899      	adds	r1, r3, r2
 800f8fc:	0089      	lsls	r1, r1, #2
 800f8fe:	1861      	adds	r1, r4, r1
 800f900:	6848      	ldr	r0, [r1, #4]
 800f902:	6840      	ldr	r0, [r0, #4]
 800f904:	6048      	str	r0, [r1, #4]
 800f906:	189b      	adds	r3, r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	3308      	adds	r3, #8
 800f90c:	191b      	adds	r3, r3, r4
 800f90e:	4298      	cmp	r0, r3
 800f910:	d009      	beq.n	800f926 <vTaskSwitchContext+0xde>
 800f912:	0093      	lsls	r3, r2, #2
 800f914:	189a      	adds	r2, r3, r2
 800f916:	0092      	lsls	r2, r2, #2
 800f918:	4b0c      	ldr	r3, [pc, #48]	; (800f94c <vTaskSwitchContext+0x104>)
 800f91a:	189a      	adds	r2, r3, r2
 800f91c:	6853      	ldr	r3, [r2, #4]
 800f91e:	68da      	ldr	r2, [r3, #12]
 800f920:	4b07      	ldr	r3, [pc, #28]	; (800f940 <vTaskSwitchContext+0xf8>)
 800f922:	601a      	str	r2, [r3, #0]
}
 800f924:	e798      	b.n	800f858 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f926:	6840      	ldr	r0, [r0, #4]
 800f928:	2114      	movs	r1, #20
 800f92a:	4351      	muls	r1, r2
 800f92c:	1863      	adds	r3, r4, r1
 800f92e:	6058      	str	r0, [r3, #4]
 800f930:	e7ef      	b.n	800f912 <vTaskSwitchContext+0xca>
 800f932:	46c0      	nop			; (mov r8, r8)
 800f934:	200016dc 	.word	0x200016dc
 800f938:	2000175c 	.word	0x2000175c
 800f93c:	200016d0 	.word	0x200016d0
 800f940:	20001638 	.word	0x20001638
 800f944:	0801a5a0 	.word	0x0801a5a0
 800f948:	200016e8 	.word	0x200016e8
 800f94c:	20001644 	.word	0x20001644

0800f950 <vTaskPlaceOnEventList>:
{
 800f950:	b570      	push	{r4, r5, r6, lr}
 800f952:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f954:	2800      	cmp	r0, #0
 800f956:	d101      	bne.n	800f95c <vTaskPlaceOnEventList+0xc>
 800f958:	b672      	cpsid	i
 800f95a:	e7fe      	b.n	800f95a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f95c:	4d0b      	ldr	r5, [pc, #44]	; (800f98c <vTaskPlaceOnEventList+0x3c>)
 800f95e:	6829      	ldr	r1, [r5, #0]
 800f960:	3118      	adds	r1, #24
 800f962:	f7ff f823 	bl	800e9ac <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f966:	6828      	ldr	r0, [r5, #0]
 800f968:	3004      	adds	r0, #4
 800f96a:	f7ff f836 	bl	800e9da <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f96e:	1c63      	adds	r3, r4, #1
 800f970:	d005      	beq.n	800f97e <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f972:	4b07      	ldr	r3, [pc, #28]	; (800f990 <vTaskPlaceOnEventList+0x40>)
 800f974:	6818      	ldr	r0, [r3, #0]
 800f976:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f978:	f7ff fbe4 	bl	800f144 <prvAddCurrentTaskToDelayedList>
}
 800f97c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f97e:	4b03      	ldr	r3, [pc, #12]	; (800f98c <vTaskPlaceOnEventList+0x3c>)
 800f980:	6819      	ldr	r1, [r3, #0]
 800f982:	3104      	adds	r1, #4
 800f984:	4803      	ldr	r0, [pc, #12]	; (800f994 <vTaskPlaceOnEventList+0x44>)
 800f986:	f7ff f805 	bl	800e994 <vListInsertEnd>
 800f98a:	e7f7      	b.n	800f97c <vTaskPlaceOnEventList+0x2c>
 800f98c:	20001638 	.word	0x20001638
 800f990:	20001758 	.word	0x20001758
 800f994:	20001730 	.word	0x20001730

0800f998 <vTaskPlaceOnEventListRestricted>:
	{
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d101      	bne.n	800f9a4 <vTaskPlaceOnEventListRestricted+0xc>
 800f9a0:	b672      	cpsid	i
 800f9a2:	e7fe      	b.n	800f9a2 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9a4:	4c07      	ldr	r4, [pc, #28]	; (800f9c4 <vTaskPlaceOnEventListRestricted+0x2c>)
 800f9a6:	6821      	ldr	r1, [r4, #0]
 800f9a8:	3118      	adds	r1, #24
 800f9aa:	f7fe fff3 	bl	800e994 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f9ae:	6820      	ldr	r0, [r4, #0]
 800f9b0:	3004      	adds	r0, #4
 800f9b2:	f7ff f812 	bl	800e9da <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f9b6:	4b04      	ldr	r3, [pc, #16]	; (800f9c8 <vTaskPlaceOnEventListRestricted+0x30>)
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f9bc:	f7ff fbc2 	bl	800f144 <prvAddCurrentTaskToDelayedList>
	}
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	46c0      	nop			; (mov r8, r8)
 800f9c4:	20001638 	.word	0x20001638
 800f9c8:	20001758 	.word	0x20001758

0800f9cc <xTaskRemoveFromEventList>:
{
 800f9cc:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f9ce:	68c3      	ldr	r3, [r0, #12]
 800f9d0:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f9d2:	2d00      	cmp	r5, #0
 800f9d4:	d101      	bne.n	800f9da <xTaskRemoveFromEventList+0xe>
 800f9d6:	b672      	cpsid	i
 800f9d8:	e7fe      	b.n	800f9d8 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f9da:	002c      	movs	r4, r5
 800f9dc:	3418      	adds	r4, #24
 800f9de:	0020      	movs	r0, r4
 800f9e0:	f7fe fffb 	bl	800e9da <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9e4:	4b13      	ldr	r3, [pc, #76]	; (800fa34 <xTaskRemoveFromEventList+0x68>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d11e      	bne.n	800fa2a <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f9ec:	1d2c      	adds	r4, r5, #4
 800f9ee:	0020      	movs	r0, r4
 800f9f0:	f7fe fff3 	bl	800e9da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f9f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f9f6:	4a10      	ldr	r2, [pc, #64]	; (800fa38 <xTaskRemoveFromEventList+0x6c>)
 800f9f8:	6812      	ldr	r2, [r2, #0]
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d901      	bls.n	800fa02 <xTaskRemoveFromEventList+0x36>
 800f9fe:	4a0e      	ldr	r2, [pc, #56]	; (800fa38 <xTaskRemoveFromEventList+0x6c>)
 800fa00:	6013      	str	r3, [r2, #0]
 800fa02:	0098      	lsls	r0, r3, #2
 800fa04:	18c0      	adds	r0, r0, r3
 800fa06:	0080      	lsls	r0, r0, #2
 800fa08:	4b0c      	ldr	r3, [pc, #48]	; (800fa3c <xTaskRemoveFromEventList+0x70>)
 800fa0a:	18c0      	adds	r0, r0, r3
 800fa0c:	0021      	movs	r1, r4
 800fa0e:	f7fe ffc1 	bl	800e994 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa12:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <xTaskRemoveFromEventList+0x74>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fa1a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d903      	bls.n	800fa28 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800fa20:	4b08      	ldr	r3, [pc, #32]	; (800fa44 <xTaskRemoveFromEventList+0x78>)
 800fa22:	2201      	movs	r2, #1
 800fa24:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fa26:	3001      	adds	r0, #1
}
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa2a:	0021      	movs	r1, r4
 800fa2c:	4806      	ldr	r0, [pc, #24]	; (800fa48 <xTaskRemoveFromEventList+0x7c>)
 800fa2e:	f7fe ffb1 	bl	800e994 <vListInsertEnd>
 800fa32:	e7ee      	b.n	800fa12 <xTaskRemoveFromEventList+0x46>
 800fa34:	200016dc 	.word	0x200016dc
 800fa38:	200016e8 	.word	0x200016e8
 800fa3c:	20001644 	.word	0x20001644
 800fa40:	20001638 	.word	0x20001638
 800fa44:	2000175c 	.word	0x2000175c
 800fa48:	20001718 	.word	0x20001718

0800fa4c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d006      	beq.n	800fa5e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fa50:	4b04      	ldr	r3, [pc, #16]	; (800fa64 <vTaskSetTimeOutState+0x18>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fa56:	4b04      	ldr	r3, [pc, #16]	; (800fa68 <vTaskSetTimeOutState+0x1c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6043      	str	r3, [r0, #4]
}
 800fa5c:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800fa5e:	b672      	cpsid	i
 800fa60:	e7fe      	b.n	800fa60 <vTaskSetTimeOutState+0x14>
 800fa62:	46c0      	nop			; (mov r8, r8)
 800fa64:	20001714 	.word	0x20001714
 800fa68:	20001758 	.word	0x20001758

0800fa6c <xTaskCheckForTimeOut>:
{
 800fa6c:	b570      	push	{r4, r5, r6, lr}
 800fa6e:	0004      	movs	r4, r0
 800fa70:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d003      	beq.n	800fa7e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fa76:	2900      	cmp	r1, #0
 800fa78:	d103      	bne.n	800fa82 <xTaskCheckForTimeOut+0x16>
 800fa7a:	b672      	cpsid	i
 800fa7c:	e7fe      	b.n	800fa7c <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800fa7e:	b672      	cpsid	i
 800fa80:	e7fe      	b.n	800fa80 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800fa82:	f000 fc5f 	bl	8010344 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fa86:	4b10      	ldr	r3, [pc, #64]	; (800fac8 <xTaskCheckForTimeOut+0x5c>)
 800fa88:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fa8a:	6833      	ldr	r3, [r6, #0]
 800fa8c:	1c59      	adds	r1, r3, #1
 800fa8e:	d019      	beq.n	800fac4 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa90:	490e      	ldr	r1, [pc, #56]	; (800facc <xTaskCheckForTimeOut+0x60>)
 800fa92:	6809      	ldr	r1, [r1, #0]
 800fa94:	6820      	ldr	r0, [r4, #0]
 800fa96:	4288      	cmp	r0, r1
 800fa98:	d003      	beq.n	800faa2 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800fa9a:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa9c:	6861      	ldr	r1, [r4, #4]
 800fa9e:	4291      	cmp	r1, r2
 800faa0:	d904      	bls.n	800faac <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800faa2:	6861      	ldr	r1, [r4, #4]
 800faa4:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800faa6:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800faa8:	4283      	cmp	r3, r0
 800faaa:	d803      	bhi.n	800fab4 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800faac:	f000 fc56 	bl	801035c <vPortExitCritical>
}
 800fab0:	0028      	movs	r0, r5
 800fab2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fab4:	1a9b      	subs	r3, r3, r2
 800fab6:	185b      	adds	r3, r3, r1
 800fab8:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800faba:	0020      	movs	r0, r4
 800fabc:	f7ff ffc6 	bl	800fa4c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fac0:	2500      	movs	r5, #0
 800fac2:	e7f3      	b.n	800faac <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800fac4:	2500      	movs	r5, #0
 800fac6:	e7f1      	b.n	800faac <xTaskCheckForTimeOut+0x40>
 800fac8:	20001758 	.word	0x20001758
 800facc:	20001714 	.word	0x20001714

0800fad0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fad0:	4b01      	ldr	r3, [pc, #4]	; (800fad8 <vTaskMissedYield+0x8>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	601a      	str	r2, [r3, #0]
}
 800fad6:	4770      	bx	lr
 800fad8:	2000175c 	.word	0x2000175c

0800fadc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fadc:	4b05      	ldr	r3, [pc, #20]	; (800faf4 <xTaskGetSchedulerState+0x18>)
 800fade:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fae0:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d004      	beq.n	800faf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae6:	4b04      	ldr	r3, [pc, #16]	; (800faf8 <xTaskGetSchedulerState+0x1c>)
 800fae8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800faea:	4243      	negs	r3, r0
 800faec:	4158      	adcs	r0, r3
 800faee:	0040      	lsls	r0, r0, #1
	}
 800faf0:	4770      	bx	lr
 800faf2:	46c0      	nop			; (mov r8, r8)
 800faf4:	2000172c 	.word	0x2000172c
 800faf8:	200016dc 	.word	0x200016dc

0800fafc <vTaskPriorityInherit>:
	{
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fb00:	d01a      	beq.n	800fb38 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fb02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fb04:	4b19      	ldr	r3, [pc, #100]	; (800fb6c <vTaskPriorityInherit+0x70>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d214      	bcs.n	800fb38 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fb0e:	6983      	ldr	r3, [r0, #24]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	db05      	blt.n	800fb20 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb14:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <vTaskPriorityInherit+0x70>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb1a:	2307      	movs	r3, #7
 800fb1c:	1a5b      	subs	r3, r3, r1
 800fb1e:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fb20:	0093      	lsls	r3, r2, #2
 800fb22:	189b      	adds	r3, r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4a12      	ldr	r2, [pc, #72]	; (800fb70 <vTaskPriorityInherit+0x74>)
 800fb28:	189b      	adds	r3, r3, r2
 800fb2a:	6962      	ldr	r2, [r4, #20]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d004      	beq.n	800fb3a <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb30:	4b0e      	ldr	r3, [pc, #56]	; (800fb6c <vTaskPriorityInherit+0x70>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb36:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb3a:	1d25      	adds	r5, r4, #4
 800fb3c:	0028      	movs	r0, r5
 800fb3e:	f7fe ff4c 	bl	800e9da <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb42:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <vTaskPriorityInherit+0x70>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb48:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fb4a:	4a0a      	ldr	r2, [pc, #40]	; (800fb74 <vTaskPriorityInherit+0x78>)
 800fb4c:	6812      	ldr	r2, [r2, #0]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d808      	bhi.n	800fb64 <vTaskPriorityInherit+0x68>
 800fb52:	0098      	lsls	r0, r3, #2
 800fb54:	18c0      	adds	r0, r0, r3
 800fb56:	0080      	lsls	r0, r0, #2
 800fb58:	4b05      	ldr	r3, [pc, #20]	; (800fb70 <vTaskPriorityInherit+0x74>)
 800fb5a:	18c0      	adds	r0, r0, r3
 800fb5c:	0029      	movs	r1, r5
 800fb5e:	f7fe ff19 	bl	800e994 <vListInsertEnd>
	}
 800fb62:	e7e9      	b.n	800fb38 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fb64:	4a03      	ldr	r2, [pc, #12]	; (800fb74 <vTaskPriorityInherit+0x78>)
 800fb66:	6013      	str	r3, [r2, #0]
 800fb68:	e7f3      	b.n	800fb52 <vTaskPriorityInherit+0x56>
 800fb6a:	46c0      	nop			; (mov r8, r8)
 800fb6c:	20001638 	.word	0x20001638
 800fb70:	20001644 	.word	0x20001644
 800fb74:	200016e8 	.word	0x200016e8

0800fb78 <xTaskPriorityDisinherit>:
	{
 800fb78:	b570      	push	{r4, r5, r6, lr}
 800fb7a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fb7c:	d02b      	beq.n	800fbd6 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800fb7e:	4b18      	ldr	r3, [pc, #96]	; (800fbe0 <xTaskPriorityDisinherit+0x68>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4283      	cmp	r3, r0
 800fb84:	d001      	beq.n	800fb8a <xTaskPriorityDisinherit+0x12>
 800fb86:	b672      	cpsid	i
 800fb88:	e7fe      	b.n	800fb88 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <xTaskPriorityDisinherit+0x1c>
 800fb90:	b672      	cpsid	i
 800fb92:	e7fe      	b.n	800fb92 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800fb94:	3b01      	subs	r3, #1
 800fb96:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fb9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fb9c:	428a      	cmp	r2, r1
 800fb9e:	d01c      	beq.n	800fbda <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800fba0:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fba2:	4283      	cmp	r3, r0
 800fba4:	d118      	bne.n	800fbd8 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fba6:	1d25      	adds	r5, r4, #4
 800fba8:	0028      	movs	r0, r5
 800fbaa:	f7fe ff16 	bl	800e9da <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fbae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fbb0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbb2:	2207      	movs	r2, #7
 800fbb4:	1ad2      	subs	r2, r2, r3
 800fbb6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fbb8:	4a0a      	ldr	r2, [pc, #40]	; (800fbe4 <xTaskPriorityDisinherit+0x6c>)
 800fbba:	6812      	ldr	r2, [r2, #0]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d901      	bls.n	800fbc4 <xTaskPriorityDisinherit+0x4c>
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <xTaskPriorityDisinherit+0x6c>)
 800fbc2:	6013      	str	r3, [r2, #0]
 800fbc4:	2014      	movs	r0, #20
 800fbc6:	4358      	muls	r0, r3
 800fbc8:	4b07      	ldr	r3, [pc, #28]	; (800fbe8 <xTaskPriorityDisinherit+0x70>)
 800fbca:	18c0      	adds	r0, r0, r3
 800fbcc:	0029      	movs	r1, r5
 800fbce:	f7fe fee1 	bl	800e994 <vListInsertEnd>
					xReturn = pdTRUE;
 800fbd2:	2001      	movs	r0, #1
 800fbd4:	e000      	b.n	800fbd8 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800fbd6:	2000      	movs	r0, #0
	}
 800fbd8:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800fbda:	2000      	movs	r0, #0
 800fbdc:	e7fc      	b.n	800fbd8 <xTaskPriorityDisinherit+0x60>
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	20001638 	.word	0x20001638
 800fbe4:	200016e8 	.word	0x200016e8
 800fbe8:	20001644 	.word	0x20001644

0800fbec <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fbf6:	4b2b      	ldr	r3, [pc, #172]	; (800fca4 <vTaskList+0xb8>)
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fbfc:	6818      	ldr	r0, [r3, #0]
 800fbfe:	0140      	lsls	r0, r0, #5
 800fc00:	f000 fc22 	bl	8010448 <pvPortMalloc>
 800fc04:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800fc06:	d04a      	beq.n	800fc9e <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800fc08:	9903      	ldr	r1, [sp, #12]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f7ff fdca 	bl	800f7a4 <uxTaskGetSystemState>
 800fc10:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fc12:	2300      	movs	r3, #0
 800fc14:	9302      	str	r3, [sp, #8]
 800fc16:	9a02      	ldr	r2, [sp, #8]
 800fc18:	9b03      	ldr	r3, [sp, #12]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d23c      	bcs.n	800fc98 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fc1e:	4e22      	ldr	r6, [pc, #136]	; (800fca8 <vTaskList+0xbc>)
 800fc20:	e027      	b.n	800fc72 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800fc22:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d133      	bne.n	800fc90 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fc28:	9b02      	ldr	r3, [sp, #8]
 800fc2a:	015b      	lsls	r3, r3, #5
 800fc2c:	18fb      	adds	r3, r7, r3
 800fc2e:	6859      	ldr	r1, [r3, #4]
 800fc30:	0020      	movs	r0, r4
 800fc32:	f7ff fab1 	bl	800f198 <prvWriteNameToBuffer>
 800fc36:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fc38:	9b02      	ldr	r3, [sp, #8]
 800fc3a:	9a02      	ldr	r2, [sp, #8]
 800fc3c:	9902      	ldr	r1, [sp, #8]
 800fc3e:	015b      	lsls	r3, r3, #5
 800fc40:	18fb      	adds	r3, r7, r3
 800fc42:	691b      	ldr	r3, [r3, #16]
 800fc44:	0149      	lsls	r1, r1, #5
 800fc46:	1879      	adds	r1, r7, r1
 800fc48:	6889      	ldr	r1, [r1, #8]
 800fc4a:	9101      	str	r1, [sp, #4]
 800fc4c:	0152      	lsls	r2, r2, #5
 800fc4e:	18ba      	adds	r2, r7, r2
 800fc50:	8b92      	ldrh	r2, [r2, #28]
 800fc52:	9200      	str	r2, [sp, #0]
 800fc54:	002a      	movs	r2, r5
 800fc56:	0031      	movs	r1, r6
 800fc58:	f004 fd38 	bl	80146cc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800fc5c:	0020      	movs	r0, r4
 800fc5e:	f7f0 fa5b 	bl	8000118 <strlen>
 800fc62:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800fc64:	9b02      	ldr	r3, [sp, #8]
 800fc66:	3301      	adds	r3, #1
 800fc68:	9302      	str	r3, [sp, #8]
 800fc6a:	9a02      	ldr	r2, [sp, #8]
 800fc6c:	9b03      	ldr	r3, [sp, #12]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d212      	bcs.n	800fc98 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fc72:	9b02      	ldr	r3, [sp, #8]
 800fc74:	015b      	lsls	r3, r3, #5
 800fc76:	18fb      	adds	r3, r7, r3
 800fc78:	7b1b      	ldrb	r3, [r3, #12]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d00a      	beq.n	800fc94 <vTaskList+0xa8>
 800fc7e:	b2da      	uxtb	r2, r3
 800fc80:	2a02      	cmp	r2, #2
 800fc82:	d9ce      	bls.n	800fc22 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fc84:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fc86:	2b03      	cmp	r3, #3
 800fc88:	d0ce      	beq.n	800fc28 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fc8a:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fc8c:	2b04      	cmp	r3, #4
 800fc8e:	d0cb      	beq.n	800fc28 <vTaskList+0x3c>
										cStatus = 0x00;
 800fc90:	2500      	movs	r5, #0
										break;
 800fc92:	e7c9      	b.n	800fc28 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fc94:	2542      	movs	r5, #66	; 0x42
 800fc96:	e7c7      	b.n	800fc28 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fc98:	0038      	movs	r0, r7
 800fc9a:	f000 fc6b 	bl	8010574 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc9e:	b005      	add	sp, #20
 800fca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca2:	46c0      	nop			; (mov r8, r8)
 800fca4:	200016d4 	.word	0x200016d4
 800fca8:	0801a5cc 	.word	0x0801a5cc

0800fcac <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fcb6:	4b26      	ldr	r3, [pc, #152]	; (800fd50 <vTaskGetRunTimeStats+0xa4>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fcbc:	6818      	ldr	r0, [r3, #0]
 800fcbe:	0140      	lsls	r0, r0, #5
 800fcc0:	f000 fbc2 	bl	8010448 <pvPortMalloc>
 800fcc4:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800fcc6:	d014      	beq.n	800fcf2 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fcc8:	9903      	ldr	r1, [sp, #12]
 800fcca:	aa01      	add	r2, sp, #4
 800fccc:	f7ff fd6a 	bl	800f7a4 <uxTaskGetSystemState>
 800fcd0:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fcd2:	2164      	movs	r1, #100	; 0x64
 800fcd4:	9801      	ldr	r0, [sp, #4]
 800fcd6:	f7f0 fa31 	bl	800013c <__udivsi3>
 800fcda:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d005      	beq.n	800fcec <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fce0:	2300      	movs	r3, #0
 800fce2:	9302      	str	r3, [sp, #8]
 800fce4:	9a02      	ldr	r2, [sp, #8]
 800fce6:	9b03      	ldr	r3, [sp, #12]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d316      	bcc.n	800fd1a <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fcec:	0030      	movs	r0, r6
 800fcee:	f000 fc41 	bl	8010574 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcf2:	b004      	add	sp, #16
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800fcf6:	9b02      	ldr	r3, [sp, #8]
 800fcf8:	015b      	lsls	r3, r3, #5
 800fcfa:	18f3      	adds	r3, r6, r3
 800fcfc:	699a      	ldr	r2, [r3, #24]
 800fcfe:	4915      	ldr	r1, [pc, #84]	; (800fd54 <vTaskGetRunTimeStats+0xa8>)
 800fd00:	f004 fce4 	bl	80146cc <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800fd04:	0020      	movs	r0, r4
 800fd06:	f7f0 fa07 	bl	8000118 <strlen>
 800fd0a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fd0c:	9b02      	ldr	r3, [sp, #8]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	9302      	str	r3, [sp, #8]
 800fd12:	9a02      	ldr	r2, [sp, #8]
 800fd14:	9b03      	ldr	r3, [sp, #12]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d2e8      	bcs.n	800fcec <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fd1a:	9b02      	ldr	r3, [sp, #8]
 800fd1c:	015b      	lsls	r3, r3, #5
 800fd1e:	18f3      	adds	r3, r6, r3
 800fd20:	9901      	ldr	r1, [sp, #4]
 800fd22:	6998      	ldr	r0, [r3, #24]
 800fd24:	f7f0 fa0a 	bl	800013c <__udivsi3>
 800fd28:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fd2a:	9b02      	ldr	r3, [sp, #8]
 800fd2c:	015b      	lsls	r3, r3, #5
 800fd2e:	18f3      	adds	r3, r6, r3
 800fd30:	6859      	ldr	r1, [r3, #4]
 800fd32:	0020      	movs	r0, r4
 800fd34:	f7ff fa30 	bl	800f198 <prvWriteNameToBuffer>
 800fd38:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800fd3a:	2d00      	cmp	r5, #0
 800fd3c:	d0db      	beq.n	800fcf6 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fd3e:	9b02      	ldr	r3, [sp, #8]
 800fd40:	015b      	lsls	r3, r3, #5
 800fd42:	18f3      	adds	r3, r6, r3
 800fd44:	699a      	ldr	r2, [r3, #24]
 800fd46:	002b      	movs	r3, r5
 800fd48:	4903      	ldr	r1, [pc, #12]	; (800fd58 <vTaskGetRunTimeStats+0xac>)
 800fd4a:	f004 fcbf 	bl	80146cc <siprintf>
 800fd4e:	e7d9      	b.n	800fd04 <vTaskGetRunTimeStats+0x58>
 800fd50:	200016d4 	.word	0x200016d4
 800fd54:	0801a5c0 	.word	0x0801a5c0
 800fd58:	0801a5b4 	.word	0x0801a5b4

0800fd5c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd5c:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <pvTaskIncrementMutexHeldCount+0x18>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd64:	4b03      	ldr	r3, [pc, #12]	; (800fd74 <pvTaskIncrementMutexHeldCount+0x18>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fd6e:	4b01      	ldr	r3, [pc, #4]	; (800fd74 <pvTaskIncrementMutexHeldCount+0x18>)
 800fd70:	6818      	ldr	r0, [r3, #0]
	}
 800fd72:	4770      	bx	lr
 800fd74:	20001638 	.word	0x20001638

0800fd78 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	0005      	movs	r5, r0
 800fd7c:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fd7e:	f000 fae1 	bl	8010344 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fd82:	4b20      	ldr	r3, [pc, #128]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d106      	bne.n	800fd9a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800fd8c:	4b1d      	ldr	r3, [pc, #116]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	235c      	movs	r3, #92	; 0x5c
 800fd92:	2101      	movs	r1, #1
 800fd94:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800fd96:	2c00      	cmp	r4, #0
 800fd98:	d118      	bne.n	800fdcc <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd9a:	f000 fadf 	bl	801035c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fd9e:	f000 fad1 	bl	8010344 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fda2:	4b18      	ldr	r3, [pc, #96]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800fda8:	2c00      	cmp	r4, #0
 800fdaa:	d006      	beq.n	800fdba <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800fdac:	2d00      	cmp	r5, #0
 800fdae:	d123      	bne.n	800fdf8 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800fdb0:	4b14      	ldr	r3, [pc, #80]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	235c      	movs	r3, #92	; 0x5c
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fdc4:	f000 faca 	bl	801035c <vPortExitCritical>

		return ulReturn;
	}
 800fdc8:	0020      	movs	r0, r4
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fdcc:	4b0d      	ldr	r3, [pc, #52]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	3004      	adds	r0, #4
 800fdd2:	f7fe fe02 	bl	800e9da <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fdd6:	1c63      	adds	r3, r4, #1
 800fdd8:	d007      	beq.n	800fdea <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800fdda:	4b0b      	ldr	r3, [pc, #44]	; (800fe08 <ulTaskNotifyTake+0x90>)
 800fddc:	6818      	ldr	r0, [r3, #0]
 800fdde:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fde0:	f7ff f9b0 	bl	800f144 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fde4:	f000 faa2 	bl	801032c <vPortYield>
 800fde8:	e7d7      	b.n	800fd9a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fdea:	4b06      	ldr	r3, [pc, #24]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fdec:	6819      	ldr	r1, [r3, #0]
 800fdee:	3104      	adds	r1, #4
 800fdf0:	4806      	ldr	r0, [pc, #24]	; (800fe0c <ulTaskNotifyTake+0x94>)
 800fdf2:	f7fe fdcf 	bl	800e994 <vListInsertEnd>
 800fdf6:	e7f5      	b.n	800fde4 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fdf8:	4b02      	ldr	r3, [pc, #8]	; (800fe04 <ulTaskNotifyTake+0x8c>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	659a      	str	r2, [r3, #88]	; 0x58
 800fe00:	e7db      	b.n	800fdba <ulTaskNotifyTake+0x42>
 800fe02:	46c0      	nop			; (mov r8, r8)
 800fe04:	20001638 	.word	0x20001638
 800fe08:	20001758 	.word	0x20001758
 800fe0c:	20001730 	.word	0x20001730

0800fe10 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	0004      	movs	r4, r0
 800fe14:	000e      	movs	r6, r1
 800fe16:	0015      	movs	r5, r2
 800fe18:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d101      	bne.n	800fe22 <xTaskGenericNotify+0x12>
 800fe1e:	b672      	cpsid	i
 800fe20:	e7fe      	b.n	800fe20 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fe22:	f000 fa8f 	bl	8010344 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fe26:	2f00      	cmp	r7, #0
 800fe28:	d001      	beq.n	800fe2e <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fe2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe2c:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fe2e:	225c      	movs	r2, #92	; 0x5c
 800fe30:	5ca3      	ldrb	r3, [r4, r2]
 800fe32:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fe34:	2102      	movs	r1, #2
 800fe36:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fe38:	2d02      	cmp	r5, #2
 800fe3a:	d015      	beq.n	800fe68 <xTaskGenericNotify+0x58>
 800fe3c:	d907      	bls.n	800fe4e <xTaskGenericNotify+0x3e>
 800fe3e:	2d03      	cmp	r5, #3
 800fe40:	d016      	beq.n	800fe70 <xTaskGenericNotify+0x60>
 800fe42:	2d04      	cmp	r5, #4
 800fe44:	d105      	bne.n	800fe52 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d035      	beq.n	800feb6 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fe4a:	65a6      	str	r6, [r4, #88]	; 0x58
 800fe4c:	e001      	b.n	800fe52 <xTaskGenericNotify+0x42>
			switch( eAction )
 800fe4e:	2d01      	cmp	r5, #1
 800fe50:	d006      	beq.n	800fe60 <xTaskGenericNotify+0x50>
 800fe52:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d00d      	beq.n	800fe74 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fe58:	f000 fa80 	bl	801035c <vPortExitCritical>

		return xReturn;
	}
 800fe5c:	0028      	movs	r0, r5
 800fe5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800fe60:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fe62:	4316      	orrs	r6, r2
 800fe64:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fe66:	e7f4      	b.n	800fe52 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800fe68:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fe6a:	3201      	adds	r2, #1
 800fe6c:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800fe6e:	e7f0      	b.n	800fe52 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800fe70:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fe72:	e7ee      	b.n	800fe52 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fe74:	1d25      	adds	r5, r4, #4
 800fe76:	0028      	movs	r0, r5
 800fe78:	f7fe fdaf 	bl	800e9da <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fe7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fe7e:	4a0f      	ldr	r2, [pc, #60]	; (800febc <xTaskGenericNotify+0xac>)
 800fe80:	6812      	ldr	r2, [r2, #0]
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d901      	bls.n	800fe8a <xTaskGenericNotify+0x7a>
 800fe86:	4a0d      	ldr	r2, [pc, #52]	; (800febc <xTaskGenericNotify+0xac>)
 800fe88:	6013      	str	r3, [r2, #0]
 800fe8a:	2014      	movs	r0, #20
 800fe8c:	4358      	muls	r0, r3
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	; (800fec0 <xTaskGenericNotify+0xb0>)
 800fe90:	18c0      	adds	r0, r0, r3
 800fe92:	0029      	movs	r1, r5
 800fe94:	f7fe fd7e 	bl	800e994 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fe98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <xTaskGenericNotify+0x92>
 800fe9e:	b672      	cpsid	i
 800fea0:	e7fe      	b.n	800fea0 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fea2:	4b08      	ldr	r3, [pc, #32]	; (800fec4 <xTaskGenericNotify+0xb4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feaa:	2501      	movs	r5, #1
 800feac:	429a      	cmp	r2, r3
 800feae:	d9d3      	bls.n	800fe58 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800feb0:	f000 fa3c 	bl	801032c <vPortYield>
 800feb4:	e7d0      	b.n	800fe58 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800feb6:	2500      	movs	r5, #0
 800feb8:	e7ce      	b.n	800fe58 <xTaskGenericNotify+0x48>
 800feba:	46c0      	nop			; (mov r8, r8)
 800febc:	200016e8 	.word	0x200016e8
 800fec0:	20001644 	.word	0x20001644
 800fec4:	20001638 	.word	0x20001638

0800fec8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fec8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800feca:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fecc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fece:	4291      	cmp	r1, r2
 800fed0:	d80b      	bhi.n	800feea <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fed2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fed4:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fed6:	6983      	ldr	r3, [r0, #24]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d211      	bcs.n	800ff00 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fedc:	1d01      	adds	r1, r0, #4
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <prvInsertTimerInActiveList+0x3c>)
 800fee0:	6818      	ldr	r0, [r3, #0]
 800fee2:	f7fe fd63 	bl	800e9ac <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fee6:	2400      	movs	r4, #0
 800fee8:	e00a      	b.n	800ff00 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800feea:	429a      	cmp	r2, r3
 800feec:	d202      	bcs.n	800fef4 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800feee:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fef0:	4299      	cmp	r1, r3
 800fef2:	d205      	bcs.n	800ff00 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fef4:	1d01      	adds	r1, r0, #4
 800fef6:	4b04      	ldr	r3, [pc, #16]	; (800ff08 <prvInsertTimerInActiveList+0x40>)
 800fef8:	6818      	ldr	r0, [r3, #0]
 800fefa:	f7fe fd57 	bl	800e9ac <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fefe:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800ff00:	0020      	movs	r0, r4
 800ff02:	bd10      	pop	{r4, pc}
 800ff04:	20001764 	.word	0x20001764
 800ff08:	20001760 	.word	0x20001760

0800ff0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff0c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff0e:	f000 fa19 	bl	8010344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff12:	4b11      	ldr	r3, [pc, #68]	; (800ff58 <prvCheckForValidListAndQueue+0x4c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d002      	beq.n	800ff20 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff1a:	f000 fa1f 	bl	801035c <vPortExitCritical>
}
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800ff20:	4d0e      	ldr	r5, [pc, #56]	; (800ff5c <prvCheckForValidListAndQueue+0x50>)
 800ff22:	0028      	movs	r0, r5
 800ff24:	f7fe fd28 	bl	800e978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff28:	4c0d      	ldr	r4, [pc, #52]	; (800ff60 <prvCheckForValidListAndQueue+0x54>)
 800ff2a:	0020      	movs	r0, r4
 800ff2c:	f7fe fd24 	bl	800e978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff30:	4b0c      	ldr	r3, [pc, #48]	; (800ff64 <prvCheckForValidListAndQueue+0x58>)
 800ff32:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff34:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <prvCheckForValidListAndQueue+0x5c>)
 800ff36:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2110      	movs	r1, #16
 800ff3c:	2004      	movs	r0, #4
 800ff3e:	f7fe fe26 	bl	800eb8e <xQueueGenericCreate>
 800ff42:	4b05      	ldr	r3, [pc, #20]	; (800ff58 <prvCheckForValidListAndQueue+0x4c>)
 800ff44:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d101      	bne.n	800ff4e <prvCheckForValidListAndQueue+0x42>
 800ff4a:	b672      	cpsid	i
 800ff4c:	e7fe      	b.n	800ff4c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ff4e:	4907      	ldr	r1, [pc, #28]	; (800ff6c <prvCheckForValidListAndQueue+0x60>)
 800ff50:	f7ff f856 	bl	800f000 <vQueueAddToRegistry>
 800ff54:	e7e1      	b.n	800ff1a <prvCheckForValidListAndQueue+0xe>
 800ff56:	46c0      	nop			; (mov r8, r8)
 800ff58:	20001794 	.word	0x20001794
 800ff5c:	20001768 	.word	0x20001768
 800ff60:	2000177c 	.word	0x2000177c
 800ff64:	20001760 	.word	0x20001760
 800ff68:	20001764 	.word	0x20001764
 800ff6c:	0801a60c 	.word	0x0801a60c

0800ff70 <xTimerCreateTimerTask>:
{
 800ff70:	b500      	push	{lr}
 800ff72:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800ff74:	f7ff ffca 	bl	800ff0c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ff78:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <xTimerCreateTimerTask+0x34>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00d      	beq.n	800ff9c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800ff80:	2300      	movs	r3, #0
 800ff82:	9303      	str	r3, [sp, #12]
 800ff84:	9302      	str	r3, [sp, #8]
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	3303      	adds	r3, #3
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	22a0      	movs	r2, #160	; 0xa0
 800ff90:	4905      	ldr	r1, [pc, #20]	; (800ffa8 <xTimerCreateTimerTask+0x38>)
 800ff92:	4806      	ldr	r0, [pc, #24]	; (800ffac <xTimerCreateTimerTask+0x3c>)
 800ff94:	f7ff f918 	bl	800f1c8 <xTaskGenericCreate>
	configASSERT( xReturn );
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d101      	bne.n	800ffa0 <xTimerCreateTimerTask+0x30>
 800ff9c:	b672      	cpsid	i
 800ff9e:	e7fe      	b.n	800ff9e <xTimerCreateTimerTask+0x2e>
}
 800ffa0:	b005      	add	sp, #20
 800ffa2:	bd00      	pop	{pc}
 800ffa4:	20001794 	.word	0x20001794
 800ffa8:	0801a614 	.word	0x0801a614
 800ffac:	080100f9 	.word	0x080100f9

0800ffb0 <xTimerCreate>:
{
 800ffb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffb2:	46c6      	mov	lr, r8
 800ffb4:	b500      	push	{lr}
 800ffb6:	4680      	mov	r8, r0
 800ffb8:	000d      	movs	r5, r1
 800ffba:	0017      	movs	r7, r2
 800ffbc:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d014      	beq.n	800ffec <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ffc2:	202c      	movs	r0, #44	; 0x2c
 800ffc4:	f000 fa40 	bl	8010448 <pvPortMalloc>
 800ffc8:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ffca:	d00b      	beq.n	800ffe4 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ffcc:	f7ff ff9e 	bl	800ff0c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ffd0:	4643      	mov	r3, r8
 800ffd2:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ffd4:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ffd6:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ffd8:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ffda:	9b06      	ldr	r3, [sp, #24]
 800ffdc:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ffde:	1d20      	adds	r0, r4, #4
 800ffe0:	f7fe fcd5 	bl	800e98e <vListInitialiseItem>
}
 800ffe4:	0020      	movs	r0, r4
 800ffe6:	bc04      	pop	{r2}
 800ffe8:	4690      	mov	r8, r2
 800ffea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ffec:	b672      	cpsid	i
 800ffee:	e7fe      	b.n	800ffee <xTimerCreate+0x3e>

0800fff0 <xTimerGenericCommand>:
{
 800fff0:	b530      	push	{r4, r5, lr}
 800fff2:	b085      	sub	sp, #20
 800fff4:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <xTimerGenericCommand+0x54>)
 800fff8:	681c      	ldr	r4, [r3, #0]
 800fffa:	2c00      	cmp	r4, #0
 800fffc:	d020      	beq.n	8010040 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fffe:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010000:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010002:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010004:	2905      	cmp	r1, #5
 8010006:	dc13      	bgt.n	8010030 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010008:	f7ff fd68 	bl	800fadc <xTaskGetSchedulerState>
 801000c:	2802      	cmp	r0, #2
 801000e:	d007      	beq.n	8010020 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010010:	4b0c      	ldr	r3, [pc, #48]	; (8010044 <xTimerGenericCommand+0x54>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	2200      	movs	r2, #0
 8010018:	4669      	mov	r1, sp
 801001a:	f7fe fdf3 	bl	800ec04 <xQueueGenericSend>
 801001e:	e00d      	b.n	801003c <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010020:	4b08      	ldr	r3, [pc, #32]	; (8010044 <xTimerGenericCommand+0x54>)
 8010022:	6818      	ldr	r0, [r3, #0]
 8010024:	2300      	movs	r3, #0
 8010026:	9a08      	ldr	r2, [sp, #32]
 8010028:	4669      	mov	r1, sp
 801002a:	f7fe fdeb 	bl	800ec04 <xQueueGenericSend>
 801002e:	e005      	b.n	801003c <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010030:	2300      	movs	r3, #0
 8010032:	002a      	movs	r2, r5
 8010034:	4669      	mov	r1, sp
 8010036:	0020      	movs	r0, r4
 8010038:	f7fe fe7b 	bl	800ed32 <xQueueGenericSendFromISR>
}
 801003c:	b005      	add	sp, #20
 801003e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010040:	2000      	movs	r0, #0
	return xReturn;
 8010042:	e7fb      	b.n	801003c <xTimerGenericCommand+0x4c>
 8010044:	20001794 	.word	0x20001794

08010048 <prvSampleTimeNow>:
{
 8010048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801004a:	46d6      	mov	lr, sl
 801004c:	464f      	mov	r7, r9
 801004e:	4646      	mov	r6, r8
 8010050:	b5c0      	push	{r6, r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 8010056:	f7ff fa43 	bl	800f4e0 <xTaskGetTickCount>
 801005a:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 801005c:	4b23      	ldr	r3, [pc, #140]	; (80100ec <prvSampleTimeNow+0xa4>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4283      	cmp	r3, r0
 8010062:	d80b      	bhi.n	801007c <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 8010064:	2300      	movs	r3, #0
 8010066:	4642      	mov	r2, r8
 8010068:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 801006a:	4b20      	ldr	r3, [pc, #128]	; (80100ec <prvSampleTimeNow+0xa4>)
 801006c:	601f      	str	r7, [r3, #0]
}
 801006e:	0038      	movs	r0, r7
 8010070:	b004      	add	sp, #16
 8010072:	bc1c      	pop	{r2, r3, r4}
 8010074:	4690      	mov	r8, r2
 8010076:	4699      	mov	r9, r3
 8010078:	46a2      	mov	sl, r4
 801007a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801007c:	4e1c      	ldr	r6, [pc, #112]	; (80100f0 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801007e:	2300      	movs	r3, #0
 8010080:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010082:	6833      	ldr	r3, [r6, #0]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	2a00      	cmp	r2, #0
 8010088:	d026      	beq.n	80100d8 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010090:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010092:	1d25      	adds	r5, r4, #4
 8010094:	0028      	movs	r0, r5
 8010096:	f7fe fca0 	bl	800e9da <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801009a:	0020      	movs	r0, r4
 801009c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801009e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80100a0:	69e3      	ldr	r3, [r4, #28]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d1ed      	bne.n	8010082 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80100a6:	69a3      	ldr	r3, [r4, #24]
 80100a8:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80100aa:	459a      	cmp	sl, r3
 80100ac:	d209      	bcs.n	80100c2 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80100ae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100b0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100b2:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <prvSampleTimeNow+0xa8>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	9303      	str	r3, [sp, #12]
 80100b8:	0029      	movs	r1, r5
 80100ba:	0018      	movs	r0, r3
 80100bc:	f7fe fc76 	bl	800e9ac <vListInsert>
 80100c0:	e7df      	b.n	8010082 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80100c2:	464b      	mov	r3, r9
 80100c4:	9300      	str	r3, [sp, #0]
 80100c6:	4652      	mov	r2, sl
 80100c8:	4649      	mov	r1, r9
 80100ca:	0020      	movs	r0, r4
 80100cc:	f7ff ff90 	bl	800fff0 <xTimerGenericCommand>
				configASSERT( xResult );
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d1d6      	bne.n	8010082 <prvSampleTimeNow+0x3a>
 80100d4:	b672      	cpsid	i
 80100d6:	e7fe      	b.n	80100d6 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 80100d8:	4a06      	ldr	r2, [pc, #24]	; (80100f4 <prvSampleTimeNow+0xac>)
 80100da:	4905      	ldr	r1, [pc, #20]	; (80100f0 <prvSampleTimeNow+0xa8>)
 80100dc:	6810      	ldr	r0, [r2, #0]
 80100de:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80100e0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80100e2:	2301      	movs	r3, #1
 80100e4:	4642      	mov	r2, r8
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	e7bf      	b.n	801006a <prvSampleTimeNow+0x22>
 80100ea:	46c0      	nop			; (mov r8, r8)
 80100ec:	20001790 	.word	0x20001790
 80100f0:	20001760 	.word	0x20001760
 80100f4:	20001764 	.word	0x20001764

080100f8 <prvTimerTask>:
{
 80100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fa:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 80100fc:	4e57      	ldr	r6, [pc, #348]	; (801025c <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80100fe:	4b58      	ldr	r3, [pc, #352]	; (8010260 <prvTimerTask+0x168>)
 8010100:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	2a00      	cmp	r2, #0
 8010106:	d100      	bne.n	801010a <prvTimerTask+0x12>
 8010108:	e09c      	b.n	8010244 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 801010e:	f7ff f9df 	bl	800f4d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010112:	a808      	add	r0, sp, #32
 8010114:	f7ff ff98 	bl	8010048 <prvSampleTimeNow>
 8010118:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801011a:	9b08      	ldr	r3, [sp, #32]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d000      	beq.n	8010122 <prvTimerTask+0x2a>
 8010120:	e099      	b.n	8010256 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010122:	42a0      	cmp	r0, r4
 8010124:	d233      	bcs.n	801018e <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010126:	1b61      	subs	r1, r4, r5
 8010128:	4b4e      	ldr	r3, [pc, #312]	; (8010264 <prvTimerTask+0x16c>)
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	f7fe ff80 	bl	800f030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010130:	f7ff fa6e 	bl	800f610 <xTaskResumeAll>
 8010134:	2800      	cmp	r0, #0
 8010136:	d050      	beq.n	80101da <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010138:	4c4a      	ldr	r4, [pc, #296]	; (8010264 <prvTimerTask+0x16c>)
 801013a:	2300      	movs	r3, #0
 801013c:	2200      	movs	r2, #0
 801013e:	a908      	add	r1, sp, #32
 8010140:	6820      	ldr	r0, [r4, #0]
 8010142:	f7fe fe78 	bl	800ee36 <xQueueGenericReceive>
 8010146:	2800      	cmp	r0, #0
 8010148:	d0d9      	beq.n	80100fe <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801014a:	9b08      	ldr	r3, [sp, #32]
 801014c:	9303      	str	r3, [sp, #12]
 801014e:	2b00      	cmp	r3, #0
 8010150:	da0c      	bge.n	801016c <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010154:	9303      	str	r3, [sp, #12]
 8010156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010158:	9304      	str	r3, [sp, #16]
 801015a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801015c:	9305      	str	r3, [sp, #20]
 801015e:	9903      	ldr	r1, [sp, #12]
 8010160:	9804      	ldr	r0, [sp, #16]
 8010162:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010164:	9b08      	ldr	r3, [sp, #32]
 8010166:	9303      	str	r3, [sp, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	dbe6      	blt.n	801013a <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801016c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 801016e:	696b      	ldr	r3, [r5, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d002      	beq.n	801017a <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010174:	1d28      	adds	r0, r5, #4
 8010176:	f7fe fc30 	bl	800e9da <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801017a:	a807      	add	r0, sp, #28
 801017c:	f7ff ff64 	bl	8010048 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010180:	9b08      	ldr	r3, [sp, #32]
 8010182:	9303      	str	r3, [sp, #12]
 8010184:	2b09      	cmp	r3, #9
 8010186:	d8d8      	bhi.n	801013a <prvTimerTask+0x42>
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	58f3      	ldr	r3, [r6, r3]
 801018c:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 801018e:	f7ff fa3f 	bl	800f610 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010192:	4b33      	ldr	r3, [pc, #204]	; (8010260 <prvTimerTask+0x168>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801019a:	1d38      	adds	r0, r7, #4
 801019c:	f7fe fc1d 	bl	800e9da <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d003      	beq.n	80101ae <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	0038      	movs	r0, r7
 80101aa:	4798      	blx	r3
 80101ac:	e7c4      	b.n	8010138 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	18e1      	adds	r1, r4, r3
 80101b2:	0023      	movs	r3, r4
 80101b4:	002a      	movs	r2, r5
 80101b6:	0038      	movs	r0, r7
 80101b8:	f7ff fe86 	bl	800fec8 <prvInsertTimerInActiveList>
 80101bc:	2801      	cmp	r0, #1
 80101be:	d1f2      	bne.n	80101a6 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101c0:	2100      	movs	r1, #0
 80101c2:	9100      	str	r1, [sp, #0]
 80101c4:	000b      	movs	r3, r1
 80101c6:	0022      	movs	r2, r4
 80101c8:	0038      	movs	r0, r7
 80101ca:	f7ff ff11 	bl	800fff0 <xTimerGenericCommand>
			configASSERT( xResult );
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d1e9      	bne.n	80101a6 <prvTimerTask+0xae>
 80101d2:	b672      	cpsid	i
 80101d4:	e7fe      	b.n	80101d4 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 80101d6:	2400      	movs	r4, #0
 80101d8:	e7a5      	b.n	8010126 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 80101da:	f000 f8a7 	bl	801032c <vPortYield>
 80101de:	e7ab      	b.n	8010138 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80101e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e2:	69aa      	ldr	r2, [r5, #24]
 80101e4:	4694      	mov	ip, r2
 80101e6:	4463      	add	r3, ip
 80101e8:	0019      	movs	r1, r3
 80101ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ec:	0002      	movs	r2, r0
 80101ee:	0028      	movs	r0, r5
 80101f0:	f7ff fe6a 	bl	800fec8 <prvInsertTimerInActiveList>
 80101f4:	2801      	cmp	r0, #1
 80101f6:	d1a0      	bne.n	801013a <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101f8:	0028      	movs	r0, r5
 80101fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80101fe:	69eb      	ldr	r3, [r5, #28]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d19a      	bne.n	801013a <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010206:	69a9      	ldr	r1, [r5, #24]
 8010208:	468c      	mov	ip, r1
 801020a:	4463      	add	r3, ip
 801020c:	001a      	movs	r2, r3
 801020e:	2300      	movs	r3, #0
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	2100      	movs	r1, #0
 8010214:	0028      	movs	r0, r5
 8010216:	f7ff feeb 	bl	800fff0 <xTimerGenericCommand>
							configASSERT( xResult );
 801021a:	2800      	cmp	r0, #0
 801021c:	d18d      	bne.n	801013a <prvTimerTask+0x42>
 801021e:	b672      	cpsid	i
 8010220:	e7fe      	b.n	8010220 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010222:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010224:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010226:	2900      	cmp	r1, #0
 8010228:	d006      	beq.n	8010238 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801022a:	1841      	adds	r1, r0, r1
 801022c:	0003      	movs	r3, r0
 801022e:	0002      	movs	r2, r0
 8010230:	0028      	movs	r0, r5
 8010232:	f7ff fe49 	bl	800fec8 <prvInsertTimerInActiveList>
 8010236:	e780      	b.n	801013a <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010238:	b672      	cpsid	i
 801023a:	e7fe      	b.n	801023a <prvTimerTask+0x142>
					vPortFree( pxTimer );
 801023c:	0028      	movs	r0, r5
 801023e:	f000 f999 	bl	8010574 <vPortFree>
 8010242:	e77a      	b.n	801013a <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010244:	f7ff f944 	bl	800f4d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010248:	a808      	add	r0, sp, #32
 801024a:	f7ff fefd 	bl	8010048 <prvSampleTimeNow>
 801024e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010250:	9b08      	ldr	r3, [sp, #32]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0bf      	beq.n	80101d6 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 8010256:	f7ff f9db 	bl	800f610 <xTaskResumeAll>
 801025a:	e76d      	b.n	8010138 <prvTimerTask+0x40>
 801025c:	0801a5e4 	.word	0x0801a5e4
 8010260:	20001760 	.word	0x20001760
 8010264:	20001794 	.word	0x20001794

08010268 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010268:	b510      	push	{r4, lr}
 801026a:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 801026c:	d101      	bne.n	8010272 <pvTimerGetTimerID+0xa>
 801026e:	b672      	cpsid	i
 8010270:	e7fe      	b.n	8010270 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8010272:	f000 f867 	bl	8010344 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010276:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010278:	f000 f870 	bl	801035c <vPortExitCritical>

	return pvReturn;
}
 801027c:	0020      	movs	r0, r4
 801027e:	bd10      	pop	{r4, pc}

08010280 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010280:	4b03      	ldr	r3, [pc, #12]	; (8010290 <prvTaskExitError+0x10>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3301      	adds	r3, #1
 8010286:	d001      	beq.n	801028c <prvTaskExitError+0xc>
 8010288:	b672      	cpsid	i
 801028a:	e7fe      	b.n	801028a <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 801028c:	b672      	cpsid	i
 801028e:	e7fe      	b.n	801028e <prvTaskExitError+0xe>
 8010290:	200000c0 	.word	0x200000c0

08010294 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010294:	4a06      	ldr	r2, [pc, #24]	; (80102b0 <pxCurrentTCBConst2>)
 8010296:	6813      	ldr	r3, [r2, #0]
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	3020      	adds	r0, #32
 801029c:	f380 8809 	msr	PSP, r0
 80102a0:	2002      	movs	r0, #2
 80102a2:	f380 8814 	msr	CONTROL, r0
 80102a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80102a8:	46ae      	mov	lr, r5
 80102aa:	b662      	cpsie	i
 80102ac:	bd00      	pop	{pc}
 80102ae:	46c0      	nop			; (mov r8, r8)

080102b0 <pxCurrentTCBConst2>:
 80102b0:	20001638 	.word	0x20001638

080102b4 <pxPortInitialiseStack>:
{
 80102b4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102b6:	1f03      	subs	r3, r0, #4
 80102b8:	2480      	movs	r4, #128	; 0x80
 80102ba:	0464      	lsls	r4, r4, #17
 80102bc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80102be:	3b04      	subs	r3, #4
 80102c0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80102c2:	3b04      	subs	r3, #4
 80102c4:	4902      	ldr	r1, [pc, #8]	; (80102d0 <pxPortInitialiseStack+0x1c>)
 80102c6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102c8:	3b14      	subs	r3, #20
 80102ca:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80102cc:	3840      	subs	r0, #64	; 0x40
}
 80102ce:	bd10      	pop	{r4, pc}
 80102d0:	08010281 	.word	0x08010281

080102d4 <SVC_Handler>:
}
 80102d4:	4770      	bx	lr
	...

080102d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80102d8:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80102da:	4b0f      	ldr	r3, [pc, #60]	; (8010318 <xPortStartScheduler+0x40>)
 80102dc:	6819      	ldr	r1, [r3, #0]
 80102de:	22ff      	movs	r2, #255	; 0xff
 80102e0:	0412      	lsls	r2, r2, #16
 80102e2:	430a      	orrs	r2, r1
 80102e4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80102e6:	6819      	ldr	r1, [r3, #0]
 80102e8:	22ff      	movs	r2, #255	; 0xff
 80102ea:	0612      	lsls	r2, r2, #24
 80102ec:	430a      	orrs	r2, r1
 80102ee:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102f0:	4b0a      	ldr	r3, [pc, #40]	; (801031c <xPortStartScheduler+0x44>)
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	21fa      	movs	r1, #250	; 0xfa
 80102f6:	0089      	lsls	r1, r1, #2
 80102f8:	f7ef ff20 	bl	800013c <__udivsi3>
 80102fc:	3801      	subs	r0, #1
 80102fe:	4b08      	ldr	r3, [pc, #32]	; (8010320 <xPortStartScheduler+0x48>)
 8010300:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010302:	4b08      	ldr	r3, [pc, #32]	; (8010324 <xPortStartScheduler+0x4c>)
 8010304:	2207      	movs	r2, #7
 8010306:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <xPortStartScheduler+0x50>)
 801030a:	2200      	movs	r2, #0
 801030c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801030e:	f7ff ffc1 	bl	8010294 <vPortStartFirstTask>
	prvTaskExitError();
 8010312:	f7ff ffb5 	bl	8010280 <prvTaskExitError>
 8010316:	46c0      	nop			; (mov r8, r8)
 8010318:	e000ed20 	.word	0xe000ed20
 801031c:	200000ac 	.word	0x200000ac
 8010320:	e000e014 	.word	0xe000e014
 8010324:	e000e010 	.word	0xe000e010
 8010328:	200000c0 	.word	0x200000c0

0801032c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 801032c:	4b04      	ldr	r3, [pc, #16]	; (8010340 <vPortYield+0x14>)
 801032e:	2280      	movs	r2, #128	; 0x80
 8010330:	0552      	lsls	r2, r2, #21
 8010332:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010334:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010338:	f3bf 8f6f 	isb	sy
}
 801033c:	4770      	bx	lr
 801033e:	46c0      	nop			; (mov r8, r8)
 8010340:	e000ed04 	.word	0xe000ed04

08010344 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010344:	b672      	cpsid	i
    uxCriticalNesting++;
 8010346:	4a04      	ldr	r2, [pc, #16]	; (8010358 <vPortEnterCritical+0x14>)
 8010348:	6813      	ldr	r3, [r2, #0]
 801034a:	3301      	adds	r3, #1
 801034c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801034e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010352:	f3bf 8f6f 	isb	sy
}
 8010356:	4770      	bx	lr
 8010358:	200000c0 	.word	0x200000c0

0801035c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <vPortExitCritical+0x1c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <vPortExitCritical+0xc>
 8010364:	b672      	cpsid	i
 8010366:	e7fe      	b.n	8010366 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010368:	3b01      	subs	r3, #1
 801036a:	4a03      	ldr	r2, [pc, #12]	; (8010378 <vPortExitCritical+0x1c>)
 801036c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 801036e:	2b00      	cmp	r3, #0
 8010370:	d100      	bne.n	8010374 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8010372:	b662      	cpsie	i
}
 8010374:	4770      	bx	lr
 8010376:	46c0      	nop			; (mov r8, r8)
 8010378:	200000c0 	.word	0x200000c0

0801037c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 801037c:	f3ef 8010 	mrs	r0, PRIMASK
 8010380:	b672      	cpsid	i
 8010382:	4770      	bx	lr
}
 8010384:	2000      	movs	r0, #0

08010386 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010386:	f380 8810 	msr	PRIMASK, r0
 801038a:	4770      	bx	lr

0801038c <PendSV_Handler>:
	__asm volatile
 801038c:	f3ef 8009 	mrs	r0, PSP
 8010390:	4b0e      	ldr	r3, [pc, #56]	; (80103cc <pxCurrentTCBConst>)
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	3820      	subs	r0, #32
 8010396:	6010      	str	r0, [r2, #0]
 8010398:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801039a:	4644      	mov	r4, r8
 801039c:	464d      	mov	r5, r9
 801039e:	4656      	mov	r6, sl
 80103a0:	465f      	mov	r7, fp
 80103a2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80103a4:	b508      	push	{r3, lr}
 80103a6:	b672      	cpsid	i
 80103a8:	f7ff fa4e 	bl	800f848 <vTaskSwitchContext>
 80103ac:	b662      	cpsie	i
 80103ae:	bc0c      	pop	{r2, r3}
 80103b0:	6811      	ldr	r1, [r2, #0]
 80103b2:	6808      	ldr	r0, [r1, #0]
 80103b4:	3010      	adds	r0, #16
 80103b6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80103b8:	46a0      	mov	r8, r4
 80103ba:	46a9      	mov	r9, r5
 80103bc:	46b2      	mov	sl, r6
 80103be:	46bb      	mov	fp, r7
 80103c0:	f380 8809 	msr	PSP, r0
 80103c4:	3820      	subs	r0, #32
 80103c6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80103c8:	4718      	bx	r3
 80103ca:	46c0      	nop			; (mov r8, r8)

080103cc <pxCurrentTCBConst>:
 80103cc:	20001638 	.word	0x20001638

080103d0 <xPortSysTickHandler>:
{
 80103d0:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80103d2:	f7ff ffd3 	bl	801037c <ulSetInterruptMaskFromISR>
 80103d6:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80103d8:	f7ff f88e 	bl	800f4f8 <xTaskIncrementTick>
 80103dc:	2800      	cmp	r0, #0
 80103de:	d003      	beq.n	80103e8 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80103e0:	4b03      	ldr	r3, [pc, #12]	; (80103f0 <xPortSysTickHandler+0x20>)
 80103e2:	2280      	movs	r2, #128	; 0x80
 80103e4:	0552      	lsls	r2, r2, #21
 80103e6:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80103e8:	0020      	movs	r0, r4
 80103ea:	f7ff ffcc 	bl	8010386 <vClearInterruptMaskFromISR>
}
 80103ee:	bd10      	pop	{r4, pc}
 80103f0:	e000ed04 	.word	0xe000ed04

080103f4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103f4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80103f6:	4b12      	ldr	r3, [pc, #72]	; (8010440 <prvInsertBlockIntoFreeList+0x4c>)
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	4282      	cmp	r2, r0
 80103fc:	d319      	bcc.n	8010432 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80103fe:	685c      	ldr	r4, [r3, #4]
 8010400:	1919      	adds	r1, r3, r4
 8010402:	4288      	cmp	r0, r1
 8010404:	d103      	bne.n	801040e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010406:	6841      	ldr	r1, [r0, #4]
 8010408:	1909      	adds	r1, r1, r4
 801040a:	6059      	str	r1, [r3, #4]
 801040c:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801040e:	6841      	ldr	r1, [r0, #4]
 8010410:	1844      	adds	r4, r0, r1
 8010412:	42a2      	cmp	r2, r4
 8010414:	d111      	bne.n	801043a <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010416:	4c0b      	ldr	r4, [pc, #44]	; (8010444 <prvInsertBlockIntoFreeList+0x50>)
 8010418:	6824      	ldr	r4, [r4, #0]
 801041a:	42a2      	cmp	r2, r4
 801041c:	d00b      	beq.n	8010436 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801041e:	6852      	ldr	r2, [r2, #4]
 8010420:	1852      	adds	r2, r2, r1
 8010422:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	6812      	ldr	r2, [r2, #0]
 8010428:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801042a:	4298      	cmp	r0, r3
 801042c:	d000      	beq.n	8010430 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801042e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010430:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010432:	0013      	movs	r3, r2
 8010434:	e7e0      	b.n	80103f8 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010436:	6002      	str	r2, [r0, #0]
 8010438:	e7f7      	b.n	801042a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801043a:	6002      	str	r2, [r0, #0]
 801043c:	e7f5      	b.n	801042a <prvInsertBlockIntoFreeList+0x36>
 801043e:	46c0      	nop			; (mov r8, r8)
 8010440:	200061e0 	.word	0x200061e0
 8010444:	20001798 	.word	0x20001798

08010448 <pvPortMalloc>:
{
 8010448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 801044c:	f7ff f840 	bl	800f4d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010450:	4b41      	ldr	r3, [pc, #260]	; (8010558 <pvPortMalloc+0x110>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00a      	beq.n	801046e <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010458:	4b40      	ldr	r3, [pc, #256]	; (801055c <pvPortMalloc+0x114>)
 801045a:	681f      	ldr	r7, [r3, #0]
 801045c:	423c      	tst	r4, r7
 801045e:	d02a      	beq.n	80104b6 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8010460:	f7ff f8d6 	bl	800f610 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010464:	f7fd fc84 	bl	800dd70 <vApplicationMallocFailedHook>
 8010468:	2500      	movs	r5, #0
}
 801046a:	0028      	movs	r0, r5
 801046c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 801046e:	4a3c      	ldr	r2, [pc, #240]	; (8010560 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010470:	0753      	lsls	r3, r2, #29
 8010472:	d01e      	beq.n	80104b2 <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010474:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010476:	2307      	movs	r3, #7
 8010478:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 801047a:	4b3a      	ldr	r3, [pc, #232]	; (8010564 <pvPortMalloc+0x11c>)
 801047c:	18d3      	adds	r3, r2, r3
 801047e:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010480:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010482:	4839      	ldr	r0, [pc, #228]	; (8010568 <pvPortMalloc+0x120>)
 8010484:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010486:	2100      	movs	r1, #0
 8010488:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 801048a:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 801048c:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801048e:	2007      	movs	r0, #7
 8010490:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8010492:	4831      	ldr	r0, [pc, #196]	; (8010558 <pvPortMalloc+0x110>)
 8010494:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8010496:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010498:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 801049a:	1a99      	subs	r1, r3, r2
 801049c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801049e:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104a0:	4b32      	ldr	r3, [pc, #200]	; (801056c <pvPortMalloc+0x124>)
 80104a2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104a4:	4b32      	ldr	r3, [pc, #200]	; (8010570 <pvPortMalloc+0x128>)
 80104a6:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80104a8:	4b2c      	ldr	r3, [pc, #176]	; (801055c <pvPortMalloc+0x114>)
 80104aa:	2280      	movs	r2, #128	; 0x80
 80104ac:	0612      	lsls	r2, r2, #24
 80104ae:	601a      	str	r2, [r3, #0]
 80104b0:	e7d2      	b.n	8010458 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104b2:	4b2c      	ldr	r3, [pc, #176]	; (8010564 <pvPortMalloc+0x11c>)
 80104b4:	e7e5      	b.n	8010482 <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80104b6:	2c00      	cmp	r4, #0
 80104b8:	d008      	beq.n	80104cc <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80104ba:	0023      	movs	r3, r4
 80104bc:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104be:	075a      	lsls	r2, r3, #29
 80104c0:	d002      	beq.n	80104c8 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104c2:	2207      	movs	r2, #7
 80104c4:	4393      	bics	r3, r2
 80104c6:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80104cc:	f7ff f8a0 	bl	800f610 <xTaskResumeAll>
 80104d0:	e7c8      	b.n	8010464 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104d2:	4a27      	ldr	r2, [pc, #156]	; (8010570 <pvPortMalloc+0x128>)
 80104d4:	6816      	ldr	r6, [r2, #0]
 80104d6:	429e      	cmp	r6, r3
 80104d8:	d302      	bcc.n	80104e0 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 80104da:	4a23      	ldr	r2, [pc, #140]	; (8010568 <pvPortMalloc+0x120>)
 80104dc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104de:	e004      	b.n	80104ea <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 80104e0:	f7ff f896 	bl	800f610 <xTaskResumeAll>
 80104e4:	e7be      	b.n	8010464 <pvPortMalloc+0x1c>
 80104e6:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80104e8:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104ea:	6861      	ldr	r1, [r4, #4]
 80104ec:	4299      	cmp	r1, r3
 80104ee:	d202      	bcs.n	80104f6 <pvPortMalloc+0xae>
 80104f0:	6821      	ldr	r1, [r4, #0]
 80104f2:	2900      	cmp	r1, #0
 80104f4:	d1f7      	bne.n	80104e6 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80104f6:	4918      	ldr	r1, [pc, #96]	; (8010558 <pvPortMalloc+0x110>)
 80104f8:	6809      	ldr	r1, [r1, #0]
 80104fa:	42a1      	cmp	r1, r4
 80104fc:	d00b      	beq.n	8010516 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80104fe:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010500:	6821      	ldr	r1, [r4, #0]
 8010502:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010504:	6862      	ldr	r2, [r4, #4]
 8010506:	1ad2      	subs	r2, r2, r3
 8010508:	2a10      	cmp	r2, #16
 801050a:	d90b      	bls.n	8010524 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801050c:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801050e:	0741      	lsls	r1, r0, #29
 8010510:	d004      	beq.n	801051c <pvPortMalloc+0xd4>
 8010512:	b672      	cpsid	i
 8010514:	e7fe      	b.n	8010514 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010516:	f7ff f87b 	bl	800f610 <xTaskResumeAll>
 801051a:	e7a3      	b.n	8010464 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801051c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801051e:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010520:	f7ff ff68 	bl	80103f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010524:	6862      	ldr	r2, [r4, #4]
 8010526:	1ab6      	subs	r6, r6, r2
 8010528:	4911      	ldr	r1, [pc, #68]	; (8010570 <pvPortMalloc+0x128>)
 801052a:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801052c:	490f      	ldr	r1, [pc, #60]	; (801056c <pvPortMalloc+0x124>)
 801052e:	6809      	ldr	r1, [r1, #0]
 8010530:	428e      	cmp	r6, r1
 8010532:	d201      	bcs.n	8010538 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010534:	490d      	ldr	r1, [pc, #52]	; (801056c <pvPortMalloc+0x124>)
 8010536:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010538:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801053a:	4317      	orrs	r7, r2
 801053c:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801053e:	2300      	movs	r3, #0
 8010540:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010542:	f7ff f865 	bl	800f610 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010546:	2d00      	cmp	r5, #0
 8010548:	d100      	bne.n	801054c <pvPortMalloc+0x104>
 801054a:	e78b      	b.n	8010464 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801054c:	076b      	lsls	r3, r5, #29
 801054e:	d100      	bne.n	8010552 <pvPortMalloc+0x10a>
 8010550:	e78b      	b.n	801046a <pvPortMalloc+0x22>
 8010552:	b672      	cpsid	i
 8010554:	e7fe      	b.n	8010554 <pvPortMalloc+0x10c>
 8010556:	46c0      	nop			; (mov r8, r8)
 8010558:	20001798 	.word	0x20001798
 801055c:	200061d4 	.word	0x200061d4
 8010560:	2000179c 	.word	0x2000179c
 8010564:	00004a38 	.word	0x00004a38
 8010568:	200061e0 	.word	0x200061e0
 801056c:	200061dc 	.word	0x200061dc
 8010570:	200061d8 	.word	0x200061d8

08010574 <vPortFree>:
{
 8010574:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010576:	2800      	cmp	r0, #0
 8010578:	d020      	beq.n	80105bc <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801057a:	0003      	movs	r3, r0
 801057c:	3b08      	subs	r3, #8
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	4a0f      	ldr	r2, [pc, #60]	; (80105c0 <vPortFree+0x4c>)
 8010582:	6812      	ldr	r2, [r2, #0]
 8010584:	421a      	tst	r2, r3
 8010586:	d101      	bne.n	801058c <vPortFree+0x18>
 8010588:	b672      	cpsid	i
 801058a:	e7fe      	b.n	801058a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801058c:	0001      	movs	r1, r0
 801058e:	3908      	subs	r1, #8
 8010590:	6809      	ldr	r1, [r1, #0]
 8010592:	2900      	cmp	r1, #0
 8010594:	d001      	beq.n	801059a <vPortFree+0x26>
 8010596:	b672      	cpsid	i
 8010598:	e7fe      	b.n	8010598 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801059a:	3808      	subs	r0, #8
 801059c:	0004      	movs	r4, r0
 801059e:	4393      	bics	r3, r2
 80105a0:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80105a2:	f7fe ff95 	bl	800f4d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80105a6:	4a07      	ldr	r2, [pc, #28]	; (80105c4 <vPortFree+0x50>)
 80105a8:	6863      	ldr	r3, [r4, #4]
 80105aa:	6811      	ldr	r1, [r2, #0]
 80105ac:	468c      	mov	ip, r1
 80105ae:	4463      	add	r3, ip
 80105b0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80105b2:	0020      	movs	r0, r4
 80105b4:	f7ff ff1e 	bl	80103f4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80105b8:	f7ff f82a 	bl	800f610 <xTaskResumeAll>
}
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	46c0      	nop			; (mov r8, r8)
 80105c0:	200061d4 	.word	0x200061d4
 80105c4:	200061d8 	.word	0x200061d8

080105c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80105c8:	b510      	push	{r4, lr}
 80105ca:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80105cc:	f002 f93c 	bl	8012848 <HAL_RCC_GetHCLKFreq>
 80105d0:	21fa      	movs	r1, #250	; 0xfa
 80105d2:	0089      	lsls	r1, r1, #2
 80105d4:	f7ef fdb2 	bl	800013c <__udivsi3>
 80105d8:	f000 fbde 	bl	8010d98 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80105dc:	2001      	movs	r0, #1
 80105de:	2200      	movs	r2, #0
 80105e0:	0021      	movs	r1, r4
 80105e2:	4240      	negs	r0, r0
 80105e4:	f000 fb90 	bl	8010d08 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80105e8:	2000      	movs	r0, #0
 80105ea:	bd10      	pop	{r4, pc}

080105ec <HAL_Init>:
{
 80105ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80105ee:	4a06      	ldr	r2, [pc, #24]	; (8010608 <HAL_Init+0x1c>)
 80105f0:	6813      	ldr	r3, [r2, #0]
 80105f2:	2110      	movs	r1, #16
 80105f4:	430b      	orrs	r3, r1
 80105f6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80105f8:	2000      	movs	r0, #0
 80105fa:	f7ff ffe5 	bl	80105c8 <HAL_InitTick>
  HAL_MspInit();
 80105fe:	f001 fccb 	bl	8011f98 <HAL_MspInit>
}
 8010602:	2000      	movs	r0, #0
 8010604:	bd10      	pop	{r4, pc}
 8010606:	46c0      	nop			; (mov r8, r8)
 8010608:	40022000 	.word	0x40022000

0801060c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 801060c:	4a02      	ldr	r2, [pc, #8]	; (8010618 <HAL_IncTick+0xc>)
 801060e:	6813      	ldr	r3, [r2, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	6013      	str	r3, [r2, #0]
}
 8010614:	4770      	bx	lr
 8010616:	46c0      	nop			; (mov r8, r8)
 8010618:	200061e8 	.word	0x200061e8

0801061c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801061c:	4b01      	ldr	r3, [pc, #4]	; (8010624 <HAL_GetTick+0x8>)
 801061e:	6818      	ldr	r0, [r3, #0]
}
 8010620:	4770      	bx	lr
 8010622:	46c0      	nop			; (mov r8, r8)
 8010624:	200061e8 	.word	0x200061e8

08010628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010628:	b510      	push	{r4, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801062e:	f7ff fff5 	bl	801061c <HAL_GetTick>
 8010632:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010634:	f7ff fff2 	bl	801061c <HAL_GetTick>
 8010638:	9b01      	ldr	r3, [sp, #4]
 801063a:	1b00      	subs	r0, r0, r4
 801063c:	4298      	cmp	r0, r3
 801063e:	d3f9      	bcc.n	8010634 <HAL_Delay+0xc>
  {
  }
}
 8010640:	b002      	add	sp, #8
 8010642:	bd10      	pop	{r4, pc}

08010644 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010644:	4b01      	ldr	r3, [pc, #4]	; (801064c <HAL_GetREVID+0x8>)
 8010646:	6818      	ldr	r0, [r3, #0]
 8010648:	0c00      	lsrs	r0, r0, #16
}
 801064a:	4770      	bx	lr
 801064c:	40015800 	.word	0x40015800

08010650 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010650:	4b02      	ldr	r3, [pc, #8]	; (801065c <HAL_GetDEVID+0xc>)
 8010652:	6818      	ldr	r0, [r3, #0]
 8010654:	0500      	lsls	r0, r0, #20
 8010656:	0d00      	lsrs	r0, r0, #20
}
 8010658:	4770      	bx	lr
 801065a:	46c0      	nop			; (mov r8, r8)
 801065c:	40015800 	.word	0x40015800

08010660 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010660:	b570      	push	{r4, r5, r6, lr}
 8010662:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010664:	6803      	ldr	r3, [r0, #0]
 8010666:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010668:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 801066a:	0752      	lsls	r2, r2, #29
 801066c:	d521      	bpl.n	80106b2 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801066e:	689a      	ldr	r2, [r3, #8]
 8010670:	0752      	lsls	r2, r2, #29
 8010672:	d506      	bpl.n	8010682 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010674:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010676:	0792      	lsls	r2, r2, #30
 8010678:	d403      	bmi.n	8010682 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 801067a:	689a      	ldr	r2, [r3, #8]
 801067c:	2110      	movs	r1, #16
 801067e:	430a      	orrs	r2, r1
 8010680:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8010682:	f7ff ffcb 	bl	801061c <HAL_GetTick>
 8010686:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010688:	2504      	movs	r5, #4
 801068a:	6823      	ldr	r3, [r4, #0]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	421d      	tst	r5, r3
 8010690:	d00e      	beq.n	80106b0 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010692:	f7ff ffc3 	bl	801061c <HAL_GetTick>
 8010696:	1b80      	subs	r0, r0, r6
 8010698:	2802      	cmp	r0, #2
 801069a:	d9f6      	bls.n	801068a <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801069e:	2210      	movs	r2, #16
 80106a0:	4313      	orrs	r3, r2
 80106a2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80106a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80106a6:	3a0f      	subs	r2, #15
 80106a8:	4313      	orrs	r3, r2
 80106aa:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80106ac:	2001      	movs	r0, #1
 80106ae:	e000      	b.n	80106b2 <ADC_ConversionStop+0x52>
  return HAL_OK;
 80106b0:	2000      	movs	r0, #0
}
 80106b2:	bd70      	pop	{r4, r5, r6, pc}

080106b4 <ADC_Disable>:
{
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80106b8:	6802      	ldr	r2, [r0, #0]
 80106ba:	6891      	ldr	r1, [r2, #8]
 80106bc:	2303      	movs	r3, #3
 80106be:	400b      	ands	r3, r1
  return HAL_OK;
 80106c0:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d000      	beq.n	80106c8 <ADC_Disable+0x14>
}
 80106c6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80106c8:	6813      	ldr	r3, [r2, #0]
 80106ca:	07db      	lsls	r3, r3, #31
 80106cc:	d402      	bmi.n	80106d4 <ADC_Disable+0x20>
 80106ce:	68d3      	ldr	r3, [r2, #12]
 80106d0:	041b      	lsls	r3, r3, #16
 80106d2:	d5f8      	bpl.n	80106c6 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80106d4:	6891      	ldr	r1, [r2, #8]
 80106d6:	2305      	movs	r3, #5
 80106d8:	400b      	ands	r3, r1
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d009      	beq.n	80106f2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80106de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106e0:	2210      	movs	r2, #16
 80106e2:	4313      	orrs	r3, r2
 80106e4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80106e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80106e8:	3a0f      	subs	r2, #15
 80106ea:	4313      	orrs	r3, r2
 80106ec:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80106ee:	2001      	movs	r0, #1
 80106f0:	e7e9      	b.n	80106c6 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80106f2:	6893      	ldr	r3, [r2, #8]
 80106f4:	2102      	movs	r1, #2
 80106f6:	430b      	orrs	r3, r1
 80106f8:	6093      	str	r3, [r2, #8]
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	2203      	movs	r2, #3
 80106fe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010700:	f7ff ff8c 	bl	801061c <HAL_GetTick>
 8010704:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010706:	2501      	movs	r5, #1
 8010708:	6823      	ldr	r3, [r4, #0]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	421d      	tst	r5, r3
 801070e:	d00e      	beq.n	801072e <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010710:	f7ff ff84 	bl	801061c <HAL_GetTick>
 8010714:	1b80      	subs	r0, r0, r6
 8010716:	2802      	cmp	r0, #2
 8010718:	d9f6      	bls.n	8010708 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801071a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801071c:	2210      	movs	r2, #16
 801071e:	4313      	orrs	r3, r2
 8010720:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010722:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010724:	3a0f      	subs	r2, #15
 8010726:	4313      	orrs	r3, r2
 8010728:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 801072a:	2001      	movs	r0, #1
 801072c:	e7cb      	b.n	80106c6 <ADC_Disable+0x12>
  return HAL_OK;
 801072e:	2000      	movs	r0, #0
 8010730:	e7c9      	b.n	80106c6 <ADC_Disable+0x12>
	...

08010734 <ADC_Enable>:
{
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801073a:	2300      	movs	r3, #0
 801073c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801073e:	6803      	ldr	r3, [r0, #0]
 8010740:	6899      	ldr	r1, [r3, #8]
 8010742:	2203      	movs	r2, #3
 8010744:	400a      	ands	r2, r1
 8010746:	2a01      	cmp	r2, #1
 8010748:	d02d      	beq.n	80107a6 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801074a:	6899      	ldr	r1, [r3, #8]
 801074c:	4a20      	ldr	r2, [pc, #128]	; (80107d0 <ADC_Enable+0x9c>)
 801074e:	4211      	tst	r1, r2
 8010750:	d131      	bne.n	80107b6 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010752:	689a      	ldr	r2, [r3, #8]
 8010754:	2101      	movs	r1, #1
 8010756:	430a      	orrs	r2, r1
 8010758:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801075a:	4b1e      	ldr	r3, [pc, #120]	; (80107d4 <ADC_Enable+0xa0>)
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	491e      	ldr	r1, [pc, #120]	; (80107d8 <ADC_Enable+0xa4>)
 8010760:	f7ef fcec 	bl	800013c <__udivsi3>
 8010764:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d005      	beq.n	8010778 <ADC_Enable+0x44>
      wait_loop_index--;
 801076c:	9b01      	ldr	r3, [sp, #4]
 801076e:	3b01      	subs	r3, #1
 8010770:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010772:	9b01      	ldr	r3, [sp, #4]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1f9      	bne.n	801076c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010778:	f7ff ff50 	bl	801061c <HAL_GetTick>
 801077c:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801077e:	2501      	movs	r5, #1
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	421d      	tst	r5, r3
 8010786:	d121      	bne.n	80107cc <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010788:	f7ff ff48 	bl	801061c <HAL_GetTick>
 801078c:	1b80      	subs	r0, r0, r6
 801078e:	2802      	cmp	r0, #2
 8010790:	d9f6      	bls.n	8010780 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010792:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010794:	2210      	movs	r2, #16
 8010796:	4313      	orrs	r3, r2
 8010798:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801079a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801079c:	3a0f      	subs	r2, #15
 801079e:	4313      	orrs	r3, r2
 80107a0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80107a2:	2001      	movs	r0, #1
 80107a4:	e010      	b.n	80107c8 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80107a6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80107a8:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80107aa:	07d2      	lsls	r2, r2, #31
 80107ac:	d40c      	bmi.n	80107c8 <ADC_Enable+0x94>
 80107ae:	68da      	ldr	r2, [r3, #12]
 80107b0:	0412      	lsls	r2, r2, #16
 80107b2:	d5ca      	bpl.n	801074a <ADC_Enable+0x16>
 80107b4:	e008      	b.n	80107c8 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80107b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107b8:	2210      	movs	r2, #16
 80107ba:	4313      	orrs	r3, r2
 80107bc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80107c0:	3a0f      	subs	r2, #15
 80107c2:	4313      	orrs	r3, r2
 80107c4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80107c6:	2001      	movs	r0, #1
}
 80107c8:	b002      	add	sp, #8
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80107cc:	2000      	movs	r0, #0
 80107ce:	e7fb      	b.n	80107c8 <ADC_Enable+0x94>
 80107d0:	80000017 	.word	0x80000017
 80107d4:	200000ac 	.word	0x200000ac
 80107d8:	000f4240 	.word	0x000f4240

080107dc <HAL_ADC_Init>:
{
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80107e0:	d100      	bne.n	80107e4 <HAL_ADC_Init+0x8>
 80107e2:	e09b      	b.n	801091c <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80107e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d073      	beq.n	80108d2 <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80107ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107ec:	06db      	lsls	r3, r3, #27
 80107ee:	d500      	bpl.n	80107f2 <HAL_ADC_Init+0x16>
 80107f0:	e08e      	b.n	8010910 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80107f2:	6822      	ldr	r2, [r4, #0]
 80107f4:	6893      	ldr	r3, [r2, #8]
 80107f6:	2104      	movs	r1, #4
 80107f8:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 80107fa:	d000      	beq.n	80107fe <HAL_ADC_Init+0x22>
 80107fc:	e088      	b.n	8010910 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 80107fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010800:	4847      	ldr	r0, [pc, #284]	; (8010920 <HAL_ADC_Init+0x144>)
 8010802:	4003      	ands	r3, r0
 8010804:	3006      	adds	r0, #6
 8010806:	30ff      	adds	r0, #255	; 0xff
 8010808:	4303      	orrs	r3, r0
 801080a:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 801080c:	6890      	ldr	r0, [r2, #8]
 801080e:	2303      	movs	r3, #3
 8010810:	4003      	ands	r3, r0
 8010812:	2b01      	cmp	r3, #1
 8010814:	d063      	beq.n	80108de <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010816:	68d3      	ldr	r3, [r2, #12]
 8010818:	2018      	movs	r0, #24
 801081a:	4383      	bics	r3, r0
 801081c:	68a0      	ldr	r0, [r4, #8]
 801081e:	4303      	orrs	r3, r0
 8010820:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010822:	6822      	ldr	r2, [r4, #0]
 8010824:	6913      	ldr	r3, [r2, #16]
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	089b      	lsrs	r3, r3, #2
 801082a:	6860      	ldr	r0, [r4, #4]
 801082c:	4303      	orrs	r3, r0
 801082e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010830:	6822      	ldr	r2, [r4, #0]
 8010832:	68d3      	ldr	r3, [r2, #12]
 8010834:	483b      	ldr	r0, [pc, #236]	; (8010924 <HAL_ADC_Init+0x148>)
 8010836:	4003      	ands	r3, r0
 8010838:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801083a:	69a3      	ldr	r3, [r4, #24]
 801083c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801083e:	69e3      	ldr	r3, [r4, #28]
 8010840:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010842:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010844:	6a20      	ldr	r0, [r4, #32]
 8010846:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801084a:	000e      	movs	r6, r1
 801084c:	2b01      	cmp	r3, #1
 801084e:	d001      	beq.n	8010854 <HAL_ADC_Init+0x78>
 8010850:	2680      	movs	r6, #128	; 0x80
 8010852:	0176      	lsls	r6, r6, #5
 8010854:	68e3      	ldr	r3, [r4, #12]
 8010856:	431a      	orrs	r2, r3
 8010858:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801085a:	6923      	ldr	r3, [r4, #16]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d045      	beq.n	80108ec <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010860:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010862:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010864:	4313      	orrs	r3, r2
 8010866:	4333      	orrs	r3, r6
 8010868:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801086a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801086c:	2a01      	cmp	r2, #1
 801086e:	d03f      	beq.n	80108f0 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010870:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010872:	21c2      	movs	r1, #194	; 0xc2
 8010874:	31ff      	adds	r1, #255	; 0xff
 8010876:	428a      	cmp	r2, r1
 8010878:	d002      	beq.n	8010880 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801087a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801087c:	430a      	orrs	r2, r1
 801087e:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010880:	6821      	ldr	r1, [r4, #0]
 8010882:	68ca      	ldr	r2, [r1, #12]
 8010884:	431a      	orrs	r2, r3
 8010886:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801088a:	2180      	movs	r1, #128	; 0x80
 801088c:	0549      	lsls	r1, r1, #21
 801088e:	428a      	cmp	r2, r1
 8010890:	d002      	beq.n	8010898 <HAL_ADC_Init+0xbc>
 8010892:	3a01      	subs	r2, #1
 8010894:	2a06      	cmp	r2, #6
 8010896:	d80a      	bhi.n	80108ae <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010898:	6820      	ldr	r0, [r4, #0]
 801089a:	6941      	ldr	r1, [r0, #20]
 801089c:	2207      	movs	r2, #7
 801089e:	4391      	bics	r1, r2
 80108a0:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80108a2:	6821      	ldr	r1, [r4, #0]
 80108a4:	6948      	ldr	r0, [r1, #20]
 80108a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80108a8:	402a      	ands	r2, r5
 80108aa:	4302      	orrs	r2, r0
 80108ac:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80108ae:	6822      	ldr	r2, [r4, #0]
 80108b0:	68d2      	ldr	r2, [r2, #12]
 80108b2:	491d      	ldr	r1, [pc, #116]	; (8010928 <HAL_ADC_Init+0x14c>)
 80108b4:	400a      	ands	r2, r1
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d020      	beq.n	80108fc <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 80108ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80108bc:	2212      	movs	r2, #18
 80108be:	4393      	bics	r3, r2
 80108c0:	3a02      	subs	r2, #2
 80108c2:	4313      	orrs	r3, r2
 80108c4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80108c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108c8:	3a0f      	subs	r2, #15
 80108ca:	4313      	orrs	r3, r2
 80108cc:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80108ce:	2001      	movs	r0, #1
 80108d0:	e023      	b.n	801091a <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 80108d2:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80108d4:	2240      	movs	r2, #64	; 0x40
 80108d6:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80108d8:	f7f8 f910 	bl	8008afc <HAL_ADC_MspInit>
 80108dc:	e785      	b.n	80107ea <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80108de:	6813      	ldr	r3, [r2, #0]
 80108e0:	07db      	lsls	r3, r3, #31
 80108e2:	d4a5      	bmi.n	8010830 <HAL_ADC_Init+0x54>
 80108e4:	68d3      	ldr	r3, [r2, #12]
 80108e6:	041b      	lsls	r3, r3, #16
 80108e8:	d4a2      	bmi.n	8010830 <HAL_ADC_Init+0x54>
 80108ea:	e794      	b.n	8010816 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80108ec:	2104      	movs	r1, #4
 80108ee:	e7b7      	b.n	8010860 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d1bd      	bne.n	8010870 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80108f4:	2280      	movs	r2, #128	; 0x80
 80108f6:	0252      	lsls	r2, r2, #9
 80108f8:	4313      	orrs	r3, r2
 80108fa:	e7b9      	b.n	8010870 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 80108fc:	2300      	movs	r3, #0
 80108fe:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010902:	2203      	movs	r2, #3
 8010904:	4393      	bics	r3, r2
 8010906:	3a02      	subs	r2, #2
 8010908:	4313      	orrs	r3, r2
 801090a:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801090c:	2000      	movs	r0, #0
 801090e:	e004      	b.n	801091a <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010912:	2210      	movs	r2, #16
 8010914:	4313      	orrs	r3, r2
 8010916:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010918:	2001      	movs	r0, #1
}
 801091a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801091c:	2001      	movs	r0, #1
 801091e:	e7fc      	b.n	801091a <HAL_ADC_Init+0x13e>
 8010920:	fffffefd 	.word	0xfffffefd
 8010924:	fffe0219 	.word	0xfffe0219
 8010928:	833fffe7 	.word	0x833fffe7

0801092c <HAL_ADC_Start>:
{
 801092c:	b510      	push	{r4, lr}
 801092e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010930:	6803      	ldr	r3, [r0, #0]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	075b      	lsls	r3, r3, #29
 8010936:	d423      	bmi.n	8010980 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010938:	2340      	movs	r3, #64	; 0x40
 801093a:	5cc3      	ldrb	r3, [r0, r3]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d021      	beq.n	8010984 <HAL_ADC_Start+0x58>
 8010940:	2340      	movs	r3, #64	; 0x40
 8010942:	2201      	movs	r2, #1
 8010944:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010946:	69c3      	ldr	r3, [r0, #28]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d114      	bne.n	8010976 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 801094c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801094e:	4a0e      	ldr	r2, [pc, #56]	; (8010988 <HAL_ADC_Start+0x5c>)
 8010950:	401a      	ands	r2, r3
 8010952:	2380      	movs	r3, #128	; 0x80
 8010954:	005b      	lsls	r3, r3, #1
 8010956:	4313      	orrs	r3, r2
 8010958:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 801095a:	2300      	movs	r3, #0
 801095c:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801095e:	2240      	movs	r2, #64	; 0x40
 8010960:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	3a24      	subs	r2, #36	; 0x24
 8010966:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010968:	6822      	ldr	r2, [r4, #0]
 801096a:	6893      	ldr	r3, [r2, #8]
 801096c:	2104      	movs	r1, #4
 801096e:	430b      	orrs	r3, r1
 8010970:	6093      	str	r3, [r2, #8]
 8010972:	2000      	movs	r0, #0
}
 8010974:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010976:	f7ff fedd 	bl	8010734 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801097a:	2800      	cmp	r0, #0
 801097c:	d0e6      	beq.n	801094c <HAL_ADC_Start+0x20>
 801097e:	e7f9      	b.n	8010974 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010980:	2002      	movs	r0, #2
 8010982:	e7f7      	b.n	8010974 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010984:	2002      	movs	r0, #2
 8010986:	e7f5      	b.n	8010974 <HAL_ADC_Start+0x48>
 8010988:	fffff0fe 	.word	0xfffff0fe

0801098c <HAL_ADC_Stop>:
{ 
 801098c:	b510      	push	{r4, lr}
 801098e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010990:	2340      	movs	r3, #64	; 0x40
 8010992:	5cc3      	ldrb	r3, [r0, r3]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d017      	beq.n	80109c8 <HAL_ADC_Stop+0x3c>
 8010998:	2340      	movs	r3, #64	; 0x40
 801099a:	2201      	movs	r2, #1
 801099c:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 801099e:	f7ff fe5f 	bl	8010660 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d003      	beq.n	80109ae <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80109a6:	2340      	movs	r3, #64	; 0x40
 80109a8:	2200      	movs	r2, #0
 80109aa:	54e2      	strb	r2, [r4, r3]
}
 80109ac:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80109ae:	0020      	movs	r0, r4
 80109b0:	f7ff fe80 	bl	80106b4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d1f6      	bne.n	80109a6 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80109b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80109ba:	4a04      	ldr	r2, [pc, #16]	; (80109cc <HAL_ADC_Stop+0x40>)
 80109bc:	4013      	ands	r3, r2
 80109be:	3204      	adds	r2, #4
 80109c0:	32ff      	adds	r2, #255	; 0xff
 80109c2:	4313      	orrs	r3, r2
 80109c4:	6463      	str	r3, [r4, #68]	; 0x44
 80109c6:	e7ee      	b.n	80109a6 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80109c8:	2002      	movs	r0, #2
 80109ca:	e7ef      	b.n	80109ac <HAL_ADC_Stop+0x20>
 80109cc:	fffffefe 	.word	0xfffffefe

080109d0 <HAL_ADC_PollForConversion>:
{
 80109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d2:	0006      	movs	r6, r0
 80109d4:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80109d6:	6943      	ldr	r3, [r0, #20]
 80109d8:	2b08      	cmp	r3, #8
 80109da:	d026      	beq.n	8010a2a <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80109dc:	6803      	ldr	r3, [r0, #0]
 80109de:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80109e0:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80109e2:	07db      	lsls	r3, r3, #31
 80109e4:	d418      	bmi.n	8010a18 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 80109e6:	f7ff fe19 	bl	801061c <HAL_GetTick>
 80109ea:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80109ec:	6832      	ldr	r2, [r6, #0]
 80109ee:	6813      	ldr	r3, [r2, #0]
 80109f0:	421d      	tst	r5, r3
 80109f2:	d11c      	bne.n	8010a2e <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80109f4:	1c63      	adds	r3, r4, #1
 80109f6:	d0fa      	beq.n	80109ee <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	d004      	beq.n	8010a06 <HAL_ADC_PollForConversion+0x36>
 80109fc:	f7ff fe0e 	bl	801061c <HAL_GetTick>
 8010a00:	1bc0      	subs	r0, r0, r7
 8010a02:	42a0      	cmp	r0, r4
 8010a04:	d9f2      	bls.n	80109ec <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010a06:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010a08:	2204      	movs	r2, #4
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010a0e:	2340      	movs	r3, #64	; 0x40
 8010a10:	2200      	movs	r2, #0
 8010a12:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010a14:	2003      	movs	r0, #3
 8010a16:	e007      	b.n	8010a28 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010a18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010a20:	2340      	movs	r3, #64	; 0x40
 8010a22:	2200      	movs	r2, #0
 8010a24:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010a26:	2001      	movs	r0, #1
}
 8010a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010a2a:	2508      	movs	r5, #8
 8010a2c:	e7db      	b.n	80109e6 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010a2e:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010a30:	2380      	movs	r3, #128	; 0x80
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	430b      	orrs	r3, r1
 8010a36:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010a38:	68d1      	ldr	r1, [r2, #12]
 8010a3a:	23c0      	movs	r3, #192	; 0xc0
 8010a3c:	011b      	lsls	r3, r3, #4
 8010a3e:	4219      	tst	r1, r3
 8010a40:	d113      	bne.n	8010a6a <HAL_ADC_PollForConversion+0x9a>
 8010a42:	6a33      	ldr	r3, [r6, #32]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d110      	bne.n	8010a6a <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010a48:	6813      	ldr	r3, [r2, #0]
 8010a4a:	071b      	lsls	r3, r3, #28
 8010a4c:	d50d      	bpl.n	8010a6a <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010a4e:	6893      	ldr	r3, [r2, #8]
 8010a50:	075b      	lsls	r3, r3, #29
 8010a52:	d412      	bmi.n	8010a7a <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010a54:	6853      	ldr	r3, [r2, #4]
 8010a56:	210c      	movs	r1, #12
 8010a58:	438b      	bics	r3, r1
 8010a5a:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010a5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010a5e:	4a0b      	ldr	r2, [pc, #44]	; (8010a8c <HAL_ADC_PollForConversion+0xbc>)
 8010a60:	4013      	ands	r3, r2
 8010a62:	3204      	adds	r2, #4
 8010a64:	32ff      	adds	r2, #255	; 0xff
 8010a66:	4313      	orrs	r3, r2
 8010a68:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010a6a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010a6c:	69b3      	ldr	r3, [r6, #24]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1da      	bne.n	8010a28 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010a72:	6833      	ldr	r3, [r6, #0]
 8010a74:	220c      	movs	r2, #12
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	e7d6      	b.n	8010a28 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010a7a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a82:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010a84:	3a1f      	subs	r2, #31
 8010a86:	4313      	orrs	r3, r2
 8010a88:	64b3      	str	r3, [r6, #72]	; 0x48
 8010a8a:	e7ee      	b.n	8010a6a <HAL_ADC_PollForConversion+0x9a>
 8010a8c:	fffffefe 	.word	0xfffffefe

08010a90 <HAL_ADC_Start_IT>:
{
 8010a90:	b510      	push	{r4, lr}
 8010a92:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010a94:	6803      	ldr	r3, [r0, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	075b      	lsls	r3, r3, #29
 8010a9a:	d436      	bmi.n	8010b0a <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	5cc3      	ldrb	r3, [r0, r3]
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d034      	beq.n	8010b0e <HAL_ADC_Start_IT+0x7e>
 8010aa4:	2340      	movs	r3, #64	; 0x40
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010aaa:	69c3      	ldr	r3, [r0, #28]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d121      	bne.n	8010af4 <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 8010ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ab2:	4a18      	ldr	r2, [pc, #96]	; (8010b14 <HAL_ADC_Start_IT+0x84>)
 8010ab4:	401a      	ands	r2, r3
 8010ab6:	2380      	movs	r3, #128	; 0x80
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	4313      	orrs	r3, r2
 8010abc:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010abe:	2300      	movs	r3, #0
 8010ac0:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010ac2:	2240      	movs	r2, #64	; 0x40
 8010ac4:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	3a24      	subs	r2, #36	; 0x24
 8010aca:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8010acc:	6963      	ldr	r3, [r4, #20]
 8010ace:	2b08      	cmp	r3, #8
 8010ad0:	d115      	bne.n	8010afe <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010ad2:	6822      	ldr	r2, [r4, #0]
 8010ad4:	6853      	ldr	r3, [r2, #4]
 8010ad6:	2104      	movs	r1, #4
 8010ad8:	438b      	bics	r3, r1
 8010ada:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8010adc:	6822      	ldr	r2, [r4, #0]
 8010ade:	6853      	ldr	r3, [r2, #4]
 8010ae0:	3114      	adds	r1, #20
 8010ae2:	430b      	orrs	r3, r1
 8010ae4:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010ae6:	6822      	ldr	r2, [r4, #0]
 8010ae8:	6893      	ldr	r3, [r2, #8]
 8010aea:	2104      	movs	r1, #4
 8010aec:	430b      	orrs	r3, r1
 8010aee:	6093      	str	r3, [r2, #8]
 8010af0:	2000      	movs	r0, #0
}
 8010af2:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010af4:	f7ff fe1e 	bl	8010734 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d0d9      	beq.n	8010ab0 <HAL_ADC_Start_IT+0x20>
 8010afc:	e7f9      	b.n	8010af2 <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010afe:	6822      	ldr	r2, [r4, #0]
 8010b00:	6853      	ldr	r3, [r2, #4]
 8010b02:	211c      	movs	r1, #28
 8010b04:	430b      	orrs	r3, r1
 8010b06:	6053      	str	r3, [r2, #4]
          break;
 8010b08:	e7ed      	b.n	8010ae6 <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 8010b0a:	2002      	movs	r0, #2
 8010b0c:	e7f1      	b.n	8010af2 <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 8010b0e:	2002      	movs	r0, #2
 8010b10:	e7ef      	b.n	8010af2 <HAL_ADC_Start_IT+0x62>
 8010b12:	46c0      	nop			; (mov r8, r8)
 8010b14:	fffff0fe 	.word	0xfffff0fe

08010b18 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010b18:	6803      	ldr	r3, [r0, #0]
 8010b1a:	2208      	movs	r2, #8
 8010b1c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010b1e:	6803      	ldr	r3, [r0, #0]
 8010b20:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010b22:	4770      	bx	lr

08010b24 <HAL_ADC_ConfigChannel>:
{
 8010b24:	b530      	push	{r4, r5, lr}
 8010b26:	b083      	sub	sp, #12
 8010b28:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010b2e:	3340      	adds	r3, #64	; 0x40
 8010b30:	5cc3      	ldrb	r3, [r0, r3]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d100      	bne.n	8010b38 <HAL_ADC_ConfigChannel+0x14>
 8010b36:	e088      	b.n	8010c4a <HAL_ADC_ConfigChannel+0x126>
 8010b38:	2340      	movs	r3, #64	; 0x40
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010b3e:	6803      	ldr	r3, [r0, #0]
 8010b40:	689a      	ldr	r2, [r3, #8]
 8010b42:	0752      	lsls	r2, r2, #29
 8010b44:	d475      	bmi.n	8010c32 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010b46:	4a42      	ldr	r2, [pc, #264]	; (8010c50 <HAL_ADC_ConfigChannel+0x12c>)
 8010b48:	6848      	ldr	r0, [r1, #4]
 8010b4a:	4290      	cmp	r0, r2
 8010b4c:	d050      	beq.n	8010bf0 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010b4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010b50:	2201      	movs	r2, #1
 8010b52:	680d      	ldr	r5, [r1, #0]
 8010b54:	40aa      	lsls	r2, r5
 8010b56:	4302      	orrs	r2, r0
 8010b58:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b5c:	2280      	movs	r2, #128	; 0x80
 8010b5e:	0552      	lsls	r2, r2, #21
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d013      	beq.n	8010b8c <HAL_ADC_ConfigChannel+0x68>
 8010b64:	3b01      	subs	r3, #1
 8010b66:	2b06      	cmp	r3, #6
 8010b68:	d910      	bls.n	8010b8c <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010b6a:	6822      	ldr	r2, [r4, #0]
 8010b6c:	6950      	ldr	r0, [r2, #20]
 8010b6e:	2307      	movs	r3, #7
 8010b70:	4003      	ands	r3, r0
 8010b72:	6888      	ldr	r0, [r1, #8]
 8010b74:	4298      	cmp	r0, r3
 8010b76:	d009      	beq.n	8010b8c <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010b78:	6950      	ldr	r0, [r2, #20]
 8010b7a:	2307      	movs	r3, #7
 8010b7c:	4398      	bics	r0, r3
 8010b7e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	6950      	ldr	r0, [r2, #20]
 8010b84:	688d      	ldr	r5, [r1, #8]
 8010b86:	402b      	ands	r3, r5
 8010b88:	4303      	orrs	r3, r0
 8010b8a:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010b8c:	680b      	ldr	r3, [r1, #0]
 8010b8e:	001a      	movs	r2, r3
 8010b90:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010b92:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010b94:	2a02      	cmp	r2, #2
 8010b96:	d851      	bhi.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010b98:	4a2e      	ldr	r2, [pc, #184]	; (8010c54 <HAL_ADC_ConfigChannel+0x130>)
 8010b9a:	6810      	ldr	r0, [r2, #0]
 8010b9c:	2b10      	cmp	r3, #16
 8010b9e:	d024      	beq.n	8010bea <HAL_ADC_ConfigChannel+0xc6>
 8010ba0:	3b11      	subs	r3, #17
 8010ba2:	425a      	negs	r2, r3
 8010ba4:	415a      	adcs	r2, r3
 8010ba6:	4253      	negs	r3, r2
 8010ba8:	4a2b      	ldr	r2, [pc, #172]	; (8010c58 <HAL_ADC_ConfigChannel+0x134>)
 8010baa:	4013      	ands	r3, r2
 8010bac:	2280      	movs	r2, #128	; 0x80
 8010bae:	0452      	lsls	r2, r2, #17
 8010bb0:	4694      	mov	ip, r2
 8010bb2:	4463      	add	r3, ip
 8010bb4:	4303      	orrs	r3, r0
 8010bb6:	4a27      	ldr	r2, [pc, #156]	; (8010c54 <HAL_ADC_ConfigChannel+0x130>)
 8010bb8:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010bba:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010bbc:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010bbe:	2b10      	cmp	r3, #16
 8010bc0:	d13c      	bne.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010bc2:	4b26      	ldr	r3, [pc, #152]	; (8010c5c <HAL_ADC_ConfigChannel+0x138>)
 8010bc4:	6818      	ldr	r0, [r3, #0]
 8010bc6:	4926      	ldr	r1, [pc, #152]	; (8010c60 <HAL_ADC_ConfigChannel+0x13c>)
 8010bc8:	f7ef fab8 	bl	800013c <__udivsi3>
 8010bcc:	0083      	lsls	r3, r0, #2
 8010bce:	1818      	adds	r0, r3, r0
 8010bd0:	0040      	lsls	r0, r0, #1
 8010bd2:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d035      	beq.n	8010c46 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010bda:	9b01      	ldr	r3, [sp, #4]
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010be0:	9b01      	ldr	r3, [sp, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1f9      	bne.n	8010bda <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010be6:	2000      	movs	r0, #0
 8010be8:	e028      	b.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010bea:	2380      	movs	r3, #128	; 0x80
 8010bec:	041b      	lsls	r3, r3, #16
 8010bee:	e7e1      	b.n	8010bb4 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010bf2:	2001      	movs	r0, #1
 8010bf4:	680d      	ldr	r5, [r1, #0]
 8010bf6:	40a8      	lsls	r0, r5
 8010bf8:	4382      	bics	r2, r0
 8010bfa:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010bfc:	680b      	ldr	r3, [r1, #0]
 8010bfe:	001a      	movs	r2, r3
 8010c00:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010c02:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010c04:	2a02      	cmp	r2, #2
 8010c06:	d819      	bhi.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010c08:	4a12      	ldr	r2, [pc, #72]	; (8010c54 <HAL_ADC_ConfigChannel+0x130>)
 8010c0a:	6811      	ldr	r1, [r2, #0]
 8010c0c:	2b10      	cmp	r3, #16
 8010c0e:	d00e      	beq.n	8010c2e <HAL_ADC_ConfigChannel+0x10a>
 8010c10:	3b11      	subs	r3, #17
 8010c12:	425a      	negs	r2, r3
 8010c14:	415a      	adcs	r2, r3
 8010c16:	4252      	negs	r2, r2
 8010c18:	23c0      	movs	r3, #192	; 0xc0
 8010c1a:	041b      	lsls	r3, r3, #16
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	4a11      	ldr	r2, [pc, #68]	; (8010c64 <HAL_ADC_ConfigChannel+0x140>)
 8010c20:	4694      	mov	ip, r2
 8010c22:	4463      	add	r3, ip
 8010c24:	400b      	ands	r3, r1
 8010c26:	4a0b      	ldr	r2, [pc, #44]	; (8010c54 <HAL_ADC_ConfigChannel+0x130>)
 8010c28:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e006      	b.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010c2e:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <HAL_ADC_ConfigChannel+0x144>)
 8010c30:	e7f8      	b.n	8010c24 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010c32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010c34:	2220      	movs	r2, #32
 8010c36:	4313      	orrs	r3, r2
 8010c38:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010c3a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010c3c:	2340      	movs	r3, #64	; 0x40
 8010c3e:	2200      	movs	r2, #0
 8010c40:	54e2      	strb	r2, [r4, r3]
}
 8010c42:	b003      	add	sp, #12
 8010c44:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010c46:	2000      	movs	r0, #0
 8010c48:	e7f8      	b.n	8010c3c <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010c4a:	2002      	movs	r0, #2
 8010c4c:	e7f9      	b.n	8010c42 <HAL_ADC_ConfigChannel+0x11e>
 8010c4e:	46c0      	nop			; (mov r8, r8)
 8010c50:	00001001 	.word	0x00001001
 8010c54:	40012708 	.word	0x40012708
 8010c58:	ff400000 	.word	0xff400000
 8010c5c:	200000ac 	.word	0x200000ac
 8010c60:	000f4240 	.word	0x000f4240
 8010c64:	feffffff 	.word	0xfeffffff
 8010c68:	ff7fffff 	.word	0xff7fffff

08010c6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010c70:	2340      	movs	r3, #64	; 0x40
 8010c72:	5cc3      	ldrb	r3, [r0, r3]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d042      	beq.n	8010cfe <HAL_ADCEx_Calibration_Start+0x92>
 8010c78:	2340      	movs	r3, #64	; 0x40
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010c7e:	6802      	ldr	r2, [r0, #0]
 8010c80:	6891      	ldr	r1, [r2, #8]
 8010c82:	3b3d      	subs	r3, #61	; 0x3d
 8010c84:	400b      	ands	r3, r1
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d105      	bne.n	8010c96 <HAL_ADCEx_Calibration_Start+0x2a>
 8010c8a:	6813      	ldr	r3, [r2, #0]
 8010c8c:	07db      	lsls	r3, r3, #31
 8010c8e:	d42d      	bmi.n	8010cec <HAL_ADCEx_Calibration_Start+0x80>
 8010c90:	68d3      	ldr	r3, [r2, #12]
 8010c92:	041b      	lsls	r3, r3, #16
 8010c94:	d42a      	bmi.n	8010cec <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8010c96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c98:	491a      	ldr	r1, [pc, #104]	; (8010d04 <HAL_ADCEx_Calibration_Start+0x98>)
 8010c9a:	400b      	ands	r3, r1
 8010c9c:	3106      	adds	r1, #6
 8010c9e:	31ff      	adds	r1, #255	; 0xff
 8010ca0:	430b      	orrs	r3, r1
 8010ca2:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8010ca4:	6891      	ldr	r1, [r2, #8]
 8010ca6:	2380      	movs	r3, #128	; 0x80
 8010ca8:	061b      	lsls	r3, r3, #24
 8010caa:	430b      	orrs	r3, r1
 8010cac:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8010cae:	f7ff fcb5 	bl	801061c <HAL_GetTick>
 8010cb2:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	da0f      	bge.n	8010cdc <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8010cbc:	f7ff fcae 	bl	801061c <HAL_GetTick>
 8010cc0:	1b40      	subs	r0, r0, r5
 8010cc2:	2802      	cmp	r0, #2
 8010cc4:	d9f6      	bls.n	8010cb4 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8010cc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cc8:	2212      	movs	r2, #18
 8010cca:	4393      	bics	r3, r2
 8010ccc:	3a02      	subs	r2, #2
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010cd2:	2340      	movs	r3, #64	; 0x40
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8010cd8:	2001      	movs	r0, #1
 8010cda:	e00f      	b.n	8010cfc <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010cdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cde:	2203      	movs	r2, #3
 8010ce0:	4393      	bics	r3, r2
 8010ce2:	3a02      	subs	r2, #2
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010ce8:	2000      	movs	r0, #0
 8010cea:	e004      	b.n	8010cf6 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010cec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cee:	2220      	movs	r2, #32
 8010cf0:	4313      	orrs	r3, r2
 8010cf2:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8010cf4:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010cf6:	2340      	movs	r3, #64	; 0x40
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8010cfc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8010cfe:	2002      	movs	r0, #2
 8010d00:	e7fc      	b.n	8010cfc <HAL_ADCEx_Calibration_Start+0x90>
 8010d02:	46c0      	nop			; (mov r8, r8)
 8010d04:	fffffefd 	.word	0xfffffefd

08010d08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010d08:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	db14      	blt.n	8010d38 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010d0e:	0883      	lsrs	r3, r0, #2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	4a15      	ldr	r2, [pc, #84]	; (8010d68 <HAL_NVIC_SetPriority+0x60>)
 8010d14:	4694      	mov	ip, r2
 8010d16:	4463      	add	r3, ip
 8010d18:	26c0      	movs	r6, #192	; 0xc0
 8010d1a:	00b6      	lsls	r6, r6, #2
 8010d1c:	599d      	ldr	r5, [r3, r6]
 8010d1e:	2403      	movs	r4, #3
 8010d20:	4020      	ands	r0, r4
 8010d22:	00c0      	lsls	r0, r0, #3
 8010d24:	22ff      	movs	r2, #255	; 0xff
 8010d26:	0014      	movs	r4, r2
 8010d28:	4084      	lsls	r4, r0
 8010d2a:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010d2c:	0189      	lsls	r1, r1, #6
 8010d2e:	400a      	ands	r2, r1
 8010d30:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010d32:	432a      	orrs	r2, r5
 8010d34:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010d36:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010d38:	b2c0      	uxtb	r0, r0
 8010d3a:	230f      	movs	r3, #15
 8010d3c:	4003      	ands	r3, r0
 8010d3e:	3b08      	subs	r3, #8
 8010d40:	089b      	lsrs	r3, r3, #2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <HAL_NVIC_SetPriority+0x64>)
 8010d46:	4694      	mov	ip, r2
 8010d48:	4463      	add	r3, ip
 8010d4a:	69dd      	ldr	r5, [r3, #28]
 8010d4c:	2203      	movs	r2, #3
 8010d4e:	4010      	ands	r0, r2
 8010d50:	00c0      	lsls	r0, r0, #3
 8010d52:	24ff      	movs	r4, #255	; 0xff
 8010d54:	0022      	movs	r2, r4
 8010d56:	4082      	lsls	r2, r0
 8010d58:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010d5a:	0189      	lsls	r1, r1, #6
 8010d5c:	400c      	ands	r4, r1
 8010d5e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010d60:	432c      	orrs	r4, r5
 8010d62:	61dc      	str	r4, [r3, #28]
 8010d64:	e7e7      	b.n	8010d36 <HAL_NVIC_SetPriority+0x2e>
 8010d66:	46c0      	nop			; (mov r8, r8)
 8010d68:	e000e100 	.word	0xe000e100
 8010d6c:	e000ed00 	.word	0xe000ed00

08010d70 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010d70:	231f      	movs	r3, #31
 8010d72:	4018      	ands	r0, r3
 8010d74:	3b1e      	subs	r3, #30
 8010d76:	4083      	lsls	r3, r0
 8010d78:	4a01      	ldr	r2, [pc, #4]	; (8010d80 <HAL_NVIC_EnableIRQ+0x10>)
 8010d7a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010d7c:	4770      	bx	lr
 8010d7e:	46c0      	nop			; (mov r8, r8)
 8010d80:	e000e100 	.word	0xe000e100

08010d84 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010d84:	231f      	movs	r3, #31
 8010d86:	4018      	ands	r0, r3
 8010d88:	3b1e      	subs	r3, #30
 8010d8a:	4083      	lsls	r3, r0
 8010d8c:	4901      	ldr	r1, [pc, #4]	; (8010d94 <HAL_NVIC_DisableIRQ+0x10>)
 8010d8e:	2280      	movs	r2, #128	; 0x80
 8010d90:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010d92:	4770      	bx	lr
 8010d94:	e000e100 	.word	0xe000e100

08010d98 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010d98:	1e43      	subs	r3, r0, #1
 8010d9a:	4a0a      	ldr	r2, [pc, #40]	; (8010dc4 <HAL_SYSTICK_Config+0x2c>)
 8010d9c:	2001      	movs	r0, #1
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d80e      	bhi.n	8010dc0 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010da2:	4a09      	ldr	r2, [pc, #36]	; (8010dc8 <HAL_SYSTICK_Config+0x30>)
 8010da4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010da6:	4809      	ldr	r0, [pc, #36]	; (8010dcc <HAL_SYSTICK_Config+0x34>)
 8010da8:	6a03      	ldr	r3, [r0, #32]
 8010daa:	021b      	lsls	r3, r3, #8
 8010dac:	0a1b      	lsrs	r3, r3, #8
 8010dae:	21c0      	movs	r1, #192	; 0xc0
 8010db0:	0609      	lsls	r1, r1, #24
 8010db2:	430b      	orrs	r3, r1
 8010db4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010db6:	2300      	movs	r3, #0
 8010db8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010dba:	3307      	adds	r3, #7
 8010dbc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010dbe:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010dc0:	4770      	bx	lr
 8010dc2:	46c0      	nop			; (mov r8, r8)
 8010dc4:	00ffffff 	.word	0x00ffffff
 8010dc8:	e000e010 	.word	0xe000e010
 8010dcc:	e000ed00 	.word	0xe000ed00

08010dd0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010dd0:	2804      	cmp	r0, #4
 8010dd2:	d005      	beq.n	8010de0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010dd4:	4a05      	ldr	r2, [pc, #20]	; (8010dec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010dd6:	6813      	ldr	r3, [r2, #0]
 8010dd8:	2104      	movs	r1, #4
 8010dda:	438b      	bics	r3, r1
 8010ddc:	6013      	str	r3, [r2, #0]
  }
}
 8010dde:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010de0:	4a02      	ldr	r2, [pc, #8]	; (8010dec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	2104      	movs	r1, #4
 8010de6:	430b      	orrs	r3, r1
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	e7f8      	b.n	8010dde <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010dec:	e000e010 	.word	0xe000e010

08010df0 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df2:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010df4:	0891      	lsrs	r1, r2, #2
 8010df6:	d013      	beq.n	8010e20 <CRC_Handle_8+0x30>
 8010df8:	0034      	movs	r4, r6
 8010dfa:	2303      	movs	r3, #3
 8010dfc:	0017      	movs	r7, r2
 8010dfe:	439f      	bics	r7, r3
 8010e00:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010e02:	7823      	ldrb	r3, [r4, #0]
 8010e04:	061b      	lsls	r3, r3, #24
 8010e06:	7865      	ldrb	r5, [r4, #1]
 8010e08:	042d      	lsls	r5, r5, #16
 8010e0a:	432b      	orrs	r3, r5
 8010e0c:	78e5      	ldrb	r5, [r4, #3]
 8010e0e:	432b      	orrs	r3, r5
 8010e10:	78a5      	ldrb	r5, [r4, #2]
 8010e12:	022d      	lsls	r5, r5, #8
 8010e14:	432b      	orrs	r3, r5
 8010e16:	6805      	ldr	r5, [r0, #0]
 8010e18:	602b      	str	r3, [r5, #0]
 8010e1a:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010e1c:	42bc      	cmp	r4, r7
 8010e1e:	d1f0      	bne.n	8010e02 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010e20:	2303      	movs	r3, #3
 8010e22:	401a      	ands	r2, r3
 8010e24:	d01e      	beq.n	8010e64 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010e26:	2a01      	cmp	r2, #1
 8010e28:	d00a      	beq.n	8010e40 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010e2a:	2a02      	cmp	r2, #2
 8010e2c:	d10d      	bne.n	8010e4a <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010e2e:	0089      	lsls	r1, r1, #2
 8010e30:	5c72      	ldrb	r2, [r6, r1]
 8010e32:	0212      	lsls	r2, r2, #8
 8010e34:	1871      	adds	r1, r6, r1
 8010e36:	784b      	ldrb	r3, [r1, #1]
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	6802      	ldr	r2, [r0, #0]
 8010e3c:	8013      	strh	r3, [r2, #0]
 8010e3e:	e011      	b.n	8010e64 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010e40:	0089      	lsls	r1, r1, #2
 8010e42:	5d8b      	ldrb	r3, [r1, r6]
 8010e44:	6802      	ldr	r2, [r0, #0]
 8010e46:	7013      	strb	r3, [r2, #0]
 8010e48:	e00c      	b.n	8010e64 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010e4a:	2a03      	cmp	r2, #3
 8010e4c:	d10a      	bne.n	8010e64 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010e4e:	0089      	lsls	r1, r1, #2
 8010e50:	5c72      	ldrb	r2, [r6, r1]
 8010e52:	0212      	lsls	r2, r2, #8
 8010e54:	1871      	adds	r1, r6, r1
 8010e56:	784b      	ldrb	r3, [r1, #1]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	6802      	ldr	r2, [r0, #0]
 8010e5c:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010e5e:	788b      	ldrb	r3, [r1, #2]
 8010e60:	6802      	ldr	r2, [r0, #0]
 8010e62:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010e64:	6803      	ldr	r3, [r0, #0]
 8010e66:	6818      	ldr	r0, [r3, #0]
}
 8010e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e6a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e6c:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010e6e:	0852      	lsrs	r2, r2, #1
 8010e70:	d00b      	beq.n	8010e8a <CRC_Handle_16+0x20>
 8010e72:	000c      	movs	r4, r1
 8010e74:	0097      	lsls	r7, r2, #2
 8010e76:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010e78:	8823      	ldrh	r3, [r4, #0]
 8010e7a:	041b      	lsls	r3, r3, #16
 8010e7c:	8866      	ldrh	r6, [r4, #2]
 8010e7e:	4333      	orrs	r3, r6
 8010e80:	6806      	ldr	r6, [r0, #0]
 8010e82:	6033      	str	r3, [r6, #0]
 8010e84:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010e86:	42bc      	cmp	r4, r7
 8010e88:	d1f6      	bne.n	8010e78 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010e8a:	07eb      	lsls	r3, r5, #31
 8010e8c:	d503      	bpl.n	8010e96 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010e8e:	0092      	lsls	r2, r2, #2
 8010e90:	5a53      	ldrh	r3, [r2, r1]
 8010e92:	6802      	ldr	r2, [r0, #0]
 8010e94:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010e96:	6803      	ldr	r3, [r0, #0]
 8010e98:	6818      	ldr	r0, [r3, #0]
}
 8010e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e9c <HAL_CRC_Init>:
{
 8010e9c:	b510      	push	{r4, lr}
 8010e9e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010ea0:	d029      	beq.n	8010ef6 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010ea2:	7f43      	ldrb	r3, [r0, #29]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d01e      	beq.n	8010ee6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010eac:	0020      	movs	r0, r4
 8010eae:	f000 f8b1 	bl	8011014 <HAL_CRCEx_Init>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d121      	bne.n	8010efa <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010eb6:	7963      	ldrb	r3, [r4, #5]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d118      	bne.n	8010eee <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	4252      	negs	r2, r2
 8010ec2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	6893      	ldr	r3, [r2, #8]
 8010ec8:	2160      	movs	r1, #96	; 0x60
 8010eca:	438b      	bics	r3, r1
 8010ecc:	6961      	ldr	r1, [r4, #20]
 8010ece:	430b      	orrs	r3, r1
 8010ed0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010ed2:	6822      	ldr	r2, [r4, #0]
 8010ed4:	6893      	ldr	r3, [r2, #8]
 8010ed6:	2180      	movs	r1, #128	; 0x80
 8010ed8:	438b      	bics	r3, r1
 8010eda:	69a1      	ldr	r1, [r4, #24]
 8010edc:	430b      	orrs	r3, r1
 8010ede:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	7763      	strb	r3, [r4, #29]
}
 8010ee4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010ee6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010ee8:	f7fc fd20 	bl	800d92c <HAL_CRC_MspInit>
 8010eec:	e7dc      	b.n	8010ea8 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	6922      	ldr	r2, [r4, #16]
 8010ef2:	611a      	str	r2, [r3, #16]
 8010ef4:	e7e6      	b.n	8010ec4 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	e7f4      	b.n	8010ee4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010efa:	2001      	movs	r0, #1
 8010efc:	e7f2      	b.n	8010ee4 <HAL_CRC_Init+0x48>

08010efe <HAL_CRC_Accumulate>:
{
 8010efe:	b510      	push	{r4, lr}
 8010f00:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010f02:	7f03      	ldrb	r3, [r0, #28]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d024      	beq.n	8010f52 <HAL_CRC_Accumulate+0x54>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010f10:	6a03      	ldr	r3, [r0, #32]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d01a      	beq.n	8010f4c <HAL_CRC_Accumulate+0x4e>
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	d007      	beq.n	8010f2a <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010f1a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d011      	beq.n	8010f44 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010f20:	2301      	movs	r3, #1
 8010f22:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010f24:	2300      	movs	r3, #0
 8010f26:	7723      	strb	r3, [r4, #28]
}
 8010f28:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010f2a:	2a00      	cmp	r2, #0
 8010f2c:	d007      	beq.n	8010f3e <HAL_CRC_Accumulate+0x40>
 8010f2e:	000b      	movs	r3, r1
 8010f30:	0092      	lsls	r2, r2, #2
 8010f32:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	cb01      	ldmia	r3!, {r0}
 8010f38:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010f3a:	428b      	cmp	r3, r1
 8010f3c:	d1fa      	bne.n	8010f34 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	6818      	ldr	r0, [r3, #0]
      break;
 8010f42:	e7ed      	b.n	8010f20 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010f44:	0020      	movs	r0, r4
 8010f46:	f7ff ff53 	bl	8010df0 <CRC_Handle_8>
      break;
 8010f4a:	e7e9      	b.n	8010f20 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010f4c:	f7ff ff8d 	bl	8010e6a <CRC_Handle_16>
      break;
 8010f50:	e7e6      	b.n	8010f20 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010f52:	2002      	movs	r0, #2
 8010f54:	e7e8      	b.n	8010f28 <HAL_CRC_Accumulate+0x2a>

08010f56 <HAL_CRC_Calculate>:
{
 8010f56:	b570      	push	{r4, r5, r6, lr}
 8010f58:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010f5a:	7f03      	ldrb	r3, [r0, #28]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d029      	beq.n	8010fb4 <HAL_CRC_Calculate+0x5e>
 8010f60:	2501      	movs	r5, #1
 8010f62:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010f64:	2302      	movs	r3, #2
 8010f66:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010f68:	6800      	ldr	r0, [r0, #0]
 8010f6a:	6883      	ldr	r3, [r0, #8]
 8010f6c:	432b      	orrs	r3, r5
 8010f6e:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010f70:	6a23      	ldr	r3, [r4, #32]
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d01a      	beq.n	8010fac <HAL_CRC_Calculate+0x56>
 8010f76:	2b03      	cmp	r3, #3
 8010f78:	d007      	beq.n	8010f8a <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010f7a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d011      	beq.n	8010fa4 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010f80:	2301      	movs	r3, #1
 8010f82:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010f84:	2300      	movs	r3, #0
 8010f86:	7723      	strb	r3, [r4, #28]
}
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	d007      	beq.n	8010f9e <HAL_CRC_Calculate+0x48>
 8010f8e:	000b      	movs	r3, r1
 8010f90:	0092      	lsls	r2, r2, #2
 8010f92:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010f94:	6820      	ldr	r0, [r4, #0]
 8010f96:	cb20      	ldmia	r3!, {r5}
 8010f98:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010f9a:	428b      	cmp	r3, r1
 8010f9c:	d1fa      	bne.n	8010f94 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	6818      	ldr	r0, [r3, #0]
      break;
 8010fa2:	e7ed      	b.n	8010f80 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010fa4:	0020      	movs	r0, r4
 8010fa6:	f7ff ff23 	bl	8010df0 <CRC_Handle_8>
      break;
 8010faa:	e7e9      	b.n	8010f80 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010fac:	0020      	movs	r0, r4
 8010fae:	f7ff ff5c 	bl	8010e6a <CRC_Handle_16>
      break;
 8010fb2:	e7e5      	b.n	8010f80 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010fb4:	2002      	movs	r0, #2
 8010fb6:	e7e7      	b.n	8010f88 <HAL_CRC_Calculate+0x32>

08010fb8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010fb8:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010fba:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010fbc:	2501      	movs	r5, #1
 8010fbe:	002c      	movs	r4, r5
 8010fc0:	409c      	lsls	r4, r3
 8010fc2:	4221      	tst	r1, r4
 8010fc4:	d10b      	bne.n	8010fde <HAL_CRCEx_Polynomial_Set+0x26>
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	d2f9      	bcs.n	8010fbe <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010fca:	2a10      	cmp	r2, #16
 8010fcc:	d01c      	beq.n	8011008 <HAL_CRCEx_Polynomial_Set+0x50>
 8010fce:	2a18      	cmp	r2, #24
 8010fd0:	d01e      	beq.n	8011010 <HAL_CRCEx_Polynomial_Set+0x58>
 8010fd2:	2a08      	cmp	r2, #8
 8010fd4:	d109      	bne.n	8010fea <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010fd6:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010fd8:	2b0f      	cmp	r3, #15
 8010fda:	d906      	bls.n	8010fea <HAL_CRCEx_Polynomial_Set+0x32>
 8010fdc:	e00e      	b.n	8010ffc <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010fde:	2a10      	cmp	r2, #16
 8010fe0:	d012      	beq.n	8011008 <HAL_CRCEx_Polynomial_Set+0x50>
 8010fe2:	2a18      	cmp	r2, #24
 8010fe4:	d00c      	beq.n	8011000 <HAL_CRCEx_Polynomial_Set+0x48>
 8010fe6:	2a08      	cmp	r2, #8
 8010fe8:	d0f5      	beq.n	8010fd6 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010fea:	6803      	ldr	r3, [r0, #0]
 8010fec:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010fee:	6801      	ldr	r1, [r0, #0]
 8010ff0:	688b      	ldr	r3, [r1, #8]
 8010ff2:	2018      	movs	r0, #24
 8010ff4:	4383      	bics	r3, r0
 8010ff6:	431a      	orrs	r2, r3
 8010ff8:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010ffa:	2400      	movs	r4, #0
}
 8010ffc:	0020      	movs	r0, r4
 8010ffe:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011000:	2b06      	cmp	r3, #6
 8011002:	d9f2      	bls.n	8010fea <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8011004:	2401      	movs	r4, #1
 8011006:	e7f9      	b.n	8010ffc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011008:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 801100a:	2b07      	cmp	r3, #7
 801100c:	d9ed      	bls.n	8010fea <HAL_CRCEx_Polynomial_Set+0x32>
 801100e:	e7f5      	b.n	8010ffc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011010:	2401      	movs	r4, #1
 8011012:	e7f3      	b.n	8010ffc <HAL_CRCEx_Polynomial_Set+0x44>

08011014 <HAL_CRCEx_Init>:
{
 8011014:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8011016:	7903      	ldrb	r3, [r0, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d109      	bne.n	8011030 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 801101c:	6803      	ldr	r3, [r0, #0]
 801101e:	4a08      	ldr	r2, [pc, #32]	; (8011040 <HAL_CRCEx_Init+0x2c>)
 8011020:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8011022:	6802      	ldr	r2, [r0, #0]
 8011024:	6893      	ldr	r3, [r2, #8]
 8011026:	2118      	movs	r1, #24
 8011028:	438b      	bics	r3, r1
 801102a:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 801102c:	2000      	movs	r0, #0
}
 801102e:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8011030:	68c2      	ldr	r2, [r0, #12]
 8011032:	6881      	ldr	r1, [r0, #8]
 8011034:	f7ff ffc0 	bl	8010fb8 <HAL_CRCEx_Polynomial_Set>
 8011038:	1e43      	subs	r3, r0, #1
 801103a:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 801103c:	b2c0      	uxtb	r0, r0
 801103e:	e7f6      	b.n	801102e <HAL_CRCEx_Init+0x1a>
 8011040:	04c11db7 	.word	0x04c11db7

08011044 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8011044:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011046:	2800      	cmp	r0, #0
 8011048:	d022      	beq.n	8011090 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801104a:	2321      	movs	r3, #33	; 0x21
 801104c:	5cc3      	ldrb	r3, [r0, r3]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d102      	bne.n	8011058 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8011052:	3320      	adds	r3, #32
 8011054:	2200      	movs	r2, #0
 8011056:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011058:	2121      	movs	r1, #33	; 0x21
 801105a:	2302      	movs	r3, #2
 801105c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801105e:	6804      	ldr	r4, [r0, #0]
 8011060:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8011062:	4a0c      	ldr	r2, [pc, #48]	; (8011094 <HAL_DMA_Init+0x50>)
 8011064:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011066:	6843      	ldr	r3, [r0, #4]
 8011068:	6885      	ldr	r5, [r0, #8]
 801106a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801106c:	68c5      	ldr	r5, [r0, #12]
 801106e:	432b      	orrs	r3, r5
 8011070:	6905      	ldr	r5, [r0, #16]
 8011072:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011074:	6945      	ldr	r5, [r0, #20]
 8011076:	432b      	orrs	r3, r5
 8011078:	6985      	ldr	r5, [r0, #24]
 801107a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801107c:	69c5      	ldr	r5, [r0, #28]
 801107e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011080:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8011082:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011084:	2300      	movs	r3, #0
 8011086:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011088:	3301      	adds	r3, #1
 801108a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 801108c:	2000      	movs	r0, #0
}  
 801108e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011090:	2001      	movs	r0, #1
 8011092:	e7fc      	b.n	801108e <HAL_DMA_Init+0x4a>
 8011094:	ffffc00f 	.word	0xffffc00f

08011098 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011098:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801109a:	2420      	movs	r4, #32
 801109c:	5d04      	ldrb	r4, [r0, r4]
 801109e:	2c01      	cmp	r4, #1
 80110a0:	d02d      	beq.n	80110fe <HAL_DMA_Start_IT+0x66>
 80110a2:	2601      	movs	r6, #1
 80110a4:	2420      	movs	r4, #32
 80110a6:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80110a8:	3401      	adds	r4, #1
 80110aa:	2502      	movs	r5, #2
 80110ac:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80110ae:	6805      	ldr	r5, [r0, #0]
 80110b0:	682c      	ldr	r4, [r5, #0]
 80110b2:	43b4      	bics	r4, r6
 80110b4:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80110b6:	6804      	ldr	r4, [r0, #0]
 80110b8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80110ba:	6843      	ldr	r3, [r0, #4]
 80110bc:	2b10      	cmp	r3, #16
 80110be:	d019      	beq.n	80110f4 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80110c0:	6803      	ldr	r3, [r0, #0]
 80110c2:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80110c4:	6803      	ldr	r3, [r0, #0]
 80110c6:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80110c8:	6802      	ldr	r2, [r0, #0]
 80110ca:	6813      	ldr	r3, [r2, #0]
 80110cc:	2102      	movs	r1, #2
 80110ce:	430b      	orrs	r3, r1
 80110d0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80110d2:	6802      	ldr	r2, [r0, #0]
 80110d4:	6813      	ldr	r3, [r2, #0]
 80110d6:	3102      	adds	r1, #2
 80110d8:	430b      	orrs	r3, r1
 80110da:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80110dc:	6802      	ldr	r2, [r0, #0]
 80110de:	6813      	ldr	r3, [r2, #0]
 80110e0:	3104      	adds	r1, #4
 80110e2:	430b      	orrs	r3, r1
 80110e4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80110e6:	6802      	ldr	r2, [r0, #0]
 80110e8:	6813      	ldr	r3, [r2, #0]
 80110ea:	3907      	subs	r1, #7
 80110ec:	430b      	orrs	r3, r1
 80110ee:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80110f0:	2000      	movs	r0, #0
} 
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80110f4:	6803      	ldr	r3, [r0, #0]
 80110f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80110f8:	6803      	ldr	r3, [r0, #0]
 80110fa:	60d9      	str	r1, [r3, #12]
 80110fc:	e7e4      	b.n	80110c8 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 80110fe:	2002      	movs	r0, #2
 8011100:	e7f7      	b.n	80110f2 <HAL_DMA_Start_IT+0x5a>

08011102 <HAL_DMA_Abort>:
{
 8011102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011104:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8011106:	6802      	ldr	r2, [r0, #0]
 8011108:	6813      	ldr	r3, [r2, #0]
 801110a:	2101      	movs	r1, #1
 801110c:	438b      	bics	r3, r1
 801110e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011110:	f7ff fa84 	bl	801061c <HAL_GetTick>
 8011114:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011116:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011118:	26fa      	movs	r6, #250	; 0xfa
 801111a:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801111c:	6823      	ldr	r3, [r4, #0]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	421d      	tst	r5, r3
 8011122:	d00f      	beq.n	8011144 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011124:	f7ff fa7a 	bl	801061c <HAL_GetTick>
 8011128:	1bc0      	subs	r0, r0, r7
 801112a:	42b0      	cmp	r0, r6
 801112c:	d9f6      	bls.n	801111c <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801112e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011130:	2220      	movs	r2, #32
 8011132:	4313      	orrs	r3, r2
 8011134:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011136:	2321      	movs	r3, #33	; 0x21
 8011138:	2103      	movs	r1, #3
 801113a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801113c:	2300      	movs	r3, #0
 801113e:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8011140:	2003      	movs	r0, #3
 8011142:	e006      	b.n	8011152 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8011144:	2321      	movs	r3, #33	; 0x21
 8011146:	2201      	movs	r2, #1
 8011148:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801114a:	3b01      	subs	r3, #1
 801114c:	2200      	movs	r2, #0
 801114e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8011150:	2000      	movs	r0, #0
}
 8011152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011154 <HAL_DMA_IRQHandler>:
{        
 8011154:	b510      	push	{r4, lr}
 8011156:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011158:	6803      	ldr	r3, [r0, #0]
 801115a:	4ab4      	ldr	r2, [pc, #720]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d94d      	bls.n	80111fc <HAL_DMA_IRQHandler+0xa8>
 8011160:	4ab3      	ldr	r2, [pc, #716]	; (8011430 <HAL_DMA_IRQHandler+0x2dc>)
 8011162:	6811      	ldr	r1, [r2, #0]
 8011164:	4ab3      	ldr	r2, [pc, #716]	; (8011434 <HAL_DMA_IRQHandler+0x2e0>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d026      	beq.n	80111b8 <HAL_DMA_IRQHandler+0x64>
 801116a:	4ab3      	ldr	r2, [pc, #716]	; (8011438 <HAL_DMA_IRQHandler+0x2e4>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d02d      	beq.n	80111cc <HAL_DMA_IRQHandler+0x78>
 8011170:	4ab2      	ldr	r2, [pc, #712]	; (801143c <HAL_DMA_IRQHandler+0x2e8>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d02c      	beq.n	80111d0 <HAL_DMA_IRQHandler+0x7c>
 8011176:	4ab2      	ldr	r2, [pc, #712]	; (8011440 <HAL_DMA_IRQHandler+0x2ec>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d02c      	beq.n	80111d6 <HAL_DMA_IRQHandler+0x82>
 801117c:	4ab1      	ldr	r2, [pc, #708]	; (8011444 <HAL_DMA_IRQHandler+0x2f0>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d02c      	beq.n	80111dc <HAL_DMA_IRQHandler+0x88>
 8011182:	4ab1      	ldr	r2, [pc, #708]	; (8011448 <HAL_DMA_IRQHandler+0x2f4>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d02c      	beq.n	80111e2 <HAL_DMA_IRQHandler+0x8e>
 8011188:	4aa8      	ldr	r2, [pc, #672]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d02c      	beq.n	80111e8 <HAL_DMA_IRQHandler+0x94>
 801118e:	4aaf      	ldr	r2, [pc, #700]	; (801144c <HAL_DMA_IRQHandler+0x2f8>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d02c      	beq.n	80111ee <HAL_DMA_IRQHandler+0x9a>
 8011194:	4aae      	ldr	r2, [pc, #696]	; (8011450 <HAL_DMA_IRQHandler+0x2fc>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d02b      	beq.n	80111f2 <HAL_DMA_IRQHandler+0x9e>
 801119a:	4aae      	ldr	r2, [pc, #696]	; (8011454 <HAL_DMA_IRQHandler+0x300>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d02a      	beq.n	80111f6 <HAL_DMA_IRQHandler+0xa2>
 80111a0:	4aad      	ldr	r2, [pc, #692]	; (8011458 <HAL_DMA_IRQHandler+0x304>)
 80111a2:	189a      	adds	r2, r3, r2
 80111a4:	4250      	negs	r0, r2
 80111a6:	4142      	adcs	r2, r0
 80111a8:	4252      	negs	r2, r2
 80111aa:	48ac      	ldr	r0, [pc, #688]	; (801145c <HAL_DMA_IRQHandler+0x308>)
 80111ac:	4002      	ands	r2, r0
 80111ae:	2080      	movs	r0, #128	; 0x80
 80111b0:	0300      	lsls	r0, r0, #12
 80111b2:	4684      	mov	ip, r0
 80111b4:	4462      	add	r2, ip
 80111b6:	e000      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111b8:	2208      	movs	r2, #8
 80111ba:	420a      	tst	r2, r1
 80111bc:	d100      	bne.n	80111c0 <HAL_DMA_IRQHandler+0x6c>
 80111be:	e0e6      	b.n	801138e <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	0712      	lsls	r2, r2, #28
 80111c4:	d500      	bpl.n	80111c8 <HAL_DMA_IRQHandler+0x74>
 80111c6:	e097      	b.n	80112f8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	e0e0      	b.n	801138e <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80111cc:	2280      	movs	r2, #128	; 0x80
 80111ce:	e7f4      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111d0:	2280      	movs	r2, #128	; 0x80
 80111d2:	0112      	lsls	r2, r2, #4
 80111d4:	e7f1      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111d6:	2280      	movs	r2, #128	; 0x80
 80111d8:	0212      	lsls	r2, r2, #8
 80111da:	e7ee      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111dc:	2280      	movs	r2, #128	; 0x80
 80111de:	0312      	lsls	r2, r2, #12
 80111e0:	e7eb      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111e2:	2280      	movs	r2, #128	; 0x80
 80111e4:	0412      	lsls	r2, r2, #16
 80111e6:	e7e8      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111e8:	2280      	movs	r2, #128	; 0x80
 80111ea:	0512      	lsls	r2, r2, #20
 80111ec:	e7e5      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111ee:	2208      	movs	r2, #8
 80111f0:	e7e3      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111f2:	2280      	movs	r2, #128	; 0x80
 80111f4:	e7e1      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111f6:	2280      	movs	r2, #128	; 0x80
 80111f8:	0112      	lsls	r2, r2, #4
 80111fa:	e7de      	b.n	80111ba <HAL_DMA_IRQHandler+0x66>
 80111fc:	4a98      	ldr	r2, [pc, #608]	; (8011460 <HAL_DMA_IRQHandler+0x30c>)
 80111fe:	6811      	ldr	r1, [r2, #0]
 8011200:	4a8c      	ldr	r2, [pc, #560]	; (8011434 <HAL_DMA_IRQHandler+0x2e0>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d026      	beq.n	8011254 <HAL_DMA_IRQHandler+0x100>
 8011206:	4a8c      	ldr	r2, [pc, #560]	; (8011438 <HAL_DMA_IRQHandler+0x2e4>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d05d      	beq.n	80112c8 <HAL_DMA_IRQHandler+0x174>
 801120c:	4a8b      	ldr	r2, [pc, #556]	; (801143c <HAL_DMA_IRQHandler+0x2e8>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d05c      	beq.n	80112cc <HAL_DMA_IRQHandler+0x178>
 8011212:	4a8b      	ldr	r2, [pc, #556]	; (8011440 <HAL_DMA_IRQHandler+0x2ec>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d05c      	beq.n	80112d2 <HAL_DMA_IRQHandler+0x17e>
 8011218:	4a8a      	ldr	r2, [pc, #552]	; (8011444 <HAL_DMA_IRQHandler+0x2f0>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d05c      	beq.n	80112d8 <HAL_DMA_IRQHandler+0x184>
 801121e:	4a8a      	ldr	r2, [pc, #552]	; (8011448 <HAL_DMA_IRQHandler+0x2f4>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d05c      	beq.n	80112de <HAL_DMA_IRQHandler+0x18a>
 8011224:	4a81      	ldr	r2, [pc, #516]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d05c      	beq.n	80112e4 <HAL_DMA_IRQHandler+0x190>
 801122a:	4a88      	ldr	r2, [pc, #544]	; (801144c <HAL_DMA_IRQHandler+0x2f8>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d05c      	beq.n	80112ea <HAL_DMA_IRQHandler+0x196>
 8011230:	4a87      	ldr	r2, [pc, #540]	; (8011450 <HAL_DMA_IRQHandler+0x2fc>)
 8011232:	4293      	cmp	r3, r2
 8011234:	d05b      	beq.n	80112ee <HAL_DMA_IRQHandler+0x19a>
 8011236:	4a87      	ldr	r2, [pc, #540]	; (8011454 <HAL_DMA_IRQHandler+0x300>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d05a      	beq.n	80112f2 <HAL_DMA_IRQHandler+0x19e>
 801123c:	4a86      	ldr	r2, [pc, #536]	; (8011458 <HAL_DMA_IRQHandler+0x304>)
 801123e:	189a      	adds	r2, r3, r2
 8011240:	4250      	negs	r0, r2
 8011242:	4142      	adcs	r2, r0
 8011244:	4252      	negs	r2, r2
 8011246:	4885      	ldr	r0, [pc, #532]	; (801145c <HAL_DMA_IRQHandler+0x308>)
 8011248:	4002      	ands	r2, r0
 801124a:	2080      	movs	r0, #128	; 0x80
 801124c:	0300      	lsls	r0, r0, #12
 801124e:	4684      	mov	ip, r0
 8011250:	4462      	add	r2, ip
 8011252:	e000      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 8011254:	2208      	movs	r2, #8
 8011256:	420a      	tst	r2, r1
 8011258:	d000      	beq.n	801125c <HAL_DMA_IRQHandler+0x108>
 801125a:	e3ad      	b.n	80119b8 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801125c:	4a80      	ldr	r2, [pc, #512]	; (8011460 <HAL_DMA_IRQHandler+0x30c>)
 801125e:	6811      	ldr	r1, [r2, #0]
 8011260:	4a74      	ldr	r2, [pc, #464]	; (8011434 <HAL_DMA_IRQHandler+0x2e0>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d100      	bne.n	8011268 <HAL_DMA_IRQHandler+0x114>
 8011266:	e198      	b.n	801159a <HAL_DMA_IRQHandler+0x446>
 8011268:	4a73      	ldr	r2, [pc, #460]	; (8011438 <HAL_DMA_IRQHandler+0x2e4>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d100      	bne.n	8011270 <HAL_DMA_IRQHandler+0x11c>
 801126e:	e1da      	b.n	8011626 <HAL_DMA_IRQHandler+0x4d2>
 8011270:	4a72      	ldr	r2, [pc, #456]	; (801143c <HAL_DMA_IRQHandler+0x2e8>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d100      	bne.n	8011278 <HAL_DMA_IRQHandler+0x124>
 8011276:	e1d8      	b.n	801162a <HAL_DMA_IRQHandler+0x4d6>
 8011278:	4a71      	ldr	r2, [pc, #452]	; (8011440 <HAL_DMA_IRQHandler+0x2ec>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d100      	bne.n	8011280 <HAL_DMA_IRQHandler+0x12c>
 801127e:	e1d7      	b.n	8011630 <HAL_DMA_IRQHandler+0x4dc>
 8011280:	4a70      	ldr	r2, [pc, #448]	; (8011444 <HAL_DMA_IRQHandler+0x2f0>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d100      	bne.n	8011288 <HAL_DMA_IRQHandler+0x134>
 8011286:	e1d6      	b.n	8011636 <HAL_DMA_IRQHandler+0x4e2>
 8011288:	4a6f      	ldr	r2, [pc, #444]	; (8011448 <HAL_DMA_IRQHandler+0x2f4>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d100      	bne.n	8011290 <HAL_DMA_IRQHandler+0x13c>
 801128e:	e1d5      	b.n	801163c <HAL_DMA_IRQHandler+0x4e8>
 8011290:	4a66      	ldr	r2, [pc, #408]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d100      	bne.n	8011298 <HAL_DMA_IRQHandler+0x144>
 8011296:	e1d4      	b.n	8011642 <HAL_DMA_IRQHandler+0x4ee>
 8011298:	4a6c      	ldr	r2, [pc, #432]	; (801144c <HAL_DMA_IRQHandler+0x2f8>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d100      	bne.n	80112a0 <HAL_DMA_IRQHandler+0x14c>
 801129e:	e1d3      	b.n	8011648 <HAL_DMA_IRQHandler+0x4f4>
 80112a0:	4a6b      	ldr	r2, [pc, #428]	; (8011450 <HAL_DMA_IRQHandler+0x2fc>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d100      	bne.n	80112a8 <HAL_DMA_IRQHandler+0x154>
 80112a6:	e1d1      	b.n	801164c <HAL_DMA_IRQHandler+0x4f8>
 80112a8:	4a6a      	ldr	r2, [pc, #424]	; (8011454 <HAL_DMA_IRQHandler+0x300>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d100      	bne.n	80112b0 <HAL_DMA_IRQHandler+0x15c>
 80112ae:	e1cf      	b.n	8011650 <HAL_DMA_IRQHandler+0x4fc>
 80112b0:	4a69      	ldr	r2, [pc, #420]	; (8011458 <HAL_DMA_IRQHandler+0x304>)
 80112b2:	189a      	adds	r2, r3, r2
 80112b4:	4250      	negs	r0, r2
 80112b6:	4142      	adcs	r2, r0
 80112b8:	4252      	negs	r2, r2
 80112ba:	486a      	ldr	r0, [pc, #424]	; (8011464 <HAL_DMA_IRQHandler+0x310>)
 80112bc:	4002      	ands	r2, r0
 80112be:	2080      	movs	r0, #128	; 0x80
 80112c0:	02c0      	lsls	r0, r0, #11
 80112c2:	4684      	mov	ip, r0
 80112c4:	4462      	add	r2, ip
 80112c6:	e169      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80112c8:	2280      	movs	r2, #128	; 0x80
 80112ca:	e7c4      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112cc:	2280      	movs	r2, #128	; 0x80
 80112ce:	0112      	lsls	r2, r2, #4
 80112d0:	e7c1      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112d2:	2280      	movs	r2, #128	; 0x80
 80112d4:	0212      	lsls	r2, r2, #8
 80112d6:	e7be      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112d8:	2280      	movs	r2, #128	; 0x80
 80112da:	0312      	lsls	r2, r2, #12
 80112dc:	e7bb      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112de:	2280      	movs	r2, #128	; 0x80
 80112e0:	0412      	lsls	r2, r2, #16
 80112e2:	e7b8      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112e4:	2280      	movs	r2, #128	; 0x80
 80112e6:	0512      	lsls	r2, r2, #20
 80112e8:	e7b5      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112ea:	2208      	movs	r2, #8
 80112ec:	e7b3      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112ee:	2280      	movs	r2, #128	; 0x80
 80112f0:	e7b1      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
 80112f2:	2280      	movs	r2, #128	; 0x80
 80112f4:	0112      	lsls	r2, r2, #4
 80112f6:	e7ae      	b.n	8011256 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	2108      	movs	r1, #8
 80112fc:	438a      	bics	r2, r1
 80112fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	4a4a      	ldr	r2, [pc, #296]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 8011304:	4293      	cmp	r3, r2
 8011306:	d800      	bhi.n	801130a <HAL_DMA_IRQHandler+0x1b6>
 8011308:	e0ae      	b.n	8011468 <HAL_DMA_IRQHandler+0x314>
 801130a:	4a4a      	ldr	r2, [pc, #296]	; (8011434 <HAL_DMA_IRQHandler+0x2e0>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d027      	beq.n	8011360 <HAL_DMA_IRQHandler+0x20c>
 8011310:	4a49      	ldr	r2, [pc, #292]	; (8011438 <HAL_DMA_IRQHandler+0x2e4>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d071      	beq.n	80113fa <HAL_DMA_IRQHandler+0x2a6>
 8011316:	4a49      	ldr	r2, [pc, #292]	; (801143c <HAL_DMA_IRQHandler+0x2e8>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d070      	beq.n	80113fe <HAL_DMA_IRQHandler+0x2aa>
 801131c:	4a48      	ldr	r2, [pc, #288]	; (8011440 <HAL_DMA_IRQHandler+0x2ec>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d070      	beq.n	8011404 <HAL_DMA_IRQHandler+0x2b0>
 8011322:	4a48      	ldr	r2, [pc, #288]	; (8011444 <HAL_DMA_IRQHandler+0x2f0>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d070      	beq.n	801140a <HAL_DMA_IRQHandler+0x2b6>
 8011328:	4a47      	ldr	r2, [pc, #284]	; (8011448 <HAL_DMA_IRQHandler+0x2f4>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d070      	beq.n	8011410 <HAL_DMA_IRQHandler+0x2bc>
 801132e:	4a3f      	ldr	r2, [pc, #252]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d070      	beq.n	8011416 <HAL_DMA_IRQHandler+0x2c2>
 8011334:	4a45      	ldr	r2, [pc, #276]	; (801144c <HAL_DMA_IRQHandler+0x2f8>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d070      	beq.n	801141c <HAL_DMA_IRQHandler+0x2c8>
 801133a:	4a45      	ldr	r2, [pc, #276]	; (8011450 <HAL_DMA_IRQHandler+0x2fc>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d06f      	beq.n	8011420 <HAL_DMA_IRQHandler+0x2cc>
 8011340:	4a44      	ldr	r2, [pc, #272]	; (8011454 <HAL_DMA_IRQHandler+0x300>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d06e      	beq.n	8011424 <HAL_DMA_IRQHandler+0x2d0>
 8011346:	4a44      	ldr	r2, [pc, #272]	; (8011458 <HAL_DMA_IRQHandler+0x304>)
 8011348:	4694      	mov	ip, r2
 801134a:	4463      	add	r3, ip
 801134c:	425a      	negs	r2, r3
 801134e:	4153      	adcs	r3, r2
 8011350:	425b      	negs	r3, r3
 8011352:	4a42      	ldr	r2, [pc, #264]	; (801145c <HAL_DMA_IRQHandler+0x308>)
 8011354:	4013      	ands	r3, r2
 8011356:	2280      	movs	r2, #128	; 0x80
 8011358:	0312      	lsls	r2, r2, #12
 801135a:	4694      	mov	ip, r2
 801135c:	4463      	add	r3, ip
 801135e:	e000      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011360:	2308      	movs	r3, #8
 8011362:	4a33      	ldr	r2, [pc, #204]	; (8011430 <HAL_DMA_IRQHandler+0x2dc>)
 8011364:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011368:	2201      	movs	r2, #1
 801136a:	4313      	orrs	r3, r2
 801136c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801136e:	2321      	movs	r3, #33	; 0x21
 8011370:	3203      	adds	r2, #3
 8011372:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011374:	3b01      	subs	r3, #1
 8011376:	2200      	movs	r2, #0
 8011378:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801137a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801137c:	2b00      	cmp	r3, #0
 801137e:	d001      	beq.n	8011384 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8011380:	0020      	movs	r0, r4
 8011382:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	4a29      	ldr	r2, [pc, #164]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d800      	bhi.n	801138e <HAL_DMA_IRQHandler+0x23a>
 801138c:	e766      	b.n	801125c <HAL_DMA_IRQHandler+0x108>
 801138e:	4a28      	ldr	r2, [pc, #160]	; (8011430 <HAL_DMA_IRQHandler+0x2dc>)
 8011390:	6811      	ldr	r1, [r2, #0]
 8011392:	4a28      	ldr	r2, [pc, #160]	; (8011434 <HAL_DMA_IRQHandler+0x2e0>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d100      	bne.n	801139a <HAL_DMA_IRQHandler+0x246>
 8011398:	e0ad      	b.n	80114f6 <HAL_DMA_IRQHandler+0x3a2>
 801139a:	4a27      	ldr	r2, [pc, #156]	; (8011438 <HAL_DMA_IRQHandler+0x2e4>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d100      	bne.n	80113a2 <HAL_DMA_IRQHandler+0x24e>
 80113a0:	e0e3      	b.n	801156a <HAL_DMA_IRQHandler+0x416>
 80113a2:	4a26      	ldr	r2, [pc, #152]	; (801143c <HAL_DMA_IRQHandler+0x2e8>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d100      	bne.n	80113aa <HAL_DMA_IRQHandler+0x256>
 80113a8:	e0e1      	b.n	801156e <HAL_DMA_IRQHandler+0x41a>
 80113aa:	4a25      	ldr	r2, [pc, #148]	; (8011440 <HAL_DMA_IRQHandler+0x2ec>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d100      	bne.n	80113b2 <HAL_DMA_IRQHandler+0x25e>
 80113b0:	e0e0      	b.n	8011574 <HAL_DMA_IRQHandler+0x420>
 80113b2:	4a24      	ldr	r2, [pc, #144]	; (8011444 <HAL_DMA_IRQHandler+0x2f0>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d100      	bne.n	80113ba <HAL_DMA_IRQHandler+0x266>
 80113b8:	e0df      	b.n	801157a <HAL_DMA_IRQHandler+0x426>
 80113ba:	4a23      	ldr	r2, [pc, #140]	; (8011448 <HAL_DMA_IRQHandler+0x2f4>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d100      	bne.n	80113c2 <HAL_DMA_IRQHandler+0x26e>
 80113c0:	e0de      	b.n	8011580 <HAL_DMA_IRQHandler+0x42c>
 80113c2:	4a1a      	ldr	r2, [pc, #104]	; (801142c <HAL_DMA_IRQHandler+0x2d8>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d100      	bne.n	80113ca <HAL_DMA_IRQHandler+0x276>
 80113c8:	e0dd      	b.n	8011586 <HAL_DMA_IRQHandler+0x432>
 80113ca:	4a20      	ldr	r2, [pc, #128]	; (801144c <HAL_DMA_IRQHandler+0x2f8>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d100      	bne.n	80113d2 <HAL_DMA_IRQHandler+0x27e>
 80113d0:	e0dc      	b.n	801158c <HAL_DMA_IRQHandler+0x438>
 80113d2:	4a1f      	ldr	r2, [pc, #124]	; (8011450 <HAL_DMA_IRQHandler+0x2fc>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d100      	bne.n	80113da <HAL_DMA_IRQHandler+0x286>
 80113d8:	e0da      	b.n	8011590 <HAL_DMA_IRQHandler+0x43c>
 80113da:	4a1e      	ldr	r2, [pc, #120]	; (8011454 <HAL_DMA_IRQHandler+0x300>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d100      	bne.n	80113e2 <HAL_DMA_IRQHandler+0x28e>
 80113e0:	e0d8      	b.n	8011594 <HAL_DMA_IRQHandler+0x440>
 80113e2:	4a1d      	ldr	r2, [pc, #116]	; (8011458 <HAL_DMA_IRQHandler+0x304>)
 80113e4:	189a      	adds	r2, r3, r2
 80113e6:	4250      	negs	r0, r2
 80113e8:	4142      	adcs	r2, r0
 80113ea:	4252      	negs	r2, r2
 80113ec:	481d      	ldr	r0, [pc, #116]	; (8011464 <HAL_DMA_IRQHandler+0x310>)
 80113ee:	4002      	ands	r2, r0
 80113f0:	2080      	movs	r0, #128	; 0x80
 80113f2:	02c0      	lsls	r0, r0, #11
 80113f4:	4684      	mov	ip, r0
 80113f6:	4462      	add	r2, ip
 80113f8:	e07e      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80113fa:	2380      	movs	r3, #128	; 0x80
 80113fc:	e7b1      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 80113fe:	2380      	movs	r3, #128	; 0x80
 8011400:	011b      	lsls	r3, r3, #4
 8011402:	e7ae      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011404:	2380      	movs	r3, #128	; 0x80
 8011406:	021b      	lsls	r3, r3, #8
 8011408:	e7ab      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 801140a:	2380      	movs	r3, #128	; 0x80
 801140c:	031b      	lsls	r3, r3, #12
 801140e:	e7a8      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011410:	2380      	movs	r3, #128	; 0x80
 8011412:	041b      	lsls	r3, r3, #16
 8011414:	e7a5      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011416:	2380      	movs	r3, #128	; 0x80
 8011418:	051b      	lsls	r3, r3, #20
 801141a:	e7a2      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 801141c:	2308      	movs	r3, #8
 801141e:	e7a0      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011420:	2380      	movs	r3, #128	; 0x80
 8011422:	e79e      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 8011424:	2380      	movs	r3, #128	; 0x80
 8011426:	011b      	lsls	r3, r3, #4
 8011428:	e79b      	b.n	8011362 <HAL_DMA_IRQHandler+0x20e>
 801142a:	46c0      	nop			; (mov r8, r8)
 801142c:	40020080 	.word	0x40020080
 8011430:	40020400 	.word	0x40020400
 8011434:	40020008 	.word	0x40020008
 8011438:	4002001c 	.word	0x4002001c
 801143c:	40020030 	.word	0x40020030
 8011440:	40020044 	.word	0x40020044
 8011444:	40020058 	.word	0x40020058
 8011448:	4002006c 	.word	0x4002006c
 801144c:	40020408 	.word	0x40020408
 8011450:	4002041c 	.word	0x4002041c
 8011454:	40020430 	.word	0x40020430
 8011458:	bffdfbbc 	.word	0xbffdfbbc
 801145c:	fff88000 	.word	0xfff88000
 8011460:	40020000 	.word	0x40020000
 8011464:	fffc4000 	.word	0xfffc4000
 8011468:	4aaa      	ldr	r2, [pc, #680]	; (8011714 <HAL_DMA_IRQHandler+0x5c0>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d027      	beq.n	80114be <HAL_DMA_IRQHandler+0x36a>
 801146e:	4aaa      	ldr	r2, [pc, #680]	; (8011718 <HAL_DMA_IRQHandler+0x5c4>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d028      	beq.n	80114c6 <HAL_DMA_IRQHandler+0x372>
 8011474:	4aa9      	ldr	r2, [pc, #676]	; (801171c <HAL_DMA_IRQHandler+0x5c8>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d027      	beq.n	80114ca <HAL_DMA_IRQHandler+0x376>
 801147a:	4aa9      	ldr	r2, [pc, #676]	; (8011720 <HAL_DMA_IRQHandler+0x5cc>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d027      	beq.n	80114d0 <HAL_DMA_IRQHandler+0x37c>
 8011480:	4aa8      	ldr	r2, [pc, #672]	; (8011724 <HAL_DMA_IRQHandler+0x5d0>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d027      	beq.n	80114d6 <HAL_DMA_IRQHandler+0x382>
 8011486:	4aa8      	ldr	r2, [pc, #672]	; (8011728 <HAL_DMA_IRQHandler+0x5d4>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d027      	beq.n	80114dc <HAL_DMA_IRQHandler+0x388>
 801148c:	4aa7      	ldr	r2, [pc, #668]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d027      	beq.n	80114e2 <HAL_DMA_IRQHandler+0x38e>
 8011492:	4aa7      	ldr	r2, [pc, #668]	; (8011730 <HAL_DMA_IRQHandler+0x5dc>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d027      	beq.n	80114e8 <HAL_DMA_IRQHandler+0x394>
 8011498:	4aa6      	ldr	r2, [pc, #664]	; (8011734 <HAL_DMA_IRQHandler+0x5e0>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d026      	beq.n	80114ec <HAL_DMA_IRQHandler+0x398>
 801149e:	4aa6      	ldr	r2, [pc, #664]	; (8011738 <HAL_DMA_IRQHandler+0x5e4>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d025      	beq.n	80114f0 <HAL_DMA_IRQHandler+0x39c>
 80114a4:	4aa5      	ldr	r2, [pc, #660]	; (801173c <HAL_DMA_IRQHandler+0x5e8>)
 80114a6:	4694      	mov	ip, r2
 80114a8:	4463      	add	r3, ip
 80114aa:	425a      	negs	r2, r3
 80114ac:	4153      	adcs	r3, r2
 80114ae:	425b      	negs	r3, r3
 80114b0:	4aa3      	ldr	r2, [pc, #652]	; (8011740 <HAL_DMA_IRQHandler+0x5ec>)
 80114b2:	4013      	ands	r3, r2
 80114b4:	2280      	movs	r2, #128	; 0x80
 80114b6:	0312      	lsls	r2, r2, #12
 80114b8:	4694      	mov	ip, r2
 80114ba:	4463      	add	r3, ip
 80114bc:	e000      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114be:	2308      	movs	r3, #8
 80114c0:	4aa0      	ldr	r2, [pc, #640]	; (8011744 <HAL_DMA_IRQHandler+0x5f0>)
 80114c2:	6053      	str	r3, [r2, #4]
 80114c4:	e74f      	b.n	8011366 <HAL_DMA_IRQHandler+0x212>
 80114c6:	2380      	movs	r3, #128	; 0x80
 80114c8:	e7fa      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114ca:	2380      	movs	r3, #128	; 0x80
 80114cc:	011b      	lsls	r3, r3, #4
 80114ce:	e7f7      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114d0:	2380      	movs	r3, #128	; 0x80
 80114d2:	021b      	lsls	r3, r3, #8
 80114d4:	e7f4      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114d6:	2380      	movs	r3, #128	; 0x80
 80114d8:	031b      	lsls	r3, r3, #12
 80114da:	e7f1      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114dc:	2380      	movs	r3, #128	; 0x80
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	e7ee      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114e2:	2380      	movs	r3, #128	; 0x80
 80114e4:	051b      	lsls	r3, r3, #20
 80114e6:	e7eb      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114e8:	2308      	movs	r3, #8
 80114ea:	e7e9      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114ec:	2380      	movs	r3, #128	; 0x80
 80114ee:	e7e7      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
 80114f0:	2380      	movs	r3, #128	; 0x80
 80114f2:	011b      	lsls	r3, r3, #4
 80114f4:	e7e4      	b.n	80114c0 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114f6:	2204      	movs	r2, #4
 80114f8:	420a      	tst	r2, r1
 80114fa:	d152      	bne.n	80115a2 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114fc:	6821      	ldr	r1, [r4, #0]
 80114fe:	4b92      	ldr	r3, [pc, #584]	; (8011748 <HAL_DMA_IRQHandler+0x5f4>)
 8011500:	6818      	ldr	r0, [r3, #0]
 8011502:	4a84      	ldr	r2, [pc, #528]	; (8011714 <HAL_DMA_IRQHandler+0x5c0>)
 8011504:	4291      	cmp	r1, r2
 8011506:	d100      	bne.n	801150a <HAL_DMA_IRQHandler+0x3b6>
 8011508:	e16b      	b.n	80117e2 <HAL_DMA_IRQHandler+0x68e>
 801150a:	4a83      	ldr	r2, [pc, #524]	; (8011718 <HAL_DMA_IRQHandler+0x5c4>)
 801150c:	4291      	cmp	r1, r2
 801150e:	d100      	bne.n	8011512 <HAL_DMA_IRQHandler+0x3be>
 8011510:	e1aa      	b.n	8011868 <HAL_DMA_IRQHandler+0x714>
 8011512:	4a82      	ldr	r2, [pc, #520]	; (801171c <HAL_DMA_IRQHandler+0x5c8>)
 8011514:	4291      	cmp	r1, r2
 8011516:	d100      	bne.n	801151a <HAL_DMA_IRQHandler+0x3c6>
 8011518:	e1a8      	b.n	801186c <HAL_DMA_IRQHandler+0x718>
 801151a:	4a81      	ldr	r2, [pc, #516]	; (8011720 <HAL_DMA_IRQHandler+0x5cc>)
 801151c:	4291      	cmp	r1, r2
 801151e:	d100      	bne.n	8011522 <HAL_DMA_IRQHandler+0x3ce>
 8011520:	e1a7      	b.n	8011872 <HAL_DMA_IRQHandler+0x71e>
 8011522:	4b80      	ldr	r3, [pc, #512]	; (8011724 <HAL_DMA_IRQHandler+0x5d0>)
 8011524:	4299      	cmp	r1, r3
 8011526:	d100      	bne.n	801152a <HAL_DMA_IRQHandler+0x3d6>
 8011528:	e1a6      	b.n	8011878 <HAL_DMA_IRQHandler+0x724>
 801152a:	4b7f      	ldr	r3, [pc, #508]	; (8011728 <HAL_DMA_IRQHandler+0x5d4>)
 801152c:	4299      	cmp	r1, r3
 801152e:	d100      	bne.n	8011532 <HAL_DMA_IRQHandler+0x3de>
 8011530:	e1a5      	b.n	801187e <HAL_DMA_IRQHandler+0x72a>
 8011532:	4b7e      	ldr	r3, [pc, #504]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 8011534:	4299      	cmp	r1, r3
 8011536:	d100      	bne.n	801153a <HAL_DMA_IRQHandler+0x3e6>
 8011538:	e1a4      	b.n	8011884 <HAL_DMA_IRQHandler+0x730>
 801153a:	4b7d      	ldr	r3, [pc, #500]	; (8011730 <HAL_DMA_IRQHandler+0x5dc>)
 801153c:	4299      	cmp	r1, r3
 801153e:	d100      	bne.n	8011542 <HAL_DMA_IRQHandler+0x3ee>
 8011540:	e1a3      	b.n	801188a <HAL_DMA_IRQHandler+0x736>
 8011542:	4b7c      	ldr	r3, [pc, #496]	; (8011734 <HAL_DMA_IRQHandler+0x5e0>)
 8011544:	4299      	cmp	r1, r3
 8011546:	d100      	bne.n	801154a <HAL_DMA_IRQHandler+0x3f6>
 8011548:	e1a1      	b.n	801188e <HAL_DMA_IRQHandler+0x73a>
 801154a:	4b7b      	ldr	r3, [pc, #492]	; (8011738 <HAL_DMA_IRQHandler+0x5e4>)
 801154c:	4299      	cmp	r1, r3
 801154e:	d100      	bne.n	8011552 <HAL_DMA_IRQHandler+0x3fe>
 8011550:	e19f      	b.n	8011892 <HAL_DMA_IRQHandler+0x73e>
 8011552:	4b7a      	ldr	r3, [pc, #488]	; (801173c <HAL_DMA_IRQHandler+0x5e8>)
 8011554:	18ca      	adds	r2, r1, r3
 8011556:	4253      	negs	r3, r2
 8011558:	415a      	adcs	r2, r3
 801155a:	4252      	negs	r2, r2
 801155c:	4b7b      	ldr	r3, [pc, #492]	; (801174c <HAL_DMA_IRQHandler+0x5f8>)
 801155e:	4013      	ands	r3, r2
 8011560:	2280      	movs	r2, #128	; 0x80
 8011562:	0292      	lsls	r2, r2, #10
 8011564:	4694      	mov	ip, r2
 8011566:	4463      	add	r3, ip
 8011568:	e13c      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801156a:	2240      	movs	r2, #64	; 0x40
 801156c:	e7c4      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 801156e:	2280      	movs	r2, #128	; 0x80
 8011570:	00d2      	lsls	r2, r2, #3
 8011572:	e7c1      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 8011574:	2280      	movs	r2, #128	; 0x80
 8011576:	01d2      	lsls	r2, r2, #7
 8011578:	e7be      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 801157a:	2280      	movs	r2, #128	; 0x80
 801157c:	02d2      	lsls	r2, r2, #11
 801157e:	e7bb      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 8011580:	2280      	movs	r2, #128	; 0x80
 8011582:	03d2      	lsls	r2, r2, #15
 8011584:	e7b8      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 8011586:	2280      	movs	r2, #128	; 0x80
 8011588:	04d2      	lsls	r2, r2, #19
 801158a:	e7b5      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 801158c:	2204      	movs	r2, #4
 801158e:	e7b3      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 8011590:	2240      	movs	r2, #64	; 0x40
 8011592:	e7b1      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 8011594:	2280      	movs	r2, #128	; 0x80
 8011596:	00d2      	lsls	r2, r2, #3
 8011598:	e7ae      	b.n	80114f8 <HAL_DMA_IRQHandler+0x3a4>
 801159a:	2204      	movs	r2, #4
 801159c:	420a      	tst	r2, r1
 801159e:	d100      	bne.n	80115a2 <HAL_DMA_IRQHandler+0x44e>
 80115a0:	e208      	b.n	80119b4 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	0752      	lsls	r2, r2, #29
 80115a6:	d561      	bpl.n	801166c <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	0692      	lsls	r2, r2, #26
 80115ac:	d403      	bmi.n	80115b6 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	2104      	movs	r1, #4
 80115b2:	438a      	bics	r2, r1
 80115b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	4a5c      	ldr	r2, [pc, #368]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d800      	bhi.n	80115c0 <HAL_DMA_IRQHandler+0x46c>
 80115be:	e0c9      	b.n	8011754 <HAL_DMA_IRQHandler+0x600>
 80115c0:	4a54      	ldr	r2, [pc, #336]	; (8011714 <HAL_DMA_IRQHandler+0x5c0>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d047      	beq.n	8011656 <HAL_DMA_IRQHandler+0x502>
 80115c6:	4a54      	ldr	r2, [pc, #336]	; (8011718 <HAL_DMA_IRQHandler+0x5c4>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d100      	bne.n	80115ce <HAL_DMA_IRQHandler+0x47a>
 80115cc:	e089      	b.n	80116e2 <HAL_DMA_IRQHandler+0x58e>
 80115ce:	4a53      	ldr	r2, [pc, #332]	; (801171c <HAL_DMA_IRQHandler+0x5c8>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d100      	bne.n	80115d6 <HAL_DMA_IRQHandler+0x482>
 80115d4:	e087      	b.n	80116e6 <HAL_DMA_IRQHandler+0x592>
 80115d6:	4a52      	ldr	r2, [pc, #328]	; (8011720 <HAL_DMA_IRQHandler+0x5cc>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d100      	bne.n	80115de <HAL_DMA_IRQHandler+0x48a>
 80115dc:	e086      	b.n	80116ec <HAL_DMA_IRQHandler+0x598>
 80115de:	4a51      	ldr	r2, [pc, #324]	; (8011724 <HAL_DMA_IRQHandler+0x5d0>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d100      	bne.n	80115e6 <HAL_DMA_IRQHandler+0x492>
 80115e4:	e085      	b.n	80116f2 <HAL_DMA_IRQHandler+0x59e>
 80115e6:	4a50      	ldr	r2, [pc, #320]	; (8011728 <HAL_DMA_IRQHandler+0x5d4>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d100      	bne.n	80115ee <HAL_DMA_IRQHandler+0x49a>
 80115ec:	e084      	b.n	80116f8 <HAL_DMA_IRQHandler+0x5a4>
 80115ee:	4a4f      	ldr	r2, [pc, #316]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d100      	bne.n	80115f6 <HAL_DMA_IRQHandler+0x4a2>
 80115f4:	e083      	b.n	80116fe <HAL_DMA_IRQHandler+0x5aa>
 80115f6:	4a4e      	ldr	r2, [pc, #312]	; (8011730 <HAL_DMA_IRQHandler+0x5dc>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d100      	bne.n	80115fe <HAL_DMA_IRQHandler+0x4aa>
 80115fc:	e082      	b.n	8011704 <HAL_DMA_IRQHandler+0x5b0>
 80115fe:	4a4d      	ldr	r2, [pc, #308]	; (8011734 <HAL_DMA_IRQHandler+0x5e0>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d100      	bne.n	8011606 <HAL_DMA_IRQHandler+0x4b2>
 8011604:	e080      	b.n	8011708 <HAL_DMA_IRQHandler+0x5b4>
 8011606:	4a4c      	ldr	r2, [pc, #304]	; (8011738 <HAL_DMA_IRQHandler+0x5e4>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d07f      	beq.n	801170c <HAL_DMA_IRQHandler+0x5b8>
 801160c:	4a4b      	ldr	r2, [pc, #300]	; (801173c <HAL_DMA_IRQHandler+0x5e8>)
 801160e:	4694      	mov	ip, r2
 8011610:	4463      	add	r3, ip
 8011612:	425a      	negs	r2, r3
 8011614:	4153      	adcs	r3, r2
 8011616:	425b      	negs	r3, r3
 8011618:	4a4d      	ldr	r2, [pc, #308]	; (8011750 <HAL_DMA_IRQHandler+0x5fc>)
 801161a:	4013      	ands	r3, r2
 801161c:	2280      	movs	r2, #128	; 0x80
 801161e:	02d2      	lsls	r2, r2, #11
 8011620:	4694      	mov	ip, r2
 8011622:	4463      	add	r3, ip
 8011624:	e018      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011626:	2240      	movs	r2, #64	; 0x40
 8011628:	e7b8      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 801162a:	2280      	movs	r2, #128	; 0x80
 801162c:	00d2      	lsls	r2, r2, #3
 801162e:	e7b5      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 8011630:	2280      	movs	r2, #128	; 0x80
 8011632:	01d2      	lsls	r2, r2, #7
 8011634:	e7b2      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 8011636:	2280      	movs	r2, #128	; 0x80
 8011638:	02d2      	lsls	r2, r2, #11
 801163a:	e7af      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 801163c:	2280      	movs	r2, #128	; 0x80
 801163e:	03d2      	lsls	r2, r2, #15
 8011640:	e7ac      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 8011642:	2280      	movs	r2, #128	; 0x80
 8011644:	04d2      	lsls	r2, r2, #19
 8011646:	e7a9      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 8011648:	2204      	movs	r2, #4
 801164a:	e7a7      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 801164c:	2240      	movs	r2, #64	; 0x40
 801164e:	e7a5      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
 8011650:	2280      	movs	r2, #128	; 0x80
 8011652:	00d2      	lsls	r2, r2, #3
 8011654:	e7a2      	b.n	801159c <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011656:	2304      	movs	r3, #4
 8011658:	4a3b      	ldr	r2, [pc, #236]	; (8011748 <HAL_DMA_IRQHandler+0x5f4>)
 801165a:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801165c:	2321      	movs	r3, #33	; 0x21
 801165e:	2211      	movs	r2, #17
 8011660:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011668:	0020      	movs	r0, r4
 801166a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801166c:	6821      	ldr	r1, [r4, #0]
 801166e:	4b2f      	ldr	r3, [pc, #188]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 8011670:	4299      	cmp	r1, r3
 8011672:	d900      	bls.n	8011676 <HAL_DMA_IRQHandler+0x522>
 8011674:	e743      	b.n	80114fe <HAL_DMA_IRQHandler+0x3aa>
 8011676:	4b33      	ldr	r3, [pc, #204]	; (8011744 <HAL_DMA_IRQHandler+0x5f0>)
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	4a26      	ldr	r2, [pc, #152]	; (8011714 <HAL_DMA_IRQHandler+0x5c0>)
 801167c:	4291      	cmp	r1, r2
 801167e:	d100      	bne.n	8011682 <HAL_DMA_IRQHandler+0x52e>
 8011680:	e10a      	b.n	8011898 <HAL_DMA_IRQHandler+0x744>
 8011682:	4a25      	ldr	r2, [pc, #148]	; (8011718 <HAL_DMA_IRQHandler+0x5c4>)
 8011684:	4291      	cmp	r1, r2
 8011686:	d100      	bne.n	801168a <HAL_DMA_IRQHandler+0x536>
 8011688:	e10c      	b.n	80118a4 <HAL_DMA_IRQHandler+0x750>
 801168a:	4a24      	ldr	r2, [pc, #144]	; (801171c <HAL_DMA_IRQHandler+0x5c8>)
 801168c:	4291      	cmp	r1, r2
 801168e:	d100      	bne.n	8011692 <HAL_DMA_IRQHandler+0x53e>
 8011690:	e10a      	b.n	80118a8 <HAL_DMA_IRQHandler+0x754>
 8011692:	4a23      	ldr	r2, [pc, #140]	; (8011720 <HAL_DMA_IRQHandler+0x5cc>)
 8011694:	4291      	cmp	r1, r2
 8011696:	d100      	bne.n	801169a <HAL_DMA_IRQHandler+0x546>
 8011698:	e109      	b.n	80118ae <HAL_DMA_IRQHandler+0x75a>
 801169a:	4b22      	ldr	r3, [pc, #136]	; (8011724 <HAL_DMA_IRQHandler+0x5d0>)
 801169c:	4299      	cmp	r1, r3
 801169e:	d100      	bne.n	80116a2 <HAL_DMA_IRQHandler+0x54e>
 80116a0:	e108      	b.n	80118b4 <HAL_DMA_IRQHandler+0x760>
 80116a2:	4b21      	ldr	r3, [pc, #132]	; (8011728 <HAL_DMA_IRQHandler+0x5d4>)
 80116a4:	4299      	cmp	r1, r3
 80116a6:	d100      	bne.n	80116aa <HAL_DMA_IRQHandler+0x556>
 80116a8:	e107      	b.n	80118ba <HAL_DMA_IRQHandler+0x766>
 80116aa:	4b20      	ldr	r3, [pc, #128]	; (801172c <HAL_DMA_IRQHandler+0x5d8>)
 80116ac:	4299      	cmp	r1, r3
 80116ae:	d100      	bne.n	80116b2 <HAL_DMA_IRQHandler+0x55e>
 80116b0:	e106      	b.n	80118c0 <HAL_DMA_IRQHandler+0x76c>
 80116b2:	4b1f      	ldr	r3, [pc, #124]	; (8011730 <HAL_DMA_IRQHandler+0x5dc>)
 80116b4:	4299      	cmp	r1, r3
 80116b6:	d100      	bne.n	80116ba <HAL_DMA_IRQHandler+0x566>
 80116b8:	e105      	b.n	80118c6 <HAL_DMA_IRQHandler+0x772>
 80116ba:	4b1e      	ldr	r3, [pc, #120]	; (8011734 <HAL_DMA_IRQHandler+0x5e0>)
 80116bc:	4299      	cmp	r1, r3
 80116be:	d100      	bne.n	80116c2 <HAL_DMA_IRQHandler+0x56e>
 80116c0:	e103      	b.n	80118ca <HAL_DMA_IRQHandler+0x776>
 80116c2:	4b1d      	ldr	r3, [pc, #116]	; (8011738 <HAL_DMA_IRQHandler+0x5e4>)
 80116c4:	4299      	cmp	r1, r3
 80116c6:	d100      	bne.n	80116ca <HAL_DMA_IRQHandler+0x576>
 80116c8:	e101      	b.n	80118ce <HAL_DMA_IRQHandler+0x77a>
 80116ca:	4b1c      	ldr	r3, [pc, #112]	; (801173c <HAL_DMA_IRQHandler+0x5e8>)
 80116cc:	18ca      	adds	r2, r1, r3
 80116ce:	4253      	negs	r3, r2
 80116d0:	415a      	adcs	r2, r3
 80116d2:	4252      	negs	r2, r2
 80116d4:	4b1d      	ldr	r3, [pc, #116]	; (801174c <HAL_DMA_IRQHandler+0x5f8>)
 80116d6:	4013      	ands	r3, r2
 80116d8:	2280      	movs	r2, #128	; 0x80
 80116da:	0292      	lsls	r2, r2, #10
 80116dc:	4694      	mov	ip, r2
 80116de:	4463      	add	r3, ip
 80116e0:	e0db      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80116e2:	2340      	movs	r3, #64	; 0x40
 80116e4:	e7b8      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 80116e6:	2380      	movs	r3, #128	; 0x80
 80116e8:	00db      	lsls	r3, r3, #3
 80116ea:	e7b5      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 80116ec:	2380      	movs	r3, #128	; 0x80
 80116ee:	01db      	lsls	r3, r3, #7
 80116f0:	e7b2      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 80116f2:	2380      	movs	r3, #128	; 0x80
 80116f4:	02db      	lsls	r3, r3, #11
 80116f6:	e7af      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 80116f8:	2380      	movs	r3, #128	; 0x80
 80116fa:	03db      	lsls	r3, r3, #15
 80116fc:	e7ac      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 80116fe:	2380      	movs	r3, #128	; 0x80
 8011700:	04db      	lsls	r3, r3, #19
 8011702:	e7a9      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 8011704:	2304      	movs	r3, #4
 8011706:	e7a7      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 8011708:	2340      	movs	r3, #64	; 0x40
 801170a:	e7a5      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 801170c:	2380      	movs	r3, #128	; 0x80
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	e7a2      	b.n	8011658 <HAL_DMA_IRQHandler+0x504>
 8011712:	46c0      	nop			; (mov r8, r8)
 8011714:	40020008 	.word	0x40020008
 8011718:	4002001c 	.word	0x4002001c
 801171c:	40020030 	.word	0x40020030
 8011720:	40020044 	.word	0x40020044
 8011724:	40020058 	.word	0x40020058
 8011728:	4002006c 	.word	0x4002006c
 801172c:	40020080 	.word	0x40020080
 8011730:	40020408 	.word	0x40020408
 8011734:	4002041c 	.word	0x4002041c
 8011738:	40020430 	.word	0x40020430
 801173c:	bffdfbbc 	.word	0xbffdfbbc
 8011740:	fff88000 	.word	0xfff88000
 8011744:	40020000 	.word	0x40020000
 8011748:	40020400 	.word	0x40020400
 801174c:	fffe2000 	.word	0xfffe2000
 8011750:	fffc4000 	.word	0xfffc4000
 8011754:	4a9b      	ldr	r2, [pc, #620]	; (80119c4 <HAL_DMA_IRQHandler+0x870>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d027      	beq.n	80117aa <HAL_DMA_IRQHandler+0x656>
 801175a:	4a9b      	ldr	r2, [pc, #620]	; (80119c8 <HAL_DMA_IRQHandler+0x874>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d028      	beq.n	80117b2 <HAL_DMA_IRQHandler+0x65e>
 8011760:	4a9a      	ldr	r2, [pc, #616]	; (80119cc <HAL_DMA_IRQHandler+0x878>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d027      	beq.n	80117b6 <HAL_DMA_IRQHandler+0x662>
 8011766:	4a9a      	ldr	r2, [pc, #616]	; (80119d0 <HAL_DMA_IRQHandler+0x87c>)
 8011768:	4293      	cmp	r3, r2
 801176a:	d027      	beq.n	80117bc <HAL_DMA_IRQHandler+0x668>
 801176c:	4a99      	ldr	r2, [pc, #612]	; (80119d4 <HAL_DMA_IRQHandler+0x880>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d027      	beq.n	80117c2 <HAL_DMA_IRQHandler+0x66e>
 8011772:	4a99      	ldr	r2, [pc, #612]	; (80119d8 <HAL_DMA_IRQHandler+0x884>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d027      	beq.n	80117c8 <HAL_DMA_IRQHandler+0x674>
 8011778:	4a98      	ldr	r2, [pc, #608]	; (80119dc <HAL_DMA_IRQHandler+0x888>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d027      	beq.n	80117ce <HAL_DMA_IRQHandler+0x67a>
 801177e:	4a98      	ldr	r2, [pc, #608]	; (80119e0 <HAL_DMA_IRQHandler+0x88c>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d027      	beq.n	80117d4 <HAL_DMA_IRQHandler+0x680>
 8011784:	4a97      	ldr	r2, [pc, #604]	; (80119e4 <HAL_DMA_IRQHandler+0x890>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d026      	beq.n	80117d8 <HAL_DMA_IRQHandler+0x684>
 801178a:	4a97      	ldr	r2, [pc, #604]	; (80119e8 <HAL_DMA_IRQHandler+0x894>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d025      	beq.n	80117dc <HAL_DMA_IRQHandler+0x688>
 8011790:	4a96      	ldr	r2, [pc, #600]	; (80119ec <HAL_DMA_IRQHandler+0x898>)
 8011792:	4694      	mov	ip, r2
 8011794:	4463      	add	r3, ip
 8011796:	425a      	negs	r2, r3
 8011798:	4153      	adcs	r3, r2
 801179a:	425b      	negs	r3, r3
 801179c:	4a94      	ldr	r2, [pc, #592]	; (80119f0 <HAL_DMA_IRQHandler+0x89c>)
 801179e:	4013      	ands	r3, r2
 80117a0:	2280      	movs	r2, #128	; 0x80
 80117a2:	02d2      	lsls	r2, r2, #11
 80117a4:	4694      	mov	ip, r2
 80117a6:	4463      	add	r3, ip
 80117a8:	e000      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117aa:	2304      	movs	r3, #4
 80117ac:	4a91      	ldr	r2, [pc, #580]	; (80119f4 <HAL_DMA_IRQHandler+0x8a0>)
 80117ae:	6053      	str	r3, [r2, #4]
 80117b0:	e754      	b.n	801165c <HAL_DMA_IRQHandler+0x508>
 80117b2:	2340      	movs	r3, #64	; 0x40
 80117b4:	e7fa      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117b6:	2380      	movs	r3, #128	; 0x80
 80117b8:	00db      	lsls	r3, r3, #3
 80117ba:	e7f7      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117bc:	2380      	movs	r3, #128	; 0x80
 80117be:	01db      	lsls	r3, r3, #7
 80117c0:	e7f4      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117c2:	2380      	movs	r3, #128	; 0x80
 80117c4:	02db      	lsls	r3, r3, #11
 80117c6:	e7f1      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117c8:	2380      	movs	r3, #128	; 0x80
 80117ca:	03db      	lsls	r3, r3, #15
 80117cc:	e7ee      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117ce:	2380      	movs	r3, #128	; 0x80
 80117d0:	04db      	lsls	r3, r3, #19
 80117d2:	e7eb      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117d4:	2304      	movs	r3, #4
 80117d6:	e7e9      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117d8:	2340      	movs	r3, #64	; 0x40
 80117da:	e7e7      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
 80117dc:	2380      	movs	r3, #128	; 0x80
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	e7e4      	b.n	80117ac <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80117e2:	2302      	movs	r3, #2
 80117e4:	4003      	ands	r3, r0
 80117e6:	1e5a      	subs	r2, r3, #1
 80117e8:	4193      	sbcs	r3, r2
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d100      	bne.n	80117f2 <HAL_DMA_IRQHandler+0x69e>
 80117f0:	e080      	b.n	80118f4 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80117f2:	680b      	ldr	r3, [r1, #0]
 80117f4:	079b      	lsls	r3, r3, #30
 80117f6:	d57d      	bpl.n	80118f4 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80117f8:	680b      	ldr	r3, [r1, #0]
 80117fa:	069b      	lsls	r3, r3, #26
 80117fc:	d403      	bmi.n	8011806 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80117fe:	680b      	ldr	r3, [r1, #0]
 8011800:	2202      	movs	r2, #2
 8011802:	4393      	bics	r3, r2
 8011804:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	4a74      	ldr	r2, [pc, #464]	; (80119dc <HAL_DMA_IRQHandler+0x888>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d800      	bhi.n	8011810 <HAL_DMA_IRQHandler+0x6bc>
 801180e:	e08a      	b.n	8011926 <HAL_DMA_IRQHandler+0x7d2>
 8011810:	4a6c      	ldr	r2, [pc, #432]	; (80119c4 <HAL_DMA_IRQHandler+0x870>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d05e      	beq.n	80118d4 <HAL_DMA_IRQHandler+0x780>
 8011816:	4a6c      	ldr	r2, [pc, #432]	; (80119c8 <HAL_DMA_IRQHandler+0x874>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d100      	bne.n	801181e <HAL_DMA_IRQHandler+0x6ca>
 801181c:	e06b      	b.n	80118f6 <HAL_DMA_IRQHandler+0x7a2>
 801181e:	4a6b      	ldr	r2, [pc, #428]	; (80119cc <HAL_DMA_IRQHandler+0x878>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d06a      	beq.n	80118fa <HAL_DMA_IRQHandler+0x7a6>
 8011824:	4a6a      	ldr	r2, [pc, #424]	; (80119d0 <HAL_DMA_IRQHandler+0x87c>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d06a      	beq.n	8011900 <HAL_DMA_IRQHandler+0x7ac>
 801182a:	4a6a      	ldr	r2, [pc, #424]	; (80119d4 <HAL_DMA_IRQHandler+0x880>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d06a      	beq.n	8011906 <HAL_DMA_IRQHandler+0x7b2>
 8011830:	4a69      	ldr	r2, [pc, #420]	; (80119d8 <HAL_DMA_IRQHandler+0x884>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d06a      	beq.n	801190c <HAL_DMA_IRQHandler+0x7b8>
 8011836:	4a69      	ldr	r2, [pc, #420]	; (80119dc <HAL_DMA_IRQHandler+0x888>)
 8011838:	4293      	cmp	r3, r2
 801183a:	d06a      	beq.n	8011912 <HAL_DMA_IRQHandler+0x7be>
 801183c:	4a68      	ldr	r2, [pc, #416]	; (80119e0 <HAL_DMA_IRQHandler+0x88c>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d06a      	beq.n	8011918 <HAL_DMA_IRQHandler+0x7c4>
 8011842:	4a68      	ldr	r2, [pc, #416]	; (80119e4 <HAL_DMA_IRQHandler+0x890>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d069      	beq.n	801191c <HAL_DMA_IRQHandler+0x7c8>
 8011848:	4a67      	ldr	r2, [pc, #412]	; (80119e8 <HAL_DMA_IRQHandler+0x894>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d068      	beq.n	8011920 <HAL_DMA_IRQHandler+0x7cc>
 801184e:	4a67      	ldr	r2, [pc, #412]	; (80119ec <HAL_DMA_IRQHandler+0x898>)
 8011850:	4694      	mov	ip, r2
 8011852:	4463      	add	r3, ip
 8011854:	425a      	negs	r2, r3
 8011856:	4153      	adcs	r3, r2
 8011858:	425b      	negs	r3, r3
 801185a:	4a67      	ldr	r2, [pc, #412]	; (80119f8 <HAL_DMA_IRQHandler+0x8a4>)
 801185c:	4013      	ands	r3, r2
 801185e:	2280      	movs	r2, #128	; 0x80
 8011860:	0292      	lsls	r2, r2, #10
 8011862:	4694      	mov	ip, r2
 8011864:	4463      	add	r3, ip
 8011866:	e036      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011868:	2320      	movs	r3, #32
 801186a:	e7bb      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 801186c:	2380      	movs	r3, #128	; 0x80
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	e7b8      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 8011872:	2380      	movs	r3, #128	; 0x80
 8011874:	019b      	lsls	r3, r3, #6
 8011876:	e7b5      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 8011878:	2380      	movs	r3, #128	; 0x80
 801187a:	029b      	lsls	r3, r3, #10
 801187c:	e7b2      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 801187e:	2380      	movs	r3, #128	; 0x80
 8011880:	039b      	lsls	r3, r3, #14
 8011882:	e7af      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 8011884:	2380      	movs	r3, #128	; 0x80
 8011886:	049b      	lsls	r3, r3, #18
 8011888:	e7ac      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 801188a:	2302      	movs	r3, #2
 801188c:	e7aa      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 801188e:	2320      	movs	r3, #32
 8011890:	e7a8      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 8011892:	2380      	movs	r3, #128	; 0x80
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	e7a5      	b.n	80117e4 <HAL_DMA_IRQHandler+0x690>
 8011898:	2302      	movs	r3, #2
 801189a:	4003      	ands	r3, r0
 801189c:	1e5a      	subs	r2, r3, #1
 801189e:	4193      	sbcs	r3, r2
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	e7a3      	b.n	80117ec <HAL_DMA_IRQHandler+0x698>
 80118a4:	2320      	movs	r3, #32
 80118a6:	e7f8      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	e7f5      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118ae:	2380      	movs	r3, #128	; 0x80
 80118b0:	019b      	lsls	r3, r3, #6
 80118b2:	e7f2      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118b4:	2380      	movs	r3, #128	; 0x80
 80118b6:	029b      	lsls	r3, r3, #10
 80118b8:	e7ef      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118ba:	2380      	movs	r3, #128	; 0x80
 80118bc:	039b      	lsls	r3, r3, #14
 80118be:	e7ec      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118c0:	2380      	movs	r3, #128	; 0x80
 80118c2:	049b      	lsls	r3, r3, #18
 80118c4:	e7e9      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118c6:	2302      	movs	r3, #2
 80118c8:	e7e7      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118ca:	2320      	movs	r3, #32
 80118cc:	e7e5      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
 80118ce:	2380      	movs	r3, #128	; 0x80
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	e7e2      	b.n	801189a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80118d4:	2302      	movs	r3, #2
 80118d6:	4a49      	ldr	r2, [pc, #292]	; (80119fc <HAL_DMA_IRQHandler+0x8a8>)
 80118d8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80118da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118dc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80118de:	2321      	movs	r3, #33	; 0x21
 80118e0:	2201      	movs	r2, #1
 80118e2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80118e4:	3b01      	subs	r3, #1
 80118e6:	2200      	movs	r2, #0
 80118e8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80118ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80118f0:	0020      	movs	r0, r4
 80118f2:	4798      	blx	r3
}  
 80118f4:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80118f6:	2320      	movs	r3, #32
 80118f8:	e7ed      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 80118fa:	2380      	movs	r3, #128	; 0x80
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	e7ea      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011900:	2380      	movs	r3, #128	; 0x80
 8011902:	019b      	lsls	r3, r3, #6
 8011904:	e7e7      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011906:	2380      	movs	r3, #128	; 0x80
 8011908:	029b      	lsls	r3, r3, #10
 801190a:	e7e4      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 801190c:	2380      	movs	r3, #128	; 0x80
 801190e:	039b      	lsls	r3, r3, #14
 8011910:	e7e1      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011912:	2380      	movs	r3, #128	; 0x80
 8011914:	049b      	lsls	r3, r3, #18
 8011916:	e7de      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011918:	2302      	movs	r3, #2
 801191a:	e7dc      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 801191c:	2320      	movs	r3, #32
 801191e:	e7da      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011920:	2380      	movs	r3, #128	; 0x80
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	e7d7      	b.n	80118d6 <HAL_DMA_IRQHandler+0x782>
 8011926:	4a27      	ldr	r2, [pc, #156]	; (80119c4 <HAL_DMA_IRQHandler+0x870>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d027      	beq.n	801197c <HAL_DMA_IRQHandler+0x828>
 801192c:	4a26      	ldr	r2, [pc, #152]	; (80119c8 <HAL_DMA_IRQHandler+0x874>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d028      	beq.n	8011984 <HAL_DMA_IRQHandler+0x830>
 8011932:	4a26      	ldr	r2, [pc, #152]	; (80119cc <HAL_DMA_IRQHandler+0x878>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d027      	beq.n	8011988 <HAL_DMA_IRQHandler+0x834>
 8011938:	4a25      	ldr	r2, [pc, #148]	; (80119d0 <HAL_DMA_IRQHandler+0x87c>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d027      	beq.n	801198e <HAL_DMA_IRQHandler+0x83a>
 801193e:	4a25      	ldr	r2, [pc, #148]	; (80119d4 <HAL_DMA_IRQHandler+0x880>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d027      	beq.n	8011994 <HAL_DMA_IRQHandler+0x840>
 8011944:	4a24      	ldr	r2, [pc, #144]	; (80119d8 <HAL_DMA_IRQHandler+0x884>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d027      	beq.n	801199a <HAL_DMA_IRQHandler+0x846>
 801194a:	4a24      	ldr	r2, [pc, #144]	; (80119dc <HAL_DMA_IRQHandler+0x888>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d027      	beq.n	80119a0 <HAL_DMA_IRQHandler+0x84c>
 8011950:	4a23      	ldr	r2, [pc, #140]	; (80119e0 <HAL_DMA_IRQHandler+0x88c>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d027      	beq.n	80119a6 <HAL_DMA_IRQHandler+0x852>
 8011956:	4a23      	ldr	r2, [pc, #140]	; (80119e4 <HAL_DMA_IRQHandler+0x890>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d026      	beq.n	80119aa <HAL_DMA_IRQHandler+0x856>
 801195c:	4a22      	ldr	r2, [pc, #136]	; (80119e8 <HAL_DMA_IRQHandler+0x894>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d025      	beq.n	80119ae <HAL_DMA_IRQHandler+0x85a>
 8011962:	4a22      	ldr	r2, [pc, #136]	; (80119ec <HAL_DMA_IRQHandler+0x898>)
 8011964:	4694      	mov	ip, r2
 8011966:	4463      	add	r3, ip
 8011968:	425a      	negs	r2, r3
 801196a:	4153      	adcs	r3, r2
 801196c:	425b      	negs	r3, r3
 801196e:	4a22      	ldr	r2, [pc, #136]	; (80119f8 <HAL_DMA_IRQHandler+0x8a4>)
 8011970:	4013      	ands	r3, r2
 8011972:	2280      	movs	r2, #128	; 0x80
 8011974:	0292      	lsls	r2, r2, #10
 8011976:	4694      	mov	ip, r2
 8011978:	4463      	add	r3, ip
 801197a:	e000      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 801197c:	2302      	movs	r3, #2
 801197e:	4a1d      	ldr	r2, [pc, #116]	; (80119f4 <HAL_DMA_IRQHandler+0x8a0>)
 8011980:	6053      	str	r3, [r2, #4]
 8011982:	e7aa      	b.n	80118da <HAL_DMA_IRQHandler+0x786>
 8011984:	2320      	movs	r3, #32
 8011986:	e7fa      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 8011988:	2380      	movs	r3, #128	; 0x80
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	e7f7      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 801198e:	2380      	movs	r3, #128	; 0x80
 8011990:	019b      	lsls	r3, r3, #6
 8011992:	e7f4      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 8011994:	2380      	movs	r3, #128	; 0x80
 8011996:	029b      	lsls	r3, r3, #10
 8011998:	e7f1      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 801199a:	2380      	movs	r3, #128	; 0x80
 801199c:	039b      	lsls	r3, r3, #14
 801199e:	e7ee      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 80119a0:	2380      	movs	r3, #128	; 0x80
 80119a2:	049b      	lsls	r3, r3, #18
 80119a4:	e7eb      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 80119a6:	2302      	movs	r3, #2
 80119a8:	e7e9      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 80119aa:	2320      	movs	r3, #32
 80119ac:	e7e7      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
 80119ae:	2380      	movs	r3, #128	; 0x80
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	e7e4      	b.n	801197e <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119b4:	6821      	ldr	r1, [r4, #0]
 80119b6:	e65e      	b.n	8011676 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	0712      	lsls	r2, r2, #28
 80119bc:	d500      	bpl.n	80119c0 <HAL_DMA_IRQHandler+0x86c>
 80119be:	e49b      	b.n	80112f8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80119c0:	6823      	ldr	r3, [r4, #0]
 80119c2:	e44b      	b.n	801125c <HAL_DMA_IRQHandler+0x108>
 80119c4:	40020008 	.word	0x40020008
 80119c8:	4002001c 	.word	0x4002001c
 80119cc:	40020030 	.word	0x40020030
 80119d0:	40020044 	.word	0x40020044
 80119d4:	40020058 	.word	0x40020058
 80119d8:	4002006c 	.word	0x4002006c
 80119dc:	40020080 	.word	0x40020080
 80119e0:	40020408 	.word	0x40020408
 80119e4:	4002041c 	.word	0x4002041c
 80119e8:	40020430 	.word	0x40020430
 80119ec:	bffdfbbc 	.word	0xbffdfbbc
 80119f0:	fffc4000 	.word	0xfffc4000
 80119f4:	40020000 	.word	0x40020000
 80119f8:	fffe2000 	.word	0xfffe2000
 80119fc:	40020400 	.word	0x40020400

08011a00 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011a00:	4b0a      	ldr	r3, [pc, #40]	; (8011a2c <FLASH_SetErrorCode+0x2c>)
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	06db      	lsls	r3, r3, #27
 8011a06:	d504      	bpl.n	8011a12 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011a08:	4a09      	ldr	r2, [pc, #36]	; (8011a30 <FLASH_SetErrorCode+0x30>)
 8011a0a:	69d3      	ldr	r3, [r2, #28]
 8011a0c:	2102      	movs	r1, #2
 8011a0e:	430b      	orrs	r3, r1
 8011a10:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011a12:	4b06      	ldr	r3, [pc, #24]	; (8011a2c <FLASH_SetErrorCode+0x2c>)
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	075b      	lsls	r3, r3, #29
 8011a18:	d504      	bpl.n	8011a24 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011a1a:	4a05      	ldr	r2, [pc, #20]	; (8011a30 <FLASH_SetErrorCode+0x30>)
 8011a1c:	69d3      	ldr	r3, [r2, #28]
 8011a1e:	2101      	movs	r1, #1
 8011a20:	430b      	orrs	r3, r1
 8011a22:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011a24:	4b01      	ldr	r3, [pc, #4]	; (8011a2c <FLASH_SetErrorCode+0x2c>)
 8011a26:	2214      	movs	r2, #20
 8011a28:	60da      	str	r2, [r3, #12]
}  
 8011a2a:	4770      	bx	lr
 8011a2c:	40022000 	.word	0x40022000
 8011a30:	20006780 	.word	0x20006780

08011a34 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011a34:	4b05      	ldr	r3, [pc, #20]	; (8011a4c <HAL_FLASH_Unlock+0x18>)
 8011a36:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011a38:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011a3a:	061b      	lsls	r3, r3, #24
 8011a3c:	d505      	bpl.n	8011a4a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011a3e:	4b03      	ldr	r3, [pc, #12]	; (8011a4c <HAL_FLASH_Unlock+0x18>)
 8011a40:	4a03      	ldr	r2, [pc, #12]	; (8011a50 <HAL_FLASH_Unlock+0x1c>)
 8011a42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011a44:	4a03      	ldr	r2, [pc, #12]	; (8011a54 <HAL_FLASH_Unlock+0x20>)
 8011a46:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011a48:	2000      	movs	r0, #0
}
 8011a4a:	4770      	bx	lr
 8011a4c:	40022000 	.word	0x40022000
 8011a50:	45670123 	.word	0x45670123
 8011a54:	cdef89ab 	.word	0xcdef89ab

08011a58 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011a58:	4a03      	ldr	r2, [pc, #12]	; (8011a68 <HAL_FLASH_Lock+0x10>)
 8011a5a:	6913      	ldr	r3, [r2, #16]
 8011a5c:	2180      	movs	r1, #128	; 0x80
 8011a5e:	430b      	orrs	r3, r1
 8011a60:	6113      	str	r3, [r2, #16]
}
 8011a62:	2000      	movs	r0, #0
 8011a64:	4770      	bx	lr
 8011a66:	46c0      	nop			; (mov r8, r8)
 8011a68:	40022000 	.word	0x40022000

08011a6c <FLASH_WaitForLastOperation>:
{
 8011a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a6e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011a70:	f7fe fdd4 	bl	801061c <HAL_GetTick>
 8011a74:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011a76:	4e13      	ldr	r6, [pc, #76]	; (8011ac4 <FLASH_WaitForLastOperation+0x58>)
 8011a78:	2501      	movs	r5, #1
 8011a7a:	68f3      	ldr	r3, [r6, #12]
 8011a7c:	421d      	tst	r5, r3
 8011a7e:	d00a      	beq.n	8011a96 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011a80:	1c63      	adds	r3, r4, #1
 8011a82:	d0fa      	beq.n	8011a7a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011a84:	2c00      	cmp	r4, #0
 8011a86:	d01a      	beq.n	8011abe <FLASH_WaitForLastOperation+0x52>
 8011a88:	f7fe fdc8 	bl	801061c <HAL_GetTick>
 8011a8c:	1bc0      	subs	r0, r0, r7
 8011a8e:	42a0      	cmp	r0, r4
 8011a90:	d9f3      	bls.n	8011a7a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011a92:	2003      	movs	r0, #3
 8011a94:	e012      	b.n	8011abc <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011a96:	4b0b      	ldr	r3, [pc, #44]	; (8011ac4 <FLASH_WaitForLastOperation+0x58>)
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	069b      	lsls	r3, r3, #26
 8011a9c:	d502      	bpl.n	8011aa4 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011a9e:	4b09      	ldr	r3, [pc, #36]	; (8011ac4 <FLASH_WaitForLastOperation+0x58>)
 8011aa0:	2220      	movs	r2, #32
 8011aa2:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011aa4:	4b07      	ldr	r3, [pc, #28]	; (8011ac4 <FLASH_WaitForLastOperation+0x58>)
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	06db      	lsls	r3, r3, #27
 8011aaa:	d404      	bmi.n	8011ab6 <FLASH_WaitForLastOperation+0x4a>
 8011aac:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <FLASH_WaitForLastOperation+0x58>)
 8011aae:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011ab0:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011ab2:	075b      	lsls	r3, r3, #29
 8011ab4:	d502      	bpl.n	8011abc <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011ab6:	f7ff ffa3 	bl	8011a00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011aba:	2001      	movs	r0, #1
}
 8011abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011abe:	2003      	movs	r0, #3
 8011ac0:	e7fc      	b.n	8011abc <FLASH_WaitForLastOperation+0x50>
 8011ac2:	46c0      	nop			; (mov r8, r8)
 8011ac4:	40022000 	.word	0x40022000

08011ac8 <HAL_FLASH_Program>:
{
 8011ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aca:	46de      	mov	lr, fp
 8011acc:	4657      	mov	r7, sl
 8011ace:	464e      	mov	r6, r9
 8011ad0:	4645      	mov	r5, r8
 8011ad2:	b5e0      	push	{r5, r6, r7, lr}
 8011ad4:	b083      	sub	sp, #12
 8011ad6:	0004      	movs	r4, r0
 8011ad8:	000e      	movs	r6, r1
 8011ada:	9201      	str	r2, [sp, #4]
 8011adc:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011ade:	4b2a      	ldr	r3, [pc, #168]	; (8011b88 <HAL_FLASH_Program+0xc0>)
 8011ae0:	7e1b      	ldrb	r3, [r3, #24]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d04b      	beq.n	8011b7e <HAL_FLASH_Program+0xb6>
 8011ae6:	4b28      	ldr	r3, [pc, #160]	; (8011b88 <HAL_FLASH_Program+0xc0>)
 8011ae8:	2201      	movs	r2, #1
 8011aea:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011aec:	4827      	ldr	r0, [pc, #156]	; (8011b8c <HAL_FLASH_Program+0xc4>)
 8011aee:	f7ff ffbd 	bl	8011a6c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d139      	bne.n	8011b6a <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011af6:	2c01      	cmp	r4, #1
 8011af8:	d043      	beq.n	8011b82 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011afa:	3c02      	subs	r4, #2
 8011afc:	4263      	negs	r3, r4
 8011afe:	415c      	adcs	r4, r3
 8011b00:	4264      	negs	r4, r4
 8011b02:	2301      	movs	r3, #1
 8011b04:	439c      	bics	r4, r3
 8011b06:	46a0      	mov	r8, r4
 8011b08:	3303      	adds	r3, #3
 8011b0a:	469c      	mov	ip, r3
 8011b0c:	44e0      	add	r8, ip
{
 8011b0e:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011b10:	4b1d      	ldr	r3, [pc, #116]	; (8011b88 <HAL_FLASH_Program+0xc0>)
 8011b12:	469b      	mov	fp, r3
 8011b14:	2300      	movs	r3, #0
 8011b16:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011b18:	4c1d      	ldr	r4, [pc, #116]	; (8011b90 <HAL_FLASH_Program+0xc8>)
 8011b1a:	e01e      	b.n	8011b5a <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011b1c:	2220      	movs	r2, #32
 8011b1e:	1ad2      	subs	r2, r2, r3
 8011b20:	4649      	mov	r1, r9
 8011b22:	4091      	lsls	r1, r2
 8011b24:	000a      	movs	r2, r1
 8011b26:	9901      	ldr	r1, [sp, #4]
 8011b28:	40d9      	lsrs	r1, r3
 8011b2a:	000b      	movs	r3, r1
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011b30:	465a      	mov	r2, fp
 8011b32:	4651      	mov	r1, sl
 8011b34:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011b36:	6922      	ldr	r2, [r4, #16]
 8011b38:	2701      	movs	r7, #1
 8011b3a:	433a      	orrs	r2, r7
 8011b3c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011b3e:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011b40:	4812      	ldr	r0, [pc, #72]	; (8011b8c <HAL_FLASH_Program+0xc4>)
 8011b42:	f7ff ff93 	bl	8011a6c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	43bb      	bics	r3, r7
 8011b4a:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d10c      	bne.n	8011b6a <HAL_FLASH_Program+0xa2>
 8011b50:	3501      	adds	r5, #1
 8011b52:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8011b54:	b2eb      	uxtb	r3, r5
 8011b56:	4598      	cmp	r8, r3
 8011b58:	d907      	bls.n	8011b6a <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011b5a:	012b      	lsls	r3, r5, #4
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	4252      	negs	r2, r2
 8011b60:	189a      	adds	r2, r3, r2
 8011b62:	d4db      	bmi.n	8011b1c <HAL_FLASH_Program+0x54>
 8011b64:	464b      	mov	r3, r9
 8011b66:	40d3      	lsrs	r3, r2
 8011b68:	e7e1      	b.n	8011b2e <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011b6a:	4b07      	ldr	r3, [pc, #28]	; (8011b88 <HAL_FLASH_Program+0xc0>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	761a      	strb	r2, [r3, #24]
}
 8011b70:	b003      	add	sp, #12
 8011b72:	bc3c      	pop	{r2, r3, r4, r5}
 8011b74:	4690      	mov	r8, r2
 8011b76:	4699      	mov	r9, r3
 8011b78:	46a2      	mov	sl, r4
 8011b7a:	46ab      	mov	fp, r5
 8011b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011b7e:	2002      	movs	r0, #2
 8011b80:	e7f6      	b.n	8011b70 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011b82:	2301      	movs	r3, #1
 8011b84:	4698      	mov	r8, r3
 8011b86:	e7c2      	b.n	8011b0e <HAL_FLASH_Program+0x46>
 8011b88:	20006780 	.word	0x20006780
 8011b8c:	0000c350 	.word	0x0000c350
 8011b90:	40022000 	.word	0x40022000

08011b94 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011b94:	4b06      	ldr	r3, [pc, #24]	; (8011bb0 <FLASH_MassErase+0x1c>)
 8011b96:	2200      	movs	r2, #0
 8011b98:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011b9a:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <FLASH_MassErase+0x20>)
 8011b9c:	691a      	ldr	r2, [r3, #16]
 8011b9e:	2104      	movs	r1, #4
 8011ba0:	430a      	orrs	r2, r1
 8011ba2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011ba4:	691a      	ldr	r2, [r3, #16]
 8011ba6:	313c      	adds	r1, #60	; 0x3c
 8011ba8:	430a      	orrs	r2, r1
 8011baa:	611a      	str	r2, [r3, #16]
}
 8011bac:	4770      	bx	lr
 8011bae:	46c0      	nop			; (mov r8, r8)
 8011bb0:	20006780 	.word	0x20006780
 8011bb4:	40022000 	.word	0x40022000

08011bb8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011bb8:	4b06      	ldr	r3, [pc, #24]	; (8011bd4 <FLASH_PageErase+0x1c>)
 8011bba:	2200      	movs	r2, #0
 8011bbc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011bbe:	4b06      	ldr	r3, [pc, #24]	; (8011bd8 <FLASH_PageErase+0x20>)
 8011bc0:	691a      	ldr	r2, [r3, #16]
 8011bc2:	2102      	movs	r1, #2
 8011bc4:	430a      	orrs	r2, r1
 8011bc6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011bc8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011bca:	691a      	ldr	r2, [r3, #16]
 8011bcc:	313e      	adds	r1, #62	; 0x3e
 8011bce:	430a      	orrs	r2, r1
 8011bd0:	611a      	str	r2, [r3, #16]
}
 8011bd2:	4770      	bx	lr
 8011bd4:	20006780 	.word	0x20006780
 8011bd8:	40022000 	.word	0x40022000

08011bdc <HAL_FLASHEx_Erase>:
{
 8011bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bde:	46c6      	mov	lr, r8
 8011be0:	b500      	push	{lr}
 8011be2:	0006      	movs	r6, r0
 8011be4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011be6:	4b2a      	ldr	r3, [pc, #168]	; (8011c90 <HAL_FLASHEx_Erase+0xb4>)
 8011be8:	7e1b      	ldrb	r3, [r3, #24]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d04d      	beq.n	8011c8a <HAL_FLASHEx_Erase+0xae>
 8011bee:	4b28      	ldr	r3, [pc, #160]	; (8011c90 <HAL_FLASHEx_Erase+0xb4>)
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011bf4:	6803      	ldr	r3, [r0, #0]
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d029      	beq.n	8011c4e <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011bfa:	4826      	ldr	r0, [pc, #152]	; (8011c94 <HAL_FLASHEx_Erase+0xb8>)
 8011bfc:	f7ff ff36 	bl	8011a6c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011c00:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d129      	bne.n	8011c5a <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8011c06:	2301      	movs	r3, #1
 8011c08:	425b      	negs	r3, r3
 8011c0a:	4642      	mov	r2, r8
 8011c0c:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011c0e:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011c10:	68b3      	ldr	r3, [r6, #8]
 8011c12:	02db      	lsls	r3, r3, #11
 8011c14:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011c16:	429c      	cmp	r4, r3
 8011c18:	d235      	bcs.n	8011c86 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011c1a:	4f1f      	ldr	r7, [pc, #124]	; (8011c98 <HAL_FLASHEx_Erase+0xbc>)
 8011c1c:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8011c1e:	0020      	movs	r0, r4
 8011c20:	f7ff ffca 	bl	8011bb8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011c24:	481b      	ldr	r0, [pc, #108]	; (8011c94 <HAL_FLASHEx_Erase+0xb8>)
 8011c26:	f7ff ff21 	bl	8011a6c <FLASH_WaitForLastOperation>
 8011c2a:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	43ab      	bics	r3, r5
 8011c30:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d124      	bne.n	8011c80 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8011c36:	2380      	movs	r3, #128	; 0x80
 8011c38:	011b      	lsls	r3, r3, #4
 8011c3a:	469c      	mov	ip, r3
 8011c3c:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011c3e:	68b3      	ldr	r3, [r6, #8]
 8011c40:	02db      	lsls	r3, r3, #11
 8011c42:	6871      	ldr	r1, [r6, #4]
 8011c44:	468c      	mov	ip, r1
 8011c46:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011c48:	42a3      	cmp	r3, r4
 8011c4a:	d8e8      	bhi.n	8011c1e <HAL_FLASHEx_Erase+0x42>
 8011c4c:	e005      	b.n	8011c5a <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011c4e:	4811      	ldr	r0, [pc, #68]	; (8011c94 <HAL_FLASHEx_Erase+0xb8>)
 8011c50:	f7ff ff0c 	bl	8011a6c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011c54:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d006      	beq.n	8011c68 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011c5a:	4b0d      	ldr	r3, [pc, #52]	; (8011c90 <HAL_FLASHEx_Erase+0xb4>)
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	7619      	strb	r1, [r3, #24]
}
 8011c60:	0010      	movs	r0, r2
 8011c62:	bc04      	pop	{r2}
 8011c64:	4690      	mov	r8, r2
 8011c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011c68:	f7ff ff94 	bl	8011b94 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011c6c:	4809      	ldr	r0, [pc, #36]	; (8011c94 <HAL_FLASHEx_Erase+0xb8>)
 8011c6e:	f7ff fefd 	bl	8011a6c <FLASH_WaitForLastOperation>
 8011c72:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011c74:	4908      	ldr	r1, [pc, #32]	; (8011c98 <HAL_FLASHEx_Erase+0xbc>)
 8011c76:	690b      	ldr	r3, [r1, #16]
 8011c78:	2004      	movs	r0, #4
 8011c7a:	4383      	bics	r3, r0
 8011c7c:	610b      	str	r3, [r1, #16]
 8011c7e:	e7ec      	b.n	8011c5a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011c80:	4643      	mov	r3, r8
 8011c82:	601c      	str	r4, [r3, #0]
            break;
 8011c84:	e7e9      	b.n	8011c5a <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011c86:	2201      	movs	r2, #1
 8011c88:	e7e7      	b.n	8011c5a <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	e7e8      	b.n	8011c60 <HAL_FLASHEx_Erase+0x84>
 8011c8e:	46c0      	nop			; (mov r8, r8)
 8011c90:	20006780 	.word	0x20006780
 8011c94:	0000c350 	.word	0x0000c350
 8011c98:	40022000 	.word	0x40022000

08011c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9e:	46de      	mov	lr, fp
 8011ca0:	4657      	mov	r7, sl
 8011ca2:	464e      	mov	r6, r9
 8011ca4:	4645      	mov	r5, r8
 8011ca6:	b5e0      	push	{r5, r6, r7, lr}
 8011ca8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011caa:	680a      	ldr	r2, [r1, #0]
 8011cac:	2a00      	cmp	r2, #0
 8011cae:	d100      	bne.n	8011cb2 <HAL_GPIO_Init+0x16>
 8011cb0:	e0bf      	b.n	8011e32 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8011cb2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011cb4:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011cb6:	2410      	movs	r4, #16
 8011cb8:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011cba:	3c0d      	subs	r4, #13
 8011cbc:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011cbe:	2480      	movs	r4, #128	; 0x80
 8011cc0:	0564      	lsls	r4, r4, #21
 8011cc2:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011cc4:	4c5e      	ldr	r4, [pc, #376]	; (8011e40 <HAL_GPIO_Init+0x1a4>)
 8011cc6:	1904      	adds	r4, r0, r4
 8011cc8:	1e65      	subs	r5, r4, #1
 8011cca:	41ac      	sbcs	r4, r5
 8011ccc:	3404      	adds	r4, #4
 8011cce:	46a1      	mov	r9, r4
 8011cd0:	e03b      	b.n	8011d4a <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8011cd2:	08dc      	lsrs	r4, r3, #3
 8011cd4:	00a4      	lsls	r4, r4, #2
 8011cd6:	1904      	adds	r4, r0, r4
 8011cd8:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011cda:	2507      	movs	r5, #7
 8011cdc:	401d      	ands	r5, r3
 8011cde:	00ad      	lsls	r5, r5, #2
 8011ce0:	220f      	movs	r2, #15
 8011ce2:	40aa      	lsls	r2, r5
 8011ce4:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011ce6:	690a      	ldr	r2, [r1, #16]
 8011ce8:	40aa      	lsls	r2, r5
 8011cea:	0015      	movs	r5, r2
 8011cec:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011cee:	6225      	str	r5, [r4, #32]
 8011cf0:	e035      	b.n	8011d5e <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011cf2:	2500      	movs	r5, #0
 8011cf4:	465a      	mov	r2, fp
 8011cf6:	4095      	lsls	r5, r2
 8011cf8:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011cfa:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011cfc:	4c51      	ldr	r4, [pc, #324]	; (8011e44 <HAL_GPIO_Init+0x1a8>)
 8011cfe:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011d00:	9a01      	ldr	r2, [sp, #4]
 8011d02:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011d04:	684a      	ldr	r2, [r1, #4]
 8011d06:	03d2      	lsls	r2, r2, #15
 8011d08:	d500      	bpl.n	8011d0c <HAL_GPIO_Init+0x70>
 8011d0a:	e086      	b.n	8011e1a <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011d0c:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011d0e:	4f4d      	ldr	r7, [pc, #308]	; (8011e44 <HAL_GPIO_Init+0x1a8>)
 8011d10:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8011d12:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011d14:	684a      	ldr	r2, [r1, #4]
 8011d16:	0392      	lsls	r2, r2, #14
 8011d18:	d500      	bpl.n	8011d1c <HAL_GPIO_Init+0x80>
 8011d1a:	e081      	b.n	8011e20 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011d1c:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011d1e:	4f49      	ldr	r7, [pc, #292]	; (8011e44 <HAL_GPIO_Init+0x1a8>)
 8011d20:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011d22:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011d24:	684a      	ldr	r2, [r1, #4]
 8011d26:	02d2      	lsls	r2, r2, #11
 8011d28:	d47d      	bmi.n	8011e26 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011d2a:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011d2c:	4f45      	ldr	r7, [pc, #276]	; (8011e44 <HAL_GPIO_Init+0x1a8>)
 8011d2e:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011d30:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011d32:	684a      	ldr	r2, [r1, #4]
 8011d34:	0292      	lsls	r2, r2, #10
 8011d36:	d479      	bmi.n	8011e2c <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011d38:	0022      	movs	r2, r4
 8011d3a:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011d3c:	4c41      	ldr	r4, [pc, #260]	; (8011e44 <HAL_GPIO_Init+0x1a8>)
 8011d3e:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011d40:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011d42:	680a      	ldr	r2, [r1, #0]
 8011d44:	0014      	movs	r4, r2
 8011d46:	40dc      	lsrs	r4, r3
 8011d48:	d073      	beq.n	8011e32 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011d4a:	0034      	movs	r4, r6
 8011d4c:	409c      	lsls	r4, r3
 8011d4e:	4022      	ands	r2, r4
 8011d50:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011d52:	d0f5      	beq.n	8011d40 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011d54:	684c      	ldr	r4, [r1, #4]
 8011d56:	4642      	mov	r2, r8
 8011d58:	4394      	bics	r4, r2
 8011d5a:	2c02      	cmp	r4, #2
 8011d5c:	d0b9      	beq.n	8011cd2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011d5e:	6804      	ldr	r4, [r0, #0]
 8011d60:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011d62:	4665      	mov	r5, ip
 8011d64:	40bd      	lsls	r5, r7
 8011d66:	43ed      	mvns	r5, r5
 8011d68:	402c      	ands	r4, r5
 8011d6a:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011d6c:	684c      	ldr	r4, [r1, #4]
 8011d6e:	4662      	mov	r2, ip
 8011d70:	4014      	ands	r4, r2
 8011d72:	40bc      	lsls	r4, r7
 8011d74:	465a      	mov	r2, fp
 8011d76:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011d78:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011d7a:	684c      	ldr	r4, [r1, #4]
 8011d7c:	4642      	mov	r2, r8
 8011d7e:	4394      	bics	r4, r2
 8011d80:	3c01      	subs	r4, #1
 8011d82:	2c01      	cmp	r4, #1
 8011d84:	d813      	bhi.n	8011dae <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011d86:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011d88:	402c      	ands	r4, r5
 8011d8a:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011d8c:	68cc      	ldr	r4, [r1, #12]
 8011d8e:	40bc      	lsls	r4, r7
 8011d90:	465a      	mov	r2, fp
 8011d92:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011d94:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011d96:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011d98:	0032      	movs	r2, r6
 8011d9a:	409a      	lsls	r2, r3
 8011d9c:	4394      	bics	r4, r2
 8011d9e:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011da0:	684a      	ldr	r2, [r1, #4]
 8011da2:	0914      	lsrs	r4, r2, #4
 8011da4:	4034      	ands	r4, r6
 8011da6:	409c      	lsls	r4, r3
 8011da8:	465a      	mov	r2, fp
 8011daa:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011dac:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011dae:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011db0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011db2:	688d      	ldr	r5, [r1, #8]
 8011db4:	40bd      	lsls	r5, r7
 8011db6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011db8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011dba:	684a      	ldr	r2, [r1, #4]
 8011dbc:	4654      	mov	r4, sl
 8011dbe:	4222      	tst	r2, r4
 8011dc0:	d0be      	beq.n	8011d40 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011dc2:	4c21      	ldr	r4, [pc, #132]	; (8011e48 <HAL_GPIO_Init+0x1ac>)
 8011dc4:	69a5      	ldr	r5, [r4, #24]
 8011dc6:	4335      	orrs	r5, r6
 8011dc8:	61a5      	str	r5, [r4, #24]
 8011dca:	69a4      	ldr	r4, [r4, #24]
 8011dcc:	4034      	ands	r4, r6
 8011dce:	9403      	str	r4, [sp, #12]
 8011dd0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011dd2:	089c      	lsrs	r4, r3, #2
 8011dd4:	00a4      	lsls	r4, r4, #2
 8011dd6:	4a1d      	ldr	r2, [pc, #116]	; (8011e4c <HAL_GPIO_Init+0x1b0>)
 8011dd8:	4693      	mov	fp, r2
 8011dda:	445c      	add	r4, fp
 8011ddc:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011dde:	4667      	mov	r7, ip
 8011de0:	401f      	ands	r7, r3
 8011de2:	00ba      	lsls	r2, r7, #2
 8011de4:	4693      	mov	fp, r2
 8011de6:	270f      	movs	r7, #15
 8011de8:	4097      	lsls	r7, r2
 8011dea:	43bd      	bics	r5, r7
 8011dec:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011dee:	2590      	movs	r5, #144	; 0x90
 8011df0:	05ed      	lsls	r5, r5, #23
 8011df2:	42a8      	cmp	r0, r5
 8011df4:	d100      	bne.n	8011df8 <HAL_GPIO_Init+0x15c>
 8011df6:	e77c      	b.n	8011cf2 <HAL_GPIO_Init+0x56>
 8011df8:	4d15      	ldr	r5, [pc, #84]	; (8011e50 <HAL_GPIO_Init+0x1b4>)
 8011dfa:	42a8      	cmp	r0, r5
 8011dfc:	d007      	beq.n	8011e0e <HAL_GPIO_Init+0x172>
 8011dfe:	4d15      	ldr	r5, [pc, #84]	; (8011e54 <HAL_GPIO_Init+0x1b8>)
 8011e00:	42a8      	cmp	r0, r5
 8011e02:	d006      	beq.n	8011e12 <HAL_GPIO_Init+0x176>
 8011e04:	4d14      	ldr	r5, [pc, #80]	; (8011e58 <HAL_GPIO_Init+0x1bc>)
 8011e06:	42a8      	cmp	r0, r5
 8011e08:	d005      	beq.n	8011e16 <HAL_GPIO_Init+0x17a>
 8011e0a:	464d      	mov	r5, r9
 8011e0c:	e772      	b.n	8011cf4 <HAL_GPIO_Init+0x58>
 8011e0e:	0035      	movs	r5, r6
 8011e10:	e770      	b.n	8011cf4 <HAL_GPIO_Init+0x58>
 8011e12:	2502      	movs	r5, #2
 8011e14:	e76e      	b.n	8011cf4 <HAL_GPIO_Init+0x58>
 8011e16:	4665      	mov	r5, ip
 8011e18:	e76c      	b.n	8011cf4 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011e1a:	9a01      	ldr	r2, [sp, #4]
 8011e1c:	4314      	orrs	r4, r2
 8011e1e:	e776      	b.n	8011d0e <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011e20:	9a01      	ldr	r2, [sp, #4]
 8011e22:	4314      	orrs	r4, r2
 8011e24:	e77b      	b.n	8011d1e <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011e26:	9a01      	ldr	r2, [sp, #4]
 8011e28:	4314      	orrs	r4, r2
 8011e2a:	e77f      	b.n	8011d2c <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011e2c:	9a01      	ldr	r2, [sp, #4]
 8011e2e:	4322      	orrs	r2, r4
 8011e30:	e784      	b.n	8011d3c <HAL_GPIO_Init+0xa0>
  } 
}
 8011e32:	b005      	add	sp, #20
 8011e34:	bc3c      	pop	{r2, r3, r4, r5}
 8011e36:	4690      	mov	r8, r2
 8011e38:	4699      	mov	r9, r3
 8011e3a:	46a2      	mov	sl, r4
 8011e3c:	46ab      	mov	fp, r5
 8011e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e40:	b7fff000 	.word	0xb7fff000
 8011e44:	40010400 	.word	0x40010400
 8011e48:	40021000 	.word	0x40021000
 8011e4c:	40010000 	.word	0x40010000
 8011e50:	48000400 	.word	0x48000400
 8011e54:	48000800 	.word	0x48000800
 8011e58:	48000c00 	.word	0x48000c00

08011e5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5e:	46de      	mov	lr, fp
 8011e60:	4657      	mov	r7, sl
 8011e62:	464e      	mov	r6, r9
 8011e64:	4645      	mov	r5, r8
 8011e66:	b5e0      	push	{r5, r6, r7, lr}
 8011e68:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011e6a:	2900      	cmp	r1, #0
 8011e6c:	d071      	beq.n	8011f52 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011e6e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011e70:	2201      	movs	r2, #1
 8011e72:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011e74:	3202      	adds	r2, #2
 8011e76:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011e78:	3204      	adds	r2, #4
 8011e7a:	4693      	mov	fp, r2
 8011e7c:	3208      	adds	r2, #8
 8011e7e:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011e80:	4a37      	ldr	r2, [pc, #220]	; (8011f60 <HAL_GPIO_DeInit+0x104>)
 8011e82:	1882      	adds	r2, r0, r2
 8011e84:	1e54      	subs	r4, r2, #1
 8011e86:	41a2      	sbcs	r2, r4
 8011e88:	3204      	adds	r2, #4
 8011e8a:	9201      	str	r2, [sp, #4]
 8011e8c:	9100      	str	r1, [sp, #0]
 8011e8e:	e009      	b.n	8011ea4 <HAL_GPIO_DeInit+0x48>
 8011e90:	2100      	movs	r1, #0
 8011e92:	4689      	mov	r9, r1
 8011e94:	4649      	mov	r1, r9
 8011e96:	40a9      	lsls	r1, r5
 8011e98:	42b1      	cmp	r1, r6
 8011e9a:	d048      	beq.n	8011f2e <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011e9c:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011e9e:	9a00      	ldr	r2, [sp, #0]
 8011ea0:	40da      	lsrs	r2, r3
 8011ea2:	d056      	beq.n	8011f52 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011ea4:	4662      	mov	r2, ip
 8011ea6:	409a      	lsls	r2, r3
 8011ea8:	9900      	ldr	r1, [sp, #0]
 8011eaa:	400a      	ands	r2, r1
    if (iocurrent)
 8011eac:	d0f6      	beq.n	8011e9c <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011eae:	6804      	ldr	r4, [r0, #0]
 8011eb0:	005d      	lsls	r5, r3, #1
 8011eb2:	4646      	mov	r6, r8
 8011eb4:	40ae      	lsls	r6, r5
 8011eb6:	43f5      	mvns	r5, r6
 8011eb8:	402c      	ands	r4, r5
 8011eba:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011ebc:	08dc      	lsrs	r4, r3, #3
 8011ebe:	00a4      	lsls	r4, r4, #2
 8011ec0:	1904      	adds	r4, r0, r4
 8011ec2:	6a26      	ldr	r6, [r4, #32]
 8011ec4:	465f      	mov	r7, fp
 8011ec6:	401f      	ands	r7, r3
 8011ec8:	00bf      	lsls	r7, r7, #2
 8011eca:	4651      	mov	r1, sl
 8011ecc:	40b9      	lsls	r1, r7
 8011ece:	438e      	bics	r6, r1
 8011ed0:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011ed2:	6884      	ldr	r4, [r0, #8]
 8011ed4:	402c      	ands	r4, r5
 8011ed6:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011ed8:	6844      	ldr	r4, [r0, #4]
 8011eda:	4666      	mov	r6, ip
 8011edc:	409e      	lsls	r6, r3
 8011ede:	43b4      	bics	r4, r6
 8011ee0:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011ee2:	68c4      	ldr	r4, [r0, #12]
 8011ee4:	4025      	ands	r5, r4
 8011ee6:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011ee8:	089c      	lsrs	r4, r3, #2
 8011eea:	00a4      	lsls	r4, r4, #2
 8011eec:	491d      	ldr	r1, [pc, #116]	; (8011f64 <HAL_GPIO_DeInit+0x108>)
 8011eee:	4689      	mov	r9, r1
 8011ef0:	444c      	add	r4, r9
 8011ef2:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011ef4:	4645      	mov	r5, r8
 8011ef6:	401d      	ands	r5, r3
 8011ef8:	00ad      	lsls	r5, r5, #2
 8011efa:	4657      	mov	r7, sl
 8011efc:	40af      	lsls	r7, r5
 8011efe:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011f00:	2190      	movs	r1, #144	; 0x90
 8011f02:	05c9      	lsls	r1, r1, #23
 8011f04:	4288      	cmp	r0, r1
 8011f06:	d0c3      	beq.n	8011e90 <HAL_GPIO_DeInit+0x34>
 8011f08:	4917      	ldr	r1, [pc, #92]	; (8011f68 <HAL_GPIO_DeInit+0x10c>)
 8011f0a:	4288      	cmp	r0, r1
 8011f0c:	d008      	beq.n	8011f20 <HAL_GPIO_DeInit+0xc4>
 8011f0e:	4917      	ldr	r1, [pc, #92]	; (8011f6c <HAL_GPIO_DeInit+0x110>)
 8011f10:	4288      	cmp	r0, r1
 8011f12:	d007      	beq.n	8011f24 <HAL_GPIO_DeInit+0xc8>
 8011f14:	4916      	ldr	r1, [pc, #88]	; (8011f70 <HAL_GPIO_DeInit+0x114>)
 8011f16:	4288      	cmp	r0, r1
 8011f18:	d007      	beq.n	8011f2a <HAL_GPIO_DeInit+0xce>
 8011f1a:	9901      	ldr	r1, [sp, #4]
 8011f1c:	4689      	mov	r9, r1
 8011f1e:	e7b9      	b.n	8011e94 <HAL_GPIO_DeInit+0x38>
 8011f20:	46e1      	mov	r9, ip
 8011f22:	e7b7      	b.n	8011e94 <HAL_GPIO_DeInit+0x38>
 8011f24:	2102      	movs	r1, #2
 8011f26:	4689      	mov	r9, r1
 8011f28:	e7b4      	b.n	8011e94 <HAL_GPIO_DeInit+0x38>
 8011f2a:	46c1      	mov	r9, r8
 8011f2c:	e7b2      	b.n	8011e94 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011f2e:	68a5      	ldr	r5, [r4, #8]
 8011f30:	43bd      	bics	r5, r7
 8011f32:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011f34:	4c0f      	ldr	r4, [pc, #60]	; (8011f74 <HAL_GPIO_DeInit+0x118>)
 8011f36:	6825      	ldr	r5, [r4, #0]
 8011f38:	43d2      	mvns	r2, r2
 8011f3a:	4015      	ands	r5, r2
 8011f3c:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011f3e:	6865      	ldr	r5, [r4, #4]
 8011f40:	4015      	ands	r5, r2
 8011f42:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011f44:	68a5      	ldr	r5, [r4, #8]
 8011f46:	4015      	ands	r5, r2
 8011f48:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011f4a:	68e5      	ldr	r5, [r4, #12]
 8011f4c:	402a      	ands	r2, r5
 8011f4e:	60e2      	str	r2, [r4, #12]
 8011f50:	e7a4      	b.n	8011e9c <HAL_GPIO_DeInit+0x40>
  }
}
 8011f52:	b003      	add	sp, #12
 8011f54:	bc3c      	pop	{r2, r3, r4, r5}
 8011f56:	4690      	mov	r8, r2
 8011f58:	4699      	mov	r9, r3
 8011f5a:	46a2      	mov	sl, r4
 8011f5c:	46ab      	mov	fp, r5
 8011f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f60:	b7fff000 	.word	0xb7fff000
 8011f64:	40010000 	.word	0x40010000
 8011f68:	48000400 	.word	0x48000400
 8011f6c:	48000800 	.word	0x48000800
 8011f70:	48000c00 	.word	0x48000c00
 8011f74:	40010400 	.word	0x40010400

08011f78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011f78:	6900      	ldr	r0, [r0, #16]
 8011f7a:	4008      	ands	r0, r1
 8011f7c:	1e41      	subs	r1, r0, #1
 8011f7e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011f80:	b2c0      	uxtb	r0, r0
  }
 8011f82:	4770      	bx	lr

08011f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	d101      	bne.n	8011f8c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011f88:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011f8a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011f8c:	6181      	str	r1, [r0, #24]
 8011f8e:	e7fc      	b.n	8011f8a <HAL_GPIO_WritePin+0x6>

08011f90 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011f90:	6943      	ldr	r3, [r0, #20]
 8011f92:	4059      	eors	r1, r3
 8011f94:	6141      	str	r1, [r0, #20]
}
 8011f96:	4770      	bx	lr

08011f98 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011f98:	4770      	bx	lr
	...

08011f9c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011f9c:	4a03      	ldr	r2, [pc, #12]	; (8011fac <HAL_PWR_EnableBkUpAccess+0x10>)
 8011f9e:	6811      	ldr	r1, [r2, #0]
 8011fa0:	2380      	movs	r3, #128	; 0x80
 8011fa2:	005b      	lsls	r3, r3, #1
 8011fa4:	430b      	orrs	r3, r1
 8011fa6:	6013      	str	r3, [r2, #0]
}
 8011fa8:	4770      	bx	lr
 8011faa:	46c0      	nop			; (mov r8, r8)
 8011fac:	40007000 	.word	0x40007000

08011fb0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fb2:	46c6      	mov	lr, r8
 8011fb4:	b500      	push	{lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011fba:	6803      	ldr	r3, [r0, #0]
 8011fbc:	07db      	lsls	r3, r3, #31
 8011fbe:	d538      	bpl.n	8012032 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011fc0:	4bbd      	ldr	r3, [pc, #756]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	230c      	movs	r3, #12
 8011fc6:	4013      	ands	r3, r2
 8011fc8:	2b04      	cmp	r3, #4
 8011fca:	d02a      	beq.n	8012022 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011fcc:	4bba      	ldr	r3, [pc, #744]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	230c      	movs	r3, #12
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	2b08      	cmp	r3, #8
 8011fd6:	d108      	bne.n	8011fea <HAL_RCC_OscConfig+0x3a>
 8011fd8:	4bb7      	ldr	r3, [pc, #732]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	22c0      	movs	r2, #192	; 0xc0
 8011fde:	0252      	lsls	r2, r2, #9
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	2280      	movs	r2, #128	; 0x80
 8011fe4:	0252      	lsls	r2, r2, #9
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d01b      	beq.n	8012022 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011fea:	4bb3      	ldr	r3, [pc, #716]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	49b3      	ldr	r1, [pc, #716]	; (80122bc <HAL_RCC_OscConfig+0x30c>)
 8011ff0:	400a      	ands	r2, r1
 8011ff2:	601a      	str	r2, [r3, #0]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	49b2      	ldr	r1, [pc, #712]	; (80122c0 <HAL_RCC_OscConfig+0x310>)
 8011ff8:	400a      	ands	r2, r1
 8011ffa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ffc:	f7fe fb0e 	bl	801061c <HAL_GetTick>
 8012000:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012002:	4ead      	ldr	r6, [pc, #692]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012004:	2580      	movs	r5, #128	; 0x80
 8012006:	02ad      	lsls	r5, r5, #10
 8012008:	6833      	ldr	r3, [r6, #0]
 801200a:	422b      	tst	r3, r5
 801200c:	d039      	beq.n	8012082 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801200e:	f7fe fb05 	bl	801061c <HAL_GetTick>
 8012012:	1bc0      	subs	r0, r0, r7
 8012014:	2864      	cmp	r0, #100	; 0x64
 8012016:	d9f7      	bls.n	8012008 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8012018:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801201a:	b002      	add	sp, #8
 801201c:	bc04      	pop	{r2}
 801201e:	4690      	mov	r8, r2
 8012020:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012022:	4ba5      	ldr	r3, [pc, #660]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	039b      	lsls	r3, r3, #14
 8012028:	d503      	bpl.n	8012032 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 801202a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801202c:	6863      	ldr	r3, [r4, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0f3      	beq.n	801201a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	079b      	lsls	r3, r3, #30
 8012036:	d400      	bmi.n	801203a <HAL_RCC_OscConfig+0x8a>
 8012038:	e08d      	b.n	8012156 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801203a:	4b9f      	ldr	r3, [pc, #636]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	220c      	movs	r2, #12
 8012040:	421a      	tst	r2, r3
 8012042:	d077      	beq.n	8012134 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012044:	4b9c      	ldr	r3, [pc, #624]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012046:	685a      	ldr	r2, [r3, #4]
 8012048:	230c      	movs	r3, #12
 801204a:	4013      	ands	r3, r2
 801204c:	2b08      	cmp	r3, #8
 801204e:	d068      	beq.n	8012122 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012050:	68e3      	ldr	r3, [r4, #12]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d100      	bne.n	8012058 <HAL_RCC_OscConfig+0xa8>
 8012056:	e0a1      	b.n	801219c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012058:	4a97      	ldr	r2, [pc, #604]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801205a:	6813      	ldr	r3, [r2, #0]
 801205c:	2101      	movs	r1, #1
 801205e:	430b      	orrs	r3, r1
 8012060:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012062:	f7fe fadb 	bl	801061c <HAL_GetTick>
 8012066:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012068:	4e93      	ldr	r6, [pc, #588]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801206a:	2502      	movs	r5, #2
 801206c:	6833      	ldr	r3, [r6, #0]
 801206e:	421d      	tst	r5, r3
 8012070:	d000      	beq.n	8012074 <HAL_RCC_OscConfig+0xc4>
 8012072:	e08a      	b.n	801218a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012074:	f7fe fad2 	bl	801061c <HAL_GetTick>
 8012078:	1bc0      	subs	r0, r0, r7
 801207a:	2864      	cmp	r0, #100	; 0x64
 801207c:	d9f6      	bls.n	801206c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801207e:	2003      	movs	r0, #3
 8012080:	e7cb      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012082:	6863      	ldr	r3, [r4, #4]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d00b      	beq.n	80120a0 <HAL_RCC_OscConfig+0xf0>
 8012088:	2b00      	cmp	r3, #0
 801208a:	d122      	bne.n	80120d2 <HAL_RCC_OscConfig+0x122>
 801208c:	4b8a      	ldr	r3, [pc, #552]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	498a      	ldr	r1, [pc, #552]	; (80122bc <HAL_RCC_OscConfig+0x30c>)
 8012092:	400a      	ands	r2, r1
 8012094:	601a      	str	r2, [r3, #0]
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	4989      	ldr	r1, [pc, #548]	; (80122c0 <HAL_RCC_OscConfig+0x310>)
 801209a:	400a      	ands	r2, r1
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	e005      	b.n	80120ac <HAL_RCC_OscConfig+0xfc>
 80120a0:	4a85      	ldr	r2, [pc, #532]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80120a2:	6811      	ldr	r1, [r2, #0]
 80120a4:	2380      	movs	r3, #128	; 0x80
 80120a6:	025b      	lsls	r3, r3, #9
 80120a8:	430b      	orrs	r3, r1
 80120aa:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80120ac:	6863      	ldr	r3, [r4, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d027      	beq.n	8012102 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80120b2:	f7fe fab3 	bl	801061c <HAL_GetTick>
 80120b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80120b8:	4e7f      	ldr	r6, [pc, #508]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80120ba:	2580      	movs	r5, #128	; 0x80
 80120bc:	02ad      	lsls	r5, r5, #10
 80120be:	6833      	ldr	r3, [r6, #0]
 80120c0:	422b      	tst	r3, r5
 80120c2:	d1b6      	bne.n	8012032 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120c4:	f7fe faaa 	bl	801061c <HAL_GetTick>
 80120c8:	1bc0      	subs	r0, r0, r7
 80120ca:	2864      	cmp	r0, #100	; 0x64
 80120cc:	d9f7      	bls.n	80120be <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80120ce:	2003      	movs	r0, #3
 80120d0:	e7a3      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80120d2:	2b05      	cmp	r3, #5
 80120d4:	d009      	beq.n	80120ea <HAL_RCC_OscConfig+0x13a>
 80120d6:	4b78      	ldr	r3, [pc, #480]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	4978      	ldr	r1, [pc, #480]	; (80122bc <HAL_RCC_OscConfig+0x30c>)
 80120dc:	400a      	ands	r2, r1
 80120de:	601a      	str	r2, [r3, #0]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	4977      	ldr	r1, [pc, #476]	; (80122c0 <HAL_RCC_OscConfig+0x310>)
 80120e4:	400a      	ands	r2, r1
 80120e6:	601a      	str	r2, [r3, #0]
 80120e8:	e7e0      	b.n	80120ac <HAL_RCC_OscConfig+0xfc>
 80120ea:	4b73      	ldr	r3, [pc, #460]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80120ec:	6819      	ldr	r1, [r3, #0]
 80120ee:	2280      	movs	r2, #128	; 0x80
 80120f0:	02d2      	lsls	r2, r2, #11
 80120f2:	430a      	orrs	r2, r1
 80120f4:	601a      	str	r2, [r3, #0]
 80120f6:	6819      	ldr	r1, [r3, #0]
 80120f8:	2280      	movs	r2, #128	; 0x80
 80120fa:	0252      	lsls	r2, r2, #9
 80120fc:	430a      	orrs	r2, r1
 80120fe:	601a      	str	r2, [r3, #0]
 8012100:	e7d4      	b.n	80120ac <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8012102:	f7fe fa8b 	bl	801061c <HAL_GetTick>
 8012106:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012108:	4e6b      	ldr	r6, [pc, #428]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801210a:	2580      	movs	r5, #128	; 0x80
 801210c:	02ad      	lsls	r5, r5, #10
 801210e:	6833      	ldr	r3, [r6, #0]
 8012110:	422b      	tst	r3, r5
 8012112:	d08e      	beq.n	8012032 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012114:	f7fe fa82 	bl	801061c <HAL_GetTick>
 8012118:	1bc0      	subs	r0, r0, r7
 801211a:	2864      	cmp	r0, #100	; 0x64
 801211c:	d9f7      	bls.n	801210e <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 801211e:	2003      	movs	r0, #3
 8012120:	e77b      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012122:	4b65      	ldr	r3, [pc, #404]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	22c0      	movs	r2, #192	; 0xc0
 8012128:	0252      	lsls	r2, r2, #9
 801212a:	4013      	ands	r3, r2
 801212c:	2280      	movs	r2, #128	; 0x80
 801212e:	0212      	lsls	r2, r2, #8
 8012130:	4293      	cmp	r3, r2
 8012132:	d18d      	bne.n	8012050 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012134:	4b60      	ldr	r3, [pc, #384]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	079b      	lsls	r3, r3, #30
 801213a:	d504      	bpl.n	8012146 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 801213c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801213e:	68e3      	ldr	r3, [r4, #12]
 8012140:	2b01      	cmp	r3, #1
 8012142:	d000      	beq.n	8012146 <HAL_RCC_OscConfig+0x196>
 8012144:	e769      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012146:	495c      	ldr	r1, [pc, #368]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012148:	680a      	ldr	r2, [r1, #0]
 801214a:	6923      	ldr	r3, [r4, #16]
 801214c:	00db      	lsls	r3, r3, #3
 801214e:	20f8      	movs	r0, #248	; 0xf8
 8012150:	4382      	bics	r2, r0
 8012152:	4313      	orrs	r3, r2
 8012154:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012156:	6823      	ldr	r3, [r4, #0]
 8012158:	071b      	lsls	r3, r3, #28
 801215a:	d547      	bpl.n	80121ec <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801215c:	6a23      	ldr	r3, [r4, #32]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d030      	beq.n	80121c4 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012162:	4a55      	ldr	r2, [pc, #340]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012164:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012166:	2101      	movs	r1, #1
 8012168:	430b      	orrs	r3, r1
 801216a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801216c:	f7fe fa56 	bl	801061c <HAL_GetTick>
 8012170:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012172:	4e51      	ldr	r6, [pc, #324]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012174:	2502      	movs	r5, #2
 8012176:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012178:	421d      	tst	r5, r3
 801217a:	d137      	bne.n	80121ec <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801217c:	f7fe fa4e 	bl	801061c <HAL_GetTick>
 8012180:	1bc0      	subs	r0, r0, r7
 8012182:	2864      	cmp	r0, #100	; 0x64
 8012184:	d9f7      	bls.n	8012176 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012186:	2003      	movs	r0, #3
 8012188:	e747      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801218a:	494b      	ldr	r1, [pc, #300]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801218c:	680a      	ldr	r2, [r1, #0]
 801218e:	6923      	ldr	r3, [r4, #16]
 8012190:	00db      	lsls	r3, r3, #3
 8012192:	20f8      	movs	r0, #248	; 0xf8
 8012194:	4382      	bics	r2, r0
 8012196:	4313      	orrs	r3, r2
 8012198:	600b      	str	r3, [r1, #0]
 801219a:	e7dc      	b.n	8012156 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801219c:	4a46      	ldr	r2, [pc, #280]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801219e:	6813      	ldr	r3, [r2, #0]
 80121a0:	2101      	movs	r1, #1
 80121a2:	438b      	bics	r3, r1
 80121a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80121a6:	f7fe fa39 	bl	801061c <HAL_GetTick>
 80121aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80121ac:	4e42      	ldr	r6, [pc, #264]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80121ae:	2502      	movs	r5, #2
 80121b0:	6833      	ldr	r3, [r6, #0]
 80121b2:	421d      	tst	r5, r3
 80121b4:	d0cf      	beq.n	8012156 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80121b6:	f7fe fa31 	bl	801061c <HAL_GetTick>
 80121ba:	1bc0      	subs	r0, r0, r7
 80121bc:	2864      	cmp	r0, #100	; 0x64
 80121be:	d9f7      	bls.n	80121b0 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80121c0:	2003      	movs	r0, #3
 80121c2:	e72a      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80121c4:	4a3c      	ldr	r2, [pc, #240]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80121c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80121c8:	2101      	movs	r1, #1
 80121ca:	438b      	bics	r3, r1
 80121cc:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80121ce:	f7fe fa25 	bl	801061c <HAL_GetTick>
 80121d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80121d4:	4e38      	ldr	r6, [pc, #224]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 80121d6:	2502      	movs	r5, #2
 80121d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80121da:	421d      	tst	r5, r3
 80121dc:	d006      	beq.n	80121ec <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80121de:	f7fe fa1d 	bl	801061c <HAL_GetTick>
 80121e2:	1bc0      	subs	r0, r0, r7
 80121e4:	2864      	cmp	r0, #100	; 0x64
 80121e6:	d9f7      	bls.n	80121d8 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80121e8:	2003      	movs	r0, #3
 80121ea:	e716      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80121ec:	6823      	ldr	r3, [r4, #0]
 80121ee:	075b      	lsls	r3, r3, #29
 80121f0:	d442      	bmi.n	8012278 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80121f2:	6823      	ldr	r3, [r4, #0]
 80121f4:	06db      	lsls	r3, r3, #27
 80121f6:	d512      	bpl.n	801221e <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80121f8:	6963      	ldr	r3, [r4, #20]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d100      	bne.n	8012200 <HAL_RCC_OscConfig+0x250>
 80121fe:	e0ce      	b.n	801239e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012200:	3305      	adds	r3, #5
 8012202:	d000      	beq.n	8012206 <HAL_RCC_OscConfig+0x256>
 8012204:	e0ec      	b.n	80123e0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012206:	4a2c      	ldr	r2, [pc, #176]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012208:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801220a:	2104      	movs	r1, #4
 801220c:	438b      	bics	r3, r1
 801220e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012210:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012212:	69a3      	ldr	r3, [r4, #24]
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	20f8      	movs	r0, #248	; 0xf8
 8012218:	4381      	bics	r1, r0
 801221a:	430b      	orrs	r3, r1
 801221c:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	069b      	lsls	r3, r3, #26
 8012222:	d400      	bmi.n	8012226 <HAL_RCC_OscConfig+0x276>
 8012224:	e106      	b.n	8012434 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012226:	4b24      	ldr	r3, [pc, #144]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012228:	685a      	ldr	r2, [r3, #4]
 801222a:	230c      	movs	r3, #12
 801222c:	4013      	ands	r3, r2
 801222e:	2b0c      	cmp	r3, #12
 8012230:	d100      	bne.n	8012234 <HAL_RCC_OscConfig+0x284>
 8012232:	e0f6      	b.n	8012422 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012234:	4b20      	ldr	r3, [pc, #128]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 8012236:	685a      	ldr	r2, [r3, #4]
 8012238:	230c      	movs	r3, #12
 801223a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801223c:	2b08      	cmp	r3, #8
 801223e:	d100      	bne.n	8012242 <HAL_RCC_OscConfig+0x292>
 8012240:	e0e7      	b.n	8012412 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012242:	69e3      	ldr	r3, [r4, #28]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d100      	bne.n	801224a <HAL_RCC_OscConfig+0x29a>
 8012248:	e116      	b.n	8012478 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801224a:	4a1b      	ldr	r2, [pc, #108]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801224c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801224e:	2380      	movs	r3, #128	; 0x80
 8012250:	025b      	lsls	r3, r3, #9
 8012252:	430b      	orrs	r3, r1
 8012254:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012256:	f7fe f9e1 	bl	801061c <HAL_GetTick>
 801225a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801225c:	4e16      	ldr	r6, [pc, #88]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801225e:	2580      	movs	r5, #128	; 0x80
 8012260:	026d      	lsls	r5, r5, #9
 8012262:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012264:	422b      	tst	r3, r5
 8012266:	d000      	beq.n	801226a <HAL_RCC_OscConfig+0x2ba>
 8012268:	e0e4      	b.n	8012434 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801226a:	f7fe f9d7 	bl	801061c <HAL_GetTick>
 801226e:	1bc0      	subs	r0, r0, r7
 8012270:	2864      	cmp	r0, #100	; 0x64
 8012272:	d9f6      	bls.n	8012262 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012274:	2003      	movs	r0, #3
 8012276:	e6d0      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012278:	4a0f      	ldr	r2, [pc, #60]	; (80122b8 <HAL_RCC_OscConfig+0x308>)
 801227a:	69d1      	ldr	r1, [r2, #28]
 801227c:	2080      	movs	r0, #128	; 0x80
 801227e:	0540      	lsls	r0, r0, #21
 8012280:	4301      	orrs	r1, r0
 8012282:	61d1      	str	r1, [r2, #28]
 8012284:	69d3      	ldr	r3, [r2, #28]
 8012286:	4003      	ands	r3, r0
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801228c:	4a0d      	ldr	r2, [pc, #52]	; (80122c4 <HAL_RCC_OscConfig+0x314>)
 801228e:	6811      	ldr	r1, [r2, #0]
 8012290:	2380      	movs	r3, #128	; 0x80
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	430b      	orrs	r3, r1
 8012296:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012298:	f7fe f9c0 	bl	801061c <HAL_GetTick>
 801229c:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801229e:	4e09      	ldr	r6, [pc, #36]	; (80122c4 <HAL_RCC_OscConfig+0x314>)
 80122a0:	2580      	movs	r5, #128	; 0x80
 80122a2:	006d      	lsls	r5, r5, #1
 80122a4:	6833      	ldr	r3, [r6, #0]
 80122a6:	422b      	tst	r3, r5
 80122a8:	d10e      	bne.n	80122c8 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80122aa:	f7fe f9b7 	bl	801061c <HAL_GetTick>
 80122ae:	1bc0      	subs	r0, r0, r7
 80122b0:	2864      	cmp	r0, #100	; 0x64
 80122b2:	d9f7      	bls.n	80122a4 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80122b4:	2003      	movs	r0, #3
 80122b6:	e6b0      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
 80122b8:	40021000 	.word	0x40021000
 80122bc:	fffeffff 	.word	0xfffeffff
 80122c0:	fffbffff 	.word	0xfffbffff
 80122c4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80122c8:	4b95      	ldr	r3, [pc, #596]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80122ca:	6a1a      	ldr	r2, [r3, #32]
 80122cc:	2101      	movs	r1, #1
 80122ce:	438a      	bics	r2, r1
 80122d0:	621a      	str	r2, [r3, #32]
 80122d2:	6a1a      	ldr	r2, [r3, #32]
 80122d4:	3103      	adds	r1, #3
 80122d6:	438a      	bics	r2, r1
 80122d8:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80122da:	f7fe f99f 	bl	801061c <HAL_GetTick>
 80122de:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80122e0:	4e8f      	ldr	r6, [pc, #572]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80122e2:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122e4:	4f8f      	ldr	r7, [pc, #572]	; (8012524 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80122e6:	6a33      	ldr	r3, [r6, #32]
 80122e8:	421d      	tst	r5, r3
 80122ea:	d007      	beq.n	80122fc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122ec:	f7fe f996 	bl	801061c <HAL_GetTick>
 80122f0:	4643      	mov	r3, r8
 80122f2:	1ac0      	subs	r0, r0, r3
 80122f4:	42b8      	cmp	r0, r7
 80122f6:	d9f6      	bls.n	80122e6 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80122f8:	2003      	movs	r0, #3
 80122fa:	e68e      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80122fc:	68a3      	ldr	r3, [r4, #8]
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d00b      	beq.n	801231a <HAL_RCC_OscConfig+0x36a>
 8012302:	2b00      	cmp	r3, #0
 8012304:	d123      	bne.n	801234e <HAL_RCC_OscConfig+0x39e>
 8012306:	4b86      	ldr	r3, [pc, #536]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012308:	6a1a      	ldr	r2, [r3, #32]
 801230a:	2101      	movs	r1, #1
 801230c:	438a      	bics	r2, r1
 801230e:	621a      	str	r2, [r3, #32]
 8012310:	6a1a      	ldr	r2, [r3, #32]
 8012312:	3103      	adds	r1, #3
 8012314:	438a      	bics	r2, r1
 8012316:	621a      	str	r2, [r3, #32]
 8012318:	e004      	b.n	8012324 <HAL_RCC_OscConfig+0x374>
 801231a:	4a81      	ldr	r2, [pc, #516]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 801231c:	6a13      	ldr	r3, [r2, #32]
 801231e:	2101      	movs	r1, #1
 8012320:	430b      	orrs	r3, r1
 8012322:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012324:	68a3      	ldr	r3, [r4, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d027      	beq.n	801237a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801232a:	f7fe f977 	bl	801061c <HAL_GetTick>
 801232e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012330:	4e7b      	ldr	r6, [pc, #492]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012332:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012334:	4f7b      	ldr	r7, [pc, #492]	; (8012524 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012336:	6a33      	ldr	r3, [r6, #32]
 8012338:	421d      	tst	r5, r3
 801233a:	d000      	beq.n	801233e <HAL_RCC_OscConfig+0x38e>
 801233c:	e759      	b.n	80121f2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801233e:	f7fe f96d 	bl	801061c <HAL_GetTick>
 8012342:	4643      	mov	r3, r8
 8012344:	1ac0      	subs	r0, r0, r3
 8012346:	42b8      	cmp	r0, r7
 8012348:	d9f5      	bls.n	8012336 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801234a:	2003      	movs	r0, #3
 801234c:	e665      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801234e:	2b05      	cmp	r3, #5
 8012350:	d009      	beq.n	8012366 <HAL_RCC_OscConfig+0x3b6>
 8012352:	4b73      	ldr	r3, [pc, #460]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012354:	6a1a      	ldr	r2, [r3, #32]
 8012356:	2101      	movs	r1, #1
 8012358:	438a      	bics	r2, r1
 801235a:	621a      	str	r2, [r3, #32]
 801235c:	6a1a      	ldr	r2, [r3, #32]
 801235e:	3103      	adds	r1, #3
 8012360:	438a      	bics	r2, r1
 8012362:	621a      	str	r2, [r3, #32]
 8012364:	e7de      	b.n	8012324 <HAL_RCC_OscConfig+0x374>
 8012366:	4b6e      	ldr	r3, [pc, #440]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012368:	6a1a      	ldr	r2, [r3, #32]
 801236a:	2104      	movs	r1, #4
 801236c:	430a      	orrs	r2, r1
 801236e:	621a      	str	r2, [r3, #32]
 8012370:	6a1a      	ldr	r2, [r3, #32]
 8012372:	3903      	subs	r1, #3
 8012374:	430a      	orrs	r2, r1
 8012376:	621a      	str	r2, [r3, #32]
 8012378:	e7d4      	b.n	8012324 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801237a:	f7fe f94f 	bl	801061c <HAL_GetTick>
 801237e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012380:	4e67      	ldr	r6, [pc, #412]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012382:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012384:	4f67      	ldr	r7, [pc, #412]	; (8012524 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012386:	6a33      	ldr	r3, [r6, #32]
 8012388:	421d      	tst	r5, r3
 801238a:	d100      	bne.n	801238e <HAL_RCC_OscConfig+0x3de>
 801238c:	e731      	b.n	80121f2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801238e:	f7fe f945 	bl	801061c <HAL_GetTick>
 8012392:	4643      	mov	r3, r8
 8012394:	1ac0      	subs	r0, r0, r3
 8012396:	42b8      	cmp	r0, r7
 8012398:	d9f5      	bls.n	8012386 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801239a:	2003      	movs	r0, #3
 801239c:	e63d      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801239e:	4b60      	ldr	r3, [pc, #384]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80123a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123a2:	2104      	movs	r1, #4
 80123a4:	430a      	orrs	r2, r1
 80123a6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80123a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123aa:	3903      	subs	r1, #3
 80123ac:	430a      	orrs	r2, r1
 80123ae:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80123b0:	f7fe f934 	bl	801061c <HAL_GetTick>
 80123b4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80123b6:	4e5a      	ldr	r6, [pc, #360]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80123b8:	2502      	movs	r5, #2
 80123ba:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80123bc:	421d      	tst	r5, r3
 80123be:	d106      	bne.n	80123ce <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80123c0:	f7fe f92c 	bl	801061c <HAL_GetTick>
 80123c4:	1bc0      	subs	r0, r0, r7
 80123c6:	2864      	cmp	r0, #100	; 0x64
 80123c8:	d9f7      	bls.n	80123ba <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80123ca:	2003      	movs	r0, #3
 80123cc:	e625      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80123ce:	4954      	ldr	r1, [pc, #336]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80123d0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80123d2:	69a3      	ldr	r3, [r4, #24]
 80123d4:	00db      	lsls	r3, r3, #3
 80123d6:	20f8      	movs	r0, #248	; 0xf8
 80123d8:	4382      	bics	r2, r0
 80123da:	4313      	orrs	r3, r2
 80123dc:	634b      	str	r3, [r1, #52]	; 0x34
 80123de:	e71e      	b.n	801221e <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80123e0:	4b4f      	ldr	r3, [pc, #316]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80123e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123e4:	2104      	movs	r1, #4
 80123e6:	430a      	orrs	r2, r1
 80123e8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80123ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123ec:	3903      	subs	r1, #3
 80123ee:	438a      	bics	r2, r1
 80123f0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80123f2:	f7fe f913 	bl	801061c <HAL_GetTick>
 80123f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80123f8:	4e49      	ldr	r6, [pc, #292]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80123fa:	2502      	movs	r5, #2
 80123fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80123fe:	421d      	tst	r5, r3
 8012400:	d100      	bne.n	8012404 <HAL_RCC_OscConfig+0x454>
 8012402:	e70c      	b.n	801221e <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012404:	f7fe f90a 	bl	801061c <HAL_GetTick>
 8012408:	1bc0      	subs	r0, r0, r7
 801240a:	2864      	cmp	r0, #100	; 0x64
 801240c:	d9f6      	bls.n	80123fc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 801240e:	2003      	movs	r0, #3
 8012410:	e603      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012412:	4b43      	ldr	r3, [pc, #268]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	22c0      	movs	r2, #192	; 0xc0
 8012418:	0252      	lsls	r2, r2, #9
 801241a:	4013      	ands	r3, r2
 801241c:	4293      	cmp	r3, r2
 801241e:	d000      	beq.n	8012422 <HAL_RCC_OscConfig+0x472>
 8012420:	e70f      	b.n	8012242 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012422:	4b3f      	ldr	r3, [pc, #252]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012426:	03db      	lsls	r3, r3, #15
 8012428:	d504      	bpl.n	8012434 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801242a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801242c:	69e3      	ldr	r3, [r4, #28]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d000      	beq.n	8012434 <HAL_RCC_OscConfig+0x484>
 8012432:	e5f2      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012434:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012436:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012438:	2b00      	cmp	r3, #0
 801243a:	d100      	bne.n	801243e <HAL_RCC_OscConfig+0x48e>
 801243c:	e5ed      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801243e:	4a38      	ldr	r2, [pc, #224]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012440:	6851      	ldr	r1, [r2, #4]
 8012442:	220c      	movs	r2, #12
 8012444:	400a      	ands	r2, r1
 8012446:	2a08      	cmp	r2, #8
 8012448:	d068      	beq.n	801251c <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801244a:	2b02      	cmp	r3, #2
 801244c:	d029      	beq.n	80124a2 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801244e:	4a34      	ldr	r2, [pc, #208]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012450:	6813      	ldr	r3, [r2, #0]
 8012452:	4935      	ldr	r1, [pc, #212]	; (8012528 <HAL_RCC_OscConfig+0x578>)
 8012454:	400b      	ands	r3, r1
 8012456:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012458:	f7fe f8e0 	bl	801061c <HAL_GetTick>
 801245c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801245e:	4d30      	ldr	r5, [pc, #192]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 8012460:	2480      	movs	r4, #128	; 0x80
 8012462:	04a4      	lsls	r4, r4, #18
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	4223      	tst	r3, r4
 8012468:	d056      	beq.n	8012518 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801246a:	f7fe f8d7 	bl	801061c <HAL_GetTick>
 801246e:	1b80      	subs	r0, r0, r6
 8012470:	2864      	cmp	r0, #100	; 0x64
 8012472:	d9f7      	bls.n	8012464 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012474:	2003      	movs	r0, #3
 8012476:	e5d0      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012478:	4a29      	ldr	r2, [pc, #164]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 801247a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801247c:	492b      	ldr	r1, [pc, #172]	; (801252c <HAL_RCC_OscConfig+0x57c>)
 801247e:	400b      	ands	r3, r1
 8012480:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012482:	f7fe f8cb 	bl	801061c <HAL_GetTick>
 8012486:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012488:	4e25      	ldr	r6, [pc, #148]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 801248a:	2580      	movs	r5, #128	; 0x80
 801248c:	026d      	lsls	r5, r5, #9
 801248e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012490:	422b      	tst	r3, r5
 8012492:	d0cf      	beq.n	8012434 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012494:	f7fe f8c2 	bl	801061c <HAL_GetTick>
 8012498:	1bc0      	subs	r0, r0, r7
 801249a:	2864      	cmp	r0, #100	; 0x64
 801249c:	d9f7      	bls.n	801248e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801249e:	2003      	movs	r0, #3
 80124a0:	e5bb      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 80124a2:	4a1f      	ldr	r2, [pc, #124]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80124a4:	6813      	ldr	r3, [r2, #0]
 80124a6:	4920      	ldr	r1, [pc, #128]	; (8012528 <HAL_RCC_OscConfig+0x578>)
 80124a8:	400b      	ands	r3, r1
 80124aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80124ac:	f7fe f8b6 	bl	801061c <HAL_GetTick>
 80124b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80124b2:	4e1b      	ldr	r6, [pc, #108]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80124b4:	2580      	movs	r5, #128	; 0x80
 80124b6:	04ad      	lsls	r5, r5, #18
 80124b8:	6833      	ldr	r3, [r6, #0]
 80124ba:	422b      	tst	r3, r5
 80124bc:	d006      	beq.n	80124cc <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124be:	f7fe f8ad 	bl	801061c <HAL_GetTick>
 80124c2:	1bc0      	subs	r0, r0, r7
 80124c4:	2864      	cmp	r0, #100	; 0x64
 80124c6:	d9f7      	bls.n	80124b8 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80124c8:	2003      	movs	r0, #3
 80124ca:	e5a6      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80124cc:	4b14      	ldr	r3, [pc, #80]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80124ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124d0:	210f      	movs	r1, #15
 80124d2:	438a      	bics	r2, r1
 80124d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80124d6:	430a      	orrs	r2, r1
 80124d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80124da:	6859      	ldr	r1, [r3, #4]
 80124dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80124de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80124e0:	4302      	orrs	r2, r0
 80124e2:	4813      	ldr	r0, [pc, #76]	; (8012530 <HAL_RCC_OscConfig+0x580>)
 80124e4:	4001      	ands	r1, r0
 80124e6:	430a      	orrs	r2, r1
 80124e8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80124ea:	6819      	ldr	r1, [r3, #0]
 80124ec:	2280      	movs	r2, #128	; 0x80
 80124ee:	0452      	lsls	r2, r2, #17
 80124f0:	430a      	orrs	r2, r1
 80124f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80124f4:	f7fe f892 	bl	801061c <HAL_GetTick>
 80124f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80124fa:	4d09      	ldr	r5, [pc, #36]	; (8012520 <HAL_RCC_OscConfig+0x570>)
 80124fc:	2480      	movs	r4, #128	; 0x80
 80124fe:	04a4      	lsls	r4, r4, #18
 8012500:	682b      	ldr	r3, [r5, #0]
 8012502:	4223      	tst	r3, r4
 8012504:	d106      	bne.n	8012514 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012506:	f7fe f889 	bl	801061c <HAL_GetTick>
 801250a:	1b80      	subs	r0, r0, r6
 801250c:	2864      	cmp	r0, #100	; 0x64
 801250e:	d9f7      	bls.n	8012500 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012510:	2003      	movs	r0, #3
 8012512:	e582      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012514:	2000      	movs	r0, #0
 8012516:	e580      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
 8012518:	2000      	movs	r0, #0
 801251a:	e57e      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 801251c:	2001      	movs	r0, #1
 801251e:	e57c      	b.n	801201a <HAL_RCC_OscConfig+0x6a>
 8012520:	40021000 	.word	0x40021000
 8012524:	00001388 	.word	0x00001388
 8012528:	feffffff 	.word	0xfeffffff
 801252c:	fffeffff 	.word	0xfffeffff
 8012530:	ffc27fff 	.word	0xffc27fff

08012534 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012536:	46ce      	mov	lr, r9
 8012538:	4647      	mov	r7, r8
 801253a:	b580      	push	{r7, lr}
 801253c:	0005      	movs	r5, r0
 801253e:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012540:	4b95      	ldr	r3, [pc, #596]	; (8012798 <HAL_RCC_ClockConfig+0x264>)
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	2301      	movs	r3, #1
 8012546:	4013      	ands	r3, r2
 8012548:	428b      	cmp	r3, r1
 801254a:	d300      	bcc.n	801254e <HAL_RCC_ClockConfig+0x1a>
 801254c:	e089      	b.n	8012662 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801254e:	4992      	ldr	r1, [pc, #584]	; (8012798 <HAL_RCC_ClockConfig+0x264>)
 8012550:	680b      	ldr	r3, [r1, #0]
 8012552:	2201      	movs	r2, #1
 8012554:	4393      	bics	r3, r2
 8012556:	4323      	orrs	r3, r4
 8012558:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801255a:	680b      	ldr	r3, [r1, #0]
 801255c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801255e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012560:	42a2      	cmp	r2, r4
 8012562:	d003      	beq.n	801256c <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012564:	bc0c      	pop	{r2, r3}
 8012566:	4690      	mov	r8, r2
 8012568:	4699      	mov	r9, r3
 801256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	079b      	lsls	r3, r3, #30
 8012570:	d506      	bpl.n	8012580 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012572:	4a8a      	ldr	r2, [pc, #552]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012574:	6853      	ldr	r3, [r2, #4]
 8012576:	21f0      	movs	r1, #240	; 0xf0
 8012578:	438b      	bics	r3, r1
 801257a:	68a9      	ldr	r1, [r5, #8]
 801257c:	430b      	orrs	r3, r1
 801257e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012580:	682b      	ldr	r3, [r5, #0]
 8012582:	07db      	lsls	r3, r3, #31
 8012584:	d400      	bmi.n	8012588 <HAL_RCC_ClockConfig+0x54>
 8012586:	e0f7      	b.n	8012778 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012588:	686b      	ldr	r3, [r5, #4]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d009      	beq.n	80125a2 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801258e:	2b02      	cmp	r3, #2
 8012590:	d02b      	beq.n	80125ea <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012592:	2b03      	cmp	r3, #3
 8012594:	d02f      	beq.n	80125f6 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012596:	4a81      	ldr	r2, [pc, #516]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012598:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801259a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801259c:	0792      	lsls	r2, r2, #30
 801259e:	d405      	bmi.n	80125ac <HAL_RCC_ClockConfig+0x78>
 80125a0:	e7e0      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80125a2:	4a7e      	ldr	r2, [pc, #504]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80125a4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80125a6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80125a8:	0392      	lsls	r2, r2, #14
 80125aa:	d5db      	bpl.n	8012564 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80125ac:	497b      	ldr	r1, [pc, #492]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80125ae:	684a      	ldr	r2, [r1, #4]
 80125b0:	2003      	movs	r0, #3
 80125b2:	4382      	bics	r2, r0
 80125b4:	4313      	orrs	r3, r2
 80125b6:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80125b8:	f7fe f830 	bl	801061c <HAL_GetTick>
 80125bc:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125be:	686b      	ldr	r3, [r5, #4]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d01e      	beq.n	8012602 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	d02c      	beq.n	8012622 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d03a      	beq.n	8012642 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80125cc:	4f73      	ldr	r7, [pc, #460]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80125ce:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125d0:	4b73      	ldr	r3, [pc, #460]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 80125d2:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	421e      	tst	r6, r3
 80125d8:	d100      	bne.n	80125dc <HAL_RCC_ClockConfig+0xa8>
 80125da:	e0cd      	b.n	8012778 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125dc:	f7fe f81e 	bl	801061c <HAL_GetTick>
 80125e0:	1b00      	subs	r0, r0, r4
 80125e2:	4540      	cmp	r0, r8
 80125e4:	d9f6      	bls.n	80125d4 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80125e6:	2003      	movs	r0, #3
 80125e8:	e7bc      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80125ea:	4a6c      	ldr	r2, [pc, #432]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80125ec:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80125ee:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80125f0:	0192      	lsls	r2, r2, #6
 80125f2:	d4db      	bmi.n	80125ac <HAL_RCC_ClockConfig+0x78>
 80125f4:	e7b6      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80125f6:	4a69      	ldr	r2, [pc, #420]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80125f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80125fa:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80125fc:	03d2      	lsls	r2, r2, #15
 80125fe:	d4d5      	bmi.n	80125ac <HAL_RCC_ClockConfig+0x78>
 8012600:	e7b0      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012602:	4f66      	ldr	r7, [pc, #408]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012604:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012606:	4b66      	ldr	r3, [pc, #408]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012608:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4033      	ands	r3, r6
 801260e:	2b04      	cmp	r3, #4
 8012610:	d100      	bne.n	8012614 <HAL_RCC_ClockConfig+0xe0>
 8012612:	e0b1      	b.n	8012778 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012614:	f7fe f802 	bl	801061c <HAL_GetTick>
 8012618:	1b00      	subs	r0, r0, r4
 801261a:	4540      	cmp	r0, r8
 801261c:	d9f5      	bls.n	801260a <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 801261e:	2003      	movs	r0, #3
 8012620:	e7a0      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012622:	4f5e      	ldr	r7, [pc, #376]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012624:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012626:	4b5e      	ldr	r3, [pc, #376]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012628:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4033      	ands	r3, r6
 801262e:	2b08      	cmp	r3, #8
 8012630:	d100      	bne.n	8012634 <HAL_RCC_ClockConfig+0x100>
 8012632:	e0a1      	b.n	8012778 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012634:	f7fd fff2 	bl	801061c <HAL_GetTick>
 8012638:	1b00      	subs	r0, r0, r4
 801263a:	4540      	cmp	r0, r8
 801263c:	d9f5      	bls.n	801262a <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 801263e:	2003      	movs	r0, #3
 8012640:	e790      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012642:	4f56      	ldr	r7, [pc, #344]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012644:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012646:	4b56      	ldr	r3, [pc, #344]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012648:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4033      	ands	r3, r6
 801264e:	2b0c      	cmp	r3, #12
 8012650:	d100      	bne.n	8012654 <HAL_RCC_ClockConfig+0x120>
 8012652:	e091      	b.n	8012778 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012654:	f7fd ffe2 	bl	801061c <HAL_GetTick>
 8012658:	1b00      	subs	r0, r0, r4
 801265a:	4540      	cmp	r0, r8
 801265c:	d9f5      	bls.n	801264a <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801265e:	2003      	movs	r0, #3
 8012660:	e780      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012662:	6803      	ldr	r3, [r0, #0]
 8012664:	079b      	lsls	r3, r3, #30
 8012666:	d506      	bpl.n	8012676 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012668:	4a4c      	ldr	r2, [pc, #304]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 801266a:	6853      	ldr	r3, [r2, #4]
 801266c:	21f0      	movs	r1, #240	; 0xf0
 801266e:	438b      	bics	r3, r1
 8012670:	6881      	ldr	r1, [r0, #8]
 8012672:	430b      	orrs	r3, r1
 8012674:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012676:	682b      	ldr	r3, [r5, #0]
 8012678:	07db      	lsls	r3, r3, #31
 801267a:	d571      	bpl.n	8012760 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801267c:	686b      	ldr	r3, [r5, #4]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d009      	beq.n	8012696 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012682:	2b02      	cmp	r3, #2
 8012684:	d02d      	beq.n	80126e2 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012686:	2b03      	cmp	r3, #3
 8012688:	d031      	beq.n	80126ee <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801268a:	4a44      	ldr	r2, [pc, #272]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 801268c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801268e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012690:	0792      	lsls	r2, r2, #30
 8012692:	d406      	bmi.n	80126a2 <HAL_RCC_ClockConfig+0x16e>
 8012694:	e766      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012696:	4a41      	ldr	r2, [pc, #260]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012698:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801269a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801269c:	0392      	lsls	r2, r2, #14
 801269e:	d400      	bmi.n	80126a2 <HAL_RCC_ClockConfig+0x16e>
 80126a0:	e760      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80126a2:	493e      	ldr	r1, [pc, #248]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80126a4:	684a      	ldr	r2, [r1, #4]
 80126a6:	2003      	movs	r0, #3
 80126a8:	4382      	bics	r2, r0
 80126aa:	4313      	orrs	r3, r2
 80126ac:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80126ae:	f7fd ffb5 	bl	801061c <HAL_GetTick>
 80126b2:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80126b4:	686b      	ldr	r3, [r5, #4]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d01f      	beq.n	80126fa <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80126ba:	2b02      	cmp	r3, #2
 80126bc:	d02e      	beq.n	801271c <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80126be:	2b03      	cmp	r3, #3
 80126c0:	d03d      	beq.n	801273e <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80126c2:	4b36      	ldr	r3, [pc, #216]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80126c4:	4698      	mov	r8, r3
 80126c6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126c8:	4b35      	ldr	r3, [pc, #212]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 80126ca:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80126cc:	4643      	mov	r3, r8
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	421f      	tst	r7, r3
 80126d2:	d045      	beq.n	8012760 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126d4:	f7fd ffa2 	bl	801061c <HAL_GetTick>
 80126d8:	1b80      	subs	r0, r0, r6
 80126da:	4548      	cmp	r0, r9
 80126dc:	d9f6      	bls.n	80126cc <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80126de:	2003      	movs	r0, #3
 80126e0:	e740      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126e2:	4a2e      	ldr	r2, [pc, #184]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80126e4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80126e6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126e8:	0192      	lsls	r2, r2, #6
 80126ea:	d4da      	bmi.n	80126a2 <HAL_RCC_ClockConfig+0x16e>
 80126ec:	e73a      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126ee:	4a2b      	ldr	r2, [pc, #172]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80126f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80126f2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126f4:	03d2      	lsls	r2, r2, #15
 80126f6:	d4d4      	bmi.n	80126a2 <HAL_RCC_ClockConfig+0x16e>
 80126f8:	e734      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126fa:	4b28      	ldr	r3, [pc, #160]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 80126fc:	4698      	mov	r8, r3
 80126fe:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012700:	4b27      	ldr	r3, [pc, #156]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012702:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012704:	4643      	mov	r3, r8
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	403b      	ands	r3, r7
 801270a:	2b04      	cmp	r3, #4
 801270c:	d028      	beq.n	8012760 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801270e:	f7fd ff85 	bl	801061c <HAL_GetTick>
 8012712:	1b80      	subs	r0, r0, r6
 8012714:	4548      	cmp	r0, r9
 8012716:	d9f5      	bls.n	8012704 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8012718:	2003      	movs	r0, #3
 801271a:	e723      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801271c:	4b1f      	ldr	r3, [pc, #124]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 801271e:	4698      	mov	r8, r3
 8012720:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012722:	4b1f      	ldr	r3, [pc, #124]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012724:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012726:	4643      	mov	r3, r8
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	403b      	ands	r3, r7
 801272c:	2b08      	cmp	r3, #8
 801272e:	d017      	beq.n	8012760 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012730:	f7fd ff74 	bl	801061c <HAL_GetTick>
 8012734:	1b80      	subs	r0, r0, r6
 8012736:	4548      	cmp	r0, r9
 8012738:	d9f5      	bls.n	8012726 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 801273a:	2003      	movs	r0, #3
 801273c:	e712      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801273e:	4b17      	ldr	r3, [pc, #92]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012740:	4698      	mov	r8, r3
 8012742:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012744:	4b16      	ldr	r3, [pc, #88]	; (80127a0 <HAL_RCC_ClockConfig+0x26c>)
 8012746:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012748:	4643      	mov	r3, r8
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	403b      	ands	r3, r7
 801274e:	2b0c      	cmp	r3, #12
 8012750:	d006      	beq.n	8012760 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012752:	f7fd ff63 	bl	801061c <HAL_GetTick>
 8012756:	1b80      	subs	r0, r0, r6
 8012758:	4548      	cmp	r0, r9
 801275a:	d9f5      	bls.n	8012748 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 801275c:	2003      	movs	r0, #3
 801275e:	e701      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012760:	490d      	ldr	r1, [pc, #52]	; (8012798 <HAL_RCC_ClockConfig+0x264>)
 8012762:	680b      	ldr	r3, [r1, #0]
 8012764:	2201      	movs	r2, #1
 8012766:	4393      	bics	r3, r2
 8012768:	4323      	orrs	r3, r4
 801276a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801276c:	680b      	ldr	r3, [r1, #0]
 801276e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012770:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012772:	42a2      	cmp	r2, r4
 8012774:	d000      	beq.n	8012778 <HAL_RCC_ClockConfig+0x244>
 8012776:	e6f5      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	075b      	lsls	r3, r3, #29
 801277c:	d506      	bpl.n	801278c <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801277e:	4a07      	ldr	r2, [pc, #28]	; (801279c <HAL_RCC_ClockConfig+0x268>)
 8012780:	6853      	ldr	r3, [r2, #4]
 8012782:	4908      	ldr	r1, [pc, #32]	; (80127a4 <HAL_RCC_ClockConfig+0x270>)
 8012784:	400b      	ands	r3, r1
 8012786:	68e9      	ldr	r1, [r5, #12]
 8012788:	430b      	orrs	r3, r1
 801278a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 801278c:	2000      	movs	r0, #0
 801278e:	f7fd ff1b 	bl	80105c8 <HAL_InitTick>
  return HAL_OK;
 8012792:	2000      	movs	r0, #0
 8012794:	e6e6      	b.n	8012564 <HAL_RCC_ClockConfig+0x30>
 8012796:	46c0      	nop			; (mov r8, r8)
 8012798:	40022000 	.word	0x40022000
 801279c:	40021000 	.word	0x40021000
 80127a0:	00001388 	.word	0x00001388
 80127a4:	fffff8ff 	.word	0xfffff8ff

080127a8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80127a8:	b530      	push	{r4, r5, lr}
 80127aa:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80127ac:	aa04      	add	r2, sp, #16
 80127ae:	4b21      	ldr	r3, [pc, #132]	; (8012834 <HAL_RCC_GetSysClockFreq+0x8c>)
 80127b0:	0018      	movs	r0, r3
 80127b2:	c832      	ldmia	r0!, {r1, r4, r5}
 80127b4:	c232      	stmia	r2!, {r1, r4, r5}
 80127b6:	0011      	movs	r1, r2
 80127b8:	6802      	ldr	r2, [r0, #0]
 80127ba:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80127bc:	466a      	mov	r2, sp
 80127be:	3310      	adds	r3, #16
 80127c0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80127c2:	c213      	stmia	r2!, {r0, r1, r4}
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80127c8:	4b1b      	ldr	r3, [pc, #108]	; (8012838 <HAL_RCC_GetSysClockFreq+0x90>)
 80127ca:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80127cc:	200c      	movs	r0, #12
 80127ce:	4018      	ands	r0, r3
 80127d0:	2808      	cmp	r0, #8
 80127d2:	d00a      	beq.n	80127ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80127d4:	380c      	subs	r0, #12
 80127d6:	4243      	negs	r3, r0
 80127d8:	4158      	adcs	r0, r3
 80127da:	4240      	negs	r0, r0
 80127dc:	4b17      	ldr	r3, [pc, #92]	; (801283c <HAL_RCC_GetSysClockFreq+0x94>)
 80127de:	4018      	ands	r0, r3
 80127e0:	4b17      	ldr	r3, [pc, #92]	; (8012840 <HAL_RCC_GetSysClockFreq+0x98>)
 80127e2:	469c      	mov	ip, r3
 80127e4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80127e6:	b009      	add	sp, #36	; 0x24
 80127e8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80127ea:	0c99      	lsrs	r1, r3, #18
 80127ec:	220f      	movs	r2, #15
 80127ee:	4011      	ands	r1, r2
 80127f0:	a804      	add	r0, sp, #16
 80127f2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80127f4:	4910      	ldr	r1, [pc, #64]	; (8012838 <HAL_RCC_GetSysClockFreq+0x90>)
 80127f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80127f8:	400a      	ands	r2, r1
 80127fa:	4669      	mov	r1, sp
 80127fc:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80127fe:	22c0      	movs	r2, #192	; 0xc0
 8012800:	0252      	lsls	r2, r2, #9
 8012802:	4013      	ands	r3, r2
 8012804:	2280      	movs	r2, #128	; 0x80
 8012806:	0252      	lsls	r2, r2, #9
 8012808:	4293      	cmp	r3, r2
 801280a:	d008      	beq.n	801281e <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801280c:	22c0      	movs	r2, #192	; 0xc0
 801280e:	0252      	lsls	r2, r2, #9
 8012810:	4293      	cmp	r3, r2
 8012812:	d009      	beq.n	8012828 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012814:	480a      	ldr	r0, [pc, #40]	; (8012840 <HAL_RCC_GetSysClockFreq+0x98>)
 8012816:	f7ed fc91 	bl	800013c <__udivsi3>
 801281a:	4360      	muls	r0, r4
 801281c:	e7e3      	b.n	80127e6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 801281e:	4808      	ldr	r0, [pc, #32]	; (8012840 <HAL_RCC_GetSysClockFreq+0x98>)
 8012820:	f7ed fc8c 	bl	800013c <__udivsi3>
 8012824:	4360      	muls	r0, r4
 8012826:	e7de      	b.n	80127e6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012828:	4806      	ldr	r0, [pc, #24]	; (8012844 <HAL_RCC_GetSysClockFreq+0x9c>)
 801282a:	f7ed fc87 	bl	800013c <__udivsi3>
 801282e:	4360      	muls	r0, r4
 8012830:	e7d9      	b.n	80127e6 <HAL_RCC_GetSysClockFreq+0x3e>
 8012832:	46c0      	nop			; (mov r8, r8)
 8012834:	08017534 	.word	0x08017534
 8012838:	40021000 	.word	0x40021000
 801283c:	02625a00 	.word	0x02625a00
 8012840:	007a1200 	.word	0x007a1200
 8012844:	02dc6c00 	.word	0x02dc6c00

08012848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012848:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801284a:	f7ff ffad 	bl	80127a8 <HAL_RCC_GetSysClockFreq>
 801284e:	4b05      	ldr	r3, [pc, #20]	; (8012864 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	061b      	lsls	r3, r3, #24
 8012854:	0f1b      	lsrs	r3, r3, #28
 8012856:	4a04      	ldr	r2, [pc, #16]	; (8012868 <HAL_RCC_GetHCLKFreq+0x20>)
 8012858:	5cd3      	ldrb	r3, [r2, r3]
 801285a:	40d8      	lsrs	r0, r3
 801285c:	4b03      	ldr	r3, [pc, #12]	; (801286c <HAL_RCC_GetHCLKFreq+0x24>)
 801285e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012860:	bd10      	pop	{r4, pc}
 8012862:	46c0      	nop			; (mov r8, r8)
 8012864:	40021000 	.word	0x40021000
 8012868:	0801a61c 	.word	0x0801a61c
 801286c:	200000ac 	.word	0x200000ac

08012870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012870:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012872:	f7ff ffe9 	bl	8012848 <HAL_RCC_GetHCLKFreq>
 8012876:	4b04      	ldr	r3, [pc, #16]	; (8012888 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	055b      	lsls	r3, r3, #21
 801287c:	0f5b      	lsrs	r3, r3, #29
 801287e:	4a03      	ldr	r2, [pc, #12]	; (801288c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012880:	5cd3      	ldrb	r3, [r2, r3]
 8012882:	40d8      	lsrs	r0, r3
}    
 8012884:	bd10      	pop	{r4, pc}
 8012886:	46c0      	nop			; (mov r8, r8)
 8012888:	40021000 	.word	0x40021000
 801288c:	0801a61c 	.word	0x0801a61c

08012890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012892:	46c6      	mov	lr, r8
 8012894:	b500      	push	{lr}
 8012896:	b082      	sub	sp, #8
 8012898:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801289a:	6803      	ldr	r3, [r0, #0]
 801289c:	03db      	lsls	r3, r3, #15
 801289e:	d507      	bpl.n	80128b0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80128a0:	4b43      	ldr	r3, [pc, #268]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128a2:	6a1b      	ldr	r3, [r3, #32]
 80128a4:	6842      	ldr	r2, [r0, #4]
 80128a6:	4053      	eors	r3, r2
 80128a8:	22c0      	movs	r2, #192	; 0xc0
 80128aa:	0092      	lsls	r2, r2, #2
 80128ac:	4213      	tst	r3, r2
 80128ae:	d136      	bne.n	801291e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	07db      	lsls	r3, r3, #31
 80128b4:	d506      	bpl.n	80128c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80128b6:	4a3e      	ldr	r2, [pc, #248]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128ba:	2103      	movs	r1, #3
 80128bc:	438b      	bics	r3, r1
 80128be:	68a1      	ldr	r1, [r4, #8]
 80128c0:	430b      	orrs	r3, r1
 80128c2:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	079b      	lsls	r3, r3, #30
 80128c8:	d506      	bpl.n	80128d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80128ca:	4a39      	ldr	r2, [pc, #228]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128ce:	4939      	ldr	r1, [pc, #228]	; (80129b4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80128d0:	400b      	ands	r3, r1
 80128d2:	68e1      	ldr	r1, [r4, #12]
 80128d4:	430b      	orrs	r3, r1
 80128d6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	035b      	lsls	r3, r3, #13
 80128dc:	d506      	bpl.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80128de:	4a34      	ldr	r2, [pc, #208]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128e2:	4935      	ldr	r1, [pc, #212]	; (80129b8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80128e4:	400b      	ands	r3, r1
 80128e6:	6921      	ldr	r1, [r4, #16]
 80128e8:	430b      	orrs	r3, r1
 80128ea:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80128ec:	6823      	ldr	r3, [r4, #0]
 80128ee:	069b      	lsls	r3, r3, #26
 80128f0:	d506      	bpl.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80128f2:	4a2f      	ldr	r2, [pc, #188]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128f6:	2110      	movs	r1, #16
 80128f8:	438b      	bics	r3, r1
 80128fa:	6961      	ldr	r1, [r4, #20]
 80128fc:	430b      	orrs	r3, r1
 80128fe:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012900:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	055b      	lsls	r3, r3, #21
 8012906:	d506      	bpl.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012908:	4a29      	ldr	r2, [pc, #164]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801290a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801290c:	2140      	movs	r1, #64	; 0x40
 801290e:	438b      	bics	r3, r1
 8012910:	69a1      	ldr	r1, [r4, #24]
 8012912:	430b      	orrs	r3, r1
 8012914:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012916:	b002      	add	sp, #8
 8012918:	bc04      	pop	{r2}
 801291a:	4690      	mov	r8, r2
 801291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 801291e:	4a24      	ldr	r2, [pc, #144]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012920:	69d1      	ldr	r1, [r2, #28]
 8012922:	2080      	movs	r0, #128	; 0x80
 8012924:	0540      	lsls	r0, r0, #21
 8012926:	4301      	orrs	r1, r0
 8012928:	61d1      	str	r1, [r2, #28]
 801292a:	69d3      	ldr	r3, [r2, #28]
 801292c:	4003      	ands	r3, r0
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012932:	4a22      	ldr	r2, [pc, #136]	; (80129bc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012934:	6811      	ldr	r1, [r2, #0]
 8012936:	2380      	movs	r3, #128	; 0x80
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	430b      	orrs	r3, r1
 801293c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801293e:	f7fd fe6d 	bl	801061c <HAL_GetTick>
 8012942:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012944:	4e1d      	ldr	r6, [pc, #116]	; (80129bc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012946:	2580      	movs	r5, #128	; 0x80
 8012948:	006d      	lsls	r5, r5, #1
 801294a:	6833      	ldr	r3, [r6, #0]
 801294c:	422b      	tst	r3, r5
 801294e:	d106      	bne.n	801295e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012950:	f7fd fe64 	bl	801061c <HAL_GetTick>
 8012954:	1bc0      	subs	r0, r0, r7
 8012956:	2864      	cmp	r0, #100	; 0x64
 8012958:	d9f7      	bls.n	801294a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801295a:	2003      	movs	r0, #3
 801295c:	e7db      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801295e:	4b14      	ldr	r3, [pc, #80]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012960:	6a18      	ldr	r0, [r3, #32]
 8012962:	4a17      	ldr	r2, [pc, #92]	; (80129c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012964:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012966:	6a1d      	ldr	r5, [r3, #32]
 8012968:	2180      	movs	r1, #128	; 0x80
 801296a:	0249      	lsls	r1, r1, #9
 801296c:	4329      	orrs	r1, r5
 801296e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012970:	6a19      	ldr	r1, [r3, #32]
 8012972:	4d14      	ldr	r5, [pc, #80]	; (80129c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012974:	4029      	ands	r1, r5
 8012976:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012978:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801297a:	0783      	lsls	r3, r0, #30
 801297c:	d407      	bmi.n	801298e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801297e:	4a0c      	ldr	r2, [pc, #48]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012980:	6a13      	ldr	r3, [r2, #32]
 8012982:	490f      	ldr	r1, [pc, #60]	; (80129c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012984:	400b      	ands	r3, r1
 8012986:	6861      	ldr	r1, [r4, #4]
 8012988:	430b      	orrs	r3, r1
 801298a:	6213      	str	r3, [r2, #32]
 801298c:	e790      	b.n	80128b0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801298e:	f7fd fe45 	bl	801061c <HAL_GetTick>
 8012992:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012994:	4e06      	ldr	r6, [pc, #24]	; (80129b0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012996:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012998:	4f0b      	ldr	r7, [pc, #44]	; (80129c8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801299a:	6a33      	ldr	r3, [r6, #32]
 801299c:	421d      	tst	r5, r3
 801299e:	d1ee      	bne.n	801297e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80129a0:	f7fd fe3c 	bl	801061c <HAL_GetTick>
 80129a4:	4643      	mov	r3, r8
 80129a6:	1ac0      	subs	r0, r0, r3
 80129a8:	42b8      	cmp	r0, r7
 80129aa:	d9f6      	bls.n	801299a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 80129ac:	2003      	movs	r0, #3
 80129ae:	e7b2      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80129b0:	40021000 	.word	0x40021000
 80129b4:	fffcffff 	.word	0xfffcffff
 80129b8:	fff3ffff 	.word	0xfff3ffff
 80129bc:	40007000 	.word	0x40007000
 80129c0:	fffffcff 	.word	0xfffffcff
 80129c4:	fffeffff 	.word	0xfffeffff
 80129c8:	00001388 	.word	0x00001388

080129cc <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80129cc:	4770      	bx	lr

080129ce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80129ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80129d2:	6802      	ldr	r2, [r0, #0]
 80129d4:	68d3      	ldr	r3, [r2, #12]
 80129d6:	21a0      	movs	r1, #160	; 0xa0
 80129d8:	438b      	bics	r3, r1
 80129da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80129dc:	f7fd fe1e 	bl	801061c <HAL_GetTick>
 80129e0:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80129e2:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80129e4:	26fa      	movs	r6, #250	; 0xfa
 80129e6:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	421d      	tst	r5, r3
 80129ee:	d106      	bne.n	80129fe <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80129f0:	f7fd fe14 	bl	801061c <HAL_GetTick>
 80129f4:	1bc0      	subs	r0, r0, r7
 80129f6:	42b0      	cmp	r0, r6
 80129f8:	d9f6      	bls.n	80129e8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80129fa:	2003      	movs	r0, #3
 80129fc:	e000      	b.n	8012a00 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80129fe:	2000      	movs	r0, #0
}
 8012a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a02 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a04:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a06:	6803      	ldr	r3, [r0, #0]
 8012a08:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012a0a:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a0c:	0652      	lsls	r2, r2, #25
 8012a0e:	d500      	bpl.n	8012a12 <RTC_EnterInitMode+0x10>
}
 8012a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012a12:	2201      	movs	r2, #1
 8012a14:	4252      	negs	r2, r2
 8012a16:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012a18:	f7fd fe00 	bl	801061c <HAL_GetTick>
 8012a1c:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a1e:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012a20:	26fa      	movs	r6, #250	; 0xfa
 8012a22:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	421d      	tst	r5, r3
 8012a2a:	d106      	bne.n	8012a3a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012a2c:	f7fd fdf6 	bl	801061c <HAL_GetTick>
 8012a30:	1bc0      	subs	r0, r0, r7
 8012a32:	42b0      	cmp	r0, r6
 8012a34:	d9f6      	bls.n	8012a24 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012a36:	2003      	movs	r0, #3
 8012a38:	e7ea      	b.n	8012a10 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	e7e8      	b.n	8012a10 <RTC_EnterInitMode+0xe>
	...

08012a40 <HAL_RTC_Init>:
{
 8012a40:	b570      	push	{r4, r5, r6, lr}
 8012a42:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012a44:	d046      	beq.n	8012ad4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012a46:	7f43      	ldrb	r3, [r0, #29]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d038      	beq.n	8012abe <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012a4c:	2302      	movs	r3, #2
 8012a4e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012a50:	6823      	ldr	r3, [r4, #0]
 8012a52:	22ca      	movs	r2, #202	; 0xca
 8012a54:	625a      	str	r2, [r3, #36]	; 0x24
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	3a77      	subs	r2, #119	; 0x77
 8012a5a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012a5c:	0020      	movs	r0, r4
 8012a5e:	f7ff ffd0 	bl	8012a02 <RTC_EnterInitMode>
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d12f      	bne.n	8012ac6 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012a66:	6822      	ldr	r2, [r4, #0]
 8012a68:	6893      	ldr	r3, [r2, #8]
 8012a6a:	491b      	ldr	r1, [pc, #108]	; (8012ad8 <HAL_RTC_Init+0x98>)
 8012a6c:	400b      	ands	r3, r1
 8012a6e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012a70:	6822      	ldr	r2, [r4, #0]
 8012a72:	6891      	ldr	r1, [r2, #8]
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	6925      	ldr	r5, [r4, #16]
 8012a78:	432b      	orrs	r3, r5
 8012a7a:	6965      	ldr	r5, [r4, #20]
 8012a7c:	432b      	orrs	r3, r5
 8012a7e:	430b      	orrs	r3, r1
 8012a80:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012a82:	6823      	ldr	r3, [r4, #0]
 8012a84:	68e2      	ldr	r2, [r4, #12]
 8012a86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012a88:	6822      	ldr	r2, [r4, #0]
 8012a8a:	6911      	ldr	r1, [r2, #16]
 8012a8c:	68a3      	ldr	r3, [r4, #8]
 8012a8e:	041b      	lsls	r3, r3, #16
 8012a90:	430b      	orrs	r3, r1
 8012a92:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012a94:	6822      	ldr	r2, [r4, #0]
 8012a96:	68d3      	ldr	r3, [r2, #12]
 8012a98:	2180      	movs	r1, #128	; 0x80
 8012a9a:	438b      	bics	r3, r1
 8012a9c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012a9e:	6822      	ldr	r2, [r4, #0]
 8012aa0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012aa2:	490e      	ldr	r1, [pc, #56]	; (8012adc <HAL_RTC_Init+0x9c>)
 8012aa4:	400b      	ands	r3, r1
 8012aa6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012aa8:	6822      	ldr	r2, [r4, #0]
 8012aaa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012aac:	69a1      	ldr	r1, [r4, #24]
 8012aae:	430b      	orrs	r3, r1
 8012ab0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	22ff      	movs	r2, #255	; 0xff
 8012ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	7763      	strb	r3, [r4, #29]
}
 8012abc:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012abe:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012ac0:	f7ff ff84 	bl	80129cc <HAL_RTC_MspInit>
 8012ac4:	e7c2      	b.n	8012a4c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012ac6:	6823      	ldr	r3, [r4, #0]
 8012ac8:	22ff      	movs	r2, #255	; 0xff
 8012aca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012acc:	2304      	movs	r3, #4
 8012ace:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	e7f3      	b.n	8012abc <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	e7f1      	b.n	8012abc <HAL_RTC_Init+0x7c>
 8012ad8:	ff8fffbf 	.word	0xff8fffbf
 8012adc:	fffbffff 	.word	0xfffbffff

08012ae0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012ae0:	2809      	cmp	r0, #9
 8012ae2:	d909      	bls.n	8012af8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012ae4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012ae6:	3301      	adds	r3, #1
    Value -= 10;
 8012ae8:	380a      	subs	r0, #10
 8012aea:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012aec:	2809      	cmp	r0, #9
 8012aee:	d8fa      	bhi.n	8012ae6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012af0:	011b      	lsls	r3, r3, #4
 8012af2:	4318      	orrs	r0, r3
 8012af4:	b2c0      	uxtb	r0, r0
}
 8012af6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	e7f9      	b.n	8012af0 <RTC_ByteToBcd2+0x10>

08012afc <HAL_RTC_SetTime>:
{
 8012afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012afe:	46c6      	mov	lr, r8
 8012b00:	b500      	push	{lr}
 8012b02:	0004      	movs	r4, r0
 8012b04:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012b06:	7f03      	ldrb	r3, [r0, #28]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d100      	bne.n	8012b0e <HAL_RTC_SetTime+0x12>
 8012b0c:	e075      	b.n	8012bfa <HAL_RTC_SetTime+0xfe>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b12:	3301      	adds	r3, #1
 8012b14:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	d144      	bne.n	8012ba4 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012b1a:	6803      	ldr	r3, [r0, #0]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	065b      	lsls	r3, r3, #25
 8012b20:	d401      	bmi.n	8012b26 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012b22:	2300      	movs	r3, #0
 8012b24:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b26:	7830      	ldrb	r0, [r6, #0]
 8012b28:	f7ff ffda 	bl	8012ae0 <RTC_ByteToBcd2>
 8012b2c:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012b2e:	7870      	ldrb	r0, [r6, #1]
 8012b30:	f7ff ffd6 	bl	8012ae0 <RTC_ByteToBcd2>
 8012b34:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012b36:	78b0      	ldrb	r0, [r6, #2]
 8012b38:	f7ff ffd2 	bl	8012ae0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012b3c:	7a35      	ldrb	r5, [r6, #8]
 8012b3e:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b40:	4305      	orrs	r5, r0
 8012b42:	4643      	mov	r3, r8
 8012b44:	0418      	lsls	r0, r3, #16
 8012b46:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012b48:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b4a:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	22ca      	movs	r2, #202	; 0xca
 8012b50:	625a      	str	r2, [r3, #36]	; 0x24
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	3a77      	subs	r2, #119	; 0x77
 8012b56:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012b58:	0020      	movs	r0, r4
 8012b5a:	f7ff ff52 	bl	8012a02 <RTC_EnterInitMode>
 8012b5e:	1e07      	subs	r7, r0, #0
 8012b60:	d131      	bne.n	8012bc6 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012b62:	6823      	ldr	r3, [r4, #0]
 8012b64:	4826      	ldr	r0, [pc, #152]	; (8012c00 <HAL_RTC_SetTime+0x104>)
 8012b66:	4005      	ands	r5, r0
 8012b68:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012b6a:	6822      	ldr	r2, [r4, #0]
 8012b6c:	6893      	ldr	r3, [r2, #8]
 8012b6e:	4925      	ldr	r1, [pc, #148]	; (8012c04 <HAL_RTC_SetTime+0x108>)
 8012b70:	400b      	ands	r3, r1
 8012b72:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012b74:	6822      	ldr	r2, [r4, #0]
 8012b76:	6891      	ldr	r1, [r2, #8]
 8012b78:	68f3      	ldr	r3, [r6, #12]
 8012b7a:	6930      	ldr	r0, [r6, #16]
 8012b7c:	4303      	orrs	r3, r0
 8012b7e:	430b      	orrs	r3, r1
 8012b80:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012b82:	6822      	ldr	r2, [r4, #0]
 8012b84:	68d3      	ldr	r3, [r2, #12]
 8012b86:	2180      	movs	r1, #128	; 0x80
 8012b88:	438b      	bics	r3, r1
 8012b8a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012b8c:	6823      	ldr	r3, [r4, #0]
 8012b8e:	689b      	ldr	r3, [r3, #8]
 8012b90:	069b      	lsls	r3, r3, #26
 8012b92:	d524      	bpl.n	8012bde <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012b94:	6823      	ldr	r3, [r4, #0]
 8012b96:	22ff      	movs	r2, #255	; 0xff
 8012b98:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012ba2:	e018      	b.n	8012bd6 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012ba4:	6803      	ldr	r3, [r0, #0]
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	065b      	lsls	r3, r3, #25
 8012baa:	d401      	bmi.n	8012bb0 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012bac:	2300      	movs	r3, #0
 8012bae:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012bb0:	7835      	ldrb	r5, [r6, #0]
 8012bb2:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012bb4:	7870      	ldrb	r0, [r6, #1]
 8012bb6:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012bb8:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012bba:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012bbc:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012bbe:	7a30      	ldrb	r0, [r6, #8]
 8012bc0:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012bc2:	4305      	orrs	r5, r0
 8012bc4:	e7c2      	b.n	8012b4c <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	22ff      	movs	r2, #255	; 0xff
 8012bca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012bcc:	2304      	movs	r3, #4
 8012bce:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012bd4:	2701      	movs	r7, #1
}
 8012bd6:	0038      	movs	r0, r7
 8012bd8:	bc04      	pop	{r2}
 8012bda:	4690      	mov	r8, r2
 8012bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012bde:	0020      	movs	r0, r4
 8012be0:	f7ff fef5 	bl	80129ce <HAL_RTC_WaitForSynchro>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d0d5      	beq.n	8012b94 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	22ff      	movs	r2, #255	; 0xff
 8012bec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012bee:	2304      	movs	r3, #4
 8012bf0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012bf6:	2701      	movs	r7, #1
 8012bf8:	e7ed      	b.n	8012bd6 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012bfa:	2702      	movs	r7, #2
 8012bfc:	e7eb      	b.n	8012bd6 <HAL_RTC_SetTime+0xda>
 8012bfe:	46c0      	nop			; (mov r8, r8)
 8012c00:	007f7f7f 	.word	0x007f7f7f
 8012c04:	fffbffff 	.word	0xfffbffff

08012c08 <HAL_RTC_SetDate>:
{
 8012c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c0a:	46c6      	mov	lr, r8
 8012c0c:	b500      	push	{lr}
 8012c0e:	0004      	movs	r4, r0
 8012c10:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012c12:	7f03      	ldrb	r3, [r0, #28]
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d03a      	beq.n	8012c8e <HAL_RTC_SetDate+0x86>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012c20:	2a00      	cmp	r2, #0
 8012c22:	d136      	bne.n	8012c92 <HAL_RTC_SetDate+0x8a>
 8012c24:	784b      	ldrb	r3, [r1, #1]
 8012c26:	06da      	lsls	r2, r3, #27
 8012c28:	d503      	bpl.n	8012c32 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012c2a:	2210      	movs	r2, #16
 8012c2c:	4393      	bics	r3, r2
 8012c2e:	330a      	adds	r3, #10
 8012c30:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c32:	78f0      	ldrb	r0, [r6, #3]
 8012c34:	f7ff ff54 	bl	8012ae0 <RTC_ByteToBcd2>
 8012c38:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012c3a:	7870      	ldrb	r0, [r6, #1]
 8012c3c:	f7ff ff50 	bl	8012ae0 <RTC_ByteToBcd2>
 8012c40:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012c42:	78b0      	ldrb	r0, [r6, #2]
 8012c44:	f7ff ff4c 	bl	8012ae0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012c48:	7835      	ldrb	r5, [r6, #0]
 8012c4a:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c4c:	4305      	orrs	r5, r0
 8012c4e:	4643      	mov	r3, r8
 8012c50:	0418      	lsls	r0, r3, #16
 8012c52:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012c54:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c56:	433d      	orrs	r5, r7
 8012c58:	e025      	b.n	8012ca6 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012c5a:	6823      	ldr	r3, [r4, #0]
 8012c5c:	22ff      	movs	r2, #255	; 0xff
 8012c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012c60:	2304      	movs	r3, #4
 8012c62:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012c64:	2300      	movs	r3, #0
 8012c66:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012c68:	2601      	movs	r6, #1
}
 8012c6a:	0030      	movs	r0, r6
 8012c6c:	bc04      	pop	{r2}
 8012c6e:	4690      	mov	r8, r2
 8012c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012c72:	0020      	movs	r0, r4
 8012c74:	f7ff feab 	bl	80129ce <HAL_RTC_WaitForSynchro>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d02c      	beq.n	8012cd6 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	22ff      	movs	r2, #255	; 0xff
 8012c80:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c82:	2304      	movs	r3, #4
 8012c84:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012c86:	2300      	movs	r3, #0
 8012c88:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012c8a:	2601      	movs	r6, #1
 8012c8c:	e7ed      	b.n	8012c6a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012c8e:	2602      	movs	r6, #2
 8012c90:	e7eb      	b.n	8012c6a <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012c92:	78cd      	ldrb	r5, [r1, #3]
 8012c94:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012c96:	7848      	ldrb	r0, [r1, #1]
 8012c98:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012c9a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012c9c:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012c9e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012ca0:	7808      	ldrb	r0, [r1, #0]
 8012ca2:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012ca4:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	22ca      	movs	r2, #202	; 0xca
 8012caa:	625a      	str	r2, [r3, #36]	; 0x24
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	3a77      	subs	r2, #119	; 0x77
 8012cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012cb2:	0020      	movs	r0, r4
 8012cb4:	f7ff fea5 	bl	8012a02 <RTC_EnterInitMode>
 8012cb8:	1e06      	subs	r6, r0, #0
 8012cba:	d1ce      	bne.n	8012c5a <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	480a      	ldr	r0, [pc, #40]	; (8012ce8 <HAL_RTC_SetDate+0xe0>)
 8012cc0:	4005      	ands	r5, r0
 8012cc2:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012cc4:	6822      	ldr	r2, [r4, #0]
 8012cc6:	68d3      	ldr	r3, [r2, #12]
 8012cc8:	2180      	movs	r1, #128	; 0x80
 8012cca:	438b      	bics	r3, r1
 8012ccc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	689b      	ldr	r3, [r3, #8]
 8012cd2:	069b      	lsls	r3, r3, #26
 8012cd4:	d5cd      	bpl.n	8012c72 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	22ff      	movs	r2, #255	; 0xff
 8012cda:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012cdc:	2301      	movs	r3, #1
 8012cde:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012ce4:	e7c1      	b.n	8012c6a <HAL_RTC_SetDate+0x62>
 8012ce6:	46c0      	nop			; (mov r8, r8)
 8012ce8:	00ffff3f 	.word	0x00ffff3f

08012cec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012cec:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012cee:	0900      	lsrs	r0, r0, #4
 8012cf0:	0083      	lsls	r3, r0, #2
 8012cf2:	181b      	adds	r3, r3, r0
 8012cf4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012cf6:	200f      	movs	r0, #15
 8012cf8:	4010      	ands	r0, r2
 8012cfa:	1818      	adds	r0, r3, r0
 8012cfc:	b2c0      	uxtb	r0, r0
}
 8012cfe:	4770      	bx	lr

08012d00 <HAL_RTC_GetTime>:
{
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012d04:	6803      	ldr	r3, [r0, #0]
 8012d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d08:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012d0a:	6803      	ldr	r3, [r0, #0]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	490e      	ldr	r1, [pc, #56]	; (8012d48 <HAL_RTC_GetTime+0x48>)
 8012d10:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012d12:	0c19      	lsrs	r1, r3, #16
 8012d14:	203f      	movs	r0, #63	; 0x3f
 8012d16:	4008      	ands	r0, r1
 8012d18:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012d1a:	0a1e      	lsrs	r6, r3, #8
 8012d1c:	b2f6      	uxtb	r6, r6
 8012d1e:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012d20:	b2dc      	uxtb	r4, r3
 8012d22:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012d24:	2340      	movs	r3, #64	; 0x40
 8012d26:	400b      	ands	r3, r1
 8012d28:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012d2a:	2a00      	cmp	r2, #0
 8012d2c:	d10a      	bne.n	8012d44 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012d2e:	f7ff ffdd 	bl	8012cec <RTC_Bcd2ToByte>
 8012d32:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012d34:	0030      	movs	r0, r6
 8012d36:	f7ff ffd9 	bl	8012cec <RTC_Bcd2ToByte>
 8012d3a:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012d3c:	0020      	movs	r0, r4
 8012d3e:	f7ff ffd5 	bl	8012cec <RTC_Bcd2ToByte>
 8012d42:	70a8      	strb	r0, [r5, #2]
}
 8012d44:	2000      	movs	r0, #0
 8012d46:	bd70      	pop	{r4, r5, r6, pc}
 8012d48:	007f7f7f 	.word	0x007f7f7f

08012d4c <HAL_RTC_GetDate>:
{
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012d50:	6803      	ldr	r3, [r0, #0]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	490d      	ldr	r1, [pc, #52]	; (8012d8c <HAL_RTC_GetDate+0x40>)
 8012d56:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012d58:	0c18      	lsrs	r0, r3, #16
 8012d5a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012d5c:	04dd      	lsls	r5, r3, #19
 8012d5e:	0eed      	lsrs	r5, r5, #27
 8012d60:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012d62:	b2de      	uxtb	r6, r3
 8012d64:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012d66:	041b      	lsls	r3, r3, #16
 8012d68:	0f5b      	lsrs	r3, r3, #29
 8012d6a:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012d6c:	2a00      	cmp	r2, #0
 8012d6e:	d10a      	bne.n	8012d86 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012d70:	f7ff ffbc 	bl	8012cec <RTC_Bcd2ToByte>
 8012d74:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012d76:	0028      	movs	r0, r5
 8012d78:	f7ff ffb8 	bl	8012cec <RTC_Bcd2ToByte>
 8012d7c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012d7e:	0030      	movs	r0, r6
 8012d80:	f7ff ffb4 	bl	8012cec <RTC_Bcd2ToByte>
 8012d84:	70a0      	strb	r0, [r4, #2]
}
 8012d86:	2000      	movs	r0, #0
 8012d88:	bd70      	pop	{r4, r5, r6, pc}
 8012d8a:	46c0      	nop			; (mov r8, r8)
 8012d8c:	00ffff3f 	.word	0x00ffff3f

08012d90 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012d90:	6803      	ldr	r3, [r0, #0]
 8012d92:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012d94:	0089      	lsls	r1, r1, #2
 8012d96:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012d98:	600a      	str	r2, [r1, #0]
}
 8012d9a:	4770      	bx	lr

08012d9c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012d9c:	6803      	ldr	r3, [r0, #0]
 8012d9e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012da0:	0089      	lsls	r1, r1, #2
 8012da2:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012da4:	6808      	ldr	r0, [r1, #0]
}
 8012da6:	4770      	bx	lr

08012da8 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012da8:	4770      	bx	lr

08012daa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012daa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012dac:	2239      	movs	r2, #57	; 0x39
 8012dae:	2302      	movs	r3, #2
 8012db0:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012db2:	6804      	ldr	r4, [r0, #0]
 8012db4:	6823      	ldr	r3, [r4, #0]
 8012db6:	2101      	movs	r1, #1
 8012db8:	430b      	orrs	r3, r1
 8012dba:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012dbc:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012dbe:	2000      	movs	r0, #0
 8012dc0:	bd10      	pop	{r4, pc}
	...

08012dc4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012dc4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012dc6:	4a36      	ldr	r2, [pc, #216]	; (8012ea0 <TIM_Base_SetConfig+0xdc>)
 8012dc8:	4290      	cmp	r0, r2
 8012dca:	d022      	beq.n	8012e12 <TIM_Base_SetConfig+0x4e>
 8012dcc:	2280      	movs	r2, #128	; 0x80
 8012dce:	05d2      	lsls	r2, r2, #23
 8012dd0:	4290      	cmp	r0, r2
 8012dd2:	d014      	beq.n	8012dfe <TIM_Base_SetConfig+0x3a>
 8012dd4:	4a33      	ldr	r2, [pc, #204]	; (8012ea4 <TIM_Base_SetConfig+0xe0>)
 8012dd6:	4290      	cmp	r0, r2
 8012dd8:	d016      	beq.n	8012e08 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012dda:	4a33      	ldr	r2, [pc, #204]	; (8012ea8 <TIM_Base_SetConfig+0xe4>)
 8012ddc:	4290      	cmp	r0, r2
 8012dde:	d040      	beq.n	8012e62 <TIM_Base_SetConfig+0x9e>
 8012de0:	4a32      	ldr	r2, [pc, #200]	; (8012eac <TIM_Base_SetConfig+0xe8>)
 8012de2:	4290      	cmp	r0, r2
 8012de4:	d047      	beq.n	8012e76 <TIM_Base_SetConfig+0xb2>
 8012de6:	4a32      	ldr	r2, [pc, #200]	; (8012eb0 <TIM_Base_SetConfig+0xec>)
 8012de8:	4290      	cmp	r0, r2
 8012dea:	d04e      	beq.n	8012e8a <TIM_Base_SetConfig+0xc6>
 8012dec:	4a31      	ldr	r2, [pc, #196]	; (8012eb4 <TIM_Base_SetConfig+0xf0>)
 8012dee:	4290      	cmp	r0, r2
 8012df0:	d02d      	beq.n	8012e4e <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012df2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012df4:	688b      	ldr	r3, [r1, #8]
 8012df6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012df8:	680b      	ldr	r3, [r1, #0]
 8012dfa:	6283      	str	r3, [r0, #40]	; 0x28
 8012dfc:	e024      	b.n	8012e48 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012dfe:	2270      	movs	r2, #112	; 0x70
 8012e00:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012e02:	684a      	ldr	r2, [r1, #4]
 8012e04:	4313      	orrs	r3, r2
 8012e06:	e008      	b.n	8012e1a <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e08:	2270      	movs	r2, #112	; 0x70
 8012e0a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012e0c:	684a      	ldr	r2, [r1, #4]
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	e003      	b.n	8012e1a <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e12:	2270      	movs	r2, #112	; 0x70
 8012e14:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012e16:	684a      	ldr	r2, [r1, #4]
 8012e18:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e1a:	4a27      	ldr	r2, [pc, #156]	; (8012eb8 <TIM_Base_SetConfig+0xf4>)
 8012e1c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e1e:	68ca      	ldr	r2, [r1, #12]
 8012e20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e24:	688b      	ldr	r3, [r1, #8]
 8012e26:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e28:	680b      	ldr	r3, [r1, #0]
 8012e2a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012e2c:	4b1c      	ldr	r3, [pc, #112]	; (8012ea0 <TIM_Base_SetConfig+0xdc>)
 8012e2e:	4298      	cmp	r0, r3
 8012e30:	d008      	beq.n	8012e44 <TIM_Base_SetConfig+0x80>
 8012e32:	4b1e      	ldr	r3, [pc, #120]	; (8012eac <TIM_Base_SetConfig+0xe8>)
 8012e34:	4298      	cmp	r0, r3
 8012e36:	d005      	beq.n	8012e44 <TIM_Base_SetConfig+0x80>
 8012e38:	4b1d      	ldr	r3, [pc, #116]	; (8012eb0 <TIM_Base_SetConfig+0xec>)
 8012e3a:	4298      	cmp	r0, r3
 8012e3c:	d002      	beq.n	8012e44 <TIM_Base_SetConfig+0x80>
 8012e3e:	4b1d      	ldr	r3, [pc, #116]	; (8012eb4 <TIM_Base_SetConfig+0xf0>)
 8012e40:	4298      	cmp	r0, r3
 8012e42:	d101      	bne.n	8012e48 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012e44:	690b      	ldr	r3, [r1, #16]
 8012e46:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	6143      	str	r3, [r0, #20]
}
 8012e4c:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e4e:	4a1a      	ldr	r2, [pc, #104]	; (8012eb8 <TIM_Base_SetConfig+0xf4>)
 8012e50:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e52:	68ca      	ldr	r2, [r1, #12]
 8012e54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e58:	688b      	ldr	r3, [r1, #8]
 8012e5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e5c:	680b      	ldr	r3, [r1, #0]
 8012e5e:	6283      	str	r3, [r0, #40]	; 0x28
 8012e60:	e7f0      	b.n	8012e44 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e62:	4a15      	ldr	r2, [pc, #84]	; (8012eb8 <TIM_Base_SetConfig+0xf4>)
 8012e64:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e66:	68ca      	ldr	r2, [r1, #12]
 8012e68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e6c:	688b      	ldr	r3, [r1, #8]
 8012e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e70:	680b      	ldr	r3, [r1, #0]
 8012e72:	6283      	str	r3, [r0, #40]	; 0x28
 8012e74:	e7e8      	b.n	8012e48 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e76:	4a10      	ldr	r2, [pc, #64]	; (8012eb8 <TIM_Base_SetConfig+0xf4>)
 8012e78:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e7a:	68ca      	ldr	r2, [r1, #12]
 8012e7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e80:	688b      	ldr	r3, [r1, #8]
 8012e82:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e84:	680b      	ldr	r3, [r1, #0]
 8012e86:	6283      	str	r3, [r0, #40]	; 0x28
 8012e88:	e7dc      	b.n	8012e44 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e8a:	4a0b      	ldr	r2, [pc, #44]	; (8012eb8 <TIM_Base_SetConfig+0xf4>)
 8012e8c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e8e:	68ca      	ldr	r2, [r1, #12]
 8012e90:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e92:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e94:	688b      	ldr	r3, [r1, #8]
 8012e96:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e98:	680b      	ldr	r3, [r1, #0]
 8012e9a:	6283      	str	r3, [r0, #40]	; 0x28
 8012e9c:	e7d2      	b.n	8012e44 <TIM_Base_SetConfig+0x80>
 8012e9e:	46c0      	nop			; (mov r8, r8)
 8012ea0:	40012c00 	.word	0x40012c00
 8012ea4:	40000400 	.word	0x40000400
 8012ea8:	40002000 	.word	0x40002000
 8012eac:	40014000 	.word	0x40014000
 8012eb0:	40014400 	.word	0x40014400
 8012eb4:	40014800 	.word	0x40014800
 8012eb8:	fffffcff 	.word	0xfffffcff

08012ebc <HAL_TIM_Base_Init>:
{
 8012ebc:	b570      	push	{r4, r5, r6, lr}
 8012ebe:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012ec0:	d014      	beq.n	8012eec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012ec2:	2339      	movs	r3, #57	; 0x39
 8012ec4:	5cc3      	ldrb	r3, [r0, r3]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00a      	beq.n	8012ee0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012eca:	2539      	movs	r5, #57	; 0x39
 8012ecc:	2302      	movs	r3, #2
 8012ece:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ed0:	1d21      	adds	r1, r4, #4
 8012ed2:	6820      	ldr	r0, [r4, #0]
 8012ed4:	f7ff ff76 	bl	8012dc4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012ed8:	2301      	movs	r3, #1
 8012eda:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012edc:	2000      	movs	r0, #0
}
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012ee0:	3338      	adds	r3, #56	; 0x38
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012ee6:	f7ff ff5f 	bl	8012da8 <HAL_TIM_Base_MspInit>
 8012eea:	e7ee      	b.n	8012eca <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012eec:	2001      	movs	r0, #1
 8012eee:	e7f6      	b.n	8012ede <HAL_TIM_Base_Init+0x22>

08012ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012ef2:	2338      	movs	r3, #56	; 0x38
 8012ef4:	5cc3      	ldrb	r3, [r0, r3]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d01e      	beq.n	8012f38 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012efa:	2238      	movs	r2, #56	; 0x38
 8012efc:	2501      	movs	r5, #1
 8012efe:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012f00:	2439      	movs	r4, #57	; 0x39
 8012f02:	2302      	movs	r3, #2
 8012f04:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012f06:	6806      	ldr	r6, [r0, #0]
 8012f08:	6873      	ldr	r3, [r6, #4]
 8012f0a:	2770      	movs	r7, #112	; 0x70
 8012f0c:	43bb      	bics	r3, r7
 8012f0e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012f10:	6806      	ldr	r6, [r0, #0]
 8012f12:	6873      	ldr	r3, [r6, #4]
 8012f14:	680f      	ldr	r7, [r1, #0]
 8012f16:	433b      	orrs	r3, r7
 8012f18:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012f1a:	6806      	ldr	r6, [r0, #0]
 8012f1c:	68b3      	ldr	r3, [r6, #8]
 8012f1e:	2780      	movs	r7, #128	; 0x80
 8012f20:	43bb      	bics	r3, r7
 8012f22:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012f24:	6806      	ldr	r6, [r0, #0]
 8012f26:	68b3      	ldr	r3, [r6, #8]
 8012f28:	6849      	ldr	r1, [r1, #4]
 8012f2a:	430b      	orrs	r3, r1
 8012f2c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012f2e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012f30:	2300      	movs	r3, #0
 8012f32:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012f34:	2000      	movs	r0, #0
}
 8012f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012f38:	2002      	movs	r0, #2
 8012f3a:	e7fc      	b.n	8012f36 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012f3c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012f3c:	4770      	bx	lr

08012f3e <HAL_UART_DeInit>:
{
 8012f3e:	b570      	push	{r4, r5, r6, lr}
 8012f40:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012f42:	2001      	movs	r0, #1
  if(huart == NULL)
 8012f44:	2c00      	cmp	r4, #0
 8012f46:	d016      	beq.n	8012f76 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012f48:	2669      	movs	r6, #105	; 0x69
 8012f4a:	2302      	movs	r3, #2
 8012f4c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012f4e:	6822      	ldr	r2, [r4, #0]
 8012f50:	6813      	ldr	r3, [r2, #0]
 8012f52:	2101      	movs	r1, #1
 8012f54:	438b      	bics	r3, r1
 8012f56:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	2500      	movs	r5, #0
 8012f5c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012f66:	0020      	movs	r0, r4
 8012f68:	f7ff ffe8 	bl	8012f3c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f6c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012f6e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012f70:	2368      	movs	r3, #104	; 0x68
 8012f72:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012f74:	2000      	movs	r0, #0
}
 8012f76:	bd70      	pop	{r4, r5, r6, pc}

08012f78 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f78:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f7a:	2369      	movs	r3, #105	; 0x69
 8012f7c:	5cc3      	ldrb	r3, [r0, r3]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d004      	beq.n	8012f8c <HAL_UART_Transmit_IT+0x14>
 8012f82:	2369      	movs	r3, #105	; 0x69
 8012f84:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f86:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f88:	2c22      	cmp	r4, #34	; 0x22
 8012f8a:	d127      	bne.n	8012fdc <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	d02b      	beq.n	8012fe8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012f90:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012f92:	2a00      	cmp	r2, #0
 8012f94:	d022      	beq.n	8012fdc <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012f96:	3367      	adds	r3, #103	; 0x67
 8012f98:	5cc3      	ldrb	r3, [r0, r3]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d026      	beq.n	8012fec <HAL_UART_Transmit_IT+0x74>
 8012f9e:	2368      	movs	r3, #104	; 0x68
 8012fa0:	2401      	movs	r4, #1
 8012fa2:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012fa4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012fa6:	3b18      	subs	r3, #24
 8012fa8:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012faa:	3302      	adds	r3, #2
 8012fac:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012fb2:	3369      	adds	r3, #105	; 0x69
 8012fb4:	5cc3      	ldrb	r3, [r0, r3]
 8012fb6:	2b22      	cmp	r3, #34	; 0x22
 8012fb8:	d012      	beq.n	8012fe0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012fba:	2369      	movs	r3, #105	; 0x69
 8012fbc:	2212      	movs	r2, #18
 8012fbe:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012fc0:	6802      	ldr	r2, [r0, #0]
 8012fc2:	6893      	ldr	r3, [r2, #8]
 8012fc4:	2101      	movs	r1, #1
 8012fc6:	430b      	orrs	r3, r1
 8012fc8:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012fca:	2368      	movs	r3, #104	; 0x68
 8012fcc:	2200      	movs	r2, #0
 8012fce:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012fd0:	6802      	ldr	r2, [r0, #0]
 8012fd2:	6813      	ldr	r3, [r2, #0]
 8012fd4:	317f      	adds	r1, #127	; 0x7f
 8012fd6:	430b      	orrs	r3, r1
 8012fd8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012fda:	2300      	movs	r3, #0
  }
}
 8012fdc:	0018      	movs	r0, r3
 8012fde:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012fe0:	3347      	adds	r3, #71	; 0x47
 8012fe2:	2232      	movs	r2, #50	; 0x32
 8012fe4:	54c2      	strb	r2, [r0, r3]
 8012fe6:	e7eb      	b.n	8012fc0 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e7f7      	b.n	8012fdc <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012fec:	2302      	movs	r3, #2
 8012fee:	e7f5      	b.n	8012fdc <HAL_UART_Transmit_IT+0x64>

08012ff0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ff0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012ff2:	2369      	movs	r3, #105	; 0x69
 8012ff4:	5cc3      	ldrb	r3, [r0, r3]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d004      	beq.n	8013004 <HAL_UART_Receive_IT+0x14>
 8012ffa:	2369      	movs	r3, #105	; 0x69
 8012ffc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012ffe:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013000:	2c12      	cmp	r4, #18
 8013002:	d14e      	bne.n	80130a2 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8013004:	2900      	cmp	r1, #0
 8013006:	d05d      	beq.n	80130c4 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8013008:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801300a:	2a00      	cmp	r2, #0
 801300c:	d049      	beq.n	80130a2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 801300e:	3367      	adds	r3, #103	; 0x67
 8013010:	5cc3      	ldrb	r3, [r0, r3]
 8013012:	2b01      	cmp	r3, #1
 8013014:	d058      	beq.n	80130c8 <HAL_UART_Receive_IT+0xd8>
 8013016:	2368      	movs	r3, #104	; 0x68
 8013018:	2401      	movs	r4, #1
 801301a:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 801301c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801301e:	3b10      	subs	r3, #16
 8013020:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013022:	3302      	adds	r3, #2
 8013024:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8013026:	6883      	ldr	r3, [r0, #8]
 8013028:	2280      	movs	r2, #128	; 0x80
 801302a:	0152      	lsls	r2, r2, #5
 801302c:	4293      	cmp	r3, r2
 801302e:	d008      	beq.n	8013042 <HAL_UART_Receive_IT+0x52>
 8013030:	2b00      	cmp	r3, #0
 8013032:	d115      	bne.n	8013060 <HAL_UART_Receive_IT+0x70>
 8013034:	6903      	ldr	r3, [r0, #16]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d10e      	bne.n	8013058 <HAL_UART_Receive_IT+0x68>
 801303a:	335c      	adds	r3, #92	; 0x5c
 801303c:	22ff      	movs	r2, #255	; 0xff
 801303e:	52c2      	strh	r2, [r0, r3]
 8013040:	e012      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
 8013042:	6903      	ldr	r3, [r0, #16]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d103      	bne.n	8013050 <HAL_UART_Receive_IT+0x60>
 8013048:	335c      	adds	r3, #92	; 0x5c
 801304a:	4a20      	ldr	r2, [pc, #128]	; (80130cc <HAL_UART_Receive_IT+0xdc>)
 801304c:	52c2      	strh	r2, [r0, r3]
 801304e:	e00b      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
 8013050:	235c      	movs	r3, #92	; 0x5c
 8013052:	22ff      	movs	r2, #255	; 0xff
 8013054:	52c2      	strh	r2, [r0, r3]
 8013056:	e007      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
 8013058:	235c      	movs	r3, #92	; 0x5c
 801305a:	227f      	movs	r2, #127	; 0x7f
 801305c:	52c2      	strh	r2, [r0, r3]
 801305e:	e003      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
 8013060:	2280      	movs	r2, #128	; 0x80
 8013062:	0552      	lsls	r2, r2, #21
 8013064:	4293      	cmp	r3, r2
 8013066:	d01e      	beq.n	80130a6 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013068:	2300      	movs	r3, #0
 801306a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801306c:	3369      	adds	r3, #105	; 0x69
 801306e:	5cc3      	ldrb	r3, [r0, r3]
 8013070:	2b12      	cmp	r3, #18
 8013072:	d023      	beq.n	80130bc <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013074:	2369      	movs	r3, #105	; 0x69
 8013076:	2222      	movs	r2, #34	; 0x22
 8013078:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801307a:	6802      	ldr	r2, [r0, #0]
 801307c:	6811      	ldr	r1, [r2, #0]
 801307e:	2380      	movs	r3, #128	; 0x80
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	430b      	orrs	r3, r1
 8013084:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013086:	6802      	ldr	r2, [r0, #0]
 8013088:	6893      	ldr	r3, [r2, #8]
 801308a:	2101      	movs	r1, #1
 801308c:	430b      	orrs	r3, r1
 801308e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013090:	2368      	movs	r3, #104	; 0x68
 8013092:	2200      	movs	r2, #0
 8013094:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013096:	6802      	ldr	r2, [r0, #0]
 8013098:	6813      	ldr	r3, [r2, #0]
 801309a:	311f      	adds	r1, #31
 801309c:	430b      	orrs	r3, r1
 801309e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80130a0:	2300      	movs	r3, #0
  }
}
 80130a2:	0018      	movs	r0, r3
 80130a4:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80130a6:	6903      	ldr	r3, [r0, #16]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d103      	bne.n	80130b4 <HAL_UART_Receive_IT+0xc4>
 80130ac:	335c      	adds	r3, #92	; 0x5c
 80130ae:	227f      	movs	r2, #127	; 0x7f
 80130b0:	52c2      	strh	r2, [r0, r3]
 80130b2:	e7d9      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
 80130b4:	235c      	movs	r3, #92	; 0x5c
 80130b6:	223f      	movs	r2, #63	; 0x3f
 80130b8:	52c2      	strh	r2, [r0, r3]
 80130ba:	e7d5      	b.n	8013068 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80130bc:	3357      	adds	r3, #87	; 0x57
 80130be:	2232      	movs	r2, #50	; 0x32
 80130c0:	54c2      	strb	r2, [r0, r3]
 80130c2:	e7da      	b.n	801307a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80130c4:	2301      	movs	r3, #1
 80130c6:	e7ec      	b.n	80130a2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80130c8:	2302      	movs	r3, #2
 80130ca:	e7ea      	b.n	80130a2 <HAL_UART_Receive_IT+0xb2>
 80130cc:	000001ff 	.word	0x000001ff

080130d0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80130d0:	b510      	push	{r4, lr}
 80130d2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80130d4:	2369      	movs	r3, #105	; 0x69
 80130d6:	5cc3      	ldrb	r3, [r0, r3]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d004      	beq.n	80130e6 <HAL_UART_Transmit_DMA+0x16>
 80130dc:	2369      	movs	r3, #105	; 0x69
 80130de:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80130e0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80130e2:	2b22      	cmp	r3, #34	; 0x22
 80130e4:	d134      	bne.n	8013150 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80130e6:	2900      	cmp	r1, #0
 80130e8:	d037      	beq.n	801315a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80130ea:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	d02f      	beq.n	8013150 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80130f0:	2368      	movs	r3, #104	; 0x68
 80130f2:	5ce3      	ldrb	r3, [r4, r3]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d032      	beq.n	801315e <HAL_UART_Transmit_DMA+0x8e>
 80130f8:	2368      	movs	r3, #104	; 0x68
 80130fa:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80130fc:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80130fe:	3b18      	subs	r3, #24
 8013100:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013102:	3302      	adds	r3, #2
 8013104:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013106:	2300      	movs	r3, #0
 8013108:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801310a:	3369      	adds	r3, #105	; 0x69
 801310c:	5ce3      	ldrb	r3, [r4, r3]
 801310e:	2b22      	cmp	r3, #34	; 0x22
 8013110:	d01f      	beq.n	8013152 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013112:	2369      	movs	r3, #105	; 0x69
 8013114:	2012      	movs	r0, #18
 8013116:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013118:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801311a:	4812      	ldr	r0, [pc, #72]	; (8013164 <HAL_UART_Transmit_DMA+0x94>)
 801311c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801311e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013120:	4811      	ldr	r0, [pc, #68]	; (8013168 <HAL_UART_Transmit_DMA+0x98>)
 8013122:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013124:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013126:	4811      	ldr	r0, [pc, #68]	; (801316c <HAL_UART_Transmit_DMA+0x9c>)
 8013128:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 801312a:	6820      	ldr	r0, [r4, #0]
 801312c:	3028      	adds	r0, #40	; 0x28
 801312e:	0013      	movs	r3, r2
 8013130:	0002      	movs	r2, r0
 8013132:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013134:	f7fd ffb0 	bl	8011098 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	2240      	movs	r2, #64	; 0x40
 801313c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801313e:	6822      	ldr	r2, [r4, #0]
 8013140:	6893      	ldr	r3, [r2, #8]
 8013142:	2180      	movs	r1, #128	; 0x80
 8013144:	430b      	orrs	r3, r1
 8013146:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013148:	2368      	movs	r3, #104	; 0x68
 801314a:	2200      	movs	r2, #0
 801314c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801314e:	2000      	movs	r0, #0
  }
}
 8013150:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013152:	3347      	adds	r3, #71	; 0x47
 8013154:	3031      	adds	r0, #49	; 0x31
 8013156:	54e0      	strb	r0, [r4, r3]
 8013158:	e7de      	b.n	8013118 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 801315a:	2001      	movs	r0, #1
 801315c:	e7f8      	b.n	8013150 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801315e:	2002      	movs	r0, #2
 8013160:	e7f6      	b.n	8013150 <HAL_UART_Transmit_DMA+0x80>
 8013162:	46c0      	nop			; (mov r8, r8)
 8013164:	08013209 	.word	0x08013209
 8013168:	0801323b 	.word	0x0801323b
 801316c:	0801328b 	.word	0x0801328b

08013170 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013170:	b510      	push	{r4, lr}
 8013172:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013174:	2069      	movs	r0, #105	; 0x69
 8013176:	5c20      	ldrb	r0, [r4, r0]
 8013178:	2801      	cmp	r0, #1
 801317a:	d004      	beq.n	8013186 <HAL_UART_Receive_DMA+0x16>
 801317c:	2369      	movs	r3, #105	; 0x69
 801317e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013180:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013182:	2b12      	cmp	r3, #18
 8013184:	d130      	bne.n	80131e8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013186:	2900      	cmp	r1, #0
 8013188:	d033      	beq.n	80131f2 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 801318a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801318c:	2a00      	cmp	r2, #0
 801318e:	d02b      	beq.n	80131e8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013190:	2368      	movs	r3, #104	; 0x68
 8013192:	5ce3      	ldrb	r3, [r4, r3]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d02e      	beq.n	80131f6 <HAL_UART_Receive_DMA+0x86>
 8013198:	2368      	movs	r3, #104	; 0x68
 801319a:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 801319c:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801319e:	3b10      	subs	r3, #16
 80131a0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131a2:	2300      	movs	r3, #0
 80131a4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80131a6:	3369      	adds	r3, #105	; 0x69
 80131a8:	5ce3      	ldrb	r3, [r4, r3]
 80131aa:	2b12      	cmp	r3, #18
 80131ac:	d01d      	beq.n	80131ea <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80131ae:	2369      	movs	r3, #105	; 0x69
 80131b0:	2022      	movs	r0, #34	; 0x22
 80131b2:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80131b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131b6:	4811      	ldr	r0, [pc, #68]	; (80131fc <HAL_UART_Receive_DMA+0x8c>)
 80131b8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80131ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131bc:	4810      	ldr	r0, [pc, #64]	; (8013200 <HAL_UART_Receive_DMA+0x90>)
 80131be:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80131c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131c2:	4810      	ldr	r0, [pc, #64]	; (8013204 <HAL_UART_Receive_DMA+0x94>)
 80131c4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80131c6:	6820      	ldr	r0, [r4, #0]
 80131c8:	3024      	adds	r0, #36	; 0x24
 80131ca:	0013      	movs	r3, r2
 80131cc:	000a      	movs	r2, r1
 80131ce:	0001      	movs	r1, r0
 80131d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80131d2:	f7fd ff61 	bl	8011098 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80131d6:	6822      	ldr	r2, [r4, #0]
 80131d8:	6893      	ldr	r3, [r2, #8]
 80131da:	2140      	movs	r1, #64	; 0x40
 80131dc:	430b      	orrs	r3, r1
 80131de:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80131e0:	2368      	movs	r3, #104	; 0x68
 80131e2:	2200      	movs	r2, #0
 80131e4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80131e6:	2000      	movs	r0, #0
  }
}
 80131e8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80131ea:	3357      	adds	r3, #87	; 0x57
 80131ec:	3031      	adds	r0, #49	; 0x31
 80131ee:	54e0      	strb	r0, [r4, r3]
 80131f0:	e7e0      	b.n	80131b4 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80131f2:	2001      	movs	r0, #1
 80131f4:	e7f8      	b.n	80131e8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80131f6:	2002      	movs	r0, #2
 80131f8:	e7f6      	b.n	80131e8 <HAL_UART_Receive_DMA+0x78>
 80131fa:	46c0      	nop			; (mov r8, r8)
 80131fc:	08013245 	.word	0x08013245
 8013200:	08013281 	.word	0x08013281
 8013204:	0801328b 	.word	0x0801328b

08013208 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013208:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801320a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801320c:	6802      	ldr	r2, [r0, #0]
 801320e:	6812      	ldr	r2, [r2, #0]
 8013210:	0692      	lsls	r2, r2, #26
 8013212:	d40d      	bmi.n	8013230 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8013214:	2252      	movs	r2, #82	; 0x52
 8013216:	2100      	movs	r1, #0
 8013218:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 801321a:	6819      	ldr	r1, [r3, #0]
 801321c:	688a      	ldr	r2, [r1, #8]
 801321e:	2080      	movs	r0, #128	; 0x80
 8013220:	4382      	bics	r2, r0
 8013222:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	6813      	ldr	r3, [r2, #0]
 8013228:	2140      	movs	r1, #64	; 0x40
 801322a:	430b      	orrs	r3, r1
 801322c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 801322e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013230:	0018      	movs	r0, r3
 8013232:	f7fa fd29 	bl	800dc88 <HAL_UART_TxCpltCallback>
}
 8013236:	e7fa      	b.n	801322e <UART_DMATransmitCplt+0x26>

08013238 <HAL_UART_TxHalfCpltCallback>:
}
 8013238:	4770      	bx	lr

0801323a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801323a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801323c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801323e:	f7ff fffb 	bl	8013238 <HAL_UART_TxHalfCpltCallback>
}
 8013242:	bd10      	pop	{r4, pc}

08013244 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013244:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013246:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013248:	6802      	ldr	r2, [r0, #0]
 801324a:	6812      	ldr	r2, [r2, #0]
 801324c:	0692      	lsls	r2, r2, #26
 801324e:	d40e      	bmi.n	801326e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013250:	225a      	movs	r2, #90	; 0x5a
 8013252:	2100      	movs	r1, #0
 8013254:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013256:	6819      	ldr	r1, [r3, #0]
 8013258:	688a      	ldr	r2, [r1, #8]
 801325a:	2040      	movs	r0, #64	; 0x40
 801325c:	4382      	bics	r2, r0
 801325e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013260:	2269      	movs	r2, #105	; 0x69
 8013262:	5c9a      	ldrb	r2, [r3, r2]
 8013264:	2a32      	cmp	r2, #50	; 0x32
 8013266:	d006      	beq.n	8013276 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013268:	2269      	movs	r2, #105	; 0x69
 801326a:	2101      	movs	r1, #1
 801326c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801326e:	0018      	movs	r0, r3
 8013270:	f7fa fd48 	bl	800dd04 <HAL_UART_RxCpltCallback>
}
 8013274:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013276:	3237      	adds	r2, #55	; 0x37
 8013278:	2112      	movs	r1, #18
 801327a:	5499      	strb	r1, [r3, r2]
 801327c:	e7f7      	b.n	801326e <UART_DMAReceiveCplt+0x2a>

0801327e <HAL_UART_RxHalfCpltCallback>:
}
 801327e:	4770      	bx	lr

08013280 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013280:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013282:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013284:	f7ff fffb 	bl	801327e <HAL_UART_RxHalfCpltCallback>
}
 8013288:	bd10      	pop	{r4, pc}

0801328a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801328a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801328c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801328e:	2300      	movs	r3, #0
 8013290:	225a      	movs	r2, #90	; 0x5a
 8013292:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013294:	3a08      	subs	r2, #8
 8013296:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013298:	3369      	adds	r3, #105	; 0x69
 801329a:	3a51      	subs	r2, #81	; 0x51
 801329c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801329e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80132a0:	320f      	adds	r2, #15
 80132a2:	4313      	orrs	r3, r2
 80132a4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80132a6:	f7fa fd07 	bl	800dcb8 <HAL_UART_ErrorCallback>
}
 80132aa:	bd10      	pop	{r4, pc}

080132ac <UART_SetConfig>:
{
 80132ac:	b570      	push	{r4, r5, r6, lr}
 80132ae:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80132b0:	6801      	ldr	r1, [r0, #0]
 80132b2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80132b4:	6883      	ldr	r3, [r0, #8]
 80132b6:	6900      	ldr	r0, [r0, #16]
 80132b8:	4303      	orrs	r3, r0
 80132ba:	6960      	ldr	r0, [r4, #20]
 80132bc:	4303      	orrs	r3, r0
 80132be:	69e0      	ldr	r0, [r4, #28]
 80132c0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80132c2:	487e      	ldr	r0, [pc, #504]	; (80134bc <UART_SetConfig+0x210>)
 80132c4:	4002      	ands	r2, r0
 80132c6:	4313      	orrs	r3, r2
 80132c8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80132ca:	6822      	ldr	r2, [r4, #0]
 80132cc:	6853      	ldr	r3, [r2, #4]
 80132ce:	497c      	ldr	r1, [pc, #496]	; (80134c0 <UART_SetConfig+0x214>)
 80132d0:	400b      	ands	r3, r1
 80132d2:	68e1      	ldr	r1, [r4, #12]
 80132d4:	430b      	orrs	r3, r1
 80132d6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80132d8:	6821      	ldr	r1, [r4, #0]
 80132da:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80132dc:	69a3      	ldr	r3, [r4, #24]
 80132de:	6a20      	ldr	r0, [r4, #32]
 80132e0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80132e2:	4878      	ldr	r0, [pc, #480]	; (80134c4 <UART_SetConfig+0x218>)
 80132e4:	4002      	ands	r2, r0
 80132e6:	4313      	orrs	r3, r2
 80132e8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80132ea:	6825      	ldr	r5, [r4, #0]
 80132ec:	4b76      	ldr	r3, [pc, #472]	; (80134c8 <UART_SetConfig+0x21c>)
 80132ee:	429d      	cmp	r5, r3
 80132f0:	d022      	beq.n	8013338 <UART_SetConfig+0x8c>
 80132f2:	4b76      	ldr	r3, [pc, #472]	; (80134cc <UART_SetConfig+0x220>)
 80132f4:	429d      	cmp	r5, r3
 80132f6:	d034      	beq.n	8013362 <UART_SetConfig+0xb6>
 80132f8:	4b75      	ldr	r3, [pc, #468]	; (80134d0 <UART_SetConfig+0x224>)
 80132fa:	429d      	cmp	r5, r3
 80132fc:	d100      	bne.n	8013300 <UART_SetConfig+0x54>
 80132fe:	e06b      	b.n	80133d8 <UART_SetConfig+0x12c>
 8013300:	4b74      	ldr	r3, [pc, #464]	; (80134d4 <UART_SetConfig+0x228>)
 8013302:	429d      	cmp	r5, r3
 8013304:	d100      	bne.n	8013308 <UART_SetConfig+0x5c>
 8013306:	e08e      	b.n	8013426 <UART_SetConfig+0x17a>
 8013308:	4b73      	ldr	r3, [pc, #460]	; (80134d8 <UART_SetConfig+0x22c>)
 801330a:	429d      	cmp	r5, r3
 801330c:	d100      	bne.n	8013310 <UART_SetConfig+0x64>
 801330e:	e08a      	b.n	8013426 <UART_SetConfig+0x17a>
 8013310:	4b72      	ldr	r3, [pc, #456]	; (80134dc <UART_SetConfig+0x230>)
 8013312:	429d      	cmp	r5, r3
 8013314:	d100      	bne.n	8013318 <UART_SetConfig+0x6c>
 8013316:	e086      	b.n	8013426 <UART_SetConfig+0x17a>
 8013318:	4b71      	ldr	r3, [pc, #452]	; (80134e0 <UART_SetConfig+0x234>)
 801331a:	429d      	cmp	r5, r3
 801331c:	d100      	bne.n	8013320 <UART_SetConfig+0x74>
 801331e:	e082      	b.n	8013426 <UART_SetConfig+0x17a>
 8013320:	4b70      	ldr	r3, [pc, #448]	; (80134e4 <UART_SetConfig+0x238>)
 8013322:	429d      	cmp	r5, r3
 8013324:	d100      	bne.n	8013328 <UART_SetConfig+0x7c>
 8013326:	e07e      	b.n	8013426 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013328:	2380      	movs	r3, #128	; 0x80
 801332a:	021b      	lsls	r3, r3, #8
 801332c:	69e2      	ldr	r2, [r4, #28]
 801332e:	429a      	cmp	r2, r3
 8013330:	d100      	bne.n	8013334 <UART_SetConfig+0x88>
 8013332:	e072      	b.n	801341a <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013334:	2001      	movs	r0, #1
 8013336:	e04e      	b.n	80133d6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013338:	4b6b      	ldr	r3, [pc, #428]	; (80134e8 <UART_SetConfig+0x23c>)
 801333a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801333c:	2303      	movs	r3, #3
 801333e:	4013      	ands	r3, r2
 8013340:	2b01      	cmp	r3, #1
 8013342:	d100      	bne.n	8013346 <UART_SetConfig+0x9a>
 8013344:	e09a      	b.n	801347c <UART_SetConfig+0x1d0>
 8013346:	2b00      	cmp	r3, #0
 8013348:	d02f      	beq.n	80133aa <UART_SetConfig+0xfe>
 801334a:	2b02      	cmp	r3, #2
 801334c:	d100      	bne.n	8013350 <UART_SetConfig+0xa4>
 801334e:	e0a5      	b.n	801349c <UART_SetConfig+0x1f0>
 8013350:	2b03      	cmp	r3, #3
 8013352:	d01a      	beq.n	801338a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013354:	2380      	movs	r3, #128	; 0x80
 8013356:	021b      	lsls	r3, r3, #8
 8013358:	69e2      	ldr	r2, [r4, #28]
 801335a:	429a      	cmp	r2, r3
 801335c:	d060      	beq.n	8013420 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801335e:	2001      	movs	r0, #1
 8013360:	e039      	b.n	80133d6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013362:	4b61      	ldr	r3, [pc, #388]	; (80134e8 <UART_SetConfig+0x23c>)
 8013364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013366:	22c0      	movs	r2, #192	; 0xc0
 8013368:	0292      	lsls	r2, r2, #10
 801336a:	4013      	ands	r3, r2
 801336c:	2280      	movs	r2, #128	; 0x80
 801336e:	0252      	lsls	r2, r2, #9
 8013370:	4293      	cmp	r3, r2
 8013372:	d100      	bne.n	8013376 <UART_SetConfig+0xca>
 8013374:	e082      	b.n	801347c <UART_SetConfig+0x1d0>
 8013376:	d916      	bls.n	80133a6 <UART_SetConfig+0xfa>
 8013378:	2280      	movs	r2, #128	; 0x80
 801337a:	0292      	lsls	r2, r2, #10
 801337c:	4293      	cmp	r3, r2
 801337e:	d100      	bne.n	8013382 <UART_SetConfig+0xd6>
 8013380:	e08c      	b.n	801349c <UART_SetConfig+0x1f0>
 8013382:	22c0      	movs	r2, #192	; 0xc0
 8013384:	0292      	lsls	r2, r2, #10
 8013386:	4293      	cmp	r3, r2
 8013388:	d1e4      	bne.n	8013354 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801338a:	2380      	movs	r3, #128	; 0x80
 801338c:	021b      	lsls	r3, r3, #8
 801338e:	69e2      	ldr	r2, [r4, #28]
 8013390:	429a      	cmp	r2, r3
 8013392:	d038      	beq.n	8013406 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013394:	6861      	ldr	r1, [r4, #4]
 8013396:	4855      	ldr	r0, [pc, #340]	; (80134ec <UART_SetConfig+0x240>)
 8013398:	f7ec fed0 	bl	800013c <__udivsi3>
 801339c:	0400      	lsls	r0, r0, #16
 801339e:	0c00      	lsrs	r0, r0, #16
 80133a0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80133a2:	2000      	movs	r0, #0
        break;
 80133a4:	e017      	b.n	80133d6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d1d4      	bne.n	8013354 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133aa:	2380      	movs	r3, #128	; 0x80
 80133ac:	021b      	lsls	r3, r3, #8
 80133ae:	69e2      	ldr	r2, [r4, #28]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d13d      	bne.n	8013430 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80133b4:	f7ff fa5c 	bl	8012870 <HAL_RCC_GetPCLK1Freq>
 80133b8:	0040      	lsls	r0, r0, #1
 80133ba:	6861      	ldr	r1, [r4, #4]
 80133bc:	f7ec febe 	bl	800013c <__udivsi3>
 80133c0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80133c2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80133c4:	220f      	movs	r2, #15
 80133c6:	0019      	movs	r1, r3
 80133c8:	4391      	bics	r1, r2
 80133ca:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80133cc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80133ce:	071b      	lsls	r3, r3, #28
 80133d0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80133d2:	4313      	orrs	r3, r2
 80133d4:	60cb      	str	r3, [r1, #12]
}
 80133d6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80133d8:	4b43      	ldr	r3, [pc, #268]	; (80134e8 <UART_SetConfig+0x23c>)
 80133da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133dc:	22c0      	movs	r2, #192	; 0xc0
 80133de:	0312      	lsls	r2, r2, #12
 80133e0:	4013      	ands	r3, r2
 80133e2:	2280      	movs	r2, #128	; 0x80
 80133e4:	02d2      	lsls	r2, r2, #11
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d02d      	beq.n	8013446 <UART_SetConfig+0x19a>
 80133ea:	d913      	bls.n	8013414 <UART_SetConfig+0x168>
 80133ec:	2280      	movs	r2, #128	; 0x80
 80133ee:	0312      	lsls	r2, r2, #12
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d036      	beq.n	8013462 <UART_SetConfig+0x1b6>
 80133f4:	22c0      	movs	r2, #192	; 0xc0
 80133f6:	0312      	lsls	r2, r2, #12
 80133f8:	4293      	cmp	r3, r2
 80133fa:	d1ab      	bne.n	8013354 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133fc:	2380      	movs	r3, #128	; 0x80
 80133fe:	021b      	lsls	r3, r3, #8
 8013400:	69e2      	ldr	r2, [r4, #28]
 8013402:	429a      	cmp	r2, r3
 8013404:	d1c6      	bne.n	8013394 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013406:	6861      	ldr	r1, [r4, #4]
 8013408:	4839      	ldr	r0, [pc, #228]	; (80134f0 <UART_SetConfig+0x244>)
 801340a:	f7ec fe97 	bl	800013c <__udivsi3>
 801340e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013410:	2000      	movs	r0, #0
        break;
 8013412:	e7d7      	b.n	80133c4 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013414:	2b00      	cmp	r3, #0
 8013416:	d0c8      	beq.n	80133aa <UART_SetConfig+0xfe>
 8013418:	e79c      	b.n	8013354 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 801341a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801341c:	2300      	movs	r3, #0
 801341e:	e7d1      	b.n	80133c4 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013420:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013422:	2300      	movs	r3, #0
 8013424:	e7ce      	b.n	80133c4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013426:	2380      	movs	r3, #128	; 0x80
 8013428:	021b      	lsls	r3, r3, #8
 801342a:	69e2      	ldr	r2, [r4, #28]
 801342c:	429a      	cmp	r2, r3
 801342e:	d0c1      	beq.n	80133b4 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013430:	f7ff fa1e 	bl	8012870 <HAL_RCC_GetPCLK1Freq>
 8013434:	6825      	ldr	r5, [r4, #0]
 8013436:	6861      	ldr	r1, [r4, #4]
 8013438:	f7ec fe80 	bl	800013c <__udivsi3>
 801343c:	0400      	lsls	r0, r0, #16
 801343e:	0c00      	lsrs	r0, r0, #16
 8013440:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013442:	2000      	movs	r0, #0
  return ret;
 8013444:	e7c7      	b.n	80133d6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013446:	2380      	movs	r3, #128	; 0x80
 8013448:	021b      	lsls	r3, r3, #8
 801344a:	69e2      	ldr	r2, [r4, #28]
 801344c:	429a      	cmp	r2, r3
 801344e:	d11a      	bne.n	8013486 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013450:	f7ff f9aa 	bl	80127a8 <HAL_RCC_GetSysClockFreq>
 8013454:	0040      	lsls	r0, r0, #1
 8013456:	6861      	ldr	r1, [r4, #4]
 8013458:	f7ec fe70 	bl	800013c <__udivsi3>
 801345c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801345e:	2000      	movs	r0, #0
        break;
 8013460:	e7b0      	b.n	80133c4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013462:	2380      	movs	r3, #128	; 0x80
 8013464:	021b      	lsls	r3, r3, #8
 8013466:	69e2      	ldr	r2, [r4, #28]
 8013468:	429a      	cmp	r2, r3
 801346a:	d11c      	bne.n	80134a6 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801346c:	6861      	ldr	r1, [r4, #4]
 801346e:	2080      	movs	r0, #128	; 0x80
 8013470:	0240      	lsls	r0, r0, #9
 8013472:	f7ec fe63 	bl	800013c <__udivsi3>
 8013476:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013478:	2000      	movs	r0, #0
        break;
 801347a:	e7a3      	b.n	80133c4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801347c:	2380      	movs	r3, #128	; 0x80
 801347e:	021b      	lsls	r3, r3, #8
 8013480:	69e2      	ldr	r2, [r4, #28]
 8013482:	429a      	cmp	r2, r3
 8013484:	d0e4      	beq.n	8013450 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013486:	f7ff f98f 	bl	80127a8 <HAL_RCC_GetSysClockFreq>
 801348a:	6825      	ldr	r5, [r4, #0]
 801348c:	6861      	ldr	r1, [r4, #4]
 801348e:	f7ec fe55 	bl	800013c <__udivsi3>
 8013492:	0400      	lsls	r0, r0, #16
 8013494:	0c00      	lsrs	r0, r0, #16
 8013496:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013498:	2000      	movs	r0, #0
        break;
 801349a:	e79c      	b.n	80133d6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801349c:	2380      	movs	r3, #128	; 0x80
 801349e:	021b      	lsls	r3, r3, #8
 80134a0:	69e2      	ldr	r2, [r4, #28]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d0e2      	beq.n	801346c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80134a6:	6861      	ldr	r1, [r4, #4]
 80134a8:	2080      	movs	r0, #128	; 0x80
 80134aa:	0200      	lsls	r0, r0, #8
 80134ac:	f7ec fe46 	bl	800013c <__udivsi3>
 80134b0:	0400      	lsls	r0, r0, #16
 80134b2:	0c00      	lsrs	r0, r0, #16
 80134b4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80134b6:	2000      	movs	r0, #0
        break;
 80134b8:	e78d      	b.n	80133d6 <UART_SetConfig+0x12a>
 80134ba:	46c0      	nop			; (mov r8, r8)
 80134bc:	efff69f3 	.word	0xefff69f3
 80134c0:	ffffcfff 	.word	0xffffcfff
 80134c4:	fffff4ff 	.word	0xfffff4ff
 80134c8:	40013800 	.word	0x40013800
 80134cc:	40004400 	.word	0x40004400
 80134d0:	40004800 	.word	0x40004800
 80134d4:	40004c00 	.word	0x40004c00
 80134d8:	40005000 	.word	0x40005000
 80134dc:	40011400 	.word	0x40011400
 80134e0:	40011800 	.word	0x40011800
 80134e4:	40011c00 	.word	0x40011c00
 80134e8:	40021000 	.word	0x40021000
 80134ec:	007a1200 	.word	0x007a1200
 80134f0:	00f42400 	.word	0x00f42400

080134f4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80134f6:	07db      	lsls	r3, r3, #31
 80134f8:	d506      	bpl.n	8013508 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134fa:	6802      	ldr	r2, [r0, #0]
 80134fc:	6853      	ldr	r3, [r2, #4]
 80134fe:	492c      	ldr	r1, [pc, #176]	; (80135b0 <UART_AdvFeatureConfig+0xbc>)
 8013500:	400b      	ands	r3, r1
 8013502:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013504:	430b      	orrs	r3, r1
 8013506:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801350a:	079b      	lsls	r3, r3, #30
 801350c:	d506      	bpl.n	801351c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801350e:	6802      	ldr	r2, [r0, #0]
 8013510:	6853      	ldr	r3, [r2, #4]
 8013512:	4928      	ldr	r1, [pc, #160]	; (80135b4 <UART_AdvFeatureConfig+0xc0>)
 8013514:	400b      	ands	r3, r1
 8013516:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013518:	430b      	orrs	r3, r1
 801351a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801351c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801351e:	075b      	lsls	r3, r3, #29
 8013520:	d506      	bpl.n	8013530 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013522:	6802      	ldr	r2, [r0, #0]
 8013524:	6853      	ldr	r3, [r2, #4]
 8013526:	4924      	ldr	r1, [pc, #144]	; (80135b8 <UART_AdvFeatureConfig+0xc4>)
 8013528:	400b      	ands	r3, r1
 801352a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801352c:	430b      	orrs	r3, r1
 801352e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013532:	071b      	lsls	r3, r3, #28
 8013534:	d506      	bpl.n	8013544 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013536:	6802      	ldr	r2, [r0, #0]
 8013538:	6853      	ldr	r3, [r2, #4]
 801353a:	4920      	ldr	r1, [pc, #128]	; (80135bc <UART_AdvFeatureConfig+0xc8>)
 801353c:	400b      	ands	r3, r1
 801353e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013540:	430b      	orrs	r3, r1
 8013542:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013546:	06db      	lsls	r3, r3, #27
 8013548:	d506      	bpl.n	8013558 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801354a:	6802      	ldr	r2, [r0, #0]
 801354c:	6893      	ldr	r3, [r2, #8]
 801354e:	491c      	ldr	r1, [pc, #112]	; (80135c0 <UART_AdvFeatureConfig+0xcc>)
 8013550:	400b      	ands	r3, r1
 8013552:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013554:	430b      	orrs	r3, r1
 8013556:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801355a:	069b      	lsls	r3, r3, #26
 801355c:	d506      	bpl.n	801356c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801355e:	6802      	ldr	r2, [r0, #0]
 8013560:	6893      	ldr	r3, [r2, #8]
 8013562:	4918      	ldr	r1, [pc, #96]	; (80135c4 <UART_AdvFeatureConfig+0xd0>)
 8013564:	400b      	ands	r3, r1
 8013566:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013568:	430b      	orrs	r3, r1
 801356a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801356c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801356e:	065b      	lsls	r3, r3, #25
 8013570:	d50b      	bpl.n	801358a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013572:	6802      	ldr	r2, [r0, #0]
 8013574:	6853      	ldr	r3, [r2, #4]
 8013576:	4914      	ldr	r1, [pc, #80]	; (80135c8 <UART_AdvFeatureConfig+0xd4>)
 8013578:	400b      	ands	r3, r1
 801357a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801357c:	430b      	orrs	r3, r1
 801357e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013580:	2380      	movs	r3, #128	; 0x80
 8013582:	035b      	lsls	r3, r3, #13
 8013584:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013586:	429a      	cmp	r2, r3
 8013588:	d00a      	beq.n	80135a0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801358a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801358c:	061b      	lsls	r3, r3, #24
 801358e:	d506      	bpl.n	801359e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013590:	6802      	ldr	r2, [r0, #0]
 8013592:	6853      	ldr	r3, [r2, #4]
 8013594:	490d      	ldr	r1, [pc, #52]	; (80135cc <UART_AdvFeatureConfig+0xd8>)
 8013596:	400b      	ands	r3, r1
 8013598:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801359a:	430b      	orrs	r3, r1
 801359c:	6053      	str	r3, [r2, #4]
}
 801359e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135a0:	6802      	ldr	r2, [r0, #0]
 80135a2:	6853      	ldr	r3, [r2, #4]
 80135a4:	490a      	ldr	r1, [pc, #40]	; (80135d0 <UART_AdvFeatureConfig+0xdc>)
 80135a6:	400b      	ands	r3, r1
 80135a8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80135aa:	430b      	orrs	r3, r1
 80135ac:	6053      	str	r3, [r2, #4]
 80135ae:	e7ec      	b.n	801358a <UART_AdvFeatureConfig+0x96>
 80135b0:	fffdffff 	.word	0xfffdffff
 80135b4:	fffeffff 	.word	0xfffeffff
 80135b8:	fffbffff 	.word	0xfffbffff
 80135bc:	ffff7fff 	.word	0xffff7fff
 80135c0:	ffffefff 	.word	0xffffefff
 80135c4:	ffffdfff 	.word	0xffffdfff
 80135c8:	ffefffff 	.word	0xffefffff
 80135cc:	fff7ffff 	.word	0xfff7ffff
 80135d0:	ff9fffff 	.word	0xff9fffff

080135d4 <UART_WaitOnFlagUntilTimeout>:
{
 80135d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135d6:	46c6      	mov	lr, r8
 80135d8:	b500      	push	{lr}
 80135da:	0006      	movs	r6, r0
 80135dc:	000c      	movs	r4, r1
 80135de:	0017      	movs	r7, r2
 80135e0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80135e2:	f7fd f81b 	bl	801061c <HAL_GetTick>
 80135e6:	4680      	mov	r8, r0
  if(Status == RESET)
 80135e8:	2f00      	cmp	r7, #0
 80135ea:	d029      	beq.n	8013640 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80135ec:	6832      	ldr	r2, [r6, #0]
 80135ee:	69d3      	ldr	r3, [r2, #28]
 80135f0:	4023      	ands	r3, r4
 80135f2:	42a3      	cmp	r3, r4
 80135f4:	d152      	bne.n	801369c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80135f6:	1c6b      	adds	r3, r5, #1
 80135f8:	d0f9      	beq.n	80135ee <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	d005      	beq.n	801360a <UART_WaitOnFlagUntilTimeout+0x36>
 80135fe:	f7fd f80d 	bl	801061c <HAL_GetTick>
 8013602:	4643      	mov	r3, r8
 8013604:	1ac0      	subs	r0, r0, r3
 8013606:	42a8      	cmp	r0, r5
 8013608:	d9f0      	bls.n	80135ec <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801360a:	6832      	ldr	r2, [r6, #0]
 801360c:	6813      	ldr	r3, [r2, #0]
 801360e:	2180      	movs	r1, #128	; 0x80
 8013610:	438b      	bics	r3, r1
 8013612:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013614:	6832      	ldr	r2, [r6, #0]
 8013616:	6813      	ldr	r3, [r2, #0]
 8013618:	3960      	subs	r1, #96	; 0x60
 801361a:	438b      	bics	r3, r1
 801361c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801361e:	6832      	ldr	r2, [r6, #0]
 8013620:	6813      	ldr	r3, [r2, #0]
 8013622:	491f      	ldr	r1, [pc, #124]	; (80136a0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013624:	400b      	ands	r3, r1
 8013626:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013628:	6831      	ldr	r1, [r6, #0]
 801362a:	688b      	ldr	r3, [r1, #8]
 801362c:	2201      	movs	r2, #1
 801362e:	4393      	bics	r3, r2
 8013630:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013632:	2369      	movs	r3, #105	; 0x69
 8013634:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013636:	3b01      	subs	r3, #1
 8013638:	2200      	movs	r2, #0
 801363a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801363c:	2003      	movs	r0, #3
 801363e:	e02a      	b.n	8013696 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013640:	6832      	ldr	r2, [r6, #0]
 8013642:	69d3      	ldr	r3, [r2, #28]
 8013644:	4023      	ands	r3, r4
 8013646:	42a3      	cmp	r3, r4
 8013648:	d024      	beq.n	8013694 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801364a:	1c6b      	adds	r3, r5, #1
 801364c:	d0f9      	beq.n	8013642 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801364e:	2d00      	cmp	r5, #0
 8013650:	d005      	beq.n	801365e <UART_WaitOnFlagUntilTimeout+0x8a>
 8013652:	f7fc ffe3 	bl	801061c <HAL_GetTick>
 8013656:	4643      	mov	r3, r8
 8013658:	1ac0      	subs	r0, r0, r3
 801365a:	42a8      	cmp	r0, r5
 801365c:	d9f0      	bls.n	8013640 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801365e:	6832      	ldr	r2, [r6, #0]
 8013660:	6813      	ldr	r3, [r2, #0]
 8013662:	2180      	movs	r1, #128	; 0x80
 8013664:	438b      	bics	r3, r1
 8013666:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013668:	6832      	ldr	r2, [r6, #0]
 801366a:	6813      	ldr	r3, [r2, #0]
 801366c:	3960      	subs	r1, #96	; 0x60
 801366e:	438b      	bics	r3, r1
 8013670:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013672:	6832      	ldr	r2, [r6, #0]
 8013674:	6813      	ldr	r3, [r2, #0]
 8013676:	490a      	ldr	r1, [pc, #40]	; (80136a0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013678:	400b      	ands	r3, r1
 801367a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801367c:	6831      	ldr	r1, [r6, #0]
 801367e:	688b      	ldr	r3, [r1, #8]
 8013680:	2201      	movs	r2, #1
 8013682:	4393      	bics	r3, r2
 8013684:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013686:	2369      	movs	r3, #105	; 0x69
 8013688:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801368a:	3b01      	subs	r3, #1
 801368c:	2200      	movs	r2, #0
 801368e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013690:	2003      	movs	r0, #3
 8013692:	e000      	b.n	8013696 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013694:	2000      	movs	r0, #0
}
 8013696:	bc04      	pop	{r2}
 8013698:	4690      	mov	r8, r2
 801369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 801369c:	2000      	movs	r0, #0
 801369e:	e7fa      	b.n	8013696 <UART_WaitOnFlagUntilTimeout+0xc2>
 80136a0:	fffffeff 	.word	0xfffffeff

080136a4 <HAL_UART_Transmit>:
{
 80136a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a6:	b083      	sub	sp, #12
 80136a8:	0004      	movs	r4, r0
 80136aa:	000e      	movs	r6, r1
 80136ac:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136ae:	2369      	movs	r3, #105	; 0x69
 80136b0:	5cc3      	ldrb	r3, [r0, r3]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d004      	beq.n	80136c0 <HAL_UART_Transmit+0x1c>
 80136b6:	2369      	movs	r3, #105	; 0x69
 80136b8:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80136ba:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136bc:	2b22      	cmp	r3, #34	; 0x22
 80136be:	d153      	bne.n	8013768 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80136c0:	2e00      	cmp	r6, #0
 80136c2:	d050      	beq.n	8013766 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80136c4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	d04e      	beq.n	8013768 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80136ca:	2368      	movs	r3, #104	; 0x68
 80136cc:	5ce3      	ldrb	r3, [r4, r3]
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d04c      	beq.n	801376c <HAL_UART_Transmit+0xc8>
 80136d2:	2368      	movs	r3, #104	; 0x68
 80136d4:	2101      	movs	r1, #1
 80136d6:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136d8:	2300      	movs	r3, #0
 80136da:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80136dc:	3369      	adds	r3, #105	; 0x69
 80136de:	5ce3      	ldrb	r3, [r4, r3]
 80136e0:	2b22      	cmp	r3, #34	; 0x22
 80136e2:	d008      	beq.n	80136f6 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80136e4:	2369      	movs	r3, #105	; 0x69
 80136e6:	2112      	movs	r1, #18
 80136e8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80136ea:	2350      	movs	r3, #80	; 0x50
 80136ec:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80136ee:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136f0:	2580      	movs	r5, #128	; 0x80
 80136f2:	016d      	lsls	r5, r5, #5
 80136f4:	e00a      	b.n	801370c <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80136f6:	3347      	adds	r3, #71	; 0x47
 80136f8:	3131      	adds	r1, #49	; 0x31
 80136fa:	54e1      	strb	r1, [r4, r3]
 80136fc:	e7f5      	b.n	80136ea <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80136fe:	7833      	ldrb	r3, [r6, #0]
 8013700:	6822      	ldr	r2, [r4, #0]
 8013702:	8513      	strh	r3, [r2, #40]	; 0x28
 8013704:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8013706:	5be2      	ldrh	r2, [r4, r7]
 8013708:	2a00      	cmp	r2, #0
 801370a:	d016      	beq.n	801373a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 801370c:	3a01      	subs	r2, #1
 801370e:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013710:	9b01      	ldr	r3, [sp, #4]
 8013712:	2200      	movs	r2, #0
 8013714:	2180      	movs	r1, #128	; 0x80
 8013716:	0020      	movs	r0, r4
 8013718:	f7ff ff5c 	bl	80135d4 <UART_WaitOnFlagUntilTimeout>
 801371c:	2800      	cmp	r0, #0
 801371e:	d127      	bne.n	8013770 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013720:	68a3      	ldr	r3, [r4, #8]
 8013722:	42ab      	cmp	r3, r5
 8013724:	d1eb      	bne.n	80136fe <HAL_UART_Transmit+0x5a>
 8013726:	6923      	ldr	r3, [r4, #16]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1e8      	bne.n	80136fe <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801372c:	8833      	ldrh	r3, [r6, #0]
 801372e:	05db      	lsls	r3, r3, #23
 8013730:	0ddb      	lsrs	r3, r3, #23
 8013732:	6822      	ldr	r2, [r4, #0]
 8013734:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013736:	3602      	adds	r6, #2
 8013738:	e7e5      	b.n	8013706 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801373a:	9b01      	ldr	r3, [sp, #4]
 801373c:	2140      	movs	r1, #64	; 0x40
 801373e:	0020      	movs	r0, r4
 8013740:	f7ff ff48 	bl	80135d4 <UART_WaitOnFlagUntilTimeout>
 8013744:	2800      	cmp	r0, #0
 8013746:	d115      	bne.n	8013774 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013748:	2369      	movs	r3, #105	; 0x69
 801374a:	5ce3      	ldrb	r3, [r4, r3]
 801374c:	2b32      	cmp	r3, #50	; 0x32
 801374e:	d006      	beq.n	801375e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013750:	2369      	movs	r3, #105	; 0x69
 8013752:	2201      	movs	r2, #1
 8013754:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013756:	2368      	movs	r3, #104	; 0x68
 8013758:	2200      	movs	r2, #0
 801375a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801375c:	e004      	b.n	8013768 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801375e:	3337      	adds	r3, #55	; 0x37
 8013760:	2222      	movs	r2, #34	; 0x22
 8013762:	54e2      	strb	r2, [r4, r3]
 8013764:	e7f7      	b.n	8013756 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8013766:	2001      	movs	r0, #1
}
 8013768:	b003      	add	sp, #12
 801376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 801376c:	2002      	movs	r0, #2
 801376e:	e7fb      	b.n	8013768 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013770:	2003      	movs	r0, #3
 8013772:	e7f9      	b.n	8013768 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013774:	2003      	movs	r0, #3
 8013776:	e7f7      	b.n	8013768 <HAL_UART_Transmit+0xc4>

08013778 <UART_CheckIdleState>:
{
 8013778:	b510      	push	{r4, lr}
 801377a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801377c:	2300      	movs	r3, #0
 801377e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013780:	6803      	ldr	r3, [r0, #0]
 8013782:	4a18      	ldr	r2, [pc, #96]	; (80137e4 <UART_CheckIdleState+0x6c>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d005      	beq.n	8013794 <UART_CheckIdleState+0x1c>
 8013788:	4a17      	ldr	r2, [pc, #92]	; (80137e8 <UART_CheckIdleState+0x70>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d002      	beq.n	8013794 <UART_CheckIdleState+0x1c>
 801378e:	4a17      	ldr	r2, [pc, #92]	; (80137ec <UART_CheckIdleState+0x74>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d106      	bne.n	80137a2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	071b      	lsls	r3, r3, #28
 8013798:	d40b      	bmi.n	80137b2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	075b      	lsls	r3, r3, #29
 80137a0:	d413      	bmi.n	80137ca <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80137a2:	2369      	movs	r3, #105	; 0x69
 80137a4:	2201      	movs	r2, #1
 80137a6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80137a8:	3b01      	subs	r3, #1
 80137aa:	2200      	movs	r2, #0
 80137ac:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80137ae:	2000      	movs	r0, #0
}
 80137b0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137b2:	23fa      	movs	r3, #250	; 0xfa
 80137b4:	2180      	movs	r1, #128	; 0x80
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	2200      	movs	r2, #0
 80137ba:	0389      	lsls	r1, r1, #14
 80137bc:	0020      	movs	r0, r4
 80137be:	f7ff ff09 	bl	80135d4 <UART_WaitOnFlagUntilTimeout>
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d0e9      	beq.n	801379a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80137c6:	2003      	movs	r0, #3
 80137c8:	e7f2      	b.n	80137b0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137ca:	23fa      	movs	r3, #250	; 0xfa
 80137cc:	2180      	movs	r1, #128	; 0x80
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	2200      	movs	r2, #0
 80137d2:	03c9      	lsls	r1, r1, #15
 80137d4:	0020      	movs	r0, r4
 80137d6:	f7ff fefd 	bl	80135d4 <UART_WaitOnFlagUntilTimeout>
 80137da:	2800      	cmp	r0, #0
 80137dc:	d0e1      	beq.n	80137a2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80137de:	2003      	movs	r0, #3
 80137e0:	e7e6      	b.n	80137b0 <UART_CheckIdleState+0x38>
 80137e2:	46c0      	nop			; (mov r8, r8)
 80137e4:	40013800 	.word	0x40013800
 80137e8:	40004400 	.word	0x40004400
 80137ec:	40004800 	.word	0x40004800

080137f0 <HAL_UART_Init>:
{
 80137f0:	b510      	push	{r4, lr}
 80137f2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80137f4:	d030      	beq.n	8013858 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80137f6:	2369      	movs	r3, #105	; 0x69
 80137f8:	5cc3      	ldrb	r3, [r0, r3]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d022      	beq.n	8013844 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80137fe:	2369      	movs	r3, #105	; 0x69
 8013800:	2202      	movs	r2, #2
 8013802:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013804:	6822      	ldr	r2, [r4, #0]
 8013806:	6813      	ldr	r3, [r2, #0]
 8013808:	2101      	movs	r1, #1
 801380a:	438b      	bics	r3, r1
 801380c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801380e:	0020      	movs	r0, r4
 8013810:	f7ff fd4c 	bl	80132ac <UART_SetConfig>
 8013814:	2801      	cmp	r0, #1
 8013816:	d014      	beq.n	8013842 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801381a:	2b00      	cmp	r3, #0
 801381c:	d118      	bne.n	8013850 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801381e:	6822      	ldr	r2, [r4, #0]
 8013820:	6853      	ldr	r3, [r2, #4]
 8013822:	490e      	ldr	r1, [pc, #56]	; (801385c <HAL_UART_Init+0x6c>)
 8013824:	400b      	ands	r3, r1
 8013826:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013828:	6822      	ldr	r2, [r4, #0]
 801382a:	6893      	ldr	r3, [r2, #8]
 801382c:	212a      	movs	r1, #42	; 0x2a
 801382e:	438b      	bics	r3, r1
 8013830:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013832:	6822      	ldr	r2, [r4, #0]
 8013834:	6813      	ldr	r3, [r2, #0]
 8013836:	3929      	subs	r1, #41	; 0x29
 8013838:	430b      	orrs	r3, r1
 801383a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801383c:	0020      	movs	r0, r4
 801383e:	f7ff ff9b 	bl	8013778 <UART_CheckIdleState>
}
 8013842:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013844:	3368      	adds	r3, #104	; 0x68
 8013846:	2200      	movs	r2, #0
 8013848:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801384a:	f7fa fcdf 	bl	800e20c <HAL_UART_MspInit>
 801384e:	e7d6      	b.n	80137fe <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013850:	0020      	movs	r0, r4
 8013852:	f7ff fe4f 	bl	80134f4 <UART_AdvFeatureConfig>
 8013856:	e7e2      	b.n	801381e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013858:	2001      	movs	r0, #1
 801385a:	e7f2      	b.n	8013842 <HAL_UART_Init+0x52>
 801385c:	ffffb7ff 	.word	0xffffb7ff

08013860 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013860:	2369      	movs	r3, #105	; 0x69
 8013862:	5cc3      	ldrb	r3, [r0, r3]
 8013864:	2b12      	cmp	r3, #18
 8013866:	d004      	beq.n	8013872 <UART_Transmit_IT+0x12>
 8013868:	2369      	movs	r3, #105	; 0x69
 801386a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801386c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801386e:	2a32      	cmp	r2, #50	; 0x32
 8013870:	d113      	bne.n	801389a <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8013872:	2352      	movs	r3, #82	; 0x52
 8013874:	5ac3      	ldrh	r3, [r0, r3]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d011      	beq.n	801389e <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801387a:	2380      	movs	r3, #128	; 0x80
 801387c:	015b      	lsls	r3, r3, #5
 801387e:	6882      	ldr	r2, [r0, #8]
 8013880:	429a      	cmp	r2, r3
 8013882:	d018      	beq.n	80138b6 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013884:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013886:	1c5a      	adds	r2, r3, #1
 8013888:	64c2      	str	r2, [r0, #76]	; 0x4c
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	6802      	ldr	r2, [r0, #0]
 801388e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013890:	2252      	movs	r2, #82	; 0x52
 8013892:	5a83      	ldrh	r3, [r0, r2]
 8013894:	3b01      	subs	r3, #1
 8013896:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013898:	2300      	movs	r3, #0
  }
}
 801389a:	0018      	movs	r0, r3
 801389c:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801389e:	6802      	ldr	r2, [r0, #0]
 80138a0:	6813      	ldr	r3, [r2, #0]
 80138a2:	2180      	movs	r1, #128	; 0x80
 80138a4:	438b      	bics	r3, r1
 80138a6:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80138a8:	6802      	ldr	r2, [r0, #0]
 80138aa:	6813      	ldr	r3, [r2, #0]
 80138ac:	3940      	subs	r1, #64	; 0x40
 80138ae:	430b      	orrs	r3, r1
 80138b0:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e7f1      	b.n	801389a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138b6:	6903      	ldr	r3, [r0, #16]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d1e3      	bne.n	8013884 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80138bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80138be:	881b      	ldrh	r3, [r3, #0]
 80138c0:	05db      	lsls	r3, r3, #23
 80138c2:	0ddb      	lsrs	r3, r3, #23
 80138c4:	6802      	ldr	r2, [r0, #0]
 80138c6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80138c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80138ca:	3302      	adds	r3, #2
 80138cc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80138ce:	e7df      	b.n	8013890 <UART_Transmit_IT+0x30>

080138d0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80138d0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80138d2:	6802      	ldr	r2, [r0, #0]
 80138d4:	6813      	ldr	r3, [r2, #0]
 80138d6:	2140      	movs	r1, #64	; 0x40
 80138d8:	438b      	bics	r3, r1
 80138da:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80138dc:	2369      	movs	r3, #105	; 0x69
 80138de:	5cc3      	ldrb	r3, [r0, r3]
 80138e0:	2b32      	cmp	r3, #50	; 0x32
 80138e2:	d00a      	beq.n	80138fa <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80138e4:	6801      	ldr	r1, [r0, #0]
 80138e6:	688b      	ldr	r3, [r1, #8]
 80138e8:	2201      	movs	r2, #1
 80138ea:	4393      	bics	r3, r2
 80138ec:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80138ee:	2369      	movs	r3, #105	; 0x69
 80138f0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80138f2:	f7fa f9c9 	bl	800dc88 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80138f6:	2000      	movs	r0, #0
 80138f8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80138fa:	3337      	adds	r3, #55	; 0x37
 80138fc:	2222      	movs	r2, #34	; 0x22
 80138fe:	54c2      	strb	r2, [r0, r3]
 8013900:	e7f7      	b.n	80138f2 <UART_EndTransmit_IT+0x22>
	...

08013904 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013904:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013906:	2369      	movs	r3, #105	; 0x69
 8013908:	5cc3      	ldrb	r3, [r0, r3]
 801390a:	2b22      	cmp	r3, #34	; 0x22
 801390c:	d004      	beq.n	8013918 <UART_Receive_IT+0x14>
 801390e:	2369      	movs	r3, #105	; 0x69
 8013910:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013912:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013914:	2b32      	cmp	r3, #50	; 0x32
 8013916:	d12d      	bne.n	8013974 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8013918:	235c      	movs	r3, #92	; 0x5c
 801391a:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801391c:	2280      	movs	r2, #128	; 0x80
 801391e:	0152      	lsls	r2, r2, #5
 8013920:	6883      	ldr	r3, [r0, #8]
 8013922:	4293      	cmp	r3, r2
 8013924:	d028      	beq.n	8013978 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013926:	6803      	ldr	r3, [r0, #0]
 8013928:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801392a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801392c:	1c54      	adds	r4, r2, #1
 801392e:	6544      	str	r4, [r0, #84]	; 0x54
 8013930:	400b      	ands	r3, r1
 8013932:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013934:	225a      	movs	r2, #90	; 0x5a
 8013936:	5a83      	ldrh	r3, [r0, r2]
 8013938:	3b01      	subs	r3, #1
 801393a:	b29b      	uxth	r3, r3
 801393c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801393e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8013940:	2b00      	cmp	r3, #0
 8013942:	d117      	bne.n	8013974 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013944:	6802      	ldr	r2, [r0, #0]
 8013946:	6813      	ldr	r3, [r2, #0]
 8013948:	2120      	movs	r1, #32
 801394a:	438b      	bics	r3, r1
 801394c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801394e:	2369      	movs	r3, #105	; 0x69
 8013950:	5cc3      	ldrb	r3, [r0, r3]
 8013952:	2b32      	cmp	r3, #50	; 0x32
 8013954:	d01c      	beq.n	8013990 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013956:	6802      	ldr	r2, [r0, #0]
 8013958:	6813      	ldr	r3, [r2, #0]
 801395a:	490f      	ldr	r1, [pc, #60]	; (8013998 <UART_Receive_IT+0x94>)
 801395c:	400b      	ands	r3, r1
 801395e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013960:	6801      	ldr	r1, [r0, #0]
 8013962:	688b      	ldr	r3, [r1, #8]
 8013964:	2201      	movs	r2, #1
 8013966:	4393      	bics	r3, r2
 8013968:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 801396a:	2369      	movs	r3, #105	; 0x69
 801396c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801396e:	f7fa f9c9 	bl	800dd04 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013972:	2200      	movs	r2, #0
  }
}
 8013974:	0010      	movs	r0, r2
 8013976:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013978:	6903      	ldr	r3, [r0, #16]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d1d3      	bne.n	8013926 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801397e:	6803      	ldr	r3, [r0, #0]
 8013980:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013982:	400b      	ands	r3, r1
 8013984:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013986:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013988:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801398a:	3302      	adds	r3, #2
 801398c:	6543      	str	r3, [r0, #84]	; 0x54
 801398e:	e7d1      	b.n	8013934 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013990:	3337      	adds	r3, #55	; 0x37
 8013992:	2212      	movs	r2, #18
 8013994:	54c2      	strb	r2, [r0, r3]
 8013996:	e7ea      	b.n	801396e <UART_Receive_IT+0x6a>
 8013998:	fffffeff 	.word	0xfffffeff

0801399c <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 801399c:	4770      	bx	lr

0801399e <HAL_UART_IRQHandler>:
{
 801399e:	b510      	push	{r4, lr}
 80139a0:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80139a2:	6803      	ldr	r3, [r0, #0]
 80139a4:	69da      	ldr	r2, [r3, #28]
 80139a6:	07d2      	lsls	r2, r2, #31
 80139a8:	d509      	bpl.n	80139be <HAL_UART_IRQHandler+0x20>
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	05d2      	lsls	r2, r2, #23
 80139ae:	d506      	bpl.n	80139be <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80139b0:	2201      	movs	r2, #1
 80139b2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80139b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80139b6:	4313      	orrs	r3, r2
 80139b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80139ba:	2369      	movs	r3, #105	; 0x69
 80139bc:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139be:	6823      	ldr	r3, [r4, #0]
 80139c0:	69da      	ldr	r2, [r3, #28]
 80139c2:	0792      	lsls	r2, r2, #30
 80139c4:	d50b      	bpl.n	80139de <HAL_UART_IRQHandler+0x40>
 80139c6:	689a      	ldr	r2, [r3, #8]
 80139c8:	07d2      	lsls	r2, r2, #31
 80139ca:	d508      	bpl.n	80139de <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80139cc:	2202      	movs	r2, #2
 80139ce:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80139d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80139d2:	3202      	adds	r2, #2
 80139d4:	4313      	orrs	r3, r2
 80139d6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80139d8:	2369      	movs	r3, #105	; 0x69
 80139da:	3a03      	subs	r2, #3
 80139dc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139de:	6823      	ldr	r3, [r4, #0]
 80139e0:	69da      	ldr	r2, [r3, #28]
 80139e2:	0752      	lsls	r2, r2, #29
 80139e4:	d50b      	bpl.n	80139fe <HAL_UART_IRQHandler+0x60>
 80139e6:	689a      	ldr	r2, [r3, #8]
 80139e8:	07d2      	lsls	r2, r2, #31
 80139ea:	d508      	bpl.n	80139fe <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80139ec:	2204      	movs	r2, #4
 80139ee:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80139f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80139f2:	3a02      	subs	r2, #2
 80139f4:	4313      	orrs	r3, r2
 80139f6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80139f8:	2369      	movs	r3, #105	; 0x69
 80139fa:	3a01      	subs	r2, #1
 80139fc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139fe:	6823      	ldr	r3, [r4, #0]
 8013a00:	69da      	ldr	r2, [r3, #28]
 8013a02:	0712      	lsls	r2, r2, #28
 8013a04:	d50a      	bpl.n	8013a1c <HAL_UART_IRQHandler+0x7e>
 8013a06:	689a      	ldr	r2, [r3, #8]
 8013a08:	07d2      	lsls	r2, r2, #31
 8013a0a:	d507      	bpl.n	8013a1c <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013a0c:	2208      	movs	r2, #8
 8013a0e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013a10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a12:	4313      	orrs	r3, r2
 8013a14:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a16:	2369      	movs	r3, #105	; 0x69
 8013a18:	3a07      	subs	r2, #7
 8013a1a:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013a1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d11c      	bne.n	8013a5c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013a22:	6823      	ldr	r3, [r4, #0]
 8013a24:	69da      	ldr	r2, [r3, #28]
 8013a26:	02d2      	lsls	r2, r2, #11
 8013a28:	d502      	bpl.n	8013a30 <HAL_UART_IRQHandler+0x92>
 8013a2a:	689a      	ldr	r2, [r3, #8]
 8013a2c:	0252      	lsls	r2, r2, #9
 8013a2e:	d419      	bmi.n	8013a64 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	69da      	ldr	r2, [r3, #28]
 8013a34:	0692      	lsls	r2, r2, #26
 8013a36:	d502      	bpl.n	8013a3e <HAL_UART_IRQHandler+0xa0>
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	069b      	lsls	r3, r3, #26
 8013a3c:	d41c      	bmi.n	8013a78 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	69da      	ldr	r2, [r3, #28]
 8013a42:	0612      	lsls	r2, r2, #24
 8013a44:	d502      	bpl.n	8013a4c <HAL_UART_IRQHandler+0xae>
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	061b      	lsls	r3, r3, #24
 8013a4a:	d41e      	bmi.n	8013a8a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013a4c:	6823      	ldr	r3, [r4, #0]
 8013a4e:	69da      	ldr	r2, [r3, #28]
 8013a50:	0652      	lsls	r2, r2, #25
 8013a52:	d502      	bpl.n	8013a5a <HAL_UART_IRQHandler+0xbc>
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	065b      	lsls	r3, r3, #25
 8013a58:	d41b      	bmi.n	8013a92 <HAL_UART_IRQHandler+0xf4>
}
 8013a5a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013a5c:	0020      	movs	r0, r4
 8013a5e:	f7fa f92b 	bl	800dcb8 <HAL_UART_ErrorCallback>
 8013a62:	e7de      	b.n	8013a22 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013a64:	2280      	movs	r2, #128	; 0x80
 8013a66:	0352      	lsls	r2, r2, #13
 8013a68:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013a6a:	2369      	movs	r3, #105	; 0x69
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013a70:	0020      	movs	r0, r4
 8013a72:	f7ff ff93 	bl	801399c <HAL_UARTEx_WakeupCallback>
 8013a76:	e7db      	b.n	8013a30 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013a78:	0020      	movs	r0, r4
 8013a7a:	f7ff ff43 	bl	8013904 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a7e:	6822      	ldr	r2, [r4, #0]
 8013a80:	6993      	ldr	r3, [r2, #24]
 8013a82:	2108      	movs	r1, #8
 8013a84:	430b      	orrs	r3, r1
 8013a86:	6193      	str	r3, [r2, #24]
 8013a88:	e7d9      	b.n	8013a3e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013a8a:	0020      	movs	r0, r4
 8013a8c:	f7ff fee8 	bl	8013860 <UART_Transmit_IT>
 8013a90:	e7dc      	b.n	8013a4c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013a92:	0020      	movs	r0, r4
 8013a94:	f7ff ff1c 	bl	80138d0 <UART_EndTransmit_IT>
}
 8013a98:	e7df      	b.n	8013a5a <HAL_UART_IRQHandler+0xbc>

08013a9a <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013a9a:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013a9c:	f7f0 fea4 	bl	80047e8 <Module_Init>
 8013aa0:	e7fe      	b.n	8013aa0 <main+0x6>

08013aa2 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8013aa2:	e7fe      	b.n	8013aa2 <UserTask>

08013aa4 <atof>:
 8013aa4:	b510      	push	{r4, lr}
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	f001 fcba 	bl	8015420 <strtod>
 8013aac:	bd10      	pop	{r4, pc}

08013aae <atoi>:
 8013aae:	b510      	push	{r4, lr}
 8013ab0:	220a      	movs	r2, #10
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	f001 fd9e 	bl	80155f4 <strtol>
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <atol>:
 8013aba:	b510      	push	{r4, lr}
 8013abc:	220a      	movs	r2, #10
 8013abe:	2100      	movs	r1, #0
 8013ac0:	f001 fd98 	bl	80155f4 <strtol>
 8013ac4:	bd10      	pop	{r4, pc}
	...

08013ac8 <__libc_init_array>:
 8013ac8:	b570      	push	{r4, r5, r6, lr}
 8013aca:	2600      	movs	r6, #0
 8013acc:	4d0c      	ldr	r5, [pc, #48]	; (8013b00 <__libc_init_array+0x38>)
 8013ace:	4c0d      	ldr	r4, [pc, #52]	; (8013b04 <__libc_init_array+0x3c>)
 8013ad0:	1b64      	subs	r4, r4, r5
 8013ad2:	10a4      	asrs	r4, r4, #2
 8013ad4:	42a6      	cmp	r6, r4
 8013ad6:	d109      	bne.n	8013aec <__libc_init_array+0x24>
 8013ad8:	2600      	movs	r6, #0
 8013ada:	f003 fd15 	bl	8017508 <_init>
 8013ade:	4d0a      	ldr	r5, [pc, #40]	; (8013b08 <__libc_init_array+0x40>)
 8013ae0:	4c0a      	ldr	r4, [pc, #40]	; (8013b0c <__libc_init_array+0x44>)
 8013ae2:	1b64      	subs	r4, r4, r5
 8013ae4:	10a4      	asrs	r4, r4, #2
 8013ae6:	42a6      	cmp	r6, r4
 8013ae8:	d105      	bne.n	8013af6 <__libc_init_array+0x2e>
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
 8013aec:	00b3      	lsls	r3, r6, #2
 8013aee:	58eb      	ldr	r3, [r5, r3]
 8013af0:	4798      	blx	r3
 8013af2:	3601      	adds	r6, #1
 8013af4:	e7ee      	b.n	8013ad4 <__libc_init_array+0xc>
 8013af6:	00b3      	lsls	r3, r6, #2
 8013af8:	58eb      	ldr	r3, [r5, r3]
 8013afa:	4798      	blx	r3
 8013afc:	3601      	adds	r6, #1
 8013afe:	e7f2      	b.n	8013ae6 <__libc_init_array+0x1e>
 8013b00:	0801a8e0 	.word	0x0801a8e0
 8013b04:	0801a8e0 	.word	0x0801a8e0
 8013b08:	0801a8e0 	.word	0x0801a8e0
 8013b0c:	0801a8e4 	.word	0x0801a8e4

08013b10 <__locale_ctype_ptr_l>:
 8013b10:	30ec      	adds	r0, #236	; 0xec
 8013b12:	6800      	ldr	r0, [r0, #0]
 8013b14:	4770      	bx	lr
	...

08013b18 <__locale_ctype_ptr>:
 8013b18:	4b04      	ldr	r3, [pc, #16]	; (8013b2c <__locale_ctype_ptr+0x14>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	6a1b      	ldr	r3, [r3, #32]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d100      	bne.n	8013b24 <__locale_ctype_ptr+0xc>
 8013b22:	4b03      	ldr	r3, [pc, #12]	; (8013b30 <__locale_ctype_ptr+0x18>)
 8013b24:	33ec      	adds	r3, #236	; 0xec
 8013b26:	6818      	ldr	r0, [r3, #0]
 8013b28:	4770      	bx	lr
 8013b2a:	46c0      	nop			; (mov r8, r8)
 8013b2c:	200000c4 	.word	0x200000c4
 8013b30:	20000128 	.word	0x20000128

08013b34 <malloc>:
 8013b34:	b510      	push	{r4, lr}
 8013b36:	4b03      	ldr	r3, [pc, #12]	; (8013b44 <malloc+0x10>)
 8013b38:	0001      	movs	r1, r0
 8013b3a:	6818      	ldr	r0, [r3, #0]
 8013b3c:	f000 f88a 	bl	8013c54 <_malloc_r>
 8013b40:	bd10      	pop	{r4, pc}
 8013b42:	46c0      	nop			; (mov r8, r8)
 8013b44:	200000c4 	.word	0x200000c4

08013b48 <free>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	4b03      	ldr	r3, [pc, #12]	; (8013b58 <free+0x10>)
 8013b4c:	0001      	movs	r1, r0
 8013b4e:	6818      	ldr	r0, [r3, #0]
 8013b50:	f000 f836 	bl	8013bc0 <_free_r>
 8013b54:	bd10      	pop	{r4, pc}
 8013b56:	46c0      	nop			; (mov r8, r8)
 8013b58:	200000c4 	.word	0x200000c4

08013b5c <__ascii_mbtowc>:
 8013b5c:	b082      	sub	sp, #8
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	d100      	bne.n	8013b64 <__ascii_mbtowc+0x8>
 8013b62:	a901      	add	r1, sp, #4
 8013b64:	1e10      	subs	r0, r2, #0
 8013b66:	d006      	beq.n	8013b76 <__ascii_mbtowc+0x1a>
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d006      	beq.n	8013b7a <__ascii_mbtowc+0x1e>
 8013b6c:	7813      	ldrb	r3, [r2, #0]
 8013b6e:	600b      	str	r3, [r1, #0]
 8013b70:	7810      	ldrb	r0, [r2, #0]
 8013b72:	1e43      	subs	r3, r0, #1
 8013b74:	4198      	sbcs	r0, r3
 8013b76:	b002      	add	sp, #8
 8013b78:	4770      	bx	lr
 8013b7a:	2002      	movs	r0, #2
 8013b7c:	4240      	negs	r0, r0
 8013b7e:	e7fa      	b.n	8013b76 <__ascii_mbtowc+0x1a>

08013b80 <memcmp>:
 8013b80:	b530      	push	{r4, r5, lr}
 8013b82:	2400      	movs	r4, #0
 8013b84:	42a2      	cmp	r2, r4
 8013b86:	d101      	bne.n	8013b8c <memcmp+0xc>
 8013b88:	2000      	movs	r0, #0
 8013b8a:	e005      	b.n	8013b98 <memcmp+0x18>
 8013b8c:	5d03      	ldrb	r3, [r0, r4]
 8013b8e:	1c65      	adds	r5, r4, #1
 8013b90:	5d0c      	ldrb	r4, [r1, r4]
 8013b92:	42a3      	cmp	r3, r4
 8013b94:	d001      	beq.n	8013b9a <memcmp+0x1a>
 8013b96:	1b18      	subs	r0, r3, r4
 8013b98:	bd30      	pop	{r4, r5, pc}
 8013b9a:	002c      	movs	r4, r5
 8013b9c:	e7f2      	b.n	8013b84 <memcmp+0x4>

08013b9e <memcpy>:
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	b510      	push	{r4, lr}
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d100      	bne.n	8013ba8 <memcpy+0xa>
 8013ba6:	bd10      	pop	{r4, pc}
 8013ba8:	5ccc      	ldrb	r4, [r1, r3]
 8013baa:	54c4      	strb	r4, [r0, r3]
 8013bac:	3301      	adds	r3, #1
 8013bae:	e7f8      	b.n	8013ba2 <memcpy+0x4>

08013bb0 <memset>:
 8013bb0:	0003      	movs	r3, r0
 8013bb2:	1812      	adds	r2, r2, r0
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d100      	bne.n	8013bba <memset+0xa>
 8013bb8:	4770      	bx	lr
 8013bba:	7019      	strb	r1, [r3, #0]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	e7f9      	b.n	8013bb4 <memset+0x4>

08013bc0 <_free_r>:
 8013bc0:	b570      	push	{r4, r5, r6, lr}
 8013bc2:	0005      	movs	r5, r0
 8013bc4:	2900      	cmp	r1, #0
 8013bc6:	d010      	beq.n	8013bea <_free_r+0x2a>
 8013bc8:	1f0c      	subs	r4, r1, #4
 8013bca:	6823      	ldr	r3, [r4, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	da00      	bge.n	8013bd2 <_free_r+0x12>
 8013bd0:	18e4      	adds	r4, r4, r3
 8013bd2:	0028      	movs	r0, r5
 8013bd4:	f002 fedf 	bl	8016996 <__malloc_lock>
 8013bd8:	4a1d      	ldr	r2, [pc, #116]	; (8013c50 <_free_r+0x90>)
 8013bda:	6813      	ldr	r3, [r2, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d105      	bne.n	8013bec <_free_r+0x2c>
 8013be0:	6063      	str	r3, [r4, #4]
 8013be2:	6014      	str	r4, [r2, #0]
 8013be4:	0028      	movs	r0, r5
 8013be6:	f002 fed7 	bl	8016998 <__malloc_unlock>
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	d909      	bls.n	8013c04 <_free_r+0x44>
 8013bf0:	6821      	ldr	r1, [r4, #0]
 8013bf2:	1860      	adds	r0, r4, r1
 8013bf4:	4283      	cmp	r3, r0
 8013bf6:	d1f3      	bne.n	8013be0 <_free_r+0x20>
 8013bf8:	6818      	ldr	r0, [r3, #0]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	1841      	adds	r1, r0, r1
 8013bfe:	6021      	str	r1, [r4, #0]
 8013c00:	e7ee      	b.n	8013be0 <_free_r+0x20>
 8013c02:	0013      	movs	r3, r2
 8013c04:	685a      	ldr	r2, [r3, #4]
 8013c06:	2a00      	cmp	r2, #0
 8013c08:	d001      	beq.n	8013c0e <_free_r+0x4e>
 8013c0a:	42a2      	cmp	r2, r4
 8013c0c:	d9f9      	bls.n	8013c02 <_free_r+0x42>
 8013c0e:	6819      	ldr	r1, [r3, #0]
 8013c10:	1858      	adds	r0, r3, r1
 8013c12:	42a0      	cmp	r0, r4
 8013c14:	d10b      	bne.n	8013c2e <_free_r+0x6e>
 8013c16:	6820      	ldr	r0, [r4, #0]
 8013c18:	1809      	adds	r1, r1, r0
 8013c1a:	1858      	adds	r0, r3, r1
 8013c1c:	6019      	str	r1, [r3, #0]
 8013c1e:	4282      	cmp	r2, r0
 8013c20:	d1e0      	bne.n	8013be4 <_free_r+0x24>
 8013c22:	6810      	ldr	r0, [r2, #0]
 8013c24:	6852      	ldr	r2, [r2, #4]
 8013c26:	1841      	adds	r1, r0, r1
 8013c28:	6019      	str	r1, [r3, #0]
 8013c2a:	605a      	str	r2, [r3, #4]
 8013c2c:	e7da      	b.n	8013be4 <_free_r+0x24>
 8013c2e:	42a0      	cmp	r0, r4
 8013c30:	d902      	bls.n	8013c38 <_free_r+0x78>
 8013c32:	230c      	movs	r3, #12
 8013c34:	602b      	str	r3, [r5, #0]
 8013c36:	e7d5      	b.n	8013be4 <_free_r+0x24>
 8013c38:	6821      	ldr	r1, [r4, #0]
 8013c3a:	1860      	adds	r0, r4, r1
 8013c3c:	4282      	cmp	r2, r0
 8013c3e:	d103      	bne.n	8013c48 <_free_r+0x88>
 8013c40:	6810      	ldr	r0, [r2, #0]
 8013c42:	6852      	ldr	r2, [r2, #4]
 8013c44:	1841      	adds	r1, r0, r1
 8013c46:	6021      	str	r1, [r4, #0]
 8013c48:	6062      	str	r2, [r4, #4]
 8013c4a:	605c      	str	r4, [r3, #4]
 8013c4c:	e7ca      	b.n	8013be4 <_free_r+0x24>
 8013c4e:	46c0      	nop			; (mov r8, r8)
 8013c50:	200061ec 	.word	0x200061ec

08013c54 <_malloc_r>:
 8013c54:	2303      	movs	r3, #3
 8013c56:	b570      	push	{r4, r5, r6, lr}
 8013c58:	1ccd      	adds	r5, r1, #3
 8013c5a:	439d      	bics	r5, r3
 8013c5c:	3508      	adds	r5, #8
 8013c5e:	0006      	movs	r6, r0
 8013c60:	2d0c      	cmp	r5, #12
 8013c62:	d21e      	bcs.n	8013ca2 <_malloc_r+0x4e>
 8013c64:	250c      	movs	r5, #12
 8013c66:	42a9      	cmp	r1, r5
 8013c68:	d81d      	bhi.n	8013ca6 <_malloc_r+0x52>
 8013c6a:	0030      	movs	r0, r6
 8013c6c:	f002 fe93 	bl	8016996 <__malloc_lock>
 8013c70:	4a25      	ldr	r2, [pc, #148]	; (8013d08 <_malloc_r+0xb4>)
 8013c72:	6814      	ldr	r4, [r2, #0]
 8013c74:	0021      	movs	r1, r4
 8013c76:	2900      	cmp	r1, #0
 8013c78:	d119      	bne.n	8013cae <_malloc_r+0x5a>
 8013c7a:	4c24      	ldr	r4, [pc, #144]	; (8013d0c <_malloc_r+0xb8>)
 8013c7c:	6823      	ldr	r3, [r4, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d103      	bne.n	8013c8a <_malloc_r+0x36>
 8013c82:	0030      	movs	r0, r6
 8013c84:	f000 fcde 	bl	8014644 <_sbrk_r>
 8013c88:	6020      	str	r0, [r4, #0]
 8013c8a:	0029      	movs	r1, r5
 8013c8c:	0030      	movs	r0, r6
 8013c8e:	f000 fcd9 	bl	8014644 <_sbrk_r>
 8013c92:	1c43      	adds	r3, r0, #1
 8013c94:	d12b      	bne.n	8013cee <_malloc_r+0x9a>
 8013c96:	230c      	movs	r3, #12
 8013c98:	0030      	movs	r0, r6
 8013c9a:	6033      	str	r3, [r6, #0]
 8013c9c:	f002 fe7c 	bl	8016998 <__malloc_unlock>
 8013ca0:	e003      	b.n	8013caa <_malloc_r+0x56>
 8013ca2:	2d00      	cmp	r5, #0
 8013ca4:	dadf      	bge.n	8013c66 <_malloc_r+0x12>
 8013ca6:	230c      	movs	r3, #12
 8013ca8:	6033      	str	r3, [r6, #0]
 8013caa:	2000      	movs	r0, #0
 8013cac:	bd70      	pop	{r4, r5, r6, pc}
 8013cae:	680b      	ldr	r3, [r1, #0]
 8013cb0:	1b5b      	subs	r3, r3, r5
 8013cb2:	d419      	bmi.n	8013ce8 <_malloc_r+0x94>
 8013cb4:	2b0b      	cmp	r3, #11
 8013cb6:	d903      	bls.n	8013cc0 <_malloc_r+0x6c>
 8013cb8:	600b      	str	r3, [r1, #0]
 8013cba:	18cc      	adds	r4, r1, r3
 8013cbc:	6025      	str	r5, [r4, #0]
 8013cbe:	e003      	b.n	8013cc8 <_malloc_r+0x74>
 8013cc0:	684b      	ldr	r3, [r1, #4]
 8013cc2:	428c      	cmp	r4, r1
 8013cc4:	d10d      	bne.n	8013ce2 <_malloc_r+0x8e>
 8013cc6:	6013      	str	r3, [r2, #0]
 8013cc8:	0030      	movs	r0, r6
 8013cca:	f002 fe65 	bl	8016998 <__malloc_unlock>
 8013cce:	0020      	movs	r0, r4
 8013cd0:	2207      	movs	r2, #7
 8013cd2:	300b      	adds	r0, #11
 8013cd4:	1d23      	adds	r3, r4, #4
 8013cd6:	4390      	bics	r0, r2
 8013cd8:	1ac3      	subs	r3, r0, r3
 8013cda:	d0e7      	beq.n	8013cac <_malloc_r+0x58>
 8013cdc:	425a      	negs	r2, r3
 8013cde:	50e2      	str	r2, [r4, r3]
 8013ce0:	e7e4      	b.n	8013cac <_malloc_r+0x58>
 8013ce2:	6063      	str	r3, [r4, #4]
 8013ce4:	000c      	movs	r4, r1
 8013ce6:	e7ef      	b.n	8013cc8 <_malloc_r+0x74>
 8013ce8:	000c      	movs	r4, r1
 8013cea:	6849      	ldr	r1, [r1, #4]
 8013cec:	e7c3      	b.n	8013c76 <_malloc_r+0x22>
 8013cee:	2303      	movs	r3, #3
 8013cf0:	1cc4      	adds	r4, r0, #3
 8013cf2:	439c      	bics	r4, r3
 8013cf4:	42a0      	cmp	r0, r4
 8013cf6:	d0e1      	beq.n	8013cbc <_malloc_r+0x68>
 8013cf8:	1a21      	subs	r1, r4, r0
 8013cfa:	0030      	movs	r0, r6
 8013cfc:	f000 fca2 	bl	8014644 <_sbrk_r>
 8013d00:	1c43      	adds	r3, r0, #1
 8013d02:	d1db      	bne.n	8013cbc <_malloc_r+0x68>
 8013d04:	e7c7      	b.n	8013c96 <_malloc_r+0x42>
 8013d06:	46c0      	nop			; (mov r8, r8)
 8013d08:	200061ec 	.word	0x200061ec
 8013d0c:	200061f0 	.word	0x200061f0

08013d10 <__cvt>:
 8013d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d12:	b08b      	sub	sp, #44	; 0x2c
 8013d14:	0014      	movs	r4, r2
 8013d16:	1e1d      	subs	r5, r3, #0
 8013d18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013d1a:	da53      	bge.n	8013dc4 <__cvt+0xb4>
 8013d1c:	2480      	movs	r4, #128	; 0x80
 8013d1e:	0624      	lsls	r4, r4, #24
 8013d20:	191b      	adds	r3, r3, r4
 8013d22:	001d      	movs	r5, r3
 8013d24:	0014      	movs	r4, r2
 8013d26:	232d      	movs	r3, #45	; 0x2d
 8013d28:	700b      	strb	r3, [r1, #0]
 8013d2a:	2320      	movs	r3, #32
 8013d2c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013d2e:	2203      	movs	r2, #3
 8013d30:	439e      	bics	r6, r3
 8013d32:	2e46      	cmp	r6, #70	; 0x46
 8013d34:	d007      	beq.n	8013d46 <__cvt+0x36>
 8013d36:	0033      	movs	r3, r6
 8013d38:	3b45      	subs	r3, #69	; 0x45
 8013d3a:	4259      	negs	r1, r3
 8013d3c:	414b      	adcs	r3, r1
 8013d3e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013d40:	3a01      	subs	r2, #1
 8013d42:	18cb      	adds	r3, r1, r3
 8013d44:	9310      	str	r3, [sp, #64]	; 0x40
 8013d46:	ab09      	add	r3, sp, #36	; 0x24
 8013d48:	9304      	str	r3, [sp, #16]
 8013d4a:	ab08      	add	r3, sp, #32
 8013d4c:	9303      	str	r3, [sp, #12]
 8013d4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d50:	9200      	str	r2, [sp, #0]
 8013d52:	9302      	str	r3, [sp, #8]
 8013d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d56:	0022      	movs	r2, r4
 8013d58:	9301      	str	r3, [sp, #4]
 8013d5a:	002b      	movs	r3, r5
 8013d5c:	f001 fcf0 	bl	8015740 <_dtoa_r>
 8013d60:	0007      	movs	r7, r0
 8013d62:	2e47      	cmp	r6, #71	; 0x47
 8013d64:	d102      	bne.n	8013d6c <__cvt+0x5c>
 8013d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d68:	07db      	lsls	r3, r3, #31
 8013d6a:	d524      	bpl.n	8013db6 <__cvt+0xa6>
 8013d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	9307      	str	r3, [sp, #28]
 8013d72:	2e46      	cmp	r6, #70	; 0x46
 8013d74:	d114      	bne.n	8013da0 <__cvt+0x90>
 8013d76:	783b      	ldrb	r3, [r7, #0]
 8013d78:	2b30      	cmp	r3, #48	; 0x30
 8013d7a:	d10c      	bne.n	8013d96 <__cvt+0x86>
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	2300      	movs	r3, #0
 8013d80:	0020      	movs	r0, r4
 8013d82:	0029      	movs	r1, r5
 8013d84:	f7ec fb60 	bl	8000448 <__aeabi_dcmpeq>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	d104      	bne.n	8013d96 <__cvt+0x86>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d90:	1a9b      	subs	r3, r3, r2
 8013d92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d98:	9a07      	ldr	r2, [sp, #28]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	18d3      	adds	r3, r2, r3
 8013d9e:	9307      	str	r3, [sp, #28]
 8013da0:	2200      	movs	r2, #0
 8013da2:	2300      	movs	r3, #0
 8013da4:	0020      	movs	r0, r4
 8013da6:	0029      	movs	r1, r5
 8013da8:	f7ec fb4e 	bl	8000448 <__aeabi_dcmpeq>
 8013dac:	2230      	movs	r2, #48	; 0x30
 8013dae:	2800      	cmp	r0, #0
 8013db0:	d00d      	beq.n	8013dce <__cvt+0xbe>
 8013db2:	9b07      	ldr	r3, [sp, #28]
 8013db4:	9309      	str	r3, [sp, #36]	; 0x24
 8013db6:	0038      	movs	r0, r7
 8013db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013dbc:	1bdb      	subs	r3, r3, r7
 8013dbe:	6013      	str	r3, [r2, #0]
 8013dc0:	b00b      	add	sp, #44	; 0x2c
 8013dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	e7af      	b.n	8013d28 <__cvt+0x18>
 8013dc8:	1c59      	adds	r1, r3, #1
 8013dca:	9109      	str	r1, [sp, #36]	; 0x24
 8013dcc:	701a      	strb	r2, [r3, #0]
 8013dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dd0:	9907      	ldr	r1, [sp, #28]
 8013dd2:	428b      	cmp	r3, r1
 8013dd4:	d3f8      	bcc.n	8013dc8 <__cvt+0xb8>
 8013dd6:	e7ee      	b.n	8013db6 <__cvt+0xa6>

08013dd8 <__exponent>:
 8013dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dda:	1c83      	adds	r3, r0, #2
 8013ddc:	b085      	sub	sp, #20
 8013dde:	9301      	str	r3, [sp, #4]
 8013de0:	0006      	movs	r6, r0
 8013de2:	000c      	movs	r4, r1
 8013de4:	7002      	strb	r2, [r0, #0]
 8013de6:	232b      	movs	r3, #43	; 0x2b
 8013de8:	2900      	cmp	r1, #0
 8013dea:	da01      	bge.n	8013df0 <__exponent+0x18>
 8013dec:	232d      	movs	r3, #45	; 0x2d
 8013dee:	424c      	negs	r4, r1
 8013df0:	7073      	strb	r3, [r6, #1]
 8013df2:	2c09      	cmp	r4, #9
 8013df4:	dd22      	ble.n	8013e3c <__exponent+0x64>
 8013df6:	ab02      	add	r3, sp, #8
 8013df8:	1ddd      	adds	r5, r3, #7
 8013dfa:	0020      	movs	r0, r4
 8013dfc:	210a      	movs	r1, #10
 8013dfe:	f7ec fb0d 	bl	800041c <__aeabi_idivmod>
 8013e02:	1e6f      	subs	r7, r5, #1
 8013e04:	3130      	adds	r1, #48	; 0x30
 8013e06:	7039      	strb	r1, [r7, #0]
 8013e08:	0020      	movs	r0, r4
 8013e0a:	210a      	movs	r1, #10
 8013e0c:	f7ec fa20 	bl	8000250 <__divsi3>
 8013e10:	0004      	movs	r4, r0
 8013e12:	2809      	cmp	r0, #9
 8013e14:	dc0b      	bgt.n	8013e2e <__exponent+0x56>
 8013e16:	3d02      	subs	r5, #2
 8013e18:	3430      	adds	r4, #48	; 0x30
 8013e1a:	9b01      	ldr	r3, [sp, #4]
 8013e1c:	702c      	strb	r4, [r5, #0]
 8013e1e:	aa02      	add	r2, sp, #8
 8013e20:	3207      	adds	r2, #7
 8013e22:	0018      	movs	r0, r3
 8013e24:	42aa      	cmp	r2, r5
 8013e26:	d804      	bhi.n	8013e32 <__exponent+0x5a>
 8013e28:	1b80      	subs	r0, r0, r6
 8013e2a:	b005      	add	sp, #20
 8013e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e2e:	003d      	movs	r5, r7
 8013e30:	e7e3      	b.n	8013dfa <__exponent+0x22>
 8013e32:	782a      	ldrb	r2, [r5, #0]
 8013e34:	3501      	adds	r5, #1
 8013e36:	701a      	strb	r2, [r3, #0]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	e7f0      	b.n	8013e1e <__exponent+0x46>
 8013e3c:	2330      	movs	r3, #48	; 0x30
 8013e3e:	18e4      	adds	r4, r4, r3
 8013e40:	70b3      	strb	r3, [r6, #2]
 8013e42:	1d30      	adds	r0, r6, #4
 8013e44:	70f4      	strb	r4, [r6, #3]
 8013e46:	e7ef      	b.n	8013e28 <__exponent+0x50>

08013e48 <_printf_float>:
 8013e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e4a:	b095      	sub	sp, #84	; 0x54
 8013e4c:	000c      	movs	r4, r1
 8013e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8013e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013e54:	9009      	str	r0, [sp, #36]	; 0x24
 8013e56:	f002 fd87 	bl	8016968 <_localeconv_r>
 8013e5a:	6803      	ldr	r3, [r0, #0]
 8013e5c:	0018      	movs	r0, r3
 8013e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8013e60:	f7ec f95a 	bl	8000118 <strlen>
 8013e64:	2300      	movs	r3, #0
 8013e66:	9312      	str	r3, [sp, #72]	; 0x48
 8013e68:	6823      	ldr	r3, [r4, #0]
 8013e6a:	900e      	str	r0, [sp, #56]	; 0x38
 8013e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8013e6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e70:	7e27      	ldrb	r7, [r4, #24]
 8013e72:	682b      	ldr	r3, [r5, #0]
 8013e74:	2207      	movs	r2, #7
 8013e76:	05c9      	lsls	r1, r1, #23
 8013e78:	d545      	bpl.n	8013f06 <_printf_float+0xbe>
 8013e7a:	189b      	adds	r3, r3, r2
 8013e7c:	4393      	bics	r3, r2
 8013e7e:	001a      	movs	r2, r3
 8013e80:	3208      	adds	r2, #8
 8013e82:	602a      	str	r2, [r5, #0]
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	64a2      	str	r2, [r4, #72]	; 0x48
 8013e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013e90:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8013e92:	006b      	lsls	r3, r5, #1
 8013e94:	085b      	lsrs	r3, r3, #1
 8013e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e98:	4252      	negs	r2, r2
 8013e9a:	4bac      	ldr	r3, [pc, #688]	; (801414c <_printf_float+0x304>)
 8013e9c:	0030      	movs	r0, r6
 8013e9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ea0:	f7ee fe30 	bl	8002b04 <__aeabi_dcmpun>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d130      	bne.n	8013f0a <_printf_float+0xc2>
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	4ba8      	ldr	r3, [pc, #672]	; (801414c <_printf_float+0x304>)
 8013eac:	4252      	negs	r2, r2
 8013eae:	0030      	movs	r0, r6
 8013eb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013eb2:	f7ec fad9 	bl	8000468 <__aeabi_dcmple>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d127      	bne.n	8013f0a <_printf_float+0xc2>
 8013eba:	2200      	movs	r2, #0
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	0030      	movs	r0, r6
 8013ec0:	0029      	movs	r1, r5
 8013ec2:	f7ec fac7 	bl	8000454 <__aeabi_dcmplt>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d003      	beq.n	8013ed2 <_printf_float+0x8a>
 8013eca:	0023      	movs	r3, r4
 8013ecc:	222d      	movs	r2, #45	; 0x2d
 8013ece:	3343      	adds	r3, #67	; 0x43
 8013ed0:	701a      	strb	r2, [r3, #0]
 8013ed2:	4d9f      	ldr	r5, [pc, #636]	; (8014150 <_printf_float+0x308>)
 8013ed4:	2f47      	cmp	r7, #71	; 0x47
 8013ed6:	d800      	bhi.n	8013eda <_printf_float+0x92>
 8013ed8:	4d9e      	ldr	r5, [pc, #632]	; (8014154 <_printf_float+0x30c>)
 8013eda:	2303      	movs	r3, #3
 8013edc:	2600      	movs	r6, #0
 8013ede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ee0:	6123      	str	r3, [r4, #16]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	439a      	bics	r2, r3
 8013ee6:	6022      	str	r2, [r4, #0]
 8013ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eea:	aa13      	add	r2, sp, #76	; 0x4c
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	0021      	movs	r1, r4
 8013ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ef4:	f000 f9f4 	bl	80142e0 <_printf_common>
 8013ef8:	1c43      	adds	r3, r0, #1
 8013efa:	d000      	beq.n	8013efe <_printf_float+0xb6>
 8013efc:	e093      	b.n	8014026 <_printf_float+0x1de>
 8013efe:	2001      	movs	r0, #1
 8013f00:	4240      	negs	r0, r0
 8013f02:	b015      	add	sp, #84	; 0x54
 8013f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f06:	3307      	adds	r3, #7
 8013f08:	e7b8      	b.n	8013e7c <_printf_float+0x34>
 8013f0a:	0032      	movs	r2, r6
 8013f0c:	002b      	movs	r3, r5
 8013f0e:	0030      	movs	r0, r6
 8013f10:	0029      	movs	r1, r5
 8013f12:	f7ee fdf7 	bl	8002b04 <__aeabi_dcmpun>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d004      	beq.n	8013f24 <_printf_float+0xdc>
 8013f1a:	4d8f      	ldr	r5, [pc, #572]	; (8014158 <_printf_float+0x310>)
 8013f1c:	2f47      	cmp	r7, #71	; 0x47
 8013f1e:	d8dc      	bhi.n	8013eda <_printf_float+0x92>
 8013f20:	4d8e      	ldr	r5, [pc, #568]	; (801415c <_printf_float+0x314>)
 8013f22:	e7da      	b.n	8013eda <_printf_float+0x92>
 8013f24:	2380      	movs	r3, #128	; 0x80
 8013f26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f28:	6862      	ldr	r2, [r4, #4]
 8013f2a:	00db      	lsls	r3, r3, #3
 8013f2c:	430b      	orrs	r3, r1
 8013f2e:	1c51      	adds	r1, r2, #1
 8013f30:	d143      	bne.n	8013fba <_printf_float+0x172>
 8013f32:	3207      	adds	r2, #7
 8013f34:	6062      	str	r2, [r4, #4]
 8013f36:	aa12      	add	r2, sp, #72	; 0x48
 8013f38:	2100      	movs	r1, #0
 8013f3a:	9205      	str	r2, [sp, #20]
 8013f3c:	aa11      	add	r2, sp, #68	; 0x44
 8013f3e:	9203      	str	r2, [sp, #12]
 8013f40:	2223      	movs	r2, #35	; 0x23
 8013f42:	6023      	str	r3, [r4, #0]
 8013f44:	9106      	str	r1, [sp, #24]
 8013f46:	9301      	str	r3, [sp, #4]
 8013f48:	a908      	add	r1, sp, #32
 8013f4a:	6863      	ldr	r3, [r4, #4]
 8013f4c:	1852      	adds	r2, r2, r1
 8013f4e:	9202      	str	r2, [sp, #8]
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	0032      	movs	r2, r6
 8013f54:	002b      	movs	r3, r5
 8013f56:	9704      	str	r7, [sp, #16]
 8013f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f5a:	f7ff fed9 	bl	8013d10 <__cvt>
 8013f5e:	2320      	movs	r3, #32
 8013f60:	003a      	movs	r2, r7
 8013f62:	0005      	movs	r5, r0
 8013f64:	439a      	bics	r2, r3
 8013f66:	2a47      	cmp	r2, #71	; 0x47
 8013f68:	d107      	bne.n	8013f7a <_printf_float+0x132>
 8013f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f6c:	1cda      	adds	r2, r3, #3
 8013f6e:	db02      	blt.n	8013f76 <_printf_float+0x12e>
 8013f70:	6862      	ldr	r2, [r4, #4]
 8013f72:	4293      	cmp	r3, r2
 8013f74:	dd45      	ble.n	8014002 <_printf_float+0x1ba>
 8013f76:	3f02      	subs	r7, #2
 8013f78:	b2ff      	uxtb	r7, r7
 8013f7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013f7c:	2f65      	cmp	r7, #101	; 0x65
 8013f7e:	d825      	bhi.n	8013fcc <_printf_float+0x184>
 8013f80:	0020      	movs	r0, r4
 8013f82:	3901      	subs	r1, #1
 8013f84:	003a      	movs	r2, r7
 8013f86:	3050      	adds	r0, #80	; 0x50
 8013f88:	9111      	str	r1, [sp, #68]	; 0x44
 8013f8a:	f7ff ff25 	bl	8013dd8 <__exponent>
 8013f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f90:	0006      	movs	r6, r0
 8013f92:	1813      	adds	r3, r2, r0
 8013f94:	6123      	str	r3, [r4, #16]
 8013f96:	2a01      	cmp	r2, #1
 8013f98:	dc02      	bgt.n	8013fa0 <_printf_float+0x158>
 8013f9a:	6822      	ldr	r2, [r4, #0]
 8013f9c:	07d2      	lsls	r2, r2, #31
 8013f9e:	d501      	bpl.n	8013fa4 <_printf_float+0x15c>
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	6123      	str	r3, [r4, #16]
 8013fa4:	2323      	movs	r3, #35	; 0x23
 8013fa6:	aa08      	add	r2, sp, #32
 8013fa8:	189b      	adds	r3, r3, r2
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d09b      	beq.n	8013ee8 <_printf_float+0xa0>
 8013fb0:	0023      	movs	r3, r4
 8013fb2:	222d      	movs	r2, #45	; 0x2d
 8013fb4:	3343      	adds	r3, #67	; 0x43
 8013fb6:	701a      	strb	r2, [r3, #0]
 8013fb8:	e796      	b.n	8013ee8 <_printf_float+0xa0>
 8013fba:	2f67      	cmp	r7, #103	; 0x67
 8013fbc:	d100      	bne.n	8013fc0 <_printf_float+0x178>
 8013fbe:	e176      	b.n	80142ae <_printf_float+0x466>
 8013fc0:	2f47      	cmp	r7, #71	; 0x47
 8013fc2:	d1b8      	bne.n	8013f36 <_printf_float+0xee>
 8013fc4:	2a00      	cmp	r2, #0
 8013fc6:	d1b6      	bne.n	8013f36 <_printf_float+0xee>
 8013fc8:	2201      	movs	r2, #1
 8013fca:	e7b3      	b.n	8013f34 <_printf_float+0xec>
 8013fcc:	2f66      	cmp	r7, #102	; 0x66
 8013fce:	d119      	bne.n	8014004 <_printf_float+0x1bc>
 8013fd0:	6863      	ldr	r3, [r4, #4]
 8013fd2:	2900      	cmp	r1, #0
 8013fd4:	dd0c      	ble.n	8013ff0 <_printf_float+0x1a8>
 8013fd6:	6121      	str	r1, [r4, #16]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d102      	bne.n	8013fe2 <_printf_float+0x19a>
 8013fdc:	6822      	ldr	r2, [r4, #0]
 8013fde:	07d2      	lsls	r2, r2, #31
 8013fe0:	d502      	bpl.n	8013fe8 <_printf_float+0x1a0>
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	185b      	adds	r3, r3, r1
 8013fe6:	6123      	str	r3, [r4, #16]
 8013fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fea:	2600      	movs	r6, #0
 8013fec:	65a3      	str	r3, [r4, #88]	; 0x58
 8013fee:	e7d9      	b.n	8013fa4 <_printf_float+0x15c>
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d103      	bne.n	8013ffc <_printf_float+0x1b4>
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	6821      	ldr	r1, [r4, #0]
 8013ff8:	4211      	tst	r1, r2
 8013ffa:	d000      	beq.n	8013ffe <_printf_float+0x1b6>
 8013ffc:	1c9a      	adds	r2, r3, #2
 8013ffe:	6122      	str	r2, [r4, #16]
 8014000:	e7f2      	b.n	8013fe8 <_printf_float+0x1a0>
 8014002:	2767      	movs	r7, #103	; 0x67
 8014004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014008:	4293      	cmp	r3, r2
 801400a:	db05      	blt.n	8014018 <_printf_float+0x1d0>
 801400c:	6822      	ldr	r2, [r4, #0]
 801400e:	6123      	str	r3, [r4, #16]
 8014010:	07d2      	lsls	r2, r2, #31
 8014012:	d5e9      	bpl.n	8013fe8 <_printf_float+0x1a0>
 8014014:	3301      	adds	r3, #1
 8014016:	e7e6      	b.n	8013fe6 <_printf_float+0x19e>
 8014018:	2101      	movs	r1, #1
 801401a:	2b00      	cmp	r3, #0
 801401c:	dc01      	bgt.n	8014022 <_printf_float+0x1da>
 801401e:	1849      	adds	r1, r1, r1
 8014020:	1ac9      	subs	r1, r1, r3
 8014022:	1852      	adds	r2, r2, r1
 8014024:	e7eb      	b.n	8013ffe <_printf_float+0x1b6>
 8014026:	6822      	ldr	r2, [r4, #0]
 8014028:	0553      	lsls	r3, r2, #21
 801402a:	d408      	bmi.n	801403e <_printf_float+0x1f6>
 801402c:	6923      	ldr	r3, [r4, #16]
 801402e:	002a      	movs	r2, r5
 8014030:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014034:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014036:	47a8      	blx	r5
 8014038:	1c43      	adds	r3, r0, #1
 801403a:	d129      	bne.n	8014090 <_printf_float+0x248>
 801403c:	e75f      	b.n	8013efe <_printf_float+0xb6>
 801403e:	2f65      	cmp	r7, #101	; 0x65
 8014040:	d800      	bhi.n	8014044 <_printf_float+0x1fc>
 8014042:	e0e0      	b.n	8014206 <_printf_float+0x3be>
 8014044:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014046:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014048:	2200      	movs	r2, #0
 801404a:	2300      	movs	r3, #0
 801404c:	f7ec f9fc 	bl	8000448 <__aeabi_dcmpeq>
 8014050:	2800      	cmp	r0, #0
 8014052:	d034      	beq.n	80140be <_printf_float+0x276>
 8014054:	2301      	movs	r3, #1
 8014056:	4a42      	ldr	r2, [pc, #264]	; (8014160 <_printf_float+0x318>)
 8014058:	990a      	ldr	r1, [sp, #40]	; 0x28
 801405a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801405e:	47a8      	blx	r5
 8014060:	1c43      	adds	r3, r0, #1
 8014062:	d100      	bne.n	8014066 <_printf_float+0x21e>
 8014064:	e74b      	b.n	8013efe <_printf_float+0xb6>
 8014066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801406a:	4293      	cmp	r3, r2
 801406c:	db02      	blt.n	8014074 <_printf_float+0x22c>
 801406e:	6823      	ldr	r3, [r4, #0]
 8014070:	07db      	lsls	r3, r3, #31
 8014072:	d50d      	bpl.n	8014090 <_printf_float+0x248>
 8014074:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801407a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801407e:	47a8      	blx	r5
 8014080:	2500      	movs	r5, #0
 8014082:	1c43      	adds	r3, r0, #1
 8014084:	d100      	bne.n	8014088 <_printf_float+0x240>
 8014086:	e73a      	b.n	8013efe <_printf_float+0xb6>
 8014088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801408a:	3b01      	subs	r3, #1
 801408c:	42ab      	cmp	r3, r5
 801408e:	dc0a      	bgt.n	80140a6 <_printf_float+0x25e>
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	079b      	lsls	r3, r3, #30
 8014094:	d500      	bpl.n	8014098 <_printf_float+0x250>
 8014096:	e108      	b.n	80142aa <_printf_float+0x462>
 8014098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801409a:	68e0      	ldr	r0, [r4, #12]
 801409c:	4298      	cmp	r0, r3
 801409e:	db00      	blt.n	80140a2 <_printf_float+0x25a>
 80140a0:	e72f      	b.n	8013f02 <_printf_float+0xba>
 80140a2:	0018      	movs	r0, r3
 80140a4:	e72d      	b.n	8013f02 <_printf_float+0xba>
 80140a6:	0022      	movs	r2, r4
 80140a8:	2301      	movs	r3, #1
 80140aa:	321a      	adds	r2, #26
 80140ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80140b2:	47b0      	blx	r6
 80140b4:	1c43      	adds	r3, r0, #1
 80140b6:	d100      	bne.n	80140ba <_printf_float+0x272>
 80140b8:	e721      	b.n	8013efe <_printf_float+0xb6>
 80140ba:	3501      	adds	r5, #1
 80140bc:	e7e4      	b.n	8014088 <_printf_float+0x240>
 80140be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	dc2d      	bgt.n	8014120 <_printf_float+0x2d8>
 80140c4:	2301      	movs	r3, #1
 80140c6:	4a26      	ldr	r2, [pc, #152]	; (8014160 <_printf_float+0x318>)
 80140c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80140ce:	47b0      	blx	r6
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d100      	bne.n	80140d6 <_printf_float+0x28e>
 80140d4:	e713      	b.n	8013efe <_printf_float+0xb6>
 80140d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d105      	bne.n	80140e8 <_printf_float+0x2a0>
 80140dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d102      	bne.n	80140e8 <_printf_float+0x2a0>
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	07db      	lsls	r3, r3, #31
 80140e6:	d5d3      	bpl.n	8014090 <_printf_float+0x248>
 80140e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80140ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140f2:	47b0      	blx	r6
 80140f4:	2600      	movs	r6, #0
 80140f6:	1c43      	adds	r3, r0, #1
 80140f8:	d100      	bne.n	80140fc <_printf_float+0x2b4>
 80140fa:	e700      	b.n	8013efe <_printf_float+0xb6>
 80140fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140fe:	425b      	negs	r3, r3
 8014100:	42b3      	cmp	r3, r6
 8014102:	dc01      	bgt.n	8014108 <_printf_float+0x2c0>
 8014104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014106:	e792      	b.n	801402e <_printf_float+0x1e6>
 8014108:	0022      	movs	r2, r4
 801410a:	2301      	movs	r3, #1
 801410c:	321a      	adds	r2, #26
 801410e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014112:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014114:	47b8      	blx	r7
 8014116:	1c43      	adds	r3, r0, #1
 8014118:	d100      	bne.n	801411c <_printf_float+0x2d4>
 801411a:	e6f0      	b.n	8013efe <_printf_float+0xb6>
 801411c:	3601      	adds	r6, #1
 801411e:	e7ed      	b.n	80140fc <_printf_float+0x2b4>
 8014120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014122:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014124:	429f      	cmp	r7, r3
 8014126:	dd00      	ble.n	801412a <_printf_float+0x2e2>
 8014128:	001f      	movs	r7, r3
 801412a:	2f00      	cmp	r7, #0
 801412c:	dd08      	ble.n	8014140 <_printf_float+0x2f8>
 801412e:	003b      	movs	r3, r7
 8014130:	002a      	movs	r2, r5
 8014132:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014136:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014138:	47b0      	blx	r6
 801413a:	1c43      	adds	r3, r0, #1
 801413c:	d100      	bne.n	8014140 <_printf_float+0x2f8>
 801413e:	e6de      	b.n	8013efe <_printf_float+0xb6>
 8014140:	2300      	movs	r3, #0
 8014142:	930d      	str	r3, [sp, #52]	; 0x34
 8014144:	43fb      	mvns	r3, r7
 8014146:	17db      	asrs	r3, r3, #31
 8014148:	930f      	str	r3, [sp, #60]	; 0x3c
 801414a:	e018      	b.n	801417e <_printf_float+0x336>
 801414c:	7fefffff 	.word	0x7fefffff
 8014150:	0801a63a 	.word	0x0801a63a
 8014154:	0801a636 	.word	0x0801a636
 8014158:	0801a642 	.word	0x0801a642
 801415c:	0801a63e 	.word	0x0801a63e
 8014160:	0801a646 	.word	0x0801a646
 8014164:	0022      	movs	r2, r4
 8014166:	2301      	movs	r3, #1
 8014168:	321a      	adds	r2, #26
 801416a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801416c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801416e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014170:	47b0      	blx	r6
 8014172:	1c43      	adds	r3, r0, #1
 8014174:	d100      	bne.n	8014178 <_printf_float+0x330>
 8014176:	e6c2      	b.n	8013efe <_printf_float+0xb6>
 8014178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801417a:	3301      	adds	r3, #1
 801417c:	930d      	str	r3, [sp, #52]	; 0x34
 801417e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014180:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8014182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014184:	403b      	ands	r3, r7
 8014186:	1af3      	subs	r3, r6, r3
 8014188:	4293      	cmp	r3, r2
 801418a:	dceb      	bgt.n	8014164 <_printf_float+0x31c>
 801418c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801418e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014190:	19ad      	adds	r5, r5, r6
 8014192:	4293      	cmp	r3, r2
 8014194:	db10      	blt.n	80141b8 <_printf_float+0x370>
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	07db      	lsls	r3, r3, #31
 801419a:	d40d      	bmi.n	80141b8 <_printf_float+0x370>
 801419c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801419e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141a0:	1bbe      	subs	r6, r7, r6
 80141a2:	1aff      	subs	r7, r7, r3
 80141a4:	42b7      	cmp	r7, r6
 80141a6:	dd00      	ble.n	80141aa <_printf_float+0x362>
 80141a8:	0037      	movs	r7, r6
 80141aa:	2f00      	cmp	r7, #0
 80141ac:	dc0d      	bgt.n	80141ca <_printf_float+0x382>
 80141ae:	43fe      	mvns	r6, r7
 80141b0:	17f3      	asrs	r3, r6, #31
 80141b2:	2500      	movs	r5, #0
 80141b4:	930c      	str	r3, [sp, #48]	; 0x30
 80141b6:	e01c      	b.n	80141f2 <_printf_float+0x3aa>
 80141b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80141c2:	47b8      	blx	r7
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d1e9      	bne.n	801419c <_printf_float+0x354>
 80141c8:	e699      	b.n	8013efe <_printf_float+0xb6>
 80141ca:	003b      	movs	r3, r7
 80141cc:	002a      	movs	r2, r5
 80141ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80141d4:	47a8      	blx	r5
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	d1e9      	bne.n	80141ae <_printf_float+0x366>
 80141da:	e690      	b.n	8013efe <_printf_float+0xb6>
 80141dc:	0022      	movs	r2, r4
 80141de:	2301      	movs	r3, #1
 80141e0:	321a      	adds	r2, #26
 80141e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80141e8:	47b0      	blx	r6
 80141ea:	1c43      	adds	r3, r0, #1
 80141ec:	d100      	bne.n	80141f0 <_printf_float+0x3a8>
 80141ee:	e686      	b.n	8013efe <_printf_float+0xb6>
 80141f0:	3501      	adds	r5, #1
 80141f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141f8:	1a9b      	subs	r3, r3, r2
 80141fa:	003a      	movs	r2, r7
 80141fc:	400a      	ands	r2, r1
 80141fe:	1a9b      	subs	r3, r3, r2
 8014200:	42ab      	cmp	r3, r5
 8014202:	dceb      	bgt.n	80141dc <_printf_float+0x394>
 8014204:	e744      	b.n	8014090 <_printf_float+0x248>
 8014206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014208:	2b01      	cmp	r3, #1
 801420a:	dc02      	bgt.n	8014212 <_printf_float+0x3ca>
 801420c:	2301      	movs	r3, #1
 801420e:	421a      	tst	r2, r3
 8014210:	d032      	beq.n	8014278 <_printf_float+0x430>
 8014212:	2301      	movs	r3, #1
 8014214:	002a      	movs	r2, r5
 8014216:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014218:	9809      	ldr	r0, [sp, #36]	; 0x24
 801421a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801421c:	47b8      	blx	r7
 801421e:	1c43      	adds	r3, r0, #1
 8014220:	d100      	bne.n	8014224 <_printf_float+0x3dc>
 8014222:	e66c      	b.n	8013efe <_printf_float+0xb6>
 8014224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014228:	990a      	ldr	r1, [sp, #40]	; 0x28
 801422a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801422c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801422e:	3501      	adds	r5, #1
 8014230:	47b8      	blx	r7
 8014232:	1c43      	adds	r3, r0, #1
 8014234:	d100      	bne.n	8014238 <_printf_float+0x3f0>
 8014236:	e662      	b.n	8013efe <_printf_float+0xb6>
 8014238:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801423a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801423c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801423e:	2200      	movs	r2, #0
 8014240:	1e5f      	subs	r7, r3, #1
 8014242:	2300      	movs	r3, #0
 8014244:	f7ec f900 	bl	8000448 <__aeabi_dcmpeq>
 8014248:	003b      	movs	r3, r7
 801424a:	2800      	cmp	r0, #0
 801424c:	d014      	beq.n	8014278 <_printf_float+0x430>
 801424e:	2500      	movs	r5, #0
 8014250:	e00a      	b.n	8014268 <_printf_float+0x420>
 8014252:	0022      	movs	r2, r4
 8014254:	2301      	movs	r3, #1
 8014256:	321a      	adds	r2, #26
 8014258:	990a      	ldr	r1, [sp, #40]	; 0x28
 801425a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801425c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801425e:	47b8      	blx	r7
 8014260:	1c43      	adds	r3, r0, #1
 8014262:	d100      	bne.n	8014266 <_printf_float+0x41e>
 8014264:	e64b      	b.n	8013efe <_printf_float+0xb6>
 8014266:	3501      	adds	r5, #1
 8014268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801426a:	3b01      	subs	r3, #1
 801426c:	42ab      	cmp	r3, r5
 801426e:	dcf0      	bgt.n	8014252 <_printf_float+0x40a>
 8014270:	0022      	movs	r2, r4
 8014272:	0033      	movs	r3, r6
 8014274:	3250      	adds	r2, #80	; 0x50
 8014276:	e6db      	b.n	8014030 <_printf_float+0x1e8>
 8014278:	002a      	movs	r2, r5
 801427a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801427c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801427e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014280:	47a8      	blx	r5
 8014282:	1c43      	adds	r3, r0, #1
 8014284:	d1f4      	bne.n	8014270 <_printf_float+0x428>
 8014286:	e63a      	b.n	8013efe <_printf_float+0xb6>
 8014288:	0022      	movs	r2, r4
 801428a:	2301      	movs	r3, #1
 801428c:	3219      	adds	r2, #25
 801428e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014292:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014294:	47b0      	blx	r6
 8014296:	1c43      	adds	r3, r0, #1
 8014298:	d100      	bne.n	801429c <_printf_float+0x454>
 801429a:	e630      	b.n	8013efe <_printf_float+0xb6>
 801429c:	3501      	adds	r5, #1
 801429e:	68e3      	ldr	r3, [r4, #12]
 80142a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80142a2:	1a9b      	subs	r3, r3, r2
 80142a4:	42ab      	cmp	r3, r5
 80142a6:	dcef      	bgt.n	8014288 <_printf_float+0x440>
 80142a8:	e6f6      	b.n	8014098 <_printf_float+0x250>
 80142aa:	2500      	movs	r5, #0
 80142ac:	e7f7      	b.n	801429e <_printf_float+0x456>
 80142ae:	2a00      	cmp	r2, #0
 80142b0:	d100      	bne.n	80142b4 <_printf_float+0x46c>
 80142b2:	e689      	b.n	8013fc8 <_printf_float+0x180>
 80142b4:	2100      	movs	r1, #0
 80142b6:	9106      	str	r1, [sp, #24]
 80142b8:	a912      	add	r1, sp, #72	; 0x48
 80142ba:	9105      	str	r1, [sp, #20]
 80142bc:	a911      	add	r1, sp, #68	; 0x44
 80142be:	9103      	str	r1, [sp, #12]
 80142c0:	2123      	movs	r1, #35	; 0x23
 80142c2:	a808      	add	r0, sp, #32
 80142c4:	1809      	adds	r1, r1, r0
 80142c6:	6023      	str	r3, [r4, #0]
 80142c8:	9301      	str	r3, [sp, #4]
 80142ca:	9200      	str	r2, [sp, #0]
 80142cc:	002b      	movs	r3, r5
 80142ce:	9704      	str	r7, [sp, #16]
 80142d0:	9102      	str	r1, [sp, #8]
 80142d2:	0032      	movs	r2, r6
 80142d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142d6:	f7ff fd1b 	bl	8013d10 <__cvt>
 80142da:	0005      	movs	r5, r0
 80142dc:	e645      	b.n	8013f6a <_printf_float+0x122>
 80142de:	46c0      	nop			; (mov r8, r8)

080142e0 <_printf_common>:
 80142e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142e2:	0015      	movs	r5, r2
 80142e4:	9301      	str	r3, [sp, #4]
 80142e6:	688a      	ldr	r2, [r1, #8]
 80142e8:	690b      	ldr	r3, [r1, #16]
 80142ea:	9000      	str	r0, [sp, #0]
 80142ec:	000c      	movs	r4, r1
 80142ee:	4293      	cmp	r3, r2
 80142f0:	da00      	bge.n	80142f4 <_printf_common+0x14>
 80142f2:	0013      	movs	r3, r2
 80142f4:	0022      	movs	r2, r4
 80142f6:	602b      	str	r3, [r5, #0]
 80142f8:	3243      	adds	r2, #67	; 0x43
 80142fa:	7812      	ldrb	r2, [r2, #0]
 80142fc:	2a00      	cmp	r2, #0
 80142fe:	d001      	beq.n	8014304 <_printf_common+0x24>
 8014300:	3301      	adds	r3, #1
 8014302:	602b      	str	r3, [r5, #0]
 8014304:	6823      	ldr	r3, [r4, #0]
 8014306:	069b      	lsls	r3, r3, #26
 8014308:	d502      	bpl.n	8014310 <_printf_common+0x30>
 801430a:	682b      	ldr	r3, [r5, #0]
 801430c:	3302      	adds	r3, #2
 801430e:	602b      	str	r3, [r5, #0]
 8014310:	2706      	movs	r7, #6
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	401f      	ands	r7, r3
 8014316:	d027      	beq.n	8014368 <_printf_common+0x88>
 8014318:	0023      	movs	r3, r4
 801431a:	3343      	adds	r3, #67	; 0x43
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	1e5a      	subs	r2, r3, #1
 8014320:	4193      	sbcs	r3, r2
 8014322:	6822      	ldr	r2, [r4, #0]
 8014324:	0692      	lsls	r2, r2, #26
 8014326:	d430      	bmi.n	801438a <_printf_common+0xaa>
 8014328:	0022      	movs	r2, r4
 801432a:	9901      	ldr	r1, [sp, #4]
 801432c:	3243      	adds	r2, #67	; 0x43
 801432e:	9800      	ldr	r0, [sp, #0]
 8014330:	9e08      	ldr	r6, [sp, #32]
 8014332:	47b0      	blx	r6
 8014334:	1c43      	adds	r3, r0, #1
 8014336:	d025      	beq.n	8014384 <_printf_common+0xa4>
 8014338:	2306      	movs	r3, #6
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	682a      	ldr	r2, [r5, #0]
 801433e:	68e1      	ldr	r1, [r4, #12]
 8014340:	4003      	ands	r3, r0
 8014342:	2500      	movs	r5, #0
 8014344:	2b04      	cmp	r3, #4
 8014346:	d103      	bne.n	8014350 <_printf_common+0x70>
 8014348:	1a8d      	subs	r5, r1, r2
 801434a:	43eb      	mvns	r3, r5
 801434c:	17db      	asrs	r3, r3, #31
 801434e:	401d      	ands	r5, r3
 8014350:	68a3      	ldr	r3, [r4, #8]
 8014352:	6922      	ldr	r2, [r4, #16]
 8014354:	4293      	cmp	r3, r2
 8014356:	dd01      	ble.n	801435c <_printf_common+0x7c>
 8014358:	1a9b      	subs	r3, r3, r2
 801435a:	18ed      	adds	r5, r5, r3
 801435c:	2700      	movs	r7, #0
 801435e:	42bd      	cmp	r5, r7
 8014360:	d120      	bne.n	80143a4 <_printf_common+0xc4>
 8014362:	2000      	movs	r0, #0
 8014364:	e010      	b.n	8014388 <_printf_common+0xa8>
 8014366:	3701      	adds	r7, #1
 8014368:	68e3      	ldr	r3, [r4, #12]
 801436a:	682a      	ldr	r2, [r5, #0]
 801436c:	1a9b      	subs	r3, r3, r2
 801436e:	42bb      	cmp	r3, r7
 8014370:	ddd2      	ble.n	8014318 <_printf_common+0x38>
 8014372:	0022      	movs	r2, r4
 8014374:	2301      	movs	r3, #1
 8014376:	3219      	adds	r2, #25
 8014378:	9901      	ldr	r1, [sp, #4]
 801437a:	9800      	ldr	r0, [sp, #0]
 801437c:	9e08      	ldr	r6, [sp, #32]
 801437e:	47b0      	blx	r6
 8014380:	1c43      	adds	r3, r0, #1
 8014382:	d1f0      	bne.n	8014366 <_printf_common+0x86>
 8014384:	2001      	movs	r0, #1
 8014386:	4240      	negs	r0, r0
 8014388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801438a:	2030      	movs	r0, #48	; 0x30
 801438c:	18e1      	adds	r1, r4, r3
 801438e:	3143      	adds	r1, #67	; 0x43
 8014390:	7008      	strb	r0, [r1, #0]
 8014392:	0021      	movs	r1, r4
 8014394:	1c5a      	adds	r2, r3, #1
 8014396:	3145      	adds	r1, #69	; 0x45
 8014398:	7809      	ldrb	r1, [r1, #0]
 801439a:	18a2      	adds	r2, r4, r2
 801439c:	3243      	adds	r2, #67	; 0x43
 801439e:	3302      	adds	r3, #2
 80143a0:	7011      	strb	r1, [r2, #0]
 80143a2:	e7c1      	b.n	8014328 <_printf_common+0x48>
 80143a4:	0022      	movs	r2, r4
 80143a6:	2301      	movs	r3, #1
 80143a8:	321a      	adds	r2, #26
 80143aa:	9901      	ldr	r1, [sp, #4]
 80143ac:	9800      	ldr	r0, [sp, #0]
 80143ae:	9e08      	ldr	r6, [sp, #32]
 80143b0:	47b0      	blx	r6
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	d0e6      	beq.n	8014384 <_printf_common+0xa4>
 80143b6:	3701      	adds	r7, #1
 80143b8:	e7d1      	b.n	801435e <_printf_common+0x7e>
	...

080143bc <_printf_i>:
 80143bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143be:	b089      	sub	sp, #36	; 0x24
 80143c0:	9204      	str	r2, [sp, #16]
 80143c2:	000a      	movs	r2, r1
 80143c4:	3243      	adds	r2, #67	; 0x43
 80143c6:	9305      	str	r3, [sp, #20]
 80143c8:	9003      	str	r0, [sp, #12]
 80143ca:	9202      	str	r2, [sp, #8]
 80143cc:	7e0a      	ldrb	r2, [r1, #24]
 80143ce:	000c      	movs	r4, r1
 80143d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143d2:	2a6e      	cmp	r2, #110	; 0x6e
 80143d4:	d100      	bne.n	80143d8 <_printf_i+0x1c>
 80143d6:	e086      	b.n	80144e6 <_printf_i+0x12a>
 80143d8:	d81f      	bhi.n	801441a <_printf_i+0x5e>
 80143da:	2a63      	cmp	r2, #99	; 0x63
 80143dc:	d033      	beq.n	8014446 <_printf_i+0x8a>
 80143de:	d808      	bhi.n	80143f2 <_printf_i+0x36>
 80143e0:	2a00      	cmp	r2, #0
 80143e2:	d100      	bne.n	80143e6 <_printf_i+0x2a>
 80143e4:	e08c      	b.n	8014500 <_printf_i+0x144>
 80143e6:	2a58      	cmp	r2, #88	; 0x58
 80143e8:	d04d      	beq.n	8014486 <_printf_i+0xca>
 80143ea:	0025      	movs	r5, r4
 80143ec:	3542      	adds	r5, #66	; 0x42
 80143ee:	702a      	strb	r2, [r5, #0]
 80143f0:	e030      	b.n	8014454 <_printf_i+0x98>
 80143f2:	2a64      	cmp	r2, #100	; 0x64
 80143f4:	d001      	beq.n	80143fa <_printf_i+0x3e>
 80143f6:	2a69      	cmp	r2, #105	; 0x69
 80143f8:	d1f7      	bne.n	80143ea <_printf_i+0x2e>
 80143fa:	6819      	ldr	r1, [r3, #0]
 80143fc:	6825      	ldr	r5, [r4, #0]
 80143fe:	1d0a      	adds	r2, r1, #4
 8014400:	0628      	lsls	r0, r5, #24
 8014402:	d529      	bpl.n	8014458 <_printf_i+0x9c>
 8014404:	6808      	ldr	r0, [r1, #0]
 8014406:	601a      	str	r2, [r3, #0]
 8014408:	2800      	cmp	r0, #0
 801440a:	da03      	bge.n	8014414 <_printf_i+0x58>
 801440c:	232d      	movs	r3, #45	; 0x2d
 801440e:	9a02      	ldr	r2, [sp, #8]
 8014410:	4240      	negs	r0, r0
 8014412:	7013      	strb	r3, [r2, #0]
 8014414:	4e6b      	ldr	r6, [pc, #428]	; (80145c4 <_printf_i+0x208>)
 8014416:	270a      	movs	r7, #10
 8014418:	e04f      	b.n	80144ba <_printf_i+0xfe>
 801441a:	2a73      	cmp	r2, #115	; 0x73
 801441c:	d074      	beq.n	8014508 <_printf_i+0x14c>
 801441e:	d808      	bhi.n	8014432 <_printf_i+0x76>
 8014420:	2a6f      	cmp	r2, #111	; 0x6f
 8014422:	d01f      	beq.n	8014464 <_printf_i+0xa8>
 8014424:	2a70      	cmp	r2, #112	; 0x70
 8014426:	d1e0      	bne.n	80143ea <_printf_i+0x2e>
 8014428:	2220      	movs	r2, #32
 801442a:	6809      	ldr	r1, [r1, #0]
 801442c:	430a      	orrs	r2, r1
 801442e:	6022      	str	r2, [r4, #0]
 8014430:	e003      	b.n	801443a <_printf_i+0x7e>
 8014432:	2a75      	cmp	r2, #117	; 0x75
 8014434:	d016      	beq.n	8014464 <_printf_i+0xa8>
 8014436:	2a78      	cmp	r2, #120	; 0x78
 8014438:	d1d7      	bne.n	80143ea <_printf_i+0x2e>
 801443a:	0022      	movs	r2, r4
 801443c:	2178      	movs	r1, #120	; 0x78
 801443e:	3245      	adds	r2, #69	; 0x45
 8014440:	7011      	strb	r1, [r2, #0]
 8014442:	4e61      	ldr	r6, [pc, #388]	; (80145c8 <_printf_i+0x20c>)
 8014444:	e022      	b.n	801448c <_printf_i+0xd0>
 8014446:	0025      	movs	r5, r4
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	3542      	adds	r5, #66	; 0x42
 801444c:	1d11      	adds	r1, r2, #4
 801444e:	6019      	str	r1, [r3, #0]
 8014450:	6813      	ldr	r3, [r2, #0]
 8014452:	702b      	strb	r3, [r5, #0]
 8014454:	2301      	movs	r3, #1
 8014456:	e065      	b.n	8014524 <_printf_i+0x168>
 8014458:	6808      	ldr	r0, [r1, #0]
 801445a:	601a      	str	r2, [r3, #0]
 801445c:	0669      	lsls	r1, r5, #25
 801445e:	d5d3      	bpl.n	8014408 <_printf_i+0x4c>
 8014460:	b200      	sxth	r0, r0
 8014462:	e7d1      	b.n	8014408 <_printf_i+0x4c>
 8014464:	6819      	ldr	r1, [r3, #0]
 8014466:	6825      	ldr	r5, [r4, #0]
 8014468:	1d08      	adds	r0, r1, #4
 801446a:	6018      	str	r0, [r3, #0]
 801446c:	6808      	ldr	r0, [r1, #0]
 801446e:	062e      	lsls	r6, r5, #24
 8014470:	d505      	bpl.n	801447e <_printf_i+0xc2>
 8014472:	4e54      	ldr	r6, [pc, #336]	; (80145c4 <_printf_i+0x208>)
 8014474:	2708      	movs	r7, #8
 8014476:	2a6f      	cmp	r2, #111	; 0x6f
 8014478:	d01b      	beq.n	80144b2 <_printf_i+0xf6>
 801447a:	270a      	movs	r7, #10
 801447c:	e019      	b.n	80144b2 <_printf_i+0xf6>
 801447e:	066d      	lsls	r5, r5, #25
 8014480:	d5f7      	bpl.n	8014472 <_printf_i+0xb6>
 8014482:	b280      	uxth	r0, r0
 8014484:	e7f5      	b.n	8014472 <_printf_i+0xb6>
 8014486:	3145      	adds	r1, #69	; 0x45
 8014488:	4e4e      	ldr	r6, [pc, #312]	; (80145c4 <_printf_i+0x208>)
 801448a:	700a      	strb	r2, [r1, #0]
 801448c:	6818      	ldr	r0, [r3, #0]
 801448e:	6822      	ldr	r2, [r4, #0]
 8014490:	1d01      	adds	r1, r0, #4
 8014492:	6800      	ldr	r0, [r0, #0]
 8014494:	6019      	str	r1, [r3, #0]
 8014496:	0615      	lsls	r5, r2, #24
 8014498:	d521      	bpl.n	80144de <_printf_i+0x122>
 801449a:	07d3      	lsls	r3, r2, #31
 801449c:	d502      	bpl.n	80144a4 <_printf_i+0xe8>
 801449e:	2320      	movs	r3, #32
 80144a0:	431a      	orrs	r2, r3
 80144a2:	6022      	str	r2, [r4, #0]
 80144a4:	2710      	movs	r7, #16
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d103      	bne.n	80144b2 <_printf_i+0xf6>
 80144aa:	2320      	movs	r3, #32
 80144ac:	6822      	ldr	r2, [r4, #0]
 80144ae:	439a      	bics	r2, r3
 80144b0:	6022      	str	r2, [r4, #0]
 80144b2:	0023      	movs	r3, r4
 80144b4:	2200      	movs	r2, #0
 80144b6:	3343      	adds	r3, #67	; 0x43
 80144b8:	701a      	strb	r2, [r3, #0]
 80144ba:	6863      	ldr	r3, [r4, #4]
 80144bc:	60a3      	str	r3, [r4, #8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	db58      	blt.n	8014574 <_printf_i+0x1b8>
 80144c2:	2204      	movs	r2, #4
 80144c4:	6821      	ldr	r1, [r4, #0]
 80144c6:	4391      	bics	r1, r2
 80144c8:	6021      	str	r1, [r4, #0]
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d154      	bne.n	8014578 <_printf_i+0x1bc>
 80144ce:	9d02      	ldr	r5, [sp, #8]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d05a      	beq.n	801458a <_printf_i+0x1ce>
 80144d4:	0025      	movs	r5, r4
 80144d6:	7833      	ldrb	r3, [r6, #0]
 80144d8:	3542      	adds	r5, #66	; 0x42
 80144da:	702b      	strb	r3, [r5, #0]
 80144dc:	e055      	b.n	801458a <_printf_i+0x1ce>
 80144de:	0655      	lsls	r5, r2, #25
 80144e0:	d5db      	bpl.n	801449a <_printf_i+0xde>
 80144e2:	b280      	uxth	r0, r0
 80144e4:	e7d9      	b.n	801449a <_printf_i+0xde>
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	680d      	ldr	r5, [r1, #0]
 80144ea:	1d10      	adds	r0, r2, #4
 80144ec:	6949      	ldr	r1, [r1, #20]
 80144ee:	6018      	str	r0, [r3, #0]
 80144f0:	6813      	ldr	r3, [r2, #0]
 80144f2:	062e      	lsls	r6, r5, #24
 80144f4:	d501      	bpl.n	80144fa <_printf_i+0x13e>
 80144f6:	6019      	str	r1, [r3, #0]
 80144f8:	e002      	b.n	8014500 <_printf_i+0x144>
 80144fa:	066d      	lsls	r5, r5, #25
 80144fc:	d5fb      	bpl.n	80144f6 <_printf_i+0x13a>
 80144fe:	8019      	strh	r1, [r3, #0]
 8014500:	2300      	movs	r3, #0
 8014502:	9d02      	ldr	r5, [sp, #8]
 8014504:	6123      	str	r3, [r4, #16]
 8014506:	e04f      	b.n	80145a8 <_printf_i+0x1ec>
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	1d11      	adds	r1, r2, #4
 801450c:	6019      	str	r1, [r3, #0]
 801450e:	6815      	ldr	r5, [r2, #0]
 8014510:	2100      	movs	r1, #0
 8014512:	6862      	ldr	r2, [r4, #4]
 8014514:	0028      	movs	r0, r5
 8014516:	f002 fa33 	bl	8016980 <memchr>
 801451a:	2800      	cmp	r0, #0
 801451c:	d001      	beq.n	8014522 <_printf_i+0x166>
 801451e:	1b40      	subs	r0, r0, r5
 8014520:	6060      	str	r0, [r4, #4]
 8014522:	6863      	ldr	r3, [r4, #4]
 8014524:	6123      	str	r3, [r4, #16]
 8014526:	2300      	movs	r3, #0
 8014528:	9a02      	ldr	r2, [sp, #8]
 801452a:	7013      	strb	r3, [r2, #0]
 801452c:	e03c      	b.n	80145a8 <_printf_i+0x1ec>
 801452e:	6923      	ldr	r3, [r4, #16]
 8014530:	002a      	movs	r2, r5
 8014532:	9904      	ldr	r1, [sp, #16]
 8014534:	9803      	ldr	r0, [sp, #12]
 8014536:	9d05      	ldr	r5, [sp, #20]
 8014538:	47a8      	blx	r5
 801453a:	1c43      	adds	r3, r0, #1
 801453c:	d03e      	beq.n	80145bc <_printf_i+0x200>
 801453e:	6823      	ldr	r3, [r4, #0]
 8014540:	079b      	lsls	r3, r3, #30
 8014542:	d415      	bmi.n	8014570 <_printf_i+0x1b4>
 8014544:	9b07      	ldr	r3, [sp, #28]
 8014546:	68e0      	ldr	r0, [r4, #12]
 8014548:	4298      	cmp	r0, r3
 801454a:	da39      	bge.n	80145c0 <_printf_i+0x204>
 801454c:	0018      	movs	r0, r3
 801454e:	e037      	b.n	80145c0 <_printf_i+0x204>
 8014550:	0022      	movs	r2, r4
 8014552:	2301      	movs	r3, #1
 8014554:	3219      	adds	r2, #25
 8014556:	9904      	ldr	r1, [sp, #16]
 8014558:	9803      	ldr	r0, [sp, #12]
 801455a:	9e05      	ldr	r6, [sp, #20]
 801455c:	47b0      	blx	r6
 801455e:	1c43      	adds	r3, r0, #1
 8014560:	d02c      	beq.n	80145bc <_printf_i+0x200>
 8014562:	3501      	adds	r5, #1
 8014564:	68e3      	ldr	r3, [r4, #12]
 8014566:	9a07      	ldr	r2, [sp, #28]
 8014568:	1a9b      	subs	r3, r3, r2
 801456a:	42ab      	cmp	r3, r5
 801456c:	dcf0      	bgt.n	8014550 <_printf_i+0x194>
 801456e:	e7e9      	b.n	8014544 <_printf_i+0x188>
 8014570:	2500      	movs	r5, #0
 8014572:	e7f7      	b.n	8014564 <_printf_i+0x1a8>
 8014574:	2800      	cmp	r0, #0
 8014576:	d0ad      	beq.n	80144d4 <_printf_i+0x118>
 8014578:	9d02      	ldr	r5, [sp, #8]
 801457a:	0039      	movs	r1, r7
 801457c:	f7eb fe64 	bl	8000248 <__aeabi_uidivmod>
 8014580:	5c73      	ldrb	r3, [r6, r1]
 8014582:	3d01      	subs	r5, #1
 8014584:	702b      	strb	r3, [r5, #0]
 8014586:	2800      	cmp	r0, #0
 8014588:	d1f7      	bne.n	801457a <_printf_i+0x1be>
 801458a:	2f08      	cmp	r7, #8
 801458c:	d109      	bne.n	80145a2 <_printf_i+0x1e6>
 801458e:	6823      	ldr	r3, [r4, #0]
 8014590:	07db      	lsls	r3, r3, #31
 8014592:	d506      	bpl.n	80145a2 <_printf_i+0x1e6>
 8014594:	6863      	ldr	r3, [r4, #4]
 8014596:	6922      	ldr	r2, [r4, #16]
 8014598:	4293      	cmp	r3, r2
 801459a:	dc02      	bgt.n	80145a2 <_printf_i+0x1e6>
 801459c:	2330      	movs	r3, #48	; 0x30
 801459e:	3d01      	subs	r5, #1
 80145a0:	702b      	strb	r3, [r5, #0]
 80145a2:	9b02      	ldr	r3, [sp, #8]
 80145a4:	1b5b      	subs	r3, r3, r5
 80145a6:	6123      	str	r3, [r4, #16]
 80145a8:	9b05      	ldr	r3, [sp, #20]
 80145aa:	aa07      	add	r2, sp, #28
 80145ac:	9300      	str	r3, [sp, #0]
 80145ae:	0021      	movs	r1, r4
 80145b0:	9b04      	ldr	r3, [sp, #16]
 80145b2:	9803      	ldr	r0, [sp, #12]
 80145b4:	f7ff fe94 	bl	80142e0 <_printf_common>
 80145b8:	1c43      	adds	r3, r0, #1
 80145ba:	d1b8      	bne.n	801452e <_printf_i+0x172>
 80145bc:	2001      	movs	r0, #1
 80145be:	4240      	negs	r0, r0
 80145c0:	b009      	add	sp, #36	; 0x24
 80145c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145c4:	0801a648 	.word	0x0801a648
 80145c8:	0801a659 	.word	0x0801a659

080145cc <rand>:
 80145cc:	4b12      	ldr	r3, [pc, #72]	; (8014618 <rand+0x4c>)
 80145ce:	b510      	push	{r4, lr}
 80145d0:	681c      	ldr	r4, [r3, #0]
 80145d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d10f      	bne.n	80145f8 <rand+0x2c>
 80145d8:	2018      	movs	r0, #24
 80145da:	f7ff faab 	bl	8013b34 <malloc>
 80145de:	4b0f      	ldr	r3, [pc, #60]	; (801461c <rand+0x50>)
 80145e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80145e2:	6003      	str	r3, [r0, #0]
 80145e4:	4b0e      	ldr	r3, [pc, #56]	; (8014620 <rand+0x54>)
 80145e6:	2201      	movs	r2, #1
 80145e8:	6043      	str	r3, [r0, #4]
 80145ea:	4b0e      	ldr	r3, [pc, #56]	; (8014624 <rand+0x58>)
 80145ec:	6083      	str	r3, [r0, #8]
 80145ee:	230b      	movs	r3, #11
 80145f0:	8183      	strh	r3, [r0, #12]
 80145f2:	2300      	movs	r3, #0
 80145f4:	6102      	str	r2, [r0, #16]
 80145f6:	6143      	str	r3, [r0, #20]
 80145f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80145fa:	4a0b      	ldr	r2, [pc, #44]	; (8014628 <rand+0x5c>)
 80145fc:	6920      	ldr	r0, [r4, #16]
 80145fe:	6961      	ldr	r1, [r4, #20]
 8014600:	4b0a      	ldr	r3, [pc, #40]	; (801462c <rand+0x60>)
 8014602:	f7eb ff89 	bl	8000518 <__aeabi_lmul>
 8014606:	2201      	movs	r2, #1
 8014608:	2300      	movs	r3, #0
 801460a:	1880      	adds	r0, r0, r2
 801460c:	4159      	adcs	r1, r3
 801460e:	6120      	str	r0, [r4, #16]
 8014610:	6161      	str	r1, [r4, #20]
 8014612:	0048      	lsls	r0, r1, #1
 8014614:	0840      	lsrs	r0, r0, #1
 8014616:	bd10      	pop	{r4, pc}
 8014618:	200000c4 	.word	0x200000c4
 801461c:	abcd330e 	.word	0xabcd330e
 8014620:	e66d1234 	.word	0xe66d1234
 8014624:	0005deec 	.word	0x0005deec
 8014628:	4c957f2d 	.word	0x4c957f2d
 801462c:	5851f42d 	.word	0x5851f42d

08014630 <realloc>:
 8014630:	b510      	push	{r4, lr}
 8014632:	4b03      	ldr	r3, [pc, #12]	; (8014640 <realloc+0x10>)
 8014634:	000a      	movs	r2, r1
 8014636:	0001      	movs	r1, r0
 8014638:	6818      	ldr	r0, [r3, #0]
 801463a:	f002 fdb2 	bl	80171a2 <_realloc_r>
 801463e:	bd10      	pop	{r4, pc}
 8014640:	200000c4 	.word	0x200000c4

08014644 <_sbrk_r>:
 8014644:	2300      	movs	r3, #0
 8014646:	b570      	push	{r4, r5, r6, lr}
 8014648:	4c06      	ldr	r4, [pc, #24]	; (8014664 <_sbrk_r+0x20>)
 801464a:	0005      	movs	r5, r0
 801464c:	0008      	movs	r0, r1
 801464e:	6023      	str	r3, [r4, #0]
 8014650:	f002 ff4a 	bl	80174e8 <_sbrk>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d103      	bne.n	8014660 <_sbrk_r+0x1c>
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d000      	beq.n	8014660 <_sbrk_r+0x1c>
 801465e:	602b      	str	r3, [r5, #0]
 8014660:	bd70      	pop	{r4, r5, r6, pc}
 8014662:	46c0      	nop			; (mov r8, r8)
 8014664:	200067a0 	.word	0x200067a0

08014668 <sniprintf>:
 8014668:	b40c      	push	{r2, r3}
 801466a:	b530      	push	{r4, r5, lr}
 801466c:	4b16      	ldr	r3, [pc, #88]	; (80146c8 <sniprintf+0x60>)
 801466e:	b09d      	sub	sp, #116	; 0x74
 8014670:	1e0c      	subs	r4, r1, #0
 8014672:	681d      	ldr	r5, [r3, #0]
 8014674:	da08      	bge.n	8014688 <sniprintf+0x20>
 8014676:	238b      	movs	r3, #139	; 0x8b
 8014678:	2001      	movs	r0, #1
 801467a:	602b      	str	r3, [r5, #0]
 801467c:	4240      	negs	r0, r0
 801467e:	b01d      	add	sp, #116	; 0x74
 8014680:	bc30      	pop	{r4, r5}
 8014682:	bc08      	pop	{r3}
 8014684:	b002      	add	sp, #8
 8014686:	4718      	bx	r3
 8014688:	2382      	movs	r3, #130	; 0x82
 801468a:	a902      	add	r1, sp, #8
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	818b      	strh	r3, [r1, #12]
 8014690:	2300      	movs	r3, #0
 8014692:	9002      	str	r0, [sp, #8]
 8014694:	6108      	str	r0, [r1, #16]
 8014696:	429c      	cmp	r4, r3
 8014698:	d000      	beq.n	801469c <sniprintf+0x34>
 801469a:	1e63      	subs	r3, r4, #1
 801469c:	608b      	str	r3, [r1, #8]
 801469e:	614b      	str	r3, [r1, #20]
 80146a0:	2301      	movs	r3, #1
 80146a2:	425b      	negs	r3, r3
 80146a4:	81cb      	strh	r3, [r1, #14]
 80146a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80146a8:	ab21      	add	r3, sp, #132	; 0x84
 80146aa:	0028      	movs	r0, r5
 80146ac:	9301      	str	r3, [sp, #4]
 80146ae:	f002 fe01 	bl	80172b4 <_svfiprintf_r>
 80146b2:	1c43      	adds	r3, r0, #1
 80146b4:	da01      	bge.n	80146ba <sniprintf+0x52>
 80146b6:	238b      	movs	r3, #139	; 0x8b
 80146b8:	602b      	str	r3, [r5, #0]
 80146ba:	2c00      	cmp	r4, #0
 80146bc:	d0df      	beq.n	801467e <sniprintf+0x16>
 80146be:	2300      	movs	r3, #0
 80146c0:	9a02      	ldr	r2, [sp, #8]
 80146c2:	7013      	strb	r3, [r2, #0]
 80146c4:	e7db      	b.n	801467e <sniprintf+0x16>
 80146c6:	46c0      	nop			; (mov r8, r8)
 80146c8:	200000c4 	.word	0x200000c4

080146cc <siprintf>:
 80146cc:	b40e      	push	{r1, r2, r3}
 80146ce:	b500      	push	{lr}
 80146d0:	490b      	ldr	r1, [pc, #44]	; (8014700 <siprintf+0x34>)
 80146d2:	b09c      	sub	sp, #112	; 0x70
 80146d4:	ab1d      	add	r3, sp, #116	; 0x74
 80146d6:	9002      	str	r0, [sp, #8]
 80146d8:	9006      	str	r0, [sp, #24]
 80146da:	9107      	str	r1, [sp, #28]
 80146dc:	9104      	str	r1, [sp, #16]
 80146de:	4809      	ldr	r0, [pc, #36]	; (8014704 <siprintf+0x38>)
 80146e0:	4909      	ldr	r1, [pc, #36]	; (8014708 <siprintf+0x3c>)
 80146e2:	cb04      	ldmia	r3!, {r2}
 80146e4:	9105      	str	r1, [sp, #20]
 80146e6:	6800      	ldr	r0, [r0, #0]
 80146e8:	a902      	add	r1, sp, #8
 80146ea:	9301      	str	r3, [sp, #4]
 80146ec:	f002 fde2 	bl	80172b4 <_svfiprintf_r>
 80146f0:	2300      	movs	r3, #0
 80146f2:	9a02      	ldr	r2, [sp, #8]
 80146f4:	7013      	strb	r3, [r2, #0]
 80146f6:	b01c      	add	sp, #112	; 0x70
 80146f8:	bc08      	pop	{r3}
 80146fa:	b003      	add	sp, #12
 80146fc:	4718      	bx	r3
 80146fe:	46c0      	nop			; (mov r8, r8)
 8014700:	7fffffff 	.word	0x7fffffff
 8014704:	200000c4 	.word	0x200000c4
 8014708:	ffff0208 	.word	0xffff0208

0801470c <strcat>:
 801470c:	0002      	movs	r2, r0
 801470e:	b510      	push	{r4, lr}
 8014710:	7813      	ldrb	r3, [r2, #0]
 8014712:	1c54      	adds	r4, r2, #1
 8014714:	2b00      	cmp	r3, #0
 8014716:	d105      	bne.n	8014724 <strcat+0x18>
 8014718:	5ccc      	ldrb	r4, [r1, r3]
 801471a:	54d4      	strb	r4, [r2, r3]
 801471c:	3301      	adds	r3, #1
 801471e:	2c00      	cmp	r4, #0
 8014720:	d1fa      	bne.n	8014718 <strcat+0xc>
 8014722:	bd10      	pop	{r4, pc}
 8014724:	0022      	movs	r2, r4
 8014726:	e7f3      	b.n	8014710 <strcat+0x4>

08014728 <strchr>:
 8014728:	b2c9      	uxtb	r1, r1
 801472a:	7803      	ldrb	r3, [r0, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d004      	beq.n	801473a <strchr+0x12>
 8014730:	428b      	cmp	r3, r1
 8014732:	d100      	bne.n	8014736 <strchr+0xe>
 8014734:	4770      	bx	lr
 8014736:	3001      	adds	r0, #1
 8014738:	e7f7      	b.n	801472a <strchr+0x2>
 801473a:	424b      	negs	r3, r1
 801473c:	4159      	adcs	r1, r3
 801473e:	4249      	negs	r1, r1
 8014740:	4008      	ands	r0, r1
 8014742:	e7f7      	b.n	8014734 <strchr+0xc>

08014744 <strcpy>:
 8014744:	0003      	movs	r3, r0
 8014746:	780a      	ldrb	r2, [r1, #0]
 8014748:	3101      	adds	r1, #1
 801474a:	701a      	strb	r2, [r3, #0]
 801474c:	3301      	adds	r3, #1
 801474e:	2a00      	cmp	r2, #0
 8014750:	d1f9      	bne.n	8014746 <strcpy+0x2>
 8014752:	4770      	bx	lr

08014754 <strncmp>:
 8014754:	2300      	movs	r3, #0
 8014756:	b530      	push	{r4, r5, lr}
 8014758:	429a      	cmp	r2, r3
 801475a:	d00a      	beq.n	8014772 <strncmp+0x1e>
 801475c:	3a01      	subs	r2, #1
 801475e:	5cc4      	ldrb	r4, [r0, r3]
 8014760:	5ccd      	ldrb	r5, [r1, r3]
 8014762:	42ac      	cmp	r4, r5
 8014764:	d104      	bne.n	8014770 <strncmp+0x1c>
 8014766:	4293      	cmp	r3, r2
 8014768:	d002      	beq.n	8014770 <strncmp+0x1c>
 801476a:	3301      	adds	r3, #1
 801476c:	2c00      	cmp	r4, #0
 801476e:	d1f6      	bne.n	801475e <strncmp+0xa>
 8014770:	1b63      	subs	r3, r4, r5
 8014772:	0018      	movs	r0, r3
 8014774:	bd30      	pop	{r4, r5, pc}

08014776 <strncpy>:
 8014776:	b530      	push	{r4, r5, lr}
 8014778:	0005      	movs	r5, r0
 801477a:	2a00      	cmp	r2, #0
 801477c:	d100      	bne.n	8014780 <strncpy+0xa>
 801477e:	bd30      	pop	{r4, r5, pc}
 8014780:	780c      	ldrb	r4, [r1, #0]
 8014782:	3a01      	subs	r2, #1
 8014784:	1c6b      	adds	r3, r5, #1
 8014786:	702c      	strb	r4, [r5, #0]
 8014788:	3101      	adds	r1, #1
 801478a:	2c00      	cmp	r4, #0
 801478c:	d105      	bne.n	801479a <strncpy+0x24>
 801478e:	189a      	adds	r2, r3, r2
 8014790:	429a      	cmp	r2, r3
 8014792:	d0f4      	beq.n	801477e <strncpy+0x8>
 8014794:	701c      	strb	r4, [r3, #0]
 8014796:	3301      	adds	r3, #1
 8014798:	e7fa      	b.n	8014790 <strncpy+0x1a>
 801479a:	001d      	movs	r5, r3
 801479c:	e7ed      	b.n	801477a <strncpy+0x4>
	...

080147a0 <sulp>:
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	0016      	movs	r6, r2
 80147a4:	000d      	movs	r5, r1
 80147a6:	f002 fbc9 	bl	8016f3c <__ulp>
 80147aa:	2e00      	cmp	r6, #0
 80147ac:	d00d      	beq.n	80147ca <sulp+0x2a>
 80147ae:	236b      	movs	r3, #107	; 0x6b
 80147b0:	006a      	lsls	r2, r5, #1
 80147b2:	0d52      	lsrs	r2, r2, #21
 80147b4:	1a9b      	subs	r3, r3, r2
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	dd07      	ble.n	80147ca <sulp+0x2a>
 80147ba:	2400      	movs	r4, #0
 80147bc:	4a03      	ldr	r2, [pc, #12]	; (80147cc <sulp+0x2c>)
 80147be:	051b      	lsls	r3, r3, #20
 80147c0:	189d      	adds	r5, r3, r2
 80147c2:	002b      	movs	r3, r5
 80147c4:	0022      	movs	r2, r4
 80147c6:	f7ed fbe3 	bl	8001f90 <__aeabi_dmul>
 80147ca:	bd70      	pop	{r4, r5, r6, pc}
 80147cc:	3ff00000 	.word	0x3ff00000

080147d0 <_strtod_l>:
 80147d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147d2:	b0a7      	sub	sp, #156	; 0x9c
 80147d4:	9307      	str	r3, [sp, #28]
 80147d6:	2300      	movs	r3, #0
 80147d8:	9004      	str	r0, [sp, #16]
 80147da:	9807      	ldr	r0, [sp, #28]
 80147dc:	9322      	str	r3, [sp, #136]	; 0x88
 80147de:	9106      	str	r1, [sp, #24]
 80147e0:	921d      	str	r2, [sp, #116]	; 0x74
 80147e2:	f002 f8be 	bl	8016962 <__localeconv_l>
 80147e6:	0005      	movs	r5, r0
 80147e8:	6800      	ldr	r0, [r0, #0]
 80147ea:	f7eb fc95 	bl	8000118 <strlen>
 80147ee:	2600      	movs	r6, #0
 80147f0:	2700      	movs	r7, #0
 80147f2:	9b06      	ldr	r3, [sp, #24]
 80147f4:	9005      	str	r0, [sp, #20]
 80147f6:	9321      	str	r3, [sp, #132]	; 0x84
 80147f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147fa:	781a      	ldrb	r2, [r3, #0]
 80147fc:	2a0d      	cmp	r2, #13
 80147fe:	d839      	bhi.n	8014874 <_strtod_l+0xa4>
 8014800:	2a09      	cmp	r2, #9
 8014802:	d23d      	bcs.n	8014880 <_strtod_l+0xb0>
 8014804:	2a00      	cmp	r2, #0
 8014806:	d044      	beq.n	8014892 <_strtod_l+0xc2>
 8014808:	2300      	movs	r3, #0
 801480a:	9313      	str	r3, [sp, #76]	; 0x4c
 801480c:	2200      	movs	r2, #0
 801480e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014810:	920c      	str	r2, [sp, #48]	; 0x30
 8014812:	7823      	ldrb	r3, [r4, #0]
 8014814:	2b30      	cmp	r3, #48	; 0x30
 8014816:	d000      	beq.n	801481a <_strtod_l+0x4a>
 8014818:	e07e      	b.n	8014918 <_strtod_l+0x148>
 801481a:	7863      	ldrb	r3, [r4, #1]
 801481c:	2b58      	cmp	r3, #88	; 0x58
 801481e:	d002      	beq.n	8014826 <_strtod_l+0x56>
 8014820:	2b78      	cmp	r3, #120	; 0x78
 8014822:	d000      	beq.n	8014826 <_strtod_l+0x56>
 8014824:	e06e      	b.n	8014904 <_strtod_l+0x134>
 8014826:	9b07      	ldr	r3, [sp, #28]
 8014828:	4a96      	ldr	r2, [pc, #600]	; (8014a84 <_strtod_l+0x2b4>)
 801482a:	9302      	str	r3, [sp, #8]
 801482c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801482e:	a921      	add	r1, sp, #132	; 0x84
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	ab22      	add	r3, sp, #136	; 0x88
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	9804      	ldr	r0, [sp, #16]
 8014838:	ab23      	add	r3, sp, #140	; 0x8c
 801483a:	f001 fdaa 	bl	8016392 <__gethex>
 801483e:	2507      	movs	r5, #7
 8014840:	9005      	str	r0, [sp, #20]
 8014842:	4005      	ands	r5, r0
 8014844:	d005      	beq.n	8014852 <_strtod_l+0x82>
 8014846:	2d06      	cmp	r5, #6
 8014848:	d12f      	bne.n	80148aa <_strtod_l+0xda>
 801484a:	2300      	movs	r3, #0
 801484c:	3401      	adds	r4, #1
 801484e:	9421      	str	r4, [sp, #132]	; 0x84
 8014850:	9313      	str	r3, [sp, #76]	; 0x4c
 8014852:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014854:	2b00      	cmp	r3, #0
 8014856:	d002      	beq.n	801485e <_strtod_l+0x8e>
 8014858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801485a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014860:	2b00      	cmp	r3, #0
 8014862:	d01d      	beq.n	80148a0 <_strtod_l+0xd0>
 8014864:	2380      	movs	r3, #128	; 0x80
 8014866:	0032      	movs	r2, r6
 8014868:	061b      	lsls	r3, r3, #24
 801486a:	18fb      	adds	r3, r7, r3
 801486c:	0010      	movs	r0, r2
 801486e:	0019      	movs	r1, r3
 8014870:	b027      	add	sp, #156	; 0x9c
 8014872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014874:	2a2b      	cmp	r2, #43	; 0x2b
 8014876:	d016      	beq.n	80148a6 <_strtod_l+0xd6>
 8014878:	2a2d      	cmp	r2, #45	; 0x2d
 801487a:	d003      	beq.n	8014884 <_strtod_l+0xb4>
 801487c:	2a20      	cmp	r2, #32
 801487e:	d1c3      	bne.n	8014808 <_strtod_l+0x38>
 8014880:	3301      	adds	r3, #1
 8014882:	e7b8      	b.n	80147f6 <_strtod_l+0x26>
 8014884:	2201      	movs	r2, #1
 8014886:	9213      	str	r2, [sp, #76]	; 0x4c
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	9221      	str	r2, [sp, #132]	; 0x84
 801488c:	785b      	ldrb	r3, [r3, #1]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d1bc      	bne.n	801480c <_strtod_l+0x3c>
 8014892:	9b06      	ldr	r3, [sp, #24]
 8014894:	9321      	str	r3, [sp, #132]	; 0x84
 8014896:	2300      	movs	r3, #0
 8014898:	9313      	str	r3, [sp, #76]	; 0x4c
 801489a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1db      	bne.n	8014858 <_strtod_l+0x88>
 80148a0:	0032      	movs	r2, r6
 80148a2:	003b      	movs	r3, r7
 80148a4:	e7e2      	b.n	801486c <_strtod_l+0x9c>
 80148a6:	2200      	movs	r2, #0
 80148a8:	e7ed      	b.n	8014886 <_strtod_l+0xb6>
 80148aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80148ac:	2a00      	cmp	r2, #0
 80148ae:	d007      	beq.n	80148c0 <_strtod_l+0xf0>
 80148b0:	2135      	movs	r1, #53	; 0x35
 80148b2:	a824      	add	r0, sp, #144	; 0x90
 80148b4:	f002 fc2f 	bl	8017116 <__copybits>
 80148b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80148ba:	9804      	ldr	r0, [sp, #16]
 80148bc:	f002 f8a5 	bl	8016a0a <_Bfree>
 80148c0:	1e68      	subs	r0, r5, #1
 80148c2:	2804      	cmp	r0, #4
 80148c4:	d806      	bhi.n	80148d4 <_strtod_l+0x104>
 80148c6:	f7eb fc2f 	bl	8000128 <__gnu_thumb1_case_uqi>
 80148ca:	030c      	.short	0x030c
 80148cc:	1917      	.short	0x1917
 80148ce:	0c          	.byte	0x0c
 80148cf:	00          	.byte	0x00
 80148d0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80148d2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80148d4:	9b05      	ldr	r3, [sp, #20]
 80148d6:	071b      	lsls	r3, r3, #28
 80148d8:	d5bb      	bpl.n	8014852 <_strtod_l+0x82>
 80148da:	2380      	movs	r3, #128	; 0x80
 80148dc:	061b      	lsls	r3, r3, #24
 80148de:	431f      	orrs	r7, r3
 80148e0:	e7b7      	b.n	8014852 <_strtod_l+0x82>
 80148e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80148e4:	4a68      	ldr	r2, [pc, #416]	; (8014a88 <_strtod_l+0x2b8>)
 80148e6:	4969      	ldr	r1, [pc, #420]	; (8014a8c <_strtod_l+0x2bc>)
 80148e8:	401a      	ands	r2, r3
 80148ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80148ec:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80148ee:	185b      	adds	r3, r3, r1
 80148f0:	051b      	lsls	r3, r3, #20
 80148f2:	431a      	orrs	r2, r3
 80148f4:	0017      	movs	r7, r2
 80148f6:	e7ed      	b.n	80148d4 <_strtod_l+0x104>
 80148f8:	4f65      	ldr	r7, [pc, #404]	; (8014a90 <_strtod_l+0x2c0>)
 80148fa:	e7eb      	b.n	80148d4 <_strtod_l+0x104>
 80148fc:	2601      	movs	r6, #1
 80148fe:	4f65      	ldr	r7, [pc, #404]	; (8014a94 <_strtod_l+0x2c4>)
 8014900:	4276      	negs	r6, r6
 8014902:	e7e7      	b.n	80148d4 <_strtod_l+0x104>
 8014904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014906:	1c5a      	adds	r2, r3, #1
 8014908:	9221      	str	r2, [sp, #132]	; 0x84
 801490a:	785b      	ldrb	r3, [r3, #1]
 801490c:	2b30      	cmp	r3, #48	; 0x30
 801490e:	d0f9      	beq.n	8014904 <_strtod_l+0x134>
 8014910:	2b00      	cmp	r3, #0
 8014912:	d09e      	beq.n	8014852 <_strtod_l+0x82>
 8014914:	2301      	movs	r3, #1
 8014916:	930c      	str	r3, [sp, #48]	; 0x30
 8014918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801491a:	220a      	movs	r2, #10
 801491c:	9312      	str	r3, [sp, #72]	; 0x48
 801491e:	2300      	movs	r3, #0
 8014920:	930b      	str	r3, [sp, #44]	; 0x2c
 8014922:	9308      	str	r3, [sp, #32]
 8014924:	930a      	str	r3, [sp, #40]	; 0x28
 8014926:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014928:	7804      	ldrb	r4, [r0, #0]
 801492a:	0023      	movs	r3, r4
 801492c:	3b30      	subs	r3, #48	; 0x30
 801492e:	b2d9      	uxtb	r1, r3
 8014930:	2909      	cmp	r1, #9
 8014932:	d934      	bls.n	801499e <_strtod_l+0x1ce>
 8014934:	9a05      	ldr	r2, [sp, #20]
 8014936:	6829      	ldr	r1, [r5, #0]
 8014938:	f7ff ff0c 	bl	8014754 <strncmp>
 801493c:	2800      	cmp	r0, #0
 801493e:	d040      	beq.n	80149c2 <_strtod_l+0x1f2>
 8014940:	2000      	movs	r0, #0
 8014942:	0023      	movs	r3, r4
 8014944:	4684      	mov	ip, r0
 8014946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014948:	9007      	str	r0, [sp, #28]
 801494a:	9205      	str	r2, [sp, #20]
 801494c:	2220      	movs	r2, #32
 801494e:	0019      	movs	r1, r3
 8014950:	4391      	bics	r1, r2
 8014952:	000a      	movs	r2, r1
 8014954:	2100      	movs	r1, #0
 8014956:	2a45      	cmp	r2, #69	; 0x45
 8014958:	d000      	beq.n	801495c <_strtod_l+0x18c>
 801495a:	e0bf      	b.n	8014adc <_strtod_l+0x30c>
 801495c:	9b05      	ldr	r3, [sp, #20]
 801495e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014960:	4303      	orrs	r3, r0
 8014962:	4313      	orrs	r3, r2
 8014964:	428b      	cmp	r3, r1
 8014966:	d094      	beq.n	8014892 <_strtod_l+0xc2>
 8014968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801496a:	9306      	str	r3, [sp, #24]
 801496c:	3301      	adds	r3, #1
 801496e:	9321      	str	r3, [sp, #132]	; 0x84
 8014970:	9b06      	ldr	r3, [sp, #24]
 8014972:	785b      	ldrb	r3, [r3, #1]
 8014974:	2b2b      	cmp	r3, #43	; 0x2b
 8014976:	d100      	bne.n	801497a <_strtod_l+0x1aa>
 8014978:	e082      	b.n	8014a80 <_strtod_l+0x2b0>
 801497a:	000c      	movs	r4, r1
 801497c:	2b2d      	cmp	r3, #45	; 0x2d
 801497e:	d105      	bne.n	801498c <_strtod_l+0x1bc>
 8014980:	2401      	movs	r4, #1
 8014982:	9b06      	ldr	r3, [sp, #24]
 8014984:	3302      	adds	r3, #2
 8014986:	9321      	str	r3, [sp, #132]	; 0x84
 8014988:	9b06      	ldr	r3, [sp, #24]
 801498a:	789b      	ldrb	r3, [r3, #2]
 801498c:	001a      	movs	r2, r3
 801498e:	3a30      	subs	r2, #48	; 0x30
 8014990:	2a09      	cmp	r2, #9
 8014992:	d800      	bhi.n	8014996 <_strtod_l+0x1c6>
 8014994:	e084      	b.n	8014aa0 <_strtod_l+0x2d0>
 8014996:	9a06      	ldr	r2, [sp, #24]
 8014998:	2100      	movs	r1, #0
 801499a:	9221      	str	r2, [sp, #132]	; 0x84
 801499c:	e09e      	b.n	8014adc <_strtod_l+0x30c>
 801499e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80149a0:	2908      	cmp	r1, #8
 80149a2:	dc09      	bgt.n	80149b8 <_strtod_l+0x1e8>
 80149a4:	9908      	ldr	r1, [sp, #32]
 80149a6:	4351      	muls	r1, r2
 80149a8:	18cb      	adds	r3, r1, r3
 80149aa:	9308      	str	r3, [sp, #32]
 80149ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149ae:	3001      	adds	r0, #1
 80149b0:	3301      	adds	r3, #1
 80149b2:	930a      	str	r3, [sp, #40]	; 0x28
 80149b4:	9021      	str	r0, [sp, #132]	; 0x84
 80149b6:	e7b6      	b.n	8014926 <_strtod_l+0x156>
 80149b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149ba:	4351      	muls	r1, r2
 80149bc:	18cb      	adds	r3, r1, r3
 80149be:	930b      	str	r3, [sp, #44]	; 0x2c
 80149c0:	e7f4      	b.n	80149ac <_strtod_l+0x1dc>
 80149c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149c4:	9b05      	ldr	r3, [sp, #20]
 80149c6:	4694      	mov	ip, r2
 80149c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149ca:	4463      	add	r3, ip
 80149cc:	9321      	str	r3, [sp, #132]	; 0x84
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	2a00      	cmp	r2, #0
 80149d2:	d036      	beq.n	8014a42 <_strtod_l+0x272>
 80149d4:	4684      	mov	ip, r0
 80149d6:	9205      	str	r2, [sp, #20]
 80149d8:	001a      	movs	r2, r3
 80149da:	3a30      	subs	r2, #48	; 0x30
 80149dc:	2a09      	cmp	r2, #9
 80149de:	d912      	bls.n	8014a06 <_strtod_l+0x236>
 80149e0:	2201      	movs	r2, #1
 80149e2:	9207      	str	r2, [sp, #28]
 80149e4:	e7b2      	b.n	801494c <_strtod_l+0x17c>
 80149e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149e8:	3001      	adds	r0, #1
 80149ea:	1c5a      	adds	r2, r3, #1
 80149ec:	9221      	str	r2, [sp, #132]	; 0x84
 80149ee:	785b      	ldrb	r3, [r3, #1]
 80149f0:	2b30      	cmp	r3, #48	; 0x30
 80149f2:	d0f8      	beq.n	80149e6 <_strtod_l+0x216>
 80149f4:	001a      	movs	r2, r3
 80149f6:	3a31      	subs	r2, #49	; 0x31
 80149f8:	2a08      	cmp	r2, #8
 80149fa:	d83c      	bhi.n	8014a76 <_strtod_l+0x2a6>
 80149fc:	4684      	mov	ip, r0
 80149fe:	2000      	movs	r0, #0
 8014a00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a02:	9005      	str	r0, [sp, #20]
 8014a04:	9212      	str	r2, [sp, #72]	; 0x48
 8014a06:	3b30      	subs	r3, #48	; 0x30
 8014a08:	1c42      	adds	r2, r0, #1
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d013      	beq.n	8014a36 <_strtod_l+0x266>
 8014a0e:	210a      	movs	r1, #10
 8014a10:	4494      	add	ip, r2
 8014a12:	9a05      	ldr	r2, [sp, #20]
 8014a14:	1885      	adds	r5, r0, r2
 8014a16:	42aa      	cmp	r2, r5
 8014a18:	d115      	bne.n	8014a46 <_strtod_l+0x276>
 8014a1a:	9905      	ldr	r1, [sp, #20]
 8014a1c:	9a05      	ldr	r2, [sp, #20]
 8014a1e:	3101      	adds	r1, #1
 8014a20:	1809      	adds	r1, r1, r0
 8014a22:	1812      	adds	r2, r2, r0
 8014a24:	9105      	str	r1, [sp, #20]
 8014a26:	2a08      	cmp	r2, #8
 8014a28:	dc1b      	bgt.n	8014a62 <_strtod_l+0x292>
 8014a2a:	220a      	movs	r2, #10
 8014a2c:	9908      	ldr	r1, [sp, #32]
 8014a2e:	434a      	muls	r2, r1
 8014a30:	189b      	adds	r3, r3, r2
 8014a32:	2200      	movs	r2, #0
 8014a34:	9308      	str	r3, [sp, #32]
 8014a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a38:	0010      	movs	r0, r2
 8014a3a:	1c59      	adds	r1, r3, #1
 8014a3c:	9121      	str	r1, [sp, #132]	; 0x84
 8014a3e:	785b      	ldrb	r3, [r3, #1]
 8014a40:	e7ca      	b.n	80149d8 <_strtod_l+0x208>
 8014a42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a44:	e7d4      	b.n	80149f0 <_strtod_l+0x220>
 8014a46:	1c54      	adds	r4, r2, #1
 8014a48:	2a08      	cmp	r2, #8
 8014a4a:	dc04      	bgt.n	8014a56 <_strtod_l+0x286>
 8014a4c:	9a08      	ldr	r2, [sp, #32]
 8014a4e:	434a      	muls	r2, r1
 8014a50:	9208      	str	r2, [sp, #32]
 8014a52:	0022      	movs	r2, r4
 8014a54:	e7df      	b.n	8014a16 <_strtod_l+0x246>
 8014a56:	2c10      	cmp	r4, #16
 8014a58:	dcfb      	bgt.n	8014a52 <_strtod_l+0x282>
 8014a5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a5c:	434a      	muls	r2, r1
 8014a5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a60:	e7f7      	b.n	8014a52 <_strtod_l+0x282>
 8014a62:	9905      	ldr	r1, [sp, #20]
 8014a64:	2200      	movs	r2, #0
 8014a66:	2910      	cmp	r1, #16
 8014a68:	dce5      	bgt.n	8014a36 <_strtod_l+0x266>
 8014a6a:	210a      	movs	r1, #10
 8014a6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a6e:	4341      	muls	r1, r0
 8014a70:	185b      	adds	r3, r3, r1
 8014a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a74:	e7df      	b.n	8014a36 <_strtod_l+0x266>
 8014a76:	2200      	movs	r2, #0
 8014a78:	4694      	mov	ip, r2
 8014a7a:	9205      	str	r2, [sp, #20]
 8014a7c:	3201      	adds	r2, #1
 8014a7e:	e7b0      	b.n	80149e2 <_strtod_l+0x212>
 8014a80:	000c      	movs	r4, r1
 8014a82:	e77e      	b.n	8014982 <_strtod_l+0x1b2>
 8014a84:	0801a66c 	.word	0x0801a66c
 8014a88:	ffefffff 	.word	0xffefffff
 8014a8c:	00000433 	.word	0x00000433
 8014a90:	7ff00000 	.word	0x7ff00000
 8014a94:	7fffffff 	.word	0x7fffffff
 8014a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a9a:	1c5a      	adds	r2, r3, #1
 8014a9c:	9221      	str	r2, [sp, #132]	; 0x84
 8014a9e:	785b      	ldrb	r3, [r3, #1]
 8014aa0:	2b30      	cmp	r3, #48	; 0x30
 8014aa2:	d0f9      	beq.n	8014a98 <_strtod_l+0x2c8>
 8014aa4:	001a      	movs	r2, r3
 8014aa6:	3a31      	subs	r2, #49	; 0x31
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	2a08      	cmp	r2, #8
 8014aac:	d816      	bhi.n	8014adc <_strtod_l+0x30c>
 8014aae:	3b30      	subs	r3, #48	; 0x30
 8014ab0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8014ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ab6:	1c59      	adds	r1, r3, #1
 8014ab8:	9121      	str	r1, [sp, #132]	; 0x84
 8014aba:	785b      	ldrb	r3, [r3, #1]
 8014abc:	001a      	movs	r2, r3
 8014abe:	3a30      	subs	r2, #48	; 0x30
 8014ac0:	2a09      	cmp	r2, #9
 8014ac2:	d932      	bls.n	8014b2a <_strtod_l+0x35a>
 8014ac4:	1b4a      	subs	r2, r1, r5
 8014ac6:	4dad      	ldr	r5, [pc, #692]	; (8014d7c <_strtod_l+0x5ac>)
 8014ac8:	0029      	movs	r1, r5
 8014aca:	2a08      	cmp	r2, #8
 8014acc:	dc03      	bgt.n	8014ad6 <_strtod_l+0x306>
 8014ace:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ad0:	42a9      	cmp	r1, r5
 8014ad2:	dd00      	ble.n	8014ad6 <_strtod_l+0x306>
 8014ad4:	0029      	movs	r1, r5
 8014ad6:	2c00      	cmp	r4, #0
 8014ad8:	d000      	beq.n	8014adc <_strtod_l+0x30c>
 8014ada:	4249      	negs	r1, r1
 8014adc:	9a05      	ldr	r2, [sp, #20]
 8014ade:	2a00      	cmp	r2, #0
 8014ae0:	d149      	bne.n	8014b76 <_strtod_l+0x3a6>
 8014ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ae4:	4310      	orrs	r0, r2
 8014ae6:	d000      	beq.n	8014aea <_strtod_l+0x31a>
 8014ae8:	e6b3      	b.n	8014852 <_strtod_l+0x82>
 8014aea:	9a07      	ldr	r2, [sp, #28]
 8014aec:	2a00      	cmp	r2, #0
 8014aee:	d000      	beq.n	8014af2 <_strtod_l+0x322>
 8014af0:	e6cf      	b.n	8014892 <_strtod_l+0xc2>
 8014af2:	2b4e      	cmp	r3, #78	; 0x4e
 8014af4:	d025      	beq.n	8014b42 <_strtod_l+0x372>
 8014af6:	dc1f      	bgt.n	8014b38 <_strtod_l+0x368>
 8014af8:	2b49      	cmp	r3, #73	; 0x49
 8014afa:	d000      	beq.n	8014afe <_strtod_l+0x32e>
 8014afc:	e6c9      	b.n	8014892 <_strtod_l+0xc2>
 8014afe:	49a0      	ldr	r1, [pc, #640]	; (8014d80 <_strtod_l+0x5b0>)
 8014b00:	a821      	add	r0, sp, #132	; 0x84
 8014b02:	f001 fe83 	bl	801680c <__match>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d100      	bne.n	8014b0c <_strtod_l+0x33c>
 8014b0a:	e6c2      	b.n	8014892 <_strtod_l+0xc2>
 8014b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b0e:	499d      	ldr	r1, [pc, #628]	; (8014d84 <_strtod_l+0x5b4>)
 8014b10:	3b01      	subs	r3, #1
 8014b12:	a821      	add	r0, sp, #132	; 0x84
 8014b14:	9321      	str	r3, [sp, #132]	; 0x84
 8014b16:	f001 fe79 	bl	801680c <__match>
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	d102      	bne.n	8014b24 <_strtod_l+0x354>
 8014b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b20:	3301      	adds	r3, #1
 8014b22:	9321      	str	r3, [sp, #132]	; 0x84
 8014b24:	4f98      	ldr	r7, [pc, #608]	; (8014d88 <_strtod_l+0x5b8>)
 8014b26:	2600      	movs	r6, #0
 8014b28:	e693      	b.n	8014852 <_strtod_l+0x82>
 8014b2a:	220a      	movs	r2, #10
 8014b2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b2e:	434a      	muls	r2, r1
 8014b30:	18d2      	adds	r2, r2, r3
 8014b32:	3a30      	subs	r2, #48	; 0x30
 8014b34:	920e      	str	r2, [sp, #56]	; 0x38
 8014b36:	e7bd      	b.n	8014ab4 <_strtod_l+0x2e4>
 8014b38:	2b69      	cmp	r3, #105	; 0x69
 8014b3a:	d0e0      	beq.n	8014afe <_strtod_l+0x32e>
 8014b3c:	2b6e      	cmp	r3, #110	; 0x6e
 8014b3e:	d000      	beq.n	8014b42 <_strtod_l+0x372>
 8014b40:	e6a7      	b.n	8014892 <_strtod_l+0xc2>
 8014b42:	4992      	ldr	r1, [pc, #584]	; (8014d8c <_strtod_l+0x5bc>)
 8014b44:	a821      	add	r0, sp, #132	; 0x84
 8014b46:	f001 fe61 	bl	801680c <__match>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d100      	bne.n	8014b50 <_strtod_l+0x380>
 8014b4e:	e6a0      	b.n	8014892 <_strtod_l+0xc2>
 8014b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	2b28      	cmp	r3, #40	; 0x28
 8014b56:	d10c      	bne.n	8014b72 <_strtod_l+0x3a2>
 8014b58:	aa24      	add	r2, sp, #144	; 0x90
 8014b5a:	498d      	ldr	r1, [pc, #564]	; (8014d90 <_strtod_l+0x5c0>)
 8014b5c:	a821      	add	r0, sp, #132	; 0x84
 8014b5e:	f001 fe69 	bl	8016834 <__hexnan>
 8014b62:	2805      	cmp	r0, #5
 8014b64:	d105      	bne.n	8014b72 <_strtod_l+0x3a2>
 8014b66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014b68:	4a87      	ldr	r2, [pc, #540]	; (8014d88 <_strtod_l+0x5b8>)
 8014b6a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014b6c:	431a      	orrs	r2, r3
 8014b6e:	0017      	movs	r7, r2
 8014b70:	e66f      	b.n	8014852 <_strtod_l+0x82>
 8014b72:	4f88      	ldr	r7, [pc, #544]	; (8014d94 <_strtod_l+0x5c4>)
 8014b74:	e7d7      	b.n	8014b26 <_strtod_l+0x356>
 8014b76:	4663      	mov	r3, ip
 8014b78:	1acb      	subs	r3, r1, r3
 8014b7a:	9307      	str	r3, [sp, #28]
 8014b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d101      	bne.n	8014b86 <_strtod_l+0x3b6>
 8014b82:	9b05      	ldr	r3, [sp, #20]
 8014b84:	930a      	str	r3, [sp, #40]	; 0x28
 8014b86:	9c05      	ldr	r4, [sp, #20]
 8014b88:	2c10      	cmp	r4, #16
 8014b8a:	dd00      	ble.n	8014b8e <_strtod_l+0x3be>
 8014b8c:	2410      	movs	r4, #16
 8014b8e:	9808      	ldr	r0, [sp, #32]
 8014b90:	f7ee f844 	bl	8002c1c <__aeabi_ui2d>
 8014b94:	9b05      	ldr	r3, [sp, #20]
 8014b96:	0006      	movs	r6, r0
 8014b98:	000f      	movs	r7, r1
 8014b9a:	2b09      	cmp	r3, #9
 8014b9c:	dc15      	bgt.n	8014bca <_strtod_l+0x3fa>
 8014b9e:	9b07      	ldr	r3, [sp, #28]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d100      	bne.n	8014ba6 <_strtod_l+0x3d6>
 8014ba4:	e655      	b.n	8014852 <_strtod_l+0x82>
 8014ba6:	9b07      	ldr	r3, [sp, #28]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	dc00      	bgt.n	8014bae <_strtod_l+0x3de>
 8014bac:	e07d      	b.n	8014caa <_strtod_l+0x4da>
 8014bae:	2b16      	cmp	r3, #22
 8014bb0:	dc62      	bgt.n	8014c78 <_strtod_l+0x4a8>
 8014bb2:	00dc      	lsls	r4, r3, #3
 8014bb4:	4b78      	ldr	r3, [pc, #480]	; (8014d98 <_strtod_l+0x5c8>)
 8014bb6:	0032      	movs	r2, r6
 8014bb8:	1919      	adds	r1, r3, r4
 8014bba:	003b      	movs	r3, r7
 8014bbc:	6808      	ldr	r0, [r1, #0]
 8014bbe:	6849      	ldr	r1, [r1, #4]
 8014bc0:	f7ed f9e6 	bl	8001f90 <__aeabi_dmul>
 8014bc4:	0006      	movs	r6, r0
 8014bc6:	000f      	movs	r7, r1
 8014bc8:	e643      	b.n	8014852 <_strtod_l+0x82>
 8014bca:	0022      	movs	r2, r4
 8014bcc:	4b72      	ldr	r3, [pc, #456]	; (8014d98 <_strtod_l+0x5c8>)
 8014bce:	3a09      	subs	r2, #9
 8014bd0:	00d2      	lsls	r2, r2, #3
 8014bd2:	189b      	adds	r3, r3, r2
 8014bd4:	681a      	ldr	r2, [r3, #0]
 8014bd6:	685b      	ldr	r3, [r3, #4]
 8014bd8:	f7ed f9da 	bl	8001f90 <__aeabi_dmul>
 8014bdc:	0006      	movs	r6, r0
 8014bde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014be0:	000f      	movs	r7, r1
 8014be2:	f7ee f81b 	bl	8002c1c <__aeabi_ui2d>
 8014be6:	000b      	movs	r3, r1
 8014be8:	0002      	movs	r2, r0
 8014bea:	0039      	movs	r1, r7
 8014bec:	0030      	movs	r0, r6
 8014bee:	f7ec faa9 	bl	8001144 <__aeabi_dadd>
 8014bf2:	9b05      	ldr	r3, [sp, #20]
 8014bf4:	0006      	movs	r6, r0
 8014bf6:	000f      	movs	r7, r1
 8014bf8:	2b0f      	cmp	r3, #15
 8014bfa:	ddd0      	ble.n	8014b9e <_strtod_l+0x3ce>
 8014bfc:	9b05      	ldr	r3, [sp, #20]
 8014bfe:	1b1c      	subs	r4, r3, r4
 8014c00:	9b07      	ldr	r3, [sp, #28]
 8014c02:	18e4      	adds	r4, r4, r3
 8014c04:	2c00      	cmp	r4, #0
 8014c06:	dc00      	bgt.n	8014c0a <_strtod_l+0x43a>
 8014c08:	e094      	b.n	8014d34 <_strtod_l+0x564>
 8014c0a:	230f      	movs	r3, #15
 8014c0c:	4023      	ands	r3, r4
 8014c0e:	d00a      	beq.n	8014c26 <_strtod_l+0x456>
 8014c10:	4961      	ldr	r1, [pc, #388]	; (8014d98 <_strtod_l+0x5c8>)
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	18c9      	adds	r1, r1, r3
 8014c16:	0032      	movs	r2, r6
 8014c18:	6808      	ldr	r0, [r1, #0]
 8014c1a:	6849      	ldr	r1, [r1, #4]
 8014c1c:	003b      	movs	r3, r7
 8014c1e:	f7ed f9b7 	bl	8001f90 <__aeabi_dmul>
 8014c22:	0006      	movs	r6, r0
 8014c24:	000f      	movs	r7, r1
 8014c26:	230f      	movs	r3, #15
 8014c28:	439c      	bics	r4, r3
 8014c2a:	d06e      	beq.n	8014d0a <_strtod_l+0x53a>
 8014c2c:	3326      	adds	r3, #38	; 0x26
 8014c2e:	33ff      	adds	r3, #255	; 0xff
 8014c30:	429c      	cmp	r4, r3
 8014c32:	dd48      	ble.n	8014cc6 <_strtod_l+0x4f6>
 8014c34:	2400      	movs	r4, #0
 8014c36:	9405      	str	r4, [sp, #20]
 8014c38:	940b      	str	r4, [sp, #44]	; 0x2c
 8014c3a:	940a      	str	r4, [sp, #40]	; 0x28
 8014c3c:	2322      	movs	r3, #34	; 0x22
 8014c3e:	2600      	movs	r6, #0
 8014c40:	9a04      	ldr	r2, [sp, #16]
 8014c42:	4f51      	ldr	r7, [pc, #324]	; (8014d88 <_strtod_l+0x5b8>)
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c48:	42b3      	cmp	r3, r6
 8014c4a:	d100      	bne.n	8014c4e <_strtod_l+0x47e>
 8014c4c:	e601      	b.n	8014852 <_strtod_l+0x82>
 8014c4e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c50:	9804      	ldr	r0, [sp, #16]
 8014c52:	f001 feda 	bl	8016a0a <_Bfree>
 8014c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c58:	9804      	ldr	r0, [sp, #16]
 8014c5a:	f001 fed6 	bl	8016a0a <_Bfree>
 8014c5e:	9905      	ldr	r1, [sp, #20]
 8014c60:	9804      	ldr	r0, [sp, #16]
 8014c62:	f001 fed2 	bl	8016a0a <_Bfree>
 8014c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c68:	9804      	ldr	r0, [sp, #16]
 8014c6a:	f001 fece 	bl	8016a0a <_Bfree>
 8014c6e:	0021      	movs	r1, r4
 8014c70:	9804      	ldr	r0, [sp, #16]
 8014c72:	f001 feca 	bl	8016a0a <_Bfree>
 8014c76:	e5ec      	b.n	8014852 <_strtod_l+0x82>
 8014c78:	2325      	movs	r3, #37	; 0x25
 8014c7a:	9a05      	ldr	r2, [sp, #20]
 8014c7c:	1a9b      	subs	r3, r3, r2
 8014c7e:	9a07      	ldr	r2, [sp, #28]
 8014c80:	4293      	cmp	r3, r2
 8014c82:	dbbb      	blt.n	8014bfc <_strtod_l+0x42c>
 8014c84:	230f      	movs	r3, #15
 8014c86:	9a05      	ldr	r2, [sp, #20]
 8014c88:	4c43      	ldr	r4, [pc, #268]	; (8014d98 <_strtod_l+0x5c8>)
 8014c8a:	1a9d      	subs	r5, r3, r2
 8014c8c:	00e9      	lsls	r1, r5, #3
 8014c8e:	1861      	adds	r1, r4, r1
 8014c90:	0032      	movs	r2, r6
 8014c92:	6808      	ldr	r0, [r1, #0]
 8014c94:	6849      	ldr	r1, [r1, #4]
 8014c96:	003b      	movs	r3, r7
 8014c98:	f7ed f97a 	bl	8001f90 <__aeabi_dmul>
 8014c9c:	9b07      	ldr	r3, [sp, #28]
 8014c9e:	1b5e      	subs	r6, r3, r5
 8014ca0:	00f6      	lsls	r6, r6, #3
 8014ca2:	19a6      	adds	r6, r4, r6
 8014ca4:	6832      	ldr	r2, [r6, #0]
 8014ca6:	6873      	ldr	r3, [r6, #4]
 8014ca8:	e78a      	b.n	8014bc0 <_strtod_l+0x3f0>
 8014caa:	9b07      	ldr	r3, [sp, #28]
 8014cac:	3316      	adds	r3, #22
 8014cae:	dba5      	blt.n	8014bfc <_strtod_l+0x42c>
 8014cb0:	9b07      	ldr	r3, [sp, #28]
 8014cb2:	0030      	movs	r0, r6
 8014cb4:	00da      	lsls	r2, r3, #3
 8014cb6:	4b38      	ldr	r3, [pc, #224]	; (8014d98 <_strtod_l+0x5c8>)
 8014cb8:	0039      	movs	r1, r7
 8014cba:	1a9b      	subs	r3, r3, r2
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	f7ec fd5c 	bl	800177c <__aeabi_ddiv>
 8014cc4:	e77e      	b.n	8014bc4 <_strtod_l+0x3f4>
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	0030      	movs	r0, r6
 8014cca:	0039      	movs	r1, r7
 8014ccc:	001d      	movs	r5, r3
 8014cce:	1124      	asrs	r4, r4, #4
 8014cd0:	2c01      	cmp	r4, #1
 8014cd2:	dc1d      	bgt.n	8014d10 <_strtod_l+0x540>
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <_strtod_l+0x50c>
 8014cd8:	0006      	movs	r6, r0
 8014cda:	000f      	movs	r7, r1
 8014cdc:	4b2f      	ldr	r3, [pc, #188]	; (8014d9c <_strtod_l+0x5cc>)
 8014cde:	00ed      	lsls	r5, r5, #3
 8014ce0:	18ff      	adds	r7, r7, r3
 8014ce2:	4b2f      	ldr	r3, [pc, #188]	; (8014da0 <_strtod_l+0x5d0>)
 8014ce4:	0032      	movs	r2, r6
 8014ce6:	195d      	adds	r5, r3, r5
 8014ce8:	6828      	ldr	r0, [r5, #0]
 8014cea:	6869      	ldr	r1, [r5, #4]
 8014cec:	003b      	movs	r3, r7
 8014cee:	f7ed f94f 	bl	8001f90 <__aeabi_dmul>
 8014cf2:	4b25      	ldr	r3, [pc, #148]	; (8014d88 <_strtod_l+0x5b8>)
 8014cf4:	4a2b      	ldr	r2, [pc, #172]	; (8014da4 <_strtod_l+0x5d4>)
 8014cf6:	0006      	movs	r6, r0
 8014cf8:	400b      	ands	r3, r1
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d89a      	bhi.n	8014c34 <_strtod_l+0x464>
 8014cfe:	4a2a      	ldr	r2, [pc, #168]	; (8014da8 <_strtod_l+0x5d8>)
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d913      	bls.n	8014d2c <_strtod_l+0x55c>
 8014d04:	2601      	movs	r6, #1
 8014d06:	4f29      	ldr	r7, [pc, #164]	; (8014dac <_strtod_l+0x5dc>)
 8014d08:	4276      	negs	r6, r6
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	9306      	str	r3, [sp, #24]
 8014d0e:	e07b      	b.n	8014e08 <_strtod_l+0x638>
 8014d10:	2201      	movs	r2, #1
 8014d12:	4214      	tst	r4, r2
 8014d14:	d007      	beq.n	8014d26 <_strtod_l+0x556>
 8014d16:	4a22      	ldr	r2, [pc, #136]	; (8014da0 <_strtod_l+0x5d0>)
 8014d18:	00eb      	lsls	r3, r5, #3
 8014d1a:	189b      	adds	r3, r3, r2
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	685b      	ldr	r3, [r3, #4]
 8014d20:	f7ed f936 	bl	8001f90 <__aeabi_dmul>
 8014d24:	2301      	movs	r3, #1
 8014d26:	3501      	adds	r5, #1
 8014d28:	1064      	asrs	r4, r4, #1
 8014d2a:	e7d1      	b.n	8014cd0 <_strtod_l+0x500>
 8014d2c:	23d4      	movs	r3, #212	; 0xd4
 8014d2e:	049b      	lsls	r3, r3, #18
 8014d30:	18cf      	adds	r7, r1, r3
 8014d32:	e7ea      	b.n	8014d0a <_strtod_l+0x53a>
 8014d34:	2c00      	cmp	r4, #0
 8014d36:	d0e8      	beq.n	8014d0a <_strtod_l+0x53a>
 8014d38:	230f      	movs	r3, #15
 8014d3a:	4264      	negs	r4, r4
 8014d3c:	4023      	ands	r3, r4
 8014d3e:	d00a      	beq.n	8014d56 <_strtod_l+0x586>
 8014d40:	4a15      	ldr	r2, [pc, #84]	; (8014d98 <_strtod_l+0x5c8>)
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	18d3      	adds	r3, r2, r3
 8014d46:	0030      	movs	r0, r6
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	0039      	movs	r1, r7
 8014d4e:	f7ec fd15 	bl	800177c <__aeabi_ddiv>
 8014d52:	0006      	movs	r6, r0
 8014d54:	000f      	movs	r7, r1
 8014d56:	1124      	asrs	r4, r4, #4
 8014d58:	d0d7      	beq.n	8014d0a <_strtod_l+0x53a>
 8014d5a:	2c1f      	cmp	r4, #31
 8014d5c:	dd28      	ble.n	8014db0 <_strtod_l+0x5e0>
 8014d5e:	2400      	movs	r4, #0
 8014d60:	9405      	str	r4, [sp, #20]
 8014d62:	940b      	str	r4, [sp, #44]	; 0x2c
 8014d64:	940a      	str	r4, [sp, #40]	; 0x28
 8014d66:	2322      	movs	r3, #34	; 0x22
 8014d68:	9a04      	ldr	r2, [sp, #16]
 8014d6a:	2600      	movs	r6, #0
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d70:	2700      	movs	r7, #0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d000      	beq.n	8014d78 <_strtod_l+0x5a8>
 8014d76:	e76a      	b.n	8014c4e <_strtod_l+0x47e>
 8014d78:	e56b      	b.n	8014852 <_strtod_l+0x82>
 8014d7a:	46c0      	nop			; (mov r8, r8)
 8014d7c:	00004e1f 	.word	0x00004e1f
 8014d80:	0801a63b 	.word	0x0801a63b
 8014d84:	0801a7c4 	.word	0x0801a7c4
 8014d88:	7ff00000 	.word	0x7ff00000
 8014d8c:	0801a643 	.word	0x0801a643
 8014d90:	0801a680 	.word	0x0801a680
 8014d94:	fff80000 	.word	0xfff80000
 8014d98:	0801a7f8 	.word	0x0801a7f8
 8014d9c:	fcb00000 	.word	0xfcb00000
 8014da0:	0801a7d0 	.word	0x0801a7d0
 8014da4:	7ca00000 	.word	0x7ca00000
 8014da8:	7c900000 	.word	0x7c900000
 8014dac:	7fefffff 	.word	0x7fefffff
 8014db0:	2310      	movs	r3, #16
 8014db2:	4023      	ands	r3, r4
 8014db4:	9306      	str	r3, [sp, #24]
 8014db6:	d001      	beq.n	8014dbc <_strtod_l+0x5ec>
 8014db8:	236a      	movs	r3, #106	; 0x6a
 8014dba:	9306      	str	r3, [sp, #24]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	0030      	movs	r0, r6
 8014dc0:	0039      	movs	r1, r7
 8014dc2:	001d      	movs	r5, r3
 8014dc4:	2c00      	cmp	r4, #0
 8014dc6:	dd00      	ble.n	8014dca <_strtod_l+0x5fa>
 8014dc8:	e10e      	b.n	8014fe8 <_strtod_l+0x818>
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d001      	beq.n	8014dd2 <_strtod_l+0x602>
 8014dce:	0006      	movs	r6, r0
 8014dd0:	000f      	movs	r7, r1
 8014dd2:	9b06      	ldr	r3, [sp, #24]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00f      	beq.n	8014df8 <_strtod_l+0x628>
 8014dd8:	236b      	movs	r3, #107	; 0x6b
 8014dda:	0079      	lsls	r1, r7, #1
 8014ddc:	0d49      	lsrs	r1, r1, #21
 8014dde:	003a      	movs	r2, r7
 8014de0:	1a5b      	subs	r3, r3, r1
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	dd08      	ble.n	8014df8 <_strtod_l+0x628>
 8014de6:	2b1f      	cmp	r3, #31
 8014de8:	dc00      	bgt.n	8014dec <_strtod_l+0x61c>
 8014dea:	e112      	b.n	8015012 <_strtod_l+0x842>
 8014dec:	2600      	movs	r6, #0
 8014dee:	2b34      	cmp	r3, #52	; 0x34
 8014df0:	dc00      	bgt.n	8014df4 <_strtod_l+0x624>
 8014df2:	e107      	b.n	8015004 <_strtod_l+0x834>
 8014df4:	27dc      	movs	r7, #220	; 0xdc
 8014df6:	04bf      	lsls	r7, r7, #18
 8014df8:	2200      	movs	r2, #0
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	0030      	movs	r0, r6
 8014dfe:	0039      	movs	r1, r7
 8014e00:	f7eb fb22 	bl	8000448 <__aeabi_dcmpeq>
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d1aa      	bne.n	8014d5e <_strtod_l+0x58e>
 8014e08:	9b08      	ldr	r3, [sp, #32]
 8014e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014e10:	9b05      	ldr	r3, [sp, #20]
 8014e12:	9804      	ldr	r0, [sp, #16]
 8014e14:	f001 fe50 	bl	8016ab8 <__s2b>
 8014e18:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	d100      	bne.n	8014e20 <_strtod_l+0x650>
 8014e1e:	e709      	b.n	8014c34 <_strtod_l+0x464>
 8014e20:	9b07      	ldr	r3, [sp, #28]
 8014e22:	9a07      	ldr	r2, [sp, #28]
 8014e24:	17db      	asrs	r3, r3, #31
 8014e26:	4252      	negs	r2, r2
 8014e28:	4013      	ands	r3, r2
 8014e2a:	9315      	str	r3, [sp, #84]	; 0x54
 8014e2c:	9b07      	ldr	r3, [sp, #28]
 8014e2e:	2400      	movs	r4, #0
 8014e30:	43db      	mvns	r3, r3
 8014e32:	9a07      	ldr	r2, [sp, #28]
 8014e34:	17db      	asrs	r3, r3, #31
 8014e36:	401a      	ands	r2, r3
 8014e38:	921c      	str	r2, [sp, #112]	; 0x70
 8014e3a:	9405      	str	r4, [sp, #20]
 8014e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e3e:	9804      	ldr	r0, [sp, #16]
 8014e40:	6859      	ldr	r1, [r3, #4]
 8014e42:	f001 fdaa 	bl	801699a <_Balloc>
 8014e46:	900a      	str	r0, [sp, #40]	; 0x28
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d100      	bne.n	8014e4e <_strtod_l+0x67e>
 8014e4c:	e6f6      	b.n	8014c3c <_strtod_l+0x46c>
 8014e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	310c      	adds	r1, #12
 8014e56:	1c9a      	adds	r2, r3, #2
 8014e58:	0092      	lsls	r2, r2, #2
 8014e5a:	300c      	adds	r0, #12
 8014e5c:	9308      	str	r3, [sp, #32]
 8014e5e:	f7fe fe9e 	bl	8013b9e <memcpy>
 8014e62:	ab24      	add	r3, sp, #144	; 0x90
 8014e64:	9301      	str	r3, [sp, #4]
 8014e66:	ab23      	add	r3, sp, #140	; 0x8c
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	0032      	movs	r2, r6
 8014e6c:	003b      	movs	r3, r7
 8014e6e:	9804      	ldr	r0, [sp, #16]
 8014e70:	960e      	str	r6, [sp, #56]	; 0x38
 8014e72:	970f      	str	r7, [sp, #60]	; 0x3c
 8014e74:	f002 f8d4 	bl	8017020 <__d2b>
 8014e78:	9022      	str	r0, [sp, #136]	; 0x88
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d100      	bne.n	8014e80 <_strtod_l+0x6b0>
 8014e7e:	e6dd      	b.n	8014c3c <_strtod_l+0x46c>
 8014e80:	2101      	movs	r1, #1
 8014e82:	9804      	ldr	r0, [sp, #16]
 8014e84:	f001 fe9f 	bl	8016bc6 <__i2b>
 8014e88:	9005      	str	r0, [sp, #20]
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d100      	bne.n	8014e90 <_strtod_l+0x6c0>
 8014e8e:	e6d5      	b.n	8014c3c <_strtod_l+0x46c>
 8014e90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	da00      	bge.n	8014e98 <_strtod_l+0x6c8>
 8014e96:	e0c1      	b.n	801501c <_strtod_l+0x84c>
 8014e98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e9a:	189d      	adds	r5, r3, r2
 8014e9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e9e:	4694      	mov	ip, r2
 8014ea0:	9906      	ldr	r1, [sp, #24]
 8014ea2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014ea4:	1a5b      	subs	r3, r3, r1
 8014ea6:	2136      	movs	r1, #54	; 0x36
 8014ea8:	189b      	adds	r3, r3, r2
 8014eaa:	1a8a      	subs	r2, r1, r2
 8014eac:	49b2      	ldr	r1, [pc, #712]	; (8015178 <_strtod_l+0x9a8>)
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	428b      	cmp	r3, r1
 8014eb4:	db00      	blt.n	8014eb8 <_strtod_l+0x6e8>
 8014eb6:	e0bd      	b.n	8015034 <_strtod_l+0x864>
 8014eb8:	1ac9      	subs	r1, r1, r3
 8014eba:	1a52      	subs	r2, r2, r1
 8014ebc:	291f      	cmp	r1, #31
 8014ebe:	dd00      	ble.n	8014ec2 <_strtod_l+0x6f2>
 8014ec0:	e0b1      	b.n	8015026 <_strtod_l+0x856>
 8014ec2:	4088      	lsls	r0, r1
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	9014      	str	r0, [sp, #80]	; 0x50
 8014ec8:	9310      	str	r3, [sp, #64]	; 0x40
 8014eca:	18ab      	adds	r3, r5, r2
 8014ecc:	9308      	str	r3, [sp, #32]
 8014ece:	0013      	movs	r3, r2
 8014ed0:	9a06      	ldr	r2, [sp, #24]
 8014ed2:	4463      	add	r3, ip
 8014ed4:	18d3      	adds	r3, r2, r3
 8014ed6:	9a08      	ldr	r2, [sp, #32]
 8014ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8014eda:	002b      	movs	r3, r5
 8014edc:	4295      	cmp	r5, r2
 8014ede:	dd00      	ble.n	8014ee2 <_strtod_l+0x712>
 8014ee0:	0013      	movs	r3, r2
 8014ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	dd00      	ble.n	8014eea <_strtod_l+0x71a>
 8014ee8:	0013      	movs	r3, r2
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	dd06      	ble.n	8014efc <_strtod_l+0x72c>
 8014eee:	9a08      	ldr	r2, [sp, #32]
 8014ef0:	1aed      	subs	r5, r5, r3
 8014ef2:	1ad2      	subs	r2, r2, r3
 8014ef4:	9208      	str	r2, [sp, #32]
 8014ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ef8:	1ad2      	subs	r2, r2, r3
 8014efa:	920c      	str	r2, [sp, #48]	; 0x30
 8014efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d017      	beq.n	8014f32 <_strtod_l+0x762>
 8014f02:	001a      	movs	r2, r3
 8014f04:	9905      	ldr	r1, [sp, #20]
 8014f06:	9804      	ldr	r0, [sp, #16]
 8014f08:	f001 fef6 	bl	8016cf8 <__pow5mult>
 8014f0c:	9005      	str	r0, [sp, #20]
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d100      	bne.n	8014f14 <_strtod_l+0x744>
 8014f12:	e693      	b.n	8014c3c <_strtod_l+0x46c>
 8014f14:	0001      	movs	r1, r0
 8014f16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f18:	9804      	ldr	r0, [sp, #16]
 8014f1a:	f001 fe5d 	bl	8016bd8 <__multiply>
 8014f1e:	9012      	str	r0, [sp, #72]	; 0x48
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d100      	bne.n	8014f26 <_strtod_l+0x756>
 8014f24:	e68a      	b.n	8014c3c <_strtod_l+0x46c>
 8014f26:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f28:	9804      	ldr	r0, [sp, #16]
 8014f2a:	f001 fd6e 	bl	8016a0a <_Bfree>
 8014f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f30:	9322      	str	r3, [sp, #136]	; 0x88
 8014f32:	9b08      	ldr	r3, [sp, #32]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	dd00      	ble.n	8014f3a <_strtod_l+0x76a>
 8014f38:	e07f      	b.n	801503a <_strtod_l+0x86a>
 8014f3a:	9b07      	ldr	r3, [sp, #28]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	dd08      	ble.n	8014f52 <_strtod_l+0x782>
 8014f40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f44:	9804      	ldr	r0, [sp, #16]
 8014f46:	f001 fed7 	bl	8016cf8 <__pow5mult>
 8014f4a:	900a      	str	r0, [sp, #40]	; 0x28
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d100      	bne.n	8014f52 <_strtod_l+0x782>
 8014f50:	e674      	b.n	8014c3c <_strtod_l+0x46c>
 8014f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	dd08      	ble.n	8014f6a <_strtod_l+0x79a>
 8014f58:	001a      	movs	r2, r3
 8014f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f5c:	9804      	ldr	r0, [sp, #16]
 8014f5e:	f001 ff1d 	bl	8016d9c <__lshift>
 8014f62:	900a      	str	r0, [sp, #40]	; 0x28
 8014f64:	2800      	cmp	r0, #0
 8014f66:	d100      	bne.n	8014f6a <_strtod_l+0x79a>
 8014f68:	e668      	b.n	8014c3c <_strtod_l+0x46c>
 8014f6a:	2d00      	cmp	r5, #0
 8014f6c:	dd08      	ble.n	8014f80 <_strtod_l+0x7b0>
 8014f6e:	002a      	movs	r2, r5
 8014f70:	9905      	ldr	r1, [sp, #20]
 8014f72:	9804      	ldr	r0, [sp, #16]
 8014f74:	f001 ff12 	bl	8016d9c <__lshift>
 8014f78:	9005      	str	r0, [sp, #20]
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	d100      	bne.n	8014f80 <_strtod_l+0x7b0>
 8014f7e:	e65d      	b.n	8014c3c <_strtod_l+0x46c>
 8014f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f84:	9804      	ldr	r0, [sp, #16]
 8014f86:	f001 ff75 	bl	8016e74 <__mdiff>
 8014f8a:	1e04      	subs	r4, r0, #0
 8014f8c:	d100      	bne.n	8014f90 <_strtod_l+0x7c0>
 8014f8e:	e655      	b.n	8014c3c <_strtod_l+0x46c>
 8014f90:	2500      	movs	r5, #0
 8014f92:	68c3      	ldr	r3, [r0, #12]
 8014f94:	9905      	ldr	r1, [sp, #20]
 8014f96:	60c5      	str	r5, [r0, #12]
 8014f98:	9312      	str	r3, [sp, #72]	; 0x48
 8014f9a:	f001 ff51 	bl	8016e40 <__mcmp>
 8014f9e:	42a8      	cmp	r0, r5
 8014fa0:	da55      	bge.n	801504e <_strtod_l+0x87e>
 8014fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fa4:	42ab      	cmp	r3, r5
 8014fa6:	d11b      	bne.n	8014fe0 <_strtod_l+0x810>
 8014fa8:	42ae      	cmp	r6, r5
 8014faa:	d119      	bne.n	8014fe0 <_strtod_l+0x810>
 8014fac:	033b      	lsls	r3, r7, #12
 8014fae:	42ab      	cmp	r3, r5
 8014fb0:	d116      	bne.n	8014fe0 <_strtod_l+0x810>
 8014fb2:	22d6      	movs	r2, #214	; 0xd6
 8014fb4:	4b71      	ldr	r3, [pc, #452]	; (801517c <_strtod_l+0x9ac>)
 8014fb6:	04d2      	lsls	r2, r2, #19
 8014fb8:	403b      	ands	r3, r7
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d910      	bls.n	8014fe0 <_strtod_l+0x810>
 8014fbe:	6963      	ldr	r3, [r4, #20]
 8014fc0:	42ab      	cmp	r3, r5
 8014fc2:	d102      	bne.n	8014fca <_strtod_l+0x7fa>
 8014fc4:	6923      	ldr	r3, [r4, #16]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	dd0a      	ble.n	8014fe0 <_strtod_l+0x810>
 8014fca:	0021      	movs	r1, r4
 8014fcc:	2201      	movs	r2, #1
 8014fce:	9804      	ldr	r0, [sp, #16]
 8014fd0:	f001 fee4 	bl	8016d9c <__lshift>
 8014fd4:	9905      	ldr	r1, [sp, #20]
 8014fd6:	0004      	movs	r4, r0
 8014fd8:	f001 ff32 	bl	8016e40 <__mcmp>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	dc6b      	bgt.n	80150b8 <_strtod_l+0x8e8>
 8014fe0:	9b06      	ldr	r3, [sp, #24]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d178      	bne.n	80150d8 <_strtod_l+0x908>
 8014fe6:	e632      	b.n	8014c4e <_strtod_l+0x47e>
 8014fe8:	2201      	movs	r2, #1
 8014fea:	4214      	tst	r4, r2
 8014fec:	d007      	beq.n	8014ffe <_strtod_l+0x82e>
 8014fee:	4a64      	ldr	r2, [pc, #400]	; (8015180 <_strtod_l+0x9b0>)
 8014ff0:	00eb      	lsls	r3, r5, #3
 8014ff2:	18d3      	adds	r3, r2, r3
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	f7ec ffca 	bl	8001f90 <__aeabi_dmul>
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	3501      	adds	r5, #1
 8015000:	1064      	asrs	r4, r4, #1
 8015002:	e6df      	b.n	8014dc4 <_strtod_l+0x5f4>
 8015004:	2101      	movs	r1, #1
 8015006:	3b20      	subs	r3, #32
 8015008:	4249      	negs	r1, r1
 801500a:	4099      	lsls	r1, r3
 801500c:	400a      	ands	r2, r1
 801500e:	0017      	movs	r7, r2
 8015010:	e6f2      	b.n	8014df8 <_strtod_l+0x628>
 8015012:	2201      	movs	r2, #1
 8015014:	4252      	negs	r2, r2
 8015016:	409a      	lsls	r2, r3
 8015018:	4016      	ands	r6, r2
 801501a:	e6ed      	b.n	8014df8 <_strtod_l+0x628>
 801501c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801501e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015020:	1ad2      	subs	r2, r2, r3
 8015022:	4694      	mov	ip, r2
 8015024:	e73c      	b.n	8014ea0 <_strtod_l+0x6d0>
 8015026:	4957      	ldr	r1, [pc, #348]	; (8015184 <_strtod_l+0x9b4>)
 8015028:	1acb      	subs	r3, r1, r3
 801502a:	0001      	movs	r1, r0
 801502c:	4099      	lsls	r1, r3
 801502e:	9110      	str	r1, [sp, #64]	; 0x40
 8015030:	9014      	str	r0, [sp, #80]	; 0x50
 8015032:	e74a      	b.n	8014eca <_strtod_l+0x6fa>
 8015034:	2300      	movs	r3, #0
 8015036:	9310      	str	r3, [sp, #64]	; 0x40
 8015038:	e7fa      	b.n	8015030 <_strtod_l+0x860>
 801503a:	9a08      	ldr	r2, [sp, #32]
 801503c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801503e:	9804      	ldr	r0, [sp, #16]
 8015040:	f001 feac 	bl	8016d9c <__lshift>
 8015044:	9022      	str	r0, [sp, #136]	; 0x88
 8015046:	2800      	cmp	r0, #0
 8015048:	d000      	beq.n	801504c <_strtod_l+0x87c>
 801504a:	e776      	b.n	8014f3a <_strtod_l+0x76a>
 801504c:	e5f6      	b.n	8014c3c <_strtod_l+0x46c>
 801504e:	970c      	str	r7, [sp, #48]	; 0x30
 8015050:	2800      	cmp	r0, #0
 8015052:	d000      	beq.n	8015056 <_strtod_l+0x886>
 8015054:	e0a0      	b.n	8015198 <_strtod_l+0x9c8>
 8015056:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015058:	033b      	lsls	r3, r7, #12
 801505a:	0b1b      	lsrs	r3, r3, #12
 801505c:	2a00      	cmp	r2, #0
 801505e:	d027      	beq.n	80150b0 <_strtod_l+0x8e0>
 8015060:	4a49      	ldr	r2, [pc, #292]	; (8015188 <_strtod_l+0x9b8>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d157      	bne.n	8015116 <_strtod_l+0x946>
 8015066:	2201      	movs	r2, #1
 8015068:	9b06      	ldr	r3, [sp, #24]
 801506a:	4252      	negs	r2, r2
 801506c:	0031      	movs	r1, r6
 801506e:	0010      	movs	r0, r2
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00b      	beq.n	801508c <_strtod_l+0x8bc>
 8015074:	25d4      	movs	r5, #212	; 0xd4
 8015076:	4b41      	ldr	r3, [pc, #260]	; (801517c <_strtod_l+0x9ac>)
 8015078:	04ed      	lsls	r5, r5, #19
 801507a:	403b      	ands	r3, r7
 801507c:	0010      	movs	r0, r2
 801507e:	42ab      	cmp	r3, r5
 8015080:	d804      	bhi.n	801508c <_strtod_l+0x8bc>
 8015082:	306c      	adds	r0, #108	; 0x6c
 8015084:	0d1b      	lsrs	r3, r3, #20
 8015086:	1ac3      	subs	r3, r0, r3
 8015088:	409a      	lsls	r2, r3
 801508a:	0010      	movs	r0, r2
 801508c:	4281      	cmp	r1, r0
 801508e:	d142      	bne.n	8015116 <_strtod_l+0x946>
 8015090:	4b3e      	ldr	r3, [pc, #248]	; (801518c <_strtod_l+0x9bc>)
 8015092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015094:	429a      	cmp	r2, r3
 8015096:	d102      	bne.n	801509e <_strtod_l+0x8ce>
 8015098:	1c4b      	adds	r3, r1, #1
 801509a:	d100      	bne.n	801509e <_strtod_l+0x8ce>
 801509c:	e5ce      	b.n	8014c3c <_strtod_l+0x46c>
 801509e:	4b37      	ldr	r3, [pc, #220]	; (801517c <_strtod_l+0x9ac>)
 80150a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150a2:	2600      	movs	r6, #0
 80150a4:	401a      	ands	r2, r3
 80150a6:	0013      	movs	r3, r2
 80150a8:	2280      	movs	r2, #128	; 0x80
 80150aa:	0352      	lsls	r2, r2, #13
 80150ac:	189f      	adds	r7, r3, r2
 80150ae:	e797      	b.n	8014fe0 <_strtod_l+0x810>
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d130      	bne.n	8015116 <_strtod_l+0x946>
 80150b4:	2e00      	cmp	r6, #0
 80150b6:	d12e      	bne.n	8015116 <_strtod_l+0x946>
 80150b8:	9906      	ldr	r1, [sp, #24]
 80150ba:	003b      	movs	r3, r7
 80150bc:	4a2f      	ldr	r2, [pc, #188]	; (801517c <_strtod_l+0x9ac>)
 80150be:	2900      	cmp	r1, #0
 80150c0:	d020      	beq.n	8015104 <_strtod_l+0x934>
 80150c2:	0011      	movs	r1, r2
 80150c4:	20d6      	movs	r0, #214	; 0xd6
 80150c6:	4039      	ands	r1, r7
 80150c8:	04c0      	lsls	r0, r0, #19
 80150ca:	4281      	cmp	r1, r0
 80150cc:	dc1a      	bgt.n	8015104 <_strtod_l+0x934>
 80150ce:	23dc      	movs	r3, #220	; 0xdc
 80150d0:	049b      	lsls	r3, r3, #18
 80150d2:	4299      	cmp	r1, r3
 80150d4:	dc00      	bgt.n	80150d8 <_strtod_l+0x908>
 80150d6:	e646      	b.n	8014d66 <_strtod_l+0x596>
 80150d8:	4b2d      	ldr	r3, [pc, #180]	; (8015190 <_strtod_l+0x9c0>)
 80150da:	0030      	movs	r0, r6
 80150dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80150de:	2300      	movs	r3, #0
 80150e0:	931a      	str	r3, [sp, #104]	; 0x68
 80150e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80150e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80150e6:	0039      	movs	r1, r7
 80150e8:	f7ec ff52 	bl	8001f90 <__aeabi_dmul>
 80150ec:	0006      	movs	r6, r0
 80150ee:	000f      	movs	r7, r1
 80150f0:	1e0b      	subs	r3, r1, #0
 80150f2:	d000      	beq.n	80150f6 <_strtod_l+0x926>
 80150f4:	e5ab      	b.n	8014c4e <_strtod_l+0x47e>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d000      	beq.n	80150fc <_strtod_l+0x92c>
 80150fa:	e5a8      	b.n	8014c4e <_strtod_l+0x47e>
 80150fc:	9a04      	ldr	r2, [sp, #16]
 80150fe:	3322      	adds	r3, #34	; 0x22
 8015100:	6013      	str	r3, [r2, #0]
 8015102:	e5a4      	b.n	8014c4e <_strtod_l+0x47e>
 8015104:	2601      	movs	r6, #1
 8015106:	4013      	ands	r3, r2
 8015108:	4a22      	ldr	r2, [pc, #136]	; (8015194 <_strtod_l+0x9c4>)
 801510a:	4276      	negs	r6, r6
 801510c:	189b      	adds	r3, r3, r2
 801510e:	4a1e      	ldr	r2, [pc, #120]	; (8015188 <_strtod_l+0x9b8>)
 8015110:	431a      	orrs	r2, r3
 8015112:	0017      	movs	r7, r2
 8015114:	e764      	b.n	8014fe0 <_strtod_l+0x810>
 8015116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015118:	2b00      	cmp	r3, #0
 801511a:	d015      	beq.n	8015148 <_strtod_l+0x978>
 801511c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801511e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015120:	4213      	tst	r3, r2
 8015122:	d100      	bne.n	8015126 <_strtod_l+0x956>
 8015124:	e75c      	b.n	8014fe0 <_strtod_l+0x810>
 8015126:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015128:	9a06      	ldr	r2, [sp, #24]
 801512a:	0030      	movs	r0, r6
 801512c:	0039      	movs	r1, r7
 801512e:	2b00      	cmp	r3, #0
 8015130:	d00f      	beq.n	8015152 <_strtod_l+0x982>
 8015132:	f7ff fb35 	bl	80147a0 <sulp>
 8015136:	0002      	movs	r2, r0
 8015138:	000b      	movs	r3, r1
 801513a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801513c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801513e:	f7ec f801 	bl	8001144 <__aeabi_dadd>
 8015142:	0006      	movs	r6, r0
 8015144:	000f      	movs	r7, r1
 8015146:	e74b      	b.n	8014fe0 <_strtod_l+0x810>
 8015148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801514a:	4233      	tst	r3, r6
 801514c:	d100      	bne.n	8015150 <_strtod_l+0x980>
 801514e:	e747      	b.n	8014fe0 <_strtod_l+0x810>
 8015150:	e7e9      	b.n	8015126 <_strtod_l+0x956>
 8015152:	f7ff fb25 	bl	80147a0 <sulp>
 8015156:	0002      	movs	r2, r0
 8015158:	000b      	movs	r3, r1
 801515a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801515c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801515e:	f7ed f989 	bl	8002474 <__aeabi_dsub>
 8015162:	2200      	movs	r2, #0
 8015164:	2300      	movs	r3, #0
 8015166:	0006      	movs	r6, r0
 8015168:	000f      	movs	r7, r1
 801516a:	f7eb f96d 	bl	8000448 <__aeabi_dcmpeq>
 801516e:	2800      	cmp	r0, #0
 8015170:	d000      	beq.n	8015174 <_strtod_l+0x9a4>
 8015172:	e5f8      	b.n	8014d66 <_strtod_l+0x596>
 8015174:	e734      	b.n	8014fe0 <_strtod_l+0x810>
 8015176:	46c0      	nop			; (mov r8, r8)
 8015178:	fffffc02 	.word	0xfffffc02
 801517c:	7ff00000 	.word	0x7ff00000
 8015180:	0801a698 	.word	0x0801a698
 8015184:	fffffbe2 	.word	0xfffffbe2
 8015188:	000fffff 	.word	0x000fffff
 801518c:	7fefffff 	.word	0x7fefffff
 8015190:	39500000 	.word	0x39500000
 8015194:	fff00000 	.word	0xfff00000
 8015198:	9905      	ldr	r1, [sp, #20]
 801519a:	0020      	movs	r0, r4
 801519c:	f001 ff94 	bl	80170c8 <__ratio>
 80151a0:	2380      	movs	r3, #128	; 0x80
 80151a2:	2200      	movs	r2, #0
 80151a4:	05db      	lsls	r3, r3, #23
 80151a6:	9008      	str	r0, [sp, #32]
 80151a8:	9109      	str	r1, [sp, #36]	; 0x24
 80151aa:	f7eb f95d 	bl	8000468 <__aeabi_dcmple>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d100      	bne.n	80151b4 <_strtod_l+0x9e4>
 80151b2:	e07f      	b.n	80152b4 <_strtod_l+0xae4>
 80151b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d04b      	beq.n	8015252 <_strtod_l+0xa82>
 80151ba:	2200      	movs	r2, #0
 80151bc:	4b8a      	ldr	r3, [pc, #552]	; (80153e8 <_strtod_l+0xc18>)
 80151be:	9210      	str	r2, [sp, #64]	; 0x40
 80151c0:	9311      	str	r3, [sp, #68]	; 0x44
 80151c2:	4b89      	ldr	r3, [pc, #548]	; (80153e8 <_strtod_l+0xc18>)
 80151c4:	9308      	str	r3, [sp, #32]
 80151c6:	4a89      	ldr	r2, [pc, #548]	; (80153ec <_strtod_l+0xc1c>)
 80151c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151ca:	4013      	ands	r3, r2
 80151cc:	9314      	str	r3, [sp, #80]	; 0x50
 80151ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151d0:	4b87      	ldr	r3, [pc, #540]	; (80153f0 <_strtod_l+0xc20>)
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d000      	beq.n	80151d8 <_strtod_l+0xa08>
 80151d6:	e0ba      	b.n	801534e <_strtod_l+0xb7e>
 80151d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151dc:	921a      	str	r2, [sp, #104]	; 0x68
 80151de:	931b      	str	r3, [sp, #108]	; 0x6c
 80151e0:	4a84      	ldr	r2, [pc, #528]	; (80153f4 <_strtod_l+0xc24>)
 80151e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151e4:	4694      	mov	ip, r2
 80151e6:	4463      	add	r3, ip
 80151e8:	001f      	movs	r7, r3
 80151ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151ee:	0030      	movs	r0, r6
 80151f0:	0039      	movs	r1, r7
 80151f2:	920c      	str	r2, [sp, #48]	; 0x30
 80151f4:	930d      	str	r3, [sp, #52]	; 0x34
 80151f6:	f001 fea1 	bl	8016f3c <__ulp>
 80151fa:	0002      	movs	r2, r0
 80151fc:	000b      	movs	r3, r1
 80151fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015202:	f7ec fec5 	bl	8001f90 <__aeabi_dmul>
 8015206:	0032      	movs	r2, r6
 8015208:	003b      	movs	r3, r7
 801520a:	f7eb ff9b 	bl	8001144 <__aeabi_dadd>
 801520e:	4a77      	ldr	r2, [pc, #476]	; (80153ec <_strtod_l+0xc1c>)
 8015210:	4b79      	ldr	r3, [pc, #484]	; (80153f8 <_strtod_l+0xc28>)
 8015212:	0006      	movs	r6, r0
 8015214:	400a      	ands	r2, r1
 8015216:	429a      	cmp	r2, r3
 8015218:	d964      	bls.n	80152e4 <_strtod_l+0xb14>
 801521a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801521c:	4a77      	ldr	r2, [pc, #476]	; (80153fc <_strtod_l+0xc2c>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d103      	bne.n	801522a <_strtod_l+0xa5a>
 8015222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015224:	3301      	adds	r3, #1
 8015226:	d100      	bne.n	801522a <_strtod_l+0xa5a>
 8015228:	e508      	b.n	8014c3c <_strtod_l+0x46c>
 801522a:	2601      	movs	r6, #1
 801522c:	4f73      	ldr	r7, [pc, #460]	; (80153fc <_strtod_l+0xc2c>)
 801522e:	4276      	negs	r6, r6
 8015230:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015232:	9804      	ldr	r0, [sp, #16]
 8015234:	f001 fbe9 	bl	8016a0a <_Bfree>
 8015238:	990a      	ldr	r1, [sp, #40]	; 0x28
 801523a:	9804      	ldr	r0, [sp, #16]
 801523c:	f001 fbe5 	bl	8016a0a <_Bfree>
 8015240:	9905      	ldr	r1, [sp, #20]
 8015242:	9804      	ldr	r0, [sp, #16]
 8015244:	f001 fbe1 	bl	8016a0a <_Bfree>
 8015248:	0021      	movs	r1, r4
 801524a:	9804      	ldr	r0, [sp, #16]
 801524c:	f001 fbdd 	bl	8016a0a <_Bfree>
 8015250:	e5f4      	b.n	8014e3c <_strtod_l+0x66c>
 8015252:	2e00      	cmp	r6, #0
 8015254:	d11e      	bne.n	8015294 <_strtod_l+0xac4>
 8015256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015258:	031b      	lsls	r3, r3, #12
 801525a:	d121      	bne.n	80152a0 <_strtod_l+0xad0>
 801525c:	9808      	ldr	r0, [sp, #32]
 801525e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015260:	2200      	movs	r2, #0
 8015262:	4b61      	ldr	r3, [pc, #388]	; (80153e8 <_strtod_l+0xc18>)
 8015264:	f7eb f8f6 	bl	8000454 <__aeabi_dcmplt>
 8015268:	2800      	cmp	r0, #0
 801526a:	d11f      	bne.n	80152ac <_strtod_l+0xadc>
 801526c:	9808      	ldr	r0, [sp, #32]
 801526e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015270:	2200      	movs	r2, #0
 8015272:	4b63      	ldr	r3, [pc, #396]	; (8015400 <_strtod_l+0xc30>)
 8015274:	f7ec fe8c 	bl	8001f90 <__aeabi_dmul>
 8015278:	0005      	movs	r5, r0
 801527a:	9108      	str	r1, [sp, #32]
 801527c:	2280      	movs	r2, #128	; 0x80
 801527e:	0612      	lsls	r2, r2, #24
 8015280:	4694      	mov	ip, r2
 8015282:	9b08      	ldr	r3, [sp, #32]
 8015284:	951e      	str	r5, [sp, #120]	; 0x78
 8015286:	4463      	add	r3, ip
 8015288:	931f      	str	r3, [sp, #124]	; 0x7c
 801528a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801528c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801528e:	9210      	str	r2, [sp, #64]	; 0x40
 8015290:	9311      	str	r3, [sp, #68]	; 0x44
 8015292:	e798      	b.n	80151c6 <_strtod_l+0x9f6>
 8015294:	2e01      	cmp	r6, #1
 8015296:	d103      	bne.n	80152a0 <_strtod_l+0xad0>
 8015298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801529a:	2b00      	cmp	r3, #0
 801529c:	d100      	bne.n	80152a0 <_strtod_l+0xad0>
 801529e:	e562      	b.n	8014d66 <_strtod_l+0x596>
 80152a0:	2200      	movs	r2, #0
 80152a2:	4b58      	ldr	r3, [pc, #352]	; (8015404 <_strtod_l+0xc34>)
 80152a4:	2500      	movs	r5, #0
 80152a6:	9210      	str	r2, [sp, #64]	; 0x40
 80152a8:	9311      	str	r3, [sp, #68]	; 0x44
 80152aa:	e78a      	b.n	80151c2 <_strtod_l+0x9f2>
 80152ac:	4b54      	ldr	r3, [pc, #336]	; (8015400 <_strtod_l+0xc30>)
 80152ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80152b0:	9308      	str	r3, [sp, #32]
 80152b2:	e7e3      	b.n	801527c <_strtod_l+0xaac>
 80152b4:	4b52      	ldr	r3, [pc, #328]	; (8015400 <_strtod_l+0xc30>)
 80152b6:	9808      	ldr	r0, [sp, #32]
 80152b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152ba:	2200      	movs	r2, #0
 80152bc:	f7ec fe68 	bl	8001f90 <__aeabi_dmul>
 80152c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80152c2:	0005      	movs	r5, r0
 80152c4:	9108      	str	r1, [sp, #32]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d107      	bne.n	80152da <_strtod_l+0xb0a>
 80152ca:	2380      	movs	r3, #128	; 0x80
 80152cc:	061b      	lsls	r3, r3, #24
 80152ce:	18cb      	adds	r3, r1, r3
 80152d0:	9016      	str	r0, [sp, #88]	; 0x58
 80152d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80152d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80152d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152d8:	e7d9      	b.n	801528e <_strtod_l+0xabe>
 80152da:	0002      	movs	r2, r0
 80152dc:	9b08      	ldr	r3, [sp, #32]
 80152de:	9216      	str	r2, [sp, #88]	; 0x58
 80152e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80152e2:	e7f7      	b.n	80152d4 <_strtod_l+0xb04>
 80152e4:	23d4      	movs	r3, #212	; 0xd4
 80152e6:	049b      	lsls	r3, r3, #18
 80152e8:	18cf      	adds	r7, r1, r3
 80152ea:	9b06      	ldr	r3, [sp, #24]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d19f      	bne.n	8015230 <_strtod_l+0xa60>
 80152f0:	4b3e      	ldr	r3, [pc, #248]	; (80153ec <_strtod_l+0xc1c>)
 80152f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152f4:	970c      	str	r7, [sp, #48]	; 0x30
 80152f6:	403b      	ands	r3, r7
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d199      	bne.n	8015230 <_strtod_l+0xa60>
 80152fc:	9908      	ldr	r1, [sp, #32]
 80152fe:	0028      	movs	r0, r5
 8015300:	f7ed fc1c 	bl	8002b3c <__aeabi_d2iz>
 8015304:	f7ed fc50 	bl	8002ba8 <__aeabi_i2d>
 8015308:	000b      	movs	r3, r1
 801530a:	0002      	movs	r2, r0
 801530c:	9908      	ldr	r1, [sp, #32]
 801530e:	0028      	movs	r0, r5
 8015310:	f7ed f8b0 	bl	8002474 <__aeabi_dsub>
 8015314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015316:	9008      	str	r0, [sp, #32]
 8015318:	9109      	str	r1, [sp, #36]	; 0x24
 801531a:	2b00      	cmp	r3, #0
 801531c:	d104      	bne.n	8015328 <_strtod_l+0xb58>
 801531e:	2e00      	cmp	r6, #0
 8015320:	d102      	bne.n	8015328 <_strtod_l+0xb58>
 8015322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015324:	031b      	lsls	r3, r3, #12
 8015326:	d058      	beq.n	80153da <_strtod_l+0xc0a>
 8015328:	9808      	ldr	r0, [sp, #32]
 801532a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801532c:	4a36      	ldr	r2, [pc, #216]	; (8015408 <_strtod_l+0xc38>)
 801532e:	4b37      	ldr	r3, [pc, #220]	; (801540c <_strtod_l+0xc3c>)
 8015330:	f7eb f890 	bl	8000454 <__aeabi_dcmplt>
 8015334:	2800      	cmp	r0, #0
 8015336:	d000      	beq.n	801533a <_strtod_l+0xb6a>
 8015338:	e489      	b.n	8014c4e <_strtod_l+0x47e>
 801533a:	9808      	ldr	r0, [sp, #32]
 801533c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801533e:	4a34      	ldr	r2, [pc, #208]	; (8015410 <_strtod_l+0xc40>)
 8015340:	4b2f      	ldr	r3, [pc, #188]	; (8015400 <_strtod_l+0xc30>)
 8015342:	f7eb f89b 	bl	800047c <__aeabi_dcmpgt>
 8015346:	2800      	cmp	r0, #0
 8015348:	d100      	bne.n	801534c <_strtod_l+0xb7c>
 801534a:	e771      	b.n	8015230 <_strtod_l+0xa60>
 801534c:	e47f      	b.n	8014c4e <_strtod_l+0x47e>
 801534e:	9b06      	ldr	r3, [sp, #24]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d02a      	beq.n	80153aa <_strtod_l+0xbda>
 8015354:	23d4      	movs	r3, #212	; 0xd4
 8015356:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015358:	04db      	lsls	r3, r3, #19
 801535a:	429a      	cmp	r2, r3
 801535c:	d825      	bhi.n	80153aa <_strtod_l+0xbda>
 801535e:	4a2d      	ldr	r2, [pc, #180]	; (8015414 <_strtod_l+0xc44>)
 8015360:	4b2d      	ldr	r3, [pc, #180]	; (8015418 <_strtod_l+0xc48>)
 8015362:	0028      	movs	r0, r5
 8015364:	9908      	ldr	r1, [sp, #32]
 8015366:	f7eb f87f 	bl	8000468 <__aeabi_dcmple>
 801536a:	2800      	cmp	r0, #0
 801536c:	d016      	beq.n	801539c <_strtod_l+0xbcc>
 801536e:	0028      	movs	r0, r5
 8015370:	9908      	ldr	r1, [sp, #32]
 8015372:	f7eb f913 	bl	800059c <__aeabi_d2uiz>
 8015376:	2800      	cmp	r0, #0
 8015378:	d100      	bne.n	801537c <_strtod_l+0xbac>
 801537a:	3001      	adds	r0, #1
 801537c:	f7ed fc4e 	bl	8002c1c <__aeabi_ui2d>
 8015380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015382:	0005      	movs	r5, r0
 8015384:	9108      	str	r1, [sp, #32]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d122      	bne.n	80153d0 <_strtod_l+0xc00>
 801538a:	2380      	movs	r3, #128	; 0x80
 801538c:	061b      	lsls	r3, r3, #24
 801538e:	18cb      	adds	r3, r1, r3
 8015390:	9018      	str	r0, [sp, #96]	; 0x60
 8015392:	9319      	str	r3, [sp, #100]	; 0x64
 8015394:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015398:	9210      	str	r2, [sp, #64]	; 0x40
 801539a:	9311      	str	r3, [sp, #68]	; 0x44
 801539c:	22d6      	movs	r2, #214	; 0xd6
 801539e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153a0:	04d2      	lsls	r2, r2, #19
 80153a2:	189b      	adds	r3, r3, r2
 80153a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153a6:	1a9b      	subs	r3, r3, r2
 80153a8:	9311      	str	r3, [sp, #68]	; 0x44
 80153aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80153ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80153b0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80153b2:	f001 fdc3 	bl	8016f3c <__ulp>
 80153b6:	0002      	movs	r2, r0
 80153b8:	000b      	movs	r3, r1
 80153ba:	0030      	movs	r0, r6
 80153bc:	0039      	movs	r1, r7
 80153be:	f7ec fde7 	bl	8001f90 <__aeabi_dmul>
 80153c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153c6:	f7eb febd 	bl	8001144 <__aeabi_dadd>
 80153ca:	0006      	movs	r6, r0
 80153cc:	000f      	movs	r7, r1
 80153ce:	e78c      	b.n	80152ea <_strtod_l+0xb1a>
 80153d0:	0002      	movs	r2, r0
 80153d2:	9b08      	ldr	r3, [sp, #32]
 80153d4:	9218      	str	r2, [sp, #96]	; 0x60
 80153d6:	9319      	str	r3, [sp, #100]	; 0x64
 80153d8:	e7dc      	b.n	8015394 <_strtod_l+0xbc4>
 80153da:	4a0b      	ldr	r2, [pc, #44]	; (8015408 <_strtod_l+0xc38>)
 80153dc:	4b0f      	ldr	r3, [pc, #60]	; (801541c <_strtod_l+0xc4c>)
 80153de:	9808      	ldr	r0, [sp, #32]
 80153e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153e2:	f7eb f837 	bl	8000454 <__aeabi_dcmplt>
 80153e6:	e7ae      	b.n	8015346 <_strtod_l+0xb76>
 80153e8:	3ff00000 	.word	0x3ff00000
 80153ec:	7ff00000 	.word	0x7ff00000
 80153f0:	7fe00000 	.word	0x7fe00000
 80153f4:	fcb00000 	.word	0xfcb00000
 80153f8:	7c9fffff 	.word	0x7c9fffff
 80153fc:	7fefffff 	.word	0x7fefffff
 8015400:	3fe00000 	.word	0x3fe00000
 8015404:	bff00000 	.word	0xbff00000
 8015408:	94a03595 	.word	0x94a03595
 801540c:	3fdfffff 	.word	0x3fdfffff
 8015410:	35afe535 	.word	0x35afe535
 8015414:	ffc00000 	.word	0xffc00000
 8015418:	41dfffff 	.word	0x41dfffff
 801541c:	3fcfffff 	.word	0x3fcfffff

08015420 <strtod>:
 8015420:	4b06      	ldr	r3, [pc, #24]	; (801543c <strtod+0x1c>)
 8015422:	b510      	push	{r4, lr}
 8015424:	0004      	movs	r4, r0
 8015426:	6818      	ldr	r0, [r3, #0]
 8015428:	000a      	movs	r2, r1
 801542a:	6a03      	ldr	r3, [r0, #32]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d100      	bne.n	8015432 <strtod+0x12>
 8015430:	4b03      	ldr	r3, [pc, #12]	; (8015440 <strtod+0x20>)
 8015432:	0021      	movs	r1, r4
 8015434:	f7ff f9cc 	bl	80147d0 <_strtod_l>
 8015438:	bd10      	pop	{r4, pc}
 801543a:	46c0      	nop			; (mov r8, r8)
 801543c:	200000c4 	.word	0x200000c4
 8015440:	20000128 	.word	0x20000128

08015444 <strtok>:
 8015444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015446:	4b12      	ldr	r3, [pc, #72]	; (8015490 <strtok+0x4c>)
 8015448:	0006      	movs	r6, r0
 801544a:	681d      	ldr	r5, [r3, #0]
 801544c:	000f      	movs	r7, r1
 801544e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8015450:	2c00      	cmp	r4, #0
 8015452:	d116      	bne.n	8015482 <strtok+0x3e>
 8015454:	2050      	movs	r0, #80	; 0x50
 8015456:	f7fe fb6d 	bl	8013b34 <malloc>
 801545a:	65a8      	str	r0, [r5, #88]	; 0x58
 801545c:	6004      	str	r4, [r0, #0]
 801545e:	6044      	str	r4, [r0, #4]
 8015460:	6084      	str	r4, [r0, #8]
 8015462:	60c4      	str	r4, [r0, #12]
 8015464:	6104      	str	r4, [r0, #16]
 8015466:	6144      	str	r4, [r0, #20]
 8015468:	6184      	str	r4, [r0, #24]
 801546a:	6284      	str	r4, [r0, #40]	; 0x28
 801546c:	62c4      	str	r4, [r0, #44]	; 0x2c
 801546e:	6304      	str	r4, [r0, #48]	; 0x30
 8015470:	6344      	str	r4, [r0, #52]	; 0x34
 8015472:	6384      	str	r4, [r0, #56]	; 0x38
 8015474:	63c4      	str	r4, [r0, #60]	; 0x3c
 8015476:	6404      	str	r4, [r0, #64]	; 0x40
 8015478:	6444      	str	r4, [r0, #68]	; 0x44
 801547a:	6484      	str	r4, [r0, #72]	; 0x48
 801547c:	64c4      	str	r4, [r0, #76]	; 0x4c
 801547e:	7704      	strb	r4, [r0, #28]
 8015480:	6244      	str	r4, [r0, #36]	; 0x24
 8015482:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8015484:	0039      	movs	r1, r7
 8015486:	0030      	movs	r0, r6
 8015488:	2301      	movs	r3, #1
 801548a:	f000 f803 	bl	8015494 <__strtok_r>
 801548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015490:	200000c4 	.word	0x200000c4

08015494 <__strtok_r>:
 8015494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015496:	2800      	cmp	r0, #0
 8015498:	d104      	bne.n	80154a4 <__strtok_r+0x10>
 801549a:	6810      	ldr	r0, [r2, #0]
 801549c:	2800      	cmp	r0, #0
 801549e:	d101      	bne.n	80154a4 <__strtok_r+0x10>
 80154a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154a2:	0020      	movs	r0, r4
 80154a4:	000e      	movs	r6, r1
 80154a6:	7805      	ldrb	r5, [r0, #0]
 80154a8:	1c44      	adds	r4, r0, #1
 80154aa:	7837      	ldrb	r7, [r6, #0]
 80154ac:	2f00      	cmp	r7, #0
 80154ae:	d104      	bne.n	80154ba <__strtok_r+0x26>
 80154b0:	2d00      	cmp	r5, #0
 80154b2:	d110      	bne.n	80154d6 <__strtok_r+0x42>
 80154b4:	6015      	str	r5, [r2, #0]
 80154b6:	0028      	movs	r0, r5
 80154b8:	e7f2      	b.n	80154a0 <__strtok_r+0xc>
 80154ba:	3601      	adds	r6, #1
 80154bc:	42bd      	cmp	r5, r7
 80154be:	d1f4      	bne.n	80154aa <__strtok_r+0x16>
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d1ee      	bne.n	80154a2 <__strtok_r+0xe>
 80154c4:	6014      	str	r4, [r2, #0]
 80154c6:	7003      	strb	r3, [r0, #0]
 80154c8:	e7ea      	b.n	80154a0 <__strtok_r+0xc>
 80154ca:	0033      	movs	r3, r6
 80154cc:	e00d      	b.n	80154ea <__strtok_r+0x56>
 80154ce:	3501      	adds	r5, #1
 80154d0:	2f00      	cmp	r7, #0
 80154d2:	d103      	bne.n	80154dc <__strtok_r+0x48>
 80154d4:	001c      	movs	r4, r3
 80154d6:	000d      	movs	r5, r1
 80154d8:	7826      	ldrb	r6, [r4, #0]
 80154da:	1c63      	adds	r3, r4, #1
 80154dc:	782f      	ldrb	r7, [r5, #0]
 80154de:	42be      	cmp	r6, r7
 80154e0:	d1f5      	bne.n	80154ce <__strtok_r+0x3a>
 80154e2:	2e00      	cmp	r6, #0
 80154e4:	d0f1      	beq.n	80154ca <__strtok_r+0x36>
 80154e6:	2100      	movs	r1, #0
 80154e8:	7021      	strb	r1, [r4, #0]
 80154ea:	6013      	str	r3, [r2, #0]
 80154ec:	e7d8      	b.n	80154a0 <__strtok_r+0xc>
	...

080154f0 <_strtol_l.isra.0>:
 80154f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154f2:	001f      	movs	r7, r3
 80154f4:	000e      	movs	r6, r1
 80154f6:	b087      	sub	sp, #28
 80154f8:	9005      	str	r0, [sp, #20]
 80154fa:	9101      	str	r1, [sp, #4]
 80154fc:	9202      	str	r2, [sp, #8]
 80154fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015500:	7834      	ldrb	r4, [r6, #0]
 8015502:	f7fe fb05 	bl	8013b10 <__locale_ctype_ptr_l>
 8015506:	2208      	movs	r2, #8
 8015508:	1900      	adds	r0, r0, r4
 801550a:	7843      	ldrb	r3, [r0, #1]
 801550c:	1c75      	adds	r5, r6, #1
 801550e:	4013      	ands	r3, r2
 8015510:	d136      	bne.n	8015580 <_strtol_l.isra.0+0x90>
 8015512:	2c2d      	cmp	r4, #45	; 0x2d
 8015514:	d136      	bne.n	8015584 <_strtol_l.isra.0+0x94>
 8015516:	1cb5      	adds	r5, r6, #2
 8015518:	7874      	ldrb	r4, [r6, #1]
 801551a:	2601      	movs	r6, #1
 801551c:	2f00      	cmp	r7, #0
 801551e:	d062      	beq.n	80155e6 <_strtol_l.isra.0+0xf6>
 8015520:	2f10      	cmp	r7, #16
 8015522:	d109      	bne.n	8015538 <_strtol_l.isra.0+0x48>
 8015524:	2c30      	cmp	r4, #48	; 0x30
 8015526:	d107      	bne.n	8015538 <_strtol_l.isra.0+0x48>
 8015528:	2220      	movs	r2, #32
 801552a:	782b      	ldrb	r3, [r5, #0]
 801552c:	4393      	bics	r3, r2
 801552e:	2b58      	cmp	r3, #88	; 0x58
 8015530:	d154      	bne.n	80155dc <_strtol_l.isra.0+0xec>
 8015532:	2710      	movs	r7, #16
 8015534:	786c      	ldrb	r4, [r5, #1]
 8015536:	3502      	adds	r5, #2
 8015538:	4b2d      	ldr	r3, [pc, #180]	; (80155f0 <_strtol_l.isra.0+0x100>)
 801553a:	0039      	movs	r1, r7
 801553c:	18f3      	adds	r3, r6, r3
 801553e:	0018      	movs	r0, r3
 8015540:	9303      	str	r3, [sp, #12]
 8015542:	f7ea fe81 	bl	8000248 <__aeabi_uidivmod>
 8015546:	9104      	str	r1, [sp, #16]
 8015548:	2101      	movs	r1, #1
 801554a:	2300      	movs	r3, #0
 801554c:	4249      	negs	r1, r1
 801554e:	0002      	movs	r2, r0
 8015550:	468c      	mov	ip, r1
 8015552:	0018      	movs	r0, r3
 8015554:	0021      	movs	r1, r4
 8015556:	3930      	subs	r1, #48	; 0x30
 8015558:	2909      	cmp	r1, #9
 801555a:	d81a      	bhi.n	8015592 <_strtol_l.isra.0+0xa2>
 801555c:	000c      	movs	r4, r1
 801555e:	42a7      	cmp	r7, r4
 8015560:	dd23      	ble.n	80155aa <_strtol_l.isra.0+0xba>
 8015562:	1c59      	adds	r1, r3, #1
 8015564:	d009      	beq.n	801557a <_strtol_l.isra.0+0x8a>
 8015566:	4663      	mov	r3, ip
 8015568:	4282      	cmp	r2, r0
 801556a:	d306      	bcc.n	801557a <_strtol_l.isra.0+0x8a>
 801556c:	d102      	bne.n	8015574 <_strtol_l.isra.0+0x84>
 801556e:	9904      	ldr	r1, [sp, #16]
 8015570:	42a1      	cmp	r1, r4
 8015572:	db02      	blt.n	801557a <_strtol_l.isra.0+0x8a>
 8015574:	2301      	movs	r3, #1
 8015576:	4378      	muls	r0, r7
 8015578:	1820      	adds	r0, r4, r0
 801557a:	782c      	ldrb	r4, [r5, #0]
 801557c:	3501      	adds	r5, #1
 801557e:	e7e9      	b.n	8015554 <_strtol_l.isra.0+0x64>
 8015580:	002e      	movs	r6, r5
 8015582:	e7bc      	b.n	80154fe <_strtol_l.isra.0+0xe>
 8015584:	2c2b      	cmp	r4, #43	; 0x2b
 8015586:	d001      	beq.n	801558c <_strtol_l.isra.0+0x9c>
 8015588:	001e      	movs	r6, r3
 801558a:	e7c7      	b.n	801551c <_strtol_l.isra.0+0x2c>
 801558c:	1cb5      	adds	r5, r6, #2
 801558e:	7874      	ldrb	r4, [r6, #1]
 8015590:	e7fa      	b.n	8015588 <_strtol_l.isra.0+0x98>
 8015592:	0021      	movs	r1, r4
 8015594:	3941      	subs	r1, #65	; 0x41
 8015596:	2919      	cmp	r1, #25
 8015598:	d801      	bhi.n	801559e <_strtol_l.isra.0+0xae>
 801559a:	3c37      	subs	r4, #55	; 0x37
 801559c:	e7df      	b.n	801555e <_strtol_l.isra.0+0x6e>
 801559e:	0021      	movs	r1, r4
 80155a0:	3961      	subs	r1, #97	; 0x61
 80155a2:	2919      	cmp	r1, #25
 80155a4:	d801      	bhi.n	80155aa <_strtol_l.isra.0+0xba>
 80155a6:	3c57      	subs	r4, #87	; 0x57
 80155a8:	e7d9      	b.n	801555e <_strtol_l.isra.0+0x6e>
 80155aa:	1c5a      	adds	r2, r3, #1
 80155ac:	d108      	bne.n	80155c0 <_strtol_l.isra.0+0xd0>
 80155ae:	9a05      	ldr	r2, [sp, #20]
 80155b0:	3323      	adds	r3, #35	; 0x23
 80155b2:	6013      	str	r3, [r2, #0]
 80155b4:	9b02      	ldr	r3, [sp, #8]
 80155b6:	9803      	ldr	r0, [sp, #12]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d109      	bne.n	80155d0 <_strtol_l.isra.0+0xe0>
 80155bc:	b007      	add	sp, #28
 80155be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c0:	2e00      	cmp	r6, #0
 80155c2:	d000      	beq.n	80155c6 <_strtol_l.isra.0+0xd6>
 80155c4:	4240      	negs	r0, r0
 80155c6:	9a02      	ldr	r2, [sp, #8]
 80155c8:	2a00      	cmp	r2, #0
 80155ca:	d0f7      	beq.n	80155bc <_strtol_l.isra.0+0xcc>
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d001      	beq.n	80155d4 <_strtol_l.isra.0+0xe4>
 80155d0:	1e6b      	subs	r3, r5, #1
 80155d2:	9301      	str	r3, [sp, #4]
 80155d4:	9b02      	ldr	r3, [sp, #8]
 80155d6:	9a01      	ldr	r2, [sp, #4]
 80155d8:	601a      	str	r2, [r3, #0]
 80155da:	e7ef      	b.n	80155bc <_strtol_l.isra.0+0xcc>
 80155dc:	2430      	movs	r4, #48	; 0x30
 80155de:	2f00      	cmp	r7, #0
 80155e0:	d1aa      	bne.n	8015538 <_strtol_l.isra.0+0x48>
 80155e2:	2708      	movs	r7, #8
 80155e4:	e7a8      	b.n	8015538 <_strtol_l.isra.0+0x48>
 80155e6:	2c30      	cmp	r4, #48	; 0x30
 80155e8:	d09e      	beq.n	8015528 <_strtol_l.isra.0+0x38>
 80155ea:	270a      	movs	r7, #10
 80155ec:	e7a4      	b.n	8015538 <_strtol_l.isra.0+0x48>
 80155ee:	46c0      	nop			; (mov r8, r8)
 80155f0:	7fffffff 	.word	0x7fffffff

080155f4 <strtol>:
 80155f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155f6:	0013      	movs	r3, r2
 80155f8:	4a06      	ldr	r2, [pc, #24]	; (8015614 <strtol+0x20>)
 80155fa:	0005      	movs	r5, r0
 80155fc:	6810      	ldr	r0, [r2, #0]
 80155fe:	6a04      	ldr	r4, [r0, #32]
 8015600:	2c00      	cmp	r4, #0
 8015602:	d100      	bne.n	8015606 <strtol+0x12>
 8015604:	4c04      	ldr	r4, [pc, #16]	; (8015618 <strtol+0x24>)
 8015606:	000a      	movs	r2, r1
 8015608:	9400      	str	r4, [sp, #0]
 801560a:	0029      	movs	r1, r5
 801560c:	f7ff ff70 	bl	80154f0 <_strtol_l.isra.0>
 8015610:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015612:	46c0      	nop			; (mov r8, r8)
 8015614:	200000c4 	.word	0x200000c4
 8015618:	20000128 	.word	0x20000128

0801561c <__ascii_wctomb>:
 801561c:	1e0b      	subs	r3, r1, #0
 801561e:	d004      	beq.n	801562a <__ascii_wctomb+0xe>
 8015620:	2aff      	cmp	r2, #255	; 0xff
 8015622:	d904      	bls.n	801562e <__ascii_wctomb+0x12>
 8015624:	238a      	movs	r3, #138	; 0x8a
 8015626:	6003      	str	r3, [r0, #0]
 8015628:	3b8b      	subs	r3, #139	; 0x8b
 801562a:	0018      	movs	r0, r3
 801562c:	4770      	bx	lr
 801562e:	700a      	strb	r2, [r1, #0]
 8015630:	2301      	movs	r3, #1
 8015632:	e7fa      	b.n	801562a <__ascii_wctomb+0xe>

08015634 <quorem>:
 8015634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015636:	6903      	ldr	r3, [r0, #16]
 8015638:	690c      	ldr	r4, [r1, #16]
 801563a:	b089      	sub	sp, #36	; 0x24
 801563c:	0007      	movs	r7, r0
 801563e:	9105      	str	r1, [sp, #20]
 8015640:	2600      	movs	r6, #0
 8015642:	42a3      	cmp	r3, r4
 8015644:	db65      	blt.n	8015712 <quorem+0xde>
 8015646:	000b      	movs	r3, r1
 8015648:	3c01      	subs	r4, #1
 801564a:	3314      	adds	r3, #20
 801564c:	00a5      	lsls	r5, r4, #2
 801564e:	9303      	str	r3, [sp, #12]
 8015650:	195b      	adds	r3, r3, r5
 8015652:	9304      	str	r3, [sp, #16]
 8015654:	0003      	movs	r3, r0
 8015656:	3314      	adds	r3, #20
 8015658:	9302      	str	r3, [sp, #8]
 801565a:	195d      	adds	r5, r3, r5
 801565c:	9b04      	ldr	r3, [sp, #16]
 801565e:	6828      	ldr	r0, [r5, #0]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	1c59      	adds	r1, r3, #1
 8015664:	9301      	str	r3, [sp, #4]
 8015666:	f7ea fd69 	bl	800013c <__udivsi3>
 801566a:	9001      	str	r0, [sp, #4]
 801566c:	42b0      	cmp	r0, r6
 801566e:	d029      	beq.n	80156c4 <quorem+0x90>
 8015670:	9b03      	ldr	r3, [sp, #12]
 8015672:	9802      	ldr	r0, [sp, #8]
 8015674:	469c      	mov	ip, r3
 8015676:	9606      	str	r6, [sp, #24]
 8015678:	4662      	mov	r2, ip
 801567a:	ca08      	ldmia	r2!, {r3}
 801567c:	4694      	mov	ip, r2
 801567e:	9a01      	ldr	r2, [sp, #4]
 8015680:	b299      	uxth	r1, r3
 8015682:	4351      	muls	r1, r2
 8015684:	0c1b      	lsrs	r3, r3, #16
 8015686:	4353      	muls	r3, r2
 8015688:	1989      	adds	r1, r1, r6
 801568a:	0c0a      	lsrs	r2, r1, #16
 801568c:	189b      	adds	r3, r3, r2
 801568e:	9307      	str	r3, [sp, #28]
 8015690:	0c1e      	lsrs	r6, r3, #16
 8015692:	6803      	ldr	r3, [r0, #0]
 8015694:	b289      	uxth	r1, r1
 8015696:	b29a      	uxth	r2, r3
 8015698:	9b06      	ldr	r3, [sp, #24]
 801569a:	18d2      	adds	r2, r2, r3
 801569c:	6803      	ldr	r3, [r0, #0]
 801569e:	1a52      	subs	r2, r2, r1
 80156a0:	0c19      	lsrs	r1, r3, #16
 80156a2:	466b      	mov	r3, sp
 80156a4:	8b9b      	ldrh	r3, [r3, #28]
 80156a6:	1acb      	subs	r3, r1, r3
 80156a8:	1411      	asrs	r1, r2, #16
 80156aa:	185b      	adds	r3, r3, r1
 80156ac:	1419      	asrs	r1, r3, #16
 80156ae:	b292      	uxth	r2, r2
 80156b0:	041b      	lsls	r3, r3, #16
 80156b2:	431a      	orrs	r2, r3
 80156b4:	9b04      	ldr	r3, [sp, #16]
 80156b6:	9106      	str	r1, [sp, #24]
 80156b8:	c004      	stmia	r0!, {r2}
 80156ba:	4563      	cmp	r3, ip
 80156bc:	d2dc      	bcs.n	8015678 <quorem+0x44>
 80156be:	682b      	ldr	r3, [r5, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d02d      	beq.n	8015720 <quorem+0xec>
 80156c4:	9905      	ldr	r1, [sp, #20]
 80156c6:	0038      	movs	r0, r7
 80156c8:	f001 fbba 	bl	8016e40 <__mcmp>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	db1f      	blt.n	8015710 <quorem+0xdc>
 80156d0:	2500      	movs	r5, #0
 80156d2:	9b01      	ldr	r3, [sp, #4]
 80156d4:	9802      	ldr	r0, [sp, #8]
 80156d6:	3301      	adds	r3, #1
 80156d8:	9903      	ldr	r1, [sp, #12]
 80156da:	9301      	str	r3, [sp, #4]
 80156dc:	6802      	ldr	r2, [r0, #0]
 80156de:	c908      	ldmia	r1!, {r3}
 80156e0:	b292      	uxth	r2, r2
 80156e2:	1955      	adds	r5, r2, r5
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	1aaa      	subs	r2, r5, r2
 80156e8:	6805      	ldr	r5, [r0, #0]
 80156ea:	0c1b      	lsrs	r3, r3, #16
 80156ec:	0c2d      	lsrs	r5, r5, #16
 80156ee:	1aeb      	subs	r3, r5, r3
 80156f0:	1415      	asrs	r5, r2, #16
 80156f2:	195b      	adds	r3, r3, r5
 80156f4:	141d      	asrs	r5, r3, #16
 80156f6:	b292      	uxth	r2, r2
 80156f8:	041b      	lsls	r3, r3, #16
 80156fa:	4313      	orrs	r3, r2
 80156fc:	c008      	stmia	r0!, {r3}
 80156fe:	9b04      	ldr	r3, [sp, #16]
 8015700:	428b      	cmp	r3, r1
 8015702:	d2eb      	bcs.n	80156dc <quorem+0xa8>
 8015704:	9a02      	ldr	r2, [sp, #8]
 8015706:	00a3      	lsls	r3, r4, #2
 8015708:	18d3      	adds	r3, r2, r3
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	2a00      	cmp	r2, #0
 801570e:	d011      	beq.n	8015734 <quorem+0x100>
 8015710:	9e01      	ldr	r6, [sp, #4]
 8015712:	0030      	movs	r0, r6
 8015714:	b009      	add	sp, #36	; 0x24
 8015716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015718:	682b      	ldr	r3, [r5, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d104      	bne.n	8015728 <quorem+0xf4>
 801571e:	3c01      	subs	r4, #1
 8015720:	9b02      	ldr	r3, [sp, #8]
 8015722:	3d04      	subs	r5, #4
 8015724:	42ab      	cmp	r3, r5
 8015726:	d3f7      	bcc.n	8015718 <quorem+0xe4>
 8015728:	613c      	str	r4, [r7, #16]
 801572a:	e7cb      	b.n	80156c4 <quorem+0x90>
 801572c:	681a      	ldr	r2, [r3, #0]
 801572e:	2a00      	cmp	r2, #0
 8015730:	d104      	bne.n	801573c <quorem+0x108>
 8015732:	3c01      	subs	r4, #1
 8015734:	9a02      	ldr	r2, [sp, #8]
 8015736:	3b04      	subs	r3, #4
 8015738:	429a      	cmp	r2, r3
 801573a:	d3f7      	bcc.n	801572c <quorem+0xf8>
 801573c:	613c      	str	r4, [r7, #16]
 801573e:	e7e7      	b.n	8015710 <quorem+0xdc>

08015740 <_dtoa_r>:
 8015740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015742:	0016      	movs	r6, r2
 8015744:	001f      	movs	r7, r3
 8015746:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015748:	b09b      	sub	sp, #108	; 0x6c
 801574a:	9002      	str	r0, [sp, #8]
 801574c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801574e:	9606      	str	r6, [sp, #24]
 8015750:	9707      	str	r7, [sp, #28]
 8015752:	2c00      	cmp	r4, #0
 8015754:	d108      	bne.n	8015768 <_dtoa_r+0x28>
 8015756:	2010      	movs	r0, #16
 8015758:	f7fe f9ec 	bl	8013b34 <malloc>
 801575c:	9b02      	ldr	r3, [sp, #8]
 801575e:	6258      	str	r0, [r3, #36]	; 0x24
 8015760:	6044      	str	r4, [r0, #4]
 8015762:	6084      	str	r4, [r0, #8]
 8015764:	6004      	str	r4, [r0, #0]
 8015766:	60c4      	str	r4, [r0, #12]
 8015768:	9b02      	ldr	r3, [sp, #8]
 801576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801576c:	6819      	ldr	r1, [r3, #0]
 801576e:	2900      	cmp	r1, #0
 8015770:	d00b      	beq.n	801578a <_dtoa_r+0x4a>
 8015772:	685a      	ldr	r2, [r3, #4]
 8015774:	2301      	movs	r3, #1
 8015776:	4093      	lsls	r3, r2
 8015778:	604a      	str	r2, [r1, #4]
 801577a:	608b      	str	r3, [r1, #8]
 801577c:	9802      	ldr	r0, [sp, #8]
 801577e:	f001 f944 	bl	8016a0a <_Bfree>
 8015782:	2200      	movs	r2, #0
 8015784:	9b02      	ldr	r3, [sp, #8]
 8015786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	2f00      	cmp	r7, #0
 801578c:	da20      	bge.n	80157d0 <_dtoa_r+0x90>
 801578e:	2301      	movs	r3, #1
 8015790:	602b      	str	r3, [r5, #0]
 8015792:	007b      	lsls	r3, r7, #1
 8015794:	085b      	lsrs	r3, r3, #1
 8015796:	9307      	str	r3, [sp, #28]
 8015798:	9c07      	ldr	r4, [sp, #28]
 801579a:	4bb2      	ldr	r3, [pc, #712]	; (8015a64 <_dtoa_r+0x324>)
 801579c:	0022      	movs	r2, r4
 801579e:	9317      	str	r3, [sp, #92]	; 0x5c
 80157a0:	401a      	ands	r2, r3
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d117      	bne.n	80157d6 <_dtoa_r+0x96>
 80157a6:	4bb0      	ldr	r3, [pc, #704]	; (8015a68 <_dtoa_r+0x328>)
 80157a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80157aa:	6013      	str	r3, [r2, #0]
 80157ac:	9b06      	ldr	r3, [sp, #24]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d103      	bne.n	80157ba <_dtoa_r+0x7a>
 80157b2:	0324      	lsls	r4, r4, #12
 80157b4:	d101      	bne.n	80157ba <_dtoa_r+0x7a>
 80157b6:	f000 fd87 	bl	80162c8 <_dtoa_r+0xb88>
 80157ba:	4bac      	ldr	r3, [pc, #688]	; (8015a6c <_dtoa_r+0x32c>)
 80157bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157be:	9308      	str	r3, [sp, #32]
 80157c0:	2a00      	cmp	r2, #0
 80157c2:	d002      	beq.n	80157ca <_dtoa_r+0x8a>
 80157c4:	4baa      	ldr	r3, [pc, #680]	; (8015a70 <_dtoa_r+0x330>)
 80157c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157c8:	6013      	str	r3, [r2, #0]
 80157ca:	9808      	ldr	r0, [sp, #32]
 80157cc:	b01b      	add	sp, #108	; 0x6c
 80157ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157d0:	2300      	movs	r3, #0
 80157d2:	602b      	str	r3, [r5, #0]
 80157d4:	e7e0      	b.n	8015798 <_dtoa_r+0x58>
 80157d6:	9e06      	ldr	r6, [sp, #24]
 80157d8:	9f07      	ldr	r7, [sp, #28]
 80157da:	2200      	movs	r2, #0
 80157dc:	2300      	movs	r3, #0
 80157de:	0030      	movs	r0, r6
 80157e0:	0039      	movs	r1, r7
 80157e2:	f7ea fe31 	bl	8000448 <__aeabi_dcmpeq>
 80157e6:	1e05      	subs	r5, r0, #0
 80157e8:	d00b      	beq.n	8015802 <_dtoa_r+0xc2>
 80157ea:	2301      	movs	r3, #1
 80157ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80157ee:	6013      	str	r3, [r2, #0]
 80157f0:	4ba0      	ldr	r3, [pc, #640]	; (8015a74 <_dtoa_r+0x334>)
 80157f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157f4:	9308      	str	r3, [sp, #32]
 80157f6:	2a00      	cmp	r2, #0
 80157f8:	d0e7      	beq.n	80157ca <_dtoa_r+0x8a>
 80157fa:	4a9f      	ldr	r2, [pc, #636]	; (8015a78 <_dtoa_r+0x338>)
 80157fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80157fe:	600a      	str	r2, [r1, #0]
 8015800:	e7e3      	b.n	80157ca <_dtoa_r+0x8a>
 8015802:	ab18      	add	r3, sp, #96	; 0x60
 8015804:	9301      	str	r3, [sp, #4]
 8015806:	ab19      	add	r3, sp, #100	; 0x64
 8015808:	9300      	str	r3, [sp, #0]
 801580a:	0032      	movs	r2, r6
 801580c:	003b      	movs	r3, r7
 801580e:	9802      	ldr	r0, [sp, #8]
 8015810:	f001 fc06 	bl	8017020 <__d2b>
 8015814:	0063      	lsls	r3, r4, #1
 8015816:	9003      	str	r0, [sp, #12]
 8015818:	0d5b      	lsrs	r3, r3, #21
 801581a:	d074      	beq.n	8015906 <_dtoa_r+0x1c6>
 801581c:	033a      	lsls	r2, r7, #12
 801581e:	4c97      	ldr	r4, [pc, #604]	; (8015a7c <_dtoa_r+0x33c>)
 8015820:	0b12      	lsrs	r2, r2, #12
 8015822:	4314      	orrs	r4, r2
 8015824:	0021      	movs	r1, r4
 8015826:	4a96      	ldr	r2, [pc, #600]	; (8015a80 <_dtoa_r+0x340>)
 8015828:	0030      	movs	r0, r6
 801582a:	9516      	str	r5, [sp, #88]	; 0x58
 801582c:	189e      	adds	r6, r3, r2
 801582e:	2200      	movs	r2, #0
 8015830:	4b94      	ldr	r3, [pc, #592]	; (8015a84 <_dtoa_r+0x344>)
 8015832:	f7ec fe1f 	bl	8002474 <__aeabi_dsub>
 8015836:	4a94      	ldr	r2, [pc, #592]	; (8015a88 <_dtoa_r+0x348>)
 8015838:	4b94      	ldr	r3, [pc, #592]	; (8015a8c <_dtoa_r+0x34c>)
 801583a:	f7ec fba9 	bl	8001f90 <__aeabi_dmul>
 801583e:	4a94      	ldr	r2, [pc, #592]	; (8015a90 <_dtoa_r+0x350>)
 8015840:	4b94      	ldr	r3, [pc, #592]	; (8015a94 <_dtoa_r+0x354>)
 8015842:	f7eb fc7f 	bl	8001144 <__aeabi_dadd>
 8015846:	0004      	movs	r4, r0
 8015848:	0030      	movs	r0, r6
 801584a:	000d      	movs	r5, r1
 801584c:	f7ed f9ac 	bl	8002ba8 <__aeabi_i2d>
 8015850:	4a91      	ldr	r2, [pc, #580]	; (8015a98 <_dtoa_r+0x358>)
 8015852:	4b92      	ldr	r3, [pc, #584]	; (8015a9c <_dtoa_r+0x35c>)
 8015854:	f7ec fb9c 	bl	8001f90 <__aeabi_dmul>
 8015858:	0002      	movs	r2, r0
 801585a:	000b      	movs	r3, r1
 801585c:	0020      	movs	r0, r4
 801585e:	0029      	movs	r1, r5
 8015860:	f7eb fc70 	bl	8001144 <__aeabi_dadd>
 8015864:	0004      	movs	r4, r0
 8015866:	000d      	movs	r5, r1
 8015868:	f7ed f968 	bl	8002b3c <__aeabi_d2iz>
 801586c:	2200      	movs	r2, #0
 801586e:	0007      	movs	r7, r0
 8015870:	2300      	movs	r3, #0
 8015872:	0020      	movs	r0, r4
 8015874:	0029      	movs	r1, r5
 8015876:	f7ea fded 	bl	8000454 <__aeabi_dcmplt>
 801587a:	2800      	cmp	r0, #0
 801587c:	d009      	beq.n	8015892 <_dtoa_r+0x152>
 801587e:	0038      	movs	r0, r7
 8015880:	f7ed f992 	bl	8002ba8 <__aeabi_i2d>
 8015884:	002b      	movs	r3, r5
 8015886:	0022      	movs	r2, r4
 8015888:	f7ea fdde 	bl	8000448 <__aeabi_dcmpeq>
 801588c:	4243      	negs	r3, r0
 801588e:	4158      	adcs	r0, r3
 8015890:	1a3f      	subs	r7, r7, r0
 8015892:	2301      	movs	r3, #1
 8015894:	9314      	str	r3, [sp, #80]	; 0x50
 8015896:	2f16      	cmp	r7, #22
 8015898:	d80d      	bhi.n	80158b6 <_dtoa_r+0x176>
 801589a:	4981      	ldr	r1, [pc, #516]	; (8015aa0 <_dtoa_r+0x360>)
 801589c:	00fb      	lsls	r3, r7, #3
 801589e:	18c9      	adds	r1, r1, r3
 80158a0:	6808      	ldr	r0, [r1, #0]
 80158a2:	6849      	ldr	r1, [r1, #4]
 80158a4:	9a06      	ldr	r2, [sp, #24]
 80158a6:	9b07      	ldr	r3, [sp, #28]
 80158a8:	f7ea fde8 	bl	800047c <__aeabi_dcmpgt>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d046      	beq.n	801593e <_dtoa_r+0x1fe>
 80158b0:	2300      	movs	r3, #0
 80158b2:	3f01      	subs	r7, #1
 80158b4:	9314      	str	r3, [sp, #80]	; 0x50
 80158b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80158b8:	1b9e      	subs	r6, r3, r6
 80158ba:	2300      	movs	r3, #0
 80158bc:	930a      	str	r3, [sp, #40]	; 0x28
 80158be:	0033      	movs	r3, r6
 80158c0:	3b01      	subs	r3, #1
 80158c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80158c4:	d504      	bpl.n	80158d0 <_dtoa_r+0x190>
 80158c6:	2301      	movs	r3, #1
 80158c8:	1b9b      	subs	r3, r3, r6
 80158ca:	930a      	str	r3, [sp, #40]	; 0x28
 80158cc:	2300      	movs	r3, #0
 80158ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80158d0:	2f00      	cmp	r7, #0
 80158d2:	db36      	blt.n	8015942 <_dtoa_r+0x202>
 80158d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158d6:	9711      	str	r7, [sp, #68]	; 0x44
 80158d8:	19db      	adds	r3, r3, r7
 80158da:	930b      	str	r3, [sp, #44]	; 0x2c
 80158dc:	2300      	movs	r3, #0
 80158de:	9304      	str	r3, [sp, #16]
 80158e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158e2:	2401      	movs	r4, #1
 80158e4:	2b09      	cmp	r3, #9
 80158e6:	d900      	bls.n	80158ea <_dtoa_r+0x1aa>
 80158e8:	e084      	b.n	80159f4 <_dtoa_r+0x2b4>
 80158ea:	2b05      	cmp	r3, #5
 80158ec:	dd02      	ble.n	80158f4 <_dtoa_r+0x1b4>
 80158ee:	2400      	movs	r4, #0
 80158f0:	3b04      	subs	r3, #4
 80158f2:	9320      	str	r3, [sp, #128]	; 0x80
 80158f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158f6:	1e98      	subs	r0, r3, #2
 80158f8:	2803      	cmp	r0, #3
 80158fa:	d900      	bls.n	80158fe <_dtoa_r+0x1be>
 80158fc:	e084      	b.n	8015a08 <_dtoa_r+0x2c8>
 80158fe:	f7ea fc13 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015902:	7775      	.short	0x7775
 8015904:	6a28      	.short	0x6a28
 8015906:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015908:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801590a:	189e      	adds	r6, r3, r2
 801590c:	4b65      	ldr	r3, [pc, #404]	; (8015aa4 <_dtoa_r+0x364>)
 801590e:	18f2      	adds	r2, r6, r3
 8015910:	2a20      	cmp	r2, #32
 8015912:	dd0f      	ble.n	8015934 <_dtoa_r+0x1f4>
 8015914:	2340      	movs	r3, #64	; 0x40
 8015916:	1a9b      	subs	r3, r3, r2
 8015918:	409c      	lsls	r4, r3
 801591a:	4b63      	ldr	r3, [pc, #396]	; (8015aa8 <_dtoa_r+0x368>)
 801591c:	9806      	ldr	r0, [sp, #24]
 801591e:	18f3      	adds	r3, r6, r3
 8015920:	40d8      	lsrs	r0, r3
 8015922:	4320      	orrs	r0, r4
 8015924:	f7ed f97a 	bl	8002c1c <__aeabi_ui2d>
 8015928:	2301      	movs	r3, #1
 801592a:	4c60      	ldr	r4, [pc, #384]	; (8015aac <_dtoa_r+0x36c>)
 801592c:	3e01      	subs	r6, #1
 801592e:	1909      	adds	r1, r1, r4
 8015930:	9316      	str	r3, [sp, #88]	; 0x58
 8015932:	e77c      	b.n	801582e <_dtoa_r+0xee>
 8015934:	2320      	movs	r3, #32
 8015936:	9806      	ldr	r0, [sp, #24]
 8015938:	1a9b      	subs	r3, r3, r2
 801593a:	4098      	lsls	r0, r3
 801593c:	e7f2      	b.n	8015924 <_dtoa_r+0x1e4>
 801593e:	9014      	str	r0, [sp, #80]	; 0x50
 8015940:	e7b9      	b.n	80158b6 <_dtoa_r+0x176>
 8015942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015944:	1bdb      	subs	r3, r3, r7
 8015946:	930a      	str	r3, [sp, #40]	; 0x28
 8015948:	427b      	negs	r3, r7
 801594a:	9304      	str	r3, [sp, #16]
 801594c:	2300      	movs	r3, #0
 801594e:	9311      	str	r3, [sp, #68]	; 0x44
 8015950:	e7c6      	b.n	80158e0 <_dtoa_r+0x1a0>
 8015952:	2301      	movs	r3, #1
 8015954:	930d      	str	r3, [sp, #52]	; 0x34
 8015956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015958:	2b00      	cmp	r3, #0
 801595a:	dd59      	ble.n	8015a10 <_dtoa_r+0x2d0>
 801595c:	930c      	str	r3, [sp, #48]	; 0x30
 801595e:	9309      	str	r3, [sp, #36]	; 0x24
 8015960:	9a02      	ldr	r2, [sp, #8]
 8015962:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8015964:	2200      	movs	r2, #0
 8015966:	606a      	str	r2, [r5, #4]
 8015968:	3204      	adds	r2, #4
 801596a:	0010      	movs	r0, r2
 801596c:	3014      	adds	r0, #20
 801596e:	6869      	ldr	r1, [r5, #4]
 8015970:	4298      	cmp	r0, r3
 8015972:	d952      	bls.n	8015a1a <_dtoa_r+0x2da>
 8015974:	9802      	ldr	r0, [sp, #8]
 8015976:	f001 f810 	bl	801699a <_Balloc>
 801597a:	9b02      	ldr	r3, [sp, #8]
 801597c:	6028      	str	r0, [r5, #0]
 801597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	9308      	str	r3, [sp, #32]
 8015984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015986:	2b0e      	cmp	r3, #14
 8015988:	d900      	bls.n	801598c <_dtoa_r+0x24c>
 801598a:	e10a      	b.n	8015ba2 <_dtoa_r+0x462>
 801598c:	2c00      	cmp	r4, #0
 801598e:	d100      	bne.n	8015992 <_dtoa_r+0x252>
 8015990:	e107      	b.n	8015ba2 <_dtoa_r+0x462>
 8015992:	9b06      	ldr	r3, [sp, #24]
 8015994:	9c07      	ldr	r4, [sp, #28]
 8015996:	9312      	str	r3, [sp, #72]	; 0x48
 8015998:	9413      	str	r4, [sp, #76]	; 0x4c
 801599a:	2f00      	cmp	r7, #0
 801599c:	dc00      	bgt.n	80159a0 <_dtoa_r+0x260>
 801599e:	e089      	b.n	8015ab4 <_dtoa_r+0x374>
 80159a0:	210f      	movs	r1, #15
 80159a2:	003a      	movs	r2, r7
 80159a4:	4b3e      	ldr	r3, [pc, #248]	; (8015aa0 <_dtoa_r+0x360>)
 80159a6:	400a      	ands	r2, r1
 80159a8:	00d2      	lsls	r2, r2, #3
 80159aa:	189b      	adds	r3, r3, r2
 80159ac:	681d      	ldr	r5, [r3, #0]
 80159ae:	685e      	ldr	r6, [r3, #4]
 80159b0:	2302      	movs	r3, #2
 80159b2:	113c      	asrs	r4, r7, #4
 80159b4:	930e      	str	r3, [sp, #56]	; 0x38
 80159b6:	06e3      	lsls	r3, r4, #27
 80159b8:	d50b      	bpl.n	80159d2 <_dtoa_r+0x292>
 80159ba:	4b3d      	ldr	r3, [pc, #244]	; (8015ab0 <_dtoa_r+0x370>)
 80159bc:	400c      	ands	r4, r1
 80159be:	6a1a      	ldr	r2, [r3, #32]
 80159c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80159c6:	f7eb fed9 	bl	800177c <__aeabi_ddiv>
 80159ca:	2303      	movs	r3, #3
 80159cc:	9006      	str	r0, [sp, #24]
 80159ce:	9107      	str	r1, [sp, #28]
 80159d0:	930e      	str	r3, [sp, #56]	; 0x38
 80159d2:	2300      	movs	r3, #0
 80159d4:	e03a      	b.n	8015a4c <_dtoa_r+0x30c>
 80159d6:	2301      	movs	r3, #1
 80159d8:	930d      	str	r3, [sp, #52]	; 0x34
 80159da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159dc:	18fb      	adds	r3, r7, r3
 80159de:	930c      	str	r3, [sp, #48]	; 0x30
 80159e0:	3301      	adds	r3, #1
 80159e2:	9309      	str	r3, [sp, #36]	; 0x24
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dcbb      	bgt.n	8015960 <_dtoa_r+0x220>
 80159e8:	2301      	movs	r3, #1
 80159ea:	e7b9      	b.n	8015960 <_dtoa_r+0x220>
 80159ec:	2300      	movs	r3, #0
 80159ee:	e7b1      	b.n	8015954 <_dtoa_r+0x214>
 80159f0:	2300      	movs	r3, #0
 80159f2:	e7f1      	b.n	80159d8 <_dtoa_r+0x298>
 80159f4:	2300      	movs	r3, #0
 80159f6:	940d      	str	r4, [sp, #52]	; 0x34
 80159f8:	9320      	str	r3, [sp, #128]	; 0x80
 80159fa:	3b01      	subs	r3, #1
 80159fc:	2200      	movs	r2, #0
 80159fe:	930c      	str	r3, [sp, #48]	; 0x30
 8015a00:	9309      	str	r3, [sp, #36]	; 0x24
 8015a02:	3313      	adds	r3, #19
 8015a04:	9221      	str	r2, [sp, #132]	; 0x84
 8015a06:	e7ab      	b.n	8015960 <_dtoa_r+0x220>
 8015a08:	2301      	movs	r3, #1
 8015a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8015a0c:	3b02      	subs	r3, #2
 8015a0e:	e7f5      	b.n	80159fc <_dtoa_r+0x2bc>
 8015a10:	2301      	movs	r3, #1
 8015a12:	930c      	str	r3, [sp, #48]	; 0x30
 8015a14:	9309      	str	r3, [sp, #36]	; 0x24
 8015a16:	001a      	movs	r2, r3
 8015a18:	e7f4      	b.n	8015a04 <_dtoa_r+0x2c4>
 8015a1a:	3101      	adds	r1, #1
 8015a1c:	6069      	str	r1, [r5, #4]
 8015a1e:	0052      	lsls	r2, r2, #1
 8015a20:	e7a3      	b.n	801596a <_dtoa_r+0x22a>
 8015a22:	2301      	movs	r3, #1
 8015a24:	421c      	tst	r4, r3
 8015a26:	d00e      	beq.n	8015a46 <_dtoa_r+0x306>
 8015a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a2a:	4a21      	ldr	r2, [pc, #132]	; (8015ab0 <_dtoa_r+0x370>)
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8015a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a32:	0028      	movs	r0, r5
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	189b      	adds	r3, r3, r2
 8015a38:	0031      	movs	r1, r6
 8015a3a:	681a      	ldr	r2, [r3, #0]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	f7ec faa7 	bl	8001f90 <__aeabi_dmul>
 8015a42:	0005      	movs	r5, r0
 8015a44:	000e      	movs	r6, r1
 8015a46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a48:	1064      	asrs	r4, r4, #1
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	9310      	str	r3, [sp, #64]	; 0x40
 8015a4e:	2c00      	cmp	r4, #0
 8015a50:	d1e7      	bne.n	8015a22 <_dtoa_r+0x2e2>
 8015a52:	9806      	ldr	r0, [sp, #24]
 8015a54:	9907      	ldr	r1, [sp, #28]
 8015a56:	002a      	movs	r2, r5
 8015a58:	0033      	movs	r3, r6
 8015a5a:	f7eb fe8f 	bl	800177c <__aeabi_ddiv>
 8015a5e:	9006      	str	r0, [sp, #24]
 8015a60:	9107      	str	r1, [sp, #28]
 8015a62:	e042      	b.n	8015aea <_dtoa_r+0x3aa>
 8015a64:	7ff00000 	.word	0x7ff00000
 8015a68:	0000270f 	.word	0x0000270f
 8015a6c:	0801a7ca 	.word	0x0801a7ca
 8015a70:	0801a7cd 	.word	0x0801a7cd
 8015a74:	0801a646 	.word	0x0801a646
 8015a78:	0801a647 	.word	0x0801a647
 8015a7c:	3ff00000 	.word	0x3ff00000
 8015a80:	fffffc01 	.word	0xfffffc01
 8015a84:	3ff80000 	.word	0x3ff80000
 8015a88:	636f4361 	.word	0x636f4361
 8015a8c:	3fd287a7 	.word	0x3fd287a7
 8015a90:	8b60c8b3 	.word	0x8b60c8b3
 8015a94:	3fc68a28 	.word	0x3fc68a28
 8015a98:	509f79fb 	.word	0x509f79fb
 8015a9c:	3fd34413 	.word	0x3fd34413
 8015aa0:	0801a7f8 	.word	0x0801a7f8
 8015aa4:	00000432 	.word	0x00000432
 8015aa8:	00000412 	.word	0x00000412
 8015aac:	fe100000 	.word	0xfe100000
 8015ab0:	0801a7d0 	.word	0x0801a7d0
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8015ab8:	2f00      	cmp	r7, #0
 8015aba:	d016      	beq.n	8015aea <_dtoa_r+0x3aa>
 8015abc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015abe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015ac0:	427c      	negs	r4, r7
 8015ac2:	330d      	adds	r3, #13
 8015ac4:	4023      	ands	r3, r4
 8015ac6:	4ace      	ldr	r2, [pc, #824]	; (8015e00 <_dtoa_r+0x6c0>)
 8015ac8:	00db      	lsls	r3, r3, #3
 8015aca:	18d3      	adds	r3, r2, r3
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	f7ec fa5e 	bl	8001f90 <__aeabi_dmul>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	2601      	movs	r6, #1
 8015ad8:	001d      	movs	r5, r3
 8015ada:	9006      	str	r0, [sp, #24]
 8015adc:	9107      	str	r1, [sp, #28]
 8015ade:	1124      	asrs	r4, r4, #4
 8015ae0:	2c00      	cmp	r4, #0
 8015ae2:	d000      	beq.n	8015ae6 <_dtoa_r+0x3a6>
 8015ae4:	e08c      	b.n	8015c00 <_dtoa_r+0x4c0>
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d1b9      	bne.n	8015a5e <_dtoa_r+0x31e>
 8015aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d100      	bne.n	8015af2 <_dtoa_r+0x3b2>
 8015af0:	e096      	b.n	8015c20 <_dtoa_r+0x4e0>
 8015af2:	9c06      	ldr	r4, [sp, #24]
 8015af4:	9d07      	ldr	r5, [sp, #28]
 8015af6:	2200      	movs	r2, #0
 8015af8:	4bc2      	ldr	r3, [pc, #776]	; (8015e04 <_dtoa_r+0x6c4>)
 8015afa:	0020      	movs	r0, r4
 8015afc:	0029      	movs	r1, r5
 8015afe:	f7ea fca9 	bl	8000454 <__aeabi_dcmplt>
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d100      	bne.n	8015b08 <_dtoa_r+0x3c8>
 8015b06:	e08b      	b.n	8015c20 <_dtoa_r+0x4e0>
 8015b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d100      	bne.n	8015b10 <_dtoa_r+0x3d0>
 8015b0e:	e087      	b.n	8015c20 <_dtoa_r+0x4e0>
 8015b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	dd41      	ble.n	8015b9a <_dtoa_r+0x45a>
 8015b16:	4bbc      	ldr	r3, [pc, #752]	; (8015e08 <_dtoa_r+0x6c8>)
 8015b18:	2200      	movs	r2, #0
 8015b1a:	0020      	movs	r0, r4
 8015b1c:	0029      	movs	r1, r5
 8015b1e:	f7ec fa37 	bl	8001f90 <__aeabi_dmul>
 8015b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b24:	9006      	str	r0, [sp, #24]
 8015b26:	9107      	str	r1, [sp, #28]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8015b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b2e:	1e7e      	subs	r6, r7, #1
 8015b30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b32:	9310      	str	r3, [sp, #64]	; 0x40
 8015b34:	f7ed f838 	bl	8002ba8 <__aeabi_i2d>
 8015b38:	9a06      	ldr	r2, [sp, #24]
 8015b3a:	9b07      	ldr	r3, [sp, #28]
 8015b3c:	f7ec fa28 	bl	8001f90 <__aeabi_dmul>
 8015b40:	2200      	movs	r2, #0
 8015b42:	4bb2      	ldr	r3, [pc, #712]	; (8015e0c <_dtoa_r+0x6cc>)
 8015b44:	f7eb fafe 	bl	8001144 <__aeabi_dadd>
 8015b48:	4ab1      	ldr	r2, [pc, #708]	; (8015e10 <_dtoa_r+0x6d0>)
 8015b4a:	900e      	str	r0, [sp, #56]	; 0x38
 8015b4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015b50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015b52:	4694      	mov	ip, r2
 8015b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b56:	4463      	add	r3, ip
 8015b58:	9315      	str	r3, [sp, #84]	; 0x54
 8015b5a:	001d      	movs	r5, r3
 8015b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d161      	bne.n	8015c26 <_dtoa_r+0x4e6>
 8015b62:	9806      	ldr	r0, [sp, #24]
 8015b64:	9907      	ldr	r1, [sp, #28]
 8015b66:	2200      	movs	r2, #0
 8015b68:	4baa      	ldr	r3, [pc, #680]	; (8015e14 <_dtoa_r+0x6d4>)
 8015b6a:	f7ec fc83 	bl	8002474 <__aeabi_dsub>
 8015b6e:	0022      	movs	r2, r4
 8015b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b72:	9006      	str	r0, [sp, #24]
 8015b74:	9107      	str	r1, [sp, #28]
 8015b76:	f7ea fc81 	bl	800047c <__aeabi_dcmpgt>
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d000      	beq.n	8015b80 <_dtoa_r+0x440>
 8015b7e:	e2a8      	b.n	80160d2 <_dtoa_r+0x992>
 8015b80:	48a5      	ldr	r0, [pc, #660]	; (8015e18 <_dtoa_r+0x6d8>)
 8015b82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b84:	4684      	mov	ip, r0
 8015b86:	4461      	add	r1, ip
 8015b88:	000b      	movs	r3, r1
 8015b8a:	9806      	ldr	r0, [sp, #24]
 8015b8c:	9907      	ldr	r1, [sp, #28]
 8015b8e:	0022      	movs	r2, r4
 8015b90:	f7ea fc60 	bl	8000454 <__aeabi_dcmplt>
 8015b94:	2800      	cmp	r0, #0
 8015b96:	d000      	beq.n	8015b9a <_dtoa_r+0x45a>
 8015b98:	e295      	b.n	80160c6 <_dtoa_r+0x986>
 8015b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b9e:	9306      	str	r3, [sp, #24]
 8015ba0:	9407      	str	r4, [sp, #28]
 8015ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	da00      	bge.n	8015baa <_dtoa_r+0x46a>
 8015ba8:	e15c      	b.n	8015e64 <_dtoa_r+0x724>
 8015baa:	2f0e      	cmp	r7, #14
 8015bac:	dd00      	ble.n	8015bb0 <_dtoa_r+0x470>
 8015bae:	e159      	b.n	8015e64 <_dtoa_r+0x724>
 8015bb0:	4b93      	ldr	r3, [pc, #588]	; (8015e00 <_dtoa_r+0x6c0>)
 8015bb2:	00fa      	lsls	r2, r7, #3
 8015bb4:	189b      	adds	r3, r3, r2
 8015bb6:	685c      	ldr	r4, [r3, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	9304      	str	r3, [sp, #16]
 8015bbc:	9405      	str	r4, [sp, #20]
 8015bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	db00      	blt.n	8015bc6 <_dtoa_r+0x486>
 8015bc4:	e0d8      	b.n	8015d78 <_dtoa_r+0x638>
 8015bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	dd00      	ble.n	8015bce <_dtoa_r+0x48e>
 8015bcc:	e0d4      	b.n	8015d78 <_dtoa_r+0x638>
 8015bce:	d000      	beq.n	8015bd2 <_dtoa_r+0x492>
 8015bd0:	e27d      	b.n	80160ce <_dtoa_r+0x98e>
 8015bd2:	9804      	ldr	r0, [sp, #16]
 8015bd4:	9905      	ldr	r1, [sp, #20]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	4b8e      	ldr	r3, [pc, #568]	; (8015e14 <_dtoa_r+0x6d4>)
 8015bda:	f7ec f9d9 	bl	8001f90 <__aeabi_dmul>
 8015bde:	9a06      	ldr	r2, [sp, #24]
 8015be0:	9b07      	ldr	r3, [sp, #28]
 8015be2:	f7ea fc55 	bl	8000490 <__aeabi_dcmpge>
 8015be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015be8:	9304      	str	r3, [sp, #16]
 8015bea:	001e      	movs	r6, r3
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d000      	beq.n	8015bf2 <_dtoa_r+0x4b2>
 8015bf0:	e24f      	b.n	8016092 <_dtoa_r+0x952>
 8015bf2:	9b08      	ldr	r3, [sp, #32]
 8015bf4:	9a08      	ldr	r2, [sp, #32]
 8015bf6:	1c5d      	adds	r5, r3, #1
 8015bf8:	2331      	movs	r3, #49	; 0x31
 8015bfa:	3701      	adds	r7, #1
 8015bfc:	7013      	strb	r3, [r2, #0]
 8015bfe:	e24b      	b.n	8016098 <_dtoa_r+0x958>
 8015c00:	4234      	tst	r4, r6
 8015c02:	d00a      	beq.n	8015c1a <_dtoa_r+0x4da>
 8015c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c06:	4a85      	ldr	r2, [pc, #532]	; (8015e1c <_dtoa_r+0x6dc>)
 8015c08:	3301      	adds	r3, #1
 8015c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c0c:	00eb      	lsls	r3, r5, #3
 8015c0e:	189b      	adds	r3, r3, r2
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	f7ec f9bc 	bl	8001f90 <__aeabi_dmul>
 8015c18:	0033      	movs	r3, r6
 8015c1a:	1064      	asrs	r4, r4, #1
 8015c1c:	3501      	adds	r5, #1
 8015c1e:	e75f      	b.n	8015ae0 <_dtoa_r+0x3a0>
 8015c20:	003e      	movs	r6, r7
 8015c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c24:	e784      	b.n	8015b30 <_dtoa_r+0x3f0>
 8015c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c2a:	1e5a      	subs	r2, r3, #1
 8015c2c:	4b74      	ldr	r3, [pc, #464]	; (8015e00 <_dtoa_r+0x6c0>)
 8015c2e:	00d2      	lsls	r2, r2, #3
 8015c30:	189b      	adds	r3, r3, r2
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	2900      	cmp	r1, #0
 8015c38:	d049      	beq.n	8015cce <_dtoa_r+0x58e>
 8015c3a:	2000      	movs	r0, #0
 8015c3c:	4978      	ldr	r1, [pc, #480]	; (8015e20 <_dtoa_r+0x6e0>)
 8015c3e:	f7eb fd9d 	bl	800177c <__aeabi_ddiv>
 8015c42:	002b      	movs	r3, r5
 8015c44:	0022      	movs	r2, r4
 8015c46:	f7ec fc15 	bl	8002474 <__aeabi_dsub>
 8015c4a:	9b08      	ldr	r3, [sp, #32]
 8015c4c:	900e      	str	r0, [sp, #56]	; 0x38
 8015c4e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c50:	9315      	str	r3, [sp, #84]	; 0x54
 8015c52:	9806      	ldr	r0, [sp, #24]
 8015c54:	9907      	ldr	r1, [sp, #28]
 8015c56:	f7ec ff71 	bl	8002b3c <__aeabi_d2iz>
 8015c5a:	0004      	movs	r4, r0
 8015c5c:	f7ec ffa4 	bl	8002ba8 <__aeabi_i2d>
 8015c60:	0002      	movs	r2, r0
 8015c62:	000b      	movs	r3, r1
 8015c64:	9806      	ldr	r0, [sp, #24]
 8015c66:	9907      	ldr	r1, [sp, #28]
 8015c68:	f7ec fc04 	bl	8002474 <__aeabi_dsub>
 8015c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c6e:	3430      	adds	r4, #48	; 0x30
 8015c70:	1c5d      	adds	r5, r3, #1
 8015c72:	701c      	strb	r4, [r3, #0]
 8015c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c78:	9006      	str	r0, [sp, #24]
 8015c7a:	9107      	str	r1, [sp, #28]
 8015c7c:	f7ea fbea 	bl	8000454 <__aeabi_dcmplt>
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d16c      	bne.n	8015d5e <_dtoa_r+0x61e>
 8015c84:	9a06      	ldr	r2, [sp, #24]
 8015c86:	9b07      	ldr	r3, [sp, #28]
 8015c88:	2000      	movs	r0, #0
 8015c8a:	495e      	ldr	r1, [pc, #376]	; (8015e04 <_dtoa_r+0x6c4>)
 8015c8c:	f7ec fbf2 	bl	8002474 <__aeabi_dsub>
 8015c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c94:	f7ea fbde 	bl	8000454 <__aeabi_dcmplt>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d000      	beq.n	8015c9e <_dtoa_r+0x55e>
 8015c9c:	e0c3      	b.n	8015e26 <_dtoa_r+0x6e6>
 8015c9e:	9b08      	ldr	r3, [sp, #32]
 8015ca0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ca2:	1aeb      	subs	r3, r5, r3
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	dc00      	bgt.n	8015caa <_dtoa_r+0x56a>
 8015ca8:	e777      	b.n	8015b9a <_dtoa_r+0x45a>
 8015caa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015cae:	2200      	movs	r2, #0
 8015cb0:	4b55      	ldr	r3, [pc, #340]	; (8015e08 <_dtoa_r+0x6c8>)
 8015cb2:	f7ec f96d 	bl	8001f90 <__aeabi_dmul>
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	900e      	str	r0, [sp, #56]	; 0x38
 8015cba:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cbc:	9806      	ldr	r0, [sp, #24]
 8015cbe:	9907      	ldr	r1, [sp, #28]
 8015cc0:	4b51      	ldr	r3, [pc, #324]	; (8015e08 <_dtoa_r+0x6c8>)
 8015cc2:	f7ec f965 	bl	8001f90 <__aeabi_dmul>
 8015cc6:	9515      	str	r5, [sp, #84]	; 0x54
 8015cc8:	9006      	str	r0, [sp, #24]
 8015cca:	9107      	str	r1, [sp, #28]
 8015ccc:	e7c1      	b.n	8015c52 <_dtoa_r+0x512>
 8015cce:	0020      	movs	r0, r4
 8015cd0:	0029      	movs	r1, r5
 8015cd2:	f7ec f95d 	bl	8001f90 <__aeabi_dmul>
 8015cd6:	9c08      	ldr	r4, [sp, #32]
 8015cd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015cda:	0023      	movs	r3, r4
 8015cdc:	4694      	mov	ip, r2
 8015cde:	900e      	str	r0, [sp, #56]	; 0x38
 8015ce0:	910f      	str	r1, [sp, #60]	; 0x3c
 8015ce2:	4463      	add	r3, ip
 8015ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8015ce6:	9806      	ldr	r0, [sp, #24]
 8015ce8:	9907      	ldr	r1, [sp, #28]
 8015cea:	f7ec ff27 	bl	8002b3c <__aeabi_d2iz>
 8015cee:	0005      	movs	r5, r0
 8015cf0:	f7ec ff5a 	bl	8002ba8 <__aeabi_i2d>
 8015cf4:	000b      	movs	r3, r1
 8015cf6:	0002      	movs	r2, r0
 8015cf8:	9806      	ldr	r0, [sp, #24]
 8015cfa:	9907      	ldr	r1, [sp, #28]
 8015cfc:	f7ec fbba 	bl	8002474 <__aeabi_dsub>
 8015d00:	3530      	adds	r5, #48	; 0x30
 8015d02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d04:	7025      	strb	r5, [r4, #0]
 8015d06:	3401      	adds	r4, #1
 8015d08:	9006      	str	r0, [sp, #24]
 8015d0a:	9107      	str	r1, [sp, #28]
 8015d0c:	42a3      	cmp	r3, r4
 8015d0e:	d12a      	bne.n	8015d66 <_dtoa_r+0x626>
 8015d10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015d14:	9a08      	ldr	r2, [sp, #32]
 8015d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d18:	4694      	mov	ip, r2
 8015d1a:	4463      	add	r3, ip
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	001d      	movs	r5, r3
 8015d20:	4b3f      	ldr	r3, [pc, #252]	; (8015e20 <_dtoa_r+0x6e0>)
 8015d22:	f7eb fa0f 	bl	8001144 <__aeabi_dadd>
 8015d26:	0002      	movs	r2, r0
 8015d28:	000b      	movs	r3, r1
 8015d2a:	9806      	ldr	r0, [sp, #24]
 8015d2c:	9907      	ldr	r1, [sp, #28]
 8015d2e:	f7ea fba5 	bl	800047c <__aeabi_dcmpgt>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d000      	beq.n	8015d38 <_dtoa_r+0x5f8>
 8015d36:	e076      	b.n	8015e26 <_dtoa_r+0x6e6>
 8015d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	4938      	ldr	r1, [pc, #224]	; (8015e20 <_dtoa_r+0x6e0>)
 8015d40:	f7ec fb98 	bl	8002474 <__aeabi_dsub>
 8015d44:	0002      	movs	r2, r0
 8015d46:	000b      	movs	r3, r1
 8015d48:	9806      	ldr	r0, [sp, #24]
 8015d4a:	9907      	ldr	r1, [sp, #28]
 8015d4c:	f7ea fb82 	bl	8000454 <__aeabi_dcmplt>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d100      	bne.n	8015d56 <_dtoa_r+0x616>
 8015d54:	e721      	b.n	8015b9a <_dtoa_r+0x45a>
 8015d56:	1e6b      	subs	r3, r5, #1
 8015d58:	781a      	ldrb	r2, [r3, #0]
 8015d5a:	2a30      	cmp	r2, #48	; 0x30
 8015d5c:	d001      	beq.n	8015d62 <_dtoa_r+0x622>
 8015d5e:	0037      	movs	r7, r6
 8015d60:	e03f      	b.n	8015de2 <_dtoa_r+0x6a2>
 8015d62:	001d      	movs	r5, r3
 8015d64:	e7f7      	b.n	8015d56 <_dtoa_r+0x616>
 8015d66:	9806      	ldr	r0, [sp, #24]
 8015d68:	9907      	ldr	r1, [sp, #28]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	4b26      	ldr	r3, [pc, #152]	; (8015e08 <_dtoa_r+0x6c8>)
 8015d6e:	f7ec f90f 	bl	8001f90 <__aeabi_dmul>
 8015d72:	9006      	str	r0, [sp, #24]
 8015d74:	9107      	str	r1, [sp, #28]
 8015d76:	e7b6      	b.n	8015ce6 <_dtoa_r+0x5a6>
 8015d78:	9e08      	ldr	r6, [sp, #32]
 8015d7a:	9a04      	ldr	r2, [sp, #16]
 8015d7c:	9b05      	ldr	r3, [sp, #20]
 8015d7e:	9806      	ldr	r0, [sp, #24]
 8015d80:	9907      	ldr	r1, [sp, #28]
 8015d82:	f7eb fcfb 	bl	800177c <__aeabi_ddiv>
 8015d86:	f7ec fed9 	bl	8002b3c <__aeabi_d2iz>
 8015d8a:	0004      	movs	r4, r0
 8015d8c:	f7ec ff0c 	bl	8002ba8 <__aeabi_i2d>
 8015d90:	9a04      	ldr	r2, [sp, #16]
 8015d92:	9b05      	ldr	r3, [sp, #20]
 8015d94:	f7ec f8fc 	bl	8001f90 <__aeabi_dmul>
 8015d98:	0002      	movs	r2, r0
 8015d9a:	000b      	movs	r3, r1
 8015d9c:	9806      	ldr	r0, [sp, #24]
 8015d9e:	9907      	ldr	r1, [sp, #28]
 8015da0:	f7ec fb68 	bl	8002474 <__aeabi_dsub>
 8015da4:	0023      	movs	r3, r4
 8015da6:	3330      	adds	r3, #48	; 0x30
 8015da8:	7033      	strb	r3, [r6, #0]
 8015daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dac:	9b08      	ldr	r3, [sp, #32]
 8015dae:	1c75      	adds	r5, r6, #1
 8015db0:	1aeb      	subs	r3, r5, r3
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d148      	bne.n	8015e48 <_dtoa_r+0x708>
 8015db6:	0002      	movs	r2, r0
 8015db8:	000b      	movs	r3, r1
 8015dba:	f7eb f9c3 	bl	8001144 <__aeabi_dadd>
 8015dbe:	9a04      	ldr	r2, [sp, #16]
 8015dc0:	9b05      	ldr	r3, [sp, #20]
 8015dc2:	9006      	str	r0, [sp, #24]
 8015dc4:	9107      	str	r1, [sp, #28]
 8015dc6:	f7ea fb59 	bl	800047c <__aeabi_dcmpgt>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d12a      	bne.n	8015e24 <_dtoa_r+0x6e4>
 8015dce:	9a04      	ldr	r2, [sp, #16]
 8015dd0:	9b05      	ldr	r3, [sp, #20]
 8015dd2:	9806      	ldr	r0, [sp, #24]
 8015dd4:	9907      	ldr	r1, [sp, #28]
 8015dd6:	f7ea fb37 	bl	8000448 <__aeabi_dcmpeq>
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d001      	beq.n	8015de2 <_dtoa_r+0x6a2>
 8015dde:	07e3      	lsls	r3, r4, #31
 8015de0:	d420      	bmi.n	8015e24 <_dtoa_r+0x6e4>
 8015de2:	9903      	ldr	r1, [sp, #12]
 8015de4:	9802      	ldr	r0, [sp, #8]
 8015de6:	f000 fe10 	bl	8016a0a <_Bfree>
 8015dea:	2300      	movs	r3, #0
 8015dec:	702b      	strb	r3, [r5, #0]
 8015dee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015df0:	3701      	adds	r7, #1
 8015df2:	601f      	str	r7, [r3, #0]
 8015df4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d100      	bne.n	8015dfc <_dtoa_r+0x6bc>
 8015dfa:	e4e6      	b.n	80157ca <_dtoa_r+0x8a>
 8015dfc:	601d      	str	r5, [r3, #0]
 8015dfe:	e4e4      	b.n	80157ca <_dtoa_r+0x8a>
 8015e00:	0801a7f8 	.word	0x0801a7f8
 8015e04:	3ff00000 	.word	0x3ff00000
 8015e08:	40240000 	.word	0x40240000
 8015e0c:	401c0000 	.word	0x401c0000
 8015e10:	fcc00000 	.word	0xfcc00000
 8015e14:	40140000 	.word	0x40140000
 8015e18:	7cc00000 	.word	0x7cc00000
 8015e1c:	0801a7d0 	.word	0x0801a7d0
 8015e20:	3fe00000 	.word	0x3fe00000
 8015e24:	003e      	movs	r6, r7
 8015e26:	1e6b      	subs	r3, r5, #1
 8015e28:	781a      	ldrb	r2, [r3, #0]
 8015e2a:	2a39      	cmp	r2, #57	; 0x39
 8015e2c:	d106      	bne.n	8015e3c <_dtoa_r+0x6fc>
 8015e2e:	9a08      	ldr	r2, [sp, #32]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d107      	bne.n	8015e44 <_dtoa_r+0x704>
 8015e34:	2330      	movs	r3, #48	; 0x30
 8015e36:	7013      	strb	r3, [r2, #0]
 8015e38:	0013      	movs	r3, r2
 8015e3a:	3601      	adds	r6, #1
 8015e3c:	781a      	ldrb	r2, [r3, #0]
 8015e3e:	3201      	adds	r2, #1
 8015e40:	701a      	strb	r2, [r3, #0]
 8015e42:	e78c      	b.n	8015d5e <_dtoa_r+0x61e>
 8015e44:	001d      	movs	r5, r3
 8015e46:	e7ee      	b.n	8015e26 <_dtoa_r+0x6e6>
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4ba4      	ldr	r3, [pc, #656]	; (80160dc <_dtoa_r+0x99c>)
 8015e4c:	f7ec f8a0 	bl	8001f90 <__aeabi_dmul>
 8015e50:	2200      	movs	r2, #0
 8015e52:	2300      	movs	r3, #0
 8015e54:	9006      	str	r0, [sp, #24]
 8015e56:	9107      	str	r1, [sp, #28]
 8015e58:	002e      	movs	r6, r5
 8015e5a:	f7ea faf5 	bl	8000448 <__aeabi_dcmpeq>
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	d08b      	beq.n	8015d7a <_dtoa_r+0x63a>
 8015e62:	e7be      	b.n	8015de2 <_dtoa_r+0x6a2>
 8015e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e66:	2a00      	cmp	r2, #0
 8015e68:	d100      	bne.n	8015e6c <_dtoa_r+0x72c>
 8015e6a:	e0da      	b.n	8016022 <_dtoa_r+0x8e2>
 8015e6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e6e:	2a01      	cmp	r2, #1
 8015e70:	dd00      	ble.n	8015e74 <_dtoa_r+0x734>
 8015e72:	e0bd      	b.n	8015ff0 <_dtoa_r+0x8b0>
 8015e74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e76:	2a00      	cmp	r2, #0
 8015e78:	d100      	bne.n	8015e7c <_dtoa_r+0x73c>
 8015e7a:	e0b5      	b.n	8015fe8 <_dtoa_r+0x8a8>
 8015e7c:	4a98      	ldr	r2, [pc, #608]	; (80160e0 <_dtoa_r+0x9a0>)
 8015e7e:	189b      	adds	r3, r3, r2
 8015e80:	9d04      	ldr	r5, [sp, #16]
 8015e82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e86:	2101      	movs	r1, #1
 8015e88:	18d2      	adds	r2, r2, r3
 8015e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8015e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e8e:	9802      	ldr	r0, [sp, #8]
 8015e90:	18d3      	adds	r3, r2, r3
 8015e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e94:	f000 fe97 	bl	8016bc6 <__i2b>
 8015e98:	0006      	movs	r6, r0
 8015e9a:	2c00      	cmp	r4, #0
 8015e9c:	dd0e      	ble.n	8015ebc <_dtoa_r+0x77c>
 8015e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	dd0b      	ble.n	8015ebc <_dtoa_r+0x77c>
 8015ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ea6:	0023      	movs	r3, r4
 8015ea8:	4294      	cmp	r4, r2
 8015eaa:	dd00      	ble.n	8015eae <_dtoa_r+0x76e>
 8015eac:	0013      	movs	r3, r2
 8015eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eb0:	1ae4      	subs	r4, r4, r3
 8015eb2:	1ad2      	subs	r2, r2, r3
 8015eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8015eb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015eb8:	1ad3      	subs	r3, r2, r3
 8015eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ebc:	9b04      	ldr	r3, [sp, #16]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d01f      	beq.n	8015f02 <_dtoa_r+0x7c2>
 8015ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d100      	bne.n	8015eca <_dtoa_r+0x78a>
 8015ec8:	e0af      	b.n	801602a <_dtoa_r+0x8ea>
 8015eca:	2d00      	cmp	r5, #0
 8015ecc:	d011      	beq.n	8015ef2 <_dtoa_r+0x7b2>
 8015ece:	0031      	movs	r1, r6
 8015ed0:	002a      	movs	r2, r5
 8015ed2:	9802      	ldr	r0, [sp, #8]
 8015ed4:	f000 ff10 	bl	8016cf8 <__pow5mult>
 8015ed8:	9a03      	ldr	r2, [sp, #12]
 8015eda:	0001      	movs	r1, r0
 8015edc:	0006      	movs	r6, r0
 8015ede:	9802      	ldr	r0, [sp, #8]
 8015ee0:	f000 fe7a 	bl	8016bd8 <__multiply>
 8015ee4:	9903      	ldr	r1, [sp, #12]
 8015ee6:	9010      	str	r0, [sp, #64]	; 0x40
 8015ee8:	9802      	ldr	r0, [sp, #8]
 8015eea:	f000 fd8e 	bl	8016a0a <_Bfree>
 8015eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ef0:	9303      	str	r3, [sp, #12]
 8015ef2:	9b04      	ldr	r3, [sp, #16]
 8015ef4:	1b5a      	subs	r2, r3, r5
 8015ef6:	d004      	beq.n	8015f02 <_dtoa_r+0x7c2>
 8015ef8:	9903      	ldr	r1, [sp, #12]
 8015efa:	9802      	ldr	r0, [sp, #8]
 8015efc:	f000 fefc 	bl	8016cf8 <__pow5mult>
 8015f00:	9003      	str	r0, [sp, #12]
 8015f02:	2101      	movs	r1, #1
 8015f04:	9802      	ldr	r0, [sp, #8]
 8015f06:	f000 fe5e 	bl	8016bc6 <__i2b>
 8015f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f0c:	9004      	str	r0, [sp, #16]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d100      	bne.n	8015f14 <_dtoa_r+0x7d4>
 8015f12:	e1e3      	b.n	80162dc <_dtoa_r+0xb9c>
 8015f14:	001a      	movs	r2, r3
 8015f16:	0001      	movs	r1, r0
 8015f18:	9802      	ldr	r0, [sp, #8]
 8015f1a:	f000 feed 	bl	8016cf8 <__pow5mult>
 8015f1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f20:	9004      	str	r0, [sp, #16]
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	dd00      	ble.n	8015f28 <_dtoa_r+0x7e8>
 8015f26:	e082      	b.n	801602e <_dtoa_r+0x8ee>
 8015f28:	2500      	movs	r5, #0
 8015f2a:	9b06      	ldr	r3, [sp, #24]
 8015f2c:	42ab      	cmp	r3, r5
 8015f2e:	d10e      	bne.n	8015f4e <_dtoa_r+0x80e>
 8015f30:	9b07      	ldr	r3, [sp, #28]
 8015f32:	031b      	lsls	r3, r3, #12
 8015f34:	42ab      	cmp	r3, r5
 8015f36:	d10a      	bne.n	8015f4e <_dtoa_r+0x80e>
 8015f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f3a:	9a07      	ldr	r2, [sp, #28]
 8015f3c:	4213      	tst	r3, r2
 8015f3e:	d006      	beq.n	8015f4e <_dtoa_r+0x80e>
 8015f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f42:	3501      	adds	r5, #1
 8015f44:	3301      	adds	r3, #1
 8015f46:	930a      	str	r3, [sp, #40]	; 0x28
 8015f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f50:	2001      	movs	r0, #1
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d16c      	bne.n	8016030 <_dtoa_r+0x8f0>
 8015f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f58:	1818      	adds	r0, r3, r0
 8015f5a:	231f      	movs	r3, #31
 8015f5c:	4018      	ands	r0, r3
 8015f5e:	d07e      	beq.n	801605e <_dtoa_r+0x91e>
 8015f60:	3301      	adds	r3, #1
 8015f62:	1a1b      	subs	r3, r3, r0
 8015f64:	2b04      	cmp	r3, #4
 8015f66:	dd70      	ble.n	801604a <_dtoa_r+0x90a>
 8015f68:	231c      	movs	r3, #28
 8015f6a:	1a18      	subs	r0, r3, r0
 8015f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f6e:	1824      	adds	r4, r4, r0
 8015f70:	181b      	adds	r3, r3, r0
 8015f72:	930a      	str	r3, [sp, #40]	; 0x28
 8015f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f76:	181b      	adds	r3, r3, r0
 8015f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	dd05      	ble.n	8015f8c <_dtoa_r+0x84c>
 8015f80:	001a      	movs	r2, r3
 8015f82:	9903      	ldr	r1, [sp, #12]
 8015f84:	9802      	ldr	r0, [sp, #8]
 8015f86:	f000 ff09 	bl	8016d9c <__lshift>
 8015f8a:	9003      	str	r0, [sp, #12]
 8015f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	dd05      	ble.n	8015f9e <_dtoa_r+0x85e>
 8015f92:	001a      	movs	r2, r3
 8015f94:	9904      	ldr	r1, [sp, #16]
 8015f96:	9802      	ldr	r0, [sp, #8]
 8015f98:	f000 ff00 	bl	8016d9c <__lshift>
 8015f9c:	9004      	str	r0, [sp, #16]
 8015f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d05e      	beq.n	8016062 <_dtoa_r+0x922>
 8015fa4:	9904      	ldr	r1, [sp, #16]
 8015fa6:	9803      	ldr	r0, [sp, #12]
 8015fa8:	f000 ff4a 	bl	8016e40 <__mcmp>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	da58      	bge.n	8016062 <_dtoa_r+0x922>
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	220a      	movs	r2, #10
 8015fb4:	9903      	ldr	r1, [sp, #12]
 8015fb6:	9802      	ldr	r0, [sp, #8]
 8015fb8:	f000 fd40 	bl	8016a3c <__multadd>
 8015fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fbe:	3f01      	subs	r7, #1
 8015fc0:	9003      	str	r0, [sp, #12]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d100      	bne.n	8015fc8 <_dtoa_r+0x888>
 8015fc6:	e190      	b.n	80162ea <_dtoa_r+0xbaa>
 8015fc8:	2300      	movs	r3, #0
 8015fca:	0031      	movs	r1, r6
 8015fcc:	220a      	movs	r2, #10
 8015fce:	9802      	ldr	r0, [sp, #8]
 8015fd0:	f000 fd34 	bl	8016a3c <__multadd>
 8015fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fd6:	0006      	movs	r6, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	dd00      	ble.n	8015fde <_dtoa_r+0x89e>
 8015fdc:	e088      	b.n	80160f0 <_dtoa_r+0x9b0>
 8015fde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015fe0:	2b02      	cmp	r3, #2
 8015fe2:	dc00      	bgt.n	8015fe6 <_dtoa_r+0x8a6>
 8015fe4:	e084      	b.n	80160f0 <_dtoa_r+0x9b0>
 8015fe6:	e044      	b.n	8016072 <_dtoa_r+0x932>
 8015fe8:	2336      	movs	r3, #54	; 0x36
 8015fea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015fec:	1a9b      	subs	r3, r3, r2
 8015fee:	e747      	b.n	8015e80 <_dtoa_r+0x740>
 8015ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff2:	1e5d      	subs	r5, r3, #1
 8015ff4:	9b04      	ldr	r3, [sp, #16]
 8015ff6:	42ab      	cmp	r3, r5
 8015ff8:	db08      	blt.n	801600c <_dtoa_r+0x8cc>
 8015ffa:	1b5d      	subs	r5, r3, r5
 8015ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	da0c      	bge.n	801601c <_dtoa_r+0x8dc>
 8016002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016006:	1a9c      	subs	r4, r3, r2
 8016008:	2300      	movs	r3, #0
 801600a:	e73b      	b.n	8015e84 <_dtoa_r+0x744>
 801600c:	9b04      	ldr	r3, [sp, #16]
 801600e:	9504      	str	r5, [sp, #16]
 8016010:	1aea      	subs	r2, r5, r3
 8016012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016014:	2500      	movs	r5, #0
 8016016:	189b      	adds	r3, r3, r2
 8016018:	9311      	str	r3, [sp, #68]	; 0x44
 801601a:	e7ef      	b.n	8015ffc <_dtoa_r+0x8bc>
 801601c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016020:	e730      	b.n	8015e84 <_dtoa_r+0x744>
 8016022:	9d04      	ldr	r5, [sp, #16]
 8016024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016026:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016028:	e737      	b.n	8015e9a <_dtoa_r+0x75a>
 801602a:	9a04      	ldr	r2, [sp, #16]
 801602c:	e764      	b.n	8015ef8 <_dtoa_r+0x7b8>
 801602e:	2500      	movs	r5, #0
 8016030:	9b04      	ldr	r3, [sp, #16]
 8016032:	9a04      	ldr	r2, [sp, #16]
 8016034:	691b      	ldr	r3, [r3, #16]
 8016036:	9310      	str	r3, [sp, #64]	; 0x40
 8016038:	3303      	adds	r3, #3
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	18d3      	adds	r3, r2, r3
 801603e:	6858      	ldr	r0, [r3, #4]
 8016040:	f000 fd78 	bl	8016b34 <__hi0bits>
 8016044:	2320      	movs	r3, #32
 8016046:	1a18      	subs	r0, r3, r0
 8016048:	e785      	b.n	8015f56 <_dtoa_r+0x816>
 801604a:	2b04      	cmp	r3, #4
 801604c:	d095      	beq.n	8015f7a <_dtoa_r+0x83a>
 801604e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016050:	331c      	adds	r3, #28
 8016052:	18d2      	adds	r2, r2, r3
 8016054:	920a      	str	r2, [sp, #40]	; 0x28
 8016056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016058:	18e4      	adds	r4, r4, r3
 801605a:	18d3      	adds	r3, r2, r3
 801605c:	e78c      	b.n	8015f78 <_dtoa_r+0x838>
 801605e:	0003      	movs	r3, r0
 8016060:	e7f5      	b.n	801604e <_dtoa_r+0x90e>
 8016062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016064:	2b00      	cmp	r3, #0
 8016066:	dc3d      	bgt.n	80160e4 <_dtoa_r+0x9a4>
 8016068:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801606a:	2b02      	cmp	r3, #2
 801606c:	dd3a      	ble.n	80160e4 <_dtoa_r+0x9a4>
 801606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016070:	930c      	str	r3, [sp, #48]	; 0x30
 8016072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016074:	2b00      	cmp	r3, #0
 8016076:	d10c      	bne.n	8016092 <_dtoa_r+0x952>
 8016078:	9904      	ldr	r1, [sp, #16]
 801607a:	2205      	movs	r2, #5
 801607c:	9802      	ldr	r0, [sp, #8]
 801607e:	f000 fcdd 	bl	8016a3c <__multadd>
 8016082:	9004      	str	r0, [sp, #16]
 8016084:	0001      	movs	r1, r0
 8016086:	9803      	ldr	r0, [sp, #12]
 8016088:	f000 feda 	bl	8016e40 <__mcmp>
 801608c:	2800      	cmp	r0, #0
 801608e:	dd00      	ble.n	8016092 <_dtoa_r+0x952>
 8016090:	e5af      	b.n	8015bf2 <_dtoa_r+0x4b2>
 8016092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016094:	9d08      	ldr	r5, [sp, #32]
 8016096:	43df      	mvns	r7, r3
 8016098:	2300      	movs	r3, #0
 801609a:	9309      	str	r3, [sp, #36]	; 0x24
 801609c:	9904      	ldr	r1, [sp, #16]
 801609e:	9802      	ldr	r0, [sp, #8]
 80160a0:	f000 fcb3 	bl	8016a0a <_Bfree>
 80160a4:	2e00      	cmp	r6, #0
 80160a6:	d100      	bne.n	80160aa <_dtoa_r+0x96a>
 80160a8:	e69b      	b.n	8015de2 <_dtoa_r+0x6a2>
 80160aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d005      	beq.n	80160bc <_dtoa_r+0x97c>
 80160b0:	42b3      	cmp	r3, r6
 80160b2:	d003      	beq.n	80160bc <_dtoa_r+0x97c>
 80160b4:	0019      	movs	r1, r3
 80160b6:	9802      	ldr	r0, [sp, #8]
 80160b8:	f000 fca7 	bl	8016a0a <_Bfree>
 80160bc:	0031      	movs	r1, r6
 80160be:	9802      	ldr	r0, [sp, #8]
 80160c0:	f000 fca3 	bl	8016a0a <_Bfree>
 80160c4:	e68d      	b.n	8015de2 <_dtoa_r+0x6a2>
 80160c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160c8:	9304      	str	r3, [sp, #16]
 80160ca:	001e      	movs	r6, r3
 80160cc:	e7e1      	b.n	8016092 <_dtoa_r+0x952>
 80160ce:	2300      	movs	r3, #0
 80160d0:	e7fa      	b.n	80160c8 <_dtoa_r+0x988>
 80160d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160d4:	0037      	movs	r7, r6
 80160d6:	9304      	str	r3, [sp, #16]
 80160d8:	001e      	movs	r6, r3
 80160da:	e58a      	b.n	8015bf2 <_dtoa_r+0x4b2>
 80160dc:	40240000 	.word	0x40240000
 80160e0:	00000433 	.word	0x00000433
 80160e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d100      	bne.n	80160ec <_dtoa_r+0x9ac>
 80160ea:	e0b2      	b.n	8016252 <_dtoa_r+0xb12>
 80160ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ee:	930c      	str	r3, [sp, #48]	; 0x30
 80160f0:	2c00      	cmp	r4, #0
 80160f2:	dd05      	ble.n	8016100 <_dtoa_r+0x9c0>
 80160f4:	0031      	movs	r1, r6
 80160f6:	0022      	movs	r2, r4
 80160f8:	9802      	ldr	r0, [sp, #8]
 80160fa:	f000 fe4f 	bl	8016d9c <__lshift>
 80160fe:	0006      	movs	r6, r0
 8016100:	0030      	movs	r0, r6
 8016102:	2d00      	cmp	r5, #0
 8016104:	d011      	beq.n	801612a <_dtoa_r+0x9ea>
 8016106:	6871      	ldr	r1, [r6, #4]
 8016108:	9802      	ldr	r0, [sp, #8]
 801610a:	f000 fc46 	bl	801699a <_Balloc>
 801610e:	0031      	movs	r1, r6
 8016110:	0004      	movs	r4, r0
 8016112:	6933      	ldr	r3, [r6, #16]
 8016114:	310c      	adds	r1, #12
 8016116:	1c9a      	adds	r2, r3, #2
 8016118:	0092      	lsls	r2, r2, #2
 801611a:	300c      	adds	r0, #12
 801611c:	f7fd fd3f 	bl	8013b9e <memcpy>
 8016120:	2201      	movs	r2, #1
 8016122:	0021      	movs	r1, r4
 8016124:	9802      	ldr	r0, [sp, #8]
 8016126:	f000 fe39 	bl	8016d9c <__lshift>
 801612a:	9609      	str	r6, [sp, #36]	; 0x24
 801612c:	0006      	movs	r6, r0
 801612e:	9b08      	ldr	r3, [sp, #32]
 8016130:	930a      	str	r3, [sp, #40]	; 0x28
 8016132:	9904      	ldr	r1, [sp, #16]
 8016134:	9803      	ldr	r0, [sp, #12]
 8016136:	f7ff fa7d 	bl	8015634 <quorem>
 801613a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801613c:	900d      	str	r0, [sp, #52]	; 0x34
 801613e:	0004      	movs	r4, r0
 8016140:	9803      	ldr	r0, [sp, #12]
 8016142:	f000 fe7d 	bl	8016e40 <__mcmp>
 8016146:	0032      	movs	r2, r6
 8016148:	9010      	str	r0, [sp, #64]	; 0x40
 801614a:	9904      	ldr	r1, [sp, #16]
 801614c:	9802      	ldr	r0, [sp, #8]
 801614e:	f000 fe91 	bl	8016e74 <__mdiff>
 8016152:	2301      	movs	r3, #1
 8016154:	930b      	str	r3, [sp, #44]	; 0x2c
 8016156:	68c3      	ldr	r3, [r0, #12]
 8016158:	3430      	adds	r4, #48	; 0x30
 801615a:	0005      	movs	r5, r0
 801615c:	2b00      	cmp	r3, #0
 801615e:	d104      	bne.n	801616a <_dtoa_r+0xa2a>
 8016160:	0001      	movs	r1, r0
 8016162:	9803      	ldr	r0, [sp, #12]
 8016164:	f000 fe6c 	bl	8016e40 <__mcmp>
 8016168:	900b      	str	r0, [sp, #44]	; 0x2c
 801616a:	0029      	movs	r1, r5
 801616c:	9802      	ldr	r0, [sp, #8]
 801616e:	f000 fc4c 	bl	8016a0a <_Bfree>
 8016172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016174:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016176:	4313      	orrs	r3, r2
 8016178:	d10e      	bne.n	8016198 <_dtoa_r+0xa58>
 801617a:	9a06      	ldr	r2, [sp, #24]
 801617c:	3301      	adds	r3, #1
 801617e:	4213      	tst	r3, r2
 8016180:	d10a      	bne.n	8016198 <_dtoa_r+0xa58>
 8016182:	2c39      	cmp	r4, #57	; 0x39
 8016184:	d026      	beq.n	80161d4 <_dtoa_r+0xa94>
 8016186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016188:	2b00      	cmp	r3, #0
 801618a:	dd01      	ble.n	8016190 <_dtoa_r+0xa50>
 801618c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801618e:	3431      	adds	r4, #49	; 0x31
 8016190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016192:	1c5d      	adds	r5, r3, #1
 8016194:	701c      	strb	r4, [r3, #0]
 8016196:	e781      	b.n	801609c <_dtoa_r+0x95c>
 8016198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801619a:	2b00      	cmp	r3, #0
 801619c:	db07      	blt.n	80161ae <_dtoa_r+0xa6e>
 801619e:	001d      	movs	r5, r3
 80161a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161a2:	431d      	orrs	r5, r3
 80161a4:	d122      	bne.n	80161ec <_dtoa_r+0xaac>
 80161a6:	2301      	movs	r3, #1
 80161a8:	9a06      	ldr	r2, [sp, #24]
 80161aa:	4213      	tst	r3, r2
 80161ac:	d11e      	bne.n	80161ec <_dtoa_r+0xaac>
 80161ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	dded      	ble.n	8016190 <_dtoa_r+0xa50>
 80161b4:	9903      	ldr	r1, [sp, #12]
 80161b6:	2201      	movs	r2, #1
 80161b8:	9802      	ldr	r0, [sp, #8]
 80161ba:	f000 fdef 	bl	8016d9c <__lshift>
 80161be:	9904      	ldr	r1, [sp, #16]
 80161c0:	9003      	str	r0, [sp, #12]
 80161c2:	f000 fe3d 	bl	8016e40 <__mcmp>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	dc02      	bgt.n	80161d0 <_dtoa_r+0xa90>
 80161ca:	d1e1      	bne.n	8016190 <_dtoa_r+0xa50>
 80161cc:	07e3      	lsls	r3, r4, #31
 80161ce:	d5df      	bpl.n	8016190 <_dtoa_r+0xa50>
 80161d0:	2c39      	cmp	r4, #57	; 0x39
 80161d2:	d1db      	bne.n	801618c <_dtoa_r+0xa4c>
 80161d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161d8:	1c5d      	adds	r5, r3, #1
 80161da:	2339      	movs	r3, #57	; 0x39
 80161dc:	7013      	strb	r3, [r2, #0]
 80161de:	1e6b      	subs	r3, r5, #1
 80161e0:	781a      	ldrb	r2, [r3, #0]
 80161e2:	2a39      	cmp	r2, #57	; 0x39
 80161e4:	d067      	beq.n	80162b6 <_dtoa_r+0xb76>
 80161e6:	3201      	adds	r2, #1
 80161e8:	701a      	strb	r2, [r3, #0]
 80161ea:	e757      	b.n	801609c <_dtoa_r+0x95c>
 80161ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ee:	1c5d      	adds	r5, r3, #1
 80161f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	dd04      	ble.n	8016200 <_dtoa_r+0xac0>
 80161f6:	2c39      	cmp	r4, #57	; 0x39
 80161f8:	d0ec      	beq.n	80161d4 <_dtoa_r+0xa94>
 80161fa:	3401      	adds	r4, #1
 80161fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161fe:	e7c9      	b.n	8016194 <_dtoa_r+0xa54>
 8016200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016204:	701c      	strb	r4, [r3, #0]
 8016206:	9b08      	ldr	r3, [sp, #32]
 8016208:	1aeb      	subs	r3, r5, r3
 801620a:	4293      	cmp	r3, r2
 801620c:	d03e      	beq.n	801628c <_dtoa_r+0xb4c>
 801620e:	2300      	movs	r3, #0
 8016210:	220a      	movs	r2, #10
 8016212:	9903      	ldr	r1, [sp, #12]
 8016214:	9802      	ldr	r0, [sp, #8]
 8016216:	f000 fc11 	bl	8016a3c <__multadd>
 801621a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801621c:	9003      	str	r0, [sp, #12]
 801621e:	42b3      	cmp	r3, r6
 8016220:	d109      	bne.n	8016236 <_dtoa_r+0xaf6>
 8016222:	2300      	movs	r3, #0
 8016224:	220a      	movs	r2, #10
 8016226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016228:	9802      	ldr	r0, [sp, #8]
 801622a:	f000 fc07 	bl	8016a3c <__multadd>
 801622e:	9009      	str	r0, [sp, #36]	; 0x24
 8016230:	0006      	movs	r6, r0
 8016232:	950a      	str	r5, [sp, #40]	; 0x28
 8016234:	e77d      	b.n	8016132 <_dtoa_r+0x9f2>
 8016236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016238:	2300      	movs	r3, #0
 801623a:	220a      	movs	r2, #10
 801623c:	9802      	ldr	r0, [sp, #8]
 801623e:	f000 fbfd 	bl	8016a3c <__multadd>
 8016242:	2300      	movs	r3, #0
 8016244:	9009      	str	r0, [sp, #36]	; 0x24
 8016246:	220a      	movs	r2, #10
 8016248:	0031      	movs	r1, r6
 801624a:	9802      	ldr	r0, [sp, #8]
 801624c:	f000 fbf6 	bl	8016a3c <__multadd>
 8016250:	e7ee      	b.n	8016230 <_dtoa_r+0xaf0>
 8016252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016254:	930c      	str	r3, [sp, #48]	; 0x30
 8016256:	9b08      	ldr	r3, [sp, #32]
 8016258:	9306      	str	r3, [sp, #24]
 801625a:	9904      	ldr	r1, [sp, #16]
 801625c:	9803      	ldr	r0, [sp, #12]
 801625e:	f7ff f9e9 	bl	8015634 <quorem>
 8016262:	9b06      	ldr	r3, [sp, #24]
 8016264:	3030      	adds	r0, #48	; 0x30
 8016266:	1c5d      	adds	r5, r3, #1
 8016268:	7018      	strb	r0, [r3, #0]
 801626a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801626c:	9b08      	ldr	r3, [sp, #32]
 801626e:	0004      	movs	r4, r0
 8016270:	1aeb      	subs	r3, r5, r3
 8016272:	429a      	cmp	r2, r3
 8016274:	dd08      	ble.n	8016288 <_dtoa_r+0xb48>
 8016276:	2300      	movs	r3, #0
 8016278:	220a      	movs	r2, #10
 801627a:	9903      	ldr	r1, [sp, #12]
 801627c:	9802      	ldr	r0, [sp, #8]
 801627e:	f000 fbdd 	bl	8016a3c <__multadd>
 8016282:	9506      	str	r5, [sp, #24]
 8016284:	9003      	str	r0, [sp, #12]
 8016286:	e7e8      	b.n	801625a <_dtoa_r+0xb1a>
 8016288:	2300      	movs	r3, #0
 801628a:	9309      	str	r3, [sp, #36]	; 0x24
 801628c:	9903      	ldr	r1, [sp, #12]
 801628e:	2201      	movs	r2, #1
 8016290:	9802      	ldr	r0, [sp, #8]
 8016292:	f000 fd83 	bl	8016d9c <__lshift>
 8016296:	9904      	ldr	r1, [sp, #16]
 8016298:	9003      	str	r0, [sp, #12]
 801629a:	f000 fdd1 	bl	8016e40 <__mcmp>
 801629e:	2800      	cmp	r0, #0
 80162a0:	dc9d      	bgt.n	80161de <_dtoa_r+0xa9e>
 80162a2:	d101      	bne.n	80162a8 <_dtoa_r+0xb68>
 80162a4:	07e3      	lsls	r3, r4, #31
 80162a6:	d49a      	bmi.n	80161de <_dtoa_r+0xa9e>
 80162a8:	1e6b      	subs	r3, r5, #1
 80162aa:	781a      	ldrb	r2, [r3, #0]
 80162ac:	2a30      	cmp	r2, #48	; 0x30
 80162ae:	d000      	beq.n	80162b2 <_dtoa_r+0xb72>
 80162b0:	e6f4      	b.n	801609c <_dtoa_r+0x95c>
 80162b2:	001d      	movs	r5, r3
 80162b4:	e7f8      	b.n	80162a8 <_dtoa_r+0xb68>
 80162b6:	9a08      	ldr	r2, [sp, #32]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d103      	bne.n	80162c4 <_dtoa_r+0xb84>
 80162bc:	2331      	movs	r3, #49	; 0x31
 80162be:	3701      	adds	r7, #1
 80162c0:	7013      	strb	r3, [r2, #0]
 80162c2:	e6eb      	b.n	801609c <_dtoa_r+0x95c>
 80162c4:	001d      	movs	r5, r3
 80162c6:	e78a      	b.n	80161de <_dtoa_r+0xa9e>
 80162c8:	4b0b      	ldr	r3, [pc, #44]	; (80162f8 <_dtoa_r+0xbb8>)
 80162ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80162cc:	9308      	str	r3, [sp, #32]
 80162ce:	4b0b      	ldr	r3, [pc, #44]	; (80162fc <_dtoa_r+0xbbc>)
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	d001      	beq.n	80162d8 <_dtoa_r+0xb98>
 80162d4:	f7ff fa77 	bl	80157c6 <_dtoa_r+0x86>
 80162d8:	f7ff fa77 	bl	80157ca <_dtoa_r+0x8a>
 80162dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162de:	2b01      	cmp	r3, #1
 80162e0:	dc00      	bgt.n	80162e4 <_dtoa_r+0xba4>
 80162e2:	e621      	b.n	8015f28 <_dtoa_r+0x7e8>
 80162e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80162e6:	2001      	movs	r0, #1
 80162e8:	e635      	b.n	8015f56 <_dtoa_r+0x816>
 80162ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	dcb2      	bgt.n	8016256 <_dtoa_r+0xb16>
 80162f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	ddaf      	ble.n	8016256 <_dtoa_r+0xb16>
 80162f6:	e6bc      	b.n	8016072 <_dtoa_r+0x932>
 80162f8:	0801a7c1 	.word	0x0801a7c1
 80162fc:	0801a7c9 	.word	0x0801a7c9

08016300 <rshift>:
 8016300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016302:	0004      	movs	r4, r0
 8016304:	6905      	ldr	r5, [r0, #16]
 8016306:	3414      	adds	r4, #20
 8016308:	114b      	asrs	r3, r1, #5
 801630a:	0026      	movs	r6, r4
 801630c:	429d      	cmp	r5, r3
 801630e:	dd14      	ble.n	801633a <rshift+0x3a>
 8016310:	221f      	movs	r2, #31
 8016312:	00ad      	lsls	r5, r5, #2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	4011      	ands	r1, r2
 8016318:	1965      	adds	r5, r4, r5
 801631a:	18e3      	adds	r3, r4, r3
 801631c:	0022      	movs	r2, r4
 801631e:	2900      	cmp	r1, #0
 8016320:	d01e      	beq.n	8016360 <rshift+0x60>
 8016322:	cb04      	ldmia	r3!, {r2}
 8016324:	2720      	movs	r7, #32
 8016326:	40ca      	lsrs	r2, r1
 8016328:	46a4      	mov	ip, r4
 801632a:	1a7f      	subs	r7, r7, r1
 801632c:	4666      	mov	r6, ip
 801632e:	429d      	cmp	r5, r3
 8016330:	d80b      	bhi.n	801634a <rshift+0x4a>
 8016332:	6032      	str	r2, [r6, #0]
 8016334:	2a00      	cmp	r2, #0
 8016336:	d000      	beq.n	801633a <rshift+0x3a>
 8016338:	3604      	adds	r6, #4
 801633a:	1b33      	subs	r3, r6, r4
 801633c:	109b      	asrs	r3, r3, #2
 801633e:	6103      	str	r3, [r0, #16]
 8016340:	42a6      	cmp	r6, r4
 8016342:	d101      	bne.n	8016348 <rshift+0x48>
 8016344:	2300      	movs	r3, #0
 8016346:	6143      	str	r3, [r0, #20]
 8016348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801634a:	681e      	ldr	r6, [r3, #0]
 801634c:	40be      	lsls	r6, r7
 801634e:	4332      	orrs	r2, r6
 8016350:	4666      	mov	r6, ip
 8016352:	c604      	stmia	r6!, {r2}
 8016354:	cb04      	ldmia	r3!, {r2}
 8016356:	46b4      	mov	ip, r6
 8016358:	40ca      	lsrs	r2, r1
 801635a:	e7e7      	b.n	801632c <rshift+0x2c>
 801635c:	cb02      	ldmia	r3!, {r1}
 801635e:	c202      	stmia	r2!, {r1}
 8016360:	0016      	movs	r6, r2
 8016362:	429d      	cmp	r5, r3
 8016364:	d8fa      	bhi.n	801635c <rshift+0x5c>
 8016366:	e7e8      	b.n	801633a <rshift+0x3a>

08016368 <__hexdig_fun>:
 8016368:	0003      	movs	r3, r0
 801636a:	3b30      	subs	r3, #48	; 0x30
 801636c:	2b09      	cmp	r3, #9
 801636e:	d803      	bhi.n	8016378 <__hexdig_fun+0x10>
 8016370:	3820      	subs	r0, #32
 8016372:	b2c3      	uxtb	r3, r0
 8016374:	0018      	movs	r0, r3
 8016376:	4770      	bx	lr
 8016378:	0003      	movs	r3, r0
 801637a:	3b61      	subs	r3, #97	; 0x61
 801637c:	2b05      	cmp	r3, #5
 801637e:	d801      	bhi.n	8016384 <__hexdig_fun+0x1c>
 8016380:	3847      	subs	r0, #71	; 0x47
 8016382:	e7f6      	b.n	8016372 <__hexdig_fun+0xa>
 8016384:	0002      	movs	r2, r0
 8016386:	3a41      	subs	r2, #65	; 0x41
 8016388:	2300      	movs	r3, #0
 801638a:	2a05      	cmp	r2, #5
 801638c:	d8f2      	bhi.n	8016374 <__hexdig_fun+0xc>
 801638e:	3827      	subs	r0, #39	; 0x27
 8016390:	e7ef      	b.n	8016372 <__hexdig_fun+0xa>

08016392 <__gethex>:
 8016392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016394:	b08d      	sub	sp, #52	; 0x34
 8016396:	9005      	str	r0, [sp, #20]
 8016398:	9814      	ldr	r0, [sp, #80]	; 0x50
 801639a:	9109      	str	r1, [sp, #36]	; 0x24
 801639c:	9202      	str	r2, [sp, #8]
 801639e:	930a      	str	r3, [sp, #40]	; 0x28
 80163a0:	f000 fadf 	bl	8016962 <__localeconv_l>
 80163a4:	6803      	ldr	r3, [r0, #0]
 80163a6:	0018      	movs	r0, r3
 80163a8:	9307      	str	r3, [sp, #28]
 80163aa:	f7e9 feb5 	bl	8000118 <strlen>
 80163ae:	2202      	movs	r2, #2
 80163b0:	9b07      	ldr	r3, [sp, #28]
 80163b2:	4252      	negs	r2, r2
 80163b4:	181b      	adds	r3, r3, r0
 80163b6:	3b01      	subs	r3, #1
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	9004      	str	r0, [sp, #16]
 80163bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80163be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c0:	6819      	ldr	r1, [r3, #0]
 80163c2:	1c8b      	adds	r3, r1, #2
 80163c4:	1a52      	subs	r2, r2, r1
 80163c6:	18d1      	adds	r1, r2, r3
 80163c8:	9301      	str	r3, [sp, #4]
 80163ca:	9108      	str	r1, [sp, #32]
 80163cc:	9901      	ldr	r1, [sp, #4]
 80163ce:	3301      	adds	r3, #1
 80163d0:	7808      	ldrb	r0, [r1, #0]
 80163d2:	2830      	cmp	r0, #48	; 0x30
 80163d4:	d0f7      	beq.n	80163c6 <__gethex+0x34>
 80163d6:	f7ff ffc7 	bl	8016368 <__hexdig_fun>
 80163da:	1e07      	subs	r7, r0, #0
 80163dc:	d000      	beq.n	80163e0 <__gethex+0x4e>
 80163de:	e06f      	b.n	80164c0 <__gethex+0x12e>
 80163e0:	9a04      	ldr	r2, [sp, #16]
 80163e2:	9907      	ldr	r1, [sp, #28]
 80163e4:	9801      	ldr	r0, [sp, #4]
 80163e6:	f7fe f9b5 	bl	8014754 <strncmp>
 80163ea:	2800      	cmp	r0, #0
 80163ec:	d000      	beq.n	80163f0 <__gethex+0x5e>
 80163ee:	e06d      	b.n	80164cc <__gethex+0x13a>
 80163f0:	9b01      	ldr	r3, [sp, #4]
 80163f2:	9a04      	ldr	r2, [sp, #16]
 80163f4:	189c      	adds	r4, r3, r2
 80163f6:	7820      	ldrb	r0, [r4, #0]
 80163f8:	f7ff ffb6 	bl	8016368 <__hexdig_fun>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	d069      	beq.n	80164d4 <__gethex+0x142>
 8016400:	9401      	str	r4, [sp, #4]
 8016402:	9b01      	ldr	r3, [sp, #4]
 8016404:	7818      	ldrb	r0, [r3, #0]
 8016406:	2830      	cmp	r0, #48	; 0x30
 8016408:	d009      	beq.n	801641e <__gethex+0x8c>
 801640a:	f7ff ffad 	bl	8016368 <__hexdig_fun>
 801640e:	4243      	negs	r3, r0
 8016410:	4143      	adcs	r3, r0
 8016412:	9303      	str	r3, [sp, #12]
 8016414:	2301      	movs	r3, #1
 8016416:	0026      	movs	r6, r4
 8016418:	9308      	str	r3, [sp, #32]
 801641a:	9c01      	ldr	r4, [sp, #4]
 801641c:	e004      	b.n	8016428 <__gethex+0x96>
 801641e:	9b01      	ldr	r3, [sp, #4]
 8016420:	3301      	adds	r3, #1
 8016422:	9301      	str	r3, [sp, #4]
 8016424:	e7ed      	b.n	8016402 <__gethex+0x70>
 8016426:	3401      	adds	r4, #1
 8016428:	7820      	ldrb	r0, [r4, #0]
 801642a:	f7ff ff9d 	bl	8016368 <__hexdig_fun>
 801642e:	2800      	cmp	r0, #0
 8016430:	d1f9      	bne.n	8016426 <__gethex+0x94>
 8016432:	9a04      	ldr	r2, [sp, #16]
 8016434:	9907      	ldr	r1, [sp, #28]
 8016436:	0020      	movs	r0, r4
 8016438:	f7fe f98c 	bl	8014754 <strncmp>
 801643c:	2800      	cmp	r0, #0
 801643e:	d109      	bne.n	8016454 <__gethex+0xc2>
 8016440:	2e00      	cmp	r6, #0
 8016442:	d10a      	bne.n	801645a <__gethex+0xc8>
 8016444:	9b04      	ldr	r3, [sp, #16]
 8016446:	18e4      	adds	r4, r4, r3
 8016448:	0026      	movs	r6, r4
 801644a:	7820      	ldrb	r0, [r4, #0]
 801644c:	f7ff ff8c 	bl	8016368 <__hexdig_fun>
 8016450:	2800      	cmp	r0, #0
 8016452:	d139      	bne.n	80164c8 <__gethex+0x136>
 8016454:	2700      	movs	r7, #0
 8016456:	42be      	cmp	r6, r7
 8016458:	d001      	beq.n	801645e <__gethex+0xcc>
 801645a:	1b37      	subs	r7, r6, r4
 801645c:	00bf      	lsls	r7, r7, #2
 801645e:	7823      	ldrb	r3, [r4, #0]
 8016460:	2b50      	cmp	r3, #80	; 0x50
 8016462:	d001      	beq.n	8016468 <__gethex+0xd6>
 8016464:	2b70      	cmp	r3, #112	; 0x70
 8016466:	d142      	bne.n	80164ee <__gethex+0x15c>
 8016468:	7863      	ldrb	r3, [r4, #1]
 801646a:	2b2b      	cmp	r3, #43	; 0x2b
 801646c:	d034      	beq.n	80164d8 <__gethex+0x146>
 801646e:	2b2d      	cmp	r3, #45	; 0x2d
 8016470:	d036      	beq.n	80164e0 <__gethex+0x14e>
 8016472:	2300      	movs	r3, #0
 8016474:	1c66      	adds	r6, r4, #1
 8016476:	9306      	str	r3, [sp, #24]
 8016478:	7830      	ldrb	r0, [r6, #0]
 801647a:	f7ff ff75 	bl	8016368 <__hexdig_fun>
 801647e:	1e43      	subs	r3, r0, #1
 8016480:	b2db      	uxtb	r3, r3
 8016482:	2b18      	cmp	r3, #24
 8016484:	d833      	bhi.n	80164ee <__gethex+0x15c>
 8016486:	3810      	subs	r0, #16
 8016488:	0005      	movs	r5, r0
 801648a:	3601      	adds	r6, #1
 801648c:	7830      	ldrb	r0, [r6, #0]
 801648e:	f7ff ff6b 	bl	8016368 <__hexdig_fun>
 8016492:	1e43      	subs	r3, r0, #1
 8016494:	b2db      	uxtb	r3, r3
 8016496:	2b18      	cmp	r3, #24
 8016498:	d924      	bls.n	80164e4 <__gethex+0x152>
 801649a:	9b06      	ldr	r3, [sp, #24]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d000      	beq.n	80164a2 <__gethex+0x110>
 80164a0:	426d      	negs	r5, r5
 80164a2:	197f      	adds	r7, r7, r5
 80164a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a6:	601e      	str	r6, [r3, #0]
 80164a8:	9b03      	ldr	r3, [sp, #12]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d021      	beq.n	80164f2 <__gethex+0x160>
 80164ae:	9b08      	ldr	r3, [sp, #32]
 80164b0:	2606      	movs	r6, #6
 80164b2:	425a      	negs	r2, r3
 80164b4:	4153      	adcs	r3, r2
 80164b6:	425b      	negs	r3, r3
 80164b8:	401e      	ands	r6, r3
 80164ba:	0030      	movs	r0, r6
 80164bc:	b00d      	add	sp, #52	; 0x34
 80164be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164c0:	2300      	movs	r3, #0
 80164c2:	9303      	str	r3, [sp, #12]
 80164c4:	001e      	movs	r6, r3
 80164c6:	e7a8      	b.n	801641a <__gethex+0x88>
 80164c8:	3401      	adds	r4, #1
 80164ca:	e7be      	b.n	801644a <__gethex+0xb8>
 80164cc:	9c01      	ldr	r4, [sp, #4]
 80164ce:	2301      	movs	r3, #1
 80164d0:	9303      	str	r3, [sp, #12]
 80164d2:	e7c4      	b.n	801645e <__gethex+0xcc>
 80164d4:	0007      	movs	r7, r0
 80164d6:	e7fa      	b.n	80164ce <__gethex+0x13c>
 80164d8:	2300      	movs	r3, #0
 80164da:	9306      	str	r3, [sp, #24]
 80164dc:	1ca6      	adds	r6, r4, #2
 80164de:	e7cb      	b.n	8016478 <__gethex+0xe6>
 80164e0:	2301      	movs	r3, #1
 80164e2:	e7fa      	b.n	80164da <__gethex+0x148>
 80164e4:	230a      	movs	r3, #10
 80164e6:	435d      	muls	r5, r3
 80164e8:	182d      	adds	r5, r5, r0
 80164ea:	3d10      	subs	r5, #16
 80164ec:	e7cd      	b.n	801648a <__gethex+0xf8>
 80164ee:	0026      	movs	r6, r4
 80164f0:	e7d8      	b.n	80164a4 <__gethex+0x112>
 80164f2:	9b01      	ldr	r3, [sp, #4]
 80164f4:	9903      	ldr	r1, [sp, #12]
 80164f6:	1ae3      	subs	r3, r4, r3
 80164f8:	3b01      	subs	r3, #1
 80164fa:	2b07      	cmp	r3, #7
 80164fc:	dc47      	bgt.n	801658e <__gethex+0x1fc>
 80164fe:	9805      	ldr	r0, [sp, #20]
 8016500:	f000 fa4b 	bl	801699a <_Balloc>
 8016504:	0003      	movs	r3, r0
 8016506:	3314      	adds	r3, #20
 8016508:	9303      	str	r3, [sp, #12]
 801650a:	9308      	str	r3, [sp, #32]
 801650c:	2300      	movs	r3, #0
 801650e:	0005      	movs	r5, r0
 8016510:	001e      	movs	r6, r3
 8016512:	9306      	str	r3, [sp, #24]
 8016514:	9b01      	ldr	r3, [sp, #4]
 8016516:	42a3      	cmp	r3, r4
 8016518:	d33c      	bcc.n	8016594 <__gethex+0x202>
 801651a:	9c08      	ldr	r4, [sp, #32]
 801651c:	9b03      	ldr	r3, [sp, #12]
 801651e:	c440      	stmia	r4!, {r6}
 8016520:	1ae4      	subs	r4, r4, r3
 8016522:	10a4      	asrs	r4, r4, #2
 8016524:	612c      	str	r4, [r5, #16]
 8016526:	0030      	movs	r0, r6
 8016528:	f000 fb04 	bl	8016b34 <__hi0bits>
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	0164      	lsls	r4, r4, #5
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	1a26      	subs	r6, r4, r0
 8016534:	9301      	str	r3, [sp, #4]
 8016536:	429e      	cmp	r6, r3
 8016538:	dd5f      	ble.n	80165fa <__gethex+0x268>
 801653a:	1af6      	subs	r6, r6, r3
 801653c:	0031      	movs	r1, r6
 801653e:	0028      	movs	r0, r5
 8016540:	f000 fdff 	bl	8017142 <__any_on>
 8016544:	1e04      	subs	r4, r0, #0
 8016546:	d00f      	beq.n	8016568 <__gethex+0x1d6>
 8016548:	2401      	movs	r4, #1
 801654a:	211f      	movs	r1, #31
 801654c:	0020      	movs	r0, r4
 801654e:	1e73      	subs	r3, r6, #1
 8016550:	4019      	ands	r1, r3
 8016552:	4088      	lsls	r0, r1
 8016554:	0001      	movs	r1, r0
 8016556:	115a      	asrs	r2, r3, #5
 8016558:	9803      	ldr	r0, [sp, #12]
 801655a:	0092      	lsls	r2, r2, #2
 801655c:	5812      	ldr	r2, [r2, r0]
 801655e:	420a      	tst	r2, r1
 8016560:	d002      	beq.n	8016568 <__gethex+0x1d6>
 8016562:	42a3      	cmp	r3, r4
 8016564:	dc41      	bgt.n	80165ea <__gethex+0x258>
 8016566:	2402      	movs	r4, #2
 8016568:	0031      	movs	r1, r6
 801656a:	0028      	movs	r0, r5
 801656c:	f7ff fec8 	bl	8016300 <rshift>
 8016570:	19bf      	adds	r7, r7, r6
 8016572:	9b02      	ldr	r3, [sp, #8]
 8016574:	689b      	ldr	r3, [r3, #8]
 8016576:	9304      	str	r3, [sp, #16]
 8016578:	42bb      	cmp	r3, r7
 801657a:	da4e      	bge.n	801661a <__gethex+0x288>
 801657c:	0029      	movs	r1, r5
 801657e:	9805      	ldr	r0, [sp, #20]
 8016580:	f000 fa43 	bl	8016a0a <_Bfree>
 8016584:	2300      	movs	r3, #0
 8016586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016588:	26a3      	movs	r6, #163	; 0xa3
 801658a:	6013      	str	r3, [r2, #0]
 801658c:	e795      	b.n	80164ba <__gethex+0x128>
 801658e:	3101      	adds	r1, #1
 8016590:	105b      	asrs	r3, r3, #1
 8016592:	e7b2      	b.n	80164fa <__gethex+0x168>
 8016594:	1e63      	subs	r3, r4, #1
 8016596:	9309      	str	r3, [sp, #36]	; 0x24
 8016598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	4293      	cmp	r3, r2
 801659e:	d015      	beq.n	80165cc <__gethex+0x23a>
 80165a0:	9b06      	ldr	r3, [sp, #24]
 80165a2:	2b20      	cmp	r3, #32
 80165a4:	d105      	bne.n	80165b2 <__gethex+0x220>
 80165a6:	9b08      	ldr	r3, [sp, #32]
 80165a8:	601e      	str	r6, [r3, #0]
 80165aa:	2600      	movs	r6, #0
 80165ac:	3304      	adds	r3, #4
 80165ae:	9308      	str	r3, [sp, #32]
 80165b0:	9606      	str	r6, [sp, #24]
 80165b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b4:	7818      	ldrb	r0, [r3, #0]
 80165b6:	f7ff fed7 	bl	8016368 <__hexdig_fun>
 80165ba:	230f      	movs	r3, #15
 80165bc:	4018      	ands	r0, r3
 80165be:	9b06      	ldr	r3, [sp, #24]
 80165c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80165c2:	4098      	lsls	r0, r3
 80165c4:	3304      	adds	r3, #4
 80165c6:	4306      	orrs	r6, r0
 80165c8:	9306      	str	r3, [sp, #24]
 80165ca:	e7a3      	b.n	8016514 <__gethex+0x182>
 80165cc:	2301      	movs	r3, #1
 80165ce:	9a04      	ldr	r2, [sp, #16]
 80165d0:	1a9c      	subs	r4, r3, r2
 80165d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165d4:	191c      	adds	r4, r3, r4
 80165d6:	9b01      	ldr	r3, [sp, #4]
 80165d8:	429c      	cmp	r4, r3
 80165da:	d3e1      	bcc.n	80165a0 <__gethex+0x20e>
 80165dc:	9907      	ldr	r1, [sp, #28]
 80165de:	0020      	movs	r0, r4
 80165e0:	f7fe f8b8 	bl	8014754 <strncmp>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d1db      	bne.n	80165a0 <__gethex+0x20e>
 80165e8:	e794      	b.n	8016514 <__gethex+0x182>
 80165ea:	1eb1      	subs	r1, r6, #2
 80165ec:	0028      	movs	r0, r5
 80165ee:	f000 fda8 	bl	8017142 <__any_on>
 80165f2:	2800      	cmp	r0, #0
 80165f4:	d0b7      	beq.n	8016566 <__gethex+0x1d4>
 80165f6:	2403      	movs	r4, #3
 80165f8:	e7b6      	b.n	8016568 <__gethex+0x1d6>
 80165fa:	9b01      	ldr	r3, [sp, #4]
 80165fc:	2400      	movs	r4, #0
 80165fe:	429e      	cmp	r6, r3
 8016600:	dab7      	bge.n	8016572 <__gethex+0x1e0>
 8016602:	1b9e      	subs	r6, r3, r6
 8016604:	0029      	movs	r1, r5
 8016606:	0032      	movs	r2, r6
 8016608:	9805      	ldr	r0, [sp, #20]
 801660a:	f000 fbc7 	bl	8016d9c <__lshift>
 801660e:	0003      	movs	r3, r0
 8016610:	3314      	adds	r3, #20
 8016612:	0005      	movs	r5, r0
 8016614:	1bbf      	subs	r7, r7, r6
 8016616:	9303      	str	r3, [sp, #12]
 8016618:	e7ab      	b.n	8016572 <__gethex+0x1e0>
 801661a:	9b02      	ldr	r3, [sp, #8]
 801661c:	685e      	ldr	r6, [r3, #4]
 801661e:	42be      	cmp	r6, r7
 8016620:	dd6b      	ble.n	80166fa <__gethex+0x368>
 8016622:	9b01      	ldr	r3, [sp, #4]
 8016624:	1bf6      	subs	r6, r6, r7
 8016626:	42b3      	cmp	r3, r6
 8016628:	dc32      	bgt.n	8016690 <__gethex+0x2fe>
 801662a:	9b02      	ldr	r3, [sp, #8]
 801662c:	68db      	ldr	r3, [r3, #12]
 801662e:	2b02      	cmp	r3, #2
 8016630:	d026      	beq.n	8016680 <__gethex+0x2ee>
 8016632:	2b03      	cmp	r3, #3
 8016634:	d028      	beq.n	8016688 <__gethex+0x2f6>
 8016636:	2b01      	cmp	r3, #1
 8016638:	d119      	bne.n	801666e <__gethex+0x2dc>
 801663a:	9b01      	ldr	r3, [sp, #4]
 801663c:	42b3      	cmp	r3, r6
 801663e:	d116      	bne.n	801666e <__gethex+0x2dc>
 8016640:	2b01      	cmp	r3, #1
 8016642:	dc0d      	bgt.n	8016660 <__gethex+0x2ce>
 8016644:	9b02      	ldr	r3, [sp, #8]
 8016646:	2662      	movs	r6, #98	; 0x62
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	9301      	str	r3, [sp, #4]
 801664c:	9a01      	ldr	r2, [sp, #4]
 801664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016650:	601a      	str	r2, [r3, #0]
 8016652:	2301      	movs	r3, #1
 8016654:	9a03      	ldr	r2, [sp, #12]
 8016656:	612b      	str	r3, [r5, #16]
 8016658:	6013      	str	r3, [r2, #0]
 801665a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801665c:	601d      	str	r5, [r3, #0]
 801665e:	e72c      	b.n	80164ba <__gethex+0x128>
 8016660:	9901      	ldr	r1, [sp, #4]
 8016662:	0028      	movs	r0, r5
 8016664:	3901      	subs	r1, #1
 8016666:	f000 fd6c 	bl	8017142 <__any_on>
 801666a:	2800      	cmp	r0, #0
 801666c:	d1ea      	bne.n	8016644 <__gethex+0x2b2>
 801666e:	0029      	movs	r1, r5
 8016670:	9805      	ldr	r0, [sp, #20]
 8016672:	f000 f9ca 	bl	8016a0a <_Bfree>
 8016676:	2300      	movs	r3, #0
 8016678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801667a:	2650      	movs	r6, #80	; 0x50
 801667c:	6013      	str	r3, [r2, #0]
 801667e:	e71c      	b.n	80164ba <__gethex+0x128>
 8016680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016682:	2b00      	cmp	r3, #0
 8016684:	d0de      	beq.n	8016644 <__gethex+0x2b2>
 8016686:	e7f2      	b.n	801666e <__gethex+0x2dc>
 8016688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801668a:	2b00      	cmp	r3, #0
 801668c:	d1da      	bne.n	8016644 <__gethex+0x2b2>
 801668e:	e7ee      	b.n	801666e <__gethex+0x2dc>
 8016690:	1e77      	subs	r7, r6, #1
 8016692:	2c00      	cmp	r4, #0
 8016694:	d12f      	bne.n	80166f6 <__gethex+0x364>
 8016696:	2f00      	cmp	r7, #0
 8016698:	d004      	beq.n	80166a4 <__gethex+0x312>
 801669a:	0039      	movs	r1, r7
 801669c:	0028      	movs	r0, r5
 801669e:	f000 fd50 	bl	8017142 <__any_on>
 80166a2:	0004      	movs	r4, r0
 80166a4:	231f      	movs	r3, #31
 80166a6:	117a      	asrs	r2, r7, #5
 80166a8:	401f      	ands	r7, r3
 80166aa:	3b1e      	subs	r3, #30
 80166ac:	40bb      	lsls	r3, r7
 80166ae:	9903      	ldr	r1, [sp, #12]
 80166b0:	0092      	lsls	r2, r2, #2
 80166b2:	5852      	ldr	r2, [r2, r1]
 80166b4:	421a      	tst	r2, r3
 80166b6:	d001      	beq.n	80166bc <__gethex+0x32a>
 80166b8:	2302      	movs	r3, #2
 80166ba:	431c      	orrs	r4, r3
 80166bc:	9b01      	ldr	r3, [sp, #4]
 80166be:	0031      	movs	r1, r6
 80166c0:	1b9b      	subs	r3, r3, r6
 80166c2:	2602      	movs	r6, #2
 80166c4:	0028      	movs	r0, r5
 80166c6:	9301      	str	r3, [sp, #4]
 80166c8:	f7ff fe1a 	bl	8016300 <rshift>
 80166cc:	9b02      	ldr	r3, [sp, #8]
 80166ce:	685f      	ldr	r7, [r3, #4]
 80166d0:	2c00      	cmp	r4, #0
 80166d2:	d040      	beq.n	8016756 <__gethex+0x3c4>
 80166d4:	9b02      	ldr	r3, [sp, #8]
 80166d6:	68db      	ldr	r3, [r3, #12]
 80166d8:	2b02      	cmp	r3, #2
 80166da:	d010      	beq.n	80166fe <__gethex+0x36c>
 80166dc:	2b03      	cmp	r3, #3
 80166de:	d012      	beq.n	8016706 <__gethex+0x374>
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d106      	bne.n	80166f2 <__gethex+0x360>
 80166e4:	07a2      	lsls	r2, r4, #30
 80166e6:	d504      	bpl.n	80166f2 <__gethex+0x360>
 80166e8:	9a03      	ldr	r2, [sp, #12]
 80166ea:	6812      	ldr	r2, [r2, #0]
 80166ec:	4314      	orrs	r4, r2
 80166ee:	421c      	tst	r4, r3
 80166f0:	d10c      	bne.n	801670c <__gethex+0x37a>
 80166f2:	2310      	movs	r3, #16
 80166f4:	e02e      	b.n	8016754 <__gethex+0x3c2>
 80166f6:	2401      	movs	r4, #1
 80166f8:	e7d4      	b.n	80166a4 <__gethex+0x312>
 80166fa:	2601      	movs	r6, #1
 80166fc:	e7e8      	b.n	80166d0 <__gethex+0x33e>
 80166fe:	2301      	movs	r3, #1
 8016700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016702:	1a9b      	subs	r3, r3, r2
 8016704:	9313      	str	r3, [sp, #76]	; 0x4c
 8016706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016708:	2b00      	cmp	r3, #0
 801670a:	d0f2      	beq.n	80166f2 <__gethex+0x360>
 801670c:	692c      	ldr	r4, [r5, #16]
 801670e:	00a3      	lsls	r3, r4, #2
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	002b      	movs	r3, r5
 8016714:	00a2      	lsls	r2, r4, #2
 8016716:	3314      	adds	r3, #20
 8016718:	1899      	adds	r1, r3, r2
 801671a:	2200      	movs	r2, #0
 801671c:	4694      	mov	ip, r2
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	1c50      	adds	r0, r2, #1
 8016722:	d01d      	beq.n	8016760 <__gethex+0x3ce>
 8016724:	3201      	adds	r2, #1
 8016726:	601a      	str	r2, [r3, #0]
 8016728:	002b      	movs	r3, r5
 801672a:	3314      	adds	r3, #20
 801672c:	2e02      	cmp	r6, #2
 801672e:	d13a      	bne.n	80167a6 <__gethex+0x414>
 8016730:	9a02      	ldr	r2, [sp, #8]
 8016732:	9901      	ldr	r1, [sp, #4]
 8016734:	6812      	ldr	r2, [r2, #0]
 8016736:	3a01      	subs	r2, #1
 8016738:	428a      	cmp	r2, r1
 801673a:	d10a      	bne.n	8016752 <__gethex+0x3c0>
 801673c:	114a      	asrs	r2, r1, #5
 801673e:	211f      	movs	r1, #31
 8016740:	9801      	ldr	r0, [sp, #4]
 8016742:	0092      	lsls	r2, r2, #2
 8016744:	4001      	ands	r1, r0
 8016746:	2001      	movs	r0, #1
 8016748:	0004      	movs	r4, r0
 801674a:	408c      	lsls	r4, r1
 801674c:	58d3      	ldr	r3, [r2, r3]
 801674e:	4223      	tst	r3, r4
 8016750:	d148      	bne.n	80167e4 <__gethex+0x452>
 8016752:	2320      	movs	r3, #32
 8016754:	431e      	orrs	r6, r3
 8016756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016758:	601d      	str	r5, [r3, #0]
 801675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801675c:	601f      	str	r7, [r3, #0]
 801675e:	e6ac      	b.n	80164ba <__gethex+0x128>
 8016760:	4662      	mov	r2, ip
 8016762:	c304      	stmia	r3!, {r2}
 8016764:	4299      	cmp	r1, r3
 8016766:	d8da      	bhi.n	801671e <__gethex+0x38c>
 8016768:	68ab      	ldr	r3, [r5, #8]
 801676a:	429c      	cmp	r4, r3
 801676c:	db12      	blt.n	8016794 <__gethex+0x402>
 801676e:	686b      	ldr	r3, [r5, #4]
 8016770:	9805      	ldr	r0, [sp, #20]
 8016772:	1c59      	adds	r1, r3, #1
 8016774:	f000 f911 	bl	801699a <_Balloc>
 8016778:	0029      	movs	r1, r5
 801677a:	692b      	ldr	r3, [r5, #16]
 801677c:	9003      	str	r0, [sp, #12]
 801677e:	1c9a      	adds	r2, r3, #2
 8016780:	0092      	lsls	r2, r2, #2
 8016782:	310c      	adds	r1, #12
 8016784:	300c      	adds	r0, #12
 8016786:	f7fd fa0a 	bl	8013b9e <memcpy>
 801678a:	0029      	movs	r1, r5
 801678c:	9805      	ldr	r0, [sp, #20]
 801678e:	f000 f93c 	bl	8016a0a <_Bfree>
 8016792:	9d03      	ldr	r5, [sp, #12]
 8016794:	692b      	ldr	r3, [r5, #16]
 8016796:	1c5a      	adds	r2, r3, #1
 8016798:	612a      	str	r2, [r5, #16]
 801679a:	2201      	movs	r2, #1
 801679c:	3304      	adds	r3, #4
 801679e:	009b      	lsls	r3, r3, #2
 80167a0:	18eb      	adds	r3, r5, r3
 80167a2:	605a      	str	r2, [r3, #4]
 80167a4:	e7c0      	b.n	8016728 <__gethex+0x396>
 80167a6:	692a      	ldr	r2, [r5, #16]
 80167a8:	42a2      	cmp	r2, r4
 80167aa:	dd0a      	ble.n	80167c2 <__gethex+0x430>
 80167ac:	2101      	movs	r1, #1
 80167ae:	0028      	movs	r0, r5
 80167b0:	f7ff fda6 	bl	8016300 <rshift>
 80167b4:	9b02      	ldr	r3, [sp, #8]
 80167b6:	3701      	adds	r7, #1
 80167b8:	689b      	ldr	r3, [r3, #8]
 80167ba:	2601      	movs	r6, #1
 80167bc:	42bb      	cmp	r3, r7
 80167be:	dac8      	bge.n	8016752 <__gethex+0x3c0>
 80167c0:	e6dc      	b.n	801657c <__gethex+0x1ea>
 80167c2:	241f      	movs	r4, #31
 80167c4:	9a01      	ldr	r2, [sp, #4]
 80167c6:	2601      	movs	r6, #1
 80167c8:	4022      	ands	r2, r4
 80167ca:	1e14      	subs	r4, r2, #0
 80167cc:	d0c1      	beq.n	8016752 <__gethex+0x3c0>
 80167ce:	9a04      	ldr	r2, [sp, #16]
 80167d0:	189b      	adds	r3, r3, r2
 80167d2:	3b04      	subs	r3, #4
 80167d4:	6818      	ldr	r0, [r3, #0]
 80167d6:	f000 f9ad 	bl	8016b34 <__hi0bits>
 80167da:	2120      	movs	r1, #32
 80167dc:	1b0c      	subs	r4, r1, r4
 80167de:	42a0      	cmp	r0, r4
 80167e0:	dbe4      	blt.n	80167ac <__gethex+0x41a>
 80167e2:	e7b6      	b.n	8016752 <__gethex+0x3c0>
 80167e4:	0006      	movs	r6, r0
 80167e6:	e7b4      	b.n	8016752 <__gethex+0x3c0>

080167e8 <L_shift>:
 80167e8:	2308      	movs	r3, #8
 80167ea:	b570      	push	{r4, r5, r6, lr}
 80167ec:	2520      	movs	r5, #32
 80167ee:	1a9a      	subs	r2, r3, r2
 80167f0:	0092      	lsls	r2, r2, #2
 80167f2:	1aad      	subs	r5, r5, r2
 80167f4:	6843      	ldr	r3, [r0, #4]
 80167f6:	6806      	ldr	r6, [r0, #0]
 80167f8:	001c      	movs	r4, r3
 80167fa:	40ac      	lsls	r4, r5
 80167fc:	40d3      	lsrs	r3, r2
 80167fe:	4334      	orrs	r4, r6
 8016800:	6004      	str	r4, [r0, #0]
 8016802:	6043      	str	r3, [r0, #4]
 8016804:	3004      	adds	r0, #4
 8016806:	4288      	cmp	r0, r1
 8016808:	d3f4      	bcc.n	80167f4 <L_shift+0xc>
 801680a:	bd70      	pop	{r4, r5, r6, pc}

0801680c <__match>:
 801680c:	b530      	push	{r4, r5, lr}
 801680e:	6803      	ldr	r3, [r0, #0]
 8016810:	780c      	ldrb	r4, [r1, #0]
 8016812:	3301      	adds	r3, #1
 8016814:	2c00      	cmp	r4, #0
 8016816:	d102      	bne.n	801681e <__match+0x12>
 8016818:	6003      	str	r3, [r0, #0]
 801681a:	2001      	movs	r0, #1
 801681c:	bd30      	pop	{r4, r5, pc}
 801681e:	781a      	ldrb	r2, [r3, #0]
 8016820:	0015      	movs	r5, r2
 8016822:	3d41      	subs	r5, #65	; 0x41
 8016824:	2d19      	cmp	r5, #25
 8016826:	d800      	bhi.n	801682a <__match+0x1e>
 8016828:	3220      	adds	r2, #32
 801682a:	3101      	adds	r1, #1
 801682c:	42a2      	cmp	r2, r4
 801682e:	d0ef      	beq.n	8016810 <__match+0x4>
 8016830:	2000      	movs	r0, #0
 8016832:	e7f3      	b.n	801681c <__match+0x10>

08016834 <__hexnan>:
 8016834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016836:	b08b      	sub	sp, #44	; 0x2c
 8016838:	9201      	str	r2, [sp, #4]
 801683a:	680a      	ldr	r2, [r1, #0]
 801683c:	9901      	ldr	r1, [sp, #4]
 801683e:	1153      	asrs	r3, r2, #5
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	18cb      	adds	r3, r1, r3
 8016844:	9304      	str	r3, [sp, #16]
 8016846:	231f      	movs	r3, #31
 8016848:	401a      	ands	r2, r3
 801684a:	9008      	str	r0, [sp, #32]
 801684c:	9206      	str	r2, [sp, #24]
 801684e:	d002      	beq.n	8016856 <__hexnan+0x22>
 8016850:	9b04      	ldr	r3, [sp, #16]
 8016852:	3304      	adds	r3, #4
 8016854:	9304      	str	r3, [sp, #16]
 8016856:	9b04      	ldr	r3, [sp, #16]
 8016858:	2500      	movs	r5, #0
 801685a:	1f1e      	subs	r6, r3, #4
 801685c:	0037      	movs	r7, r6
 801685e:	0034      	movs	r4, r6
 8016860:	9b08      	ldr	r3, [sp, #32]
 8016862:	6035      	str	r5, [r6, #0]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	9507      	str	r5, [sp, #28]
 8016868:	9305      	str	r3, [sp, #20]
 801686a:	9502      	str	r5, [sp, #8]
 801686c:	9b05      	ldr	r3, [sp, #20]
 801686e:	3301      	adds	r3, #1
 8016870:	9309      	str	r3, [sp, #36]	; 0x24
 8016872:	9b05      	ldr	r3, [sp, #20]
 8016874:	785b      	ldrb	r3, [r3, #1]
 8016876:	9303      	str	r3, [sp, #12]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d028      	beq.n	80168ce <__hexnan+0x9a>
 801687c:	9803      	ldr	r0, [sp, #12]
 801687e:	f7ff fd73 	bl	8016368 <__hexdig_fun>
 8016882:	2800      	cmp	r0, #0
 8016884:	d145      	bne.n	8016912 <__hexnan+0xde>
 8016886:	9b03      	ldr	r3, [sp, #12]
 8016888:	2b20      	cmp	r3, #32
 801688a:	d819      	bhi.n	80168c0 <__hexnan+0x8c>
 801688c:	9b02      	ldr	r3, [sp, #8]
 801688e:	9a07      	ldr	r2, [sp, #28]
 8016890:	4293      	cmp	r3, r2
 8016892:	dd12      	ble.n	80168ba <__hexnan+0x86>
 8016894:	42bc      	cmp	r4, r7
 8016896:	d206      	bcs.n	80168a6 <__hexnan+0x72>
 8016898:	2d07      	cmp	r5, #7
 801689a:	dc04      	bgt.n	80168a6 <__hexnan+0x72>
 801689c:	002a      	movs	r2, r5
 801689e:	0039      	movs	r1, r7
 80168a0:	0020      	movs	r0, r4
 80168a2:	f7ff ffa1 	bl	80167e8 <L_shift>
 80168a6:	9b01      	ldr	r3, [sp, #4]
 80168a8:	2508      	movs	r5, #8
 80168aa:	429c      	cmp	r4, r3
 80168ac:	d905      	bls.n	80168ba <__hexnan+0x86>
 80168ae:	1f27      	subs	r7, r4, #4
 80168b0:	2500      	movs	r5, #0
 80168b2:	003c      	movs	r4, r7
 80168b4:	9b02      	ldr	r3, [sp, #8]
 80168b6:	603d      	str	r5, [r7, #0]
 80168b8:	9307      	str	r3, [sp, #28]
 80168ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168bc:	9305      	str	r3, [sp, #20]
 80168be:	e7d5      	b.n	801686c <__hexnan+0x38>
 80168c0:	9b03      	ldr	r3, [sp, #12]
 80168c2:	2b29      	cmp	r3, #41	; 0x29
 80168c4:	d14a      	bne.n	801695c <__hexnan+0x128>
 80168c6:	9b05      	ldr	r3, [sp, #20]
 80168c8:	9a08      	ldr	r2, [sp, #32]
 80168ca:	3302      	adds	r3, #2
 80168cc:	6013      	str	r3, [r2, #0]
 80168ce:	9b02      	ldr	r3, [sp, #8]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d043      	beq.n	801695c <__hexnan+0x128>
 80168d4:	42bc      	cmp	r4, r7
 80168d6:	d206      	bcs.n	80168e6 <__hexnan+0xb2>
 80168d8:	2d07      	cmp	r5, #7
 80168da:	dc04      	bgt.n	80168e6 <__hexnan+0xb2>
 80168dc:	002a      	movs	r2, r5
 80168de:	0039      	movs	r1, r7
 80168e0:	0020      	movs	r0, r4
 80168e2:	f7ff ff81 	bl	80167e8 <L_shift>
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	429c      	cmp	r4, r3
 80168ea:	d926      	bls.n	801693a <__hexnan+0x106>
 80168ec:	cc04      	ldmia	r4!, {r2}
 80168ee:	601a      	str	r2, [r3, #0]
 80168f0:	3304      	adds	r3, #4
 80168f2:	42a6      	cmp	r6, r4
 80168f4:	d2fa      	bcs.n	80168ec <__hexnan+0xb8>
 80168f6:	2200      	movs	r2, #0
 80168f8:	c304      	stmia	r3!, {r2}
 80168fa:	429e      	cmp	r6, r3
 80168fc:	d2fc      	bcs.n	80168f8 <__hexnan+0xc4>
 80168fe:	6833      	ldr	r3, [r6, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d104      	bne.n	801690e <__hexnan+0xda>
 8016904:	9b01      	ldr	r3, [sp, #4]
 8016906:	429e      	cmp	r6, r3
 8016908:	d126      	bne.n	8016958 <__hexnan+0x124>
 801690a:	2301      	movs	r3, #1
 801690c:	6033      	str	r3, [r6, #0]
 801690e:	2005      	movs	r0, #5
 8016910:	e025      	b.n	801695e <__hexnan+0x12a>
 8016912:	9b02      	ldr	r3, [sp, #8]
 8016914:	3501      	adds	r5, #1
 8016916:	3301      	adds	r3, #1
 8016918:	9302      	str	r3, [sp, #8]
 801691a:	2d08      	cmp	r5, #8
 801691c:	dd06      	ble.n	801692c <__hexnan+0xf8>
 801691e:	9b01      	ldr	r3, [sp, #4]
 8016920:	429c      	cmp	r4, r3
 8016922:	d9ca      	bls.n	80168ba <__hexnan+0x86>
 8016924:	2300      	movs	r3, #0
 8016926:	2501      	movs	r5, #1
 8016928:	3c04      	subs	r4, #4
 801692a:	6023      	str	r3, [r4, #0]
 801692c:	220f      	movs	r2, #15
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	4010      	ands	r0, r2
 8016932:	011b      	lsls	r3, r3, #4
 8016934:	4318      	orrs	r0, r3
 8016936:	6020      	str	r0, [r4, #0]
 8016938:	e7bf      	b.n	80168ba <__hexnan+0x86>
 801693a:	9b06      	ldr	r3, [sp, #24]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d0de      	beq.n	80168fe <__hexnan+0xca>
 8016940:	2120      	movs	r1, #32
 8016942:	9a06      	ldr	r2, [sp, #24]
 8016944:	9b04      	ldr	r3, [sp, #16]
 8016946:	1a89      	subs	r1, r1, r2
 8016948:	2201      	movs	r2, #1
 801694a:	4252      	negs	r2, r2
 801694c:	40ca      	lsrs	r2, r1
 801694e:	3b04      	subs	r3, #4
 8016950:	6819      	ldr	r1, [r3, #0]
 8016952:	400a      	ands	r2, r1
 8016954:	601a      	str	r2, [r3, #0]
 8016956:	e7d2      	b.n	80168fe <__hexnan+0xca>
 8016958:	3e04      	subs	r6, #4
 801695a:	e7d0      	b.n	80168fe <__hexnan+0xca>
 801695c:	2004      	movs	r0, #4
 801695e:	b00b      	add	sp, #44	; 0x2c
 8016960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016962 <__localeconv_l>:
 8016962:	30f0      	adds	r0, #240	; 0xf0
 8016964:	4770      	bx	lr
	...

08016968 <_localeconv_r>:
 8016968:	4b03      	ldr	r3, [pc, #12]	; (8016978 <_localeconv_r+0x10>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	6a18      	ldr	r0, [r3, #32]
 801696e:	2800      	cmp	r0, #0
 8016970:	d100      	bne.n	8016974 <_localeconv_r+0xc>
 8016972:	4802      	ldr	r0, [pc, #8]	; (801697c <_localeconv_r+0x14>)
 8016974:	30f0      	adds	r0, #240	; 0xf0
 8016976:	4770      	bx	lr
 8016978:	200000c4 	.word	0x200000c4
 801697c:	20000128 	.word	0x20000128

08016980 <memchr>:
 8016980:	b2c9      	uxtb	r1, r1
 8016982:	1882      	adds	r2, r0, r2
 8016984:	4290      	cmp	r0, r2
 8016986:	d101      	bne.n	801698c <memchr+0xc>
 8016988:	2000      	movs	r0, #0
 801698a:	4770      	bx	lr
 801698c:	7803      	ldrb	r3, [r0, #0]
 801698e:	428b      	cmp	r3, r1
 8016990:	d0fb      	beq.n	801698a <memchr+0xa>
 8016992:	3001      	adds	r0, #1
 8016994:	e7f6      	b.n	8016984 <memchr+0x4>

08016996 <__malloc_lock>:
 8016996:	4770      	bx	lr

08016998 <__malloc_unlock>:
 8016998:	4770      	bx	lr

0801699a <_Balloc>:
 801699a:	b570      	push	{r4, r5, r6, lr}
 801699c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801699e:	0004      	movs	r4, r0
 80169a0:	000d      	movs	r5, r1
 80169a2:	2e00      	cmp	r6, #0
 80169a4:	d107      	bne.n	80169b6 <_Balloc+0x1c>
 80169a6:	2010      	movs	r0, #16
 80169a8:	f7fd f8c4 	bl	8013b34 <malloc>
 80169ac:	6260      	str	r0, [r4, #36]	; 0x24
 80169ae:	6046      	str	r6, [r0, #4]
 80169b0:	6086      	str	r6, [r0, #8]
 80169b2:	6006      	str	r6, [r0, #0]
 80169b4:	60c6      	str	r6, [r0, #12]
 80169b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80169b8:	68f3      	ldr	r3, [r6, #12]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d013      	beq.n	80169e6 <_Balloc+0x4c>
 80169be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169c0:	00aa      	lsls	r2, r5, #2
 80169c2:	68db      	ldr	r3, [r3, #12]
 80169c4:	189b      	adds	r3, r3, r2
 80169c6:	6818      	ldr	r0, [r3, #0]
 80169c8:	2800      	cmp	r0, #0
 80169ca:	d118      	bne.n	80169fe <_Balloc+0x64>
 80169cc:	2101      	movs	r1, #1
 80169ce:	000e      	movs	r6, r1
 80169d0:	40ae      	lsls	r6, r5
 80169d2:	1d72      	adds	r2, r6, #5
 80169d4:	0092      	lsls	r2, r2, #2
 80169d6:	0020      	movs	r0, r4
 80169d8:	f000 fbd5 	bl	8017186 <_calloc_r>
 80169dc:	2800      	cmp	r0, #0
 80169de:	d00c      	beq.n	80169fa <_Balloc+0x60>
 80169e0:	6045      	str	r5, [r0, #4]
 80169e2:	6086      	str	r6, [r0, #8]
 80169e4:	e00d      	b.n	8016a02 <_Balloc+0x68>
 80169e6:	2221      	movs	r2, #33	; 0x21
 80169e8:	2104      	movs	r1, #4
 80169ea:	0020      	movs	r0, r4
 80169ec:	f000 fbcb 	bl	8017186 <_calloc_r>
 80169f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169f2:	60f0      	str	r0, [r6, #12]
 80169f4:	68db      	ldr	r3, [r3, #12]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d1e1      	bne.n	80169be <_Balloc+0x24>
 80169fa:	2000      	movs	r0, #0
 80169fc:	bd70      	pop	{r4, r5, r6, pc}
 80169fe:	6802      	ldr	r2, [r0, #0]
 8016a00:	601a      	str	r2, [r3, #0]
 8016a02:	2300      	movs	r3, #0
 8016a04:	6103      	str	r3, [r0, #16]
 8016a06:	60c3      	str	r3, [r0, #12]
 8016a08:	e7f8      	b.n	80169fc <_Balloc+0x62>

08016a0a <_Bfree>:
 8016a0a:	b570      	push	{r4, r5, r6, lr}
 8016a0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016a0e:	0006      	movs	r6, r0
 8016a10:	000d      	movs	r5, r1
 8016a12:	2c00      	cmp	r4, #0
 8016a14:	d107      	bne.n	8016a26 <_Bfree+0x1c>
 8016a16:	2010      	movs	r0, #16
 8016a18:	f7fd f88c 	bl	8013b34 <malloc>
 8016a1c:	6270      	str	r0, [r6, #36]	; 0x24
 8016a1e:	6044      	str	r4, [r0, #4]
 8016a20:	6084      	str	r4, [r0, #8]
 8016a22:	6004      	str	r4, [r0, #0]
 8016a24:	60c4      	str	r4, [r0, #12]
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	d007      	beq.n	8016a3a <_Bfree+0x30>
 8016a2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016a2c:	686a      	ldr	r2, [r5, #4]
 8016a2e:	68db      	ldr	r3, [r3, #12]
 8016a30:	0092      	lsls	r2, r2, #2
 8016a32:	189b      	adds	r3, r3, r2
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	602a      	str	r2, [r5, #0]
 8016a38:	601d      	str	r5, [r3, #0]
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}

08016a3c <__multadd>:
 8016a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a3e:	001e      	movs	r6, r3
 8016a40:	2314      	movs	r3, #20
 8016a42:	469c      	mov	ip, r3
 8016a44:	0007      	movs	r7, r0
 8016a46:	000c      	movs	r4, r1
 8016a48:	2000      	movs	r0, #0
 8016a4a:	690d      	ldr	r5, [r1, #16]
 8016a4c:	448c      	add	ip, r1
 8016a4e:	4663      	mov	r3, ip
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	3001      	adds	r0, #1
 8016a54:	b299      	uxth	r1, r3
 8016a56:	4663      	mov	r3, ip
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	4351      	muls	r1, r2
 8016a5c:	0c1b      	lsrs	r3, r3, #16
 8016a5e:	4353      	muls	r3, r2
 8016a60:	1989      	adds	r1, r1, r6
 8016a62:	0c0e      	lsrs	r6, r1, #16
 8016a64:	199b      	adds	r3, r3, r6
 8016a66:	b289      	uxth	r1, r1
 8016a68:	0c1e      	lsrs	r6, r3, #16
 8016a6a:	041b      	lsls	r3, r3, #16
 8016a6c:	185b      	adds	r3, r3, r1
 8016a6e:	4661      	mov	r1, ip
 8016a70:	c108      	stmia	r1!, {r3}
 8016a72:	468c      	mov	ip, r1
 8016a74:	4285      	cmp	r5, r0
 8016a76:	dcea      	bgt.n	8016a4e <__multadd+0x12>
 8016a78:	2e00      	cmp	r6, #0
 8016a7a:	d01b      	beq.n	8016ab4 <__multadd+0x78>
 8016a7c:	68a3      	ldr	r3, [r4, #8]
 8016a7e:	42ab      	cmp	r3, r5
 8016a80:	dc12      	bgt.n	8016aa8 <__multadd+0x6c>
 8016a82:	6863      	ldr	r3, [r4, #4]
 8016a84:	0038      	movs	r0, r7
 8016a86:	1c59      	adds	r1, r3, #1
 8016a88:	f7ff ff87 	bl	801699a <_Balloc>
 8016a8c:	0021      	movs	r1, r4
 8016a8e:	6923      	ldr	r3, [r4, #16]
 8016a90:	9001      	str	r0, [sp, #4]
 8016a92:	1c9a      	adds	r2, r3, #2
 8016a94:	0092      	lsls	r2, r2, #2
 8016a96:	310c      	adds	r1, #12
 8016a98:	300c      	adds	r0, #12
 8016a9a:	f7fd f880 	bl	8013b9e <memcpy>
 8016a9e:	0021      	movs	r1, r4
 8016aa0:	0038      	movs	r0, r7
 8016aa2:	f7ff ffb2 	bl	8016a0a <_Bfree>
 8016aa6:	9c01      	ldr	r4, [sp, #4]
 8016aa8:	1d2b      	adds	r3, r5, #4
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	18e3      	adds	r3, r4, r3
 8016aae:	3501      	adds	r5, #1
 8016ab0:	605e      	str	r6, [r3, #4]
 8016ab2:	6125      	str	r5, [r4, #16]
 8016ab4:	0020      	movs	r0, r4
 8016ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016ab8 <__s2b>:
 8016ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016aba:	0006      	movs	r6, r0
 8016abc:	0018      	movs	r0, r3
 8016abe:	000c      	movs	r4, r1
 8016ac0:	3008      	adds	r0, #8
 8016ac2:	2109      	movs	r1, #9
 8016ac4:	9301      	str	r3, [sp, #4]
 8016ac6:	0015      	movs	r5, r2
 8016ac8:	f7e9 fbc2 	bl	8000250 <__divsi3>
 8016acc:	2301      	movs	r3, #1
 8016ace:	2100      	movs	r1, #0
 8016ad0:	4283      	cmp	r3, r0
 8016ad2:	db1f      	blt.n	8016b14 <__s2b+0x5c>
 8016ad4:	0030      	movs	r0, r6
 8016ad6:	f7ff ff60 	bl	801699a <_Balloc>
 8016ada:	9b08      	ldr	r3, [sp, #32]
 8016adc:	6143      	str	r3, [r0, #20]
 8016ade:	2301      	movs	r3, #1
 8016ae0:	6103      	str	r3, [r0, #16]
 8016ae2:	2d09      	cmp	r5, #9
 8016ae4:	dd19      	ble.n	8016b1a <__s2b+0x62>
 8016ae6:	0023      	movs	r3, r4
 8016ae8:	3309      	adds	r3, #9
 8016aea:	001f      	movs	r7, r3
 8016aec:	9300      	str	r3, [sp, #0]
 8016aee:	1964      	adds	r4, r4, r5
 8016af0:	783b      	ldrb	r3, [r7, #0]
 8016af2:	0001      	movs	r1, r0
 8016af4:	3b30      	subs	r3, #48	; 0x30
 8016af6:	220a      	movs	r2, #10
 8016af8:	0030      	movs	r0, r6
 8016afa:	3701      	adds	r7, #1
 8016afc:	f7ff ff9e 	bl	8016a3c <__multadd>
 8016b00:	42a7      	cmp	r7, r4
 8016b02:	d1f5      	bne.n	8016af0 <__s2b+0x38>
 8016b04:	9b00      	ldr	r3, [sp, #0]
 8016b06:	195c      	adds	r4, r3, r5
 8016b08:	3c08      	subs	r4, #8
 8016b0a:	002f      	movs	r7, r5
 8016b0c:	9b01      	ldr	r3, [sp, #4]
 8016b0e:	429f      	cmp	r7, r3
 8016b10:	db06      	blt.n	8016b20 <__s2b+0x68>
 8016b12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	3101      	adds	r1, #1
 8016b18:	e7da      	b.n	8016ad0 <__s2b+0x18>
 8016b1a:	340a      	adds	r4, #10
 8016b1c:	2509      	movs	r5, #9
 8016b1e:	e7f4      	b.n	8016b0a <__s2b+0x52>
 8016b20:	1b63      	subs	r3, r4, r5
 8016b22:	5ddb      	ldrb	r3, [r3, r7]
 8016b24:	0001      	movs	r1, r0
 8016b26:	3b30      	subs	r3, #48	; 0x30
 8016b28:	220a      	movs	r2, #10
 8016b2a:	0030      	movs	r0, r6
 8016b2c:	f7ff ff86 	bl	8016a3c <__multadd>
 8016b30:	3701      	adds	r7, #1
 8016b32:	e7eb      	b.n	8016b0c <__s2b+0x54>

08016b34 <__hi0bits>:
 8016b34:	0003      	movs	r3, r0
 8016b36:	0c02      	lsrs	r2, r0, #16
 8016b38:	2000      	movs	r0, #0
 8016b3a:	4282      	cmp	r2, r0
 8016b3c:	d101      	bne.n	8016b42 <__hi0bits+0xe>
 8016b3e:	041b      	lsls	r3, r3, #16
 8016b40:	3010      	adds	r0, #16
 8016b42:	0e1a      	lsrs	r2, r3, #24
 8016b44:	d101      	bne.n	8016b4a <__hi0bits+0x16>
 8016b46:	3008      	adds	r0, #8
 8016b48:	021b      	lsls	r3, r3, #8
 8016b4a:	0f1a      	lsrs	r2, r3, #28
 8016b4c:	d101      	bne.n	8016b52 <__hi0bits+0x1e>
 8016b4e:	3004      	adds	r0, #4
 8016b50:	011b      	lsls	r3, r3, #4
 8016b52:	0f9a      	lsrs	r2, r3, #30
 8016b54:	d101      	bne.n	8016b5a <__hi0bits+0x26>
 8016b56:	3002      	adds	r0, #2
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	db03      	blt.n	8016b66 <__hi0bits+0x32>
 8016b5e:	3001      	adds	r0, #1
 8016b60:	005b      	lsls	r3, r3, #1
 8016b62:	d400      	bmi.n	8016b66 <__hi0bits+0x32>
 8016b64:	2020      	movs	r0, #32
 8016b66:	4770      	bx	lr

08016b68 <__lo0bits>:
 8016b68:	2207      	movs	r2, #7
 8016b6a:	6803      	ldr	r3, [r0, #0]
 8016b6c:	b510      	push	{r4, lr}
 8016b6e:	0001      	movs	r1, r0
 8016b70:	401a      	ands	r2, r3
 8016b72:	d00d      	beq.n	8016b90 <__lo0bits+0x28>
 8016b74:	2401      	movs	r4, #1
 8016b76:	2000      	movs	r0, #0
 8016b78:	4223      	tst	r3, r4
 8016b7a:	d105      	bne.n	8016b88 <__lo0bits+0x20>
 8016b7c:	3002      	adds	r0, #2
 8016b7e:	4203      	tst	r3, r0
 8016b80:	d003      	beq.n	8016b8a <__lo0bits+0x22>
 8016b82:	40e3      	lsrs	r3, r4
 8016b84:	0020      	movs	r0, r4
 8016b86:	600b      	str	r3, [r1, #0]
 8016b88:	bd10      	pop	{r4, pc}
 8016b8a:	089b      	lsrs	r3, r3, #2
 8016b8c:	600b      	str	r3, [r1, #0]
 8016b8e:	e7fb      	b.n	8016b88 <__lo0bits+0x20>
 8016b90:	b29c      	uxth	r4, r3
 8016b92:	0010      	movs	r0, r2
 8016b94:	2c00      	cmp	r4, #0
 8016b96:	d101      	bne.n	8016b9c <__lo0bits+0x34>
 8016b98:	2010      	movs	r0, #16
 8016b9a:	0c1b      	lsrs	r3, r3, #16
 8016b9c:	b2da      	uxtb	r2, r3
 8016b9e:	2a00      	cmp	r2, #0
 8016ba0:	d101      	bne.n	8016ba6 <__lo0bits+0x3e>
 8016ba2:	3008      	adds	r0, #8
 8016ba4:	0a1b      	lsrs	r3, r3, #8
 8016ba6:	071a      	lsls	r2, r3, #28
 8016ba8:	d101      	bne.n	8016bae <__lo0bits+0x46>
 8016baa:	3004      	adds	r0, #4
 8016bac:	091b      	lsrs	r3, r3, #4
 8016bae:	079a      	lsls	r2, r3, #30
 8016bb0:	d101      	bne.n	8016bb6 <__lo0bits+0x4e>
 8016bb2:	3002      	adds	r0, #2
 8016bb4:	089b      	lsrs	r3, r3, #2
 8016bb6:	07da      	lsls	r2, r3, #31
 8016bb8:	d4e8      	bmi.n	8016b8c <__lo0bits+0x24>
 8016bba:	085b      	lsrs	r3, r3, #1
 8016bbc:	d001      	beq.n	8016bc2 <__lo0bits+0x5a>
 8016bbe:	3001      	adds	r0, #1
 8016bc0:	e7e4      	b.n	8016b8c <__lo0bits+0x24>
 8016bc2:	2020      	movs	r0, #32
 8016bc4:	e7e0      	b.n	8016b88 <__lo0bits+0x20>

08016bc6 <__i2b>:
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	000c      	movs	r4, r1
 8016bca:	2101      	movs	r1, #1
 8016bcc:	f7ff fee5 	bl	801699a <_Balloc>
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	6144      	str	r4, [r0, #20]
 8016bd4:	6103      	str	r3, [r0, #16]
 8016bd6:	bd10      	pop	{r4, pc}

08016bd8 <__multiply>:
 8016bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bda:	690b      	ldr	r3, [r1, #16]
 8016bdc:	0014      	movs	r4, r2
 8016bde:	6912      	ldr	r2, [r2, #16]
 8016be0:	b089      	sub	sp, #36	; 0x24
 8016be2:	000d      	movs	r5, r1
 8016be4:	4293      	cmp	r3, r2
 8016be6:	da01      	bge.n	8016bec <__multiply+0x14>
 8016be8:	0025      	movs	r5, r4
 8016bea:	000c      	movs	r4, r1
 8016bec:	692f      	ldr	r7, [r5, #16]
 8016bee:	6926      	ldr	r6, [r4, #16]
 8016bf0:	6869      	ldr	r1, [r5, #4]
 8016bf2:	19bb      	adds	r3, r7, r6
 8016bf4:	9302      	str	r3, [sp, #8]
 8016bf6:	68ab      	ldr	r3, [r5, #8]
 8016bf8:	19ba      	adds	r2, r7, r6
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	da00      	bge.n	8016c00 <__multiply+0x28>
 8016bfe:	3101      	adds	r1, #1
 8016c00:	f7ff fecb 	bl	801699a <_Balloc>
 8016c04:	0002      	movs	r2, r0
 8016c06:	19bb      	adds	r3, r7, r6
 8016c08:	3214      	adds	r2, #20
 8016c0a:	009b      	lsls	r3, r3, #2
 8016c0c:	18d3      	adds	r3, r2, r3
 8016c0e:	469c      	mov	ip, r3
 8016c10:	2100      	movs	r1, #0
 8016c12:	0013      	movs	r3, r2
 8016c14:	9004      	str	r0, [sp, #16]
 8016c16:	4563      	cmp	r3, ip
 8016c18:	d31d      	bcc.n	8016c56 <__multiply+0x7e>
 8016c1a:	3514      	adds	r5, #20
 8016c1c:	00bf      	lsls	r7, r7, #2
 8016c1e:	19eb      	adds	r3, r5, r7
 8016c20:	3414      	adds	r4, #20
 8016c22:	00b6      	lsls	r6, r6, #2
 8016c24:	9305      	str	r3, [sp, #20]
 8016c26:	19a3      	adds	r3, r4, r6
 8016c28:	9503      	str	r5, [sp, #12]
 8016c2a:	9401      	str	r4, [sp, #4]
 8016c2c:	9307      	str	r3, [sp, #28]
 8016c2e:	9b07      	ldr	r3, [sp, #28]
 8016c30:	9901      	ldr	r1, [sp, #4]
 8016c32:	4299      	cmp	r1, r3
 8016c34:	d311      	bcc.n	8016c5a <__multiply+0x82>
 8016c36:	9b02      	ldr	r3, [sp, #8]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	dd06      	ble.n	8016c4a <__multiply+0x72>
 8016c3c:	2304      	movs	r3, #4
 8016c3e:	425b      	negs	r3, r3
 8016c40:	449c      	add	ip, r3
 8016c42:	4663      	mov	r3, ip
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d051      	beq.n	8016cee <__multiply+0x116>
 8016c4a:	9b04      	ldr	r3, [sp, #16]
 8016c4c:	9a02      	ldr	r2, [sp, #8]
 8016c4e:	0018      	movs	r0, r3
 8016c50:	611a      	str	r2, [r3, #16]
 8016c52:	b009      	add	sp, #36	; 0x24
 8016c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c56:	c302      	stmia	r3!, {r1}
 8016c58:	e7dd      	b.n	8016c16 <__multiply+0x3e>
 8016c5a:	9b01      	ldr	r3, [sp, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	b298      	uxth	r0, r3
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d01c      	beq.n	8016c9e <__multiply+0xc6>
 8016c64:	0015      	movs	r5, r2
 8016c66:	2600      	movs	r6, #0
 8016c68:	9f03      	ldr	r7, [sp, #12]
 8016c6a:	cf02      	ldmia	r7!, {r1}
 8016c6c:	682c      	ldr	r4, [r5, #0]
 8016c6e:	b28b      	uxth	r3, r1
 8016c70:	4343      	muls	r3, r0
 8016c72:	0c09      	lsrs	r1, r1, #16
 8016c74:	4341      	muls	r1, r0
 8016c76:	b2a4      	uxth	r4, r4
 8016c78:	191b      	adds	r3, r3, r4
 8016c7a:	199b      	adds	r3, r3, r6
 8016c7c:	000e      	movs	r6, r1
 8016c7e:	6829      	ldr	r1, [r5, #0]
 8016c80:	9506      	str	r5, [sp, #24]
 8016c82:	0c09      	lsrs	r1, r1, #16
 8016c84:	1871      	adds	r1, r6, r1
 8016c86:	0c1e      	lsrs	r6, r3, #16
 8016c88:	1989      	adds	r1, r1, r6
 8016c8a:	0c0e      	lsrs	r6, r1, #16
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	0409      	lsls	r1, r1, #16
 8016c90:	430b      	orrs	r3, r1
 8016c92:	c508      	stmia	r5!, {r3}
 8016c94:	9b05      	ldr	r3, [sp, #20]
 8016c96:	42bb      	cmp	r3, r7
 8016c98:	d8e7      	bhi.n	8016c6a <__multiply+0x92>
 8016c9a:	9b06      	ldr	r3, [sp, #24]
 8016c9c:	605e      	str	r6, [r3, #4]
 8016c9e:	9b01      	ldr	r3, [sp, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	0c1d      	lsrs	r5, r3, #16
 8016ca4:	d01e      	beq.n	8016ce4 <__multiply+0x10c>
 8016ca6:	0010      	movs	r0, r2
 8016ca8:	2700      	movs	r7, #0
 8016caa:	6813      	ldr	r3, [r2, #0]
 8016cac:	9e03      	ldr	r6, [sp, #12]
 8016cae:	6831      	ldr	r1, [r6, #0]
 8016cb0:	6804      	ldr	r4, [r0, #0]
 8016cb2:	b289      	uxth	r1, r1
 8016cb4:	4369      	muls	r1, r5
 8016cb6:	0c24      	lsrs	r4, r4, #16
 8016cb8:	1909      	adds	r1, r1, r4
 8016cba:	19c9      	adds	r1, r1, r7
 8016cbc:	040f      	lsls	r7, r1, #16
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	433b      	orrs	r3, r7
 8016cc2:	6003      	str	r3, [r0, #0]
 8016cc4:	ce80      	ldmia	r6!, {r7}
 8016cc6:	6843      	ldr	r3, [r0, #4]
 8016cc8:	0c3f      	lsrs	r7, r7, #16
 8016cca:	436f      	muls	r7, r5
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	18fb      	adds	r3, r7, r3
 8016cd0:	0c09      	lsrs	r1, r1, #16
 8016cd2:	185b      	adds	r3, r3, r1
 8016cd4:	9905      	ldr	r1, [sp, #20]
 8016cd6:	9006      	str	r0, [sp, #24]
 8016cd8:	0c1f      	lsrs	r7, r3, #16
 8016cda:	3004      	adds	r0, #4
 8016cdc:	42b1      	cmp	r1, r6
 8016cde:	d8e6      	bhi.n	8016cae <__multiply+0xd6>
 8016ce0:	9906      	ldr	r1, [sp, #24]
 8016ce2:	604b      	str	r3, [r1, #4]
 8016ce4:	9b01      	ldr	r3, [sp, #4]
 8016ce6:	3204      	adds	r2, #4
 8016ce8:	3304      	adds	r3, #4
 8016cea:	9301      	str	r3, [sp, #4]
 8016cec:	e79f      	b.n	8016c2e <__multiply+0x56>
 8016cee:	9b02      	ldr	r3, [sp, #8]
 8016cf0:	3b01      	subs	r3, #1
 8016cf2:	9302      	str	r3, [sp, #8]
 8016cf4:	e79f      	b.n	8016c36 <__multiply+0x5e>
	...

08016cf8 <__pow5mult>:
 8016cf8:	2303      	movs	r3, #3
 8016cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cfc:	4013      	ands	r3, r2
 8016cfe:	0005      	movs	r5, r0
 8016d00:	000e      	movs	r6, r1
 8016d02:	0014      	movs	r4, r2
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d008      	beq.n	8016d1a <__pow5mult+0x22>
 8016d08:	4922      	ldr	r1, [pc, #136]	; (8016d94 <__pow5mult+0x9c>)
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	009a      	lsls	r2, r3, #2
 8016d0e:	5852      	ldr	r2, [r2, r1]
 8016d10:	2300      	movs	r3, #0
 8016d12:	0031      	movs	r1, r6
 8016d14:	f7ff fe92 	bl	8016a3c <__multadd>
 8016d18:	0006      	movs	r6, r0
 8016d1a:	10a3      	asrs	r3, r4, #2
 8016d1c:	9301      	str	r3, [sp, #4]
 8016d1e:	d036      	beq.n	8016d8e <__pow5mult+0x96>
 8016d20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8016d22:	2c00      	cmp	r4, #0
 8016d24:	d107      	bne.n	8016d36 <__pow5mult+0x3e>
 8016d26:	2010      	movs	r0, #16
 8016d28:	f7fc ff04 	bl	8013b34 <malloc>
 8016d2c:	6268      	str	r0, [r5, #36]	; 0x24
 8016d2e:	6044      	str	r4, [r0, #4]
 8016d30:	6084      	str	r4, [r0, #8]
 8016d32:	6004      	str	r4, [r0, #0]
 8016d34:	60c4      	str	r4, [r0, #12]
 8016d36:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016d38:	68bc      	ldr	r4, [r7, #8]
 8016d3a:	2c00      	cmp	r4, #0
 8016d3c:	d107      	bne.n	8016d4e <__pow5mult+0x56>
 8016d3e:	4916      	ldr	r1, [pc, #88]	; (8016d98 <__pow5mult+0xa0>)
 8016d40:	0028      	movs	r0, r5
 8016d42:	f7ff ff40 	bl	8016bc6 <__i2b>
 8016d46:	2300      	movs	r3, #0
 8016d48:	0004      	movs	r4, r0
 8016d4a:	60b8      	str	r0, [r7, #8]
 8016d4c:	6003      	str	r3, [r0, #0]
 8016d4e:	2201      	movs	r2, #1
 8016d50:	9b01      	ldr	r3, [sp, #4]
 8016d52:	4213      	tst	r3, r2
 8016d54:	d00a      	beq.n	8016d6c <__pow5mult+0x74>
 8016d56:	0031      	movs	r1, r6
 8016d58:	0022      	movs	r2, r4
 8016d5a:	0028      	movs	r0, r5
 8016d5c:	f7ff ff3c 	bl	8016bd8 <__multiply>
 8016d60:	0007      	movs	r7, r0
 8016d62:	0031      	movs	r1, r6
 8016d64:	0028      	movs	r0, r5
 8016d66:	f7ff fe50 	bl	8016a0a <_Bfree>
 8016d6a:	003e      	movs	r6, r7
 8016d6c:	9b01      	ldr	r3, [sp, #4]
 8016d6e:	105b      	asrs	r3, r3, #1
 8016d70:	9301      	str	r3, [sp, #4]
 8016d72:	d00c      	beq.n	8016d8e <__pow5mult+0x96>
 8016d74:	6820      	ldr	r0, [r4, #0]
 8016d76:	2800      	cmp	r0, #0
 8016d78:	d107      	bne.n	8016d8a <__pow5mult+0x92>
 8016d7a:	0022      	movs	r2, r4
 8016d7c:	0021      	movs	r1, r4
 8016d7e:	0028      	movs	r0, r5
 8016d80:	f7ff ff2a 	bl	8016bd8 <__multiply>
 8016d84:	2300      	movs	r3, #0
 8016d86:	6020      	str	r0, [r4, #0]
 8016d88:	6003      	str	r3, [r0, #0]
 8016d8a:	0004      	movs	r4, r0
 8016d8c:	e7df      	b.n	8016d4e <__pow5mult+0x56>
 8016d8e:	0030      	movs	r0, r6
 8016d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016d92:	46c0      	nop			; (mov r8, r8)
 8016d94:	0801a8c0 	.word	0x0801a8c0
 8016d98:	00000271 	.word	0x00000271

08016d9c <__lshift>:
 8016d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d9e:	000d      	movs	r5, r1
 8016da0:	0017      	movs	r7, r2
 8016da2:	692b      	ldr	r3, [r5, #16]
 8016da4:	1154      	asrs	r4, r2, #5
 8016da6:	b085      	sub	sp, #20
 8016da8:	18e3      	adds	r3, r4, r3
 8016daa:	9301      	str	r3, [sp, #4]
 8016dac:	3301      	adds	r3, #1
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	6849      	ldr	r1, [r1, #4]
 8016db2:	68ab      	ldr	r3, [r5, #8]
 8016db4:	9002      	str	r0, [sp, #8]
 8016db6:	9a00      	ldr	r2, [sp, #0]
 8016db8:	4293      	cmp	r3, r2
 8016dba:	db35      	blt.n	8016e28 <__lshift+0x8c>
 8016dbc:	9802      	ldr	r0, [sp, #8]
 8016dbe:	f7ff fdec 	bl	801699a <_Balloc>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	0002      	movs	r2, r0
 8016dc6:	0006      	movs	r6, r0
 8016dc8:	0019      	movs	r1, r3
 8016dca:	3214      	adds	r2, #20
 8016dcc:	42a3      	cmp	r3, r4
 8016dce:	db2e      	blt.n	8016e2e <__lshift+0x92>
 8016dd0:	43e3      	mvns	r3, r4
 8016dd2:	17db      	asrs	r3, r3, #31
 8016dd4:	401c      	ands	r4, r3
 8016dd6:	002b      	movs	r3, r5
 8016dd8:	00a4      	lsls	r4, r4, #2
 8016dda:	1914      	adds	r4, r2, r4
 8016ddc:	692a      	ldr	r2, [r5, #16]
 8016dde:	3314      	adds	r3, #20
 8016de0:	0092      	lsls	r2, r2, #2
 8016de2:	189a      	adds	r2, r3, r2
 8016de4:	4694      	mov	ip, r2
 8016de6:	221f      	movs	r2, #31
 8016de8:	4017      	ands	r7, r2
 8016dea:	d024      	beq.n	8016e36 <__lshift+0x9a>
 8016dec:	3201      	adds	r2, #1
 8016dee:	1bd2      	subs	r2, r2, r7
 8016df0:	9203      	str	r2, [sp, #12]
 8016df2:	2200      	movs	r2, #0
 8016df4:	6819      	ldr	r1, [r3, #0]
 8016df6:	0020      	movs	r0, r4
 8016df8:	40b9      	lsls	r1, r7
 8016dfa:	430a      	orrs	r2, r1
 8016dfc:	c404      	stmia	r4!, {r2}
 8016dfe:	cb04      	ldmia	r3!, {r2}
 8016e00:	9903      	ldr	r1, [sp, #12]
 8016e02:	40ca      	lsrs	r2, r1
 8016e04:	459c      	cmp	ip, r3
 8016e06:	d8f5      	bhi.n	8016df4 <__lshift+0x58>
 8016e08:	6042      	str	r2, [r0, #4]
 8016e0a:	2a00      	cmp	r2, #0
 8016e0c:	d002      	beq.n	8016e14 <__lshift+0x78>
 8016e0e:	9b01      	ldr	r3, [sp, #4]
 8016e10:	3302      	adds	r3, #2
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	9b00      	ldr	r3, [sp, #0]
 8016e16:	9802      	ldr	r0, [sp, #8]
 8016e18:	3b01      	subs	r3, #1
 8016e1a:	6133      	str	r3, [r6, #16]
 8016e1c:	0029      	movs	r1, r5
 8016e1e:	f7ff fdf4 	bl	8016a0a <_Bfree>
 8016e22:	0030      	movs	r0, r6
 8016e24:	b005      	add	sp, #20
 8016e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e28:	3101      	adds	r1, #1
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	e7c3      	b.n	8016db6 <__lshift+0x1a>
 8016e2e:	0098      	lsls	r0, r3, #2
 8016e30:	5011      	str	r1, [r2, r0]
 8016e32:	3301      	adds	r3, #1
 8016e34:	e7ca      	b.n	8016dcc <__lshift+0x30>
 8016e36:	cb04      	ldmia	r3!, {r2}
 8016e38:	c404      	stmia	r4!, {r2}
 8016e3a:	459c      	cmp	ip, r3
 8016e3c:	d8fb      	bhi.n	8016e36 <__lshift+0x9a>
 8016e3e:	e7e9      	b.n	8016e14 <__lshift+0x78>

08016e40 <__mcmp>:
 8016e40:	690a      	ldr	r2, [r1, #16]
 8016e42:	6903      	ldr	r3, [r0, #16]
 8016e44:	b530      	push	{r4, r5, lr}
 8016e46:	1a9b      	subs	r3, r3, r2
 8016e48:	d10d      	bne.n	8016e66 <__mcmp+0x26>
 8016e4a:	0092      	lsls	r2, r2, #2
 8016e4c:	3014      	adds	r0, #20
 8016e4e:	3114      	adds	r1, #20
 8016e50:	1884      	adds	r4, r0, r2
 8016e52:	1889      	adds	r1, r1, r2
 8016e54:	3c04      	subs	r4, #4
 8016e56:	3904      	subs	r1, #4
 8016e58:	6825      	ldr	r5, [r4, #0]
 8016e5a:	680a      	ldr	r2, [r1, #0]
 8016e5c:	4295      	cmp	r5, r2
 8016e5e:	d004      	beq.n	8016e6a <__mcmp+0x2a>
 8016e60:	2301      	movs	r3, #1
 8016e62:	4295      	cmp	r5, r2
 8016e64:	d304      	bcc.n	8016e70 <__mcmp+0x30>
 8016e66:	0018      	movs	r0, r3
 8016e68:	bd30      	pop	{r4, r5, pc}
 8016e6a:	42a0      	cmp	r0, r4
 8016e6c:	d3f2      	bcc.n	8016e54 <__mcmp+0x14>
 8016e6e:	e7fa      	b.n	8016e66 <__mcmp+0x26>
 8016e70:	425b      	negs	r3, r3
 8016e72:	e7f8      	b.n	8016e66 <__mcmp+0x26>

08016e74 <__mdiff>:
 8016e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e76:	000d      	movs	r5, r1
 8016e78:	b085      	sub	sp, #20
 8016e7a:	0007      	movs	r7, r0
 8016e7c:	0011      	movs	r1, r2
 8016e7e:	0028      	movs	r0, r5
 8016e80:	0014      	movs	r4, r2
 8016e82:	f7ff ffdd 	bl	8016e40 <__mcmp>
 8016e86:	1e06      	subs	r6, r0, #0
 8016e88:	d108      	bne.n	8016e9c <__mdiff+0x28>
 8016e8a:	0001      	movs	r1, r0
 8016e8c:	0038      	movs	r0, r7
 8016e8e:	f7ff fd84 	bl	801699a <_Balloc>
 8016e92:	2301      	movs	r3, #1
 8016e94:	6146      	str	r6, [r0, #20]
 8016e96:	6103      	str	r3, [r0, #16]
 8016e98:	b005      	add	sp, #20
 8016e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	9301      	str	r3, [sp, #4]
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	db04      	blt.n	8016eae <__mdiff+0x3a>
 8016ea4:	0023      	movs	r3, r4
 8016ea6:	002c      	movs	r4, r5
 8016ea8:	001d      	movs	r5, r3
 8016eaa:	2300      	movs	r3, #0
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	6861      	ldr	r1, [r4, #4]
 8016eb0:	0038      	movs	r0, r7
 8016eb2:	f7ff fd72 	bl	801699a <_Balloc>
 8016eb6:	002f      	movs	r7, r5
 8016eb8:	2200      	movs	r2, #0
 8016eba:	9b01      	ldr	r3, [sp, #4]
 8016ebc:	6926      	ldr	r6, [r4, #16]
 8016ebe:	60c3      	str	r3, [r0, #12]
 8016ec0:	3414      	adds	r4, #20
 8016ec2:	00b3      	lsls	r3, r6, #2
 8016ec4:	18e3      	adds	r3, r4, r3
 8016ec6:	9302      	str	r3, [sp, #8]
 8016ec8:	692b      	ldr	r3, [r5, #16]
 8016eca:	3714      	adds	r7, #20
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	18fb      	adds	r3, r7, r3
 8016ed0:	9303      	str	r3, [sp, #12]
 8016ed2:	0003      	movs	r3, r0
 8016ed4:	4694      	mov	ip, r2
 8016ed6:	3314      	adds	r3, #20
 8016ed8:	cc20      	ldmia	r4!, {r5}
 8016eda:	cf04      	ldmia	r7!, {r2}
 8016edc:	9201      	str	r2, [sp, #4]
 8016ede:	b2aa      	uxth	r2, r5
 8016ee0:	4494      	add	ip, r2
 8016ee2:	466a      	mov	r2, sp
 8016ee4:	4661      	mov	r1, ip
 8016ee6:	8892      	ldrh	r2, [r2, #4]
 8016ee8:	0c2d      	lsrs	r5, r5, #16
 8016eea:	1a8a      	subs	r2, r1, r2
 8016eec:	9901      	ldr	r1, [sp, #4]
 8016eee:	0c09      	lsrs	r1, r1, #16
 8016ef0:	1a69      	subs	r1, r5, r1
 8016ef2:	1415      	asrs	r5, r2, #16
 8016ef4:	1949      	adds	r1, r1, r5
 8016ef6:	140d      	asrs	r5, r1, #16
 8016ef8:	b292      	uxth	r2, r2
 8016efa:	0409      	lsls	r1, r1, #16
 8016efc:	430a      	orrs	r2, r1
 8016efe:	601a      	str	r2, [r3, #0]
 8016f00:	9a03      	ldr	r2, [sp, #12]
 8016f02:	46ac      	mov	ip, r5
 8016f04:	3304      	adds	r3, #4
 8016f06:	42ba      	cmp	r2, r7
 8016f08:	d8e6      	bhi.n	8016ed8 <__mdiff+0x64>
 8016f0a:	9902      	ldr	r1, [sp, #8]
 8016f0c:	001a      	movs	r2, r3
 8016f0e:	428c      	cmp	r4, r1
 8016f10:	d305      	bcc.n	8016f1e <__mdiff+0xaa>
 8016f12:	3a04      	subs	r2, #4
 8016f14:	6813      	ldr	r3, [r2, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d00e      	beq.n	8016f38 <__mdiff+0xc4>
 8016f1a:	6106      	str	r6, [r0, #16]
 8016f1c:	e7bc      	b.n	8016e98 <__mdiff+0x24>
 8016f1e:	cc04      	ldmia	r4!, {r2}
 8016f20:	b291      	uxth	r1, r2
 8016f22:	4461      	add	r1, ip
 8016f24:	140d      	asrs	r5, r1, #16
 8016f26:	0c12      	lsrs	r2, r2, #16
 8016f28:	1952      	adds	r2, r2, r5
 8016f2a:	1415      	asrs	r5, r2, #16
 8016f2c:	b289      	uxth	r1, r1
 8016f2e:	0412      	lsls	r2, r2, #16
 8016f30:	430a      	orrs	r2, r1
 8016f32:	46ac      	mov	ip, r5
 8016f34:	c304      	stmia	r3!, {r2}
 8016f36:	e7e8      	b.n	8016f0a <__mdiff+0x96>
 8016f38:	3e01      	subs	r6, #1
 8016f3a:	e7ea      	b.n	8016f12 <__mdiff+0x9e>

08016f3c <__ulp>:
 8016f3c:	000b      	movs	r3, r1
 8016f3e:	4910      	ldr	r1, [pc, #64]	; (8016f80 <__ulp+0x44>)
 8016f40:	b510      	push	{r4, lr}
 8016f42:	4019      	ands	r1, r3
 8016f44:	4b0f      	ldr	r3, [pc, #60]	; (8016f84 <__ulp+0x48>)
 8016f46:	18c9      	adds	r1, r1, r3
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	dd04      	ble.n	8016f56 <__ulp+0x1a>
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	000b      	movs	r3, r1
 8016f50:	0010      	movs	r0, r2
 8016f52:	0019      	movs	r1, r3
 8016f54:	bd10      	pop	{r4, pc}
 8016f56:	4249      	negs	r1, r1
 8016f58:	1509      	asrs	r1, r1, #20
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	2913      	cmp	r1, #19
 8016f60:	dc04      	bgt.n	8016f6c <__ulp+0x30>
 8016f62:	2080      	movs	r0, #128	; 0x80
 8016f64:	0300      	lsls	r0, r0, #12
 8016f66:	4108      	asrs	r0, r1
 8016f68:	0003      	movs	r3, r0
 8016f6a:	e7f1      	b.n	8016f50 <__ulp+0x14>
 8016f6c:	3914      	subs	r1, #20
 8016f6e:	2001      	movs	r0, #1
 8016f70:	291e      	cmp	r1, #30
 8016f72:	dc02      	bgt.n	8016f7a <__ulp+0x3e>
 8016f74:	241f      	movs	r4, #31
 8016f76:	1a61      	subs	r1, r4, r1
 8016f78:	4088      	lsls	r0, r1
 8016f7a:	0002      	movs	r2, r0
 8016f7c:	e7e8      	b.n	8016f50 <__ulp+0x14>
 8016f7e:	46c0      	nop			; (mov r8, r8)
 8016f80:	7ff00000 	.word	0x7ff00000
 8016f84:	fcc00000 	.word	0xfcc00000

08016f88 <__b2d>:
 8016f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f8a:	0006      	movs	r6, r0
 8016f8c:	6903      	ldr	r3, [r0, #16]
 8016f8e:	3614      	adds	r6, #20
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	18f3      	adds	r3, r6, r3
 8016f94:	1f1d      	subs	r5, r3, #4
 8016f96:	682c      	ldr	r4, [r5, #0]
 8016f98:	000f      	movs	r7, r1
 8016f9a:	0020      	movs	r0, r4
 8016f9c:	9301      	str	r3, [sp, #4]
 8016f9e:	f7ff fdc9 	bl	8016b34 <__hi0bits>
 8016fa2:	2320      	movs	r3, #32
 8016fa4:	1a1b      	subs	r3, r3, r0
 8016fa6:	603b      	str	r3, [r7, #0]
 8016fa8:	491c      	ldr	r1, [pc, #112]	; (801701c <__b2d+0x94>)
 8016faa:	280a      	cmp	r0, #10
 8016fac:	dc16      	bgt.n	8016fdc <__b2d+0x54>
 8016fae:	230b      	movs	r3, #11
 8016fb0:	0027      	movs	r7, r4
 8016fb2:	1a1b      	subs	r3, r3, r0
 8016fb4:	40df      	lsrs	r7, r3
 8016fb6:	4339      	orrs	r1, r7
 8016fb8:	469c      	mov	ip, r3
 8016fba:	000b      	movs	r3, r1
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	42ae      	cmp	r6, r5
 8016fc0:	d202      	bcs.n	8016fc8 <__b2d+0x40>
 8016fc2:	9901      	ldr	r1, [sp, #4]
 8016fc4:	3908      	subs	r1, #8
 8016fc6:	6809      	ldr	r1, [r1, #0]
 8016fc8:	3015      	adds	r0, #21
 8016fca:	4084      	lsls	r4, r0
 8016fcc:	4660      	mov	r0, ip
 8016fce:	40c1      	lsrs	r1, r0
 8016fd0:	430c      	orrs	r4, r1
 8016fd2:	0022      	movs	r2, r4
 8016fd4:	0010      	movs	r0, r2
 8016fd6:	0019      	movs	r1, r3
 8016fd8:	b003      	add	sp, #12
 8016fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fdc:	2700      	movs	r7, #0
 8016fde:	42ae      	cmp	r6, r5
 8016fe0:	d202      	bcs.n	8016fe8 <__b2d+0x60>
 8016fe2:	9d01      	ldr	r5, [sp, #4]
 8016fe4:	3d08      	subs	r5, #8
 8016fe6:	682f      	ldr	r7, [r5, #0]
 8016fe8:	380b      	subs	r0, #11
 8016fea:	4684      	mov	ip, r0
 8016fec:	1e03      	subs	r3, r0, #0
 8016fee:	d012      	beq.n	8017016 <__b2d+0x8e>
 8016ff0:	409c      	lsls	r4, r3
 8016ff2:	2020      	movs	r0, #32
 8016ff4:	4321      	orrs	r1, r4
 8016ff6:	003c      	movs	r4, r7
 8016ff8:	1ac0      	subs	r0, r0, r3
 8016ffa:	40c4      	lsrs	r4, r0
 8016ffc:	4321      	orrs	r1, r4
 8016ffe:	000b      	movs	r3, r1
 8017000:	2100      	movs	r1, #0
 8017002:	42b5      	cmp	r5, r6
 8017004:	d901      	bls.n	801700a <__b2d+0x82>
 8017006:	3d04      	subs	r5, #4
 8017008:	6829      	ldr	r1, [r5, #0]
 801700a:	4664      	mov	r4, ip
 801700c:	40c1      	lsrs	r1, r0
 801700e:	40a7      	lsls	r7, r4
 8017010:	430f      	orrs	r7, r1
 8017012:	003a      	movs	r2, r7
 8017014:	e7de      	b.n	8016fd4 <__b2d+0x4c>
 8017016:	4321      	orrs	r1, r4
 8017018:	000b      	movs	r3, r1
 801701a:	e7fa      	b.n	8017012 <__b2d+0x8a>
 801701c:	3ff00000 	.word	0x3ff00000

08017020 <__d2b>:
 8017020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017022:	001d      	movs	r5, r3
 8017024:	2101      	movs	r1, #1
 8017026:	0014      	movs	r4, r2
 8017028:	9f08      	ldr	r7, [sp, #32]
 801702a:	f7ff fcb6 	bl	801699a <_Balloc>
 801702e:	032b      	lsls	r3, r5, #12
 8017030:	006d      	lsls	r5, r5, #1
 8017032:	0006      	movs	r6, r0
 8017034:	0b1b      	lsrs	r3, r3, #12
 8017036:	0d6d      	lsrs	r5, r5, #21
 8017038:	d124      	bne.n	8017084 <__d2b+0x64>
 801703a:	9301      	str	r3, [sp, #4]
 801703c:	2c00      	cmp	r4, #0
 801703e:	d027      	beq.n	8017090 <__d2b+0x70>
 8017040:	4668      	mov	r0, sp
 8017042:	9400      	str	r4, [sp, #0]
 8017044:	f7ff fd90 	bl	8016b68 <__lo0bits>
 8017048:	9c00      	ldr	r4, [sp, #0]
 801704a:	2800      	cmp	r0, #0
 801704c:	d01e      	beq.n	801708c <__d2b+0x6c>
 801704e:	9b01      	ldr	r3, [sp, #4]
 8017050:	2120      	movs	r1, #32
 8017052:	001a      	movs	r2, r3
 8017054:	1a09      	subs	r1, r1, r0
 8017056:	408a      	lsls	r2, r1
 8017058:	40c3      	lsrs	r3, r0
 801705a:	4322      	orrs	r2, r4
 801705c:	6172      	str	r2, [r6, #20]
 801705e:	9301      	str	r3, [sp, #4]
 8017060:	9c01      	ldr	r4, [sp, #4]
 8017062:	61b4      	str	r4, [r6, #24]
 8017064:	1e63      	subs	r3, r4, #1
 8017066:	419c      	sbcs	r4, r3
 8017068:	3401      	adds	r4, #1
 801706a:	6134      	str	r4, [r6, #16]
 801706c:	2d00      	cmp	r5, #0
 801706e:	d018      	beq.n	80170a2 <__d2b+0x82>
 8017070:	4b12      	ldr	r3, [pc, #72]	; (80170bc <__d2b+0x9c>)
 8017072:	18ed      	adds	r5, r5, r3
 8017074:	2335      	movs	r3, #53	; 0x35
 8017076:	182d      	adds	r5, r5, r0
 8017078:	603d      	str	r5, [r7, #0]
 801707a:	1a18      	subs	r0, r3, r0
 801707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801707e:	6018      	str	r0, [r3, #0]
 8017080:	0030      	movs	r0, r6
 8017082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017084:	2280      	movs	r2, #128	; 0x80
 8017086:	0352      	lsls	r2, r2, #13
 8017088:	4313      	orrs	r3, r2
 801708a:	e7d6      	b.n	801703a <__d2b+0x1a>
 801708c:	6174      	str	r4, [r6, #20]
 801708e:	e7e7      	b.n	8017060 <__d2b+0x40>
 8017090:	a801      	add	r0, sp, #4
 8017092:	f7ff fd69 	bl	8016b68 <__lo0bits>
 8017096:	2401      	movs	r4, #1
 8017098:	9b01      	ldr	r3, [sp, #4]
 801709a:	6134      	str	r4, [r6, #16]
 801709c:	6173      	str	r3, [r6, #20]
 801709e:	3020      	adds	r0, #32
 80170a0:	e7e4      	b.n	801706c <__d2b+0x4c>
 80170a2:	4b07      	ldr	r3, [pc, #28]	; (80170c0 <__d2b+0xa0>)
 80170a4:	18c0      	adds	r0, r0, r3
 80170a6:	4b07      	ldr	r3, [pc, #28]	; (80170c4 <__d2b+0xa4>)
 80170a8:	6038      	str	r0, [r7, #0]
 80170aa:	18e3      	adds	r3, r4, r3
 80170ac:	009b      	lsls	r3, r3, #2
 80170ae:	18f3      	adds	r3, r6, r3
 80170b0:	6958      	ldr	r0, [r3, #20]
 80170b2:	f7ff fd3f 	bl	8016b34 <__hi0bits>
 80170b6:	0164      	lsls	r4, r4, #5
 80170b8:	1a20      	subs	r0, r4, r0
 80170ba:	e7df      	b.n	801707c <__d2b+0x5c>
 80170bc:	fffffbcd 	.word	0xfffffbcd
 80170c0:	fffffbce 	.word	0xfffffbce
 80170c4:	3fffffff 	.word	0x3fffffff

080170c8 <__ratio>:
 80170c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ca:	b085      	sub	sp, #20
 80170cc:	000f      	movs	r7, r1
 80170ce:	a902      	add	r1, sp, #8
 80170d0:	0006      	movs	r6, r0
 80170d2:	f7ff ff59 	bl	8016f88 <__b2d>
 80170d6:	0004      	movs	r4, r0
 80170d8:	000d      	movs	r5, r1
 80170da:	0038      	movs	r0, r7
 80170dc:	a903      	add	r1, sp, #12
 80170de:	9400      	str	r4, [sp, #0]
 80170e0:	9501      	str	r5, [sp, #4]
 80170e2:	f7ff ff51 	bl	8016f88 <__b2d>
 80170e6:	6936      	ldr	r6, [r6, #16]
 80170e8:	693f      	ldr	r7, [r7, #16]
 80170ea:	0002      	movs	r2, r0
 80170ec:	1bf7      	subs	r7, r6, r7
 80170ee:	017e      	lsls	r6, r7, #5
 80170f0:	46b4      	mov	ip, r6
 80170f2:	9f03      	ldr	r7, [sp, #12]
 80170f4:	9e02      	ldr	r6, [sp, #8]
 80170f6:	000b      	movs	r3, r1
 80170f8:	1bf6      	subs	r6, r6, r7
 80170fa:	4466      	add	r6, ip
 80170fc:	0537      	lsls	r7, r6, #20
 80170fe:	2e00      	cmp	r6, #0
 8017100:	dd07      	ble.n	8017112 <__ratio+0x4a>
 8017102:	1979      	adds	r1, r7, r5
 8017104:	9101      	str	r1, [sp, #4]
 8017106:	9800      	ldr	r0, [sp, #0]
 8017108:	9901      	ldr	r1, [sp, #4]
 801710a:	f7ea fb37 	bl	800177c <__aeabi_ddiv>
 801710e:	b005      	add	sp, #20
 8017110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017112:	1bcb      	subs	r3, r1, r7
 8017114:	e7f7      	b.n	8017106 <__ratio+0x3e>

08017116 <__copybits>:
 8017116:	0013      	movs	r3, r2
 8017118:	3901      	subs	r1, #1
 801711a:	b510      	push	{r4, lr}
 801711c:	1149      	asrs	r1, r1, #5
 801711e:	6912      	ldr	r2, [r2, #16]
 8017120:	3101      	adds	r1, #1
 8017122:	0089      	lsls	r1, r1, #2
 8017124:	3314      	adds	r3, #20
 8017126:	0092      	lsls	r2, r2, #2
 8017128:	1841      	adds	r1, r0, r1
 801712a:	189a      	adds	r2, r3, r2
 801712c:	429a      	cmp	r2, r3
 801712e:	d803      	bhi.n	8017138 <__copybits+0x22>
 8017130:	2300      	movs	r3, #0
 8017132:	4281      	cmp	r1, r0
 8017134:	d803      	bhi.n	801713e <__copybits+0x28>
 8017136:	bd10      	pop	{r4, pc}
 8017138:	cb10      	ldmia	r3!, {r4}
 801713a:	c010      	stmia	r0!, {r4}
 801713c:	e7f6      	b.n	801712c <__copybits+0x16>
 801713e:	c008      	stmia	r0!, {r3}
 8017140:	e7f7      	b.n	8017132 <__copybits+0x1c>

08017142 <__any_on>:
 8017142:	0002      	movs	r2, r0
 8017144:	6900      	ldr	r0, [r0, #16]
 8017146:	b510      	push	{r4, lr}
 8017148:	3214      	adds	r2, #20
 801714a:	114b      	asrs	r3, r1, #5
 801714c:	4298      	cmp	r0, r3
 801714e:	db12      	blt.n	8017176 <__any_on+0x34>
 8017150:	dd0b      	ble.n	801716a <__any_on+0x28>
 8017152:	201f      	movs	r0, #31
 8017154:	4001      	ands	r1, r0
 8017156:	d008      	beq.n	801716a <__any_on+0x28>
 8017158:	0098      	lsls	r0, r3, #2
 801715a:	5884      	ldr	r4, [r0, r2]
 801715c:	0020      	movs	r0, r4
 801715e:	40c8      	lsrs	r0, r1
 8017160:	4088      	lsls	r0, r1
 8017162:	0001      	movs	r1, r0
 8017164:	2001      	movs	r0, #1
 8017166:	428c      	cmp	r4, r1
 8017168:	d104      	bne.n	8017174 <__any_on+0x32>
 801716a:	009b      	lsls	r3, r3, #2
 801716c:	18d3      	adds	r3, r2, r3
 801716e:	4293      	cmp	r3, r2
 8017170:	d803      	bhi.n	801717a <__any_on+0x38>
 8017172:	2000      	movs	r0, #0
 8017174:	bd10      	pop	{r4, pc}
 8017176:	0003      	movs	r3, r0
 8017178:	e7f7      	b.n	801716a <__any_on+0x28>
 801717a:	3b04      	subs	r3, #4
 801717c:	6819      	ldr	r1, [r3, #0]
 801717e:	2900      	cmp	r1, #0
 8017180:	d0f5      	beq.n	801716e <__any_on+0x2c>
 8017182:	2001      	movs	r0, #1
 8017184:	e7f6      	b.n	8017174 <__any_on+0x32>

08017186 <_calloc_r>:
 8017186:	434a      	muls	r2, r1
 8017188:	b570      	push	{r4, r5, r6, lr}
 801718a:	0011      	movs	r1, r2
 801718c:	0014      	movs	r4, r2
 801718e:	f7fc fd61 	bl	8013c54 <_malloc_r>
 8017192:	1e05      	subs	r5, r0, #0
 8017194:	d003      	beq.n	801719e <_calloc_r+0x18>
 8017196:	0022      	movs	r2, r4
 8017198:	2100      	movs	r1, #0
 801719a:	f7fc fd09 	bl	8013bb0 <memset>
 801719e:	0028      	movs	r0, r5
 80171a0:	bd70      	pop	{r4, r5, r6, pc}

080171a2 <_realloc_r>:
 80171a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171a4:	0007      	movs	r7, r0
 80171a6:	000d      	movs	r5, r1
 80171a8:	0016      	movs	r6, r2
 80171aa:	2900      	cmp	r1, #0
 80171ac:	d105      	bne.n	80171ba <_realloc_r+0x18>
 80171ae:	0011      	movs	r1, r2
 80171b0:	f7fc fd50 	bl	8013c54 <_malloc_r>
 80171b4:	0004      	movs	r4, r0
 80171b6:	0020      	movs	r0, r4
 80171b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171ba:	2a00      	cmp	r2, #0
 80171bc:	d103      	bne.n	80171c6 <_realloc_r+0x24>
 80171be:	f7fc fcff 	bl	8013bc0 <_free_r>
 80171c2:	0034      	movs	r4, r6
 80171c4:	e7f7      	b.n	80171b6 <_realloc_r+0x14>
 80171c6:	f000 f986 	bl	80174d6 <_malloc_usable_size_r>
 80171ca:	002c      	movs	r4, r5
 80171cc:	42b0      	cmp	r0, r6
 80171ce:	d2f2      	bcs.n	80171b6 <_realloc_r+0x14>
 80171d0:	0031      	movs	r1, r6
 80171d2:	0038      	movs	r0, r7
 80171d4:	f7fc fd3e 	bl	8013c54 <_malloc_r>
 80171d8:	1e04      	subs	r4, r0, #0
 80171da:	d0ec      	beq.n	80171b6 <_realloc_r+0x14>
 80171dc:	0029      	movs	r1, r5
 80171de:	0032      	movs	r2, r6
 80171e0:	f7fc fcdd 	bl	8013b9e <memcpy>
 80171e4:	0029      	movs	r1, r5
 80171e6:	0038      	movs	r0, r7
 80171e8:	f7fc fcea 	bl	8013bc0 <_free_r>
 80171ec:	e7e3      	b.n	80171b6 <_realloc_r+0x14>
	...

080171f0 <__ssputs_r>:
 80171f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171f2:	688e      	ldr	r6, [r1, #8]
 80171f4:	b085      	sub	sp, #20
 80171f6:	0007      	movs	r7, r0
 80171f8:	000c      	movs	r4, r1
 80171fa:	9203      	str	r2, [sp, #12]
 80171fc:	9301      	str	r3, [sp, #4]
 80171fe:	429e      	cmp	r6, r3
 8017200:	d83c      	bhi.n	801727c <__ssputs_r+0x8c>
 8017202:	2390      	movs	r3, #144	; 0x90
 8017204:	898a      	ldrh	r2, [r1, #12]
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	421a      	tst	r2, r3
 801720a:	d034      	beq.n	8017276 <__ssputs_r+0x86>
 801720c:	2503      	movs	r5, #3
 801720e:	6909      	ldr	r1, [r1, #16]
 8017210:	6823      	ldr	r3, [r4, #0]
 8017212:	1a5b      	subs	r3, r3, r1
 8017214:	9302      	str	r3, [sp, #8]
 8017216:	6963      	ldr	r3, [r4, #20]
 8017218:	9802      	ldr	r0, [sp, #8]
 801721a:	435d      	muls	r5, r3
 801721c:	0feb      	lsrs	r3, r5, #31
 801721e:	195d      	adds	r5, r3, r5
 8017220:	9b01      	ldr	r3, [sp, #4]
 8017222:	106d      	asrs	r5, r5, #1
 8017224:	3301      	adds	r3, #1
 8017226:	181b      	adds	r3, r3, r0
 8017228:	42ab      	cmp	r3, r5
 801722a:	d900      	bls.n	801722e <__ssputs_r+0x3e>
 801722c:	001d      	movs	r5, r3
 801722e:	0553      	lsls	r3, r2, #21
 8017230:	d532      	bpl.n	8017298 <__ssputs_r+0xa8>
 8017232:	0029      	movs	r1, r5
 8017234:	0038      	movs	r0, r7
 8017236:	f7fc fd0d 	bl	8013c54 <_malloc_r>
 801723a:	1e06      	subs	r6, r0, #0
 801723c:	d109      	bne.n	8017252 <__ssputs_r+0x62>
 801723e:	230c      	movs	r3, #12
 8017240:	603b      	str	r3, [r7, #0]
 8017242:	2340      	movs	r3, #64	; 0x40
 8017244:	2001      	movs	r0, #1
 8017246:	89a2      	ldrh	r2, [r4, #12]
 8017248:	4240      	negs	r0, r0
 801724a:	4313      	orrs	r3, r2
 801724c:	81a3      	strh	r3, [r4, #12]
 801724e:	b005      	add	sp, #20
 8017250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017252:	9a02      	ldr	r2, [sp, #8]
 8017254:	6921      	ldr	r1, [r4, #16]
 8017256:	f7fc fca2 	bl	8013b9e <memcpy>
 801725a:	89a3      	ldrh	r3, [r4, #12]
 801725c:	4a14      	ldr	r2, [pc, #80]	; (80172b0 <__ssputs_r+0xc0>)
 801725e:	401a      	ands	r2, r3
 8017260:	2380      	movs	r3, #128	; 0x80
 8017262:	4313      	orrs	r3, r2
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	9b02      	ldr	r3, [sp, #8]
 8017268:	6126      	str	r6, [r4, #16]
 801726a:	18f6      	adds	r6, r6, r3
 801726c:	6026      	str	r6, [r4, #0]
 801726e:	6165      	str	r5, [r4, #20]
 8017270:	9e01      	ldr	r6, [sp, #4]
 8017272:	1aed      	subs	r5, r5, r3
 8017274:	60a5      	str	r5, [r4, #8]
 8017276:	9b01      	ldr	r3, [sp, #4]
 8017278:	429e      	cmp	r6, r3
 801727a:	d900      	bls.n	801727e <__ssputs_r+0x8e>
 801727c:	9e01      	ldr	r6, [sp, #4]
 801727e:	0032      	movs	r2, r6
 8017280:	9903      	ldr	r1, [sp, #12]
 8017282:	6820      	ldr	r0, [r4, #0]
 8017284:	f000 f914 	bl	80174b0 <memmove>
 8017288:	68a3      	ldr	r3, [r4, #8]
 801728a:	2000      	movs	r0, #0
 801728c:	1b9b      	subs	r3, r3, r6
 801728e:	60a3      	str	r3, [r4, #8]
 8017290:	6823      	ldr	r3, [r4, #0]
 8017292:	199e      	adds	r6, r3, r6
 8017294:	6026      	str	r6, [r4, #0]
 8017296:	e7da      	b.n	801724e <__ssputs_r+0x5e>
 8017298:	002a      	movs	r2, r5
 801729a:	0038      	movs	r0, r7
 801729c:	f7ff ff81 	bl	80171a2 <_realloc_r>
 80172a0:	1e06      	subs	r6, r0, #0
 80172a2:	d1e0      	bne.n	8017266 <__ssputs_r+0x76>
 80172a4:	6921      	ldr	r1, [r4, #16]
 80172a6:	0038      	movs	r0, r7
 80172a8:	f7fc fc8a 	bl	8013bc0 <_free_r>
 80172ac:	e7c7      	b.n	801723e <__ssputs_r+0x4e>
 80172ae:	46c0      	nop			; (mov r8, r8)
 80172b0:	fffffb7f 	.word	0xfffffb7f

080172b4 <_svfiprintf_r>:
 80172b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172b6:	b0a1      	sub	sp, #132	; 0x84
 80172b8:	9003      	str	r0, [sp, #12]
 80172ba:	001d      	movs	r5, r3
 80172bc:	898b      	ldrh	r3, [r1, #12]
 80172be:	000f      	movs	r7, r1
 80172c0:	0016      	movs	r6, r2
 80172c2:	061b      	lsls	r3, r3, #24
 80172c4:	d511      	bpl.n	80172ea <_svfiprintf_r+0x36>
 80172c6:	690b      	ldr	r3, [r1, #16]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d10e      	bne.n	80172ea <_svfiprintf_r+0x36>
 80172cc:	2140      	movs	r1, #64	; 0x40
 80172ce:	f7fc fcc1 	bl	8013c54 <_malloc_r>
 80172d2:	6038      	str	r0, [r7, #0]
 80172d4:	6138      	str	r0, [r7, #16]
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d105      	bne.n	80172e6 <_svfiprintf_r+0x32>
 80172da:	230c      	movs	r3, #12
 80172dc:	9a03      	ldr	r2, [sp, #12]
 80172de:	3801      	subs	r0, #1
 80172e0:	6013      	str	r3, [r2, #0]
 80172e2:	b021      	add	sp, #132	; 0x84
 80172e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172e6:	2340      	movs	r3, #64	; 0x40
 80172e8:	617b      	str	r3, [r7, #20]
 80172ea:	2300      	movs	r3, #0
 80172ec:	ac08      	add	r4, sp, #32
 80172ee:	6163      	str	r3, [r4, #20]
 80172f0:	3320      	adds	r3, #32
 80172f2:	7663      	strb	r3, [r4, #25]
 80172f4:	3310      	adds	r3, #16
 80172f6:	76a3      	strb	r3, [r4, #26]
 80172f8:	9507      	str	r5, [sp, #28]
 80172fa:	0035      	movs	r5, r6
 80172fc:	782b      	ldrb	r3, [r5, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d001      	beq.n	8017306 <_svfiprintf_r+0x52>
 8017302:	2b25      	cmp	r3, #37	; 0x25
 8017304:	d146      	bne.n	8017394 <_svfiprintf_r+0xe0>
 8017306:	1bab      	subs	r3, r5, r6
 8017308:	9305      	str	r3, [sp, #20]
 801730a:	d00c      	beq.n	8017326 <_svfiprintf_r+0x72>
 801730c:	0032      	movs	r2, r6
 801730e:	0039      	movs	r1, r7
 8017310:	9803      	ldr	r0, [sp, #12]
 8017312:	f7ff ff6d 	bl	80171f0 <__ssputs_r>
 8017316:	1c43      	adds	r3, r0, #1
 8017318:	d100      	bne.n	801731c <_svfiprintf_r+0x68>
 801731a:	e0ae      	b.n	801747a <_svfiprintf_r+0x1c6>
 801731c:	6962      	ldr	r2, [r4, #20]
 801731e:	9b05      	ldr	r3, [sp, #20]
 8017320:	4694      	mov	ip, r2
 8017322:	4463      	add	r3, ip
 8017324:	6163      	str	r3, [r4, #20]
 8017326:	782b      	ldrb	r3, [r5, #0]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d100      	bne.n	801732e <_svfiprintf_r+0x7a>
 801732c:	e0a5      	b.n	801747a <_svfiprintf_r+0x1c6>
 801732e:	2201      	movs	r2, #1
 8017330:	2300      	movs	r3, #0
 8017332:	4252      	negs	r2, r2
 8017334:	6062      	str	r2, [r4, #4]
 8017336:	a904      	add	r1, sp, #16
 8017338:	3254      	adds	r2, #84	; 0x54
 801733a:	1852      	adds	r2, r2, r1
 801733c:	1c6e      	adds	r6, r5, #1
 801733e:	6023      	str	r3, [r4, #0]
 8017340:	60e3      	str	r3, [r4, #12]
 8017342:	60a3      	str	r3, [r4, #8]
 8017344:	7013      	strb	r3, [r2, #0]
 8017346:	65a3      	str	r3, [r4, #88]	; 0x58
 8017348:	7831      	ldrb	r1, [r6, #0]
 801734a:	2205      	movs	r2, #5
 801734c:	4853      	ldr	r0, [pc, #332]	; (801749c <_svfiprintf_r+0x1e8>)
 801734e:	f7ff fb17 	bl	8016980 <memchr>
 8017352:	1c75      	adds	r5, r6, #1
 8017354:	2800      	cmp	r0, #0
 8017356:	d11f      	bne.n	8017398 <_svfiprintf_r+0xe4>
 8017358:	6822      	ldr	r2, [r4, #0]
 801735a:	06d3      	lsls	r3, r2, #27
 801735c:	d504      	bpl.n	8017368 <_svfiprintf_r+0xb4>
 801735e:	2353      	movs	r3, #83	; 0x53
 8017360:	a904      	add	r1, sp, #16
 8017362:	185b      	adds	r3, r3, r1
 8017364:	2120      	movs	r1, #32
 8017366:	7019      	strb	r1, [r3, #0]
 8017368:	0713      	lsls	r3, r2, #28
 801736a:	d504      	bpl.n	8017376 <_svfiprintf_r+0xc2>
 801736c:	2353      	movs	r3, #83	; 0x53
 801736e:	a904      	add	r1, sp, #16
 8017370:	185b      	adds	r3, r3, r1
 8017372:	212b      	movs	r1, #43	; 0x2b
 8017374:	7019      	strb	r1, [r3, #0]
 8017376:	7833      	ldrb	r3, [r6, #0]
 8017378:	2b2a      	cmp	r3, #42	; 0x2a
 801737a:	d016      	beq.n	80173aa <_svfiprintf_r+0xf6>
 801737c:	0035      	movs	r5, r6
 801737e:	2100      	movs	r1, #0
 8017380:	200a      	movs	r0, #10
 8017382:	68e3      	ldr	r3, [r4, #12]
 8017384:	782a      	ldrb	r2, [r5, #0]
 8017386:	1c6e      	adds	r6, r5, #1
 8017388:	3a30      	subs	r2, #48	; 0x30
 801738a:	2a09      	cmp	r2, #9
 801738c:	d94e      	bls.n	801742c <_svfiprintf_r+0x178>
 801738e:	2900      	cmp	r1, #0
 8017390:	d018      	beq.n	80173c4 <_svfiprintf_r+0x110>
 8017392:	e010      	b.n	80173b6 <_svfiprintf_r+0x102>
 8017394:	3501      	adds	r5, #1
 8017396:	e7b1      	b.n	80172fc <_svfiprintf_r+0x48>
 8017398:	4b40      	ldr	r3, [pc, #256]	; (801749c <_svfiprintf_r+0x1e8>)
 801739a:	6822      	ldr	r2, [r4, #0]
 801739c:	1ac0      	subs	r0, r0, r3
 801739e:	2301      	movs	r3, #1
 80173a0:	4083      	lsls	r3, r0
 80173a2:	4313      	orrs	r3, r2
 80173a4:	6023      	str	r3, [r4, #0]
 80173a6:	002e      	movs	r6, r5
 80173a8:	e7ce      	b.n	8017348 <_svfiprintf_r+0x94>
 80173aa:	9b07      	ldr	r3, [sp, #28]
 80173ac:	1d19      	adds	r1, r3, #4
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	9107      	str	r1, [sp, #28]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	db01      	blt.n	80173ba <_svfiprintf_r+0x106>
 80173b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80173b8:	e004      	b.n	80173c4 <_svfiprintf_r+0x110>
 80173ba:	425b      	negs	r3, r3
 80173bc:	60e3      	str	r3, [r4, #12]
 80173be:	2302      	movs	r3, #2
 80173c0:	4313      	orrs	r3, r2
 80173c2:	6023      	str	r3, [r4, #0]
 80173c4:	782b      	ldrb	r3, [r5, #0]
 80173c6:	2b2e      	cmp	r3, #46	; 0x2e
 80173c8:	d10a      	bne.n	80173e0 <_svfiprintf_r+0x12c>
 80173ca:	786b      	ldrb	r3, [r5, #1]
 80173cc:	2b2a      	cmp	r3, #42	; 0x2a
 80173ce:	d135      	bne.n	801743c <_svfiprintf_r+0x188>
 80173d0:	9b07      	ldr	r3, [sp, #28]
 80173d2:	3502      	adds	r5, #2
 80173d4:	1d1a      	adds	r2, r3, #4
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	9207      	str	r2, [sp, #28]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	db2b      	blt.n	8017436 <_svfiprintf_r+0x182>
 80173de:	9309      	str	r3, [sp, #36]	; 0x24
 80173e0:	4e2f      	ldr	r6, [pc, #188]	; (80174a0 <_svfiprintf_r+0x1ec>)
 80173e2:	7829      	ldrb	r1, [r5, #0]
 80173e4:	2203      	movs	r2, #3
 80173e6:	0030      	movs	r0, r6
 80173e8:	f7ff faca 	bl	8016980 <memchr>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d006      	beq.n	80173fe <_svfiprintf_r+0x14a>
 80173f0:	2340      	movs	r3, #64	; 0x40
 80173f2:	1b80      	subs	r0, r0, r6
 80173f4:	4083      	lsls	r3, r0
 80173f6:	6822      	ldr	r2, [r4, #0]
 80173f8:	3501      	adds	r5, #1
 80173fa:	4313      	orrs	r3, r2
 80173fc:	6023      	str	r3, [r4, #0]
 80173fe:	7829      	ldrb	r1, [r5, #0]
 8017400:	2206      	movs	r2, #6
 8017402:	4828      	ldr	r0, [pc, #160]	; (80174a4 <_svfiprintf_r+0x1f0>)
 8017404:	1c6e      	adds	r6, r5, #1
 8017406:	7621      	strb	r1, [r4, #24]
 8017408:	f7ff faba 	bl	8016980 <memchr>
 801740c:	2800      	cmp	r0, #0
 801740e:	d03c      	beq.n	801748a <_svfiprintf_r+0x1d6>
 8017410:	4b25      	ldr	r3, [pc, #148]	; (80174a8 <_svfiprintf_r+0x1f4>)
 8017412:	2b00      	cmp	r3, #0
 8017414:	d125      	bne.n	8017462 <_svfiprintf_r+0x1ae>
 8017416:	2207      	movs	r2, #7
 8017418:	9b07      	ldr	r3, [sp, #28]
 801741a:	3307      	adds	r3, #7
 801741c:	4393      	bics	r3, r2
 801741e:	3308      	adds	r3, #8
 8017420:	9307      	str	r3, [sp, #28]
 8017422:	6963      	ldr	r3, [r4, #20]
 8017424:	9a04      	ldr	r2, [sp, #16]
 8017426:	189b      	adds	r3, r3, r2
 8017428:	6163      	str	r3, [r4, #20]
 801742a:	e766      	b.n	80172fa <_svfiprintf_r+0x46>
 801742c:	4343      	muls	r3, r0
 801742e:	2101      	movs	r1, #1
 8017430:	189b      	adds	r3, r3, r2
 8017432:	0035      	movs	r5, r6
 8017434:	e7a6      	b.n	8017384 <_svfiprintf_r+0xd0>
 8017436:	2301      	movs	r3, #1
 8017438:	425b      	negs	r3, r3
 801743a:	e7d0      	b.n	80173de <_svfiprintf_r+0x12a>
 801743c:	2300      	movs	r3, #0
 801743e:	200a      	movs	r0, #10
 8017440:	001a      	movs	r2, r3
 8017442:	3501      	adds	r5, #1
 8017444:	6063      	str	r3, [r4, #4]
 8017446:	7829      	ldrb	r1, [r5, #0]
 8017448:	1c6e      	adds	r6, r5, #1
 801744a:	3930      	subs	r1, #48	; 0x30
 801744c:	2909      	cmp	r1, #9
 801744e:	d903      	bls.n	8017458 <_svfiprintf_r+0x1a4>
 8017450:	2b00      	cmp	r3, #0
 8017452:	d0c5      	beq.n	80173e0 <_svfiprintf_r+0x12c>
 8017454:	9209      	str	r2, [sp, #36]	; 0x24
 8017456:	e7c3      	b.n	80173e0 <_svfiprintf_r+0x12c>
 8017458:	4342      	muls	r2, r0
 801745a:	2301      	movs	r3, #1
 801745c:	1852      	adds	r2, r2, r1
 801745e:	0035      	movs	r5, r6
 8017460:	e7f1      	b.n	8017446 <_svfiprintf_r+0x192>
 8017462:	ab07      	add	r3, sp, #28
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	003a      	movs	r2, r7
 8017468:	4b10      	ldr	r3, [pc, #64]	; (80174ac <_svfiprintf_r+0x1f8>)
 801746a:	0021      	movs	r1, r4
 801746c:	9803      	ldr	r0, [sp, #12]
 801746e:	f7fc fceb 	bl	8013e48 <_printf_float>
 8017472:	9004      	str	r0, [sp, #16]
 8017474:	9b04      	ldr	r3, [sp, #16]
 8017476:	3301      	adds	r3, #1
 8017478:	d1d3      	bne.n	8017422 <_svfiprintf_r+0x16e>
 801747a:	89bb      	ldrh	r3, [r7, #12]
 801747c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801747e:	065b      	lsls	r3, r3, #25
 8017480:	d400      	bmi.n	8017484 <_svfiprintf_r+0x1d0>
 8017482:	e72e      	b.n	80172e2 <_svfiprintf_r+0x2e>
 8017484:	2001      	movs	r0, #1
 8017486:	4240      	negs	r0, r0
 8017488:	e72b      	b.n	80172e2 <_svfiprintf_r+0x2e>
 801748a:	ab07      	add	r3, sp, #28
 801748c:	9300      	str	r3, [sp, #0]
 801748e:	003a      	movs	r2, r7
 8017490:	4b06      	ldr	r3, [pc, #24]	; (80174ac <_svfiprintf_r+0x1f8>)
 8017492:	0021      	movs	r1, r4
 8017494:	9803      	ldr	r0, [sp, #12]
 8017496:	f7fc ff91 	bl	80143bc <_printf_i>
 801749a:	e7ea      	b.n	8017472 <_svfiprintf_r+0x1be>
 801749c:	0801a8cc 	.word	0x0801a8cc
 80174a0:	0801a8d2 	.word	0x0801a8d2
 80174a4:	0801a8d6 	.word	0x0801a8d6
 80174a8:	08013e49 	.word	0x08013e49
 80174ac:	080171f1 	.word	0x080171f1

080174b0 <memmove>:
 80174b0:	b510      	push	{r4, lr}
 80174b2:	4288      	cmp	r0, r1
 80174b4:	d902      	bls.n	80174bc <memmove+0xc>
 80174b6:	188b      	adds	r3, r1, r2
 80174b8:	4298      	cmp	r0, r3
 80174ba:	d303      	bcc.n	80174c4 <memmove+0x14>
 80174bc:	2300      	movs	r3, #0
 80174be:	e007      	b.n	80174d0 <memmove+0x20>
 80174c0:	5c8b      	ldrb	r3, [r1, r2]
 80174c2:	5483      	strb	r3, [r0, r2]
 80174c4:	3a01      	subs	r2, #1
 80174c6:	d2fb      	bcs.n	80174c0 <memmove+0x10>
 80174c8:	bd10      	pop	{r4, pc}
 80174ca:	5ccc      	ldrb	r4, [r1, r3]
 80174cc:	54c4      	strb	r4, [r0, r3]
 80174ce:	3301      	adds	r3, #1
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d1fa      	bne.n	80174ca <memmove+0x1a>
 80174d4:	e7f8      	b.n	80174c8 <memmove+0x18>

080174d6 <_malloc_usable_size_r>:
 80174d6:	1f0b      	subs	r3, r1, #4
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	1f18      	subs	r0, r3, #4
 80174dc:	2b00      	cmp	r3, #0
 80174de:	da01      	bge.n	80174e4 <_malloc_usable_size_r+0xe>
 80174e0:	580b      	ldr	r3, [r1, r0]
 80174e2:	18c0      	adds	r0, r0, r3
 80174e4:	4770      	bx	lr
	...

080174e8 <_sbrk>:
 80174e8:	4b05      	ldr	r3, [pc, #20]	; (8017500 <_sbrk+0x18>)
 80174ea:	0002      	movs	r2, r0
 80174ec:	6819      	ldr	r1, [r3, #0]
 80174ee:	2900      	cmp	r1, #0
 80174f0:	d101      	bne.n	80174f6 <_sbrk+0xe>
 80174f2:	4904      	ldr	r1, [pc, #16]	; (8017504 <_sbrk+0x1c>)
 80174f4:	6019      	str	r1, [r3, #0]
 80174f6:	6818      	ldr	r0, [r3, #0]
 80174f8:	1882      	adds	r2, r0, r2
 80174fa:	601a      	str	r2, [r3, #0]
 80174fc:	4770      	bx	lr
 80174fe:	46c0      	nop			; (mov r8, r8)
 8017500:	200061f4 	.word	0x200061f4
 8017504:	200067a8 	.word	0x200067a8

08017508 <_init>:
 8017508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801750a:	46c0      	nop			; (mov r8, r8)
 801750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801750e:	bc08      	pop	{r3}
 8017510:	469e      	mov	lr, r3
 8017512:	4770      	bx	lr

08017514 <_fini>:
 8017514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017516:	46c0      	nop			; (mov r8, r8)
 8017518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801751a:	bc08      	pop	{r3}
 801751c:	469e      	mov	lr, r3
 801751e:	4770      	bx	lr
