
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016648  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003378  08016708  08016708  00026708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a80  08019a80  00030294  2**0
                  CONTENTS
  4 .ARM          00000000  08019a80  08019a80  00030294  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019a80  08019a80  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a80  08019a80  00029a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a84  08019a84  00029a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  08019a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000288  2000000c  08019a94  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005dac  20000298  08019d1c  00030298  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006044  08019d1c  00036044  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   00055c18  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008415  00000000  00000000  00085ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a90d  00000000  00000000  0008e2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001d48  00000000  00000000  000a8bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002080  00000000  00000000  000aa940  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001b058  00000000  00000000  000ac9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00025d97  00000000  00000000  000c7a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00083ada  00000000  00000000  000ed7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00171289  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062d0  00000000  00000000  00171304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000298 	.word	0x20000298
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080166ec 	.word	0x080166ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000029c 	.word	0x2000029c
 8000100:	080166ec 	.word	0x080166ec

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fba7 	bl	8001b8c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 faff 	bl	8001a4c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fb99 	bl	8001b8c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fb8f 	bl	8001b8c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fb21 	bl	8001ac4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fb17 	bl	8001ac4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f909 	bl	80006c4 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f88b 	bl	80005d8 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f8fb 	bl	80006c4 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f8f1 	bl	80006c4 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f899 	bl	8000628 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f88f 	bl	8000628 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fbe7 	bl	8000d50 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fa1d 	bl	80009c8 <__aeabi_fsub>
 800058e:	f000 fbdf 	bl	8000d50 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 f929 	bl	8002808 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 fdbe 	bl	8002140 <__aeabi_dsub>
 80005c4:	f002 f920 	bl	8002808 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__eqsf2>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	0042      	lsls	r2, r0, #1
 80005dc:	024e      	lsls	r6, r1, #9
 80005de:	004c      	lsls	r4, r1, #1
 80005e0:	0245      	lsls	r5, r0, #9
 80005e2:	0a6d      	lsrs	r5, r5, #9
 80005e4:	0e12      	lsrs	r2, r2, #24
 80005e6:	0fc3      	lsrs	r3, r0, #31
 80005e8:	0a76      	lsrs	r6, r6, #9
 80005ea:	0e24      	lsrs	r4, r4, #24
 80005ec:	0fc9      	lsrs	r1, r1, #31
 80005ee:	2aff      	cmp	r2, #255	; 0xff
 80005f0:	d00f      	beq.n	8000612 <__eqsf2+0x3a>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d011      	beq.n	800061a <__eqsf2+0x42>
 80005f6:	2001      	movs	r0, #1
 80005f8:	42a2      	cmp	r2, r4
 80005fa:	d000      	beq.n	80005fe <__eqsf2+0x26>
 80005fc:	bd70      	pop	{r4, r5, r6, pc}
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d1fc      	bne.n	80005fc <__eqsf2+0x24>
 8000602:	428b      	cmp	r3, r1
 8000604:	d00d      	beq.n	8000622 <__eqsf2+0x4a>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d1f8      	bne.n	80005fc <__eqsf2+0x24>
 800060a:	0028      	movs	r0, r5
 800060c:	1e45      	subs	r5, r0, #1
 800060e:	41a8      	sbcs	r0, r5
 8000610:	e7f4      	b.n	80005fc <__eqsf2+0x24>
 8000612:	2001      	movs	r0, #1
 8000614:	2d00      	cmp	r5, #0
 8000616:	d1f1      	bne.n	80005fc <__eqsf2+0x24>
 8000618:	e7eb      	b.n	80005f2 <__eqsf2+0x1a>
 800061a:	2001      	movs	r0, #1
 800061c:	2e00      	cmp	r6, #0
 800061e:	d1ed      	bne.n	80005fc <__eqsf2+0x24>
 8000620:	e7e9      	b.n	80005f6 <__eqsf2+0x1e>
 8000622:	2000      	movs	r0, #0
 8000624:	e7ea      	b.n	80005fc <__eqsf2+0x24>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__gesf2>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	004a      	lsls	r2, r1, #1
 800062c:	024e      	lsls	r6, r1, #9
 800062e:	0245      	lsls	r5, r0, #9
 8000630:	0044      	lsls	r4, r0, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e24      	lsrs	r4, r4, #24
 8000636:	0fc3      	lsrs	r3, r0, #31
 8000638:	0a76      	lsrs	r6, r6, #9
 800063a:	0e12      	lsrs	r2, r2, #24
 800063c:	0fc9      	lsrs	r1, r1, #31
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d015      	beq.n	800066e <__gesf2+0x46>
 8000642:	2aff      	cmp	r2, #255	; 0xff
 8000644:	d00e      	beq.n	8000664 <__gesf2+0x3c>
 8000646:	2c00      	cmp	r4, #0
 8000648:	d115      	bne.n	8000676 <__gesf2+0x4e>
 800064a:	2a00      	cmp	r2, #0
 800064c:	d101      	bne.n	8000652 <__gesf2+0x2a>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d01c      	beq.n	800068c <__gesf2+0x64>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d014      	beq.n	8000680 <__gesf2+0x58>
 8000656:	428b      	cmp	r3, r1
 8000658:	d027      	beq.n	80006aa <__gesf2+0x82>
 800065a:	2002      	movs	r0, #2
 800065c:	3b01      	subs	r3, #1
 800065e:	4018      	ands	r0, r3
 8000660:	3801      	subs	r0, #1
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	2e00      	cmp	r6, #0
 8000666:	d0ee      	beq.n	8000646 <__gesf2+0x1e>
 8000668:	2002      	movs	r0, #2
 800066a:	4240      	negs	r0, r0
 800066c:	e7f9      	b.n	8000662 <__gesf2+0x3a>
 800066e:	2d00      	cmp	r5, #0
 8000670:	d1fa      	bne.n	8000668 <__gesf2+0x40>
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d00e      	beq.n	8000694 <__gesf2+0x6c>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d10e      	bne.n	8000698 <__gesf2+0x70>
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0ed      	beq.n	800065a <__gesf2+0x32>
 800067e:	e00b      	b.n	8000698 <__gesf2+0x70>
 8000680:	2301      	movs	r3, #1
 8000682:	3901      	subs	r1, #1
 8000684:	4399      	bics	r1, r3
 8000686:	0008      	movs	r0, r1
 8000688:	3001      	adds	r0, #1
 800068a:	e7ea      	b.n	8000662 <__gesf2+0x3a>
 800068c:	2000      	movs	r0, #0
 800068e:	2d00      	cmp	r5, #0
 8000690:	d0e7      	beq.n	8000662 <__gesf2+0x3a>
 8000692:	e7e2      	b.n	800065a <__gesf2+0x32>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d1e7      	bne.n	8000668 <__gesf2+0x40>
 8000698:	428b      	cmp	r3, r1
 800069a:	d1de      	bne.n	800065a <__gesf2+0x32>
 800069c:	4294      	cmp	r4, r2
 800069e:	dd05      	ble.n	80006ac <__gesf2+0x84>
 80006a0:	2102      	movs	r1, #2
 80006a2:	1e58      	subs	r0, r3, #1
 80006a4:	4008      	ands	r0, r1
 80006a6:	3801      	subs	r0, #1
 80006a8:	e7db      	b.n	8000662 <__gesf2+0x3a>
 80006aa:	2400      	movs	r4, #0
 80006ac:	42a2      	cmp	r2, r4
 80006ae:	dc04      	bgt.n	80006ba <__gesf2+0x92>
 80006b0:	42b5      	cmp	r5, r6
 80006b2:	d8d2      	bhi.n	800065a <__gesf2+0x32>
 80006b4:	2000      	movs	r0, #0
 80006b6:	42b5      	cmp	r5, r6
 80006b8:	d2d3      	bcs.n	8000662 <__gesf2+0x3a>
 80006ba:	1e58      	subs	r0, r3, #1
 80006bc:	2301      	movs	r3, #1
 80006be:	4398      	bics	r0, r3
 80006c0:	3001      	adds	r0, #1
 80006c2:	e7ce      	b.n	8000662 <__gesf2+0x3a>

080006c4 <__lesf2>:
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	0042      	lsls	r2, r0, #1
 80006c8:	0244      	lsls	r4, r0, #9
 80006ca:	024d      	lsls	r5, r1, #9
 80006cc:	0fc3      	lsrs	r3, r0, #31
 80006ce:	0048      	lsls	r0, r1, #1
 80006d0:	0a64      	lsrs	r4, r4, #9
 80006d2:	0e12      	lsrs	r2, r2, #24
 80006d4:	0a6d      	lsrs	r5, r5, #9
 80006d6:	0e00      	lsrs	r0, r0, #24
 80006d8:	0fc9      	lsrs	r1, r1, #31
 80006da:	2aff      	cmp	r2, #255	; 0xff
 80006dc:	d012      	beq.n	8000704 <__lesf2+0x40>
 80006de:	28ff      	cmp	r0, #255	; 0xff
 80006e0:	d00c      	beq.n	80006fc <__lesf2+0x38>
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	d112      	bne.n	800070c <__lesf2+0x48>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d119      	bne.n	800071e <__lesf2+0x5a>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d117      	bne.n	800071e <__lesf2+0x5a>
 80006ee:	2c00      	cmp	r4, #0
 80006f0:	d02b      	beq.n	800074a <__lesf2+0x86>
 80006f2:	2002      	movs	r0, #2
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4018      	ands	r0, r3
 80006f8:	3801      	subs	r0, #1
 80006fa:	e026      	b.n	800074a <__lesf2+0x86>
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0f0      	beq.n	80006e2 <__lesf2+0x1e>
 8000700:	2002      	movs	r0, #2
 8000702:	e022      	b.n	800074a <__lesf2+0x86>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d1fb      	bne.n	8000700 <__lesf2+0x3c>
 8000708:	28ff      	cmp	r0, #255	; 0xff
 800070a:	d01f      	beq.n	800074c <__lesf2+0x88>
 800070c:	2800      	cmp	r0, #0
 800070e:	d11f      	bne.n	8000750 <__lesf2+0x8c>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d11d      	bne.n	8000750 <__lesf2+0x8c>
 8000714:	2002      	movs	r0, #2
 8000716:	3b01      	subs	r3, #1
 8000718:	4018      	ands	r0, r3
 800071a:	3801      	subs	r0, #1
 800071c:	e015      	b.n	800074a <__lesf2+0x86>
 800071e:	2c00      	cmp	r4, #0
 8000720:	d00e      	beq.n	8000740 <__lesf2+0x7c>
 8000722:	428b      	cmp	r3, r1
 8000724:	d1e5      	bne.n	80006f2 <__lesf2+0x2e>
 8000726:	2200      	movs	r2, #0
 8000728:	4290      	cmp	r0, r2
 800072a:	dc04      	bgt.n	8000736 <__lesf2+0x72>
 800072c:	42ac      	cmp	r4, r5
 800072e:	d8e0      	bhi.n	80006f2 <__lesf2+0x2e>
 8000730:	2000      	movs	r0, #0
 8000732:	42ac      	cmp	r4, r5
 8000734:	d209      	bcs.n	800074a <__lesf2+0x86>
 8000736:	1e58      	subs	r0, r3, #1
 8000738:	2301      	movs	r3, #1
 800073a:	4398      	bics	r0, r3
 800073c:	3001      	adds	r0, #1
 800073e:	e004      	b.n	800074a <__lesf2+0x86>
 8000740:	2301      	movs	r3, #1
 8000742:	3901      	subs	r1, #1
 8000744:	4399      	bics	r1, r3
 8000746:	0008      	movs	r0, r1
 8000748:	3001      	adds	r0, #1
 800074a:	bd30      	pop	{r4, r5, pc}
 800074c:	2d00      	cmp	r5, #0
 800074e:	d1d7      	bne.n	8000700 <__lesf2+0x3c>
 8000750:	428b      	cmp	r3, r1
 8000752:	d1ce      	bne.n	80006f2 <__lesf2+0x2e>
 8000754:	4282      	cmp	r2, r0
 8000756:	dde7      	ble.n	8000728 <__lesf2+0x64>
 8000758:	2102      	movs	r1, #2
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4008      	ands	r0, r1
 800075e:	3801      	subs	r0, #1
 8000760:	e7f3      	b.n	800074a <__lesf2+0x86>
 8000762:	46c0      	nop			; (mov r8, r8)

08000764 <__aeabi_fmul>:
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	464e      	mov	r6, r9
 8000768:	4657      	mov	r7, sl
 800076a:	4645      	mov	r5, r8
 800076c:	46de      	mov	lr, fp
 800076e:	b5e0      	push	{r5, r6, r7, lr}
 8000770:	0243      	lsls	r3, r0, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	0045      	lsls	r5, r0, #1
 8000776:	b083      	sub	sp, #12
 8000778:	1c0f      	adds	r7, r1, #0
 800077a:	4699      	mov	r9, r3
 800077c:	0e2d      	lsrs	r5, r5, #24
 800077e:	0fc6      	lsrs	r6, r0, #31
 8000780:	2d00      	cmp	r5, #0
 8000782:	d057      	beq.n	8000834 <__aeabi_fmul+0xd0>
 8000784:	2dff      	cmp	r5, #255	; 0xff
 8000786:	d024      	beq.n	80007d2 <__aeabi_fmul+0x6e>
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	04c0      	lsls	r0, r0, #19
 800078e:	4318      	orrs	r0, r3
 8000790:	2300      	movs	r3, #0
 8000792:	4681      	mov	r9, r0
 8000794:	469a      	mov	sl, r3
 8000796:	469b      	mov	fp, r3
 8000798:	3d7f      	subs	r5, #127	; 0x7f
 800079a:	027c      	lsls	r4, r7, #9
 800079c:	007a      	lsls	r2, r7, #1
 800079e:	0ffb      	lsrs	r3, r7, #31
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	0e12      	lsrs	r2, r2, #24
 80007a4:	4698      	mov	r8, r3
 80007a6:	d023      	beq.n	80007f0 <__aeabi_fmul+0x8c>
 80007a8:	2aff      	cmp	r2, #255	; 0xff
 80007aa:	d04b      	beq.n	8000844 <__aeabi_fmul+0xe0>
 80007ac:	00e3      	lsls	r3, r4, #3
 80007ae:	2480      	movs	r4, #128	; 0x80
 80007b0:	2000      	movs	r0, #0
 80007b2:	04e4      	lsls	r4, r4, #19
 80007b4:	3a7f      	subs	r2, #127	; 0x7f
 80007b6:	431c      	orrs	r4, r3
 80007b8:	18ad      	adds	r5, r5, r2
 80007ba:	1c6b      	adds	r3, r5, #1
 80007bc:	4647      	mov	r7, r8
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	4653      	mov	r3, sl
 80007c2:	4077      	eors	r7, r6
 80007c4:	003a      	movs	r2, r7
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d848      	bhi.n	800085c <__aeabi_fmul+0xf8>
 80007ca:	497d      	ldr	r1, [pc, #500]	; (80009c0 <__aeabi_fmul+0x25c>)
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	58cb      	ldr	r3, [r1, r3]
 80007d0:	469f      	mov	pc, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fmul+0x74>
 80007d6:	e085      	b.n	80008e4 <__aeabi_fmul+0x180>
 80007d8:	3308      	adds	r3, #8
 80007da:	469a      	mov	sl, r3
 80007dc:	3b06      	subs	r3, #6
 80007de:	469b      	mov	fp, r3
 80007e0:	027c      	lsls	r4, r7, #9
 80007e2:	007a      	lsls	r2, r7, #1
 80007e4:	0ffb      	lsrs	r3, r7, #31
 80007e6:	25ff      	movs	r5, #255	; 0xff
 80007e8:	0a64      	lsrs	r4, r4, #9
 80007ea:	0e12      	lsrs	r2, r2, #24
 80007ec:	4698      	mov	r8, r3
 80007ee:	d1db      	bne.n	80007a8 <__aeabi_fmul+0x44>
 80007f0:	2c00      	cmp	r4, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fmul+0x92>
 80007f4:	e090      	b.n	8000918 <__aeabi_fmul+0x1b4>
 80007f6:	4652      	mov	r2, sl
 80007f8:	2301      	movs	r3, #1
 80007fa:	431a      	orrs	r2, r3
 80007fc:	4692      	mov	sl, r2
 80007fe:	2001      	movs	r0, #1
 8000800:	e7db      	b.n	80007ba <__aeabi_fmul+0x56>
 8000802:	464c      	mov	r4, r9
 8000804:	4658      	mov	r0, fp
 8000806:	0017      	movs	r7, r2
 8000808:	2802      	cmp	r0, #2
 800080a:	d024      	beq.n	8000856 <__aeabi_fmul+0xf2>
 800080c:	2803      	cmp	r0, #3
 800080e:	d100      	bne.n	8000812 <__aeabi_fmul+0xae>
 8000810:	e0cf      	b.n	80009b2 <__aeabi_fmul+0x24e>
 8000812:	2200      	movs	r2, #0
 8000814:	2300      	movs	r3, #0
 8000816:	2801      	cmp	r0, #1
 8000818:	d14d      	bne.n	80008b6 <__aeabi_fmul+0x152>
 800081a:	0258      	lsls	r0, r3, #9
 800081c:	05d2      	lsls	r2, r2, #23
 800081e:	0a40      	lsrs	r0, r0, #9
 8000820:	07ff      	lsls	r7, r7, #31
 8000822:	4310      	orrs	r0, r2
 8000824:	4338      	orrs	r0, r7
 8000826:	b003      	add	sp, #12
 8000828:	bc3c      	pop	{r2, r3, r4, r5}
 800082a:	4690      	mov	r8, r2
 800082c:	4699      	mov	r9, r3
 800082e:	46a2      	mov	sl, r4
 8000830:	46ab      	mov	fp, r5
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000834:	2b00      	cmp	r3, #0
 8000836:	d15b      	bne.n	80008f0 <__aeabi_fmul+0x18c>
 8000838:	2304      	movs	r3, #4
 800083a:	469a      	mov	sl, r3
 800083c:	3b03      	subs	r3, #3
 800083e:	2500      	movs	r5, #0
 8000840:	469b      	mov	fp, r3
 8000842:	e7aa      	b.n	800079a <__aeabi_fmul+0x36>
 8000844:	35ff      	adds	r5, #255	; 0xff
 8000846:	2c00      	cmp	r4, #0
 8000848:	d160      	bne.n	800090c <__aeabi_fmul+0x1a8>
 800084a:	4652      	mov	r2, sl
 800084c:	2302      	movs	r3, #2
 800084e:	431a      	orrs	r2, r3
 8000850:	4692      	mov	sl, r2
 8000852:	2002      	movs	r0, #2
 8000854:	e7b1      	b.n	80007ba <__aeabi_fmul+0x56>
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	2300      	movs	r3, #0
 800085a:	e7de      	b.n	800081a <__aeabi_fmul+0xb6>
 800085c:	464b      	mov	r3, r9
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	469c      	mov	ip, r3
 8000862:	464b      	mov	r3, r9
 8000864:	0426      	lsls	r6, r4, #16
 8000866:	0c36      	lsrs	r6, r6, #16
 8000868:	0418      	lsls	r0, r3, #16
 800086a:	4661      	mov	r1, ip
 800086c:	0033      	movs	r3, r6
 800086e:	0c22      	lsrs	r2, r4, #16
 8000870:	4664      	mov	r4, ip
 8000872:	0c00      	lsrs	r0, r0, #16
 8000874:	4343      	muls	r3, r0
 8000876:	434e      	muls	r6, r1
 8000878:	4350      	muls	r0, r2
 800087a:	4354      	muls	r4, r2
 800087c:	1980      	adds	r0, r0, r6
 800087e:	0c1a      	lsrs	r2, r3, #16
 8000880:	1812      	adds	r2, r2, r0
 8000882:	4296      	cmp	r6, r2
 8000884:	d903      	bls.n	800088e <__aeabi_fmul+0x12a>
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	0249      	lsls	r1, r1, #9
 800088a:	468c      	mov	ip, r1
 800088c:	4464      	add	r4, ip
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	0410      	lsls	r0, r2, #16
 8000894:	18c0      	adds	r0, r0, r3
 8000896:	0183      	lsls	r3, r0, #6
 8000898:	1e5e      	subs	r6, r3, #1
 800089a:	41b3      	sbcs	r3, r6
 800089c:	0e80      	lsrs	r0, r0, #26
 800089e:	4318      	orrs	r0, r3
 80008a0:	0c13      	lsrs	r3, r2, #16
 80008a2:	191b      	adds	r3, r3, r4
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	4303      	orrs	r3, r0
 80008a8:	001c      	movs	r4, r3
 80008aa:	0123      	lsls	r3, r4, #4
 80008ac:	d579      	bpl.n	80009a2 <__aeabi_fmul+0x23e>
 80008ae:	2301      	movs	r3, #1
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	401c      	ands	r4, r3
 80008b4:	4314      	orrs	r4, r2
 80008b6:	9a01      	ldr	r2, [sp, #4]
 80008b8:	327f      	adds	r2, #127	; 0x7f
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	dd4d      	ble.n	800095a <__aeabi_fmul+0x1f6>
 80008be:	0763      	lsls	r3, r4, #29
 80008c0:	d004      	beq.n	80008cc <__aeabi_fmul+0x168>
 80008c2:	230f      	movs	r3, #15
 80008c4:	4023      	ands	r3, r4
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x168>
 80008ca:	3404      	adds	r4, #4
 80008cc:	0123      	lsls	r3, r4, #4
 80008ce:	d503      	bpl.n	80008d8 <__aeabi_fmul+0x174>
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <__aeabi_fmul+0x260>)
 80008d2:	9a01      	ldr	r2, [sp, #4]
 80008d4:	401c      	ands	r4, r3
 80008d6:	3280      	adds	r2, #128	; 0x80
 80008d8:	2afe      	cmp	r2, #254	; 0xfe
 80008da:	dcbc      	bgt.n	8000856 <__aeabi_fmul+0xf2>
 80008dc:	01a3      	lsls	r3, r4, #6
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	e79a      	b.n	800081a <__aeabi_fmul+0xb6>
 80008e4:	230c      	movs	r3, #12
 80008e6:	469a      	mov	sl, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	25ff      	movs	r5, #255	; 0xff
 80008ec:	469b      	mov	fp, r3
 80008ee:	e754      	b.n	800079a <__aeabi_fmul+0x36>
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 f901 	bl	8002af8 <__clzsi2>
 80008f6:	464a      	mov	r2, r9
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	2576      	movs	r5, #118	; 0x76
 80008fc:	409a      	lsls	r2, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	426d      	negs	r5, r5
 8000902:	4691      	mov	r9, r2
 8000904:	1a2d      	subs	r5, r5, r0
 8000906:	469a      	mov	sl, r3
 8000908:	469b      	mov	fp, r3
 800090a:	e746      	b.n	800079a <__aeabi_fmul+0x36>
 800090c:	4652      	mov	r2, sl
 800090e:	2303      	movs	r3, #3
 8000910:	431a      	orrs	r2, r3
 8000912:	4692      	mov	sl, r2
 8000914:	2003      	movs	r0, #3
 8000916:	e750      	b.n	80007ba <__aeabi_fmul+0x56>
 8000918:	0020      	movs	r0, r4
 800091a:	f002 f8ed 	bl	8002af8 <__clzsi2>
 800091e:	1f43      	subs	r3, r0, #5
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	409c      	lsls	r4, r3
 8000924:	3d76      	subs	r5, #118	; 0x76
 8000926:	2000      	movs	r0, #0
 8000928:	e747      	b.n	80007ba <__aeabi_fmul+0x56>
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	2700      	movs	r7, #0
 800092e:	03db      	lsls	r3, r3, #15
 8000930:	22ff      	movs	r2, #255	; 0xff
 8000932:	e772      	b.n	800081a <__aeabi_fmul+0xb6>
 8000934:	4642      	mov	r2, r8
 8000936:	e766      	b.n	8000806 <__aeabi_fmul+0xa2>
 8000938:	464c      	mov	r4, r9
 800093a:	0032      	movs	r2, r6
 800093c:	4658      	mov	r0, fp
 800093e:	e762      	b.n	8000806 <__aeabi_fmul+0xa2>
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	464a      	mov	r2, r9
 8000944:	03db      	lsls	r3, r3, #15
 8000946:	421a      	tst	r2, r3
 8000948:	d022      	beq.n	8000990 <__aeabi_fmul+0x22c>
 800094a:	421c      	tst	r4, r3
 800094c:	d120      	bne.n	8000990 <__aeabi_fmul+0x22c>
 800094e:	4323      	orrs	r3, r4
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	0a5b      	lsrs	r3, r3, #9
 8000954:	4647      	mov	r7, r8
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	e75f      	b.n	800081a <__aeabi_fmul+0xb6>
 800095a:	2301      	movs	r3, #1
 800095c:	1a9a      	subs	r2, r3, r2
 800095e:	2a1b      	cmp	r2, #27
 8000960:	dc21      	bgt.n	80009a6 <__aeabi_fmul+0x242>
 8000962:	0023      	movs	r3, r4
 8000964:	9901      	ldr	r1, [sp, #4]
 8000966:	40d3      	lsrs	r3, r2
 8000968:	319e      	adds	r1, #158	; 0x9e
 800096a:	408c      	lsls	r4, r1
 800096c:	001a      	movs	r2, r3
 800096e:	0023      	movs	r3, r4
 8000970:	1e5c      	subs	r4, r3, #1
 8000972:	41a3      	sbcs	r3, r4
 8000974:	4313      	orrs	r3, r2
 8000976:	075a      	lsls	r2, r3, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fmul+0x220>
 800097a:	220f      	movs	r2, #15
 800097c:	401a      	ands	r2, r3
 800097e:	2a04      	cmp	r2, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fmul+0x220>
 8000982:	3304      	adds	r3, #4
 8000984:	015a      	lsls	r2, r3, #5
 8000986:	d411      	bmi.n	80009ac <__aeabi_fmul+0x248>
 8000988:	019b      	lsls	r3, r3, #6
 800098a:	0a5b      	lsrs	r3, r3, #9
 800098c:	2200      	movs	r2, #0
 800098e:	e744      	b.n	800081a <__aeabi_fmul+0xb6>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	464a      	mov	r2, r9
 8000994:	03db      	lsls	r3, r3, #15
 8000996:	4313      	orrs	r3, r2
 8000998:	025b      	lsls	r3, r3, #9
 800099a:	0a5b      	lsrs	r3, r3, #9
 800099c:	0037      	movs	r7, r6
 800099e:	22ff      	movs	r2, #255	; 0xff
 80009a0:	e73b      	b.n	800081a <__aeabi_fmul+0xb6>
 80009a2:	9501      	str	r5, [sp, #4]
 80009a4:	e787      	b.n	80008b6 <__aeabi_fmul+0x152>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2300      	movs	r3, #0
 80009aa:	e736      	b.n	800081a <__aeabi_fmul+0xb6>
 80009ac:	2201      	movs	r2, #1
 80009ae:	2300      	movs	r3, #0
 80009b0:	e733      	b.n	800081a <__aeabi_fmul+0xb6>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	4323      	orrs	r3, r4
 80009b8:	025b      	lsls	r3, r3, #9
 80009ba:	0a5b      	lsrs	r3, r3, #9
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	e72c      	b.n	800081a <__aeabi_fmul+0xb6>
 80009c0:	0801673c 	.word	0x0801673c
 80009c4:	f7ffffff 	.word	0xf7ffffff

080009c8 <__aeabi_fsub>:
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	4647      	mov	r7, r8
 80009cc:	46ce      	mov	lr, r9
 80009ce:	0044      	lsls	r4, r0, #1
 80009d0:	0fc2      	lsrs	r2, r0, #31
 80009d2:	b580      	push	{r7, lr}
 80009d4:	0247      	lsls	r7, r0, #9
 80009d6:	0248      	lsls	r0, r1, #9
 80009d8:	0a40      	lsrs	r0, r0, #9
 80009da:	4684      	mov	ip, r0
 80009dc:	4666      	mov	r6, ip
 80009de:	0048      	lsls	r0, r1, #1
 80009e0:	0a7f      	lsrs	r7, r7, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	00f6      	lsls	r6, r6, #3
 80009e6:	0025      	movs	r5, r4
 80009e8:	4690      	mov	r8, r2
 80009ea:	00fb      	lsls	r3, r7, #3
 80009ec:	0e00      	lsrs	r0, r0, #24
 80009ee:	0fc9      	lsrs	r1, r1, #31
 80009f0:	46b1      	mov	r9, r6
 80009f2:	28ff      	cmp	r0, #255	; 0xff
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x30>
 80009f6:	e085      	b.n	8000b04 <__aeabi_fsub+0x13c>
 80009f8:	2601      	movs	r6, #1
 80009fa:	4071      	eors	r1, r6
 80009fc:	1a26      	subs	r6, r4, r0
 80009fe:	4291      	cmp	r1, r2
 8000a00:	d057      	beq.n	8000ab2 <__aeabi_fsub+0xea>
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	dd43      	ble.n	8000a8e <__aeabi_fsub+0xc6>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fsub+0x44>
 8000a0a:	e07f      	b.n	8000b0c <__aeabi_fsub+0x144>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0x4c>
 8000a12:	e0aa      	b.n	8000b6a <__aeabi_fsub+0x1a2>
 8000a14:	3e01      	subs	r6, #1
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fsub+0x54>
 8000a1a:	e0f7      	b.n	8000c0c <__aeabi_fsub+0x244>
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	015a      	lsls	r2, r3, #5
 8000a20:	d400      	bmi.n	8000a24 <__aeabi_fsub+0x5c>
 8000a22:	e08b      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	099c      	lsrs	r4, r3, #6
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f002 f865 	bl	8002af8 <__clzsi2>
 8000a2e:	3805      	subs	r0, #5
 8000a30:	4084      	lsls	r4, r0
 8000a32:	4285      	cmp	r5, r0
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_fsub+0x70>
 8000a36:	e0d3      	b.n	8000be0 <__aeabi_fsub+0x218>
 8000a38:	1b45      	subs	r5, r0, r5
 8000a3a:	0023      	movs	r3, r4
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	3501      	adds	r5, #1
 8000a40:	40eb      	lsrs	r3, r5
 8000a42:	1b45      	subs	r5, r0, r5
 8000a44:	40ac      	lsls	r4, r5
 8000a46:	1e62      	subs	r2, r4, #1
 8000a48:	4194      	sbcs	r4, r2
 8000a4a:	4323      	orrs	r3, r4
 8000a4c:	2407      	movs	r4, #7
 8000a4e:	2500      	movs	r5, #0
 8000a50:	401c      	ands	r4, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	4641      	mov	r1, r8
 8000a56:	400a      	ands	r2, r1
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fsub+0x9e>
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	4019      	ands	r1, r3
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fsub+0x9e>
 8000a64:	3304      	adds	r3, #4
 8000a66:	0159      	lsls	r1, r3, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fsub+0xa4>
 8000a6a:	e080      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	b2ec      	uxtb	r4, r5
 8000a70:	2dff      	cmp	r5, #255	; 0xff
 8000a72:	d000      	beq.n	8000a76 <__aeabi_fsub+0xae>
 8000a74:	e0a3      	b.n	8000bbe <__aeabi_fsub+0x1f6>
 8000a76:	24ff      	movs	r4, #255	; 0xff
 8000a78:	2300      	movs	r3, #0
 8000a7a:	025b      	lsls	r3, r3, #9
 8000a7c:	05e4      	lsls	r4, r4, #23
 8000a7e:	0a58      	lsrs	r0, r3, #9
 8000a80:	07d2      	lsls	r2, r2, #31
 8000a82:	4320      	orrs	r0, r4
 8000a84:	4310      	orrs	r0, r2
 8000a86:	bc0c      	pop	{r2, r3}
 8000a88:	4690      	mov	r8, r2
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d174      	bne.n	8000b7c <__aeabi_fsub+0x1b4>
 8000a92:	1c60      	adds	r0, r4, #1
 8000a94:	b2c0      	uxtb	r0, r0
 8000a96:	2801      	cmp	r0, #1
 8000a98:	dc00      	bgt.n	8000a9c <__aeabi_fsub+0xd4>
 8000a9a:	e0a7      	b.n	8000bec <__aeabi_fsub+0x224>
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	1a9c      	subs	r4, r3, r2
 8000aa0:	0162      	lsls	r2, r4, #5
 8000aa2:	d500      	bpl.n	8000aa6 <__aeabi_fsub+0xde>
 8000aa4:	e0b6      	b.n	8000c14 <__aeabi_fsub+0x24c>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d1be      	bne.n	8000a28 <__aeabi_fsub+0x60>
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2400      	movs	r4, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e7e3      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	dc00      	bgt.n	8000ab8 <__aeabi_fsub+0xf0>
 8000ab6:	e085      	b.n	8000bc4 <__aeabi_fsub+0x1fc>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d046      	beq.n	8000b4a <__aeabi_fsub+0x182>
 8000abc:	2cff      	cmp	r4, #255	; 0xff
 8000abe:	d049      	beq.n	8000b54 <__aeabi_fsub+0x18c>
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	04d2      	lsls	r2, r2, #19
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	4681      	mov	r9, r0
 8000aca:	2201      	movs	r2, #1
 8000acc:	2e1b      	cmp	r6, #27
 8000ace:	dc09      	bgt.n	8000ae4 <__aeabi_fsub+0x11c>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	464c      	mov	r4, r9
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	4084      	lsls	r4, r0
 8000ad8:	464a      	mov	r2, r9
 8000ada:	0020      	movs	r0, r4
 8000adc:	40f2      	lsrs	r2, r6
 8000ade:	1e44      	subs	r4, r0, #1
 8000ae0:	41a0      	sbcs	r0, r4
 8000ae2:	4302      	orrs	r2, r0
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	015a      	lsls	r2, r3, #5
 8000ae8:	d528      	bpl.n	8000b3c <__aeabi_fsub+0x174>
 8000aea:	3501      	adds	r5, #1
 8000aec:	2dff      	cmp	r5, #255	; 0xff
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x12a>
 8000af0:	e0a8      	b.n	8000c44 <__aeabi_fsub+0x27c>
 8000af2:	2201      	movs	r2, #1
 8000af4:	2407      	movs	r4, #7
 8000af6:	4994      	ldr	r1, [pc, #592]	; (8000d48 <__aeabi_fsub+0x380>)
 8000af8:	401a      	ands	r2, r3
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	400b      	ands	r3, r1
 8000afe:	4313      	orrs	r3, r2
 8000b00:	401c      	ands	r4, r3
 8000b02:	e7a6      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x142>
 8000b08:	e778      	b.n	80009fc <__aeabi_fsub+0x34>
 8000b0a:	e775      	b.n	80009f8 <__aeabi_fsub+0x30>
 8000b0c:	2cff      	cmp	r4, #255	; 0xff
 8000b0e:	d054      	beq.n	8000bba <__aeabi_fsub+0x1f2>
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	4649      	mov	r1, r9
 8000b14:	04d2      	lsls	r2, r2, #19
 8000b16:	4311      	orrs	r1, r2
 8000b18:	4689      	mov	r9, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2e1b      	cmp	r6, #27
 8000b1e:	dc09      	bgt.n	8000b34 <__aeabi_fsub+0x16c>
 8000b20:	2120      	movs	r1, #32
 8000b22:	4648      	mov	r0, r9
 8000b24:	1b89      	subs	r1, r1, r6
 8000b26:	4088      	lsls	r0, r1
 8000b28:	464a      	mov	r2, r9
 8000b2a:	0001      	movs	r1, r0
 8000b2c:	40f2      	lsrs	r2, r6
 8000b2e:	1e48      	subs	r0, r1, #1
 8000b30:	4181      	sbcs	r1, r0
 8000b32:	430a      	orrs	r2, r1
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	015a      	lsls	r2, r3, #5
 8000b38:	d500      	bpl.n	8000b3c <__aeabi_fsub+0x174>
 8000b3a:	e773      	b.n	8000a24 <__aeabi_fsub+0x5c>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4641      	mov	r1, r8
 8000b40:	400a      	ands	r2, r1
 8000b42:	0759      	lsls	r1, r3, #29
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fsub+0x180>
 8000b46:	e789      	b.n	8000a5c <__aeabi_fsub+0x94>
 8000b48:	e011      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d158      	bne.n	8000c02 <__aeabi_fsub+0x23a>
 8000b50:	2cff      	cmp	r4, #255	; 0xff
 8000b52:	d10c      	bne.n	8000b6e <__aeabi_fsub+0x1a6>
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x194>
 8000b5a:	e78c      	b.n	8000a76 <__aeabi_fsub+0xae>
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	03c0      	lsls	r0, r0, #15
 8000b60:	4303      	orrs	r3, r0
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	0a5b      	lsrs	r3, r3, #9
 8000b66:	24ff      	movs	r4, #255	; 0xff
 8000b68:	e787      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000b6a:	2cff      	cmp	r4, #255	; 0xff
 8000b6c:	d025      	beq.n	8000bba <__aeabi_fsub+0x1f2>
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	2dff      	cmp	r5, #255	; 0xff
 8000b72:	d0f0      	beq.n	8000b56 <__aeabi_fsub+0x18e>
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	b2ec      	uxtb	r4, r5
 8000b7a:	e77e      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000b7c:	2c00      	cmp	r4, #0
 8000b7e:	d04d      	beq.n	8000c1c <__aeabi_fsub+0x254>
 8000b80:	28ff      	cmp	r0, #255	; 0xff
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fsub+0x1ee>
 8000b84:	2480      	movs	r4, #128	; 0x80
 8000b86:	04e4      	lsls	r4, r4, #19
 8000b88:	4272      	negs	r2, r6
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	2a1b      	cmp	r2, #27
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_fsub+0x1ca>
 8000b90:	e0c4      	b.n	8000d1c <__aeabi_fsub+0x354>
 8000b92:	001c      	movs	r4, r3
 8000b94:	2520      	movs	r5, #32
 8000b96:	40d4      	lsrs	r4, r2
 8000b98:	1aaa      	subs	r2, r5, r2
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	4193      	sbcs	r3, r2
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	0005      	movs	r5, r0
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4688      	mov	r8, r1
 8000baa:	e738      	b.n	8000a1e <__aeabi_fsub+0x56>
 8000bac:	1c72      	adds	r2, r6, #1
 8000bae:	d0f8      	beq.n	8000ba2 <__aeabi_fsub+0x1da>
 8000bb0:	43f2      	mvns	r2, r6
 8000bb2:	28ff      	cmp	r0, #255	; 0xff
 8000bb4:	d1ea      	bne.n	8000b8c <__aeabi_fsub+0x1c4>
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	464b      	mov	r3, r9
 8000bba:	25ff      	movs	r5, #255	; 0xff
 8000bbc:	e7d7      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	0a5b      	lsrs	r3, r3, #9
 8000bc2:	e75a      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d141      	bne.n	8000c4c <__aeabi_fsub+0x284>
 8000bc8:	1c65      	adds	r5, r4, #1
 8000bca:	b2e9      	uxtb	r1, r5
 8000bcc:	2901      	cmp	r1, #1
 8000bce:	dd45      	ble.n	8000c5c <__aeabi_fsub+0x294>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x20e>
 8000bd4:	e74f      	b.n	8000a76 <__aeabi_fsub+0xae>
 8000bd6:	2407      	movs	r4, #7
 8000bd8:	444b      	add	r3, r9
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	401c      	ands	r4, r3
 8000bde:	e738      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000be0:	2207      	movs	r2, #7
 8000be2:	4b5a      	ldr	r3, [pc, #360]	; (8000d4c <__aeabi_fsub+0x384>)
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	4023      	ands	r3, r4
 8000be8:	4014      	ands	r4, r2
 8000bea:	e732      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d11d      	bne.n	8000c2c <__aeabi_fsub+0x264>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d17a      	bne.n	8000cea <__aeabi_fsub+0x322>
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0x234>
 8000bfa:	e091      	b.n	8000d20 <__aeabi_fsub+0x358>
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	2500      	movs	r5, #0
 8000c00:	e7b5      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c02:	3e01      	subs	r6, #1
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d119      	bne.n	8000c3c <__aeabi_fsub+0x274>
 8000c08:	444b      	add	r3, r9
 8000c0a:	e76c      	b.n	8000ae6 <__aeabi_fsub+0x11e>
 8000c0c:	2cff      	cmp	r4, #255	; 0xff
 8000c0e:	d184      	bne.n	8000b1a <__aeabi_fsub+0x152>
 8000c10:	25ff      	movs	r5, #255	; 0xff
 8000c12:	e7ac      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c14:	464a      	mov	r2, r9
 8000c16:	4688      	mov	r8, r1
 8000c18:	1ad4      	subs	r4, r2, r3
 8000c1a:	e705      	b.n	8000a28 <__aeabi_fsub+0x60>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1c5      	bne.n	8000bac <__aeabi_fsub+0x1e4>
 8000c20:	000a      	movs	r2, r1
 8000c22:	28ff      	cmp	r0, #255	; 0xff
 8000c24:	d0c8      	beq.n	8000bb8 <__aeabi_fsub+0x1f0>
 8000c26:	0005      	movs	r5, r0
 8000c28:	464b      	mov	r3, r9
 8000c2a:	e7a0      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d149      	bne.n	8000cc4 <__aeabi_fsub+0x2fc>
 8000c30:	464b      	mov	r3, r9
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d077      	beq.n	8000d26 <__aeabi_fsub+0x35e>
 8000c36:	000a      	movs	r2, r1
 8000c38:	25ff      	movs	r5, #255	; 0xff
 8000c3a:	e798      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fsub+0x27a>
 8000c40:	e743      	b.n	8000aca <__aeabi_fsub+0x102>
 8000c42:	e787      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000c44:	000a      	movs	r2, r1
 8000c46:	24ff      	movs	r4, #255	; 0xff
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e716      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d115      	bne.n	8000c7c <__aeabi_fsub+0x2b4>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d157      	bne.n	8000d04 <__aeabi_fsub+0x33c>
 8000c54:	28ff      	cmp	r0, #255	; 0xff
 8000c56:	d1e6      	bne.n	8000c26 <__aeabi_fsub+0x25e>
 8000c58:	464b      	mov	r3, r9
 8000c5a:	e77b      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d120      	bne.n	8000ca2 <__aeabi_fsub+0x2da>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d057      	beq.n	8000d14 <__aeabi_fsub+0x34c>
 8000c64:	4649      	mov	r1, r9
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d053      	beq.n	8000d12 <__aeabi_fsub+0x34a>
 8000c6a:	444b      	add	r3, r9
 8000c6c:	015a      	lsls	r2, r3, #5
 8000c6e:	d568      	bpl.n	8000d42 <__aeabi_fsub+0x37a>
 8000c70:	2407      	movs	r4, #7
 8000c72:	4a36      	ldr	r2, [pc, #216]	; (8000d4c <__aeabi_fsub+0x384>)
 8000c74:	401c      	ands	r4, r3
 8000c76:	2501      	movs	r5, #1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	e6ea      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000c7c:	28ff      	cmp	r0, #255	; 0xff
 8000c7e:	d0eb      	beq.n	8000c58 <__aeabi_fsub+0x290>
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	04d2      	lsls	r2, r2, #19
 8000c84:	4276      	negs	r6, r6
 8000c86:	4313      	orrs	r3, r2
 8000c88:	2e1b      	cmp	r6, #27
 8000c8a:	dc53      	bgt.n	8000d34 <__aeabi_fsub+0x36c>
 8000c8c:	2520      	movs	r5, #32
 8000c8e:	1bad      	subs	r5, r5, r6
 8000c90:	001a      	movs	r2, r3
 8000c92:	40ab      	lsls	r3, r5
 8000c94:	40f2      	lsrs	r2, r6
 8000c96:	1e5c      	subs	r4, r3, #1
 8000c98:	41a3      	sbcs	r3, r4
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	444b      	add	r3, r9
 8000c9e:	0005      	movs	r5, r0
 8000ca0:	e721      	b.n	8000ae6 <__aeabi_fsub+0x11e>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0d8      	beq.n	8000c58 <__aeabi_fsub+0x290>
 8000ca6:	4649      	mov	r1, r9
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_fsub+0x2e6>
 8000cac:	e752      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	03c9      	lsls	r1, r1, #15
 8000cb2:	420f      	tst	r7, r1
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x2f0>
 8000cb6:	e74d      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cb8:	4660      	mov	r0, ip
 8000cba:	4208      	tst	r0, r1
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0x2f8>
 8000cbe:	e749      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	e747      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cc4:	4648      	mov	r0, r9
 8000cc6:	25ff      	movs	r5, #255	; 0xff
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_fsub+0x306>
 8000ccc:	e74f      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	03d2      	lsls	r2, r2, #15
 8000cd2:	4217      	tst	r7, r2
 8000cd4:	d004      	beq.n	8000ce0 <__aeabi_fsub+0x318>
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	4210      	tst	r0, r2
 8000cda:	d101      	bne.n	8000ce0 <__aeabi_fsub+0x318>
 8000cdc:	464b      	mov	r3, r9
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	25ff      	movs	r5, #255	; 0xff
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	e741      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000cea:	4648      	mov	r0, r9
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d01f      	beq.n	8000d30 <__aeabi_fsub+0x368>
 8000cf0:	1a1a      	subs	r2, r3, r0
 8000cf2:	0150      	lsls	r0, r2, #5
 8000cf4:	d520      	bpl.n	8000d38 <__aeabi_fsub+0x370>
 8000cf6:	464a      	mov	r2, r9
 8000cf8:	2407      	movs	r4, #7
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	401c      	ands	r4, r3
 8000cfe:	4688      	mov	r8, r1
 8000d00:	2500      	movs	r5, #0
 8000d02:	e6a6      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000d04:	1c74      	adds	r4, r6, #1
 8000d06:	d0c9      	beq.n	8000c9c <__aeabi_fsub+0x2d4>
 8000d08:	43f6      	mvns	r6, r6
 8000d0a:	28ff      	cmp	r0, #255	; 0xff
 8000d0c:	d1bc      	bne.n	8000c88 <__aeabi_fsub+0x2c0>
 8000d0e:	464b      	mov	r3, r9
 8000d10:	e720      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000d12:	4699      	mov	r9, r3
 8000d14:	464b      	mov	r3, r9
 8000d16:	2500      	movs	r5, #0
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	e72b      	b.n	8000b74 <__aeabi_fsub+0x1ac>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e740      	b.n	8000ba2 <__aeabi_fsub+0x1da>
 8000d20:	2200      	movs	r2, #0
 8000d22:	2300      	movs	r3, #0
 8000d24:	e6a9      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	2200      	movs	r2, #0
 8000d2a:	03db      	lsls	r3, r3, #15
 8000d2c:	24ff      	movs	r4, #255	; 0xff
 8000d2e:	e6a4      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000d30:	2500      	movs	r5, #0
 8000d32:	e71c      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e7b1      	b.n	8000c9c <__aeabi_fsub+0x2d4>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d0f1      	beq.n	8000d20 <__aeabi_fsub+0x358>
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	2500      	movs	r5, #0
 8000d40:	e6fc      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000d42:	2500      	movs	r5, #0
 8000d44:	e6fa      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	7dffffff 	.word	0x7dffffff
 8000d4c:	fbffffff 	.word	0xfbffffff

08000d50 <__aeabi_f2iz>:
 8000d50:	0241      	lsls	r1, r0, #9
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0fc3      	lsrs	r3, r0, #31
 8000d56:	0a49      	lsrs	r1, r1, #9
 8000d58:	0e12      	lsrs	r2, r2, #24
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d5e:	d90d      	bls.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d60:	2a9d      	cmp	r2, #157	; 0x9d
 8000d62:	d80c      	bhi.n	8000d7e <__aeabi_f2iz+0x2e>
 8000d64:	2080      	movs	r0, #128	; 0x80
 8000d66:	0400      	lsls	r0, r0, #16
 8000d68:	4301      	orrs	r1, r0
 8000d6a:	2a95      	cmp	r2, #149	; 0x95
 8000d6c:	dc0a      	bgt.n	8000d84 <__aeabi_f2iz+0x34>
 8000d6e:	2096      	movs	r0, #150	; 0x96
 8000d70:	1a82      	subs	r2, r0, r2
 8000d72:	40d1      	lsrs	r1, r2
 8000d74:	4248      	negs	r0, r1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d7a:	0008      	movs	r0, r1
 8000d7c:	4770      	bx	lr
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <__aeabi_f2iz+0x3c>)
 8000d80:	1898      	adds	r0, r3, r2
 8000d82:	e7fb      	b.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d84:	3a96      	subs	r2, #150	; 0x96
 8000d86:	4091      	lsls	r1, r2
 8000d88:	e7f4      	b.n	8000d74 <__aeabi_f2iz+0x24>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	7fffffff 	.word	0x7fffffff

08000d90 <__aeabi_ui2f>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	1e04      	subs	r4, r0, #0
 8000d94:	d034      	beq.n	8000e00 <__aeabi_ui2f+0x70>
 8000d96:	f001 feaf 	bl	8002af8 <__clzsi2>
 8000d9a:	229e      	movs	r2, #158	; 0x9e
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	2a96      	cmp	r2, #150	; 0x96
 8000da0:	dc07      	bgt.n	8000db2 <__aeabi_ui2f+0x22>
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	2808      	cmp	r0, #8
 8000da6:	dd2e      	ble.n	8000e06 <__aeabi_ui2f+0x76>
 8000da8:	3808      	subs	r0, #8
 8000daa:	4084      	lsls	r4, r0
 8000dac:	0260      	lsls	r0, r4, #9
 8000dae:	0a40      	lsrs	r0, r0, #9
 8000db0:	e021      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000db2:	2a99      	cmp	r2, #153	; 0x99
 8000db4:	dd09      	ble.n	8000dca <__aeabi_ui2f+0x3a>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0021      	movs	r1, r4
 8000dba:	331b      	adds	r3, #27
 8000dbc:	4099      	lsls	r1, r3
 8000dbe:	1e4b      	subs	r3, r1, #1
 8000dc0:	4199      	sbcs	r1, r3
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	1a1b      	subs	r3, r3, r0
 8000dc6:	40dc      	lsrs	r4, r3
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	2805      	cmp	r0, #5
 8000dcc:	dd01      	ble.n	8000dd2 <__aeabi_ui2f+0x42>
 8000dce:	1f43      	subs	r3, r0, #5
 8000dd0:	409c      	lsls	r4, r3
 8000dd2:	0023      	movs	r3, r4
 8000dd4:	490d      	ldr	r1, [pc, #52]	; (8000e0c <__aeabi_ui2f+0x7c>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	0765      	lsls	r5, r4, #29
 8000dda:	d009      	beq.n	8000df0 <__aeabi_ui2f+0x60>
 8000ddc:	250f      	movs	r5, #15
 8000dde:	402c      	ands	r4, r5
 8000de0:	2c04      	cmp	r4, #4
 8000de2:	d005      	beq.n	8000df0 <__aeabi_ui2f+0x60>
 8000de4:	3304      	adds	r3, #4
 8000de6:	015c      	lsls	r4, r3, #5
 8000de8:	d502      	bpl.n	8000df0 <__aeabi_ui2f+0x60>
 8000dea:	229f      	movs	r2, #159	; 0x9f
 8000dec:	400b      	ands	r3, r1
 8000dee:	1a12      	subs	r2, r2, r0
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	0a58      	lsrs	r0, r3, #9
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	0240      	lsls	r0, r0, #9
 8000df8:	05d2      	lsls	r2, r2, #23
 8000dfa:	0a40      	lsrs	r0, r0, #9
 8000dfc:	4310      	orrs	r0, r2
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	2200      	movs	r2, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	e7f7      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000e06:	0260      	lsls	r0, r4, #9
 8000e08:	0a40      	lsrs	r0, r0, #9
 8000e0a:	e7f4      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000e0c:	fbffffff 	.word	0xfbffffff

08000e10 <__aeabi_dadd>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	4646      	mov	r6, r8
 8000e16:	46d6      	mov	lr, sl
 8000e18:	000c      	movs	r4, r1
 8000e1a:	0309      	lsls	r1, r1, #12
 8000e1c:	b5c0      	push	{r6, r7, lr}
 8000e1e:	0a49      	lsrs	r1, r1, #9
 8000e20:	0f47      	lsrs	r7, r0, #29
 8000e22:	005e      	lsls	r6, r3, #1
 8000e24:	4339      	orrs	r1, r7
 8000e26:	031f      	lsls	r7, r3, #12
 8000e28:	0fdb      	lsrs	r3, r3, #31
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	0065      	lsls	r5, r4, #1
 8000e2e:	0a7b      	lsrs	r3, r7, #9
 8000e30:	0f57      	lsrs	r7, r2, #29
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0d6d      	lsrs	r5, r5, #21
 8000e36:	0fe4      	lsrs	r4, r4, #31
 8000e38:	0d76      	lsrs	r6, r6, #21
 8000e3a:	46a1      	mov	r9, r4
 8000e3c:	00c0      	lsls	r0, r0, #3
 8000e3e:	46b8      	mov	r8, r7
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	1bab      	subs	r3, r5, r6
 8000e44:	4564      	cmp	r4, ip
 8000e46:	d07b      	beq.n	8000f40 <__aeabi_dadd+0x130>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dd5f      	ble.n	8000f0c <__aeabi_dadd+0xfc>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x42>
 8000e50:	e0a4      	b.n	8000f9c <__aeabi_dadd+0x18c>
 8000e52:	003e      	movs	r6, r7
 8000e54:	4316      	orrs	r6, r2
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x4a>
 8000e58:	e112      	b.n	8001080 <__aeabi_dadd+0x270>
 8000e5a:	1e5e      	subs	r6, r3, #1
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_dadd+0x52>
 8000e60:	e19e      	b.n	80011a0 <__aeabi_dadd+0x390>
 8000e62:	1a87      	subs	r7, r0, r2
 8000e64:	4643      	mov	r3, r8
 8000e66:	42b8      	cmp	r0, r7
 8000e68:	4180      	sbcs	r0, r0
 8000e6a:	2501      	movs	r5, #1
 8000e6c:	1ac9      	subs	r1, r1, r3
 8000e6e:	4240      	negs	r0, r0
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	020b      	lsls	r3, r1, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dadd+0x68>
 8000e76:	e131      	b.n	80010dc <__aeabi_dadd+0x2cc>
 8000e78:	0249      	lsls	r1, r1, #9
 8000e7a:	0a4e      	lsrs	r6, r1, #9
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x72>
 8000e80:	e16e      	b.n	8001160 <__aeabi_dadd+0x350>
 8000e82:	0030      	movs	r0, r6
 8000e84:	f001 fe38 	bl	8002af8 <__clzsi2>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dadd+0x82>
 8000e90:	e161      	b.n	8001156 <__aeabi_dadd+0x346>
 8000e92:	2220      	movs	r2, #32
 8000e94:	0039      	movs	r1, r7
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	409e      	lsls	r6, r3
 8000e9a:	40d1      	lsrs	r1, r2
 8000e9c:	409f      	lsls	r7, r3
 8000e9e:	430e      	orrs	r6, r1
 8000ea0:	429d      	cmp	r5, r3
 8000ea2:	dd00      	ble.n	8000ea6 <__aeabi_dadd+0x96>
 8000ea4:	e151      	b.n	800114a <__aeabi_dadd+0x33a>
 8000ea6:	1b5d      	subs	r5, r3, r5
 8000ea8:	1c6b      	adds	r3, r5, #1
 8000eaa:	2b1f      	cmp	r3, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0xa0>
 8000eae:	e17c      	b.n	80011aa <__aeabi_dadd+0x39a>
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	003d      	movs	r5, r7
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	408f      	lsls	r7, r1
 8000eba:	4088      	lsls	r0, r1
 8000ebc:	40dd      	lsrs	r5, r3
 8000ebe:	1e79      	subs	r1, r7, #1
 8000ec0:	418f      	sbcs	r7, r1
 8000ec2:	0031      	movs	r1, r6
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	4328      	orrs	r0, r5
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	2500      	movs	r5, #0
 8000ecc:	4307      	orrs	r7, r0
 8000ece:	403a      	ands	r2, r7
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d009      	beq.n	8000ee8 <__aeabi_dadd+0xd8>
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	403b      	ands	r3, r7
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dadd+0xd8>
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	42bb      	cmp	r3, r7
 8000ee0:	41bf      	sbcs	r7, r7
 8000ee2:	427f      	negs	r7, r7
 8000ee4:	19c9      	adds	r1, r1, r7
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	020b      	lsls	r3, r1, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0xde>
 8000eec:	e226      	b.n	800133c <__aeabi_dadd+0x52c>
 8000eee:	1c6a      	adds	r2, r5, #1
 8000ef0:	4bc6      	ldr	r3, [pc, #792]	; (800120c <__aeabi_dadd+0x3fc>)
 8000ef2:	0555      	lsls	r5, r2, #21
 8000ef4:	0d6d      	lsrs	r5, r5, #21
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0xec>
 8000efa:	e106      	b.n	800110a <__aeabi_dadd+0x2fa>
 8000efc:	4ac4      	ldr	r2, [pc, #784]	; (8001210 <__aeabi_dadd+0x400>)
 8000efe:	08ff      	lsrs	r7, r7, #3
 8000f00:	400a      	ands	r2, r1
 8000f02:	0753      	lsls	r3, r2, #29
 8000f04:	0252      	lsls	r2, r2, #9
 8000f06:	433b      	orrs	r3, r7
 8000f08:	0b12      	lsrs	r2, r2, #12
 8000f0a:	e08e      	b.n	800102a <__aeabi_dadd+0x21a>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dadd+0x102>
 8000f10:	e0b8      	b.n	8001084 <__aeabi_dadd+0x274>
 8000f12:	1c6b      	adds	r3, r5, #1
 8000f14:	055b      	lsls	r3, r3, #21
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_dadd+0x10e>
 8000f1c:	e130      	b.n	8001180 <__aeabi_dadd+0x370>
 8000f1e:	1a87      	subs	r7, r0, r2
 8000f20:	4643      	mov	r3, r8
 8000f22:	42b8      	cmp	r0, r7
 8000f24:	41b6      	sbcs	r6, r6
 8000f26:	1acb      	subs	r3, r1, r3
 8000f28:	4276      	negs	r6, r6
 8000f2a:	1b9e      	subs	r6, r3, r6
 8000f2c:	0233      	lsls	r3, r6, #8
 8000f2e:	d500      	bpl.n	8000f32 <__aeabi_dadd+0x122>
 8000f30:	e14c      	b.n	80011cc <__aeabi_dadd+0x3bc>
 8000f32:	003b      	movs	r3, r7
 8000f34:	4333      	orrs	r3, r6
 8000f36:	d1a1      	bne.n	8000e7c <__aeabi_dadd+0x6c>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e070      	b.n	8001022 <__aeabi_dadd+0x212>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_dadd+0x136>
 8000f44:	e0e5      	b.n	8001112 <__aeabi_dadd+0x302>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x13c>
 8000f4a:	e083      	b.n	8001054 <__aeabi_dadd+0x244>
 8000f4c:	4eaf      	ldr	r6, [pc, #700]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f4e:	42b5      	cmp	r5, r6
 8000f50:	d060      	beq.n	8001014 <__aeabi_dadd+0x204>
 8000f52:	2680      	movs	r6, #128	; 0x80
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4337      	orrs	r7, r6
 8000f58:	46b8      	mov	r8, r7
 8000f5a:	2b38      	cmp	r3, #56	; 0x38
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_dadd+0x150>
 8000f5e:	e13e      	b.n	80011de <__aeabi_dadd+0x3ce>
 8000f60:	4643      	mov	r3, r8
 8000f62:	4313      	orrs	r3, r2
 8000f64:	001f      	movs	r7, r3
 8000f66:	1e7a      	subs	r2, r7, #1
 8000f68:	4197      	sbcs	r7, r2
 8000f6a:	183f      	adds	r7, r7, r0
 8000f6c:	4287      	cmp	r7, r0
 8000f6e:	4180      	sbcs	r0, r0
 8000f70:	4240      	negs	r0, r0
 8000f72:	1809      	adds	r1, r1, r0
 8000f74:	020b      	lsls	r3, r1, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_dadd+0x16a>
 8000f78:	e0b0      	b.n	80010dc <__aeabi_dadd+0x2cc>
 8000f7a:	4ba4      	ldr	r3, [pc, #656]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	429d      	cmp	r5, r3
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x174>
 8000f82:	e0c3      	b.n	800110c <__aeabi_dadd+0x2fc>
 8000f84:	4aa2      	ldr	r2, [pc, #648]	; (8001210 <__aeabi_dadd+0x400>)
 8000f86:	087b      	lsrs	r3, r7, #1
 8000f88:	400a      	ands	r2, r1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	400f      	ands	r7, r1
 8000f8e:	431f      	orrs	r7, r3
 8000f90:	0851      	lsrs	r1, r2, #1
 8000f92:	07d3      	lsls	r3, r2, #31
 8000f94:	2207      	movs	r2, #7
 8000f96:	431f      	orrs	r7, r3
 8000f98:	403a      	ands	r2, r7
 8000f9a:	e799      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 8000f9c:	4e9b      	ldr	r6, [pc, #620]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f9e:	42b5      	cmp	r5, r6
 8000fa0:	d038      	beq.n	8001014 <__aeabi_dadd+0x204>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0436      	lsls	r6, r6, #16
 8000fa6:	4337      	orrs	r7, r6
 8000fa8:	46b8      	mov	r8, r7
 8000faa:	2b38      	cmp	r3, #56	; 0x38
 8000fac:	dd00      	ble.n	8000fb0 <__aeabi_dadd+0x1a0>
 8000fae:	e0dc      	b.n	800116a <__aeabi_dadd+0x35a>
 8000fb0:	2b1f      	cmp	r3, #31
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dadd+0x1a6>
 8000fb4:	e130      	b.n	8001218 <__aeabi_dadd+0x408>
 8000fb6:	001e      	movs	r6, r3
 8000fb8:	4647      	mov	r7, r8
 8000fba:	3e20      	subs	r6, #32
 8000fbc:	40f7      	lsrs	r7, r6
 8000fbe:	46bc      	mov	ip, r7
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d004      	beq.n	8000fce <__aeabi_dadd+0x1be>
 8000fc4:	2640      	movs	r6, #64	; 0x40
 8000fc6:	1af3      	subs	r3, r6, r3
 8000fc8:	4646      	mov	r6, r8
 8000fca:	409e      	lsls	r6, r3
 8000fcc:	4332      	orrs	r2, r6
 8000fce:	0017      	movs	r7, r2
 8000fd0:	4663      	mov	r3, ip
 8000fd2:	1e7a      	subs	r2, r7, #1
 8000fd4:	4197      	sbcs	r7, r2
 8000fd6:	431f      	orrs	r7, r3
 8000fd8:	e0cc      	b.n	8001174 <__aeabi_dadd+0x364>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x1d0>
 8000fde:	e204      	b.n	80013ea <__aeabi_dadd+0x5da>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x1d8>
 8000fe6:	e159      	b.n	800129c <__aeabi_dadd+0x48c>
 8000fe8:	074b      	lsls	r3, r1, #29
 8000fea:	08c0      	lsrs	r0, r0, #3
 8000fec:	4318      	orrs	r0, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	031b      	lsls	r3, r3, #12
 8000ff4:	4219      	tst	r1, r3
 8000ff6:	d008      	beq.n	800100a <__aeabi_dadd+0x1fa>
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	08ed      	lsrs	r5, r5, #3
 8000ffc:	421d      	tst	r5, r3
 8000ffe:	d104      	bne.n	800100a <__aeabi_dadd+0x1fa>
 8001000:	4643      	mov	r3, r8
 8001002:	08d0      	lsrs	r0, r2, #3
 8001004:	0759      	lsls	r1, r3, #29
 8001006:	4308      	orrs	r0, r1
 8001008:	0029      	movs	r1, r5
 800100a:	0f42      	lsrs	r2, r0, #29
 800100c:	00c9      	lsls	r1, r1, #3
 800100e:	4d7f      	ldr	r5, [pc, #508]	; (800120c <__aeabi_dadd+0x3fc>)
 8001010:	4311      	orrs	r1, r2
 8001012:	00c0      	lsls	r0, r0, #3
 8001014:	074b      	lsls	r3, r1, #29
 8001016:	08ca      	lsrs	r2, r1, #3
 8001018:	497c      	ldr	r1, [pc, #496]	; (800120c <__aeabi_dadd+0x3fc>)
 800101a:	08c0      	lsrs	r0, r0, #3
 800101c:	4303      	orrs	r3, r0
 800101e:	428d      	cmp	r5, r1
 8001020:	d068      	beq.n	80010f4 <__aeabi_dadd+0x2e4>
 8001022:	0312      	lsls	r2, r2, #12
 8001024:	056d      	lsls	r5, r5, #21
 8001026:	0b12      	lsrs	r2, r2, #12
 8001028:	0d6d      	lsrs	r5, r5, #21
 800102a:	2100      	movs	r1, #0
 800102c:	0312      	lsls	r2, r2, #12
 800102e:	0018      	movs	r0, r3
 8001030:	0b13      	lsrs	r3, r2, #12
 8001032:	0d0a      	lsrs	r2, r1, #20
 8001034:	0512      	lsls	r2, r2, #20
 8001036:	431a      	orrs	r2, r3
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <__aeabi_dadd+0x404>)
 800103a:	052d      	lsls	r5, r5, #20
 800103c:	4013      	ands	r3, r2
 800103e:	432b      	orrs	r3, r5
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	07e4      	lsls	r4, r4, #31
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	4323      	orrs	r3, r4
 8001048:	0019      	movs	r1, r3
 800104a:	bc1c      	pop	{r2, r3, r4}
 800104c:	4690      	mov	r8, r2
 800104e:	4699      	mov	r9, r3
 8001050:	46a2      	mov	sl, r4
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001054:	003e      	movs	r6, r7
 8001056:	4316      	orrs	r6, r2
 8001058:	d012      	beq.n	8001080 <__aeabi_dadd+0x270>
 800105a:	1e5e      	subs	r6, r3, #1
 800105c:	2e00      	cmp	r6, #0
 800105e:	d000      	beq.n	8001062 <__aeabi_dadd+0x252>
 8001060:	e100      	b.n	8001264 <__aeabi_dadd+0x454>
 8001062:	1887      	adds	r7, r0, r2
 8001064:	4287      	cmp	r7, r0
 8001066:	4180      	sbcs	r0, r0
 8001068:	4441      	add	r1, r8
 800106a:	4240      	negs	r0, r0
 800106c:	1809      	adds	r1, r1, r0
 800106e:	2501      	movs	r5, #1
 8001070:	020b      	lsls	r3, r1, #8
 8001072:	d533      	bpl.n	80010dc <__aeabi_dadd+0x2cc>
 8001074:	2502      	movs	r5, #2
 8001076:	e785      	b.n	8000f84 <__aeabi_dadd+0x174>
 8001078:	4664      	mov	r4, ip
 800107a:	0033      	movs	r3, r6
 800107c:	4641      	mov	r1, r8
 800107e:	0010      	movs	r0, r2
 8001080:	001d      	movs	r5, r3
 8001082:	e7c7      	b.n	8001014 <__aeabi_dadd+0x204>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d000      	beq.n	800108a <__aeabi_dadd+0x27a>
 8001088:	e0da      	b.n	8001240 <__aeabi_dadd+0x430>
 800108a:	000c      	movs	r4, r1
 800108c:	4304      	orrs	r4, r0
 800108e:	d0f3      	beq.n	8001078 <__aeabi_dadd+0x268>
 8001090:	1c5c      	adds	r4, r3, #1
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x286>
 8001094:	e19f      	b.n	80013d6 <__aeabi_dadd+0x5c6>
 8001096:	4c5d      	ldr	r4, [pc, #372]	; (800120c <__aeabi_dadd+0x3fc>)
 8001098:	42a6      	cmp	r6, r4
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x28e>
 800109c:	e12f      	b.n	80012fe <__aeabi_dadd+0x4ee>
 800109e:	43db      	mvns	r3, r3
 80010a0:	2b38      	cmp	r3, #56	; 0x38
 80010a2:	dd00      	ble.n	80010a6 <__aeabi_dadd+0x296>
 80010a4:	e166      	b.n	8001374 <__aeabi_dadd+0x564>
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	dd00      	ble.n	80010ac <__aeabi_dadd+0x29c>
 80010aa:	e183      	b.n	80013b4 <__aeabi_dadd+0x5a4>
 80010ac:	2420      	movs	r4, #32
 80010ae:	0005      	movs	r5, r0
 80010b0:	1ae4      	subs	r4, r4, r3
 80010b2:	000f      	movs	r7, r1
 80010b4:	40dd      	lsrs	r5, r3
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	40a0      	lsls	r0, r4
 80010ba:	4643      	mov	r3, r8
 80010bc:	40a7      	lsls	r7, r4
 80010be:	1a5b      	subs	r3, r3, r1
 80010c0:	1e44      	subs	r4, r0, #1
 80010c2:	41a0      	sbcs	r0, r4
 80010c4:	4698      	mov	r8, r3
 80010c6:	432f      	orrs	r7, r5
 80010c8:	4338      	orrs	r0, r7
 80010ca:	1a17      	subs	r7, r2, r0
 80010cc:	42ba      	cmp	r2, r7
 80010ce:	4192      	sbcs	r2, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	4252      	negs	r2, r2
 80010d4:	1a99      	subs	r1, r3, r2
 80010d6:	4664      	mov	r4, ip
 80010d8:	0035      	movs	r5, r6
 80010da:	e6ca      	b.n	8000e72 <__aeabi_dadd+0x62>
 80010dc:	2207      	movs	r2, #7
 80010de:	403a      	ands	r2, r7
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d000      	beq.n	80010e6 <__aeabi_dadd+0x2d6>
 80010e4:	e6f6      	b.n	8000ed4 <__aeabi_dadd+0xc4>
 80010e6:	074b      	lsls	r3, r1, #29
 80010e8:	08ca      	lsrs	r2, r1, #3
 80010ea:	4948      	ldr	r1, [pc, #288]	; (800120c <__aeabi_dadd+0x3fc>)
 80010ec:	08ff      	lsrs	r7, r7, #3
 80010ee:	433b      	orrs	r3, r7
 80010f0:	428d      	cmp	r5, r1
 80010f2:	d196      	bne.n	8001022 <__aeabi_dadd+0x212>
 80010f4:	0019      	movs	r1, r3
 80010f6:	4311      	orrs	r1, r2
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x2ec>
 80010fa:	e19e      	b.n	800143a <__aeabi_dadd+0x62a>
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	0309      	lsls	r1, r1, #12
 8001100:	430a      	orrs	r2, r1
 8001102:	0312      	lsls	r2, r2, #12
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	4d41      	ldr	r5, [pc, #260]	; (800120c <__aeabi_dadd+0x3fc>)
 8001108:	e78f      	b.n	800102a <__aeabi_dadd+0x21a>
 800110a:	0015      	movs	r5, r2
 800110c:	2200      	movs	r2, #0
 800110e:	2300      	movs	r3, #0
 8001110:	e78b      	b.n	800102a <__aeabi_dadd+0x21a>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_dadd+0x308>
 8001116:	e0c7      	b.n	80012a8 <__aeabi_dadd+0x498>
 8001118:	1c6b      	adds	r3, r5, #1
 800111a:	055f      	lsls	r7, r3, #21
 800111c:	0d7f      	lsrs	r7, r7, #21
 800111e:	2f01      	cmp	r7, #1
 8001120:	dc00      	bgt.n	8001124 <__aeabi_dadd+0x314>
 8001122:	e0f1      	b.n	8001308 <__aeabi_dadd+0x4f8>
 8001124:	4d39      	ldr	r5, [pc, #228]	; (800120c <__aeabi_dadd+0x3fc>)
 8001126:	42ab      	cmp	r3, r5
 8001128:	d100      	bne.n	800112c <__aeabi_dadd+0x31c>
 800112a:	e0b9      	b.n	80012a0 <__aeabi_dadd+0x490>
 800112c:	1885      	adds	r5, r0, r2
 800112e:	000a      	movs	r2, r1
 8001130:	4285      	cmp	r5, r0
 8001132:	4189      	sbcs	r1, r1
 8001134:	4442      	add	r2, r8
 8001136:	4249      	negs	r1, r1
 8001138:	1851      	adds	r1, r2, r1
 800113a:	2207      	movs	r2, #7
 800113c:	07cf      	lsls	r7, r1, #31
 800113e:	086d      	lsrs	r5, r5, #1
 8001140:	432f      	orrs	r7, r5
 8001142:	0849      	lsrs	r1, r1, #1
 8001144:	403a      	ands	r2, r7
 8001146:	001d      	movs	r5, r3
 8001148:	e6c2      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 800114a:	2207      	movs	r2, #7
 800114c:	4930      	ldr	r1, [pc, #192]	; (8001210 <__aeabi_dadd+0x400>)
 800114e:	1aed      	subs	r5, r5, r3
 8001150:	4031      	ands	r1, r6
 8001152:	403a      	ands	r2, r7
 8001154:	e6bc      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 8001156:	003e      	movs	r6, r7
 8001158:	3828      	subs	r0, #40	; 0x28
 800115a:	4086      	lsls	r6, r0
 800115c:	2700      	movs	r7, #0
 800115e:	e69f      	b.n	8000ea0 <__aeabi_dadd+0x90>
 8001160:	0038      	movs	r0, r7
 8001162:	f001 fcc9 	bl	8002af8 <__clzsi2>
 8001166:	3020      	adds	r0, #32
 8001168:	e68e      	b.n	8000e88 <__aeabi_dadd+0x78>
 800116a:	4643      	mov	r3, r8
 800116c:	4313      	orrs	r3, r2
 800116e:	001f      	movs	r7, r3
 8001170:	1e7a      	subs	r2, r7, #1
 8001172:	4197      	sbcs	r7, r2
 8001174:	1bc7      	subs	r7, r0, r7
 8001176:	42b8      	cmp	r0, r7
 8001178:	4180      	sbcs	r0, r0
 800117a:	4240      	negs	r0, r0
 800117c:	1a09      	subs	r1, r1, r0
 800117e:	e678      	b.n	8000e72 <__aeabi_dadd+0x62>
 8001180:	000e      	movs	r6, r1
 8001182:	003b      	movs	r3, r7
 8001184:	4306      	orrs	r6, r0
 8001186:	4313      	orrs	r3, r2
 8001188:	2d00      	cmp	r5, #0
 800118a:	d161      	bne.n	8001250 <__aeabi_dadd+0x440>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x382>
 8001190:	e0f4      	b.n	800137c <__aeabi_dadd+0x56c>
 8001192:	2b00      	cmp	r3, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x388>
 8001196:	e11b      	b.n	80013d0 <__aeabi_dadd+0x5c0>
 8001198:	4664      	mov	r4, ip
 800119a:	0039      	movs	r1, r7
 800119c:	0010      	movs	r0, r2
 800119e:	e739      	b.n	8001014 <__aeabi_dadd+0x204>
 80011a0:	4f1a      	ldr	r7, [pc, #104]	; (800120c <__aeabi_dadd+0x3fc>)
 80011a2:	42bb      	cmp	r3, r7
 80011a4:	d07a      	beq.n	800129c <__aeabi_dadd+0x48c>
 80011a6:	0033      	movs	r3, r6
 80011a8:	e6ff      	b.n	8000faa <__aeabi_dadd+0x19a>
 80011aa:	0030      	movs	r0, r6
 80011ac:	3d1f      	subs	r5, #31
 80011ae:	40e8      	lsrs	r0, r5
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d003      	beq.n	80011bc <__aeabi_dadd+0x3ac>
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	1acb      	subs	r3, r1, r3
 80011b8:	409e      	lsls	r6, r3
 80011ba:	4337      	orrs	r7, r6
 80011bc:	1e7b      	subs	r3, r7, #1
 80011be:	419f      	sbcs	r7, r3
 80011c0:	2207      	movs	r2, #7
 80011c2:	4307      	orrs	r7, r0
 80011c4:	403a      	ands	r2, r7
 80011c6:	2100      	movs	r1, #0
 80011c8:	2500      	movs	r5, #0
 80011ca:	e789      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 80011cc:	1a17      	subs	r7, r2, r0
 80011ce:	4643      	mov	r3, r8
 80011d0:	42ba      	cmp	r2, r7
 80011d2:	41b6      	sbcs	r6, r6
 80011d4:	1a59      	subs	r1, r3, r1
 80011d6:	4276      	negs	r6, r6
 80011d8:	1b8e      	subs	r6, r1, r6
 80011da:	4664      	mov	r4, ip
 80011dc:	e64e      	b.n	8000e7c <__aeabi_dadd+0x6c>
 80011de:	2b1f      	cmp	r3, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0x3d4>
 80011e2:	e0ad      	b.n	8001340 <__aeabi_dadd+0x530>
 80011e4:	2620      	movs	r6, #32
 80011e6:	4647      	mov	r7, r8
 80011e8:	1af6      	subs	r6, r6, r3
 80011ea:	40b7      	lsls	r7, r6
 80011ec:	46b9      	mov	r9, r7
 80011ee:	0017      	movs	r7, r2
 80011f0:	46b2      	mov	sl, r6
 80011f2:	40df      	lsrs	r7, r3
 80011f4:	464e      	mov	r6, r9
 80011f6:	433e      	orrs	r6, r7
 80011f8:	0037      	movs	r7, r6
 80011fa:	4656      	mov	r6, sl
 80011fc:	40b2      	lsls	r2, r6
 80011fe:	1e56      	subs	r6, r2, #1
 8001200:	41b2      	sbcs	r2, r6
 8001202:	4317      	orrs	r7, r2
 8001204:	4642      	mov	r2, r8
 8001206:	40da      	lsrs	r2, r3
 8001208:	1889      	adds	r1, r1, r2
 800120a:	e6ae      	b.n	8000f6a <__aeabi_dadd+0x15a>
 800120c:	000007ff 	.word	0x000007ff
 8001210:	ff7fffff 	.word	0xff7fffff
 8001214:	800fffff 	.word	0x800fffff
 8001218:	2620      	movs	r6, #32
 800121a:	4647      	mov	r7, r8
 800121c:	1af6      	subs	r6, r6, r3
 800121e:	40b7      	lsls	r7, r6
 8001220:	46b9      	mov	r9, r7
 8001222:	0017      	movs	r7, r2
 8001224:	46b2      	mov	sl, r6
 8001226:	40df      	lsrs	r7, r3
 8001228:	464e      	mov	r6, r9
 800122a:	433e      	orrs	r6, r7
 800122c:	0037      	movs	r7, r6
 800122e:	4656      	mov	r6, sl
 8001230:	40b2      	lsls	r2, r6
 8001232:	1e56      	subs	r6, r2, #1
 8001234:	41b2      	sbcs	r2, r6
 8001236:	4317      	orrs	r7, r2
 8001238:	4642      	mov	r2, r8
 800123a:	40da      	lsrs	r2, r3
 800123c:	1a89      	subs	r1, r1, r2
 800123e:	e799      	b.n	8001174 <__aeabi_dadd+0x364>
 8001240:	4c7f      	ldr	r4, [pc, #508]	; (8001440 <__aeabi_dadd+0x630>)
 8001242:	42a6      	cmp	r6, r4
 8001244:	d05b      	beq.n	80012fe <__aeabi_dadd+0x4ee>
 8001246:	2480      	movs	r4, #128	; 0x80
 8001248:	0424      	lsls	r4, r4, #16
 800124a:	425b      	negs	r3, r3
 800124c:	4321      	orrs	r1, r4
 800124e:	e727      	b.n	80010a0 <__aeabi_dadd+0x290>
 8001250:	2e00      	cmp	r6, #0
 8001252:	d10c      	bne.n	800126e <__aeabi_dadd+0x45e>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x44a>
 8001258:	e0cb      	b.n	80013f2 <__aeabi_dadd+0x5e2>
 800125a:	4664      	mov	r4, ip
 800125c:	0039      	movs	r1, r7
 800125e:	0010      	movs	r0, r2
 8001260:	4d77      	ldr	r5, [pc, #476]	; (8001440 <__aeabi_dadd+0x630>)
 8001262:	e6d7      	b.n	8001014 <__aeabi_dadd+0x204>
 8001264:	4f76      	ldr	r7, [pc, #472]	; (8001440 <__aeabi_dadd+0x630>)
 8001266:	42bb      	cmp	r3, r7
 8001268:	d018      	beq.n	800129c <__aeabi_dadd+0x48c>
 800126a:	0033      	movs	r3, r6
 800126c:	e675      	b.n	8000f5a <__aeabi_dadd+0x14a>
 800126e:	2b00      	cmp	r3, #0
 8001270:	d014      	beq.n	800129c <__aeabi_dadd+0x48c>
 8001272:	074b      	lsls	r3, r1, #29
 8001274:	08c0      	lsrs	r0, r0, #3
 8001276:	4318      	orrs	r0, r3
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	08c9      	lsrs	r1, r1, #3
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	4219      	tst	r1, r3
 8001280:	d007      	beq.n	8001292 <__aeabi_dadd+0x482>
 8001282:	08fc      	lsrs	r4, r7, #3
 8001284:	421c      	tst	r4, r3
 8001286:	d104      	bne.n	8001292 <__aeabi_dadd+0x482>
 8001288:	0779      	lsls	r1, r7, #29
 800128a:	08d0      	lsrs	r0, r2, #3
 800128c:	4308      	orrs	r0, r1
 800128e:	46e1      	mov	r9, ip
 8001290:	0021      	movs	r1, r4
 8001292:	464c      	mov	r4, r9
 8001294:	0f42      	lsrs	r2, r0, #29
 8001296:	00c9      	lsls	r1, r1, #3
 8001298:	4311      	orrs	r1, r2
 800129a:	00c0      	lsls	r0, r0, #3
 800129c:	4d68      	ldr	r5, [pc, #416]	; (8001440 <__aeabi_dadd+0x630>)
 800129e:	e6b9      	b.n	8001014 <__aeabi_dadd+0x204>
 80012a0:	001d      	movs	r5, r3
 80012a2:	2200      	movs	r2, #0
 80012a4:	2300      	movs	r3, #0
 80012a6:	e6c0      	b.n	800102a <__aeabi_dadd+0x21a>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d15b      	bne.n	8001364 <__aeabi_dadd+0x554>
 80012ac:	000d      	movs	r5, r1
 80012ae:	4305      	orrs	r5, r0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dadd+0x4a4>
 80012b2:	e6e2      	b.n	800107a <__aeabi_dadd+0x26a>
 80012b4:	1c5d      	adds	r5, r3, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x4aa>
 80012b8:	e0b0      	b.n	800141c <__aeabi_dadd+0x60c>
 80012ba:	4d61      	ldr	r5, [pc, #388]	; (8001440 <__aeabi_dadd+0x630>)
 80012bc:	42ae      	cmp	r6, r5
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x4f0>
 80012c0:	43db      	mvns	r3, r3
 80012c2:	2b38      	cmp	r3, #56	; 0x38
 80012c4:	dc71      	bgt.n	80013aa <__aeabi_dadd+0x59a>
 80012c6:	2b1f      	cmp	r3, #31
 80012c8:	dd00      	ble.n	80012cc <__aeabi_dadd+0x4bc>
 80012ca:	e096      	b.n	80013fa <__aeabi_dadd+0x5ea>
 80012cc:	2520      	movs	r5, #32
 80012ce:	000f      	movs	r7, r1
 80012d0:	1aed      	subs	r5, r5, r3
 80012d2:	40af      	lsls	r7, r5
 80012d4:	46b9      	mov	r9, r7
 80012d6:	0007      	movs	r7, r0
 80012d8:	46aa      	mov	sl, r5
 80012da:	40df      	lsrs	r7, r3
 80012dc:	464d      	mov	r5, r9
 80012de:	433d      	orrs	r5, r7
 80012e0:	002f      	movs	r7, r5
 80012e2:	4655      	mov	r5, sl
 80012e4:	40a8      	lsls	r0, r5
 80012e6:	40d9      	lsrs	r1, r3
 80012e8:	1e45      	subs	r5, r0, #1
 80012ea:	41a8      	sbcs	r0, r5
 80012ec:	4488      	add	r8, r1
 80012ee:	4307      	orrs	r7, r0
 80012f0:	18bf      	adds	r7, r7, r2
 80012f2:	4297      	cmp	r7, r2
 80012f4:	4192      	sbcs	r2, r2
 80012f6:	4251      	negs	r1, r2
 80012f8:	4441      	add	r1, r8
 80012fa:	0035      	movs	r5, r6
 80012fc:	e63a      	b.n	8000f74 <__aeabi_dadd+0x164>
 80012fe:	4664      	mov	r4, ip
 8001300:	0035      	movs	r5, r6
 8001302:	4641      	mov	r1, r8
 8001304:	0010      	movs	r0, r2
 8001306:	e685      	b.n	8001014 <__aeabi_dadd+0x204>
 8001308:	000b      	movs	r3, r1
 800130a:	4303      	orrs	r3, r0
 800130c:	2d00      	cmp	r5, #0
 800130e:	d000      	beq.n	8001312 <__aeabi_dadd+0x502>
 8001310:	e663      	b.n	8000fda <__aeabi_dadd+0x1ca>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f5      	beq.n	8001302 <__aeabi_dadd+0x4f2>
 8001316:	4643      	mov	r3, r8
 8001318:	4313      	orrs	r3, r2
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x50e>
 800131c:	e67a      	b.n	8001014 <__aeabi_dadd+0x204>
 800131e:	1887      	adds	r7, r0, r2
 8001320:	4287      	cmp	r7, r0
 8001322:	4180      	sbcs	r0, r0
 8001324:	2207      	movs	r2, #7
 8001326:	4441      	add	r1, r8
 8001328:	4240      	negs	r0, r0
 800132a:	1809      	adds	r1, r1, r0
 800132c:	403a      	ands	r2, r7
 800132e:	020b      	lsls	r3, r1, #8
 8001330:	d400      	bmi.n	8001334 <__aeabi_dadd+0x524>
 8001332:	e6d5      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <__aeabi_dadd+0x634>)
 8001336:	3501      	adds	r5, #1
 8001338:	4019      	ands	r1, r3
 800133a:	e5c9      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 800133c:	0038      	movs	r0, r7
 800133e:	e669      	b.n	8001014 <__aeabi_dadd+0x204>
 8001340:	001e      	movs	r6, r3
 8001342:	4647      	mov	r7, r8
 8001344:	3e20      	subs	r6, #32
 8001346:	40f7      	lsrs	r7, r6
 8001348:	46bc      	mov	ip, r7
 800134a:	2b20      	cmp	r3, #32
 800134c:	d004      	beq.n	8001358 <__aeabi_dadd+0x548>
 800134e:	2640      	movs	r6, #64	; 0x40
 8001350:	1af3      	subs	r3, r6, r3
 8001352:	4646      	mov	r6, r8
 8001354:	409e      	lsls	r6, r3
 8001356:	4332      	orrs	r2, r6
 8001358:	0017      	movs	r7, r2
 800135a:	4663      	mov	r3, ip
 800135c:	1e7a      	subs	r2, r7, #1
 800135e:	4197      	sbcs	r7, r2
 8001360:	431f      	orrs	r7, r3
 8001362:	e602      	b.n	8000f6a <__aeabi_dadd+0x15a>
 8001364:	4d36      	ldr	r5, [pc, #216]	; (8001440 <__aeabi_dadd+0x630>)
 8001366:	42ae      	cmp	r6, r5
 8001368:	d0ca      	beq.n	8001300 <__aeabi_dadd+0x4f0>
 800136a:	2580      	movs	r5, #128	; 0x80
 800136c:	042d      	lsls	r5, r5, #16
 800136e:	425b      	negs	r3, r3
 8001370:	4329      	orrs	r1, r5
 8001372:	e7a6      	b.n	80012c2 <__aeabi_dadd+0x4b2>
 8001374:	4308      	orrs	r0, r1
 8001376:	1e41      	subs	r1, r0, #1
 8001378:	4188      	sbcs	r0, r1
 800137a:	e6a6      	b.n	80010ca <__aeabi_dadd+0x2ba>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0x572>
 8001380:	e648      	b.n	8001014 <__aeabi_dadd+0x204>
 8001382:	1a87      	subs	r7, r0, r2
 8001384:	4643      	mov	r3, r8
 8001386:	42b8      	cmp	r0, r7
 8001388:	41b6      	sbcs	r6, r6
 800138a:	1acb      	subs	r3, r1, r3
 800138c:	4276      	negs	r6, r6
 800138e:	1b9e      	subs	r6, r3, r6
 8001390:	0233      	lsls	r3, r6, #8
 8001392:	d54b      	bpl.n	800142c <__aeabi_dadd+0x61c>
 8001394:	1a17      	subs	r7, r2, r0
 8001396:	4643      	mov	r3, r8
 8001398:	42ba      	cmp	r2, r7
 800139a:	4192      	sbcs	r2, r2
 800139c:	1a59      	subs	r1, r3, r1
 800139e:	4252      	negs	r2, r2
 80013a0:	1a89      	subs	r1, r1, r2
 80013a2:	2207      	movs	r2, #7
 80013a4:	4664      	mov	r4, ip
 80013a6:	403a      	ands	r2, r7
 80013a8:	e592      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 80013aa:	4301      	orrs	r1, r0
 80013ac:	000f      	movs	r7, r1
 80013ae:	1e79      	subs	r1, r7, #1
 80013b0:	418f      	sbcs	r7, r1
 80013b2:	e79d      	b.n	80012f0 <__aeabi_dadd+0x4e0>
 80013b4:	001c      	movs	r4, r3
 80013b6:	000f      	movs	r7, r1
 80013b8:	3c20      	subs	r4, #32
 80013ba:	40e7      	lsrs	r7, r4
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d003      	beq.n	80013c8 <__aeabi_dadd+0x5b8>
 80013c0:	2440      	movs	r4, #64	; 0x40
 80013c2:	1ae3      	subs	r3, r4, r3
 80013c4:	4099      	lsls	r1, r3
 80013c6:	4308      	orrs	r0, r1
 80013c8:	1e41      	subs	r1, r0, #1
 80013ca:	4188      	sbcs	r0, r1
 80013cc:	4338      	orrs	r0, r7
 80013ce:	e67c      	b.n	80010ca <__aeabi_dadd+0x2ba>
 80013d0:	2200      	movs	r2, #0
 80013d2:	2400      	movs	r4, #0
 80013d4:	e625      	b.n	8001022 <__aeabi_dadd+0x212>
 80013d6:	1a17      	subs	r7, r2, r0
 80013d8:	4643      	mov	r3, r8
 80013da:	42ba      	cmp	r2, r7
 80013dc:	4192      	sbcs	r2, r2
 80013de:	1a59      	subs	r1, r3, r1
 80013e0:	4252      	negs	r2, r2
 80013e2:	1a89      	subs	r1, r1, r2
 80013e4:	4664      	mov	r4, ip
 80013e6:	0035      	movs	r5, r6
 80013e8:	e543      	b.n	8000e72 <__aeabi_dadd+0x62>
 80013ea:	4641      	mov	r1, r8
 80013ec:	0010      	movs	r0, r2
 80013ee:	4d14      	ldr	r5, [pc, #80]	; (8001440 <__aeabi_dadd+0x630>)
 80013f0:	e610      	b.n	8001014 <__aeabi_dadd+0x204>
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	2400      	movs	r4, #0
 80013f6:	0312      	lsls	r2, r2, #12
 80013f8:	e680      	b.n	80010fc <__aeabi_dadd+0x2ec>
 80013fa:	001d      	movs	r5, r3
 80013fc:	000f      	movs	r7, r1
 80013fe:	3d20      	subs	r5, #32
 8001400:	40ef      	lsrs	r7, r5
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d003      	beq.n	8001410 <__aeabi_dadd+0x600>
 8001408:	2540      	movs	r5, #64	; 0x40
 800140a:	1aeb      	subs	r3, r5, r3
 800140c:	4099      	lsls	r1, r3
 800140e:	4308      	orrs	r0, r1
 8001410:	0007      	movs	r7, r0
 8001412:	4663      	mov	r3, ip
 8001414:	1e78      	subs	r0, r7, #1
 8001416:	4187      	sbcs	r7, r0
 8001418:	431f      	orrs	r7, r3
 800141a:	e769      	b.n	80012f0 <__aeabi_dadd+0x4e0>
 800141c:	1887      	adds	r7, r0, r2
 800141e:	4297      	cmp	r7, r2
 8001420:	419b      	sbcs	r3, r3
 8001422:	4441      	add	r1, r8
 8001424:	425b      	negs	r3, r3
 8001426:	18c9      	adds	r1, r1, r3
 8001428:	0035      	movs	r5, r6
 800142a:	e5a3      	b.n	8000f74 <__aeabi_dadd+0x164>
 800142c:	003b      	movs	r3, r7
 800142e:	4333      	orrs	r3, r6
 8001430:	d0ce      	beq.n	80013d0 <__aeabi_dadd+0x5c0>
 8001432:	2207      	movs	r2, #7
 8001434:	0031      	movs	r1, r6
 8001436:	403a      	ands	r2, r7
 8001438:	e652      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 800143a:	2300      	movs	r3, #0
 800143c:	001a      	movs	r2, r3
 800143e:	e5f4      	b.n	800102a <__aeabi_dadd+0x21a>
 8001440:	000007ff 	.word	0x000007ff
 8001444:	ff7fffff 	.word	0xff7fffff

08001448 <__aeabi_ddiv>:
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	4657      	mov	r7, sl
 800144c:	46de      	mov	lr, fp
 800144e:	464e      	mov	r6, r9
 8001450:	4645      	mov	r5, r8
 8001452:	b5e0      	push	{r5, r6, r7, lr}
 8001454:	4683      	mov	fp, r0
 8001456:	0007      	movs	r7, r0
 8001458:	030e      	lsls	r6, r1, #12
 800145a:	0048      	lsls	r0, r1, #1
 800145c:	b085      	sub	sp, #20
 800145e:	4692      	mov	sl, r2
 8001460:	001c      	movs	r4, r3
 8001462:	0b36      	lsrs	r6, r6, #12
 8001464:	0d40      	lsrs	r0, r0, #21
 8001466:	0fcd      	lsrs	r5, r1, #31
 8001468:	2800      	cmp	r0, #0
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x26>
 800146c:	e09d      	b.n	80015aa <__aeabi_ddiv+0x162>
 800146e:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <__aeabi_ddiv+0x27c>)
 8001470:	4298      	cmp	r0, r3
 8001472:	d039      	beq.n	80014e8 <__aeabi_ddiv+0xa0>
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	00f6      	lsls	r6, r6, #3
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431e      	orrs	r6, r3
 800147c:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <__aeabi_ddiv+0x280>)
 800147e:	0f7b      	lsrs	r3, r7, #29
 8001480:	4333      	orrs	r3, r6
 8001482:	4699      	mov	r9, r3
 8001484:	4694      	mov	ip, r2
 8001486:	0003      	movs	r3, r0
 8001488:	4463      	add	r3, ip
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	2600      	movs	r6, #0
 8001490:	00ff      	lsls	r7, r7, #3
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	0323      	lsls	r3, r4, #12
 8001496:	0b1b      	lsrs	r3, r3, #12
 8001498:	4698      	mov	r8, r3
 800149a:	0063      	lsls	r3, r4, #1
 800149c:	0fe4      	lsrs	r4, r4, #31
 800149e:	4652      	mov	r2, sl
 80014a0:	0d5b      	lsrs	r3, r3, #21
 80014a2:	9401      	str	r4, [sp, #4]
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x60>
 80014a6:	e0b3      	b.n	8001610 <__aeabi_ddiv+0x1c8>
 80014a8:	4986      	ldr	r1, [pc, #536]	; (80016c4 <__aeabi_ddiv+0x27c>)
 80014aa:	428b      	cmp	r3, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x68>
 80014ae:	e09e      	b.n	80015ee <__aeabi_ddiv+0x1a6>
 80014b0:	4642      	mov	r2, r8
 80014b2:	00d1      	lsls	r1, r2, #3
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	430a      	orrs	r2, r1
 80014ba:	4651      	mov	r1, sl
 80014bc:	0f49      	lsrs	r1, r1, #29
 80014be:	4311      	orrs	r1, r2
 80014c0:	468b      	mov	fp, r1
 80014c2:	4981      	ldr	r1, [pc, #516]	; (80016c8 <__aeabi_ddiv+0x280>)
 80014c4:	4652      	mov	r2, sl
 80014c6:	468c      	mov	ip, r1
 80014c8:	9900      	ldr	r1, [sp, #0]
 80014ca:	4463      	add	r3, ip
 80014cc:	1acb      	subs	r3, r1, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	00d2      	lsls	r2, r2, #3
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	002b      	movs	r3, r5
 80014d6:	4063      	eors	r3, r4
 80014d8:	469a      	mov	sl, r3
 80014da:	2e0f      	cmp	r6, #15
 80014dc:	d900      	bls.n	80014e0 <__aeabi_ddiv+0x98>
 80014de:	e105      	b.n	80016ec <__aeabi_ddiv+0x2a4>
 80014e0:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <__aeabi_ddiv+0x284>)
 80014e2:	00b6      	lsls	r6, r6, #2
 80014e4:	599b      	ldr	r3, [r3, r6]
 80014e6:	469f      	mov	pc, r3
 80014e8:	465b      	mov	r3, fp
 80014ea:	4333      	orrs	r3, r6
 80014ec:	4699      	mov	r9, r3
 80014ee:	d000      	beq.n	80014f2 <__aeabi_ddiv+0xaa>
 80014f0:	e0b8      	b.n	8001664 <__aeabi_ddiv+0x21c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	2608      	movs	r6, #8
 80014f6:	2700      	movs	r7, #0
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	e7ca      	b.n	8001494 <__aeabi_ddiv+0x4c>
 80014fe:	46cb      	mov	fp, r9
 8001500:	003a      	movs	r2, r7
 8001502:	9902      	ldr	r1, [sp, #8]
 8001504:	9501      	str	r5, [sp, #4]
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	469a      	mov	sl, r3
 800150a:	2902      	cmp	r1, #2
 800150c:	d027      	beq.n	800155e <__aeabi_ddiv+0x116>
 800150e:	2903      	cmp	r1, #3
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0xcc>
 8001512:	e280      	b.n	8001a16 <__aeabi_ddiv+0x5ce>
 8001514:	2901      	cmp	r1, #1
 8001516:	d044      	beq.n	80015a2 <__aeabi_ddiv+0x15a>
 8001518:	496d      	ldr	r1, [pc, #436]	; (80016d0 <__aeabi_ddiv+0x288>)
 800151a:	9b00      	ldr	r3, [sp, #0]
 800151c:	468c      	mov	ip, r1
 800151e:	4463      	add	r3, ip
 8001520:	001c      	movs	r4, r3
 8001522:	2c00      	cmp	r4, #0
 8001524:	dd38      	ble.n	8001598 <__aeabi_ddiv+0x150>
 8001526:	0753      	lsls	r3, r2, #29
 8001528:	d000      	beq.n	800152c <__aeabi_ddiv+0xe4>
 800152a:	e213      	b.n	8001954 <__aeabi_ddiv+0x50c>
 800152c:	08d2      	lsrs	r2, r2, #3
 800152e:	465b      	mov	r3, fp
 8001530:	01db      	lsls	r3, r3, #7
 8001532:	d509      	bpl.n	8001548 <__aeabi_ddiv+0x100>
 8001534:	4659      	mov	r1, fp
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <__aeabi_ddiv+0x28c>)
 8001538:	4019      	ands	r1, r3
 800153a:	468b      	mov	fp, r1
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	00c9      	lsls	r1, r1, #3
 8001540:	468c      	mov	ip, r1
 8001542:	9b00      	ldr	r3, [sp, #0]
 8001544:	4463      	add	r3, ip
 8001546:	001c      	movs	r4, r3
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <__aeabi_ddiv+0x290>)
 800154a:	429c      	cmp	r4, r3
 800154c:	dc07      	bgt.n	800155e <__aeabi_ddiv+0x116>
 800154e:	465b      	mov	r3, fp
 8001550:	0564      	lsls	r4, r4, #21
 8001552:	075f      	lsls	r7, r3, #29
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4317      	orrs	r7, r2
 8001558:	0b1b      	lsrs	r3, r3, #12
 800155a:	0d62      	lsrs	r2, r4, #21
 800155c:	e002      	b.n	8001564 <__aeabi_ddiv+0x11c>
 800155e:	2300      	movs	r3, #0
 8001560:	2700      	movs	r7, #0
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <__aeabi_ddiv+0x27c>)
 8001564:	2100      	movs	r1, #0
 8001566:	031b      	lsls	r3, r3, #12
 8001568:	0b1c      	lsrs	r4, r3, #12
 800156a:	0d0b      	lsrs	r3, r1, #20
 800156c:	051b      	lsls	r3, r3, #20
 800156e:	4323      	orrs	r3, r4
 8001570:	0514      	lsls	r4, r2, #20
 8001572:	4a5a      	ldr	r2, [pc, #360]	; (80016dc <__aeabi_ddiv+0x294>)
 8001574:	0038      	movs	r0, r7
 8001576:	4013      	ands	r3, r2
 8001578:	431c      	orrs	r4, r3
 800157a:	4653      	mov	r3, sl
 800157c:	0064      	lsls	r4, r4, #1
 800157e:	07db      	lsls	r3, r3, #31
 8001580:	0864      	lsrs	r4, r4, #1
 8001582:	431c      	orrs	r4, r3
 8001584:	0021      	movs	r1, r4
 8001586:	b005      	add	sp, #20
 8001588:	bc3c      	pop	{r2, r3, r4, r5}
 800158a:	4690      	mov	r8, r2
 800158c:	4699      	mov	r9, r3
 800158e:	46a2      	mov	sl, r4
 8001590:	46ab      	mov	fp, r5
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001594:	2201      	movs	r2, #1
 8001596:	4252      	negs	r2, r2
 8001598:	2301      	movs	r3, #1
 800159a:	1b1b      	subs	r3, r3, r4
 800159c:	2b38      	cmp	r3, #56	; 0x38
 800159e:	dc00      	bgt.n	80015a2 <__aeabi_ddiv+0x15a>
 80015a0:	e1ad      	b.n	80018fe <__aeabi_ddiv+0x4b6>
 80015a2:	2200      	movs	r2, #0
 80015a4:	2300      	movs	r3, #0
 80015a6:	2700      	movs	r7, #0
 80015a8:	e7dc      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80015aa:	465b      	mov	r3, fp
 80015ac:	4333      	orrs	r3, r6
 80015ae:	4699      	mov	r9, r3
 80015b0:	d05e      	beq.n	8001670 <__aeabi_ddiv+0x228>
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x170>
 80015b6:	e18a      	b.n	80018ce <__aeabi_ddiv+0x486>
 80015b8:	0030      	movs	r0, r6
 80015ba:	f001 fa9d 	bl	8002af8 <__clzsi2>
 80015be:	0003      	movs	r3, r0
 80015c0:	3b0b      	subs	r3, #11
 80015c2:	2b1c      	cmp	r3, #28
 80015c4:	dd00      	ble.n	80015c8 <__aeabi_ddiv+0x180>
 80015c6:	e17b      	b.n	80018c0 <__aeabi_ddiv+0x478>
 80015c8:	221d      	movs	r2, #29
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	465a      	mov	r2, fp
 80015ce:	0001      	movs	r1, r0
 80015d0:	40da      	lsrs	r2, r3
 80015d2:	3908      	subs	r1, #8
 80015d4:	408e      	lsls	r6, r1
 80015d6:	0013      	movs	r3, r2
 80015d8:	465f      	mov	r7, fp
 80015da:	4333      	orrs	r3, r6
 80015dc:	4699      	mov	r9, r3
 80015de:	408f      	lsls	r7, r1
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <__aeabi_ddiv+0x298>)
 80015e2:	2600      	movs	r6, #0
 80015e4:	1a1b      	subs	r3, r3, r0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	e752      	b.n	8001494 <__aeabi_ddiv+0x4c>
 80015ee:	4641      	mov	r1, r8
 80015f0:	4653      	mov	r3, sl
 80015f2:	430b      	orrs	r3, r1
 80015f4:	493b      	ldr	r1, [pc, #236]	; (80016e4 <__aeabi_ddiv+0x29c>)
 80015f6:	469b      	mov	fp, r3
 80015f8:	468c      	mov	ip, r1
 80015fa:	9b00      	ldr	r3, [sp, #0]
 80015fc:	4463      	add	r3, ip
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	465b      	mov	r3, fp
 8001602:	2b00      	cmp	r3, #0
 8001604:	d13b      	bne.n	800167e <__aeabi_ddiv+0x236>
 8001606:	2302      	movs	r3, #2
 8001608:	2200      	movs	r2, #0
 800160a:	431e      	orrs	r6, r3
 800160c:	2102      	movs	r1, #2
 800160e:	e761      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001610:	4643      	mov	r3, r8
 8001612:	4313      	orrs	r3, r2
 8001614:	469b      	mov	fp, r3
 8001616:	d037      	beq.n	8001688 <__aeabi_ddiv+0x240>
 8001618:	4643      	mov	r3, r8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x1d8>
 800161e:	e162      	b.n	80018e6 <__aeabi_ddiv+0x49e>
 8001620:	4640      	mov	r0, r8
 8001622:	f001 fa69 	bl	8002af8 <__clzsi2>
 8001626:	0003      	movs	r3, r0
 8001628:	3b0b      	subs	r3, #11
 800162a:	2b1c      	cmp	r3, #28
 800162c:	dd00      	ble.n	8001630 <__aeabi_ddiv+0x1e8>
 800162e:	e153      	b.n	80018d8 <__aeabi_ddiv+0x490>
 8001630:	0002      	movs	r2, r0
 8001632:	4641      	mov	r1, r8
 8001634:	3a08      	subs	r2, #8
 8001636:	4091      	lsls	r1, r2
 8001638:	4688      	mov	r8, r1
 800163a:	211d      	movs	r1, #29
 800163c:	1acb      	subs	r3, r1, r3
 800163e:	4651      	mov	r1, sl
 8001640:	40d9      	lsrs	r1, r3
 8001642:	000b      	movs	r3, r1
 8001644:	4641      	mov	r1, r8
 8001646:	430b      	orrs	r3, r1
 8001648:	469b      	mov	fp, r3
 800164a:	4653      	mov	r3, sl
 800164c:	4093      	lsls	r3, r2
 800164e:	001a      	movs	r2, r3
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	4925      	ldr	r1, [pc, #148]	; (80016e8 <__aeabi_ddiv+0x2a0>)
 8001654:	469c      	mov	ip, r3
 8001656:	4460      	add	r0, ip
 8001658:	0003      	movs	r3, r0
 800165a:	468c      	mov	ip, r1
 800165c:	4463      	add	r3, ip
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2100      	movs	r1, #0
 8001662:	e737      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001664:	2303      	movs	r3, #3
 8001666:	46b1      	mov	r9, r6
 8001668:	9000      	str	r0, [sp, #0]
 800166a:	260c      	movs	r6, #12
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	e711      	b.n	8001494 <__aeabi_ddiv+0x4c>
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	2604      	movs	r6, #4
 8001678:	2700      	movs	r7, #0
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	e70a      	b.n	8001494 <__aeabi_ddiv+0x4c>
 800167e:	2303      	movs	r3, #3
 8001680:	46c3      	mov	fp, r8
 8001682:	431e      	orrs	r6, r3
 8001684:	2103      	movs	r1, #3
 8001686:	e725      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001688:	3301      	adds	r3, #1
 800168a:	431e      	orrs	r6, r3
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	e720      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001692:	2300      	movs	r3, #0
 8001694:	469a      	mov	sl, r3
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	2700      	movs	r7, #0
 800169a:	031b      	lsls	r3, r3, #12
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <__aeabi_ddiv+0x27c>)
 800169e:	e761      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	4649      	mov	r1, r9
 80016a4:	031b      	lsls	r3, r3, #12
 80016a6:	4219      	tst	r1, r3
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x264>
 80016aa:	e0e2      	b.n	8001872 <__aeabi_ddiv+0x42a>
 80016ac:	4659      	mov	r1, fp
 80016ae:	4219      	tst	r1, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_ddiv+0x26c>
 80016b2:	e0de      	b.n	8001872 <__aeabi_ddiv+0x42a>
 80016b4:	430b      	orrs	r3, r1
 80016b6:	031b      	lsls	r3, r3, #12
 80016b8:	0017      	movs	r7, r2
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	46a2      	mov	sl, r4
 80016be:	4a01      	ldr	r2, [pc, #4]	; (80016c4 <__aeabi_ddiv+0x27c>)
 80016c0:	e750      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	000007ff 	.word	0x000007ff
 80016c8:	fffffc01 	.word	0xfffffc01
 80016cc:	0801677c 	.word	0x0801677c
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	fffffc0d 	.word	0xfffffc0d
 80016e4:	fffff801 	.word	0xfffff801
 80016e8:	000003f3 	.word	0x000003f3
 80016ec:	45d9      	cmp	r9, fp
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x2aa>
 80016f0:	e0cb      	b.n	800188a <__aeabi_ddiv+0x442>
 80016f2:	d100      	bne.n	80016f6 <__aeabi_ddiv+0x2ae>
 80016f4:	e0c6      	b.n	8001884 <__aeabi_ddiv+0x43c>
 80016f6:	003c      	movs	r4, r7
 80016f8:	4648      	mov	r0, r9
 80016fa:	2700      	movs	r7, #0
 80016fc:	9b00      	ldr	r3, [sp, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	465b      	mov	r3, fp
 8001704:	0e16      	lsrs	r6, r2, #24
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	431e      	orrs	r6, r3
 800170a:	0213      	lsls	r3, r2, #8
 800170c:	4698      	mov	r8, r3
 800170e:	0433      	lsls	r3, r6, #16
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	4699      	mov	r9, r3
 8001714:	0c31      	lsrs	r1, r6, #16
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	f7fe fd96 	bl	8000248 <__aeabi_uidivmod>
 800171c:	464a      	mov	r2, r9
 800171e:	4342      	muls	r2, r0
 8001720:	040b      	lsls	r3, r1, #16
 8001722:	0c21      	lsrs	r1, r4, #16
 8001724:	0005      	movs	r5, r0
 8001726:	4319      	orrs	r1, r3
 8001728:	428a      	cmp	r2, r1
 800172a:	d907      	bls.n	800173c <__aeabi_ddiv+0x2f4>
 800172c:	1989      	adds	r1, r1, r6
 800172e:	3d01      	subs	r5, #1
 8001730:	428e      	cmp	r6, r1
 8001732:	d803      	bhi.n	800173c <__aeabi_ddiv+0x2f4>
 8001734:	428a      	cmp	r2, r1
 8001736:	d901      	bls.n	800173c <__aeabi_ddiv+0x2f4>
 8001738:	1e85      	subs	r5, r0, #2
 800173a:	1989      	adds	r1, r1, r6
 800173c:	1a88      	subs	r0, r1, r2
 800173e:	9901      	ldr	r1, [sp, #4]
 8001740:	f7fe fd82 	bl	8000248 <__aeabi_uidivmod>
 8001744:	0409      	lsls	r1, r1, #16
 8001746:	468c      	mov	ip, r1
 8001748:	464a      	mov	r2, r9
 800174a:	0421      	lsls	r1, r4, #16
 800174c:	4664      	mov	r4, ip
 800174e:	4342      	muls	r2, r0
 8001750:	0c09      	lsrs	r1, r1, #16
 8001752:	0003      	movs	r3, r0
 8001754:	4321      	orrs	r1, r4
 8001756:	428a      	cmp	r2, r1
 8001758:	d904      	bls.n	8001764 <__aeabi_ddiv+0x31c>
 800175a:	1989      	adds	r1, r1, r6
 800175c:	3b01      	subs	r3, #1
 800175e:	428e      	cmp	r6, r1
 8001760:	d800      	bhi.n	8001764 <__aeabi_ddiv+0x31c>
 8001762:	e0f1      	b.n	8001948 <__aeabi_ddiv+0x500>
 8001764:	042d      	lsls	r5, r5, #16
 8001766:	431d      	orrs	r5, r3
 8001768:	46ab      	mov	fp, r5
 800176a:	4643      	mov	r3, r8
 800176c:	1a89      	subs	r1, r1, r2
 800176e:	4642      	mov	r2, r8
 8001770:	0c28      	lsrs	r0, r5, #16
 8001772:	0412      	lsls	r2, r2, #16
 8001774:	0c1d      	lsrs	r5, r3, #16
 8001776:	465b      	mov	r3, fp
 8001778:	0c14      	lsrs	r4, r2, #16
 800177a:	0022      	movs	r2, r4
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	435a      	muls	r2, r3
 8001782:	9403      	str	r4, [sp, #12]
 8001784:	436b      	muls	r3, r5
 8001786:	4344      	muls	r4, r0
 8001788:	9502      	str	r5, [sp, #8]
 800178a:	4368      	muls	r0, r5
 800178c:	191b      	adds	r3, r3, r4
 800178e:	0c15      	lsrs	r5, r2, #16
 8001790:	18eb      	adds	r3, r5, r3
 8001792:	429c      	cmp	r4, r3
 8001794:	d903      	bls.n	800179e <__aeabi_ddiv+0x356>
 8001796:	2480      	movs	r4, #128	; 0x80
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	46a4      	mov	ip, r4
 800179c:	4460      	add	r0, ip
 800179e:	0c1c      	lsrs	r4, r3, #16
 80017a0:	0415      	lsls	r5, r2, #16
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c2d      	lsrs	r5, r5, #16
 80017a6:	1820      	adds	r0, r4, r0
 80017a8:	195d      	adds	r5, r3, r5
 80017aa:	4281      	cmp	r1, r0
 80017ac:	d377      	bcc.n	800189e <__aeabi_ddiv+0x456>
 80017ae:	d073      	beq.n	8001898 <__aeabi_ddiv+0x450>
 80017b0:	1a0c      	subs	r4, r1, r0
 80017b2:	4aa2      	ldr	r2, [pc, #648]	; (8001a3c <__aeabi_ddiv+0x5f4>)
 80017b4:	1b7d      	subs	r5, r7, r5
 80017b6:	42af      	cmp	r7, r5
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	4694      	mov	ip, r2
 80017bc:	9b00      	ldr	r3, [sp, #0]
 80017be:	427f      	negs	r7, r7
 80017c0:	4463      	add	r3, ip
 80017c2:	1be0      	subs	r0, r4, r7
 80017c4:	001c      	movs	r4, r3
 80017c6:	4286      	cmp	r6, r0
 80017c8:	d100      	bne.n	80017cc <__aeabi_ddiv+0x384>
 80017ca:	e0db      	b.n	8001984 <__aeabi_ddiv+0x53c>
 80017cc:	9901      	ldr	r1, [sp, #4]
 80017ce:	f7fe fd3b 	bl	8000248 <__aeabi_uidivmod>
 80017d2:	464a      	mov	r2, r9
 80017d4:	4342      	muls	r2, r0
 80017d6:	040b      	lsls	r3, r1, #16
 80017d8:	0c29      	lsrs	r1, r5, #16
 80017da:	0007      	movs	r7, r0
 80017dc:	4319      	orrs	r1, r3
 80017de:	428a      	cmp	r2, r1
 80017e0:	d907      	bls.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017e2:	1989      	adds	r1, r1, r6
 80017e4:	3f01      	subs	r7, #1
 80017e6:	428e      	cmp	r6, r1
 80017e8:	d803      	bhi.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017ea:	428a      	cmp	r2, r1
 80017ec:	d901      	bls.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017ee:	1e87      	subs	r7, r0, #2
 80017f0:	1989      	adds	r1, r1, r6
 80017f2:	1a88      	subs	r0, r1, r2
 80017f4:	9901      	ldr	r1, [sp, #4]
 80017f6:	f7fe fd27 	bl	8000248 <__aeabi_uidivmod>
 80017fa:	0409      	lsls	r1, r1, #16
 80017fc:	464a      	mov	r2, r9
 80017fe:	4689      	mov	r9, r1
 8001800:	0429      	lsls	r1, r5, #16
 8001802:	464d      	mov	r5, r9
 8001804:	4342      	muls	r2, r0
 8001806:	0c09      	lsrs	r1, r1, #16
 8001808:	0003      	movs	r3, r0
 800180a:	4329      	orrs	r1, r5
 800180c:	428a      	cmp	r2, r1
 800180e:	d907      	bls.n	8001820 <__aeabi_ddiv+0x3d8>
 8001810:	1989      	adds	r1, r1, r6
 8001812:	3b01      	subs	r3, #1
 8001814:	428e      	cmp	r6, r1
 8001816:	d803      	bhi.n	8001820 <__aeabi_ddiv+0x3d8>
 8001818:	428a      	cmp	r2, r1
 800181a:	d901      	bls.n	8001820 <__aeabi_ddiv+0x3d8>
 800181c:	1e83      	subs	r3, r0, #2
 800181e:	1989      	adds	r1, r1, r6
 8001820:	043f      	lsls	r7, r7, #16
 8001822:	1a89      	subs	r1, r1, r2
 8001824:	003a      	movs	r2, r7
 8001826:	9f03      	ldr	r7, [sp, #12]
 8001828:	431a      	orrs	r2, r3
 800182a:	0038      	movs	r0, r7
 800182c:	0413      	lsls	r3, r2, #16
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	4358      	muls	r0, r3
 8001832:	4681      	mov	r9, r0
 8001834:	9802      	ldr	r0, [sp, #8]
 8001836:	0c15      	lsrs	r5, r2, #16
 8001838:	436f      	muls	r7, r5
 800183a:	4343      	muls	r3, r0
 800183c:	4345      	muls	r5, r0
 800183e:	4648      	mov	r0, r9
 8001840:	0c00      	lsrs	r0, r0, #16
 8001842:	4684      	mov	ip, r0
 8001844:	19db      	adds	r3, r3, r7
 8001846:	4463      	add	r3, ip
 8001848:	429f      	cmp	r7, r3
 800184a:	d903      	bls.n	8001854 <__aeabi_ddiv+0x40c>
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	0240      	lsls	r0, r0, #9
 8001850:	4684      	mov	ip, r0
 8001852:	4465      	add	r5, ip
 8001854:	4648      	mov	r0, r9
 8001856:	0c1f      	lsrs	r7, r3, #16
 8001858:	0400      	lsls	r0, r0, #16
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	0c00      	lsrs	r0, r0, #16
 800185e:	197d      	adds	r5, r7, r5
 8001860:	1818      	adds	r0, r3, r0
 8001862:	42a9      	cmp	r1, r5
 8001864:	d200      	bcs.n	8001868 <__aeabi_ddiv+0x420>
 8001866:	e084      	b.n	8001972 <__aeabi_ddiv+0x52a>
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x424>
 800186a:	e07f      	b.n	800196c <__aeabi_ddiv+0x524>
 800186c:	2301      	movs	r3, #1
 800186e:	431a      	orrs	r2, r3
 8001870:	e657      	b.n	8001522 <__aeabi_ddiv+0xda>
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	464a      	mov	r2, r9
 8001876:	031b      	lsls	r3, r3, #12
 8001878:	4313      	orrs	r3, r2
 800187a:	031b      	lsls	r3, r3, #12
 800187c:	0b1b      	lsrs	r3, r3, #12
 800187e:	46aa      	mov	sl, r5
 8001880:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <__aeabi_ddiv+0x5f8>)
 8001882:	e66f      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001884:	42ba      	cmp	r2, r7
 8001886:	d900      	bls.n	800188a <__aeabi_ddiv+0x442>
 8001888:	e735      	b.n	80016f6 <__aeabi_ddiv+0x2ae>
 800188a:	464b      	mov	r3, r9
 800188c:	07dc      	lsls	r4, r3, #31
 800188e:	0858      	lsrs	r0, r3, #1
 8001890:	087b      	lsrs	r3, r7, #1
 8001892:	431c      	orrs	r4, r3
 8001894:	07ff      	lsls	r7, r7, #31
 8001896:	e734      	b.n	8001702 <__aeabi_ddiv+0x2ba>
 8001898:	2400      	movs	r4, #0
 800189a:	42af      	cmp	r7, r5
 800189c:	d289      	bcs.n	80017b2 <__aeabi_ddiv+0x36a>
 800189e:	4447      	add	r7, r8
 80018a0:	4547      	cmp	r7, r8
 80018a2:	41a4      	sbcs	r4, r4
 80018a4:	465b      	mov	r3, fp
 80018a6:	4264      	negs	r4, r4
 80018a8:	19a4      	adds	r4, r4, r6
 80018aa:	1864      	adds	r4, r4, r1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	42a6      	cmp	r6, r4
 80018b0:	d21e      	bcs.n	80018f0 <__aeabi_ddiv+0x4a8>
 80018b2:	42a0      	cmp	r0, r4
 80018b4:	d86d      	bhi.n	8001992 <__aeabi_ddiv+0x54a>
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x472>
 80018b8:	e0b6      	b.n	8001a28 <__aeabi_ddiv+0x5e0>
 80018ba:	1a24      	subs	r4, r4, r0
 80018bc:	469b      	mov	fp, r3
 80018be:	e778      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80018c0:	0003      	movs	r3, r0
 80018c2:	465a      	mov	r2, fp
 80018c4:	3b28      	subs	r3, #40	; 0x28
 80018c6:	409a      	lsls	r2, r3
 80018c8:	2700      	movs	r7, #0
 80018ca:	4691      	mov	r9, r2
 80018cc:	e688      	b.n	80015e0 <__aeabi_ddiv+0x198>
 80018ce:	4658      	mov	r0, fp
 80018d0:	f001 f912 	bl	8002af8 <__clzsi2>
 80018d4:	3020      	adds	r0, #32
 80018d6:	e672      	b.n	80015be <__aeabi_ddiv+0x176>
 80018d8:	0003      	movs	r3, r0
 80018da:	4652      	mov	r2, sl
 80018dc:	3b28      	subs	r3, #40	; 0x28
 80018de:	409a      	lsls	r2, r3
 80018e0:	4693      	mov	fp, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	e6b4      	b.n	8001650 <__aeabi_ddiv+0x208>
 80018e6:	4650      	mov	r0, sl
 80018e8:	f001 f906 	bl	8002af8 <__clzsi2>
 80018ec:	3020      	adds	r0, #32
 80018ee:	e69a      	b.n	8001626 <__aeabi_ddiv+0x1de>
 80018f0:	42a6      	cmp	r6, r4
 80018f2:	d1e2      	bne.n	80018ba <__aeabi_ddiv+0x472>
 80018f4:	45b8      	cmp	r8, r7
 80018f6:	d9dc      	bls.n	80018b2 <__aeabi_ddiv+0x46a>
 80018f8:	1a34      	subs	r4, r6, r0
 80018fa:	469b      	mov	fp, r3
 80018fc:	e759      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80018fe:	2b1f      	cmp	r3, #31
 8001900:	dc65      	bgt.n	80019ce <__aeabi_ddiv+0x586>
 8001902:	4c50      	ldr	r4, [pc, #320]	; (8001a44 <__aeabi_ddiv+0x5fc>)
 8001904:	9900      	ldr	r1, [sp, #0]
 8001906:	46a4      	mov	ip, r4
 8001908:	465c      	mov	r4, fp
 800190a:	4461      	add	r1, ip
 800190c:	0008      	movs	r0, r1
 800190e:	408c      	lsls	r4, r1
 8001910:	0011      	movs	r1, r2
 8001912:	4082      	lsls	r2, r0
 8001914:	40d9      	lsrs	r1, r3
 8001916:	1e50      	subs	r0, r2, #1
 8001918:	4182      	sbcs	r2, r0
 800191a:	430c      	orrs	r4, r1
 800191c:	4314      	orrs	r4, r2
 800191e:	465a      	mov	r2, fp
 8001920:	40da      	lsrs	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	0762      	lsls	r2, r4, #29
 8001926:	d009      	beq.n	800193c <__aeabi_ddiv+0x4f4>
 8001928:	220f      	movs	r2, #15
 800192a:	4022      	ands	r2, r4
 800192c:	2a04      	cmp	r2, #4
 800192e:	d005      	beq.n	800193c <__aeabi_ddiv+0x4f4>
 8001930:	0022      	movs	r2, r4
 8001932:	1d14      	adds	r4, r2, #4
 8001934:	4294      	cmp	r4, r2
 8001936:	4189      	sbcs	r1, r1
 8001938:	4249      	negs	r1, r1
 800193a:	185b      	adds	r3, r3, r1
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	d562      	bpl.n	8001a06 <__aeabi_ddiv+0x5be>
 8001940:	2201      	movs	r2, #1
 8001942:	2300      	movs	r3, #0
 8001944:	2700      	movs	r7, #0
 8001946:	e60d      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001948:	428a      	cmp	r2, r1
 800194a:	d800      	bhi.n	800194e <__aeabi_ddiv+0x506>
 800194c:	e70a      	b.n	8001764 <__aeabi_ddiv+0x31c>
 800194e:	1e83      	subs	r3, r0, #2
 8001950:	1989      	adds	r1, r1, r6
 8001952:	e707      	b.n	8001764 <__aeabi_ddiv+0x31c>
 8001954:	230f      	movs	r3, #15
 8001956:	4013      	ands	r3, r2
 8001958:	2b04      	cmp	r3, #4
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0x516>
 800195c:	e5e6      	b.n	800152c <__aeabi_ddiv+0xe4>
 800195e:	1d17      	adds	r7, r2, #4
 8001960:	4297      	cmp	r7, r2
 8001962:	4192      	sbcs	r2, r2
 8001964:	4253      	negs	r3, r2
 8001966:	449b      	add	fp, r3
 8001968:	08fa      	lsrs	r2, r7, #3
 800196a:	e5e0      	b.n	800152e <__aeabi_ddiv+0xe6>
 800196c:	2800      	cmp	r0, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x52a>
 8001970:	e5d7      	b.n	8001522 <__aeabi_ddiv+0xda>
 8001972:	1871      	adds	r1, r6, r1
 8001974:	1e53      	subs	r3, r2, #1
 8001976:	42b1      	cmp	r1, r6
 8001978:	d327      	bcc.n	80019ca <__aeabi_ddiv+0x582>
 800197a:	42a9      	cmp	r1, r5
 800197c:	d315      	bcc.n	80019aa <__aeabi_ddiv+0x562>
 800197e:	d058      	beq.n	8001a32 <__aeabi_ddiv+0x5ea>
 8001980:	001a      	movs	r2, r3
 8001982:	e773      	b.n	800186c <__aeabi_ddiv+0x424>
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_ddiv+0x542>
 8001988:	e604      	b.n	8001594 <__aeabi_ddiv+0x14c>
 800198a:	2301      	movs	r3, #1
 800198c:	2200      	movs	r2, #0
 800198e:	449b      	add	fp, r3
 8001990:	e5cd      	b.n	800152e <__aeabi_ddiv+0xe6>
 8001992:	2302      	movs	r3, #2
 8001994:	4447      	add	r7, r8
 8001996:	4547      	cmp	r7, r8
 8001998:	4189      	sbcs	r1, r1
 800199a:	425b      	negs	r3, r3
 800199c:	469c      	mov	ip, r3
 800199e:	4249      	negs	r1, r1
 80019a0:	1989      	adds	r1, r1, r6
 80019a2:	190c      	adds	r4, r1, r4
 80019a4:	44e3      	add	fp, ip
 80019a6:	1a24      	subs	r4, r4, r0
 80019a8:	e703      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80019aa:	4643      	mov	r3, r8
 80019ac:	005f      	lsls	r7, r3, #1
 80019ae:	4547      	cmp	r7, r8
 80019b0:	419b      	sbcs	r3, r3
 80019b2:	46b8      	mov	r8, r7
 80019b4:	425b      	negs	r3, r3
 80019b6:	199e      	adds	r6, r3, r6
 80019b8:	3a02      	subs	r2, #2
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	42a9      	cmp	r1, r5
 80019be:	d000      	beq.n	80019c2 <__aeabi_ddiv+0x57a>
 80019c0:	e754      	b.n	800186c <__aeabi_ddiv+0x424>
 80019c2:	4540      	cmp	r0, r8
 80019c4:	d000      	beq.n	80019c8 <__aeabi_ddiv+0x580>
 80019c6:	e751      	b.n	800186c <__aeabi_ddiv+0x424>
 80019c8:	e5ab      	b.n	8001522 <__aeabi_ddiv+0xda>
 80019ca:	001a      	movs	r2, r3
 80019cc:	e7f6      	b.n	80019bc <__aeabi_ddiv+0x574>
 80019ce:	211f      	movs	r1, #31
 80019d0:	465f      	mov	r7, fp
 80019d2:	4249      	negs	r1, r1
 80019d4:	1b0c      	subs	r4, r1, r4
 80019d6:	40e7      	lsrs	r7, r4
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d007      	beq.n	80019ec <__aeabi_ddiv+0x5a4>
 80019dc:	491a      	ldr	r1, [pc, #104]	; (8001a48 <__aeabi_ddiv+0x600>)
 80019de:	9b00      	ldr	r3, [sp, #0]
 80019e0:	468c      	mov	ip, r1
 80019e2:	4463      	add	r3, ip
 80019e4:	0018      	movs	r0, r3
 80019e6:	465b      	mov	r3, fp
 80019e8:	4083      	lsls	r3, r0
 80019ea:	431a      	orrs	r2, r3
 80019ec:	1e50      	subs	r0, r2, #1
 80019ee:	4182      	sbcs	r2, r0
 80019f0:	433a      	orrs	r2, r7
 80019f2:	2707      	movs	r7, #7
 80019f4:	2300      	movs	r3, #0
 80019f6:	4017      	ands	r7, r2
 80019f8:	d009      	beq.n	8001a0e <__aeabi_ddiv+0x5c6>
 80019fa:	210f      	movs	r1, #15
 80019fc:	2300      	movs	r3, #0
 80019fe:	4011      	ands	r1, r2
 8001a00:	0014      	movs	r4, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d195      	bne.n	8001932 <__aeabi_ddiv+0x4ea>
 8001a06:	0022      	movs	r2, r4
 8001a08:	075f      	lsls	r7, r3, #29
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	0b1b      	lsrs	r3, r3, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4317      	orrs	r7, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e5a6      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	4659      	mov	r1, fp
 8001a1a:	031b      	lsls	r3, r3, #12
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	0017      	movs	r7, r2
 8001a22:	0b1b      	lsrs	r3, r3, #12
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <__aeabi_ddiv+0x5f8>)
 8001a26:	e59d      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001a28:	42bd      	cmp	r5, r7
 8001a2a:	d8b2      	bhi.n	8001992 <__aeabi_ddiv+0x54a>
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	2400      	movs	r4, #0
 8001a30:	e6bf      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 8001a32:	4580      	cmp	r8, r0
 8001a34:	d3b9      	bcc.n	80019aa <__aeabi_ddiv+0x562>
 8001a36:	001a      	movs	r2, r3
 8001a38:	e7c3      	b.n	80019c2 <__aeabi_ddiv+0x57a>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	0000041e 	.word	0x0000041e
 8001a48:	0000043e 	.word	0x0000043e

08001a4c <__eqdf2>:
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	464f      	mov	r7, r9
 8001a50:	4646      	mov	r6, r8
 8001a52:	46d6      	mov	lr, sl
 8001a54:	4684      	mov	ip, r0
 8001a56:	b5c0      	push	{r6, r7, lr}
 8001a58:	4680      	mov	r8, r0
 8001a5a:	4e19      	ldr	r6, [pc, #100]	; (8001ac0 <__eqdf2+0x74>)
 8001a5c:	0318      	lsls	r0, r3, #12
 8001a5e:	030f      	lsls	r7, r1, #12
 8001a60:	004d      	lsls	r5, r1, #1
 8001a62:	0b00      	lsrs	r0, r0, #12
 8001a64:	005c      	lsls	r4, r3, #1
 8001a66:	4682      	mov	sl, r0
 8001a68:	0b3f      	lsrs	r7, r7, #12
 8001a6a:	0d6d      	lsrs	r5, r5, #21
 8001a6c:	0fc9      	lsrs	r1, r1, #31
 8001a6e:	4691      	mov	r9, r2
 8001a70:	0d64      	lsrs	r4, r4, #21
 8001a72:	0fdb      	lsrs	r3, r3, #31
 8001a74:	2001      	movs	r0, #1
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d00a      	beq.n	8001a90 <__eqdf2+0x44>
 8001a7a:	42b4      	cmp	r4, r6
 8001a7c:	d003      	beq.n	8001a86 <__eqdf2+0x3a>
 8001a7e:	42a5      	cmp	r5, r4
 8001a80:	d101      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a82:	4557      	cmp	r7, sl
 8001a84:	d00c      	beq.n	8001aa0 <__eqdf2+0x54>
 8001a86:	bc1c      	pop	{r2, r3, r4}
 8001a88:	4690      	mov	r8, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	46a2      	mov	sl, r4
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a90:	4666      	mov	r6, ip
 8001a92:	433e      	orrs	r6, r7
 8001a94:	d1f7      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a96:	42ac      	cmp	r4, r5
 8001a98:	d1f5      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a9a:	4654      	mov	r4, sl
 8001a9c:	4314      	orrs	r4, r2
 8001a9e:	d1f2      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	45c8      	cmp	r8, r9
 8001aa4:	d1ef      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aa6:	4299      	cmp	r1, r3
 8001aa8:	d007      	beq.n	8001aba <__eqdf2+0x6e>
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d1eb      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aae:	4663      	mov	r3, ip
 8001ab0:	431f      	orrs	r7, r3
 8001ab2:	0038      	movs	r0, r7
 8001ab4:	1e47      	subs	r7, r0, #1
 8001ab6:	41b8      	sbcs	r0, r7
 8001ab8:	e7e5      	b.n	8001a86 <__eqdf2+0x3a>
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7e3      	b.n	8001a86 <__eqdf2+0x3a>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff

08001ac4 <__gedf2>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	464f      	mov	r7, r9
 8001ac8:	4646      	mov	r6, r8
 8001aca:	46d6      	mov	lr, sl
 8001acc:	004d      	lsls	r5, r1, #1
 8001ace:	b5c0      	push	{r6, r7, lr}
 8001ad0:	030e      	lsls	r6, r1, #12
 8001ad2:	0fc9      	lsrs	r1, r1, #31
 8001ad4:	468a      	mov	sl, r1
 8001ad6:	492c      	ldr	r1, [pc, #176]	; (8001b88 <__gedf2+0xc4>)
 8001ad8:	031f      	lsls	r7, r3, #12
 8001ada:	005c      	lsls	r4, r3, #1
 8001adc:	4680      	mov	r8, r0
 8001ade:	0b36      	lsrs	r6, r6, #12
 8001ae0:	0d6d      	lsrs	r5, r5, #21
 8001ae2:	4691      	mov	r9, r2
 8001ae4:	0b3f      	lsrs	r7, r7, #12
 8001ae6:	0d64      	lsrs	r4, r4, #21
 8001ae8:	0fdb      	lsrs	r3, r3, #31
 8001aea:	428d      	cmp	r5, r1
 8001aec:	d01e      	beq.n	8001b2c <__gedf2+0x68>
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d016      	beq.n	8001b20 <__gedf2+0x5c>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d11e      	bne.n	8001b34 <__gedf2+0x70>
 8001af6:	4330      	orrs	r0, r6
 8001af8:	4684      	mov	ip, r0
 8001afa:	2c00      	cmp	r4, #0
 8001afc:	d101      	bne.n	8001b02 <__gedf2+0x3e>
 8001afe:	433a      	orrs	r2, r7
 8001b00:	d023      	beq.n	8001b4a <__gedf2+0x86>
 8001b02:	4662      	mov	r2, ip
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d01a      	beq.n	8001b3e <__gedf2+0x7a>
 8001b08:	459a      	cmp	sl, r3
 8001b0a:	d029      	beq.n	8001b60 <__gedf2+0x9c>
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	2002      	movs	r0, #2
 8001b10:	3901      	subs	r1, #1
 8001b12:	4008      	ands	r0, r1
 8001b14:	3801      	subs	r0, #1
 8001b16:	bc1c      	pop	{r2, r3, r4}
 8001b18:	4690      	mov	r8, r2
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b20:	0039      	movs	r1, r7
 8001b22:	4311      	orrs	r1, r2
 8001b24:	d0e5      	beq.n	8001af2 <__gedf2+0x2e>
 8001b26:	2002      	movs	r0, #2
 8001b28:	4240      	negs	r0, r0
 8001b2a:	e7f4      	b.n	8001b16 <__gedf2+0x52>
 8001b2c:	4330      	orrs	r0, r6
 8001b2e:	d1fa      	bne.n	8001b26 <__gedf2+0x62>
 8001b30:	42ac      	cmp	r4, r5
 8001b32:	d00f      	beq.n	8001b54 <__gedf2+0x90>
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d10f      	bne.n	8001b58 <__gedf2+0x94>
 8001b38:	433a      	orrs	r2, r7
 8001b3a:	d0e7      	beq.n	8001b0c <__gedf2+0x48>
 8001b3c:	e00c      	b.n	8001b58 <__gedf2+0x94>
 8001b3e:	2201      	movs	r2, #1
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4393      	bics	r3, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	3001      	adds	r0, #1
 8001b48:	e7e5      	b.n	8001b16 <__gedf2+0x52>
 8001b4a:	4663      	mov	r3, ip
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0e1      	beq.n	8001b16 <__gedf2+0x52>
 8001b52:	e7db      	b.n	8001b0c <__gedf2+0x48>
 8001b54:	433a      	orrs	r2, r7
 8001b56:	d1e6      	bne.n	8001b26 <__gedf2+0x62>
 8001b58:	459a      	cmp	sl, r3
 8001b5a:	d1d7      	bne.n	8001b0c <__gedf2+0x48>
 8001b5c:	42a5      	cmp	r5, r4
 8001b5e:	dcd5      	bgt.n	8001b0c <__gedf2+0x48>
 8001b60:	42a5      	cmp	r5, r4
 8001b62:	db05      	blt.n	8001b70 <__gedf2+0xac>
 8001b64:	42be      	cmp	r6, r7
 8001b66:	d8d1      	bhi.n	8001b0c <__gedf2+0x48>
 8001b68:	d008      	beq.n	8001b7c <__gedf2+0xb8>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	42be      	cmp	r6, r7
 8001b6e:	d2d2      	bcs.n	8001b16 <__gedf2+0x52>
 8001b70:	4650      	mov	r0, sl
 8001b72:	2301      	movs	r3, #1
 8001b74:	3801      	subs	r0, #1
 8001b76:	4398      	bics	r0, r3
 8001b78:	3001      	adds	r0, #1
 8001b7a:	e7cc      	b.n	8001b16 <__gedf2+0x52>
 8001b7c:	45c8      	cmp	r8, r9
 8001b7e:	d8c5      	bhi.n	8001b0c <__gedf2+0x48>
 8001b80:	2000      	movs	r0, #0
 8001b82:	45c8      	cmp	r8, r9
 8001b84:	d3f4      	bcc.n	8001b70 <__gedf2+0xac>
 8001b86:	e7c6      	b.n	8001b16 <__gedf2+0x52>
 8001b88:	000007ff 	.word	0x000007ff

08001b8c <__ledf2>:
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	464f      	mov	r7, r9
 8001b90:	4646      	mov	r6, r8
 8001b92:	46d6      	mov	lr, sl
 8001b94:	004d      	lsls	r5, r1, #1
 8001b96:	b5c0      	push	{r6, r7, lr}
 8001b98:	030e      	lsls	r6, r1, #12
 8001b9a:	0fc9      	lsrs	r1, r1, #31
 8001b9c:	468a      	mov	sl, r1
 8001b9e:	492e      	ldr	r1, [pc, #184]	; (8001c58 <__ledf2+0xcc>)
 8001ba0:	031f      	lsls	r7, r3, #12
 8001ba2:	005c      	lsls	r4, r3, #1
 8001ba4:	4680      	mov	r8, r0
 8001ba6:	0b36      	lsrs	r6, r6, #12
 8001ba8:	0d6d      	lsrs	r5, r5, #21
 8001baa:	4691      	mov	r9, r2
 8001bac:	0b3f      	lsrs	r7, r7, #12
 8001bae:	0d64      	lsrs	r4, r4, #21
 8001bb0:	0fdb      	lsrs	r3, r3, #31
 8001bb2:	428d      	cmp	r5, r1
 8001bb4:	d018      	beq.n	8001be8 <__ledf2+0x5c>
 8001bb6:	428c      	cmp	r4, r1
 8001bb8:	d011      	beq.n	8001bde <__ledf2+0x52>
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d118      	bne.n	8001bf0 <__ledf2+0x64>
 8001bbe:	4330      	orrs	r0, r6
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	d11e      	bne.n	8001c04 <__ledf2+0x78>
 8001bc6:	433a      	orrs	r2, r7
 8001bc8:	d11c      	bne.n	8001c04 <__ledf2+0x78>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	2000      	movs	r0, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d030      	beq.n	8001c34 <__ledf2+0xa8>
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	3901      	subs	r1, #1
 8001bd8:	4008      	ands	r0, r1
 8001bda:	3801      	subs	r0, #1
 8001bdc:	e02a      	b.n	8001c34 <__ledf2+0xa8>
 8001bde:	0039      	movs	r1, r7
 8001be0:	4311      	orrs	r1, r2
 8001be2:	d0ea      	beq.n	8001bba <__ledf2+0x2e>
 8001be4:	2002      	movs	r0, #2
 8001be6:	e025      	b.n	8001c34 <__ledf2+0xa8>
 8001be8:	4330      	orrs	r0, r6
 8001bea:	d1fb      	bne.n	8001be4 <__ledf2+0x58>
 8001bec:	42ac      	cmp	r4, r5
 8001bee:	d026      	beq.n	8001c3e <__ledf2+0xb2>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d126      	bne.n	8001c42 <__ledf2+0xb6>
 8001bf4:	433a      	orrs	r2, r7
 8001bf6:	d124      	bne.n	8001c42 <__ledf2+0xb6>
 8001bf8:	4651      	mov	r1, sl
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	3901      	subs	r1, #1
 8001bfe:	4008      	ands	r0, r1
 8001c00:	3801      	subs	r0, #1
 8001c02:	e017      	b.n	8001c34 <__ledf2+0xa8>
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d00f      	beq.n	8001c2a <__ledf2+0x9e>
 8001c0a:	459a      	cmp	sl, r3
 8001c0c:	d1e1      	bne.n	8001bd2 <__ledf2+0x46>
 8001c0e:	42a5      	cmp	r5, r4
 8001c10:	db05      	blt.n	8001c1e <__ledf2+0x92>
 8001c12:	42be      	cmp	r6, r7
 8001c14:	d8dd      	bhi.n	8001bd2 <__ledf2+0x46>
 8001c16:	d019      	beq.n	8001c4c <__ledf2+0xc0>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	42be      	cmp	r6, r7
 8001c1c:	d20a      	bcs.n	8001c34 <__ledf2+0xa8>
 8001c1e:	4650      	mov	r0, sl
 8001c20:	2301      	movs	r3, #1
 8001c22:	3801      	subs	r0, #1
 8001c24:	4398      	bics	r0, r3
 8001c26:	3001      	adds	r0, #1
 8001c28:	e004      	b.n	8001c34 <__ledf2+0xa8>
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	3001      	adds	r0, #1
 8001c34:	bc1c      	pop	{r2, r3, r4}
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	46a2      	mov	sl, r4
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	433a      	orrs	r2, r7
 8001c40:	d1d0      	bne.n	8001be4 <__ledf2+0x58>
 8001c42:	459a      	cmp	sl, r3
 8001c44:	d1c5      	bne.n	8001bd2 <__ledf2+0x46>
 8001c46:	42a5      	cmp	r5, r4
 8001c48:	dcc3      	bgt.n	8001bd2 <__ledf2+0x46>
 8001c4a:	e7e0      	b.n	8001c0e <__ledf2+0x82>
 8001c4c:	45c8      	cmp	r8, r9
 8001c4e:	d8c0      	bhi.n	8001bd2 <__ledf2+0x46>
 8001c50:	2000      	movs	r0, #0
 8001c52:	45c8      	cmp	r8, r9
 8001c54:	d3e3      	bcc.n	8001c1e <__ledf2+0x92>
 8001c56:	e7ed      	b.n	8001c34 <__ledf2+0xa8>
 8001c58:	000007ff 	.word	0x000007ff

08001c5c <__aeabi_dmul>:
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	4657      	mov	r7, sl
 8001c60:	46de      	mov	lr, fp
 8001c62:	464e      	mov	r6, r9
 8001c64:	4645      	mov	r5, r8
 8001c66:	b5e0      	push	{r5, r6, r7, lr}
 8001c68:	4683      	mov	fp, r0
 8001c6a:	0006      	movs	r6, r0
 8001c6c:	030f      	lsls	r7, r1, #12
 8001c6e:	0048      	lsls	r0, r1, #1
 8001c70:	b087      	sub	sp, #28
 8001c72:	4692      	mov	sl, r2
 8001c74:	001d      	movs	r5, r3
 8001c76:	0b3f      	lsrs	r7, r7, #12
 8001c78:	0d40      	lsrs	r0, r0, #21
 8001c7a:	0fcc      	lsrs	r4, r1, #31
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dmul+0x26>
 8001c80:	e06f      	b.n	8001d62 <__aeabi_dmul+0x106>
 8001c82:	4bde      	ldr	r3, [pc, #888]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001c84:	4298      	cmp	r0, r3
 8001c86:	d038      	beq.n	8001cfa <__aeabi_dmul+0x9e>
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	00ff      	lsls	r7, r7, #3
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431f      	orrs	r7, r3
 8001c90:	0f73      	lsrs	r3, r6, #29
 8001c92:	433b      	orrs	r3, r7
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	4bda      	ldr	r3, [pc, #872]	; (8002000 <__aeabi_dmul+0x3a4>)
 8001c98:	2700      	movs	r7, #0
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	469b      	mov	fp, r3
 8001ca0:	00f6      	lsls	r6, r6, #3
 8001ca2:	4481      	add	r9, r0
 8001ca4:	032b      	lsls	r3, r5, #12
 8001ca6:	0069      	lsls	r1, r5, #1
 8001ca8:	0b1b      	lsrs	r3, r3, #12
 8001caa:	4652      	mov	r2, sl
 8001cac:	4698      	mov	r8, r3
 8001cae:	0d49      	lsrs	r1, r1, #21
 8001cb0:	0fed      	lsrs	r5, r5, #31
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dmul+0x5c>
 8001cb6:	e085      	b.n	8001dc4 <__aeabi_dmul+0x168>
 8001cb8:	4bd0      	ldr	r3, [pc, #832]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001cba:	4299      	cmp	r1, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dmul+0x64>
 8001cbe:	e073      	b.n	8001da8 <__aeabi_dmul+0x14c>
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	4652      	mov	r2, sl
 8001ccc:	48cc      	ldr	r0, [pc, #816]	; (8002000 <__aeabi_dmul+0x3a4>)
 8001cce:	0f52      	lsrs	r2, r2, #29
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	4461      	add	r1, ip
 8001cda:	00d2      	lsls	r2, r2, #3
 8001cdc:	4489      	add	r9, r1
 8001cde:	0021      	movs	r1, r4
 8001ce0:	4069      	eors	r1, r5
 8001ce2:	9100      	str	r1, [sp, #0]
 8001ce4:	468c      	mov	ip, r1
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4449      	add	r1, r9
 8001cea:	468a      	mov	sl, r1
 8001cec:	2f0f      	cmp	r7, #15
 8001cee:	d900      	bls.n	8001cf2 <__aeabi_dmul+0x96>
 8001cf0:	e090      	b.n	8001e14 <__aeabi_dmul+0x1b8>
 8001cf2:	49c4      	ldr	r1, [pc, #784]	; (8002004 <__aeabi_dmul+0x3a8>)
 8001cf4:	00bf      	lsls	r7, r7, #2
 8001cf6:	59cf      	ldr	r7, [r1, r7]
 8001cf8:	46bf      	mov	pc, r7
 8001cfa:	465b      	mov	r3, fp
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dmul+0xa8>
 8001d02:	e16a      	b.n	8001fda <__aeabi_dmul+0x37e>
 8001d04:	2302      	movs	r3, #2
 8001d06:	2708      	movs	r7, #8
 8001d08:	2600      	movs	r6, #0
 8001d0a:	4681      	mov	r9, r0
 8001d0c:	469b      	mov	fp, r3
 8001d0e:	e7c9      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001d10:	0032      	movs	r2, r6
 8001d12:	4658      	mov	r0, fp
 8001d14:	9b01      	ldr	r3, [sp, #4]
 8001d16:	4661      	mov	r1, ip
 8001d18:	9100      	str	r1, [sp, #0]
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dmul+0xc4>
 8001d1e:	e075      	b.n	8001e0c <__aeabi_dmul+0x1b0>
 8001d20:	2803      	cmp	r0, #3
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dmul+0xca>
 8001d24:	e1fe      	b.n	8002124 <__aeabi_dmul+0x4c8>
 8001d26:	2801      	cmp	r0, #1
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dmul+0xd0>
 8001d2a:	e12c      	b.n	8001f86 <__aeabi_dmul+0x32a>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2700      	movs	r7, #0
 8001d30:	2600      	movs	r6, #0
 8001d32:	2500      	movs	r5, #0
 8001d34:	033f      	lsls	r7, r7, #12
 8001d36:	0d2a      	lsrs	r2, r5, #20
 8001d38:	0b3f      	lsrs	r7, r7, #12
 8001d3a:	48b3      	ldr	r0, [pc, #716]	; (8002008 <__aeabi_dmul+0x3ac>)
 8001d3c:	0512      	lsls	r2, r2, #20
 8001d3e:	433a      	orrs	r2, r7
 8001d40:	4002      	ands	r2, r0
 8001d42:	051b      	lsls	r3, r3, #20
 8001d44:	4313      	orrs	r3, r2
 8001d46:	9a00      	ldr	r2, [sp, #0]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	07d1      	lsls	r1, r2, #31
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0019      	movs	r1, r3
 8001d54:	b007      	add	sp, #28
 8001d56:	bc3c      	pop	{r2, r3, r4, r5}
 8001d58:	4690      	mov	r8, r2
 8001d5a:	4699      	mov	r9, r3
 8001d5c:	46a2      	mov	sl, r4
 8001d5e:	46ab      	mov	fp, r5
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	465b      	mov	r3, fp
 8001d64:	433b      	orrs	r3, r7
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dmul+0x110>
 8001d6a:	e12f      	b.n	8001fcc <__aeabi_dmul+0x370>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0x116>
 8001d70:	e1a5      	b.n	80020be <__aeabi_dmul+0x462>
 8001d72:	0038      	movs	r0, r7
 8001d74:	f000 fec0 	bl	8002af8 <__clzsi2>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	3b0b      	subs	r3, #11
 8001d7c:	2b1c      	cmp	r3, #28
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x126>
 8001d80:	e196      	b.n	80020b0 <__aeabi_dmul+0x454>
 8001d82:	221d      	movs	r2, #29
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	465a      	mov	r2, fp
 8001d88:	0001      	movs	r1, r0
 8001d8a:	40da      	lsrs	r2, r3
 8001d8c:	465e      	mov	r6, fp
 8001d8e:	3908      	subs	r1, #8
 8001d90:	408f      	lsls	r7, r1
 8001d92:	0013      	movs	r3, r2
 8001d94:	408e      	lsls	r6, r1
 8001d96:	433b      	orrs	r3, r7
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	4b9c      	ldr	r3, [pc, #624]	; (800200c <__aeabi_dmul+0x3b0>)
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	1a1b      	subs	r3, r3, r0
 8001da0:	4699      	mov	r9, r3
 8001da2:	2300      	movs	r3, #0
 8001da4:	469b      	mov	fp, r3
 8001da6:	e77d      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001da8:	4641      	mov	r1, r8
 8001daa:	4653      	mov	r3, sl
 8001dac:	430b      	orrs	r3, r1
 8001dae:	4993      	ldr	r1, [pc, #588]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001db0:	468c      	mov	ip, r1
 8001db2:	44e1      	add	r9, ip
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d000      	beq.n	8001dba <__aeabi_dmul+0x15e>
 8001db8:	e11a      	b.n	8001ff0 <__aeabi_dmul+0x394>
 8001dba:	2202      	movs	r2, #2
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	4317      	orrs	r7, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	e78c      	b.n	8001cde <__aeabi_dmul+0x82>
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dmul+0x16e>
 8001dc8:	e10d      	b.n	8001fe6 <__aeabi_dmul+0x38a>
 8001dca:	4643      	mov	r3, r8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dmul+0x176>
 8001dd0:	e181      	b.n	80020d6 <__aeabi_dmul+0x47a>
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	f000 fe90 	bl	8002af8 <__clzsi2>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	3a0b      	subs	r2, #11
 8001ddc:	2a1c      	cmp	r2, #28
 8001dde:	dd00      	ble.n	8001de2 <__aeabi_dmul+0x186>
 8001de0:	e172      	b.n	80020c8 <__aeabi_dmul+0x46c>
 8001de2:	0001      	movs	r1, r0
 8001de4:	4643      	mov	r3, r8
 8001de6:	3908      	subs	r1, #8
 8001de8:	408b      	lsls	r3, r1
 8001dea:	4698      	mov	r8, r3
 8001dec:	231d      	movs	r3, #29
 8001dee:	1a9a      	subs	r2, r3, r2
 8001df0:	4653      	mov	r3, sl
 8001df2:	40d3      	lsrs	r3, r2
 8001df4:	001a      	movs	r2, r3
 8001df6:	4643      	mov	r3, r8
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	408a      	lsls	r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	1a08      	subs	r0, r1, r0
 8001e02:	4982      	ldr	r1, [pc, #520]	; (800200c <__aeabi_dmul+0x3b0>)
 8001e04:	4689      	mov	r9, r1
 8001e06:	4481      	add	r9, r0
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e768      	b.n	8001cde <__aeabi_dmul+0x82>
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e78e      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8001e14:	0c14      	lsrs	r4, r2, #16
 8001e16:	0412      	lsls	r2, r2, #16
 8001e18:	0c12      	lsrs	r2, r2, #16
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0c37      	lsrs	r7, r6, #16
 8001e1e:	0436      	lsls	r6, r6, #16
 8001e20:	0c35      	lsrs	r5, r6, #16
 8001e22:	4379      	muls	r1, r7
 8001e24:	0028      	movs	r0, r5
 8001e26:	468c      	mov	ip, r1
 8001e28:	002e      	movs	r6, r5
 8001e2a:	4360      	muls	r0, r4
 8001e2c:	4460      	add	r0, ip
 8001e2e:	4683      	mov	fp, r0
 8001e30:	4356      	muls	r6, r2
 8001e32:	0021      	movs	r1, r4
 8001e34:	0c30      	lsrs	r0, r6, #16
 8001e36:	4680      	mov	r8, r0
 8001e38:	4658      	mov	r0, fp
 8001e3a:	4379      	muls	r1, r7
 8001e3c:	4440      	add	r0, r8
 8001e3e:	9102      	str	r1, [sp, #8]
 8001e40:	4584      	cmp	ip, r0
 8001e42:	d906      	bls.n	8001e52 <__aeabi_dmul+0x1f6>
 8001e44:	4688      	mov	r8, r1
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0249      	lsls	r1, r1, #9
 8001e4a:	468c      	mov	ip, r1
 8001e4c:	44e0      	add	r8, ip
 8001e4e:	4641      	mov	r1, r8
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	0436      	lsls	r6, r6, #16
 8001e54:	0c01      	lsrs	r1, r0, #16
 8001e56:	0c36      	lsrs	r6, r6, #16
 8001e58:	0400      	lsls	r0, r0, #16
 8001e5a:	468b      	mov	fp, r1
 8001e5c:	1981      	adds	r1, r0, r6
 8001e5e:	0c1e      	lsrs	r6, r3, #16
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	9103      	str	r1, [sp, #12]
 8001e66:	0019      	movs	r1, r3
 8001e68:	4379      	muls	r1, r7
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	4375      	muls	r5, r6
 8001e70:	4465      	add	r5, ip
 8001e72:	46a8      	mov	r8, r5
 8001e74:	4358      	muls	r0, r3
 8001e76:	0c05      	lsrs	r5, r0, #16
 8001e78:	4445      	add	r5, r8
 8001e7a:	4377      	muls	r7, r6
 8001e7c:	42a9      	cmp	r1, r5
 8001e7e:	d903      	bls.n	8001e88 <__aeabi_dmul+0x22c>
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0249      	lsls	r1, r1, #9
 8001e84:	468c      	mov	ip, r1
 8001e86:	4467      	add	r7, ip
 8001e88:	0c29      	lsrs	r1, r5, #16
 8001e8a:	468c      	mov	ip, r1
 8001e8c:	0039      	movs	r1, r7
 8001e8e:	0400      	lsls	r0, r0, #16
 8001e90:	0c00      	lsrs	r0, r0, #16
 8001e92:	042d      	lsls	r5, r5, #16
 8001e94:	182d      	adds	r5, r5, r0
 8001e96:	4461      	add	r1, ip
 8001e98:	44ab      	add	fp, r5
 8001e9a:	9105      	str	r1, [sp, #20]
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	9104      	str	r1, [sp, #16]
 8001ea0:	9901      	ldr	r1, [sp, #4]
 8001ea2:	040f      	lsls	r7, r1, #16
 8001ea4:	0c3f      	lsrs	r7, r7, #16
 8001ea6:	0c08      	lsrs	r0, r1, #16
 8001ea8:	0039      	movs	r1, r7
 8001eaa:	4351      	muls	r1, r2
 8001eac:	4342      	muls	r2, r0
 8001eae:	4690      	mov	r8, r2
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	0c09      	lsrs	r1, r1, #16
 8001eb6:	468b      	mov	fp, r1
 8001eb8:	4362      	muls	r2, r4
 8001eba:	437c      	muls	r4, r7
 8001ebc:	4444      	add	r4, r8
 8001ebe:	445c      	add	r4, fp
 8001ec0:	45a0      	cmp	r8, r4
 8001ec2:	d903      	bls.n	8001ecc <__aeabi_dmul+0x270>
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	4688      	mov	r8, r1
 8001eca:	4442      	add	r2, r8
 8001ecc:	0c21      	lsrs	r1, r4, #16
 8001ece:	4688      	mov	r8, r1
 8001ed0:	4661      	mov	r1, ip
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c09      	lsrs	r1, r1, #16
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	0039      	movs	r1, r7
 8001eda:	4359      	muls	r1, r3
 8001edc:	4343      	muls	r3, r0
 8001ede:	4370      	muls	r0, r6
 8001ee0:	437e      	muls	r6, r7
 8001ee2:	0c0f      	lsrs	r7, r1, #16
 8001ee4:	18f6      	adds	r6, r6, r3
 8001ee6:	0424      	lsls	r4, r4, #16
 8001ee8:	19be      	adds	r6, r7, r6
 8001eea:	4464      	add	r4, ip
 8001eec:	4442      	add	r2, r8
 8001eee:	468c      	mov	ip, r1
 8001ef0:	42b3      	cmp	r3, r6
 8001ef2:	d903      	bls.n	8001efc <__aeabi_dmul+0x2a0>
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	4698      	mov	r8, r3
 8001efa:	4440      	add	r0, r8
 8001efc:	9b02      	ldr	r3, [sp, #8]
 8001efe:	4661      	mov	r1, ip
 8001f00:	4698      	mov	r8, r3
 8001f02:	9b04      	ldr	r3, [sp, #16]
 8001f04:	0437      	lsls	r7, r6, #16
 8001f06:	4443      	add	r3, r8
 8001f08:	469b      	mov	fp, r3
 8001f0a:	45ab      	cmp	fp, r5
 8001f0c:	41ad      	sbcs	r5, r5
 8001f0e:	426b      	negs	r3, r5
 8001f10:	040d      	lsls	r5, r1, #16
 8001f12:	9905      	ldr	r1, [sp, #20]
 8001f14:	0c2d      	lsrs	r5, r5, #16
 8001f16:	468c      	mov	ip, r1
 8001f18:	197f      	adds	r7, r7, r5
 8001f1a:	4467      	add	r7, ip
 8001f1c:	18fd      	adds	r5, r7, r3
 8001f1e:	46a8      	mov	r8, r5
 8001f20:	465d      	mov	r5, fp
 8001f22:	192d      	adds	r5, r5, r4
 8001f24:	42a5      	cmp	r5, r4
 8001f26:	41a4      	sbcs	r4, r4
 8001f28:	4693      	mov	fp, r2
 8001f2a:	4264      	negs	r4, r4
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	44c3      	add	fp, r8
 8001f30:	44dc      	add	ip, fp
 8001f32:	428f      	cmp	r7, r1
 8001f34:	41bf      	sbcs	r7, r7
 8001f36:	4598      	cmp	r8, r3
 8001f38:	419b      	sbcs	r3, r3
 8001f3a:	4593      	cmp	fp, r2
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	45a4      	cmp	ip, r4
 8001f40:	41a4      	sbcs	r4, r4
 8001f42:	425b      	negs	r3, r3
 8001f44:	427f      	negs	r7, r7
 8001f46:	431f      	orrs	r7, r3
 8001f48:	0c36      	lsrs	r6, r6, #16
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	4264      	negs	r4, r4
 8001f4e:	19bf      	adds	r7, r7, r6
 8001f50:	4322      	orrs	r2, r4
 8001f52:	18bf      	adds	r7, r7, r2
 8001f54:	4662      	mov	r2, ip
 8001f56:	1838      	adds	r0, r7, r0
 8001f58:	0243      	lsls	r3, r0, #9
 8001f5a:	0dd2      	lsrs	r2, r2, #23
 8001f5c:	9903      	ldr	r1, [sp, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	026a      	lsls	r2, r5, #9
 8001f62:	430a      	orrs	r2, r1
 8001f64:	1e50      	subs	r0, r2, #1
 8001f66:	4182      	sbcs	r2, r0
 8001f68:	4661      	mov	r1, ip
 8001f6a:	0ded      	lsrs	r5, r5, #23
 8001f6c:	432a      	orrs	r2, r5
 8001f6e:	024e      	lsls	r6, r1, #9
 8001f70:	4332      	orrs	r2, r6
 8001f72:	01d9      	lsls	r1, r3, #7
 8001f74:	d400      	bmi.n	8001f78 <__aeabi_dmul+0x31c>
 8001f76:	e0b3      	b.n	80020e0 <__aeabi_dmul+0x484>
 8001f78:	2601      	movs	r6, #1
 8001f7a:	0850      	lsrs	r0, r2, #1
 8001f7c:	4032      	ands	r2, r6
 8001f7e:	4302      	orrs	r2, r0
 8001f80:	07de      	lsls	r6, r3, #31
 8001f82:	4332      	orrs	r2, r6
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	4c22      	ldr	r4, [pc, #136]	; (8002010 <__aeabi_dmul+0x3b4>)
 8001f88:	4454      	add	r4, sl
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	dd62      	ble.n	8002054 <__aeabi_dmul+0x3f8>
 8001f8e:	0751      	lsls	r1, r2, #29
 8001f90:	d009      	beq.n	8001fa6 <__aeabi_dmul+0x34a>
 8001f92:	200f      	movs	r0, #15
 8001f94:	4010      	ands	r0, r2
 8001f96:	2804      	cmp	r0, #4
 8001f98:	d005      	beq.n	8001fa6 <__aeabi_dmul+0x34a>
 8001f9a:	1d10      	adds	r0, r2, #4
 8001f9c:	4290      	cmp	r0, r2
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	01d9      	lsls	r1, r3, #7
 8001fa8:	d504      	bpl.n	8001fb4 <__aeabi_dmul+0x358>
 8001faa:	2480      	movs	r4, #128	; 0x80
 8001fac:	4819      	ldr	r0, [pc, #100]	; (8002014 <__aeabi_dmul+0x3b8>)
 8001fae:	00e4      	lsls	r4, r4, #3
 8001fb0:	4003      	ands	r3, r0
 8001fb2:	4454      	add	r4, sl
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <__aeabi_dmul+0x3bc>)
 8001fb6:	4284      	cmp	r4, r0
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dmul+0x360>
 8001fba:	e727      	b.n	8001e0c <__aeabi_dmul+0x1b0>
 8001fbc:	075e      	lsls	r6, r3, #29
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	08d2      	lsrs	r2, r2, #3
 8001fc2:	0b1f      	lsrs	r7, r3, #12
 8001fc4:	0563      	lsls	r3, r4, #21
 8001fc6:	4316      	orrs	r6, r2
 8001fc8:	0d5b      	lsrs	r3, r3, #21
 8001fca:	e6b2      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	2704      	movs	r7, #4
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	469b      	mov	fp, r3
 8001fd8:	e664      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	9701      	str	r7, [sp, #4]
 8001fde:	4681      	mov	r9, r0
 8001fe0:	270c      	movs	r7, #12
 8001fe2:	469b      	mov	fp, r3
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	4317      	orrs	r7, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	e676      	b.n	8001cde <__aeabi_dmul+0x82>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	431f      	orrs	r7, r3
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	e671      	b.n	8001cde <__aeabi_dmul+0x82>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff
 8002000:	fffffc01 	.word	0xfffffc01
 8002004:	080167bc 	.word	0x080167bc
 8002008:	800fffff 	.word	0x800fffff
 800200c:	fffffc0d 	.word	0xfffffc0d
 8002010:	000003ff 	.word	0x000003ff
 8002014:	feffffff 	.word	0xfeffffff
 8002018:	000007fe 	.word	0x000007fe
 800201c:	2300      	movs	r3, #0
 800201e:	2780      	movs	r7, #128	; 0x80
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	033f      	lsls	r7, r7, #12
 8002024:	2600      	movs	r6, #0
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002028:	e683      	b.n	8001d32 <__aeabi_dmul+0xd6>
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	0032      	movs	r2, r6
 800202e:	46a4      	mov	ip, r4
 8002030:	4658      	mov	r0, fp
 8002032:	e670      	b.n	8001d16 <__aeabi_dmul+0xba>
 8002034:	46ac      	mov	ip, r5
 8002036:	e66e      	b.n	8001d16 <__aeabi_dmul+0xba>
 8002038:	2780      	movs	r7, #128	; 0x80
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	033f      	lsls	r7, r7, #12
 800203e:	4239      	tst	r1, r7
 8002040:	d02d      	beq.n	800209e <__aeabi_dmul+0x442>
 8002042:	423b      	tst	r3, r7
 8002044:	d12b      	bne.n	800209e <__aeabi_dmul+0x442>
 8002046:	431f      	orrs	r7, r3
 8002048:	033f      	lsls	r7, r7, #12
 800204a:	0b3f      	lsrs	r7, r7, #12
 800204c:	9500      	str	r5, [sp, #0]
 800204e:	0016      	movs	r6, r2
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002052:	e66e      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002054:	2501      	movs	r5, #1
 8002056:	1b2d      	subs	r5, r5, r4
 8002058:	2d38      	cmp	r5, #56	; 0x38
 800205a:	dd00      	ble.n	800205e <__aeabi_dmul+0x402>
 800205c:	e666      	b.n	8001d2c <__aeabi_dmul+0xd0>
 800205e:	2d1f      	cmp	r5, #31
 8002060:	dc40      	bgt.n	80020e4 <__aeabi_dmul+0x488>
 8002062:	4835      	ldr	r0, [pc, #212]	; (8002138 <__aeabi_dmul+0x4dc>)
 8002064:	001c      	movs	r4, r3
 8002066:	4450      	add	r0, sl
 8002068:	0016      	movs	r6, r2
 800206a:	4082      	lsls	r2, r0
 800206c:	4084      	lsls	r4, r0
 800206e:	40ee      	lsrs	r6, r5
 8002070:	1e50      	subs	r0, r2, #1
 8002072:	4182      	sbcs	r2, r0
 8002074:	4334      	orrs	r4, r6
 8002076:	4314      	orrs	r4, r2
 8002078:	40eb      	lsrs	r3, r5
 800207a:	0762      	lsls	r2, r4, #29
 800207c:	d009      	beq.n	8002092 <__aeabi_dmul+0x436>
 800207e:	220f      	movs	r2, #15
 8002080:	4022      	ands	r2, r4
 8002082:	2a04      	cmp	r2, #4
 8002084:	d005      	beq.n	8002092 <__aeabi_dmul+0x436>
 8002086:	0022      	movs	r2, r4
 8002088:	1d14      	adds	r4, r2, #4
 800208a:	4294      	cmp	r4, r2
 800208c:	4180      	sbcs	r0, r0
 800208e:	4240      	negs	r0, r0
 8002090:	181b      	adds	r3, r3, r0
 8002092:	021a      	lsls	r2, r3, #8
 8002094:	d53e      	bpl.n	8002114 <__aeabi_dmul+0x4b8>
 8002096:	2301      	movs	r3, #1
 8002098:	2700      	movs	r7, #0
 800209a:	2600      	movs	r6, #0
 800209c:	e649      	b.n	8001d32 <__aeabi_dmul+0xd6>
 800209e:	2780      	movs	r7, #128	; 0x80
 80020a0:	9b01      	ldr	r3, [sp, #4]
 80020a2:	033f      	lsls	r7, r7, #12
 80020a4:	431f      	orrs	r7, r3
 80020a6:	033f      	lsls	r7, r7, #12
 80020a8:	0b3f      	lsrs	r7, r7, #12
 80020aa:	9400      	str	r4, [sp, #0]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <__aeabi_dmul+0x4d8>)
 80020ae:	e640      	b.n	8001d32 <__aeabi_dmul+0xd6>
 80020b0:	0003      	movs	r3, r0
 80020b2:	465a      	mov	r2, fp
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	2600      	movs	r6, #0
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	e66d      	b.n	8001d9a <__aeabi_dmul+0x13e>
 80020be:	4658      	mov	r0, fp
 80020c0:	f000 fd1a 	bl	8002af8 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e657      	b.n	8001d78 <__aeabi_dmul+0x11c>
 80020c8:	0003      	movs	r3, r0
 80020ca:	4652      	mov	r2, sl
 80020cc:	3b28      	subs	r3, #40	; 0x28
 80020ce:	409a      	lsls	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	2200      	movs	r2, #0
 80020d4:	e693      	b.n	8001dfe <__aeabi_dmul+0x1a2>
 80020d6:	4650      	mov	r0, sl
 80020d8:	f000 fd0e 	bl	8002af8 <__clzsi2>
 80020dc:	3020      	adds	r0, #32
 80020de:	e67b      	b.n	8001dd8 <__aeabi_dmul+0x17c>
 80020e0:	46ca      	mov	sl, r9
 80020e2:	e750      	b.n	8001f86 <__aeabi_dmul+0x32a>
 80020e4:	201f      	movs	r0, #31
 80020e6:	001e      	movs	r6, r3
 80020e8:	4240      	negs	r0, r0
 80020ea:	1b04      	subs	r4, r0, r4
 80020ec:	40e6      	lsrs	r6, r4
 80020ee:	2d20      	cmp	r5, #32
 80020f0:	d003      	beq.n	80020fa <__aeabi_dmul+0x49e>
 80020f2:	4c12      	ldr	r4, [pc, #72]	; (800213c <__aeabi_dmul+0x4e0>)
 80020f4:	4454      	add	r4, sl
 80020f6:	40a3      	lsls	r3, r4
 80020f8:	431a      	orrs	r2, r3
 80020fa:	1e50      	subs	r0, r2, #1
 80020fc:	4182      	sbcs	r2, r0
 80020fe:	4332      	orrs	r2, r6
 8002100:	2607      	movs	r6, #7
 8002102:	2700      	movs	r7, #0
 8002104:	4016      	ands	r6, r2
 8002106:	d009      	beq.n	800211c <__aeabi_dmul+0x4c0>
 8002108:	200f      	movs	r0, #15
 800210a:	2300      	movs	r3, #0
 800210c:	4010      	ands	r0, r2
 800210e:	0014      	movs	r4, r2
 8002110:	2804      	cmp	r0, #4
 8002112:	d1b9      	bne.n	8002088 <__aeabi_dmul+0x42c>
 8002114:	0022      	movs	r2, r4
 8002116:	075e      	lsls	r6, r3, #29
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	0b1f      	lsrs	r7, r3, #12
 800211c:	08d2      	lsrs	r2, r2, #3
 800211e:	4316      	orrs	r6, r2
 8002120:	2300      	movs	r3, #0
 8002122:	e606      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002124:	2780      	movs	r7, #128	; 0x80
 8002126:	033f      	lsls	r7, r7, #12
 8002128:	431f      	orrs	r7, r3
 800212a:	033f      	lsls	r7, r7, #12
 800212c:	0b3f      	lsrs	r7, r7, #12
 800212e:	0016      	movs	r6, r2
 8002130:	4b00      	ldr	r3, [pc, #0]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002132:	e5fe      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002134:	000007ff 	.word	0x000007ff
 8002138:	0000041e 	.word	0x0000041e
 800213c:	0000043e 	.word	0x0000043e

08002140 <__aeabi_dsub>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	4657      	mov	r7, sl
 8002144:	464e      	mov	r6, r9
 8002146:	4645      	mov	r5, r8
 8002148:	46de      	mov	lr, fp
 800214a:	000c      	movs	r4, r1
 800214c:	0309      	lsls	r1, r1, #12
 800214e:	b5e0      	push	{r5, r6, r7, lr}
 8002150:	0a49      	lsrs	r1, r1, #9
 8002152:	0f46      	lsrs	r6, r0, #29
 8002154:	005f      	lsls	r7, r3, #1
 8002156:	4331      	orrs	r1, r6
 8002158:	031e      	lsls	r6, r3, #12
 800215a:	0fdb      	lsrs	r3, r3, #31
 800215c:	0a76      	lsrs	r6, r6, #9
 800215e:	469b      	mov	fp, r3
 8002160:	0f53      	lsrs	r3, r2, #29
 8002162:	4333      	orrs	r3, r6
 8002164:	4ec8      	ldr	r6, [pc, #800]	; (8002488 <__aeabi_dsub+0x348>)
 8002166:	0065      	lsls	r5, r4, #1
 8002168:	00c0      	lsls	r0, r0, #3
 800216a:	0fe4      	lsrs	r4, r4, #31
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	0d6d      	lsrs	r5, r5, #21
 8002170:	46a2      	mov	sl, r4
 8002172:	4681      	mov	r9, r0
 8002174:	0d7f      	lsrs	r7, r7, #21
 8002176:	469c      	mov	ip, r3
 8002178:	4690      	mov	r8, r2
 800217a:	42b7      	cmp	r7, r6
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x40>
 800217e:	e0b9      	b.n	80022f4 <__aeabi_dsub+0x1b4>
 8002180:	465b      	mov	r3, fp
 8002182:	2601      	movs	r6, #1
 8002184:	4073      	eors	r3, r6
 8002186:	469b      	mov	fp, r3
 8002188:	1bee      	subs	r6, r5, r7
 800218a:	45a3      	cmp	fp, r4
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x50>
 800218e:	e083      	b.n	8002298 <__aeabi_dsub+0x158>
 8002190:	2e00      	cmp	r6, #0
 8002192:	dd63      	ble.n	800225c <__aeabi_dsub+0x11c>
 8002194:	2f00      	cmp	r7, #0
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x5a>
 8002198:	e0b1      	b.n	80022fe <__aeabi_dsub+0x1be>
 800219a:	4663      	mov	r3, ip
 800219c:	4313      	orrs	r3, r2
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x62>
 80021a0:	e123      	b.n	80023ea <__aeabi_dsub+0x2aa>
 80021a2:	1e73      	subs	r3, r6, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x6a>
 80021a8:	e1ba      	b.n	8002520 <__aeabi_dsub+0x3e0>
 80021aa:	1a86      	subs	r6, r0, r2
 80021ac:	4663      	mov	r3, ip
 80021ae:	42b0      	cmp	r0, r6
 80021b0:	4180      	sbcs	r0, r0
 80021b2:	2501      	movs	r5, #1
 80021b4:	1ac9      	subs	r1, r1, r3
 80021b6:	4240      	negs	r0, r0
 80021b8:	1a09      	subs	r1, r1, r0
 80021ba:	020b      	lsls	r3, r1, #8
 80021bc:	d400      	bmi.n	80021c0 <__aeabi_dsub+0x80>
 80021be:	e147      	b.n	8002450 <__aeabi_dsub+0x310>
 80021c0:	0249      	lsls	r1, r1, #9
 80021c2:	0a4b      	lsrs	r3, r1, #9
 80021c4:	4698      	mov	r8, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x8e>
 80021cc:	e189      	b.n	80024e2 <__aeabi_dsub+0x3a2>
 80021ce:	4640      	mov	r0, r8
 80021d0:	f000 fc92 	bl	8002af8 <__clzsi2>
 80021d4:	0003      	movs	r3, r0
 80021d6:	3b08      	subs	r3, #8
 80021d8:	2b1f      	cmp	r3, #31
 80021da:	dd00      	ble.n	80021de <__aeabi_dsub+0x9e>
 80021dc:	e17c      	b.n	80024d8 <__aeabi_dsub+0x398>
 80021de:	2220      	movs	r2, #32
 80021e0:	0030      	movs	r0, r6
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	4641      	mov	r1, r8
 80021e6:	40d0      	lsrs	r0, r2
 80021e8:	4099      	lsls	r1, r3
 80021ea:	0002      	movs	r2, r0
 80021ec:	409e      	lsls	r6, r3
 80021ee:	430a      	orrs	r2, r1
 80021f0:	429d      	cmp	r5, r3
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dsub+0xb6>
 80021f4:	e16a      	b.n	80024cc <__aeabi_dsub+0x38c>
 80021f6:	1b5d      	subs	r5, r3, r5
 80021f8:	1c6b      	adds	r3, r5, #1
 80021fa:	2b1f      	cmp	r3, #31
 80021fc:	dd00      	ble.n	8002200 <__aeabi_dsub+0xc0>
 80021fe:	e194      	b.n	800252a <__aeabi_dsub+0x3ea>
 8002200:	2120      	movs	r1, #32
 8002202:	0010      	movs	r0, r2
 8002204:	0035      	movs	r5, r6
 8002206:	1ac9      	subs	r1, r1, r3
 8002208:	408e      	lsls	r6, r1
 800220a:	40da      	lsrs	r2, r3
 800220c:	4088      	lsls	r0, r1
 800220e:	40dd      	lsrs	r5, r3
 8002210:	1e71      	subs	r1, r6, #1
 8002212:	418e      	sbcs	r6, r1
 8002214:	0011      	movs	r1, r2
 8002216:	2207      	movs	r2, #7
 8002218:	4328      	orrs	r0, r5
 800221a:	2500      	movs	r5, #0
 800221c:	4306      	orrs	r6, r0
 800221e:	4032      	ands	r2, r6
 8002220:	2a00      	cmp	r2, #0
 8002222:	d009      	beq.n	8002238 <__aeabi_dsub+0xf8>
 8002224:	230f      	movs	r3, #15
 8002226:	4033      	ands	r3, r6
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <__aeabi_dsub+0xf8>
 800222c:	1d33      	adds	r3, r6, #4
 800222e:	42b3      	cmp	r3, r6
 8002230:	41b6      	sbcs	r6, r6
 8002232:	4276      	negs	r6, r6
 8002234:	1989      	adds	r1, r1, r6
 8002236:	001e      	movs	r6, r3
 8002238:	020b      	lsls	r3, r1, #8
 800223a:	d400      	bmi.n	800223e <__aeabi_dsub+0xfe>
 800223c:	e23d      	b.n	80026ba <__aeabi_dsub+0x57a>
 800223e:	1c6a      	adds	r2, r5, #1
 8002240:	4b91      	ldr	r3, [pc, #580]	; (8002488 <__aeabi_dsub+0x348>)
 8002242:	0555      	lsls	r5, r2, #21
 8002244:	0d6d      	lsrs	r5, r5, #21
 8002246:	429a      	cmp	r2, r3
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x10c>
 800224a:	e119      	b.n	8002480 <__aeabi_dsub+0x340>
 800224c:	4a8f      	ldr	r2, [pc, #572]	; (800248c <__aeabi_dsub+0x34c>)
 800224e:	08f6      	lsrs	r6, r6, #3
 8002250:	400a      	ands	r2, r1
 8002252:	0757      	lsls	r7, r2, #29
 8002254:	0252      	lsls	r2, r2, #9
 8002256:	4337      	orrs	r7, r6
 8002258:	0b12      	lsrs	r2, r2, #12
 800225a:	e09b      	b.n	8002394 <__aeabi_dsub+0x254>
 800225c:	2e00      	cmp	r6, #0
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x122>
 8002260:	e0c5      	b.n	80023ee <__aeabi_dsub+0x2ae>
 8002262:	1c6e      	adds	r6, r5, #1
 8002264:	0576      	lsls	r6, r6, #21
 8002266:	0d76      	lsrs	r6, r6, #21
 8002268:	2e01      	cmp	r6, #1
 800226a:	dc00      	bgt.n	800226e <__aeabi_dsub+0x12e>
 800226c:	e148      	b.n	8002500 <__aeabi_dsub+0x3c0>
 800226e:	4667      	mov	r7, ip
 8002270:	1a86      	subs	r6, r0, r2
 8002272:	1bcb      	subs	r3, r1, r7
 8002274:	42b0      	cmp	r0, r6
 8002276:	41bf      	sbcs	r7, r7
 8002278:	427f      	negs	r7, r7
 800227a:	46b8      	mov	r8, r7
 800227c:	001f      	movs	r7, r3
 800227e:	4643      	mov	r3, r8
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	003b      	movs	r3, r7
 8002284:	46b8      	mov	r8, r7
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	d500      	bpl.n	800228c <__aeabi_dsub+0x14c>
 800228a:	e15f      	b.n	800254c <__aeabi_dsub+0x40c>
 800228c:	4337      	orrs	r7, r6
 800228e:	d19a      	bne.n	80021c6 <__aeabi_dsub+0x86>
 8002290:	2200      	movs	r2, #0
 8002292:	2400      	movs	r4, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e079      	b.n	800238c <__aeabi_dsub+0x24c>
 8002298:	2e00      	cmp	r6, #0
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x15e>
 800229c:	e0fa      	b.n	8002494 <__aeabi_dsub+0x354>
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x164>
 80022a2:	e08d      	b.n	80023c0 <__aeabi_dsub+0x280>
 80022a4:	4b78      	ldr	r3, [pc, #480]	; (8002488 <__aeabi_dsub+0x348>)
 80022a6:	429d      	cmp	r5, r3
 80022a8:	d067      	beq.n	800237a <__aeabi_dsub+0x23a>
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	4667      	mov	r7, ip
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	431f      	orrs	r7, r3
 80022b2:	46bc      	mov	ip, r7
 80022b4:	2e38      	cmp	r6, #56	; 0x38
 80022b6:	dc00      	bgt.n	80022ba <__aeabi_dsub+0x17a>
 80022b8:	e152      	b.n	8002560 <__aeabi_dsub+0x420>
 80022ba:	4663      	mov	r3, ip
 80022bc:	4313      	orrs	r3, r2
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	4193      	sbcs	r3, r2
 80022c2:	181e      	adds	r6, r3, r0
 80022c4:	4286      	cmp	r6, r0
 80022c6:	4180      	sbcs	r0, r0
 80022c8:	4240      	negs	r0, r0
 80022ca:	1809      	adds	r1, r1, r0
 80022cc:	020b      	lsls	r3, r1, #8
 80022ce:	d400      	bmi.n	80022d2 <__aeabi_dsub+0x192>
 80022d0:	e0be      	b.n	8002450 <__aeabi_dsub+0x310>
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <__aeabi_dsub+0x348>)
 80022d4:	3501      	adds	r5, #1
 80022d6:	429d      	cmp	r5, r3
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x19c>
 80022da:	e0d2      	b.n	8002482 <__aeabi_dsub+0x342>
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <__aeabi_dsub+0x34c>)
 80022de:	0873      	lsrs	r3, r6, #1
 80022e0:	400a      	ands	r2, r1
 80022e2:	2101      	movs	r1, #1
 80022e4:	400e      	ands	r6, r1
 80022e6:	431e      	orrs	r6, r3
 80022e8:	0851      	lsrs	r1, r2, #1
 80022ea:	07d3      	lsls	r3, r2, #31
 80022ec:	2207      	movs	r2, #7
 80022ee:	431e      	orrs	r6, r3
 80022f0:	4032      	ands	r2, r6
 80022f2:	e795      	b.n	8002220 <__aeabi_dsub+0xe0>
 80022f4:	001e      	movs	r6, r3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x1bc>
 80022fa:	e745      	b.n	8002188 <__aeabi_dsub+0x48>
 80022fc:	e740      	b.n	8002180 <__aeabi_dsub+0x40>
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <__aeabi_dsub+0x348>)
 8002300:	429d      	cmp	r5, r3
 8002302:	d03a      	beq.n	800237a <__aeabi_dsub+0x23a>
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	4667      	mov	r7, ip
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431f      	orrs	r7, r3
 800230c:	46bc      	mov	ip, r7
 800230e:	2e38      	cmp	r6, #56	; 0x38
 8002310:	dd00      	ble.n	8002314 <__aeabi_dsub+0x1d4>
 8002312:	e0eb      	b.n	80024ec <__aeabi_dsub+0x3ac>
 8002314:	2e1f      	cmp	r6, #31
 8002316:	dc00      	bgt.n	800231a <__aeabi_dsub+0x1da>
 8002318:	e13a      	b.n	8002590 <__aeabi_dsub+0x450>
 800231a:	0033      	movs	r3, r6
 800231c:	4667      	mov	r7, ip
 800231e:	3b20      	subs	r3, #32
 8002320:	40df      	lsrs	r7, r3
 8002322:	003b      	movs	r3, r7
 8002324:	2e20      	cmp	r6, #32
 8002326:	d005      	beq.n	8002334 <__aeabi_dsub+0x1f4>
 8002328:	2740      	movs	r7, #64	; 0x40
 800232a:	1bbf      	subs	r7, r7, r6
 800232c:	4666      	mov	r6, ip
 800232e:	40be      	lsls	r6, r7
 8002330:	4332      	orrs	r2, r6
 8002332:	4690      	mov	r8, r2
 8002334:	4646      	mov	r6, r8
 8002336:	1e72      	subs	r2, r6, #1
 8002338:	4196      	sbcs	r6, r2
 800233a:	4333      	orrs	r3, r6
 800233c:	e0da      	b.n	80024f4 <__aeabi_dsub+0x3b4>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x204>
 8002342:	e214      	b.n	800276e <__aeabi_dsub+0x62e>
 8002344:	4663      	mov	r3, ip
 8002346:	4313      	orrs	r3, r2
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x20c>
 800234a:	e168      	b.n	800261e <__aeabi_dsub+0x4de>
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	074e      	lsls	r6, r1, #29
 8002350:	08c0      	lsrs	r0, r0, #3
 8002352:	08c9      	lsrs	r1, r1, #3
 8002354:	031b      	lsls	r3, r3, #12
 8002356:	4306      	orrs	r6, r0
 8002358:	4219      	tst	r1, r3
 800235a:	d008      	beq.n	800236e <__aeabi_dsub+0x22e>
 800235c:	4660      	mov	r0, ip
 800235e:	08c0      	lsrs	r0, r0, #3
 8002360:	4218      	tst	r0, r3
 8002362:	d104      	bne.n	800236e <__aeabi_dsub+0x22e>
 8002364:	4663      	mov	r3, ip
 8002366:	0001      	movs	r1, r0
 8002368:	08d2      	lsrs	r2, r2, #3
 800236a:	075e      	lsls	r6, r3, #29
 800236c:	4316      	orrs	r6, r2
 800236e:	00f3      	lsls	r3, r6, #3
 8002370:	4699      	mov	r9, r3
 8002372:	00c9      	lsls	r1, r1, #3
 8002374:	0f72      	lsrs	r2, r6, #29
 8002376:	4d44      	ldr	r5, [pc, #272]	; (8002488 <__aeabi_dsub+0x348>)
 8002378:	4311      	orrs	r1, r2
 800237a:	464b      	mov	r3, r9
 800237c:	08de      	lsrs	r6, r3, #3
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <__aeabi_dsub+0x348>)
 8002380:	074f      	lsls	r7, r1, #29
 8002382:	4337      	orrs	r7, r6
 8002384:	08ca      	lsrs	r2, r1, #3
 8002386:	429d      	cmp	r5, r3
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x24c>
 800238a:	e06e      	b.n	800246a <__aeabi_dsub+0x32a>
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	056d      	lsls	r5, r5, #21
 8002390:	0b12      	lsrs	r2, r2, #12
 8002392:	0d6d      	lsrs	r5, r5, #21
 8002394:	2100      	movs	r1, #0
 8002396:	0312      	lsls	r2, r2, #12
 8002398:	0b13      	lsrs	r3, r2, #12
 800239a:	0d0a      	lsrs	r2, r1, #20
 800239c:	0512      	lsls	r2, r2, #20
 800239e:	431a      	orrs	r2, r3
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <__aeabi_dsub+0x350>)
 80023a2:	052d      	lsls	r5, r5, #20
 80023a4:	4013      	ands	r3, r2
 80023a6:	432b      	orrs	r3, r5
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	07e4      	lsls	r4, r4, #31
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	4323      	orrs	r3, r4
 80023b0:	0038      	movs	r0, r7
 80023b2:	0019      	movs	r1, r3
 80023b4:	bc3c      	pop	{r2, r3, r4, r5}
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	46a2      	mov	sl, r4
 80023bc:	46ab      	mov	fp, r5
 80023be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c0:	4663      	mov	r3, ip
 80023c2:	4313      	orrs	r3, r2
 80023c4:	d011      	beq.n	80023ea <__aeabi_dsub+0x2aa>
 80023c6:	1e73      	subs	r3, r6, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <__aeabi_dsub+0x28e>
 80023cc:	e107      	b.n	80025de <__aeabi_dsub+0x49e>
 80023ce:	1886      	adds	r6, r0, r2
 80023d0:	4286      	cmp	r6, r0
 80023d2:	4180      	sbcs	r0, r0
 80023d4:	4461      	add	r1, ip
 80023d6:	4240      	negs	r0, r0
 80023d8:	1809      	adds	r1, r1, r0
 80023da:	2501      	movs	r5, #1
 80023dc:	020b      	lsls	r3, r1, #8
 80023de:	d537      	bpl.n	8002450 <__aeabi_dsub+0x310>
 80023e0:	2502      	movs	r5, #2
 80023e2:	e77b      	b.n	80022dc <__aeabi_dsub+0x19c>
 80023e4:	003e      	movs	r6, r7
 80023e6:	4661      	mov	r1, ip
 80023e8:	4691      	mov	r9, r2
 80023ea:	0035      	movs	r5, r6
 80023ec:	e7c5      	b.n	800237a <__aeabi_dsub+0x23a>
 80023ee:	465c      	mov	r4, fp
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	d000      	beq.n	80023f6 <__aeabi_dsub+0x2b6>
 80023f4:	e0e1      	b.n	80025ba <__aeabi_dsub+0x47a>
 80023f6:	000b      	movs	r3, r1
 80023f8:	4303      	orrs	r3, r0
 80023fa:	d0f3      	beq.n	80023e4 <__aeabi_dsub+0x2a4>
 80023fc:	1c73      	adds	r3, r6, #1
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x2c2>
 8002400:	e1ac      	b.n	800275c <__aeabi_dsub+0x61c>
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <__aeabi_dsub+0x348>)
 8002404:	429f      	cmp	r7, r3
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x2ca>
 8002408:	e13a      	b.n	8002680 <__aeabi_dsub+0x540>
 800240a:	43f3      	mvns	r3, r6
 800240c:	2b38      	cmp	r3, #56	; 0x38
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x2d2>
 8002410:	e16f      	b.n	80026f2 <__aeabi_dsub+0x5b2>
 8002412:	2b1f      	cmp	r3, #31
 8002414:	dd00      	ble.n	8002418 <__aeabi_dsub+0x2d8>
 8002416:	e18c      	b.n	8002732 <__aeabi_dsub+0x5f2>
 8002418:	2520      	movs	r5, #32
 800241a:	000e      	movs	r6, r1
 800241c:	1aed      	subs	r5, r5, r3
 800241e:	40ae      	lsls	r6, r5
 8002420:	46b0      	mov	r8, r6
 8002422:	0006      	movs	r6, r0
 8002424:	46aa      	mov	sl, r5
 8002426:	40de      	lsrs	r6, r3
 8002428:	4645      	mov	r5, r8
 800242a:	4335      	orrs	r5, r6
 800242c:	002e      	movs	r6, r5
 800242e:	4655      	mov	r5, sl
 8002430:	40d9      	lsrs	r1, r3
 8002432:	40a8      	lsls	r0, r5
 8002434:	4663      	mov	r3, ip
 8002436:	1e45      	subs	r5, r0, #1
 8002438:	41a8      	sbcs	r0, r5
 800243a:	1a5b      	subs	r3, r3, r1
 800243c:	469c      	mov	ip, r3
 800243e:	4330      	orrs	r0, r6
 8002440:	1a16      	subs	r6, r2, r0
 8002442:	42b2      	cmp	r2, r6
 8002444:	4192      	sbcs	r2, r2
 8002446:	4663      	mov	r3, ip
 8002448:	4252      	negs	r2, r2
 800244a:	1a99      	subs	r1, r3, r2
 800244c:	003d      	movs	r5, r7
 800244e:	e6b4      	b.n	80021ba <__aeabi_dsub+0x7a>
 8002450:	2207      	movs	r2, #7
 8002452:	4032      	ands	r2, r6
 8002454:	2a00      	cmp	r2, #0
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x31a>
 8002458:	e6e4      	b.n	8002224 <__aeabi_dsub+0xe4>
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <__aeabi_dsub+0x348>)
 800245c:	08f6      	lsrs	r6, r6, #3
 800245e:	074f      	lsls	r7, r1, #29
 8002460:	4337      	orrs	r7, r6
 8002462:	08ca      	lsrs	r2, r1, #3
 8002464:	429d      	cmp	r5, r3
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x32a>
 8002468:	e790      	b.n	800238c <__aeabi_dsub+0x24c>
 800246a:	003b      	movs	r3, r7
 800246c:	4313      	orrs	r3, r2
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x332>
 8002470:	e1a6      	b.n	80027c0 <__aeabi_dsub+0x680>
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	031b      	lsls	r3, r3, #12
 8002476:	431a      	orrs	r2, r3
 8002478:	0312      	lsls	r2, r2, #12
 800247a:	0b12      	lsrs	r2, r2, #12
 800247c:	4d02      	ldr	r5, [pc, #8]	; (8002488 <__aeabi_dsub+0x348>)
 800247e:	e789      	b.n	8002394 <__aeabi_dsub+0x254>
 8002480:	0015      	movs	r5, r2
 8002482:	2200      	movs	r2, #0
 8002484:	2700      	movs	r7, #0
 8002486:	e785      	b.n	8002394 <__aeabi_dsub+0x254>
 8002488:	000007ff 	.word	0x000007ff
 800248c:	ff7fffff 	.word	0xff7fffff
 8002490:	800fffff 	.word	0x800fffff
 8002494:	2e00      	cmp	r6, #0
 8002496:	d000      	beq.n	800249a <__aeabi_dsub+0x35a>
 8002498:	e0c7      	b.n	800262a <__aeabi_dsub+0x4ea>
 800249a:	1c6b      	adds	r3, r5, #1
 800249c:	055e      	lsls	r6, r3, #21
 800249e:	0d76      	lsrs	r6, r6, #21
 80024a0:	2e01      	cmp	r6, #1
 80024a2:	dc00      	bgt.n	80024a6 <__aeabi_dsub+0x366>
 80024a4:	e0f0      	b.n	8002688 <__aeabi_dsub+0x548>
 80024a6:	4dc8      	ldr	r5, [pc, #800]	; (80027c8 <__aeabi_dsub+0x688>)
 80024a8:	42ab      	cmp	r3, r5
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x36e>
 80024ac:	e0b9      	b.n	8002622 <__aeabi_dsub+0x4e2>
 80024ae:	1885      	adds	r5, r0, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	4285      	cmp	r5, r0
 80024b4:	4189      	sbcs	r1, r1
 80024b6:	4462      	add	r2, ip
 80024b8:	4249      	negs	r1, r1
 80024ba:	1851      	adds	r1, r2, r1
 80024bc:	2207      	movs	r2, #7
 80024be:	07ce      	lsls	r6, r1, #31
 80024c0:	086d      	lsrs	r5, r5, #1
 80024c2:	432e      	orrs	r6, r5
 80024c4:	0849      	lsrs	r1, r1, #1
 80024c6:	4032      	ands	r2, r6
 80024c8:	001d      	movs	r5, r3
 80024ca:	e6a9      	b.n	8002220 <__aeabi_dsub+0xe0>
 80024cc:	49bf      	ldr	r1, [pc, #764]	; (80027cc <__aeabi_dsub+0x68c>)
 80024ce:	1aed      	subs	r5, r5, r3
 80024d0:	4011      	ands	r1, r2
 80024d2:	2207      	movs	r2, #7
 80024d4:	4032      	ands	r2, r6
 80024d6:	e6a3      	b.n	8002220 <__aeabi_dsub+0xe0>
 80024d8:	0032      	movs	r2, r6
 80024da:	3828      	subs	r0, #40	; 0x28
 80024dc:	4082      	lsls	r2, r0
 80024de:	2600      	movs	r6, #0
 80024e0:	e686      	b.n	80021f0 <__aeabi_dsub+0xb0>
 80024e2:	0030      	movs	r0, r6
 80024e4:	f000 fb08 	bl	8002af8 <__clzsi2>
 80024e8:	3020      	adds	r0, #32
 80024ea:	e673      	b.n	80021d4 <__aeabi_dsub+0x94>
 80024ec:	4663      	mov	r3, ip
 80024ee:	4313      	orrs	r3, r2
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	4193      	sbcs	r3, r2
 80024f4:	1ac6      	subs	r6, r0, r3
 80024f6:	42b0      	cmp	r0, r6
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4240      	negs	r0, r0
 80024fc:	1a09      	subs	r1, r1, r0
 80024fe:	e65c      	b.n	80021ba <__aeabi_dsub+0x7a>
 8002500:	000e      	movs	r6, r1
 8002502:	4667      	mov	r7, ip
 8002504:	4306      	orrs	r6, r0
 8002506:	4317      	orrs	r7, r2
 8002508:	2d00      	cmp	r5, #0
 800250a:	d15e      	bne.n	80025ca <__aeabi_dsub+0x48a>
 800250c:	2e00      	cmp	r6, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x3d2>
 8002510:	e0f3      	b.n	80026fa <__aeabi_dsub+0x5ba>
 8002512:	2f00      	cmp	r7, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x3d8>
 8002516:	e11e      	b.n	8002756 <__aeabi_dsub+0x616>
 8002518:	465c      	mov	r4, fp
 800251a:	4661      	mov	r1, ip
 800251c:	4691      	mov	r9, r2
 800251e:	e72c      	b.n	800237a <__aeabi_dsub+0x23a>
 8002520:	4fa9      	ldr	r7, [pc, #676]	; (80027c8 <__aeabi_dsub+0x688>)
 8002522:	42be      	cmp	r6, r7
 8002524:	d07b      	beq.n	800261e <__aeabi_dsub+0x4de>
 8002526:	001e      	movs	r6, r3
 8002528:	e6f1      	b.n	800230e <__aeabi_dsub+0x1ce>
 800252a:	0010      	movs	r0, r2
 800252c:	3d1f      	subs	r5, #31
 800252e:	40e8      	lsrs	r0, r5
 8002530:	2b20      	cmp	r3, #32
 8002532:	d003      	beq.n	800253c <__aeabi_dsub+0x3fc>
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	409a      	lsls	r2, r3
 800253a:	4316      	orrs	r6, r2
 800253c:	1e73      	subs	r3, r6, #1
 800253e:	419e      	sbcs	r6, r3
 8002540:	2207      	movs	r2, #7
 8002542:	4306      	orrs	r6, r0
 8002544:	4032      	ands	r2, r6
 8002546:	2100      	movs	r1, #0
 8002548:	2500      	movs	r5, #0
 800254a:	e783      	b.n	8002454 <__aeabi_dsub+0x314>
 800254c:	1a16      	subs	r6, r2, r0
 800254e:	4663      	mov	r3, ip
 8002550:	42b2      	cmp	r2, r6
 8002552:	4180      	sbcs	r0, r0
 8002554:	1a59      	subs	r1, r3, r1
 8002556:	4240      	negs	r0, r0
 8002558:	1a0b      	subs	r3, r1, r0
 800255a:	4698      	mov	r8, r3
 800255c:	465c      	mov	r4, fp
 800255e:	e632      	b.n	80021c6 <__aeabi_dsub+0x86>
 8002560:	2e1f      	cmp	r6, #31
 8002562:	dd00      	ble.n	8002566 <__aeabi_dsub+0x426>
 8002564:	e0ab      	b.n	80026be <__aeabi_dsub+0x57e>
 8002566:	2720      	movs	r7, #32
 8002568:	1bbb      	subs	r3, r7, r6
 800256a:	469a      	mov	sl, r3
 800256c:	4663      	mov	r3, ip
 800256e:	4657      	mov	r7, sl
 8002570:	40bb      	lsls	r3, r7
 8002572:	4699      	mov	r9, r3
 8002574:	0013      	movs	r3, r2
 8002576:	464f      	mov	r7, r9
 8002578:	40f3      	lsrs	r3, r6
 800257a:	431f      	orrs	r7, r3
 800257c:	003b      	movs	r3, r7
 800257e:	4657      	mov	r7, sl
 8002580:	40ba      	lsls	r2, r7
 8002582:	1e57      	subs	r7, r2, #1
 8002584:	41ba      	sbcs	r2, r7
 8002586:	4313      	orrs	r3, r2
 8002588:	4662      	mov	r2, ip
 800258a:	40f2      	lsrs	r2, r6
 800258c:	1889      	adds	r1, r1, r2
 800258e:	e698      	b.n	80022c2 <__aeabi_dsub+0x182>
 8002590:	2720      	movs	r7, #32
 8002592:	1bbb      	subs	r3, r7, r6
 8002594:	469a      	mov	sl, r3
 8002596:	4663      	mov	r3, ip
 8002598:	4657      	mov	r7, sl
 800259a:	40bb      	lsls	r3, r7
 800259c:	4699      	mov	r9, r3
 800259e:	0013      	movs	r3, r2
 80025a0:	464f      	mov	r7, r9
 80025a2:	40f3      	lsrs	r3, r6
 80025a4:	431f      	orrs	r7, r3
 80025a6:	003b      	movs	r3, r7
 80025a8:	4657      	mov	r7, sl
 80025aa:	40ba      	lsls	r2, r7
 80025ac:	1e57      	subs	r7, r2, #1
 80025ae:	41ba      	sbcs	r2, r7
 80025b0:	4313      	orrs	r3, r2
 80025b2:	4662      	mov	r2, ip
 80025b4:	40f2      	lsrs	r2, r6
 80025b6:	1a89      	subs	r1, r1, r2
 80025b8:	e79c      	b.n	80024f4 <__aeabi_dsub+0x3b4>
 80025ba:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <__aeabi_dsub+0x688>)
 80025bc:	429f      	cmp	r7, r3
 80025be:	d05f      	beq.n	8002680 <__aeabi_dsub+0x540>
 80025c0:	2580      	movs	r5, #128	; 0x80
 80025c2:	042d      	lsls	r5, r5, #16
 80025c4:	4273      	negs	r3, r6
 80025c6:	4329      	orrs	r1, r5
 80025c8:	e720      	b.n	800240c <__aeabi_dsub+0x2cc>
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	d10c      	bne.n	80025e8 <__aeabi_dsub+0x4a8>
 80025ce:	2f00      	cmp	r7, #0
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x494>
 80025d2:	e0d0      	b.n	8002776 <__aeabi_dsub+0x636>
 80025d4:	465c      	mov	r4, fp
 80025d6:	4661      	mov	r1, ip
 80025d8:	4691      	mov	r9, r2
 80025da:	4d7b      	ldr	r5, [pc, #492]	; (80027c8 <__aeabi_dsub+0x688>)
 80025dc:	e6cd      	b.n	800237a <__aeabi_dsub+0x23a>
 80025de:	4f7a      	ldr	r7, [pc, #488]	; (80027c8 <__aeabi_dsub+0x688>)
 80025e0:	42be      	cmp	r6, r7
 80025e2:	d01c      	beq.n	800261e <__aeabi_dsub+0x4de>
 80025e4:	001e      	movs	r6, r3
 80025e6:	e665      	b.n	80022b4 <__aeabi_dsub+0x174>
 80025e8:	2f00      	cmp	r7, #0
 80025ea:	d018      	beq.n	800261e <__aeabi_dsub+0x4de>
 80025ec:	08c0      	lsrs	r0, r0, #3
 80025ee:	074e      	lsls	r6, r1, #29
 80025f0:	4306      	orrs	r6, r0
 80025f2:	2080      	movs	r0, #128	; 0x80
 80025f4:	08c9      	lsrs	r1, r1, #3
 80025f6:	0300      	lsls	r0, r0, #12
 80025f8:	4201      	tst	r1, r0
 80025fa:	d008      	beq.n	800260e <__aeabi_dsub+0x4ce>
 80025fc:	4663      	mov	r3, ip
 80025fe:	08dc      	lsrs	r4, r3, #3
 8002600:	4204      	tst	r4, r0
 8002602:	d104      	bne.n	800260e <__aeabi_dsub+0x4ce>
 8002604:	0021      	movs	r1, r4
 8002606:	46da      	mov	sl, fp
 8002608:	08d2      	lsrs	r2, r2, #3
 800260a:	075e      	lsls	r6, r3, #29
 800260c:	4316      	orrs	r6, r2
 800260e:	00f3      	lsls	r3, r6, #3
 8002610:	4699      	mov	r9, r3
 8002612:	2401      	movs	r4, #1
 8002614:	4653      	mov	r3, sl
 8002616:	00c9      	lsls	r1, r1, #3
 8002618:	0f72      	lsrs	r2, r6, #29
 800261a:	4311      	orrs	r1, r2
 800261c:	401c      	ands	r4, r3
 800261e:	4d6a      	ldr	r5, [pc, #424]	; (80027c8 <__aeabi_dsub+0x688>)
 8002620:	e6ab      	b.n	800237a <__aeabi_dsub+0x23a>
 8002622:	001d      	movs	r5, r3
 8002624:	2200      	movs	r2, #0
 8002626:	2700      	movs	r7, #0
 8002628:	e6b4      	b.n	8002394 <__aeabi_dsub+0x254>
 800262a:	2d00      	cmp	r5, #0
 800262c:	d159      	bne.n	80026e2 <__aeabi_dsub+0x5a2>
 800262e:	000b      	movs	r3, r1
 8002630:	4303      	orrs	r3, r0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x4f6>
 8002634:	e6d6      	b.n	80023e4 <__aeabi_dsub+0x2a4>
 8002636:	1c73      	adds	r3, r6, #1
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x4fc>
 800263a:	e0b2      	b.n	80027a2 <__aeabi_dsub+0x662>
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <__aeabi_dsub+0x688>)
 800263e:	429f      	cmp	r7, r3
 8002640:	d01e      	beq.n	8002680 <__aeabi_dsub+0x540>
 8002642:	43f3      	mvns	r3, r6
 8002644:	2b38      	cmp	r3, #56	; 0x38
 8002646:	dc6f      	bgt.n	8002728 <__aeabi_dsub+0x5e8>
 8002648:	2b1f      	cmp	r3, #31
 800264a:	dd00      	ble.n	800264e <__aeabi_dsub+0x50e>
 800264c:	e097      	b.n	800277e <__aeabi_dsub+0x63e>
 800264e:	2520      	movs	r5, #32
 8002650:	000e      	movs	r6, r1
 8002652:	1aed      	subs	r5, r5, r3
 8002654:	40ae      	lsls	r6, r5
 8002656:	46b0      	mov	r8, r6
 8002658:	0006      	movs	r6, r0
 800265a:	46aa      	mov	sl, r5
 800265c:	40de      	lsrs	r6, r3
 800265e:	4645      	mov	r5, r8
 8002660:	4335      	orrs	r5, r6
 8002662:	002e      	movs	r6, r5
 8002664:	4655      	mov	r5, sl
 8002666:	40a8      	lsls	r0, r5
 8002668:	40d9      	lsrs	r1, r3
 800266a:	1e45      	subs	r5, r0, #1
 800266c:	41a8      	sbcs	r0, r5
 800266e:	448c      	add	ip, r1
 8002670:	4306      	orrs	r6, r0
 8002672:	18b6      	adds	r6, r6, r2
 8002674:	4296      	cmp	r6, r2
 8002676:	4192      	sbcs	r2, r2
 8002678:	4251      	negs	r1, r2
 800267a:	4461      	add	r1, ip
 800267c:	003d      	movs	r5, r7
 800267e:	e625      	b.n	80022cc <__aeabi_dsub+0x18c>
 8002680:	003d      	movs	r5, r7
 8002682:	4661      	mov	r1, ip
 8002684:	4691      	mov	r9, r2
 8002686:	e678      	b.n	800237a <__aeabi_dsub+0x23a>
 8002688:	000b      	movs	r3, r1
 800268a:	4303      	orrs	r3, r0
 800268c:	2d00      	cmp	r5, #0
 800268e:	d000      	beq.n	8002692 <__aeabi_dsub+0x552>
 8002690:	e655      	b.n	800233e <__aeabi_dsub+0x1fe>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f5      	beq.n	8002682 <__aeabi_dsub+0x542>
 8002696:	4663      	mov	r3, ip
 8002698:	4313      	orrs	r3, r2
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x55e>
 800269c:	e66d      	b.n	800237a <__aeabi_dsub+0x23a>
 800269e:	1886      	adds	r6, r0, r2
 80026a0:	4286      	cmp	r6, r0
 80026a2:	4180      	sbcs	r0, r0
 80026a4:	4461      	add	r1, ip
 80026a6:	4240      	negs	r0, r0
 80026a8:	1809      	adds	r1, r1, r0
 80026aa:	2200      	movs	r2, #0
 80026ac:	020b      	lsls	r3, r1, #8
 80026ae:	d400      	bmi.n	80026b2 <__aeabi_dsub+0x572>
 80026b0:	e6d0      	b.n	8002454 <__aeabi_dsub+0x314>
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <__aeabi_dsub+0x68c>)
 80026b4:	3501      	adds	r5, #1
 80026b6:	4019      	ands	r1, r3
 80026b8:	e5b2      	b.n	8002220 <__aeabi_dsub+0xe0>
 80026ba:	46b1      	mov	r9, r6
 80026bc:	e65d      	b.n	800237a <__aeabi_dsub+0x23a>
 80026be:	0033      	movs	r3, r6
 80026c0:	4667      	mov	r7, ip
 80026c2:	3b20      	subs	r3, #32
 80026c4:	40df      	lsrs	r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	2e20      	cmp	r6, #32
 80026ca:	d005      	beq.n	80026d8 <__aeabi_dsub+0x598>
 80026cc:	2740      	movs	r7, #64	; 0x40
 80026ce:	1bbf      	subs	r7, r7, r6
 80026d0:	4666      	mov	r6, ip
 80026d2:	40be      	lsls	r6, r7
 80026d4:	4332      	orrs	r2, r6
 80026d6:	4690      	mov	r8, r2
 80026d8:	4646      	mov	r6, r8
 80026da:	1e72      	subs	r2, r6, #1
 80026dc:	4196      	sbcs	r6, r2
 80026de:	4333      	orrs	r3, r6
 80026e0:	e5ef      	b.n	80022c2 <__aeabi_dsub+0x182>
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <__aeabi_dsub+0x688>)
 80026e4:	429f      	cmp	r7, r3
 80026e6:	d0cb      	beq.n	8002680 <__aeabi_dsub+0x540>
 80026e8:	2580      	movs	r5, #128	; 0x80
 80026ea:	042d      	lsls	r5, r5, #16
 80026ec:	4273      	negs	r3, r6
 80026ee:	4329      	orrs	r1, r5
 80026f0:	e7a8      	b.n	8002644 <__aeabi_dsub+0x504>
 80026f2:	4308      	orrs	r0, r1
 80026f4:	1e41      	subs	r1, r0, #1
 80026f6:	4188      	sbcs	r0, r1
 80026f8:	e6a2      	b.n	8002440 <__aeabi_dsub+0x300>
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x5c0>
 80026fe:	e63c      	b.n	800237a <__aeabi_dsub+0x23a>
 8002700:	4663      	mov	r3, ip
 8002702:	1a86      	subs	r6, r0, r2
 8002704:	1acf      	subs	r7, r1, r3
 8002706:	42b0      	cmp	r0, r6
 8002708:	419b      	sbcs	r3, r3
 800270a:	425b      	negs	r3, r3
 800270c:	1afb      	subs	r3, r7, r3
 800270e:	4698      	mov	r8, r3
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	d54e      	bpl.n	80027b2 <__aeabi_dsub+0x672>
 8002714:	1a16      	subs	r6, r2, r0
 8002716:	4663      	mov	r3, ip
 8002718:	42b2      	cmp	r2, r6
 800271a:	4192      	sbcs	r2, r2
 800271c:	1a59      	subs	r1, r3, r1
 800271e:	4252      	negs	r2, r2
 8002720:	1a89      	subs	r1, r1, r2
 8002722:	465c      	mov	r4, fp
 8002724:	2200      	movs	r2, #0
 8002726:	e57b      	b.n	8002220 <__aeabi_dsub+0xe0>
 8002728:	4301      	orrs	r1, r0
 800272a:	000e      	movs	r6, r1
 800272c:	1e71      	subs	r1, r6, #1
 800272e:	418e      	sbcs	r6, r1
 8002730:	e79f      	b.n	8002672 <__aeabi_dsub+0x532>
 8002732:	001d      	movs	r5, r3
 8002734:	000e      	movs	r6, r1
 8002736:	3d20      	subs	r5, #32
 8002738:	40ee      	lsrs	r6, r5
 800273a:	46b0      	mov	r8, r6
 800273c:	2b20      	cmp	r3, #32
 800273e:	d004      	beq.n	800274a <__aeabi_dsub+0x60a>
 8002740:	2540      	movs	r5, #64	; 0x40
 8002742:	1aeb      	subs	r3, r5, r3
 8002744:	4099      	lsls	r1, r3
 8002746:	4308      	orrs	r0, r1
 8002748:	4681      	mov	r9, r0
 800274a:	4648      	mov	r0, r9
 800274c:	4643      	mov	r3, r8
 800274e:	1e41      	subs	r1, r0, #1
 8002750:	4188      	sbcs	r0, r1
 8002752:	4318      	orrs	r0, r3
 8002754:	e674      	b.n	8002440 <__aeabi_dsub+0x300>
 8002756:	2200      	movs	r2, #0
 8002758:	2400      	movs	r4, #0
 800275a:	e617      	b.n	800238c <__aeabi_dsub+0x24c>
 800275c:	1a16      	subs	r6, r2, r0
 800275e:	4663      	mov	r3, ip
 8002760:	42b2      	cmp	r2, r6
 8002762:	4192      	sbcs	r2, r2
 8002764:	1a59      	subs	r1, r3, r1
 8002766:	4252      	negs	r2, r2
 8002768:	1a89      	subs	r1, r1, r2
 800276a:	003d      	movs	r5, r7
 800276c:	e525      	b.n	80021ba <__aeabi_dsub+0x7a>
 800276e:	4661      	mov	r1, ip
 8002770:	4691      	mov	r9, r2
 8002772:	4d15      	ldr	r5, [pc, #84]	; (80027c8 <__aeabi_dsub+0x688>)
 8002774:	e601      	b.n	800237a <__aeabi_dsub+0x23a>
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	2400      	movs	r4, #0
 800277a:	0312      	lsls	r2, r2, #12
 800277c:	e679      	b.n	8002472 <__aeabi_dsub+0x332>
 800277e:	001d      	movs	r5, r3
 8002780:	000e      	movs	r6, r1
 8002782:	3d20      	subs	r5, #32
 8002784:	40ee      	lsrs	r6, r5
 8002786:	46b0      	mov	r8, r6
 8002788:	2b20      	cmp	r3, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x656>
 800278c:	2540      	movs	r5, #64	; 0x40
 800278e:	1aeb      	subs	r3, r5, r3
 8002790:	4099      	lsls	r1, r3
 8002792:	4308      	orrs	r0, r1
 8002794:	4681      	mov	r9, r0
 8002796:	464e      	mov	r6, r9
 8002798:	4643      	mov	r3, r8
 800279a:	1e71      	subs	r1, r6, #1
 800279c:	418e      	sbcs	r6, r1
 800279e:	431e      	orrs	r6, r3
 80027a0:	e767      	b.n	8002672 <__aeabi_dsub+0x532>
 80027a2:	1886      	adds	r6, r0, r2
 80027a4:	4296      	cmp	r6, r2
 80027a6:	419b      	sbcs	r3, r3
 80027a8:	4461      	add	r1, ip
 80027aa:	425b      	negs	r3, r3
 80027ac:	18c9      	adds	r1, r1, r3
 80027ae:	003d      	movs	r5, r7
 80027b0:	e58c      	b.n	80022cc <__aeabi_dsub+0x18c>
 80027b2:	4647      	mov	r7, r8
 80027b4:	4337      	orrs	r7, r6
 80027b6:	d0ce      	beq.n	8002756 <__aeabi_dsub+0x616>
 80027b8:	2207      	movs	r2, #7
 80027ba:	4641      	mov	r1, r8
 80027bc:	4032      	ands	r2, r6
 80027be:	e649      	b.n	8002454 <__aeabi_dsub+0x314>
 80027c0:	2700      	movs	r7, #0
 80027c2:	003a      	movs	r2, r7
 80027c4:	e5e6      	b.n	8002394 <__aeabi_dsub+0x254>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	000007ff 	.word	0x000007ff
 80027cc:	ff7fffff 	.word	0xff7fffff

080027d0 <__aeabi_dcmpun>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4e0c      	ldr	r6, [pc, #48]	; (8002804 <__aeabi_dcmpun+0x34>)
 80027d4:	030d      	lsls	r5, r1, #12
 80027d6:	031c      	lsls	r4, r3, #12
 80027d8:	0049      	lsls	r1, r1, #1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	0b2d      	lsrs	r5, r5, #12
 80027de:	0d49      	lsrs	r1, r1, #21
 80027e0:	0b24      	lsrs	r4, r4, #12
 80027e2:	0d5b      	lsrs	r3, r3, #21
 80027e4:	42b1      	cmp	r1, r6
 80027e6:	d008      	beq.n	80027fa <__aeabi_dcmpun+0x2a>
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <__aeabi_dcmpun+0x34>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	d103      	bne.n	80027f8 <__aeabi_dcmpun+0x28>
 80027f0:	4314      	orrs	r4, r2
 80027f2:	0020      	movs	r0, r4
 80027f4:	1e44      	subs	r4, r0, #1
 80027f6:	41a0      	sbcs	r0, r4
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	4305      	orrs	r5, r0
 80027fc:	2001      	movs	r0, #1
 80027fe:	2d00      	cmp	r5, #0
 8002800:	d1fa      	bne.n	80027f8 <__aeabi_dcmpun+0x28>
 8002802:	e7f1      	b.n	80027e8 <__aeabi_dcmpun+0x18>
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2iz>:
 8002808:	b530      	push	{r4, r5, lr}
 800280a:	4d14      	ldr	r5, [pc, #80]	; (800285c <__aeabi_d2iz+0x54>)
 800280c:	030a      	lsls	r2, r1, #12
 800280e:	004b      	lsls	r3, r1, #1
 8002810:	0b12      	lsrs	r2, r2, #12
 8002812:	0d5b      	lsrs	r3, r3, #21
 8002814:	0fc9      	lsrs	r1, r1, #31
 8002816:	2400      	movs	r4, #0
 8002818:	42ab      	cmp	r3, r5
 800281a:	dd11      	ble.n	8002840 <__aeabi_d2iz+0x38>
 800281c:	4c10      	ldr	r4, [pc, #64]	; (8002860 <__aeabi_d2iz+0x58>)
 800281e:	42a3      	cmp	r3, r4
 8002820:	dc10      	bgt.n	8002844 <__aeabi_d2iz+0x3c>
 8002822:	2480      	movs	r4, #128	; 0x80
 8002824:	0364      	lsls	r4, r4, #13
 8002826:	4322      	orrs	r2, r4
 8002828:	4c0e      	ldr	r4, [pc, #56]	; (8002864 <__aeabi_d2iz+0x5c>)
 800282a:	1ae4      	subs	r4, r4, r3
 800282c:	2c1f      	cmp	r4, #31
 800282e:	dd0c      	ble.n	800284a <__aeabi_d2iz+0x42>
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <__aeabi_d2iz+0x60>)
 8002832:	1ac3      	subs	r3, r0, r3
 8002834:	40da      	lsrs	r2, r3
 8002836:	0013      	movs	r3, r2
 8002838:	425c      	negs	r4, r3
 800283a:	2900      	cmp	r1, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_d2iz+0x38>
 800283e:	001c      	movs	r4, r3
 8002840:	0020      	movs	r0, r4
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <__aeabi_d2iz+0x64>)
 8002846:	18cc      	adds	r4, r1, r3
 8002848:	e7fa      	b.n	8002840 <__aeabi_d2iz+0x38>
 800284a:	4d09      	ldr	r5, [pc, #36]	; (8002870 <__aeabi_d2iz+0x68>)
 800284c:	40e0      	lsrs	r0, r4
 800284e:	46ac      	mov	ip, r5
 8002850:	4463      	add	r3, ip
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	4303      	orrs	r3, r0
 8002858:	e7ee      	b.n	8002838 <__aeabi_d2iz+0x30>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	000003fe 	.word	0x000003fe
 8002860:	0000041d 	.word	0x0000041d
 8002864:	00000433 	.word	0x00000433
 8002868:	00000413 	.word	0x00000413
 800286c:	7fffffff 	.word	0x7fffffff
 8002870:	fffffbed 	.word	0xfffffbed

08002874 <__aeabi_i2d>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2800      	cmp	r0, #0
 8002878:	d02d      	beq.n	80028d6 <__aeabi_i2d+0x62>
 800287a:	17c3      	asrs	r3, r0, #31
 800287c:	18c5      	adds	r5, r0, r3
 800287e:	405d      	eors	r5, r3
 8002880:	0fc4      	lsrs	r4, r0, #31
 8002882:	0028      	movs	r0, r5
 8002884:	f000 f938 	bl	8002af8 <__clzsi2>
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <__aeabi_i2d+0x6c>)
 800288a:	1a1b      	subs	r3, r3, r0
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	0d5b      	lsrs	r3, r3, #21
 8002890:	280a      	cmp	r0, #10
 8002892:	dd15      	ble.n	80028c0 <__aeabi_i2d+0x4c>
 8002894:	380b      	subs	r0, #11
 8002896:	4085      	lsls	r5, r0
 8002898:	2200      	movs	r2, #0
 800289a:	032d      	lsls	r5, r5, #12
 800289c:	0b2d      	lsrs	r5, r5, #12
 800289e:	2100      	movs	r1, #0
 80028a0:	0010      	movs	r0, r2
 80028a2:	032d      	lsls	r5, r5, #12
 80028a4:	0d0a      	lsrs	r2, r1, #20
 80028a6:	0b2d      	lsrs	r5, r5, #12
 80028a8:	0512      	lsls	r2, r2, #20
 80028aa:	432a      	orrs	r2, r5
 80028ac:	4d0d      	ldr	r5, [pc, #52]	; (80028e4 <__aeabi_i2d+0x70>)
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	402a      	ands	r2, r5
 80028b2:	4313      	orrs	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	07e4      	lsls	r4, r4, #31
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	4323      	orrs	r3, r4
 80028bc:	0019      	movs	r1, r3
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	0002      	movs	r2, r0
 80028c2:	0029      	movs	r1, r5
 80028c4:	3215      	adds	r2, #21
 80028c6:	4091      	lsls	r1, r2
 80028c8:	000a      	movs	r2, r1
 80028ca:	210b      	movs	r1, #11
 80028cc:	1a08      	subs	r0, r1, r0
 80028ce:	40c5      	lsrs	r5, r0
 80028d0:	032d      	lsls	r5, r5, #12
 80028d2:	0b2d      	lsrs	r5, r5, #12
 80028d4:	e7e3      	b.n	800289e <__aeabi_i2d+0x2a>
 80028d6:	2400      	movs	r4, #0
 80028d8:	2300      	movs	r3, #0
 80028da:	2500      	movs	r5, #0
 80028dc:	2200      	movs	r2, #0
 80028de:	e7de      	b.n	800289e <__aeabi_i2d+0x2a>
 80028e0:	0000041e 	.word	0x0000041e
 80028e4:	800fffff 	.word	0x800fffff

080028e8 <__aeabi_ui2d>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	1e04      	subs	r4, r0, #0
 80028ec:	d025      	beq.n	800293a <__aeabi_ui2d+0x52>
 80028ee:	f000 f903 	bl	8002af8 <__clzsi2>
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <__aeabi_ui2d+0x5c>)
 80028f4:	1a1b      	subs	r3, r3, r0
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	0d5b      	lsrs	r3, r3, #21
 80028fa:	280a      	cmp	r0, #10
 80028fc:	dd12      	ble.n	8002924 <__aeabi_ui2d+0x3c>
 80028fe:	380b      	subs	r0, #11
 8002900:	4084      	lsls	r4, r0
 8002902:	2200      	movs	r2, #0
 8002904:	0324      	lsls	r4, r4, #12
 8002906:	0b24      	lsrs	r4, r4, #12
 8002908:	2100      	movs	r1, #0
 800290a:	0010      	movs	r0, r2
 800290c:	0324      	lsls	r4, r4, #12
 800290e:	0d0a      	lsrs	r2, r1, #20
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0512      	lsls	r2, r2, #20
 8002914:	4322      	orrs	r2, r4
 8002916:	4c0c      	ldr	r4, [pc, #48]	; (8002948 <__aeabi_ui2d+0x60>)
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	4022      	ands	r2, r4
 800291c:	4313      	orrs	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	0859      	lsrs	r1, r3, #1
 8002922:	bd10      	pop	{r4, pc}
 8002924:	0002      	movs	r2, r0
 8002926:	0021      	movs	r1, r4
 8002928:	3215      	adds	r2, #21
 800292a:	4091      	lsls	r1, r2
 800292c:	000a      	movs	r2, r1
 800292e:	210b      	movs	r1, #11
 8002930:	1a08      	subs	r0, r1, r0
 8002932:	40c4      	lsrs	r4, r0
 8002934:	0324      	lsls	r4, r4, #12
 8002936:	0b24      	lsrs	r4, r4, #12
 8002938:	e7e6      	b.n	8002908 <__aeabi_ui2d+0x20>
 800293a:	2300      	movs	r3, #0
 800293c:	2400      	movs	r4, #0
 800293e:	2200      	movs	r2, #0
 8002940:	e7e2      	b.n	8002908 <__aeabi_ui2d+0x20>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	0000041e 	.word	0x0000041e
 8002948:	800fffff 	.word	0x800fffff

0800294c <__aeabi_f2d>:
 800294c:	0041      	lsls	r1, r0, #1
 800294e:	0e09      	lsrs	r1, r1, #24
 8002950:	1c4b      	adds	r3, r1, #1
 8002952:	b570      	push	{r4, r5, r6, lr}
 8002954:	b2db      	uxtb	r3, r3
 8002956:	0246      	lsls	r6, r0, #9
 8002958:	0a75      	lsrs	r5, r6, #9
 800295a:	0fc4      	lsrs	r4, r0, #31
 800295c:	2b01      	cmp	r3, #1
 800295e:	dd14      	ble.n	800298a <__aeabi_f2d+0x3e>
 8002960:	23e0      	movs	r3, #224	; 0xe0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	076d      	lsls	r5, r5, #29
 8002966:	0b36      	lsrs	r6, r6, #12
 8002968:	18cb      	adds	r3, r1, r3
 800296a:	2100      	movs	r1, #0
 800296c:	0d0a      	lsrs	r2, r1, #20
 800296e:	0028      	movs	r0, r5
 8002970:	0512      	lsls	r2, r2, #20
 8002972:	4d1c      	ldr	r5, [pc, #112]	; (80029e4 <__aeabi_f2d+0x98>)
 8002974:	4332      	orrs	r2, r6
 8002976:	055b      	lsls	r3, r3, #21
 8002978:	402a      	ands	r2, r5
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	4313      	orrs	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	07e4      	lsls	r4, r4, #31
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	4323      	orrs	r3, r4
 8002986:	0019      	movs	r1, r3
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	2900      	cmp	r1, #0
 800298c:	d114      	bne.n	80029b8 <__aeabi_f2d+0x6c>
 800298e:	2d00      	cmp	r5, #0
 8002990:	d01e      	beq.n	80029d0 <__aeabi_f2d+0x84>
 8002992:	0028      	movs	r0, r5
 8002994:	f000 f8b0 	bl	8002af8 <__clzsi2>
 8002998:	280a      	cmp	r0, #10
 800299a:	dc1c      	bgt.n	80029d6 <__aeabi_f2d+0x8a>
 800299c:	230b      	movs	r3, #11
 800299e:	002a      	movs	r2, r5
 80029a0:	1a1b      	subs	r3, r3, r0
 80029a2:	40da      	lsrs	r2, r3
 80029a4:	0003      	movs	r3, r0
 80029a6:	3315      	adds	r3, #21
 80029a8:	409d      	lsls	r5, r3
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <__aeabi_f2d+0x9c>)
 80029ac:	0312      	lsls	r2, r2, #12
 80029ae:	1a1b      	subs	r3, r3, r0
 80029b0:	055b      	lsls	r3, r3, #21
 80029b2:	0b16      	lsrs	r6, r2, #12
 80029b4:	0d5b      	lsrs	r3, r3, #21
 80029b6:	e7d8      	b.n	800296a <__aeabi_f2d+0x1e>
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	d006      	beq.n	80029ca <__aeabi_f2d+0x7e>
 80029bc:	0b32      	lsrs	r2, r6, #12
 80029be:	2680      	movs	r6, #128	; 0x80
 80029c0:	0336      	lsls	r6, r6, #12
 80029c2:	076d      	lsls	r5, r5, #29
 80029c4:	4316      	orrs	r6, r2
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <__aeabi_f2d+0xa0>)
 80029c8:	e7cf      	b.n	800296a <__aeabi_f2d+0x1e>
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <__aeabi_f2d+0xa0>)
 80029cc:	2600      	movs	r6, #0
 80029ce:	e7cc      	b.n	800296a <__aeabi_f2d+0x1e>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2600      	movs	r6, #0
 80029d4:	e7c9      	b.n	800296a <__aeabi_f2d+0x1e>
 80029d6:	0003      	movs	r3, r0
 80029d8:	002a      	movs	r2, r5
 80029da:	3b0b      	subs	r3, #11
 80029dc:	409a      	lsls	r2, r3
 80029de:	2500      	movs	r5, #0
 80029e0:	e7e3      	b.n	80029aa <__aeabi_f2d+0x5e>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	800fffff 	.word	0x800fffff
 80029e8:	00000389 	.word	0x00000389
 80029ec:	000007ff 	.word	0x000007ff

080029f0 <__aeabi_d2f>:
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	004c      	lsls	r4, r1, #1
 80029f4:	0d64      	lsrs	r4, r4, #21
 80029f6:	030b      	lsls	r3, r1, #12
 80029f8:	1c62      	adds	r2, r4, #1
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	0f46      	lsrs	r6, r0, #29
 80029fe:	0552      	lsls	r2, r2, #21
 8002a00:	0fc9      	lsrs	r1, r1, #31
 8002a02:	431e      	orrs	r6, r3
 8002a04:	00c5      	lsls	r5, r0, #3
 8002a06:	0d52      	lsrs	r2, r2, #21
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	dd29      	ble.n	8002a60 <__aeabi_d2f+0x70>
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <__aeabi_d2f+0xfc>)
 8002a0e:	18e7      	adds	r7, r4, r3
 8002a10:	2ffe      	cmp	r7, #254	; 0xfe
 8002a12:	dc1c      	bgt.n	8002a4e <__aeabi_d2f+0x5e>
 8002a14:	2f00      	cmp	r7, #0
 8002a16:	dd3b      	ble.n	8002a90 <__aeabi_d2f+0xa0>
 8002a18:	0180      	lsls	r0, r0, #6
 8002a1a:	1e43      	subs	r3, r0, #1
 8002a1c:	4198      	sbcs	r0, r3
 8002a1e:	2207      	movs	r2, #7
 8002a20:	00f3      	lsls	r3, r6, #3
 8002a22:	0f6d      	lsrs	r5, r5, #29
 8002a24:	4303      	orrs	r3, r0
 8002a26:	432b      	orrs	r3, r5
 8002a28:	401a      	ands	r2, r3
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d004      	beq.n	8002a38 <__aeabi_d2f+0x48>
 8002a2e:	220f      	movs	r2, #15
 8002a30:	401a      	ands	r2, r3
 8002a32:	2a04      	cmp	r2, #4
 8002a34:	d000      	beq.n	8002a38 <__aeabi_d2f+0x48>
 8002a36:	3304      	adds	r3, #4
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	04d2      	lsls	r2, r2, #19
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	d024      	beq.n	8002a8a <__aeabi_d2f+0x9a>
 8002a40:	3701      	adds	r7, #1
 8002a42:	b2fa      	uxtb	r2, r7
 8002a44:	2fff      	cmp	r7, #255	; 0xff
 8002a46:	d002      	beq.n	8002a4e <__aeabi_d2f+0x5e>
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	0a58      	lsrs	r0, r3, #9
 8002a4c:	e001      	b.n	8002a52 <__aeabi_d2f+0x62>
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	2000      	movs	r0, #0
 8002a52:	0240      	lsls	r0, r0, #9
 8002a54:	05d2      	lsls	r2, r2, #23
 8002a56:	0a40      	lsrs	r0, r0, #9
 8002a58:	07c9      	lsls	r1, r1, #31
 8002a5a:	4310      	orrs	r0, r2
 8002a5c:	4308      	orrs	r0, r1
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a60:	4335      	orrs	r5, r6
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	d104      	bne.n	8002a70 <__aeabi_d2f+0x80>
 8002a66:	2d00      	cmp	r5, #0
 8002a68:	d10a      	bne.n	8002a80 <__aeabi_d2f+0x90>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e7f0      	b.n	8002a52 <__aeabi_d2f+0x62>
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	d0ec      	beq.n	8002a4e <__aeabi_d2f+0x5e>
 8002a74:	2080      	movs	r0, #128	; 0x80
 8002a76:	03c0      	lsls	r0, r0, #15
 8002a78:	4330      	orrs	r0, r6
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	e7e9      	b.n	8002a52 <__aeabi_d2f+0x62>
 8002a7e:	2400      	movs	r4, #0
 8002a80:	2300      	movs	r3, #0
 8002a82:	025b      	lsls	r3, r3, #9
 8002a84:	0a58      	lsrs	r0, r3, #9
 8002a86:	b2e2      	uxtb	r2, r4
 8002a88:	e7e3      	b.n	8002a52 <__aeabi_d2f+0x62>
 8002a8a:	08db      	lsrs	r3, r3, #3
 8002a8c:	003c      	movs	r4, r7
 8002a8e:	e7f8      	b.n	8002a82 <__aeabi_d2f+0x92>
 8002a90:	003b      	movs	r3, r7
 8002a92:	3317      	adds	r3, #23
 8002a94:	dbf3      	blt.n	8002a7e <__aeabi_d2f+0x8e>
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4333      	orrs	r3, r6
 8002a9c:	261e      	movs	r6, #30
 8002a9e:	1bf6      	subs	r6, r6, r7
 8002aa0:	2e1f      	cmp	r6, #31
 8002aa2:	dd14      	ble.n	8002ace <__aeabi_d2f+0xde>
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4252      	negs	r2, r2
 8002aa8:	1bd7      	subs	r7, r2, r7
 8002aaa:	001a      	movs	r2, r3
 8002aac:	40fa      	lsrs	r2, r7
 8002aae:	0017      	movs	r7, r2
 8002ab0:	2e20      	cmp	r6, #32
 8002ab2:	d004      	beq.n	8002abe <__aeabi_d2f+0xce>
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <__aeabi_d2f+0x100>)
 8002ab6:	4694      	mov	ip, r2
 8002ab8:	4464      	add	r4, ip
 8002aba:	40a3      	lsls	r3, r4
 8002abc:	431d      	orrs	r5, r3
 8002abe:	002b      	movs	r3, r5
 8002ac0:	1e5d      	subs	r5, r3, #1
 8002ac2:	41ab      	sbcs	r3, r5
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	433b      	orrs	r3, r7
 8002ac8:	401a      	ands	r2, r3
 8002aca:	2700      	movs	r7, #0
 8002acc:	e7ad      	b.n	8002a2a <__aeabi_d2f+0x3a>
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <__aeabi_d2f+0x104>)
 8002ad0:	0028      	movs	r0, r5
 8002ad2:	18a2      	adds	r2, r4, r2
 8002ad4:	4095      	lsls	r5, r2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	1e6c      	subs	r4, r5, #1
 8002ada:	41a5      	sbcs	r5, r4
 8002adc:	40f0      	lsrs	r0, r6
 8002ade:	2207      	movs	r2, #7
 8002ae0:	432b      	orrs	r3, r5
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2700      	movs	r7, #0
 8002ae8:	e79f      	b.n	8002a2a <__aeabi_d2f+0x3a>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	fffffc80 	.word	0xfffffc80
 8002af0:	fffffca2 	.word	0xfffffca2
 8002af4:	fffffc82 	.word	0xfffffc82

08002af8 <__clzsi2>:
 8002af8:	211c      	movs	r1, #28
 8002afa:	2301      	movs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	4298      	cmp	r0, r3
 8002b00:	d301      	bcc.n	8002b06 <__clzsi2+0xe>
 8002b02:	0c00      	lsrs	r0, r0, #16
 8002b04:	3910      	subs	r1, #16
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	d301      	bcc.n	8002b10 <__clzsi2+0x18>
 8002b0c:	0a00      	lsrs	r0, r0, #8
 8002b0e:	3908      	subs	r1, #8
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	4298      	cmp	r0, r3
 8002b14:	d301      	bcc.n	8002b1a <__clzsi2+0x22>
 8002b16:	0900      	lsrs	r0, r0, #4
 8002b18:	3904      	subs	r1, #4
 8002b1a:	a202      	add	r2, pc, #8	; (adr r2, 8002b24 <__clzsi2+0x2c>)
 8002b1c:	5c10      	ldrb	r0, [r2, r0]
 8002b1e:	1840      	adds	r0, r0, r1
 8002b20:	4770      	bx	lr
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	02020304 	.word	0x02020304
 8002b28:	01010101 	.word	0x01010101
	...

08002b34 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	000f      	movs	r7, r1
 8002b3a:	0016      	movs	r6, r2
 8002b3c:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002b3e:	9001      	str	r0, [sp, #4]
 8002b40:	f00a fe34 	bl	800d7ac <GetUart>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002b44:	2501      	movs	r5, #1
	if(GetUart(port) != NULL){
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d01c      	beq.n	8002b84 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002b4a:	9b01      	ldr	r3, [sp, #4]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <Send_BOS_Message+0x60>)
 8002b50:	5898      	ldr	r0, [r3, r2]
 8002b52:	0021      	movs	r1, r4
 8002b54:	f00a ffe4 	bl	800db20 <osSemaphoreWait>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d113      	bne.n	8002b84 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002b5c:	2e00      	cmp	r6, #0
 8002b5e:	d017      	beq.n	8002b90 <Send_BOS_Message+0x5c>
 8002b60:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002b62:	9801      	ldr	r0, [sp, #4]
 8002b64:	f00a fe22 	bl	800d7ac <GetUart>
 8002b68:	2201      	movs	r2, #1
 8002b6a:	0039      	movs	r1, r7
 8002b6c:	f00f fb64 	bl	8012238 <HAL_UART_Transmit_IT>
 8002b70:	0005      	movs	r5, r0
				buffer++;
 8002b72:	3701      	adds	r7, #1
				//Delay_us(500);
				Delay_ms(2);
 8002b74:	2002      	movs	r0, #2
 8002b76:	f00c ff05 	bl	800f984 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002b7a:	3401      	adds	r4, #1
 8002b7c:	b2e4      	uxtb	r4, r4
 8002b7e:	b2a3      	uxth	r3, r4
 8002b80:	42b3      	cmp	r3, r6
 8002b82:	d3ee      	bcc.n	8002b62 <Send_BOS_Message+0x2e>
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002b84:	200a      	movs	r0, #10
 8002b86:	f00c fefd 	bl	800f984 <HAL_Delay>
	return result;
}
 8002b8a:	0028      	movs	r0, r5
 8002b8c:	b003      	add	sp, #12
 8002b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef result =HAL_ERROR;
 8002b90:	2501      	movs	r5, #1
 8002b92:	e7f7      	b.n	8002b84 <Send_BOS_Message+0x50>
 8002b94:	20005b60 	.word	0x20005b60

08002b98 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <LoadROtopology+0x94>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <LoadROtopology+0x98>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d033      	beq.n	8002c10 <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002ba8:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002baa:	d039      	beq.n	8002c20 <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002bac:	4921      	ldr	r1, [pc, #132]	; (8002c34 <LoadROtopology+0x9c>)
 8002bae:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <LoadROtopology+0xa0>)
 8002bb2:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <LoadROtopology+0x9c>)
 8002bb6:	781e      	ldrb	r6, [r3, #0]
 8002bb8:	2e00      	cmp	r6, #0
 8002bba:	d035      	beq.n	8002c28 <LoadROtopology+0x90>
 8002bbc:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002bbe:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002bc0:	466b      	mov	r3, sp
 8002bc2:	1dd9      	adds	r1, r3, #7
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002bc8:	4d1c      	ldr	r5, [pc, #112]	; (8002c3c <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002bca:	4663      	mov	r3, ip
 8002bcc:	700b      	strb	r3, [r1, #0]
 8002bce:	780b      	ldrb	r3, [r1, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d815      	bhi.n	8002c02 <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002bd6:	1e63      	subs	r3, r4, #1
 8002bd8:	0098      	lsls	r0, r3, #2
 8002bda:	18c0      	adds	r0, r0, r3
 8002bdc:	0040      	lsls	r0, r0, #1
 8002bde:	18c0      	adds	r0, r0, r3
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <LoadROtopology+0x94>)
 8002be2:	18d7      	adds	r7, r2, r3
 8002be4:	780b      	ldrb	r3, [r1, #0]
 8002be6:	883f      	ldrh	r7, [r7, #0]
 8002be8:	181b      	adds	r3, r3, r0
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002bee:	3202      	adds	r2, #2
 8002bf0:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002bf2:	780b      	ldrb	r3, [r1, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	700b      	strb	r3, [r1, #0]
 8002bfa:	780b      	ldrb	r3, [r1, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d9ee      	bls.n	8002be0 <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002c02:	3401      	adds	r4, #1
 8002c04:	b2e4      	uxtb	r4, r4
 8002c06:	42b4      	cmp	r4, r6
 8002c08:	d9df      	bls.n	8002bca <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002c0a:	2000      	movs	r0, #0
}
 8002c0c:	b003      	add	sp, #12
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <LoadROtopology+0x9c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <LoadROtopology+0xa0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002c1c:	20fa      	movs	r0, #250	; 0xfa
 8002c1e:	e7f5      	b.n	8002c0c <LoadROtopology+0x74>
			N =1;
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <LoadROtopology+0x9c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	7011      	strb	r1, [r2, #0]
 8002c26:	e7c3      	b.n	8002bb0 <LoadROtopology+0x18>
	return result;
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e7ef      	b.n	8002c0c <LoadROtopology+0x74>
 8002c2c:	0801d800 	.word	0x0801d800
 8002c30:	0000ffff 	.word	0x0000ffff
 8002c34:	20000030 	.word	0x20000030
 8002c38:	20000b66 	.word	0x20000b66
 8002c3c:	20000614 	.word	0x20000614

08002c40 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <LoadEEportsDir+0x40>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002c46:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002c4c:	490d      	ldr	r1, [pc, #52]	; (8002c84 <LoadEEportsDir+0x44>)
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f008 fcb8 	bl	800b5c4 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002c54:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002c56:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002c58:	4f09      	ldr	r7, [pc, #36]	; (8002c80 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002c5a:	4e0a      	ldr	r6, [pc, #40]	; (8002c84 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002c5c:	3401      	adds	r4, #1
 8002c5e:	b2e4      	uxtb	r4, r4
 8002c60:	783b      	ldrb	r3, [r7, #0]
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	d30a      	bcc.n	8002c7c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002c66:	1e61      	subs	r1, r4, #1
 8002c68:	0049      	lsls	r1, r1, #1
 8002c6a:	1989      	adds	r1, r1, r6
 8002c6c:	1c60      	adds	r0, r4, #1
 8002c6e:	f008 fca9 	bl	800b5c4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002c72:	1ca3      	adds	r3, r4, #2
 8002c74:	2b1b      	cmp	r3, #27
 8002c76:	ddf1      	ble.n	8002c5c <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002c78:	250a      	movs	r5, #10
 8002c7a:	e7ef      	b.n	8002c5c <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c80:	20000030 	.word	0x20000030
 8002c84:	20005fa8 	.word	0x20005fa8

08002c88 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8a:	46de      	mov	lr, fp
 8002c8c:	4657      	mov	r7, sl
 8002c8e:	464e      	mov	r6, r9
 8002c90:	4645      	mov	r5, r8
 8002c92:	b5e0      	push	{r5, r6, r7, lr}
 8002c94:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002c96:	466b      	mov	r3, sp
 8002c98:	2200      	movs	r2, #0
 8002c9a:	80da      	strh	r2, [r3, #6]
 8002c9c:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002c9e:	2700      	movs	r7, #0
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <LoadEEalias+0x7c>)
 8002ca2:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ca4:	469b      	mov	fp, r3
 8002ca6:	e00c      	b.n	8002cc2 <LoadEEalias+0x3a>
 8002ca8:	464b      	mov	r3, r9
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	444b      	add	r3, r9
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	445b      	add	r3, fp
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002cb6:	3701      	adds	r7, #1
 8002cb8:	b2ff      	uxtb	r7, r7
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <LoadEEalias+0x80>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	42bb      	cmp	r3, r7
 8002cc0:	d317      	bcc.n	8002cf2 <LoadEEalias+0x6a>
 8002cc2:	00bd      	lsls	r5, r7, #2
 8002cc4:	19ed      	adds	r5, r5, r7
 8002cc6:	006d      	lsls	r5, r5, #1
 8002cc8:	4455      	add	r5, sl
 8002cca:	1d63      	adds	r3, r4, #5
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002cd0:	466b      	mov	r3, sp
 8002cd2:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002cd4:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002cd6:	0031      	movs	r1, r6
 8002cd8:	0020      	movs	r0, r4
 8002cda:	f008 fc73 	bl	800b5c4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002cde:	8833      	ldrh	r3, [r6, #0]
 8002ce0:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	702b      	strb	r3, [r5, #0]
 8002ce6:	3401      	adds	r4, #1
 8002ce8:	b2a4      	uxth	r4, r4
 8002cea:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002cec:	45a0      	cmp	r8, r4
 8002cee:	d1f2      	bne.n	8002cd6 <LoadEEalias+0x4e>
 8002cf0:	e7da      	b.n	8002ca8 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	b003      	add	sp, #12
 8002cf6:	bc3c      	pop	{r2, r3, r4, r5}
 8002cf8:	4690      	mov	r8, r2
 8002cfa:	4699      	mov	r9, r3
 8002cfc:	46a2      	mov	sl, r4
 8002cfe:	46ab      	mov	fp, r5
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000a58 	.word	0x20000a58
 8002d08:	20000030 	.word	0x20000030

08002d0c <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	46d6      	mov	lr, sl
 8002d10:	464f      	mov	r7, r9
 8002d12:	4646      	mov	r6, r8
 8002d14:	b5c0      	push	{r6, r7, lr}
 8002d16:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002d18:	466b      	mov	r3, sp
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <LoadEEgroup+0x9c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01d      	beq.n	8002d62 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002d26:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002d28:	4e20      	ldr	r6, [pc, #128]	; (8002dac <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002d2a:	4c1f      	ldr	r4, [pc, #124]	; (8002da8 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002d2c:	b2e9      	uxtb	r1, r5
 8002d2e:	0049      	lsls	r1, r1, #1
 8002d30:	1871      	adds	r1, r6, r1
 8002d32:	0028      	movs	r0, r5
 8002d34:	30cb      	adds	r0, #203	; 0xcb
 8002d36:	b280      	uxth	r0, r0
 8002d38:	f008 fc44 	bl	800b5c4 <EE_ReadVariable>
		add++;
 8002d3c:	3501      	adds	r5, #1
 8002d3e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002d40:	7822      	ldrb	r2, [r4, #0]
 8002d42:	b2eb      	uxtb	r3, r5
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f1      	bhi.n	8002d2c <LoadEEgroup+0x20>
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <LoadEEgroup+0xa4>)
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	002c      	movs	r4, r5
 8002d4e:	3499      	adds	r4, #153	; 0x99
 8002d50:	b2a4      	uxth	r4, r4
 8002d52:	35cb      	adds	r5, #203	; 0xcb
 8002d54:	b2ab      	uxth	r3, r5
 8002d56:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002d58:	466b      	mov	r3, sp
 8002d5a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	469a      	mov	sl, r3
 8002d60:	e009      	b.n	8002d76 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002d62:	2500      	movs	r5, #0
 8002d64:	e7f0      	b.n	8002d48 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002d66:	464b      	mov	r3, r9
 8002d68:	4652      	mov	r2, sl
 8002d6a:	725a      	strb	r2, [r3, #9]
 8002d6c:	230a      	movs	r3, #10
 8002d6e:	469c      	mov	ip, r3
 8002d70:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002d72:	4544      	cmp	r4, r8
 8002d74:	d010      	beq.n	8002d98 <LoadEEgroup+0x8c>
 8002d76:	1d67      	adds	r7, r4, #5
 8002d78:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002d7a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002d7c:	0031      	movs	r1, r6
 8002d7e:	0020      	movs	r0, r4
 8002d80:	f008 fc20 	bl	800b5c4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002d84:	8833      	ldrh	r3, [r6, #0]
 8002d86:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	702b      	strb	r3, [r5, #0]
 8002d8c:	3401      	adds	r4, #1
 8002d8e:	b2a4      	uxth	r4, r4
 8002d90:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002d92:	42bc      	cmp	r4, r7
 8002d94:	d1f2      	bne.n	8002d7c <LoadEEgroup+0x70>
 8002d96:	e7e6      	b.n	8002d66 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002d98:	2000      	movs	r0, #0
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bc1c      	pop	{r2, r3, r4}
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	46a2      	mov	sl, r4
 8002da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	20000030 	.word	0x20000030
 8002dac:	200009b4 	.word	0x200009b4
 8002db0:	20000950 	.word	0x20000950

08002db4 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002db8:	210e      	movs	r1, #14
 8002dba:	4469      	add	r1, sp
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	800b      	strh	r3, [r1, #0]
 8002dc0:	aa03      	add	r2, sp, #12
 8002dc2:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002dc4:	20e4      	movs	r0, #228	; 0xe4
 8002dc6:	f008 fbfd 	bl	800b5c4 <EE_ReadVariable>
	uint8_t direction =0;
 8002dca:	2600      	movs	r6, #0
	if(!status1){
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d102      	bne.n	8002dd6 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002dd0:	230e      	movs	r3, #14
 8002dd2:	446b      	add	r3, sp
 8002dd4:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002dd6:	210e      	movs	r1, #14
 8002dd8:	4469      	add	r1, sp
 8002dda:	20e5      	movs	r0, #229	; 0xe5
 8002ddc:	f008 fbf2 	bl	800b5c4 <EE_ReadVariable>
 8002de0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002de2:	a903      	add	r1, sp, #12
 8002de4:	20e6      	movs	r0, #230	; 0xe6
 8002de6:	f008 fbed 	bl	800b5c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002dea:	4304      	orrs	r4, r0
 8002dec:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002dee:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002df0:	2c00      	cmp	r4, #0
 8002df2:	d106      	bne.n	8002e02 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002df4:	230e      	movs	r3, #14
 8002df6:	446b      	add	r3, sp
 8002df8:	881d      	ldrh	r5, [r3, #0]
 8002dfa:	042d      	lsls	r5, r5, #16
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002e02:	210e      	movs	r1, #14
 8002e04:	4469      	add	r1, sp
 8002e06:	20e7      	movs	r0, #231	; 0xe7
 8002e08:	f008 fbdc 	bl	800b5c4 <EE_ReadVariable>
 8002e0c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002e0e:	a903      	add	r1, sp, #12
 8002e10:	20e8      	movs	r0, #232	; 0xe8
 8002e12:	f008 fbd7 	bl	800b5c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002e16:	4320      	orrs	r0, r4
 8002e18:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002e1a:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d106      	bne.n	8002e2e <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002e20:	230e      	movs	r3, #14
 8002e22:	446b      	add	r3, sp
 8002e24:	881c      	ldrh	r4, [r3, #0]
 8002e26:	0424      	lsls	r4, r4, #16
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002e2e:	210e      	movs	r1, #14
 8002e30:	4469      	add	r1, sp
 8002e32:	20e9      	movs	r0, #233	; 0xe9
 8002e34:	f008 fbc6 	bl	800b5c4 <EE_ReadVariable>
	if(!status1){
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d107      	bne.n	8002e4c <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002e3c:	230e      	movs	r3, #14
 8002e3e:	446b      	add	r3, sp
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	0a19      	lsrs	r1, r3, #8
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <LoadEEstreams+0x134>)
 8002e46:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002e48:	4a28      	ldr	r2, [pc, #160]	; (8002eec <LoadEEstreams+0x138>)
 8002e4a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002e4c:	210e      	movs	r1, #14
 8002e4e:	4469      	add	r1, sp
 8002e50:	20ea      	movs	r0, #234	; 0xea
 8002e52:	f008 fbb7 	bl	800b5c4 <EE_ReadVariable>
	if(!status1){
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d107      	bne.n	8002e6a <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002e5a:	230e      	movs	r3, #14
 8002e5c:	446b      	add	r3, sp
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	0a19      	lsrs	r1, r3, #8
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <LoadEEstreams+0x13c>)
 8002e64:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002e66:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <LoadEEstreams+0x140>)
 8002e68:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002e6a:	210e      	movs	r1, #14
 8002e6c:	4469      	add	r1, sp
 8002e6e:	20eb      	movs	r0, #235	; 0xeb
 8002e70:	f008 fba8 	bl	800b5c4 <EE_ReadVariable>
	if(!status1){
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d107      	bne.n	8002e88 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8002e78:	230e      	movs	r3, #14
 8002e7a:	446b      	add	r3, sp
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	0a19      	lsrs	r1, r3, #8
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <LoadEEstreams+0x144>)
 8002e82:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <LoadEEstreams+0x148>)
 8002e86:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <LoadEEstreams+0x134>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <LoadEEstreams+0xe4>
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <LoadEEstreams+0x138>)
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	2a00      	cmp	r2, #0
 8002e96:	d112      	bne.n	8002ebe <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <LoadEEstreams+0x13c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <LoadEEstreams+0xf4>
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <LoadEEstreams+0x140>)
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d111      	bne.n	8002ecc <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <LoadEEstreams+0x144>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <LoadEEstreams+0x104>
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <LoadEEstreams+0x148>)
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	2a00      	cmp	r2, #0
 8002eb6:	d110      	bne.n	8002eda <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8002eb8:	2000      	movs	r0, #0
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8002ebe:	9200      	str	r2, [sp, #0]
 8002ec0:	0022      	movs	r2, r4
 8002ec2:	0029      	movs	r1, r5
 8002ec4:	0030      	movs	r0, r6
 8002ec6:	f004 fc63 	bl	8007790 <SetupDMAStreams>
 8002eca:	e7e5      	b.n	8002e98 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8002ecc:	9200      	str	r2, [sp, #0]
 8002ece:	0022      	movs	r2, r4
 8002ed0:	0029      	movs	r1, r5
 8002ed2:	0030      	movs	r0, r6
 8002ed4:	f004 fc5c 	bl	8007790 <SetupDMAStreams>
 8002ed8:	e7e6      	b.n	8002ea8 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8002eda:	9200      	str	r2, [sp, #0]
 8002edc:	0022      	movs	r2, r4
 8002ede:	0029      	movs	r1, r5
 8002ee0:	0030      	movs	r0, r6
 8002ee2:	f004 fc55 	bl	8007790 <SetupDMAStreams>
 8002ee6:	e7e7      	b.n	8002eb8 <LoadEEstreams+0x104>
 8002ee8:	20000c22 	.word	0x20000c22
 8002eec:	2000094d 	.word	0x2000094d
 8002ef0:	20000c23 	.word	0x20000c23
 8002ef4:	2000094e 	.word	0x2000094e
 8002ef8:	20000c24 	.word	0x20000c24
 8002efc:	2000094f 	.word	0x2000094f

08002f00 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 8002f00:	b510      	push	{r4, lr}
 8002f02:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8002f04:	208a      	movs	r0, #138	; 0x8a
 8002f06:	466b      	mov	r3, sp
 8002f08:	1d99      	adds	r1, r3, #6
 8002f0a:	0040      	lsls	r0, r0, #1
 8002f0c:	f008 fb5a 	bl	800b5c4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d000      	beq.n	8002f16 <LoadEEparams+0x16>
 8002f14:	e075      	b.n	8003002 <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 8002f16:	466b      	mov	r3, sp
 8002f18:	3306      	adds	r3, #6
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4a55      	ldr	r2, [pc, #340]	; (8003074 <LoadEEparams+0x174>)
 8002f1e:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8002f24:	208e      	movs	r0, #142	; 0x8e
 8002f26:	466b      	mov	r3, sp
 8002f28:	1d99      	adds	r1, r3, #6
 8002f2a:	0040      	lsls	r0, r0, #1
 8002f2c:	f008 fb4a 	bl	800b5c4 <EE_ReadVariable>

	if(!status1){
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d000      	beq.n	8002f36 <LoadEEparams+0x36>
 8002f34:	e06c      	b.n	8003010 <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8002f36:	466b      	mov	r3, sp
 8002f38:	3306      	adds	r3, #6
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	4a4d      	ldr	r2, [pc, #308]	; (8003074 <LoadEEparams+0x174>)
 8002f3e:	0bd9      	lsrs	r1, r3, #15
 8002f40:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8002f46:	2016      	movs	r0, #22
 8002f48:	466b      	mov	r3, sp
 8002f4a:	1d99      	adds	r1, r3, #6
 8002f4c:	30ff      	adds	r0, #255	; 0xff
 8002f4e:	f008 fb39 	bl	800b5c4 <EE_ReadVariable>
	if(!status1)
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d163      	bne.n	800301e <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 8002f56:	466b      	mov	r3, sp
 8002f58:	88da      	ldrh	r2, [r3, #6]
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <LoadEEparams+0x178>)
 8002f5c:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8002f5e:	208b      	movs	r0, #139	; 0x8b
 8002f60:	466b      	mov	r3, sp
 8002f62:	1d99      	adds	r1, r3, #6
 8002f64:	0040      	lsls	r0, r0, #1
 8002f66:	f008 fb2d 	bl	800b5c4 <EE_ReadVariable>
	if(!status1)
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d15c      	bne.n	8003028 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 8002f6e:	466b      	mov	r3, sp
 8002f70:	88da      	ldrh	r2, [r3, #6]
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <LoadEEparams+0x178>)
 8002f74:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8002f76:	2018      	movs	r0, #24
 8002f78:	466b      	mov	r3, sp
 8002f7a:	1d99      	adds	r1, r3, #6
 8002f7c:	30ff      	adds	r0, #255	; 0xff
 8002f7e:	f008 fb21 	bl	800b5c4 <EE_ReadVariable>
	if(!status1){
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d155      	bne.n	8003032 <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8002f86:	466b      	mov	r3, sp
 8002f88:	3306      	adds	r3, #6
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <LoadEEparams+0x178>)
 8002f8e:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8002f94:	208c      	movs	r0, #140	; 0x8c
 8002f96:	466b      	mov	r3, sp
 8002f98:	1d99      	adds	r1, r3, #6
 8002f9a:	0040      	lsls	r0, r0, #1
 8002f9c:	f008 fb12 	bl	800b5c4 <EE_ReadVariable>
 8002fa0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8002fa2:	201a      	movs	r0, #26
 8002fa4:	a901      	add	r1, sp, #4
 8002fa6:	30ff      	adds	r0, #255	; 0xff
 8002fa8:	f008 fb0c 	bl	800b5c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fac:	4304      	orrs	r4, r0
 8002fae:	b2a4      	uxth	r4, r4
 8002fb0:	2c00      	cmp	r4, #0
 8002fb2:	d145      	bne.n	8003040 <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8002fb4:	ab01      	add	r3, sp, #4
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	466a      	mov	r2, sp
 8002fbc:	3206      	adds	r2, #6
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <LoadEEparams+0x178>)
 8002fc4:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8002fc6:	208d      	movs	r0, #141	; 0x8d
 8002fc8:	466b      	mov	r3, sp
 8002fca:	1d99      	adds	r1, r3, #6
 8002fcc:	0040      	lsls	r0, r0, #1
 8002fce:	f008 faf9 	bl	800b5c4 <EE_ReadVariable>
	if(!status1){
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d142      	bne.n	800305c <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 8002fd6:	466b      	mov	r3, sp
 8002fd8:	3306      	adds	r3, #6
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <LoadEEparams+0x178>)
 8002fde:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8002fe4:	201c      	movs	r0, #28
 8002fe6:	466b      	mov	r3, sp
 8002fe8:	1d99      	adds	r1, r3, #6
 8002fea:	30ff      	adds	r0, #255	; 0xff
 8002fec:	f008 faea 	bl	800b5c4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d039      	beq.n	8003068 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <LoadEEparams+0x17c>)
 8002ff6:	7e9a      	ldrb	r2, [r3, #26]
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <LoadEEparams+0x178>)
 8002ffa:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	b002      	add	sp, #8
 8003000:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <LoadEEparams+0x174>)
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <LoadEEparams+0x180>)
 8003006:	7811      	ldrb	r1, [r2, #0]
 8003008:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 800300a:	7852      	ldrb	r2, [r2, #1]
 800300c:	705a      	strb	r2, [r3, #1]
 800300e:	e789      	b.n	8002f24 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <LoadEEparams+0x174>)
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <LoadEEparams+0x180>)
 8003014:	7911      	ldrb	r1, [r2, #4]
 8003016:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003018:	88d2      	ldrh	r2, [r2, #6]
 800301a:	80da      	strh	r2, [r3, #6]
 800301c:	e793      	b.n	8002f46 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <LoadEEparams+0x17c>)
 8003020:	881a      	ldrh	r2, [r3, #0]
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <LoadEEparams+0x178>)
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	e79a      	b.n	8002f5e <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <LoadEEparams+0x17c>)
 800302a:	885a      	ldrh	r2, [r3, #2]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <LoadEEparams+0x178>)
 800302e:	805a      	strh	r2, [r3, #2]
 8003030:	e7a1      	b.n	8002f76 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <LoadEEparams+0x178>)
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <LoadEEparams+0x17c>)
 8003036:	7911      	ldrb	r1, [r2, #4]
 8003038:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800303a:	7952      	ldrb	r2, [r2, #5]
 800303c:	715a      	strb	r2, [r3, #5]
 800303e:	e7a9      	b.n	8002f94 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <LoadEEparams+0x184>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <LoadEEparams+0x178>)
 800304a:	22e1      	movs	r2, #225	; 0xe1
 800304c:	0252      	lsls	r2, r2, #9
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	e7b9      	b.n	8002fc6 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <LoadEEparams+0x17c>)
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <LoadEEparams+0x178>)
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	e7b4      	b.n	8002fc6 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <LoadEEparams+0x178>)
 800305e:	2218      	movs	r2, #24
 8003060:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003062:	2200      	movs	r2, #0
 8003064:	731a      	strb	r2, [r3, #12]
 8003066:	e7bd      	b.n	8002fe4 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 8003068:	466b      	mov	r3, sp
 800306a:	88da      	ldrh	r2, [r3, #6]
 800306c:	4b02      	ldr	r3, [pc, #8]	; (8003078 <LoadEEparams+0x178>)
 800306e:	769a      	strb	r2, [r3, #26]
 8003070:	e7c4      	b.n	8002ffc <LoadEEparams+0xfc>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20005a5c 	.word	0x20005a5c
 8003078:	20005adc 	.word	0x20005adc
 800307c:	20000014 	.word	0x20000014
 8003080:	2000000c 	.word	0x2000000c
 8003084:	200002b8 	.word	0x200002b8

08003088 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	46ce      	mov	lr, r9
 800308c:	4647      	mov	r7, r8
 800308e:	b580      	push	{r7, lr}
 8003090:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003092:	231e      	movs	r3, #30
 8003094:	446b      	add	r3, sp
 8003096:	2200      	movs	r2, #0
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	2501      	movs	r5, #1
 800309c:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800309e:	001e      	movs	r6, r3
 80030a0:	230f      	movs	r3, #15
 80030a2:	4698      	mov	r8, r3
 80030a4:	e004      	b.n	80030b0 <LoadEEbuttons+0x28>
 80030a6:	3404      	adds	r4, #4
 80030a8:	b2a4      	uxth	r4, r4
 80030aa:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80030ac:	2d05      	cmp	r5, #5
 80030ae:	d058      	beq.n	8003162 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80030b0:	0031      	movs	r1, r6
 80030b2:	0020      	movs	r0, r4
 80030b4:	f008 fa86 	bl	800b5c4 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d1f4      	bne.n	80030a6 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80030bc:	8831      	ldrh	r1, [r6, #0]
 80030be:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80030c0:	091a      	lsrs	r2, r3, #4
 80030c2:	42aa      	cmp	r2, r5
 80030c4:	d1ef      	bne.n	80030a6 <LoadEEbuttons+0x1e>
 80030c6:	4640      	mov	r0, r8
 80030c8:	4003      	ands	r3, r0
 80030ca:	d0ec      	beq.n	80030a6 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 80030cc:	00d0      	lsls	r0, r2, #3
 80030ce:	1882      	adds	r2, r0, r2
 80030d0:	4827      	ldr	r0, [pc, #156]	; (8003170 <LoadEEbuttons+0xe8>)
 80030d2:	4681      	mov	r9, r0
 80030d4:	4491      	add	r9, r2
 80030d6:	464a      	mov	r2, r9
 80030d8:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 80030da:	7211      	strb	r1, [r2, #8]
 80030dc:	00af      	lsls	r7, r5, #2
 80030de:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80030e0:	0038      	movs	r0, r7
 80030e2:	30e9      	adds	r0, #233	; 0xe9
 80030e4:	b280      	uxth	r0, r0
 80030e6:	0031      	movs	r1, r6
 80030e8:	f008 fa6c 	bl	800b5c4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80030ec:	8833      	ldrh	r3, [r6, #0]
 80030ee:	0a1a      	lsrs	r2, r3, #8
 80030f0:	4649      	mov	r1, r9
 80030f2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80030f4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80030f6:	0038      	movs	r0, r7
 80030f8:	30ea      	adds	r0, #234	; 0xea
 80030fa:	b280      	uxth	r0, r0
 80030fc:	0031      	movs	r1, r6
 80030fe:	f008 fa61 	bl	800b5c4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003102:	8833      	ldrh	r3, [r6, #0]
 8003104:	0a1a      	lsrs	r2, r3, #8
 8003106:	4649      	mov	r1, r9
 8003108:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800310a:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800310c:	37eb      	adds	r7, #235	; 0xeb
 800310e:	b2b8      	uxth	r0, r7
 8003110:	0031      	movs	r1, r6
 8003112:	f008 fa57 	bl	800b5c4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003116:	8833      	ldrh	r3, [r6, #0]
 8003118:	0a1a      	lsrs	r2, r3, #8
 800311a:	4649      	mov	r1, r9
 800311c:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800311e:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003120:	b2ef      	uxtb	r7, r5
 8003122:	7848      	ldrb	r0, [r1, #1]
 8003124:	0039      	movs	r1, r7
 8003126:	f008 fee7 	bl	800bef8 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800312a:	464b      	mov	r3, r9
 800312c:	7a19      	ldrb	r1, [r3, #8]
 800312e:	789b      	ldrb	r3, [r3, #2]
 8003130:	104a      	asrs	r2, r1, #1
 8003132:	2001      	movs	r0, #1
 8003134:	4002      	ands	r2, r0
 8003136:	4001      	ands	r1, r0
 8003138:	2000      	movs	r0, #0
 800313a:	9005      	str	r0, [sp, #20]
 800313c:	4648      	mov	r0, r9
 800313e:	79c0      	ldrb	r0, [r0, #7]
 8003140:	9004      	str	r0, [sp, #16]
 8003142:	4648      	mov	r0, r9
 8003144:	7980      	ldrb	r0, [r0, #6]
 8003146:	9003      	str	r0, [sp, #12]
 8003148:	4648      	mov	r0, r9
 800314a:	7940      	ldrb	r0, [r0, #5]
 800314c:	9002      	str	r0, [sp, #8]
 800314e:	4648      	mov	r0, r9
 8003150:	7900      	ldrb	r0, [r0, #4]
 8003152:	9001      	str	r0, [sp, #4]
 8003154:	4648      	mov	r0, r9
 8003156:	78c0      	ldrb	r0, [r0, #3]
 8003158:	9000      	str	r0, [sp, #0]
 800315a:	0038      	movs	r0, r7
 800315c:	f008 ffe4 	bl	800c128 <SetButtonEvents>
 8003160:	e7a1      	b.n	80030a6 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8003162:	2000      	movs	r0, #0
 8003164:	b009      	add	sp, #36	; 0x24
 8003166:	bc0c      	pop	{r2, r3}
 8003168:	4690      	mov	r8, r2
 800316a:	4699      	mov	r9, r3
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	200016a8 	.word	0x200016a8

08003174 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	46de      	mov	lr, fp
 8003178:	4657      	mov	r7, sl
 800317a:	464e      	mov	r6, r9
 800317c:	b5c0      	push	{r6, r7, lr}
 800317e:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003180:	2032      	movs	r0, #50	; 0x32
 8003182:	f00f fdc9 	bl	8012d18 <malloc>
 8003186:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003188:	d100      	bne.n	800318c <LoadROsnippets+0x18>
 800318a:	e071      	b.n	8003270 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <LoadROsnippets+0x100>)
 800318e:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8003190:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003192:	2bfe      	cmp	r3, #254	; 0xfe
 8003194:	d166      	bne.n	8003264 <LoadROsnippets+0xf0>
 8003196:	4e38      	ldr	r6, [pc, #224]	; (8003278 <LoadROsnippets+0x104>)
 8003198:	3b9a      	subs	r3, #154	; 0x9a
 800319a:	469b      	mov	fp, r3
 800319c:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800319e:	4d35      	ldr	r5, [pc, #212]	; (8003274 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80031a0:	1c7b      	adds	r3, r7, #1
 80031a2:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80031a4:	4b35      	ldr	r3, [pc, #212]	; (800327c <LoadROsnippets+0x108>)
 80031a6:	4699      	mov	r9, r3
 80031a8:	e023      	b.n	80031f2 <LoadROsnippets+0x7e>
		i =0;
 80031aa:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	3b01      	subs	r3, #1
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 80031b6:	3401      	adds	r4, #1
 80031b8:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 80031ba:	0020      	movs	r0, r4
 80031bc:	f00f fdac 	bl	8012d18 <malloc>
 80031c0:	4653      	mov	r3, sl
 80031c2:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d03f      	beq.n	8003248 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80031c8:	0022      	movs	r2, r4
 80031ca:	0039      	movs	r1, r7
 80031cc:	f00f fdd9 	bl	8012d82 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80031d0:	464b      	mov	r3, r9
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	464a      	mov	r2, r9
 80031d8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80031da:	0022      	movs	r2, r4
 80031dc:	2100      	movs	r1, #0
 80031de:	0038      	movs	r0, r7
 80031e0:	f00f fdd8 	bl	8012d94 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80031e4:	9b00      	ldr	r3, [sp, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2bfe      	cmp	r3, #254	; 0xfe
 80031ea:	d137      	bne.n	800325c <LoadROsnippets+0xe8>
 80031ec:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80031ee:	455e      	cmp	r6, fp
 80031f0:	d034      	beq.n	800325c <LoadROsnippets+0xe8>
 80031f2:	0028      	movs	r0, r5
 80031f4:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 80031f6:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80031f8:	1b79      	subs	r1, r7, r5
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	54ca      	strb	r2, [r1, r3]
 80031fe:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003200:	4283      	cmp	r3, r0
 8003202:	d1fa      	bne.n	80031fa <LoadROsnippets+0x86>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003204:	46b2      	mov	sl, r6
 8003206:	2214      	movs	r2, #20
 8003208:	9901      	ldr	r1, [sp, #4]
 800320a:	0030      	movs	r0, r6
 800320c:	f00f fdb9 	bl	8012d82 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003210:	2214      	movs	r2, #20
 8003212:	2100      	movs	r1, #0
 8003214:	0038      	movs	r0, r7
 8003216:	f00f fdbd 	bl	8012d94 <memset>
		currentAdd=currentAdd+20;
 800321a:	3528      	adds	r5, #40	; 0x28
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800321c:	9500      	str	r5, [sp, #0]
 800321e:	782a      	ldrb	r2, [r5, #0]
 8003220:	1c93      	adds	r3, r2, #2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d9c0      	bls.n	80031aa <LoadROsnippets+0x36>
 8003228:	0039      	movs	r1, r7
		i =0;
 800322a:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 800322c:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 800322e:	3501      	adds	r5, #1
			++i;
 8003230:	3401      	adds	r4, #1
 8003232:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003234:	9500      	str	r5, [sp, #0]
 8003236:	782a      	ldrb	r2, [r5, #0]
 8003238:	1c93      	adds	r3, r2, #2
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d9b5      	bls.n	80031ac <LoadROsnippets+0x38>
 8003240:	3101      	adds	r1, #1
 8003242:	2c32      	cmp	r4, #50	; 0x32
 8003244:	d1f2      	bne.n	800322c <LoadROsnippets+0xb8>
 8003246:	e7b1      	b.n	80031ac <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003248:	2214      	movs	r2, #20
 800324a:	2100      	movs	r1, #0
 800324c:	4650      	mov	r0, sl
 800324e:	f00f fda1 	bl	8012d94 <memset>
			free(snipBuffer);
 8003252:	0038      	movs	r0, r7
 8003254:	f00f fd6a 	bl	8012d2c <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003258:	200e      	movs	r0, #14
 800325a:	e003      	b.n	8003264 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 800325c:	0038      	movs	r0, r7
 800325e:	f00f fd65 	bl	8012d2c <free>
	return BOS_OK;
 8003262:	2000      	movs	r0, #0
}
 8003264:	b002      	add	sp, #8
 8003266:	bc1c      	pop	{r2, r3, r4}
 8003268:	4691      	mov	r9, r2
 800326a:	469a      	mov	sl, r3
 800326c:	46a3      	mov	fp, r4
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003270:	20fb      	movs	r0, #251	; 0xfb
 8003272:	e7f7      	b.n	8003264 <LoadROsnippets+0xf0>
 8003274:	0801dc00 	.word	0x0801dc00
 8003278:	20005af8 	.word	0x20005af8
 800327c:	20000cf7 	.word	0x20000cf7

08003280 <LoadEEvars>:
void LoadEEvars(void){
 8003280:	b510      	push	{r4, lr}
	LoadROtopology();
 8003282:	f7ff fc89 	bl	8002b98 <LoadROtopology>
	LoadEEportsDir();
 8003286:	f7ff fcdb 	bl	8002c40 <LoadEEportsDir>
	LoadEEalias();
 800328a:	f7ff fcfd 	bl	8002c88 <LoadEEalias>
	LoadEEgroup();
 800328e:	f7ff fd3d 	bl	8002d0c <LoadEEgroup>
	LoadEEstreams();
 8003292:	f7ff fd8f 	bl	8002db4 <LoadEEstreams>
	LoadEEparams();
 8003296:	f7ff fe33 	bl	8002f00 <LoadEEparams>
	LoadEEbuttons();
 800329a:	f7ff fef5 	bl	8003088 <LoadEEbuttons>
	LoadROsnippets();
 800329e:	f7ff ff69 	bl	8003174 <LoadROsnippets>
}
 80032a2:	bd10      	pop	{r4, pc}

080032a4 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a6:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <SaveEEportsDir+0x4c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01a      	beq.n	80032e6 <SaveEEportsDir+0x42>
 80032b0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80032b6:	4e0f      	ldr	r6, [pc, #60]	; (80032f4 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 80032b8:	4f0d      	ldr	r7, [pc, #52]	; (80032f0 <SaveEEportsDir+0x4c>)
 80032ba:	e008      	b.n	80032ce <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80032bc:	1c60      	adds	r0, r4, #1
 80032be:	f008 f9b1 	bl	800b624 <EE_WriteVariable>
 80032c2:	e00a      	b.n	80032da <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 80032c4:	3401      	adds	r4, #1
 80032c6:	b2e4      	uxtb	r4, r4
 80032c8:	783b      	ldrb	r3, [r7, #0]
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d30d      	bcc.n	80032ea <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 80032ce:	0025      	movs	r5, r4
 80032d0:	1e63      	subs	r3, r4, #1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	5b99      	ldrh	r1, [r3, r6]
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d1f0      	bne.n	80032bc <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80032da:	3502      	adds	r5, #2
 80032dc:	2d1b      	cmp	r5, #27
 80032de:	ddf1      	ble.n	80032c4 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80032e0:	230a      	movs	r3, #10
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	e7ee      	b.n	80032c4 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80032ea:	9801      	ldr	r0, [sp, #4]
 80032ec:	b003      	add	sp, #12
 80032ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f0:	20000030 	.word	0x20000030
 80032f4:	20005fa8 	.word	0x20005fa8

080032f8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	46d6      	mov	lr, sl
 80032fc:	464f      	mov	r7, r9
 80032fe:	4646      	mov	r6, r8
 8003300:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003302:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003304:	2300      	movs	r3, #0
 8003306:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <SaveEEalias+0x7c>)
 800330a:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <SaveEEalias+0x80>)
 800330e:	4699      	mov	r9, r3
 8003310:	e005      	b.n	800331e <SaveEEalias+0x26>
 8003312:	3601      	adds	r6, #1
 8003314:	b2f6      	uxtb	r6, r6
 8003316:	464b      	mov	r3, r9
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	42b3      	cmp	r3, r6
 800331c:	d324      	bcc.n	8003368 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 800331e:	00b3      	lsls	r3, r6, #2
 8003320:	199b      	adds	r3, r3, r6
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4652      	mov	r2, sl
 8003326:	5c9b      	ldrb	r3, [r3, r2]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f2      	beq.n	8003312 <SaveEEalias+0x1a>
 800332c:	00b5      	lsls	r5, r6, #2
 800332e:	19ad      	adds	r5, r5, r6
 8003330:	006d      	lsls	r5, r5, #1
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <SaveEEalias+0x7c>)
 8003334:	469c      	mov	ip, r3
 8003336:	4465      	add	r5, ip
 8003338:	4644      	mov	r4, r8
 800333a:	341c      	adds	r4, #28
 800333c:	b2a4      	uxth	r4, r4
 800333e:	4647      	mov	r7, r8
 8003340:	3721      	adds	r7, #33	; 0x21
 8003342:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003344:	782b      	ldrb	r3, [r5, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	7869      	ldrb	r1, [r5, #1]
 800334a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800334c:	b289      	uxth	r1, r1
 800334e:	0020      	movs	r0, r4
 8003350:	f008 f968 	bl	800b624 <EE_WriteVariable>
 8003354:	3502      	adds	r5, #2
 8003356:	3401      	adds	r4, #1
 8003358:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800335a:	42bc      	cmp	r4, r7
 800335c:	d1f2      	bne.n	8003344 <SaveEEalias+0x4c>
 800335e:	4643      	mov	r3, r8
 8003360:	3305      	adds	r3, #5
 8003362:	b29b      	uxth	r3, r3
 8003364:	4698      	mov	r8, r3
 8003366:	e7d4      	b.n	8003312 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 8003368:	2000      	movs	r0, #0
 800336a:	bc1c      	pop	{r2, r3, r4}
 800336c:	4690      	mov	r8, r2
 800336e:	4699      	mov	r9, r3
 8003370:	46a2      	mov	sl, r4
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	20000a58 	.word	0x20000a58
 8003378:	20000030 	.word	0x20000030

0800337c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	46de      	mov	lr, fp
 8003380:	4657      	mov	r7, sl
 8003382:	464e      	mov	r6, r9
 8003384:	4645      	mov	r5, r8
 8003386:	b5e0      	push	{r5, r6, r7, lr}
 8003388:	000f      	movs	r7, r1
 800338a:	0016      	movs	r6, r2
 800338c:	4699      	mov	r9, r3
 800338e:	ab0a      	add	r3, sp, #40	; 0x28
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	469b      	mov	fp, r3
 8003394:	ab0b      	add	r3, sp, #44	; 0x2c
 8003396:	781d      	ldrb	r5, [r3, #0]
 8003398:	ab0c      	add	r3, sp, #48	; 0x30
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	469a      	mov	sl, r3
 800339e:	ab0d      	add	r3, sp, #52	; 0x34
 80033a0:	781c      	ldrb	r4, [r3, #0]
 80033a2:	ab0e      	add	r3, sp, #56	; 0x38
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80033a8:	b281      	uxth	r1, r0
 80033aa:	20e4      	movs	r0, #228	; 0xe4
 80033ac:	f008 f93a 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80033b0:	0a39      	lsrs	r1, r7, #8
 80033b2:	b289      	uxth	r1, r1
 80033b4:	20e5      	movs	r0, #229	; 0xe5
 80033b6:	f008 f935 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80033ba:	b2b9      	uxth	r1, r7
 80033bc:	20e6      	movs	r0, #230	; 0xe6
 80033be:	f008 f931 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80033c2:	0a31      	lsrs	r1, r6, #8
 80033c4:	b289      	uxth	r1, r1
 80033c6:	20e7      	movs	r0, #231	; 0xe7
 80033c8:	f008 f92c 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80033cc:	b2b1      	uxth	r1, r6
 80033ce:	20e8      	movs	r0, #232	; 0xe8
 80033d0:	f008 f928 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80033d4:	464b      	mov	r3, r9
 80033d6:	0219      	lsls	r1, r3, #8
 80033d8:	4459      	add	r1, fp
 80033da:	b289      	uxth	r1, r1
 80033dc:	20e9      	movs	r0, #233	; 0xe9
 80033de:	f008 f921 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80033e2:	022d      	lsls	r5, r5, #8
 80033e4:	4455      	add	r5, sl
 80033e6:	b2a9      	uxth	r1, r5
 80033e8:	20ea      	movs	r0, #234	; 0xea
 80033ea:	f008 f91b 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80033ee:	0224      	lsls	r4, r4, #8
 80033f0:	4444      	add	r4, r8
 80033f2:	b2a1      	uxth	r1, r4
 80033f4:	20eb      	movs	r0, #235	; 0xeb
 80033f6:	f008 f915 	bl	800b624 <EE_WriteVariable>
	
	return result;
}
 80033fa:	2000      	movs	r0, #0
 80033fc:	bc3c      	pop	{r2, r3, r4, r5}
 80033fe:	4690      	mov	r8, r2
 8003400:	4699      	mov	r9, r3
 8003402:	46a2      	mov	sl, r4
 8003404:	46ab      	mov	fp, r5
 8003406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003408 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003408:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 800340a:	4c1f      	ldr	r4, [pc, #124]	; (8003488 <SaveEEparams+0x80>)
 800340c:	7863      	ldrb	r3, [r4, #1]
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	7821      	ldrb	r1, [r4, #0]
 8003412:	4319      	orrs	r1, r3
 8003414:	208a      	movs	r0, #138	; 0x8a
 8003416:	0040      	lsls	r0, r0, #1
 8003418:	f008 f904 	bl	800b624 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 800341c:	7921      	ldrb	r1, [r4, #4]
 800341e:	03c9      	lsls	r1, r1, #15
 8003420:	88e3      	ldrh	r3, [r4, #6]
 8003422:	4319      	orrs	r1, r3
 8003424:	b289      	uxth	r1, r1
 8003426:	208e      	movs	r0, #142	; 0x8e
 8003428:	0040      	lsls	r0, r0, #1
 800342a:	f008 f8fb 	bl	800b624 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800342e:	4c17      	ldr	r4, [pc, #92]	; (800348c <SaveEEparams+0x84>)
 8003430:	8821      	ldrh	r1, [r4, #0]
 8003432:	2016      	movs	r0, #22
 8003434:	30ff      	adds	r0, #255	; 0xff
 8003436:	f008 f8f5 	bl	800b624 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800343a:	8861      	ldrh	r1, [r4, #2]
 800343c:	208b      	movs	r0, #139	; 0x8b
 800343e:	0040      	lsls	r0, r0, #1
 8003440:	f008 f8f0 	bl	800b624 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003444:	7963      	ldrb	r3, [r4, #5]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	7b21      	ldrb	r1, [r4, #12]
 800344a:	4319      	orrs	r1, r3
 800344c:	2018      	movs	r0, #24
 800344e:	30ff      	adds	r0, #255	; 0xff
 8003450:	f008 f8e8 	bl	800b624 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003454:	8921      	ldrh	r1, [r4, #8]
 8003456:	208c      	movs	r0, #140	; 0x8c
 8003458:	0040      	lsls	r0, r0, #1
 800345a:	f008 f8e3 	bl	800b624 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800345e:	8961      	ldrh	r1, [r4, #10]
 8003460:	201a      	movs	r0, #26
 8003462:	30ff      	adds	r0, #255	; 0xff
 8003464:	f008 f8de 	bl	800b624 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003468:	7b63      	ldrb	r3, [r4, #13]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	7921      	ldrb	r1, [r4, #4]
 800346e:	4319      	orrs	r1, r3
 8003470:	208d      	movs	r0, #141	; 0x8d
 8003472:	0040      	lsls	r0, r0, #1
 8003474:	f008 f8d6 	bl	800b624 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003478:	7ea1      	ldrb	r1, [r4, #26]
 800347a:	201c      	movs	r0, #28
 800347c:	30ff      	adds	r0, #255	; 0xff
 800347e:	f008 f8d1 	bl	800b624 <EE_WriteVariable>
	
	return result;
}
 8003482:	2000      	movs	r0, #0
 8003484:	bd10      	pop	{r4, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	20005a5c 	.word	0x20005a5c
 800348c:	20005adc 	.word	0x20005adc

08003490 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003494:	2234      	movs	r2, #52	; 0x34
 8003496:	2100      	movs	r1, #0
 8003498:	4813      	ldr	r0, [pc, #76]	; (80034e8 <ClearEEportsDir+0x58>)
 800349a:	f00f fc7b 	bl	8012d94 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <ClearEEportsDir+0x5c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01a      	beq.n	80034dc <ClearEEportsDir+0x4c>
 80034a6:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80034ac:	4e0e      	ldr	r6, [pc, #56]	; (80034e8 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80034ae:	4f0f      	ldr	r7, [pc, #60]	; (80034ec <ClearEEportsDir+0x5c>)
 80034b0:	e008      	b.n	80034c4 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034b2:	1c60      	adds	r0, r4, #1
 80034b4:	f008 f8b6 	bl	800b624 <EE_WriteVariable>
 80034b8:	e00a      	b.n	80034d0 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80034ba:	3401      	adds	r4, #1
 80034bc:	b2e4      	uxtb	r4, r4
 80034be:	783b      	ldrb	r3, [r7, #0]
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	d30d      	bcc.n	80034e0 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 80034c4:	0025      	movs	r5, r4
 80034c6:	1e63      	subs	r3, r4, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	5b99      	ldrh	r1, [r3, r6]
 80034cc:	2900      	cmp	r1, #0
 80034ce:	d1f0      	bne.n	80034b2 <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80034d0:	3502      	adds	r5, #2
 80034d2:	2d1b      	cmp	r5, #27
 80034d4:	ddf1      	ble.n	80034ba <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 80034d6:	230a      	movs	r3, #10
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	e7ee      	b.n	80034ba <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80034e0:	9801      	ldr	r0, [sp, #4]
 80034e2:	b003      	add	sp, #12
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20005fa8 	.word	0x20005fa8
 80034ec:	20000030 	.word	0x20000030

080034f0 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80034f0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <EE_FormatForFactoryReset+0x1c>)
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <EE_FormatForFactoryReset+0x20>)
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d006      	beq.n	800350a <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 80034fc:	f008 f93a 	bl	800b774 <EE_Format>
 8003500:	2800      	cmp	r0, #0
 8003502:	d102      	bne.n	800350a <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <EE_FormatForFactoryReset+0x20>)
 8003506:	4a01      	ldr	r2, [pc, #4]	; (800350c <EE_FormatForFactoryReset+0x1c>)
 8003508:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 800350a:	bd10      	pop	{r4, pc}
 800350c:	beefdead 	.word	0xbeefdead
 8003510:	20007ff0 	.word	0x20007ff0

08003514 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003518:	2512      	movs	r5, #18
 800351a:	446d      	add	r5, sp
 800351c:	ab04      	add	r3, sp, #16
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	ab07      	add	r3, sp, #28
 8003522:	002a      	movs	r2, r5
 8003524:	a908      	add	r1, sp, #32
 8003526:	2001      	movs	r0, #1
 8003528:	f008 fbb2 	bl	800bc90 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800352c:	ac03      	add	r4, sp, #12
 800352e:	9400      	str	r4, [sp, #0]
 8003530:	ab05      	add	r3, sp, #20
 8003532:	220e      	movs	r2, #14
 8003534:	446a      	add	r2, sp
 8003536:	a906      	add	r1, sp, #24
 8003538:	2002      	movs	r0, #2
 800353a:	f008 fba9 	bl	800bc90 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2600      	movs	r6, #0
 8003544:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003546:	882b      	ldrh	r3, [r5, #0]
 8003548:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800354a:	a909      	add	r1, sp, #36	; 0x24
 800354c:	9808      	ldr	r0, [sp, #32]
 800354e:	f00d fd05 	bl	8010f5c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003552:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003554:	2302      	movs	r3, #2
 8003556:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003558:	8823      	ldrh	r3, [r4, #0]
 800355a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800355c:	a909      	add	r1, sp, #36	; 0x24
 800355e:	9805      	ldr	r0, [sp, #20]
 8003560:	f00d fcfc 	bl	8010f5c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003564:	8829      	ldrh	r1, [r5, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	9808      	ldr	r0, [sp, #32]
 800356a:	f00d fe6b 	bl	8011244 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800356e:	2005      	movs	r0, #5
 8003570:	f009 fff0 	bl	800d554 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003574:	8821      	ldrh	r1, [r4, #0]
 8003576:	9805      	ldr	r0, [sp, #20]
 8003578:	f00d fe5e 	bl	8011238 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800357c:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800357e:	2800      	cmp	r0, #0
 8003580:	d002      	beq.n	8003588 <IsLowerCLIbaud+0x74>
}
 8003582:	0018      	movs	r0, r3
 8003584:	b00e      	add	sp, #56	; 0x38
 8003586:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003588:	3312      	adds	r3, #18
 800358a:	446b      	add	r3, sp
 800358c:	8819      	ldrh	r1, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	9808      	ldr	r0, [sp, #32]
 8003592:	f00d fe57 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003596:	2005      	movs	r0, #5
 8003598:	f009 ffdc 	bl	800d554 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800359c:	ab03      	add	r3, sp, #12
 800359e:	8819      	ldrh	r1, [r3, #0]
 80035a0:	9805      	ldr	r0, [sp, #20]
 80035a2:	f00d fe49 	bl	8011238 <HAL_GPIO_ReadPin>
 80035a6:	3801      	subs	r0, #1
 80035a8:	4243      	negs	r3, r0
 80035aa:	4143      	adcs	r3, r0
			return 1;
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e7e8      	b.n	8003582 <IsLowerCLIbaud+0x6e>

080035b0 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80035b0:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <IsModuleParameter+0x14>)
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	f7fc fda5 	bl	8000104 <strcmp>
 80035ba:	4243      	negs	r3, r0
 80035bc:	4158      	adcs	r0, r3
 80035be:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 80035c0:	bd10      	pop	{r4, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	20000098 	.word	0x20000098

080035c8 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 80035cc:	491b      	ldr	r1, [pc, #108]	; (800363c <IsMathOperator+0x74>)
 80035ce:	f7fc fd99 	bl	8000104 <strcmp>
 80035d2:	0006      	movs	r6, r0
 80035d4:	2506      	movs	r5, #6
 80035d6:	2e00      	cmp	r6, #0
 80035d8:	d023      	beq.n	8003622 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80035da:	4919      	ldr	r1, [pc, #100]	; (8003640 <IsMathOperator+0x78>)
 80035dc:	0020      	movs	r0, r4
 80035de:	f7fc fd91 	bl	8000104 <strcmp>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d01f      	beq.n	8003626 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80035e6:	4917      	ldr	r1, [pc, #92]	; (8003644 <IsMathOperator+0x7c>)
 80035e8:	0020      	movs	r0, r4
 80035ea:	f7fc fd8b 	bl	8000104 <strcmp>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d01b      	beq.n	800362a <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80035f2:	4915      	ldr	r1, [pc, #84]	; (8003648 <IsMathOperator+0x80>)
 80035f4:	0020      	movs	r0, r4
 80035f6:	f7fc fd85 	bl	8000104 <strcmp>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d017      	beq.n	800362e <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80035fe:	4913      	ldr	r1, [pc, #76]	; (800364c <IsMathOperator+0x84>)
 8003600:	0020      	movs	r0, r4
 8003602:	f7fc fd7f 	bl	8000104 <strcmp>
 8003606:	2800      	cmp	r0, #0
 8003608:	d013      	beq.n	8003632 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800360a:	4911      	ldr	r1, [pc, #68]	; (8003650 <IsMathOperator+0x88>)
 800360c:	0020      	movs	r0, r4
 800360e:	f7fc fd79 	bl	8000104 <strcmp>
 8003612:	2800      	cmp	r0, #0
 8003614:	d00f      	beq.n	8003636 <IsMathOperator+0x6e>
 8003616:	3d01      	subs	r5, #1
 8003618:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 800361a:	2d00      	cmp	r5, #0
 800361c:	d1db      	bne.n	80035d6 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800361e:	2000      	movs	r0, #0
}
 8003620:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003622:	2001      	movs	r0, #1
 8003624:	e7fc      	b.n	8003620 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003626:	2002      	movs	r0, #2
 8003628:	e7fa      	b.n	8003620 <IsMathOperator+0x58>
			return MATH_SMALLER;
 800362a:	2003      	movs	r0, #3
 800362c:	e7f8      	b.n	8003620 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 800362e:	2004      	movs	r0, #4
 8003630:	e7f6      	b.n	8003620 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003632:	2005      	movs	r0, #5
 8003634:	e7f4      	b.n	8003620 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003636:	2006      	movs	r0, #6
 8003638:	e7f2      	b.n	8003620 <IsMathOperator+0x58>
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	08016a68 	.word	0x08016a68
 8003640:	08016a6c 	.word	0x08016a6c
 8003644:	08016a70 	.word	0x08016a70
 8003648:	08016a74 	.word	0x08016a74
 800364c:	08016a78 	.word	0x08016a78
 8003650:	08016a7c 	.word	0x08016a7c

08003654 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003654:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003656:	f009 fe35 	bl	800d2c4 <RTC_Init>
	GetTimeDate();
 800365a:	f009 fed3 	bl	800d404 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800365e:	f008 f8ed 	bl	800b83c <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003662:	f008 fadf 	bl	800bc24 <GPIO_Init>
	DMA_Init();
 8003666:	f007 f9bd 	bl	800a9e4 <DMA_Init>
	TIM_USEC_Init();
 800366a:	f009 feff 	bl	800d46c <TIM_USEC_Init>
	CRC_Init();
 800366e:	f007 fec7 	bl	800b400 <CRC_Init>
	TIM_MSEC_Init();
 8003672:	f009 ff2d 	bl	800d4d0 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003676:	f008 fb47 	bl	800bd08 <IsFactoryReset>
 800367a:	2800      	cmp	r0, #0
 800367c:	d14c      	bne.n	8003718 <BOS_Init+0xc4>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800367e:	f7ff ff49 	bl	8003514 <IsLowerCLIbaud>
 8003682:	2800      	cmp	r0, #0
 8003684:	d053      	beq.n	800372e <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <BOS_Init+0x10c>)
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800368c:	2032      	movs	r0, #50	; 0x32
 800368e:	f009 ff61 	bl	800d554 <StartMilliDelay>
		Module_Peripheral_Init();
 8003692:	f006 fbf9 	bl	8009e88 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003696:	4c33      	ldr	r4, [pc, #204]	; (8003764 <BOS_Init+0x110>)
 8003698:	21e1      	movs	r1, #225	; 0xe1
 800369a:	0249      	lsls	r1, r1, #9
 800369c:	60a1      	str	r1, [r4, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
			UpdateBaudrate(port,BOS.clibaudrate);
 800369e:	2001      	movs	r0, #1
 80036a0:	f00a f8e2 	bl	800d868 <UpdateBaudrate>
 80036a4:	68a1      	ldr	r1, [r4, #8]
 80036a6:	2002      	movs	r0, #2
 80036a8:	f00a f8de 	bl	800d868 <UpdateBaudrate>
 80036ac:	68a1      	ldr	r1, [r4, #8]
 80036ae:	2003      	movs	r0, #3
 80036b0:	f00a f8da 	bl	800d868 <UpdateBaudrate>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 80036b4:	f7ff fde4 	bl	8003280 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 80036b8:	f00a f968 	bl	800d98c <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 80036bc:	f007 fe22 	bl	800b304 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <BOS_Init+0x114>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d038      	beq.n	800373a <BOS_Init+0xe6>
		IND_ON();
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 80036c8:	2580      	movs	r5, #128	; 0x80
 80036ca:	012d      	lsls	r5, r5, #4
 80036cc:	2490      	movs	r4, #144	; 0x90
 80036ce:	05e4      	lsls	r4, r4, #23
 80036d0:	2201      	movs	r2, #1
 80036d2:	0029      	movs	r1, r5
 80036d4:	0020      	movs	r0, r4
 80036d6:	f00d fdb5 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80036da:	20fa      	movs	r0, #250	; 0xfa
 80036dc:	0040      	lsls	r0, r0, #1
 80036de:	f009 ff39 	bl	800d554 <StartMilliDelay>
		IND_OFF();
 80036e2:	2200      	movs	r2, #0
 80036e4:	0029      	movs	r1, r5
 80036e6:	0020      	movs	r0, r4
 80036e8:	f00d fdac 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80036ec:	2064      	movs	r0, #100	; 0x64
 80036ee:	f009 ff31 	bl	800d554 <StartMilliDelay>
		IND_ON();
 80036f2:	2201      	movs	r2, #1
 80036f4:	0029      	movs	r1, r5
 80036f6:	0020      	movs	r0, r4
 80036f8:	f00d fda4 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80036fc:	2064      	movs	r0, #100	; 0x64
 80036fe:	f009 ff29 	bl	800d554 <StartMilliDelay>
		IND_OFF();
 8003702:	2200      	movs	r2, #0
 8003704:	0029      	movs	r1, r5
 8003706:	0020      	movs	r0, r4
 8003708:	f00d fd9c 	bl	8011244 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 800370c:	f003 fd06 	bl	800711c <ResetUartORE>
	
	BOS_initialized =1;
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <BOS_Init+0x118>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}
		EE_FormatForFactoryReset();
 8003718:	f7ff feea 	bl	80034f0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800371c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <BOS_Init+0x11c>)
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <BOS_Init+0x120>)
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	e7fd      	b.n	800372a <BOS_Init+0xd6>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800372e:	2032      	movs	r0, #50	; 0x32
 8003730:	f009 ff10 	bl	800d554 <StartMilliDelay>
		Module_Peripheral_Init();
 8003734:	f006 fba8 	bl	8009e88 <Module_Peripheral_Init>
 8003738:	e7bc      	b.n	80036b4 <BOS_Init+0x60>
		IND_ON();
 800373a:	2580      	movs	r5, #128	; 0x80
 800373c:	012d      	lsls	r5, r5, #4
 800373e:	2490      	movs	r4, #144	; 0x90
 8003740:	05e4      	lsls	r4, r4, #23
 8003742:	2201      	movs	r2, #1
 8003744:	0029      	movs	r1, r5
 8003746:	0020      	movs	r0, r4
 8003748:	f00d fd7c 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800374c:	20fa      	movs	r0, #250	; 0xfa
 800374e:	0040      	lsls	r0, r0, #1
 8003750:	f009 ff00 	bl	800d554 <StartMilliDelay>
 8003754:	2200      	movs	r2, #0
 8003756:	0029      	movs	r1, r5
 8003758:	0020      	movs	r0, r4
 800375a:	f00d fd73 	bl	8011244 <HAL_GPIO_WritePin>
 800375e:	e7d5      	b.n	800370c <BOS_Init+0xb8>
 8003760:	200002b8 	.word	0x200002b8
 8003764:	20005adc 	.word	0x20005adc
 8003768:	20000b66 	.word	0x20000b66
 800376c:	200002b7 	.word	0x200002b7
 8003770:	e000ed00 	.word	0xe000ed00
 8003774:	05fa0004 	.word	0x05fa0004

08003778 <Module_Init>:
void Module_Init(void){
 8003778:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800377a:	f00c f8e5 	bl	800f948 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800377e:	f006 f991 	bl	8009aa4 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003782:	f7ff ff67 	bl	8003654 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003786:	f003 fce5 	bl	8007154 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800378a:	f00a f9a5 	bl	800dad8 <osKernelStart>
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b083      	sub	sp, #12
 8003794:	0007      	movs	r7, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003796:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003798:	4d0d      	ldr	r5, [pc, #52]	; (80037d0 <ExploreNeighbors+0x40>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800379a:	2603      	movs	r6, #3
		if(port != ignore){
 800379c:	42a7      	cmp	r7, r4
 800379e:	d00f      	beq.n	80037c0 <ExploreNeighbors+0x30>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <ExploreNeighbors+0x44>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	0a1a      	lsrs	r2, r3, #8
 80037a6:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80037a8:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80037aa:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037ac:	9600      	str	r6, [sp, #0]
 80037ae:	230a      	movs	r3, #10
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	0020      	movs	r0, r4
 80037b6:	f004 f8ed 	bl	8007994 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80037ba:	200a      	movs	r0, #10
 80037bc:	f00a f991 	bl	800dae2 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037c0:	3401      	adds	r4, #1
 80037c2:	b2e4      	uxtb	r4, r4
 80037c4:	2c04      	cmp	r4, #4
 80037c6:	d1e9      	bne.n	800379c <ExploreNeighbors+0xc>
		}
	}
	
	return result;
}
 80037c8:	2000      	movs	r0, #0
 80037ca:	b003      	add	sp, #12
 80037cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000a28 	.word	0x20000a28
 80037d4:	20000064 	.word	0x20000064

080037d8 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	46de      	mov	lr, fp
 80037dc:	4657      	mov	r7, sl
 80037de:	464e      	mov	r6, r9
 80037e0:	4645      	mov	r5, r8
 80037e2:	b5e0      	push	{r5, r6, r7, lr}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80037e8:	4b47      	ldr	r3, [pc, #284]	; (8003908 <FindBroadcastRoutes+0x130>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	469c      	mov	ip, r3
 80037ee:	3307      	adds	r3, #7
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	466a      	mov	r2, sp
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	469d      	mov	sp, r3
 80037fa:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80037fc:	4663      	mov	r3, ip
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <FindBroadcastRoutes+0x46>
 8003802:	0023      	movs	r3, r4
 8003804:	4a41      	ldr	r2, [pc, #260]	; (800390c <FindBroadcastRoutes+0x134>)
 8003806:	4661      	mov	r1, ip
 8003808:	1e4d      	subs	r5, r1, #1
 800380a:	b2ed      	uxtb	r5, r5
 800380c:	3501      	adds	r5, #1
 800380e:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003810:	2100      	movs	r1, #0
 8003812:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 8003814:	8011      	strh	r1, [r2, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800381a:	42ab      	cmp	r3, r5
 800381c:	d1f9      	bne.n	8003812 <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 800381e:	3801      	subs	r0, #1
 8003820:	2301      	movs	r3, #1
 8003822:	5423      	strb	r3, [r4, r0]
 8003824:	2216      	movs	r2, #22
 8003826:	4342      	muls	r2, r0
 8003828:	3202      	adds	r2, #2
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <FindBroadcastRoutes+0x138>)
 800382c:	18d2      	adds	r2, r2, r3
 800382e:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003830:	4d36      	ldr	r5, [pc, #216]	; (800390c <FindBroadcastRoutes+0x134>)
 8003832:	0040      	lsls	r0, r0, #1
 8003834:	2301      	movs	r3, #1
 8003836:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003838:	46a3      	mov	fp, r4
 800383a:	e003      	b.n	8003844 <FindBroadcastRoutes+0x6c>
 800383c:	3101      	adds	r1, #1
 800383e:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003840:	2906      	cmp	r1, #6
 8003842:	d011      	beq.n	8003868 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 8003844:	8813      	ldrh	r3, [r2, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f8      	beq.n	800383c <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800384a:	5b46      	ldrh	r6, [r0, r5]
 800384c:	46b1      	mov	r9, r6
 800384e:	4646      	mov	r6, r8
 8003850:	408e      	lsls	r6, r1
 8003852:	46b2      	mov	sl, r6
 8003854:	464e      	mov	r6, r9
 8003856:	4654      	mov	r4, sl
 8003858:	4326      	orrs	r6, r4
 800385a:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	445b      	add	r3, fp
 8003860:	3b01      	subs	r3, #1
 8003862:	2402      	movs	r4, #2
 8003864:	701c      	strb	r4, [r3, #0]
 8003866:	e7e9      	b.n	800383c <FindBroadcastRoutes+0x64>
 8003868:	465c      	mov	r4, fp
	++level;												// Move one level
 800386a:	2602      	movs	r6, #2
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <FindBroadcastRoutes+0x138>)
 800386e:	3302      	adds	r3, #2
 8003870:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003872:	2301      	movs	r3, #1
 8003874:	469b      	mov	fp, r3
 8003876:	46b0      	mov	r8, r6
 8003878:	0026      	movs	r6, r4
		++level;											// Move one level
 800387a:	4643      	mov	r3, r8
 800387c:	3301      	adds	r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003882:	4663      	mov	r3, ip
 8003884:	2b00      	cmp	r3, #0
 8003886:	d035      	beq.n	80038f4 <FindBroadcastRoutes+0x11c>
 8003888:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800388e:	3b01      	subs	r3, #1
 8003890:	4443      	add	r3, r8
 8003892:	4699      	mov	r9, r3
 8003894:	e01e      	b.n	80038d4 <FindBroadcastRoutes+0xfc>
 8003896:	3001      	adds	r0, #1
 8003898:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 800389a:	2806      	cmp	r0, #6
 800389c:	d015      	beq.n	80038ca <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 800389e:	880b      	ldrh	r3, [r1, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f8      	beq.n	8003896 <FindBroadcastRoutes+0xbe>
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	5cf5      	ldrb	r5, [r6, r3]
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	d1f3      	bne.n	8003896 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038ae:	4a17      	ldr	r2, [pc, #92]	; (800390c <FindBroadcastRoutes+0x134>)
 80038b0:	5aa5      	ldrh	r5, [r4, r2]
 80038b2:	465a      	mov	r2, fp
 80038b4:	4082      	lsls	r2, r0
 80038b6:	4315      	orrs	r5, r2
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <FindBroadcastRoutes+0x134>)
 80038ba:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 80038bc:	4642      	mov	r2, r8
 80038be:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e7e5      	b.n	8003896 <FindBroadcastRoutes+0xbe>
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ce:	b2d3      	uxtb	r3, r2
 80038d0:	4563      	cmp	r3, ip
 80038d2:	d20c      	bcs.n	80038ee <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038d4:	5cb3      	ldrb	r3, [r6, r2]
 80038d6:	454b      	cmp	r3, r9
 80038d8:	d1f8      	bne.n	80038cc <FindBroadcastRoutes+0xf4>
 80038da:	2116      	movs	r1, #22
 80038dc:	4351      	muls	r1, r2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	469a      	mov	sl, r3
 80038e2:	4451      	add	r1, sl
 80038e4:	0053      	lsls	r3, r2, #1
 80038e6:	2000      	movs	r0, #0
 80038e8:	60ba      	str	r2, [r7, #8]
 80038ea:	001c      	movs	r4, r3
 80038ec:	e7d7      	b.n	800389e <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1c2      	bne.n	800387a <FindBroadcastRoutes+0xa2>
	
	return result;
}
 80038f4:	2000      	movs	r0, #0
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b005      	add	sp, #20
 80038fa:	bc3c      	pop	{r2, r3, r4, r5}
 80038fc:	4690      	mov	r8, r2
 80038fe:	4699      	mov	r9, r3
 8003900:	46a2      	mov	sl, r4
 8003902:	46ab      	mov	fp, r5
 8003904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000030 	.word	0x20000030
 800390c:	20000854 	.word	0x20000854
 8003910:	20000614 	.word	0x20000614

08003914 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003916:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003918:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 800391a:	2b00      	cmp	r3, #0
 800391c:	d100      	bne.n	8003920 <minArr+0xc>
		smallest =arr[0];
 800391e:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <minArr+0x38>)
 8003922:	781d      	ldrb	r5, [r3, #0]
 8003924:	2d00      	cmp	r5, #0
 8003926:	dd0e      	ble.n	8003946 <minArr+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	2700      	movs	r7, #0
 800392c:	e002      	b.n	8003934 <minArr+0x20>
 800392e:	3301      	adds	r3, #1
 8003930:	42ab      	cmp	r3, r5
 8003932:	da09      	bge.n	8003948 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003934:	5cc2      	ldrb	r2, [r0, r3]
 8003936:	42a2      	cmp	r2, r4
 8003938:	d2f9      	bcs.n	800392e <minArr+0x1a>
 800393a:	5cce      	ldrb	r6, [r1, r3]
 800393c:	2e00      	cmp	r6, #0
 800393e:	d1f6      	bne.n	800392e <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003940:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003942:	0014      	movs	r4, r2
 8003944:	e7f3      	b.n	800392e <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003946:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003948:	0038      	movs	r0, r7
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394c:	20000030 	.word	0x20000030

08003950 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <QnotEmpty+0x20>)
 8003952:	7819      	ldrb	r1, [r3, #0]
 8003954:	2900      	cmp	r1, #0
 8003956:	d008      	beq.n	800396a <QnotEmpty+0x1a>
 8003958:	0003      	movs	r3, r0
 800395a:	1841      	adds	r1, r0, r1
	char temp =1;
 800395c:	2001      	movs	r0, #1
		temp &=Q[i];
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	4010      	ands	r0, r2
 8003962:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003964:	428b      	cmp	r3, r1
 8003966:	d1fa      	bne.n	800395e <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003968:	4770      	bx	lr
	char temp =1;
 800396a:	2001      	movs	r0, #1
 800396c:	e7fc      	b.n	8003968 <QnotEmpty+0x18>
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000030 	.word	0x20000030

08003974 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	46de      	mov	lr, fp
 8003978:	4657      	mov	r7, sl
 800397a:	464e      	mov	r6, r9
 800397c:	4645      	mov	r5, r8
 800397e:	b5e0      	push	{r5, r6, r7, lr}
 8003980:	b08f      	sub	sp, #60	; 0x3c
 8003982:	0005      	movs	r5, r0
 8003984:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003986:	2232      	movs	r2, #50	; 0x32
 8003988:	2100      	movs	r1, #0
 800398a:	a801      	add	r0, sp, #4
 800398c:	f00f fa02 	bl	8012d94 <memset>
	memset(route,0,sizeof(route));
 8003990:	221a      	movs	r2, #26
 8003992:	2100      	movs	r1, #0
 8003994:	485a      	ldr	r0, [pc, #360]	; (8003b00 <FindRoute+0x18c>)
 8003996:	f00f f9fd 	bl	8012d94 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 800399a:	0029      	movs	r1, r5
 800399c:	1e68      	subs	r0, r5, #1
 800399e:	2300      	movs	r3, #0
 80039a0:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <FindRoute+0x190>)
 80039a2:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <FindRoute+0x194>)
 80039a6:	5413      	strb	r3, [r2, r0]
 80039a8:	2516      	movs	r5, #22
 80039aa:	4345      	muls	r5, r0
 80039ac:	3502      	adds	r5, #2
 80039ae:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <FindRoute+0x198>)
 80039b0:	18ed      	adds	r5, r5, r3
 80039b2:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 80039b4:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039b6:	4653      	mov	r3, sl
 80039b8:	b29c      	uxth	r4, r3
 80039ba:	e003      	b.n	80039c4 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 80039bc:	3001      	adds	r0, #1
 80039be:	3202      	adds	r2, #2
 80039c0:	2807      	cmp	r0, #7
 80039c2:	d00f      	beq.n	80039e4 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039c4:	8813      	ldrh	r3, [r2, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f8      	beq.n	80039bc <FindRoute+0x48>
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	d1f5      	bne.n	80039bc <FindRoute+0x48>
			routeDist[desID - 1] =1;
 80039d0:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <FindRoute+0x190>)
 80039d2:	4453      	add	r3, sl
 80039d4:	3b01      	subs	r3, #1
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <FindRoute+0x18c>)
 80039dc:	4652      	mov	r2, sl
 80039de:	701a      	strb	r2, [r3, #0]
			return col;
 80039e0:	b2c0      	uxtb	r0, r0
 80039e2:	e085      	b.n	8003af0 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 80039e4:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <FindRoute+0x19c>)
 80039e6:	781e      	ldrb	r6, [r3, #0]
 80039e8:	2e00      	cmp	r6, #0
 80039ea:	dd11      	ble.n	8003a10 <FindRoute+0x9c>
 80039ec:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039ee:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039f0:	4f45      	ldr	r7, [pc, #276]	; (8003b08 <FindRoute+0x194>)
 80039f2:	2000      	movs	r0, #0
 80039f4:	46ac      	mov	ip, r5
 80039f6:	e002      	b.n	80039fe <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 80039f8:	3301      	adds	r3, #1
 80039fa:	42b3      	cmp	r3, r6
 80039fc:	dc07      	bgt.n	8003a0e <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 80039fe:	4299      	cmp	r1, r3
 8003a00:	d0fa      	beq.n	80039f8 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a02:	1e5a      	subs	r2, r3, #1
 8003a04:	4d3f      	ldr	r5, [pc, #252]	; (8003b04 <FindRoute+0x190>)
 8003a06:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a08:	18ba      	adds	r2, r7, r2
 8003a0a:	7010      	strb	r0, [r2, #0]
 8003a0c:	e7f4      	b.n	80039f8 <FindRoute+0x84>
 8003a0e:	4665      	mov	r5, ip
	uint8_t u =0;
 8003a10:	2400      	movs	r4, #0
 8003a12:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <FindRoute+0x198>)
 8003a14:	4698      	mov	r8, r3
 8003a16:	230e      	movs	r3, #14
 8003a18:	4443      	add	r3, r8
 8003a1a:	4656      	mov	r6, sl
 8003a1c:	469b      	mov	fp, r3
 8003a1e:	46a9      	mov	r9, r5
 8003a20:	e01d      	b.n	8003a5e <FindRoute+0xea>
 8003a22:	464d      	mov	r5, r9
 8003a24:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a26:	0034      	movs	r4, r6
 8003a28:	e034      	b.n	8003a94 <FindRoute+0x120>
 8003a2a:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003a2c:	4281      	cmp	r1, r0
 8003a2e:	d015      	beq.n	8003a5c <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a30:	880b      	ldrh	r3, [r1, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f9      	beq.n	8003a2a <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003a36:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	5cd7      	ldrb	r7, [r2, r3]
 8003a3e:	2f00      	cmp	r7, #0
 8003a40:	d1f3      	bne.n	8003a2a <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a42:	4f30      	ldr	r7, [pc, #192]	; (8003b04 <FindRoute+0x190>)
 8003a44:	5d7f      	ldrb	r7, [r7, r5]
 8003a46:	3701      	adds	r7, #1
 8003a48:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a4a:	4e2e      	ldr	r6, [pc, #184]	; (8003b04 <FindRoute+0x190>)
 8003a4c:	5cf6      	ldrb	r6, [r6, r3]
 8003a4e:	42be      	cmp	r6, r7
 8003a50:	d9eb      	bls.n	8003a2a <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003a52:	4e2c      	ldr	r6, [pc, #176]	; (8003b04 <FindRoute+0x190>)
 8003a54:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003a56:	4e2c      	ldr	r6, [pc, #176]	; (8003b08 <FindRoute+0x194>)
 8003a58:	54f4      	strb	r4, [r6, r3]
 8003a5a:	e7e6      	b.n	8003a2a <FindRoute+0xb6>
 8003a5c:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003a5e:	a801      	add	r0, sp, #4
 8003a60:	f7ff ff76 	bl	8003950 <QnotEmpty>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d113      	bne.n	8003a90 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a68:	a901      	add	r1, sp, #4
 8003a6a:	4826      	ldr	r0, [pc, #152]	; (8003b04 <FindRoute+0x190>)
 8003a6c:	f7ff ff52 	bl	8003914 <minArr>
 8003a70:	3001      	adds	r0, #1
 8003a72:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003a74:	42b4      	cmp	r4, r6
 8003a76:	d0d4      	beq.n	8003a22 <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003a78:	1e65      	subs	r5, r4, #1
 8003a7a:	ab01      	add	r3, sp, #4
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	555a      	strb	r2, [r3, r5]
 8003a80:	2016      	movs	r0, #22
 8003a82:	4368      	muls	r0, r5
 8003a84:	1c81      	adds	r1, r0, #2
 8003a86:	4441      	add	r1, r8
 8003a88:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	46b2      	mov	sl, r6
 8003a8e:	e7cf      	b.n	8003a30 <FindRoute+0xbc>
 8003a90:	464d      	mov	r5, r9
 8003a92:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <FindRoute+0x194>)
 8003a96:	191b      	adds	r3, r3, r4
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	d00e      	beq.n	8003ac0 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003aa2:	4917      	ldr	r1, [pc, #92]	; (8003b00 <FindRoute+0x18c>)
 8003aa4:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003aa6:	4e18      	ldr	r6, [pc, #96]	; (8003b08 <FindRoute+0x194>)
 8003aa8:	e000      	b.n	8003aac <FindRoute+0x138>
 8003aaa:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003aac:	1c58      	adds	r0, r3, #1
 8003aae:	4661      	mov	r1, ip
 8003ab0:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ab2:	18b3      	adds	r3, r6, r2
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	7819      	ldrb	r1, [r3, #0]
 8003ab8:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003aba:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d1f4      	bne.n	8003aaa <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003ac0:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ac2:	490f      	ldr	r1, [pc, #60]	; (8003b00 <FindRoute+0x18c>)
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <FindRoute+0x190>)
 8003ac6:	4453      	add	r3, sl
 8003ac8:	001f      	movs	r7, r3
 8003aca:	3f01      	subs	r7, #1
 8003acc:	e003      	b.n	8003ad6 <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003ace:	3001      	adds	r0, #1
 8003ad0:	3502      	adds	r5, #2
 8003ad2:	2807      	cmp	r0, #7
 8003ad4:	d00b      	beq.n	8003aee <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ad6:	882b      	ldrh	r3, [r5, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f8      	beq.n	8003ace <FindRoute+0x15a>
 8003adc:	783a      	ldrb	r2, [r7, #0]
 8003ade:	188a      	adds	r2, r1, r2
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d1f1      	bne.n	8003ace <FindRoute+0x15a>
			return col;
 8003aea:	b2c0      	uxtb	r0, r0
 8003aec:	e000      	b.n	8003af0 <FindRoute+0x17c>
	return 0;
 8003aee:	2000      	movs	r0, #0
}
 8003af0:	b00f      	add	sp, #60	; 0x3c
 8003af2:	bc3c      	pop	{r2, r3, r4, r5}
 8003af4:	4690      	mov	r8, r2
 8003af6:	4699      	mov	r9, r3
 8003af8:	46a2      	mov	sl, r4
 8003afa:	46ab      	mov	fp, r5
 8003afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	20005ba4 	.word	0x20005ba4
 8003b04:	20000bec 	.word	0x20000bec
 8003b08:	20000c08 	.word	0x20000c08
 8003b0c:	20000614 	.word	0x20000614
 8003b10:	20000030 	.word	0x20000030

08003b14 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	46de      	mov	lr, fp
 8003b18:	4657      	mov	r7, sl
 8003b1a:	4646      	mov	r6, r8
 8003b1c:	b5c0      	push	{r6, r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	0005      	movs	r5, r0
 8003b22:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003b24:	4c55      	ldr	r4, [pc, #340]	; (8003c7c <DisplayTopology+0x168>)
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <DisplayTopology+0x16c>)
 8003b28:	0022      	movs	r2, r4
 8003b2a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003b2c:	c243      	stmia	r2!, {r0, r1, r6}
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b36:	0020      	movs	r0, r4
 8003b38:	f7fc faee 	bl	8000118 <strlen>
 8003b3c:	b282      	uxth	r2, r0
 8003b3e:	2301      	movs	r3, #1
 8003b40:	425b      	negs	r3, r3
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	3333      	adds	r3, #51	; 0x33
 8003b46:	0021      	movs	r1, r4
 8003b48:	0028      	movs	r0, r5
 8003b4a:	f009 fe43 	bl	800d7d4 <writePxMutex>
 8003b4e:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003b50:	4f4c      	ldr	r7, [pc, #304]	; (8003c84 <DisplayTopology+0x170>)
 8003b52:	4d4a      	ldr	r5, [pc, #296]	; (8003c7c <DisplayTopology+0x168>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b54:	2601      	movs	r6, #1
 8003b56:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003b58:	0022      	movs	r2, r4
 8003b5a:	0039      	movs	r1, r7
 8003b5c:	0028      	movs	r0, r5
 8003b5e:	f00f fea7 	bl	80138b0 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b62:	0028      	movs	r0, r5
 8003b64:	f7fc fad8 	bl	8000118 <strlen>
 8003b68:	b282      	uxth	r2, r0
 8003b6a:	9600      	str	r6, [sp, #0]
 8003b6c:	2332      	movs	r3, #50	; 0x32
 8003b6e:	0029      	movs	r1, r5
 8003b70:	9803      	ldr	r0, [sp, #12]
 8003b72:	f009 fe2f 	bl	800d7d4 <writePxMutex>
 8003b76:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003b78:	2c04      	cmp	r4, #4
 8003b7a:	d1ed      	bne.n	8003b58 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	425b      	negs	r3, r3
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	3333      	adds	r3, #51	; 0x33
 8003b84:	2203      	movs	r2, #3
 8003b86:	4940      	ldr	r1, [pc, #256]	; (8003c88 <DisplayTopology+0x174>)
 8003b88:	9803      	ldr	r0, [sp, #12]
 8003b8a:	f009 fe23 	bl	800d7d4 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <DisplayTopology+0x178>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <DisplayTopology+0x14a>
 8003b96:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b98:	2701      	movs	r7, #1
 8003b9a:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <DisplayTopology+0x17c>)
 8003b9e:	4698      	mov	r8, r3
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	4443      	add	r3, r8
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	e029      	b.n	8003bfc <DisplayTopology+0xe8>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ba8:	2307      	movs	r3, #7
 8003baa:	4013      	ands	r3, r2
 8003bac:	08d2      	lsrs	r2, r2, #3
 8003bae:	4939      	ldr	r1, [pc, #228]	; (8003c94 <DisplayTopology+0x180>)
 8003bb0:	4832      	ldr	r0, [pc, #200]	; (8003c7c <DisplayTopology+0x168>)
 8003bb2:	f00f fe7d 	bl	80138b0 <siprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003bb6:	4d31      	ldr	r5, [pc, #196]	; (8003c7c <DisplayTopology+0x168>)
 8003bb8:	0028      	movs	r0, r5
 8003bba:	f7fc faad 	bl	8000118 <strlen>
 8003bbe:	b282      	uxth	r2, r0
 8003bc0:	9700      	str	r7, [sp, #0]
 8003bc2:	2332      	movs	r3, #50	; 0x32
 8003bc4:	0029      	movs	r1, r5
 8003bc6:	9803      	ldr	r0, [sp, #12]
 8003bc8:	f009 fe04 	bl	800d7d4 <writePxMutex>
 8003bcc:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003bce:	455c      	cmp	r4, fp
 8003bd0:	d007      	beq.n	8003be2 <DisplayTopology+0xce>
			if(!array[row][col])
 8003bd2:	8822      	ldrh	r2, [r4, #0]
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	d1e7      	bne.n	8003ba8 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003bd8:	492f      	ldr	r1, [pc, #188]	; (8003c98 <DisplayTopology+0x184>)
 8003bda:	4828      	ldr	r0, [pc, #160]	; (8003c7c <DisplayTopology+0x168>)
 8003bdc:	f00f fe68 	bl	80138b0 <siprintf>
 8003be0:	e7e9      	b.n	8003bb6 <DisplayTopology+0xa2>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003be2:	9700      	str	r7, [sp, #0]
 8003be4:	2332      	movs	r3, #50	; 0x32
 8003be6:	2202      	movs	r2, #2
 8003be8:	492c      	ldr	r1, [pc, #176]	; (8003c9c <DisplayTopology+0x188>)
 8003bea:	9803      	ldr	r0, [sp, #12]
 8003bec:	f009 fdf2 	bl	800d7d4 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	b2f6      	uxtb	r6, r6
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <DisplayTopology+0x178>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	42b3      	cmp	r3, r6
 8003bfa:	d930      	bls.n	8003c5e <DisplayTopology+0x14a>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003bfc:	1c72      	adds	r2, r6, #1
 8003bfe:	4c1f      	ldr	r4, [pc, #124]	; (8003c7c <DisplayTopology+0x168>)
 8003c00:	4927      	ldr	r1, [pc, #156]	; (8003ca0 <DisplayTopology+0x18c>)
 8003c02:	0020      	movs	r0, r4
 8003c04:	f00f fe54 	bl	80138b0 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c08:	0020      	movs	r0, r4
 8003c0a:	f7fc fa85 	bl	8000118 <strlen>
 8003c0e:	b282      	uxth	r2, r0
 8003c10:	9700      	str	r7, [sp, #0]
 8003c12:	2332      	movs	r3, #50	; 0x32
 8003c14:	0021      	movs	r1, r4
 8003c16:	9803      	ldr	r0, [sp, #12]
 8003c18:	f009 fddc 	bl	800d7d4 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003c1c:	2516      	movs	r5, #22
 8003c1e:	4375      	muls	r5, r6
 8003c20:	4643      	mov	r3, r8
 8003c22:	5aeb      	ldrh	r3, [r5, r3]
 8003c24:	0059      	lsls	r1, r3, #1
 8003c26:	18c9      	adds	r1, r1, r3
 8003c28:	0049      	lsls	r1, r1, #1
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <DisplayTopology+0x190>)
 8003c2c:	18c9      	adds	r1, r1, r3
 8003c2e:	2205      	movs	r2, #5
 8003c30:	0020      	movs	r0, r4
 8003c32:	f00f fe92 	bl	801395a <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003c36:	9700      	str	r7, [sp, #0]
 8003c38:	2332      	movs	r3, #50	; 0x32
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	0021      	movs	r1, r4
 8003c3e:	9c03      	ldr	r4, [sp, #12]
 8003c40:	0020      	movs	r0, r4
 8003c42:	f009 fdc7 	bl	800d7d4 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003c46:	9700      	str	r7, [sp, #0]
 8003c48:	2332      	movs	r3, #50	; 0x32
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4916      	ldr	r1, [pc, #88]	; (8003ca8 <DisplayTopology+0x194>)
 8003c4e:	0020      	movs	r0, r4
 8003c50:	f009 fdc0 	bl	800d7d4 <writePxMutex>
 8003c54:	1cac      	adds	r4, r5, #2
 8003c56:	4444      	add	r4, r8
 8003c58:	4455      	add	r5, sl
 8003c5a:	46ab      	mov	fp, r5
 8003c5c:	e7b9      	b.n	8003bd2 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003c5e:	2301      	movs	r3, #1
 8003c60:	425b      	negs	r3, r3
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	3333      	adds	r3, #51	; 0x33
 8003c66:	2201      	movs	r2, #1
 8003c68:	4910      	ldr	r1, [pc, #64]	; (8003cac <DisplayTopology+0x198>)
 8003c6a:	9803      	ldr	r0, [sp, #12]
 8003c6c:	f009 fdb2 	bl	800d7d4 <writePxMutex>
}
 8003c70:	b004      	add	sp, #16
 8003c72:	bc1c      	pop	{r2, r3, r4}
 8003c74:	4690      	mov	r8, r2
 8003c76:	469a      	mov	sl, r3
 8003c78:	46a3      	mov	fp, r4
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7c:	20000b80 	.word	0x20000b80
 8003c80:	08016a2c 	.word	0x08016a2c
 8003c84:	08016a40 	.word	0x08016a40
 8003c88:	08018160 	.word	0x08018160
 8003c8c:	20000030 	.word	0x20000030
 8003c90:	20000614 	.word	0x20000614
 8003c94:	08016a58 	.word	0x08016a58
 8003c98:	08016a54 	.word	0x08016a54
 8003c9c:	080168d4 	.word	0x080168d4
 8003ca0:	08016a48 	.word	0x08016a48
 8003ca4:	08016a94 	.word	0x08016a94
 8003ca8:	08016a3c 	.word	0x08016a3c
 8003cac:	080194d0 	.word	0x080194d0

08003cb0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb2:	46c6      	mov	lr, r8
 8003cb4:	b500      	push	{lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	0005      	movs	r5, r0
 8003cba:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003cbc:	4c30      	ldr	r4, [pc, #192]	; (8003d80 <DisplayPortsDir+0xd0>)
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <DisplayPortsDir+0xd4>)
 8003cc0:	0022      	movs	r2, r4
 8003cc2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003cc4:	c243      	stmia	r2!, {r0, r1, r6}
 8003cc6:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003cc8:	c243      	stmia	r2!, {r0, r1, r6}
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cce:	0020      	movs	r0, r4
 8003cd0:	f7fc fa22 	bl	8000118 <strlen>
 8003cd4:	b282      	uxth	r2, r0
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	425b      	negs	r3, r3
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	3333      	adds	r3, #51	; 0x33
 8003cde:	0021      	movs	r1, r4
 8003ce0:	0028      	movs	r0, r5
 8003ce2:	f009 fd77 	bl	800d7d4 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <DisplayPortsDir+0xd8>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4690      	mov	r8, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d02c      	beq.n	8003d4c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003cf2:	4e26      	ldr	r6, [pc, #152]	; (8003d8c <DisplayPortsDir+0xdc>)
 8003cf4:	e025      	b.n	8003d42 <DisplayPortsDir+0x92>
 8003cf6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003cf8:	2c0a      	cmp	r4, #10
 8003cfa:	d01a      	beq.n	8003d32 <DisplayPortsDir+0x82>
 8003cfc:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003cfe:	5ba9      	ldrh	r1, [r5, r6]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	0212      	lsls	r2, r2, #8
 8003d04:	411a      	asrs	r2, r3
 8003d06:	420a      	tst	r2, r1
 8003d08:	d0f5      	beq.n	8003cf6 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003d0a:	4f1d      	ldr	r7, [pc, #116]	; (8003d80 <DisplayPortsDir+0xd0>)
 8003d0c:	0023      	movs	r3, r4
 8003d0e:	4642      	mov	r2, r8
 8003d10:	491f      	ldr	r1, [pc, #124]	; (8003d90 <DisplayPortsDir+0xe0>)
 8003d12:	0038      	movs	r0, r7
 8003d14:	f00f fdcc 	bl	80138b0 <siprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003d18:	0038      	movs	r0, r7
 8003d1a:	f7fc f9fd 	bl	8000118 <strlen>
 8003d1e:	b282      	uxth	r2, r0
 8003d20:	2301      	movs	r3, #1
 8003d22:	425b      	negs	r3, r3
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	3333      	adds	r3, #51	; 0x33
 8003d28:	0039      	movs	r1, r7
 8003d2a:	9803      	ldr	r0, [sp, #12]
 8003d2c:	f009 fd52 	bl	800d7d4 <writePxMutex>
 8003d30:	e7e1      	b.n	8003cf6 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003d32:	4643      	mov	r3, r8
 8003d34:	3301      	adds	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4698      	mov	r8, r3
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <DisplayPortsDir+0xd8>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	4543      	cmp	r3, r8
 8003d40:	d304      	bcc.n	8003d4c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003d42:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003d44:	4642      	mov	r2, r8
 8003d46:	1e55      	subs	r5, r2, #1
 8003d48:	006d      	lsls	r5, r5, #1
 8003d4a:	e7d7      	b.n	8003cfc <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003d4c:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <DisplayPortsDir+0xd0>)
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <DisplayPortsDir+0xe4>)
 8003d50:	0022      	movs	r2, r4
 8003d52:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003d54:	c223      	stmia	r2!, {r0, r1, r5}
 8003d56:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003d58:	c223      	stmia	r2!, {r0, r1, r5}
 8003d5a:	cb03      	ldmia	r3!, {r0, r1}
 8003d5c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d5e:	0020      	movs	r0, r4
 8003d60:	f7fc f9da 	bl	8000118 <strlen>
 8003d64:	b282      	uxth	r2, r0
 8003d66:	2301      	movs	r3, #1
 8003d68:	425b      	negs	r3, r3
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	3333      	adds	r3, #51	; 0x33
 8003d6e:	0021      	movs	r1, r4
 8003d70:	9803      	ldr	r0, [sp, #12]
 8003d72:	f009 fd2f 	bl	800d7d4 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003d76:	b004      	add	sp, #16
 8003d78:	bc04      	pop	{r2}
 8003d7a:	4690      	mov	r8, r2
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000b80 	.word	0x20000b80
 8003d84:	080169dc 	.word	0x080169dc
 8003d88:	20000030 	.word	0x20000030
 8003d8c:	20005fa8 	.word	0x20005fa8
 8003d90:	080169f8 	.word	0x080169f8
 8003d94:	08016a0c 	.word	0x08016a0c

08003d98 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9a:	46c6      	mov	lr, r8
 8003d9c:	b500      	push	{lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003da2:	f009 ffaf 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8003da6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003da8:	2300      	movs	r3, #0
 8003daa:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003dac:	4b8d      	ldr	r3, [pc, #564]	; (8003fe4 <DisplayModuleStatus+0x24c>)
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	4d8d      	ldr	r5, [pc, #564]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003db2:	498e      	ldr	r1, [pc, #568]	; (8003fec <DisplayModuleStatus+0x254>)
 8003db4:	0028      	movs	r0, r5
 8003db6:	f00f fd7b 	bl	80138b0 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003dba:	0029      	movs	r1, r5
 8003dbc:	0020      	movs	r0, r4
 8003dbe:	f00f fd97 	bl	80138f0 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <DisplayModuleStatus+0x258>)
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	498b      	ldr	r1, [pc, #556]	; (8003ff4 <DisplayModuleStatus+0x25c>)
 8003dc8:	0028      	movs	r0, r5
 8003dca:	f00f fd71 	bl	80138b0 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003dce:	0029      	movs	r1, r5
 8003dd0:	0020      	movs	r0, r4
 8003dd2:	f00f fd8d 	bl	80138f0 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4986      	ldr	r1, [pc, #536]	; (8003ff8 <DisplayModuleStatus+0x260>)
 8003de0:	0028      	movs	r0, r5
 8003de2:	f00f fd65 	bl	80138b0 <siprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003de6:	0029      	movs	r1, r5
 8003de8:	0020      	movs	r0, r4
 8003dea:	f00f fd81 	bl	80138f0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003dee:	4a83      	ldr	r2, [pc, #524]	; (8003ffc <DisplayModuleStatus+0x264>)
 8003df0:	4983      	ldr	r1, [pc, #524]	; (8004000 <DisplayModuleStatus+0x268>)
 8003df2:	0028      	movs	r0, r5
 8003df4:	f00f fd5c 	bl	80138b0 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003df8:	0029      	movs	r1, r5
 8003dfa:	0020      	movs	r0, r4
 8003dfc:	f00f fd78 	bl	80138f0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003e00:	4a80      	ldr	r2, [pc, #512]	; (8004004 <DisplayModuleStatus+0x26c>)
 8003e02:	4981      	ldr	r1, [pc, #516]	; (8004008 <DisplayModuleStatus+0x270>)
 8003e04:	0028      	movs	r0, r5
 8003e06:	f00f fd53 	bl	80138b0 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003e0a:	0029      	movs	r1, r5
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	f00f fd6f 	bl	80138f0 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003e12:	4b7e      	ldr	r3, [pc, #504]	; (800400c <DisplayModuleStatus+0x274>)
 8003e14:	002a      	movs	r2, r5
 8003e16:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e18:	c243      	stmia	r2!, {r0, r1, r6}
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	8899      	ldrh	r1, [r3, #4]
 8003e20:	8091      	strh	r1, [r2, #4]
 8003e22:	799b      	ldrb	r3, [r3, #6]
 8003e24:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003e26:	0029      	movs	r1, r5
 8003e28:	0020      	movs	r0, r4
 8003e2a:	f00f fd61 	bl	80138f0 <strcat>
 8003e2e:	2601      	movs	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003e30:	4d6d      	ldr	r5, [pc, #436]	; (8003fe8 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003e32:	4b77      	ldr	r3, [pc, #476]	; (8004010 <DisplayModuleStatus+0x278>)
 8003e34:	4698      	mov	r8, r3
 8003e36:	e00e      	b.n	8003e56 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003e38:	4b6b      	ldr	r3, [pc, #428]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003e3a:	4a76      	ldr	r2, [pc, #472]	; (8004014 <DisplayModuleStatus+0x27c>)
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	6019      	str	r1, [r3, #0]
 8003e40:	8891      	ldrh	r1, [r2, #4]
 8003e42:	8099      	strh	r1, [r3, #4]
 8003e44:	7992      	ldrb	r2, [r2, #6]
 8003e46:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003e48:	4967      	ldr	r1, [pc, #412]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003e4a:	0020      	movs	r0, r4
 8003e4c:	f00f fd50 	bl	80138f0 <strcat>
 8003e50:	3601      	adds	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003e52:	2e04      	cmp	r6, #4
 8003e54:	d039      	beq.n	8003eca <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003e56:	0032      	movs	r2, r6
 8003e58:	496f      	ldr	r1, [pc, #444]	; (8004018 <DisplayModuleStatus+0x280>)
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	f00f fd28 	bl	80138b0 <siprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003e60:	0029      	movs	r1, r5
 8003e62:	0020      	movs	r0, r4
 8003e64:	f00f fd44 	bl	80138f0 <strcat>
		switch(portStatus[i]){
 8003e68:	4643      	mov	r3, r8
 8003e6a:	5cf3      	ldrb	r3, [r6, r3]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d8eb      	bhi.n	8003e48 <DisplayModuleStatus+0xb0>
 8003e70:	4643      	mov	r3, r8
 8003e72:	5cf3      	ldrb	r3, [r6, r3]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4a69      	ldr	r2, [pc, #420]	; (800401c <DisplayModuleStatus+0x284>)
 8003e78:	58d3      	ldr	r3, [r2, r3]
 8003e7a:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003e7c:	495a      	ldr	r1, [pc, #360]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003e7e:	4b68      	ldr	r3, [pc, #416]	; (8004020 <DisplayModuleStatus+0x288>)
 8003e80:	000a      	movs	r2, r1
 8003e82:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003e84:	c283      	stmia	r2!, {r0, r1, r7}
 8003e86:	cb03      	ldmia	r3!, {r0, r1}
 8003e88:	c203      	stmia	r2!, {r0, r1}
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	7013      	strb	r3, [r2, #0]
				break;
 8003e8e:	e7db      	b.n	8003e48 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003e90:	4a55      	ldr	r2, [pc, #340]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003e92:	4b64      	ldr	r3, [pc, #400]	; (8004024 <DisplayModuleStatus+0x28c>)
 8003e94:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003e96:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8003e98:	e7d6      	b.n	8003e48 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003e9a:	4953      	ldr	r1, [pc, #332]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003e9c:	4b62      	ldr	r3, [pc, #392]	; (8004028 <DisplayModuleStatus+0x290>)
 8003e9e:	000a      	movs	r2, r1
 8003ea0:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003ea2:	c283      	stmia	r2!, {r0, r1, r7}
 8003ea4:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003ea6:	c283      	stmia	r2!, {r0, r1, r7}
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	8013      	strh	r3, [r2, #0]
				break;
 8003eac:	e7cc      	b.n	8003e48 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003eae:	494e      	ldr	r1, [pc, #312]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003eb0:	4b5e      	ldr	r3, [pc, #376]	; (800402c <DisplayModuleStatus+0x294>)
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003eb6:	c283      	stmia	r2!, {r0, r1, r7}
 8003eb8:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003eba:	c283      	stmia	r2!, {r0, r1, r7}
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	6011      	str	r1, [r2, #0]
 8003ec0:	8899      	ldrh	r1, [r3, #4]
 8003ec2:	8091      	strh	r1, [r2, #4]
 8003ec4:	799b      	ldrb	r3, [r3, #6]
 8003ec6:	7193      	strb	r3, [r2, #6]
				break;
 8003ec8:	e7be      	b.n	8003e48 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003eca:	4947      	ldr	r1, [pc, #284]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003ecc:	4b58      	ldr	r3, [pc, #352]	; (8004030 <DisplayModuleStatus+0x298>)
 8003ece:	000a      	movs	r2, r1
 8003ed0:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003ed2:	c261      	stmia	r2!, {r0, r5, r6}
 8003ed4:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003ed6:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ed8:	0020      	movs	r0, r4
 8003eda:	f00f fd09 	bl	80138f0 <strcat>
 8003ede:	4e55      	ldr	r6, [pc, #340]	; (8004034 <DisplayModuleStatus+0x29c>)
 8003ee0:	2701      	movs	r7, #1
 8003ee2:	e00d      	b.n	8003f00 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003ee4:	4d40      	ldr	r5, [pc, #256]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003ee6:	003a      	movs	r2, r7
 8003ee8:	4953      	ldr	r1, [pc, #332]	; (8004038 <DisplayModuleStatus+0x2a0>)
 8003eea:	0028      	movs	r0, r5
 8003eec:	f00f fce0 	bl	80138b0 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003ef0:	0029      	movs	r1, r5
 8003ef2:	0020      	movs	r0, r4
 8003ef4:	f00f fcfc 	bl	80138f0 <strcat>
 8003ef8:	3701      	adds	r7, #1
 8003efa:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8003efc:	2f07      	cmp	r7, #7
 8003efe:	d018      	beq.n	8003f32 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003f06:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003f08:	f005 fffe 	bl	8009f08 <GetPort>
 8003f0c:	0005      	movs	r5, r0
 8003f0e:	00bb      	lsls	r3, r7, #2
 8003f10:	3b04      	subs	r3, #4
 8003f12:	4a4a      	ldr	r2, [pc, #296]	; (800403c <DisplayModuleStatus+0x2a4>)
 8003f14:	58d0      	ldr	r0, [r2, r3]
 8003f16:	f005 fff7 	bl	8009f08 <GetPort>
 8003f1a:	9000      	str	r0, [sp, #0]
 8003f1c:	002b      	movs	r3, r5
 8003f1e:	003a      	movs	r2, r7
 8003f20:	4947      	ldr	r1, [pc, #284]	; (8004040 <DisplayModuleStatus+0x2a8>)
 8003f22:	4831      	ldr	r0, [pc, #196]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003f24:	f00f fcc4 	bl	80138b0 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003f28:	492f      	ldr	r1, [pc, #188]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f00f fce0 	bl	80138f0 <strcat>
 8003f30:	e7e2      	b.n	8003ef8 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8003f32:	0020      	movs	r0, r4
 8003f34:	f7fc f8f0 	bl	8000118 <strlen>
 8003f38:	1820      	adds	r0, r4, r0
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	4941      	ldr	r1, [pc, #260]	; (8004044 <DisplayModuleStatus+0x2ac>)
 8003f3e:	f00e ff20 	bl	8012d82 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8003f42:	0020      	movs	r0, r4
 8003f44:	f7fc f8e8 	bl	8000118 <strlen>
 8003f48:	1820      	adds	r0, r4, r0
 8003f4a:	221d      	movs	r2, #29
 8003f4c:	493e      	ldr	r1, [pc, #248]	; (8004048 <DisplayModuleStatus+0x2b0>)
 8003f4e:	f00e ff18 	bl	8012d82 <memcpy>
	temp =strlen((char* )pcOutputString);
 8003f52:	0020      	movs	r0, r4
 8003f54:	f7fc f8e0 	bl	8000118 <strlen>
 8003f58:	4680      	mov	r8, r0
 8003f5a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f5c:	4e3b      	ldr	r6, [pc, #236]	; (800404c <DisplayModuleStatus+0x2b4>)
 8003f5e:	4f21      	ldr	r7, [pc, #132]	; (8003fe4 <DisplayModuleStatus+0x24c>)
 8003f60:	e002      	b.n	8003f68 <DisplayModuleStatus+0x1d0>
 8003f62:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8003f64:	2d03      	cmp	r5, #3
 8003f66:	d013      	beq.n	8003f90 <DisplayModuleStatus+0x1f8>
 8003f68:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f6a:	783b      	ldrb	r3, [r7, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	5b99      	ldrh	r1, [r3, r6]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4113      	asrs	r3, r2
 8003f78:	420b      	tst	r3, r1
 8003f7a:	d0f2      	beq.n	8003f62 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8003f7c:	002a      	movs	r2, r5
 8003f7e:	4934      	ldr	r1, [pc, #208]	; (8004050 <DisplayModuleStatus+0x2b8>)
 8003f80:	4819      	ldr	r0, [pc, #100]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003f82:	f00f fc95 	bl	80138b0 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003f86:	4918      	ldr	r1, [pc, #96]	; (8003fe8 <DisplayModuleStatus+0x250>)
 8003f88:	0020      	movs	r0, r4
 8003f8a:	f00f fcb1 	bl	80138f0 <strcat>
 8003f8e:	e7e8      	b.n	8003f62 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc f8c1 	bl	8000118 <strlen>
 8003f96:	4643      	mov	r3, r8
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	4298      	cmp	r0, r3
 8003f9e:	d00e      	beq.n	8003fbe <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8003fa0:	0020      	movs	r0, r4
 8003fa2:	f7fc f8b9 	bl	8000118 <strlen>
 8003fa6:	1820      	adds	r0, r4, r0
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4926      	ldr	r1, [pc, #152]	; (8004044 <DisplayModuleStatus+0x2ac>)
 8003fac:	f00e fee9 	bl	8012d82 <memcpy>
	
	/* Display output */
	if(port)
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bc04      	pop	{r2}
 8003fba:	4690      	mov	r8, r2
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8003fbe:	1820      	adds	r0, r4, r0
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	4924      	ldr	r1, [pc, #144]	; (8004054 <DisplayModuleStatus+0x2bc>)
 8003fc4:	f00e fedd 	bl	8012d82 <memcpy>
 8003fc8:	e7ea      	b.n	8003fa0 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8003fca:	0020      	movs	r0, r4
 8003fcc:	f7fc f8a4 	bl	8000118 <strlen>
 8003fd0:	b282      	uxth	r2, r0
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	3333      	adds	r3, #51	; 0x33
 8003fda:	0021      	movs	r1, r4
 8003fdc:	9803      	ldr	r0, [sp, #12]
 8003fde:	f009 fbf9 	bl	800d7d4 <writePxMutex>
}
 8003fe2:	e7e8      	b.n	8003fb6 <DisplayModuleStatus+0x21e>
 8003fe4:	20000b66 	.word	0x20000b66
 8003fe8:	20000b80 	.word	0x20000b80
 8003fec:	08016820 	.word	0x08016820
 8003ff0:	2000060b 	.word	0x2000060b
 8003ff4:	0801683c 	.word	0x0801683c
 8003ff8:	08016858 	.word	0x08016858
 8003ffc:	08016878 	.word	0x08016878
 8004000:	08016884 	.word	0x08016884
 8004004:	0801689c 	.word	0x0801689c
 8004008:	080168a8 	.word	0x080168a8
 800400c:	080168c4 	.word	0x080168c4
 8004010:	20000bd0 	.word	0x20000bd0
 8004014:	080168e0 	.word	0x080168e0
 8004018:	080168d8 	.word	0x080168d8
 800401c:	080167fc 	.word	0x080167fc
 8004020:	080168e8 	.word	0x080168e8
 8004024:	08016900 	.word	0x08016900
 8004028:	0801690c 	.word	0x0801690c
 800402c:	08016928 	.word	0x08016928
 8004030:	08016948 	.word	0x08016948
 8004034:	20001544 	.word	0x20001544
 8004038:	08016960 	.word	0x08016960
 800403c:	20001030 	.word	0x20001030
 8004040:	0801697c 	.word	0x0801697c
 8004044:	080168d4 	.word	0x080168d4
 8004048:	080169ac 	.word	0x080169ac
 800404c:	20005fa8 	.word	0x20005fa8
 8004050:	080169cc 	.word	0x080169cc
 8004054:	080169d4 	.word	0x080169d4

08004058 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	46c6      	mov	lr, r8
 800405c:	b500      	push	{lr}
 800405e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004060:	4929      	ldr	r1, [pc, #164]	; (8004108 <GetID+0xb0>)
 8004062:	f7fc f84f 	bl	8000104 <strcmp>
 8004066:	2800      	cmp	r0, #0
 8004068:	d010      	beq.n	800408c <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800406a:	4928      	ldr	r1, [pc, #160]	; (800410c <GetID+0xb4>)
 800406c:	0028      	movs	r0, r5
 800406e:	f7fc f849 	bl	8000104 <strcmp>
 8004072:	2800      	cmp	r0, #0
 8004074:	d045      	beq.n	8004102 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004076:	782b      	ldrb	r3, [r5, #0]
 8004078:	4698      	mov	r8, r3
 800407a:	2b23      	cmp	r3, #35	; 0x23
 800407c:	d00b      	beq.n	8004096 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <GetID+0xb8>)
 8004080:	781f      	ldrb	r7, [r3, #0]
 8004082:	2f00      	cmp	r7, #0
 8004084:	d02a      	beq.n	80040dc <GetID+0x84>
 8004086:	4e23      	ldr	r6, [pc, #140]	; (8004114 <GetID+0xbc>)
 8004088:	2400      	movs	r4, #0
 800408a:	e01c      	b.n	80040c6 <GetID+0x6e>
		return myID;
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <GetID+0xc0>)
 800408e:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004090:	bc04      	pop	{r2}
 8004092:	4690      	mov	r8, r2
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 8004096:	1c68      	adds	r0, r5, #1
 8004098:	f00e fe01 	bl	8012c9e <atol>
 800409c:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <GetID+0x52>
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <GetID+0xb8>)
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d206      	bcs.n	80040b8 <GetID+0x60>
		else if(id == myID)
 80040aa:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <GetID+0xc0>)
 80040ac:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80040ae:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1ed      	bne.n	8004090 <GetID+0x38>
			return myID;
 80040b4:	b210      	sxth	r0, r2
 80040b6:	e7eb      	b.n	8004090 <GetID+0x38>
			return id;
 80040b8:	b218      	sxth	r0, r3
 80040ba:	e7e9      	b.n	8004090 <GetID+0x38>
		for(i =0; i < N; i++){
 80040bc:	3401      	adds	r4, #1
 80040be:	b2e4      	uxtb	r4, r4
 80040c0:	360a      	adds	r6, #10
 80040c2:	42bc      	cmp	r4, r7
 80040c4:	d00a      	beq.n	80040dc <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80040c6:	0031      	movs	r1, r6
 80040c8:	0028      	movs	r0, r5
 80040ca:	f7fc f81b 	bl	8000104 <strcmp>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d1f4      	bne.n	80040bc <GetID+0x64>
 80040d2:	4643      	mov	r3, r8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f1      	beq.n	80040bc <GetID+0x64>
				return (i);
 80040d8:	b220      	sxth	r0, r4
 80040da:	e7d9      	b.n	8004090 <GetID+0x38>
 80040dc:	4f0f      	ldr	r7, [pc, #60]	; (800411c <GetID+0xc4>)
		for(i =0; i < N; i++){
 80040de:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 80040e0:	0039      	movs	r1, r7
 80040e2:	0028      	movs	r0, r5
 80040e4:	f7fc f80e 	bl	8000104 <strcmp>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d005      	beq.n	80040f8 <GetID+0xa0>
 80040ec:	3601      	adds	r6, #1
 80040ee:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80040f0:	2e0a      	cmp	r6, #10
 80040f2:	d1f5      	bne.n	80040e0 <GetID+0x88>
		return BOS_ERR_WrongName;
 80040f4:	2064      	movs	r0, #100	; 0x64
 80040f6:	e7cb      	b.n	8004090 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 80040f8:	0234      	lsls	r4, r6, #8
 80040fa:	20fe      	movs	r0, #254	; 0xfe
 80040fc:	4320      	orrs	r0, r4
 80040fe:	b200      	sxth	r0, r0
 8004100:	e7c6      	b.n	8004090 <GetID+0x38>
		return BOS_BROADCAST;
 8004102:	20ff      	movs	r0, #255	; 0xff
 8004104:	e7c4      	b.n	8004090 <GetID+0x38>
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	08016a60 	.word	0x08016a60
 800410c:	08016a64 	.word	0x08016a64
 8004110:	20000030 	.word	0x20000030
 8004114:	20000a58 	.word	0x20000a58
 8004118:	20000b66 	.word	0x20000b66
 800411c:	20000950 	.word	0x20000950

08004120 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004122:	b083      	sub	sp, #12
 8004124:	9001      	str	r0, [sp, #4]
 8004126:	000d      	movs	r5, r1
 8004128:	4c2a      	ldr	r4, [pc, #168]	; (80041d4 <NameModule+0xb4>)
 800412a:	0027      	movs	r7, r4
 800412c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800412e:	0021      	movs	r1, r4
 8004130:	0028      	movs	r0, r5
 8004132:	f7fb ffe7 	bl	8000104 <strcmp>
 8004136:	2800      	cmp	r0, #0
 8004138:	d043      	beq.n	80041c2 <NameModule+0xa2>
 800413a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800413c:	42bc      	cmp	r4, r7
 800413e:	d1f6      	bne.n	800412e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <NameModule+0xb8>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d90f      	bls.n	8004168 <NameModule+0x48>
 8004148:	4c24      	ldr	r4, [pc, #144]	; (80041dc <NameModule+0xbc>)
 800414a:	009f      	lsls	r7, r3, #2
 800414c:	18ff      	adds	r7, r7, r3
 800414e:	007f      	lsls	r7, r7, #1
 8004150:	0023      	movs	r3, r4
 8004152:	3b0a      	subs	r3, #10
 8004154:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004156:	0021      	movs	r1, r4
 8004158:	0028      	movs	r0, r5
 800415a:	f7fb ffd3 	bl	8000104 <strcmp>
 800415e:	2800      	cmp	r0, #0
 8004160:	d031      	beq.n	80041c6 <NameModule+0xa6>
 8004162:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004164:	42bc      	cmp	r4, r7
 8004166:	d1f6      	bne.n	8004156 <NameModule+0x36>
 8004168:	4c1d      	ldr	r4, [pc, #116]	; (80041e0 <NameModule+0xc0>)
 800416a:	0027      	movs	r7, r4
 800416c:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 800416e:	0021      	movs	r1, r4
 8004170:	0028      	movs	r0, r5
 8004172:	f7fb ffc7 	bl	8000104 <strcmp>
 8004176:	2800      	cmp	r0, #0
 8004178:	d028      	beq.n	80041cc <NameModule+0xac>
 800417a:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800417c:	42bc      	cmp	r4, r7
 800417e:	d1f6      	bne.n	800416e <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004180:	4c18      	ldr	r4, [pc, #96]	; (80041e4 <NameModule+0xc4>)
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <NameModule+0xc8>)
 8004184:	601c      	str	r4, [r3, #0]
 8004186:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800418c:	0038      	movs	r0, r7
 800418e:	f7fb ffc3 	bl	8000118 <strlen>
 8004192:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004194:	0039      	movs	r1, r7
 8004196:	0028      	movs	r0, r5
 8004198:	f00f fbce 	bl	8013938 <strncmp>
 800419c:	2800      	cmp	r0, #0
 800419e:	d017      	beq.n	80041d0 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80041a0:	6864      	ldr	r4, [r4, #4]
 80041a2:	6034      	str	r4, [r6, #0]
 80041a4:	2c00      	cmp	r4, #0
 80041a6:	d1ef      	bne.n	8004188 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	0098      	lsls	r0, r3, #2
 80041ac:	469c      	mov	ip, r3
 80041ae:	4460      	add	r0, ip
 80041b0:	0040      	lsls	r0, r0, #1
 80041b2:	4e0e      	ldr	r6, [pc, #56]	; (80041ec <NameModule+0xcc>)
 80041b4:	1980      	adds	r0, r0, r6
 80041b6:	0029      	movs	r1, r5
 80041b8:	f00f fbb6 	bl	8013928 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80041bc:	f7ff f89c 	bl	80032f8 <SaveEEalias>
	
	return result;
 80041c0:	e002      	b.n	80041c8 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80041c2:	2006      	movs	r0, #6
 80041c4:	e000      	b.n	80041c8 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80041c6:	2007      	movs	r0, #7
}
 80041c8:	b003      	add	sp, #12
 80041ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80041cc:	2007      	movs	r0, #7
 80041ce:	e7fb      	b.n	80041c8 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80041d0:	2008      	movs	r0, #8
 80041d2:	e7f9      	b.n	80041c8 <NameModule+0xa8>
 80041d4:	08016810 	.word	0x08016810
 80041d8:	20000030 	.word	0x20000030
 80041dc:	20000a62 	.word	0x20000a62
 80041e0:	20000950 	.word	0x20000950
 80041e4:	200000b4 	.word	0x200000b4
 80041e8:	20000bd4 	.word	0x20000bd4
 80041ec:	20000a58 	.word	0x20000a58

080041f0 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	46c6      	mov	lr, r8
 80041f4:	b500      	push	{lr}
 80041f6:	0007      	movs	r7, r0
 80041f8:	000e      	movs	r6, r1
 80041fa:	4d3a      	ldr	r5, [pc, #232]	; (80042e4 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80041fc:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80041fe:	0029      	movs	r1, r5
 8004200:	0030      	movs	r0, r6
 8004202:	f7fb ff7f 	bl	8000104 <strcmp>
 8004206:	2800      	cmp	r0, #0
 8004208:	d050      	beq.n	80042ac <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 800420a:	3401      	adds	r4, #1
 800420c:	350a      	adds	r5, #10
 800420e:	2c0a      	cmp	r4, #10
 8004210:	d1f5      	bne.n	80041fe <AddModuleToGroup+0xe>
 8004212:	4c35      	ldr	r4, [pc, #212]	; (80042e8 <AddModuleToGroup+0xf8>)
 8004214:	0025      	movs	r5, r4
 8004216:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004218:	0021      	movs	r1, r4
 800421a:	0030      	movs	r0, r6
 800421c:	f7fb ff72 	bl	8000104 <strcmp>
 8004220:	2800      	cmp	r0, #0
 8004222:	d058      	beq.n	80042d6 <AddModuleToGroup+0xe6>
 8004224:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004226:	42ac      	cmp	r4, r5
 8004228:	d1f6      	bne.n	8004218 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800422a:	4b30      	ldr	r3, [pc, #192]	; (80042ec <AddModuleToGroup+0xfc>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d90f      	bls.n	8004252 <AddModuleToGroup+0x62>
 8004232:	4c2f      	ldr	r4, [pc, #188]	; (80042f0 <AddModuleToGroup+0x100>)
 8004234:	009d      	lsls	r5, r3, #2
 8004236:	18ed      	adds	r5, r5, r3
 8004238:	006d      	lsls	r5, r5, #1
 800423a:	0023      	movs	r3, r4
 800423c:	3b0a      	subs	r3, #10
 800423e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004240:	0021      	movs	r1, r4
 8004242:	0030      	movs	r0, r6
 8004244:	f7fb ff5e 	bl	8000104 <strcmp>
 8004248:	2800      	cmp	r0, #0
 800424a:	d046      	beq.n	80042da <AddModuleToGroup+0xea>
 800424c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800424e:	42ac      	cmp	r4, r5
 8004250:	d1f6      	bne.n	8004240 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004252:	4c28      	ldr	r4, [pc, #160]	; (80042f4 <AddModuleToGroup+0x104>)
 8004254:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <AddModuleToGroup+0x108>)
 8004256:	601c      	str	r4, [r3, #0]
 8004258:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800425e:	0028      	movs	r0, r5
 8004260:	f7fb ff5a 	bl	8000118 <strlen>
 8004264:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004266:	0029      	movs	r1, r5
 8004268:	0030      	movs	r0, r6
 800426a:	f00f fb65 	bl	8013938 <strncmp>
 800426e:	2800      	cmp	r0, #0
 8004270:	d035      	beq.n	80042de <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004272:	6864      	ldr	r4, [r4, #4]
 8004274:	4643      	mov	r3, r8
 8004276:	601c      	str	r4, [r3, #0]
 8004278:	2c00      	cmp	r4, #0
 800427a:	d1ee      	bne.n	800425a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <AddModuleToGroup+0xf4>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01e      	beq.n	80042c2 <AddModuleToGroup+0xd2>
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <AddModuleToGroup+0xf4>)
 8004286:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004288:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	2a00      	cmp	r2, #0
 800428e:	d019      	beq.n	80042c4 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004290:	3401      	adds	r4, #1
 8004292:	330a      	adds	r3, #10
 8004294:	2c0a      	cmp	r4, #10
 8004296:	d1f8      	bne.n	800428a <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 8004298:	3f01      	subs	r7, #1
 800429a:	4918      	ldr	r1, [pc, #96]	; (80042fc <AddModuleToGroup+0x10c>)
 800429c:	007f      	lsls	r7, r7, #1
 800429e:	2201      	movs	r2, #1
 80042a0:	40a2      	lsls	r2, r4
 80042a2:	5a7b      	ldrh	r3, [r7, r1]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80042a8:	2000      	movs	r0, #0
 80042aa:	e007      	b.n	80042bc <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80042ac:	3f01      	subs	r7, #1
 80042ae:	4913      	ldr	r1, [pc, #76]	; (80042fc <AddModuleToGroup+0x10c>)
 80042b0:	007f      	lsls	r7, r7, #1
 80042b2:	2201      	movs	r2, #1
 80042b4:	40a2      	lsls	r2, r4
 80042b6:	5a7b      	ldrh	r3, [r7, r1]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	527b      	strh	r3, [r7, r1]
}
 80042bc:	bc04      	pop	{r2}
 80042be:	4690      	mov	r8, r2
 80042c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 80042c2:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 80042c4:	00a0      	lsls	r0, r4, #2
 80042c6:	1900      	adds	r0, r0, r4
 80042c8:	0040      	lsls	r0, r0, #1
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <AddModuleToGroup+0xf4>)
 80042cc:	1818      	adds	r0, r3, r0
 80042ce:	0031      	movs	r1, r6
 80042d0:	f00f fb2a 	bl	8013928 <strcpy>
			break;
 80042d4:	e7e0      	b.n	8004298 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80042d6:	2006      	movs	r0, #6
 80042d8:	e7f0      	b.n	80042bc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80042da:	2007      	movs	r0, #7
 80042dc:	e7ee      	b.n	80042bc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80042de:	2008      	movs	r0, #8
 80042e0:	e7ec      	b.n	80042bc <AddModuleToGroup+0xcc>
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	20000950 	.word	0x20000950
 80042e8:	08016810 	.word	0x08016810
 80042ec:	20000030 	.word	0x20000030
 80042f0:	20000a62 	.word	0x20000a62
 80042f4:	200000b4 	.word	0x200000b4
 80042f8:	20000bd8 	.word	0x20000bd8
 80042fc:	200009b4 	.word	0x200009b4

08004300 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004300:	b510      	push	{r4, lr}
 8004302:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004304:	201e      	movs	r0, #30
 8004306:	f00e fd07 	bl	8012d18 <malloc>
 800430a:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 800430c:	221e      	movs	r2, #30
 800430e:	2100      	movs	r1, #0
 8004310:	f00e fd40 	bl	8012d94 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004314:	4908      	ldr	r1, [pc, #32]	; (8004338 <GetDateString+0x38>)
 8004316:	7d8b      	ldrb	r3, [r1, #22]
 8004318:	7d0a      	ldrb	r2, [r1, #20]
 800431a:	3a01      	subs	r2, #1
 800431c:	0092      	lsls	r2, r2, #2
 800431e:	4807      	ldr	r0, [pc, #28]	; (800433c <GetDateString+0x3c>)
 8004320:	5812      	ldr	r2, [r2, r0]
 8004322:	8b08      	ldrh	r0, [r1, #24]
 8004324:	9001      	str	r0, [sp, #4]
 8004326:	7d49      	ldrb	r1, [r1, #21]
 8004328:	9100      	str	r1, [sp, #0]
 800432a:	4905      	ldr	r1, [pc, #20]	; (8004340 <GetDateString+0x40>)
 800432c:	0020      	movs	r0, r4
 800432e:	f00f fabf 	bl	80138b0 <siprintf>
	return buffer;
}
 8004332:	0020      	movs	r0, r4
 8004334:	b002      	add	sp, #8
 8004336:	bd10      	pop	{r4, pc}
 8004338:	20005adc 	.word	0x20005adc
 800433c:	08017014 	.word	0x08017014
 8004340:	08016a80 	.word	0x08016a80

08004344 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004344:	b500      	push	{lr}
 8004346:	b085      	sub	sp, #20
 8004348:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <Bridge+0x24>)
 800434c:	7819      	ldrb	r1, [r3, #0]
 800434e:	2301      	movs	r3, #1
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	3b02      	subs	r3, #2
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	3303      	adds	r3, #3
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	000b      	movs	r3, r1
 800435e:	f003 fdc5 	bl	8007eec <StartScastDMAStream>
}
 8004362:	b005      	add	sp, #20
 8004364:	bd00      	pop	{pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	20000b66 	.word	0x20000b66

0800436c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b087      	sub	sp, #28
 8004370:	0004      	movs	r4, r0
 8004372:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004374:	2300      	movs	r3, #0
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	2100      	movs	r1, #0
 8004384:	2000      	movs	r0, #0
 8004386:	f7fe fff9 	bl	800337c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800438a:	1e62      	subs	r2, r4, #1
 800438c:	00d3      	lsls	r3, r2, #3
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <Unbridge+0x78>)
 8004394:	589b      	ldr	r3, [r3, r2]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d015      	beq.n	80043c6 <Unbridge+0x5a>
 800439a:	1e6a      	subs	r2, r5, #1
 800439c:	00d3      	lsls	r3, r2, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <Unbridge+0x78>)
 80043a4:	589b      	ldr	r3, [r3, r2]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 80043aa:	0020      	movs	r0, r4
 80043ac:	f006 ffd6 	bl	800b35c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043b0:	2000      	movs	r0, #0
 80043b2:	e006      	b.n	80043c2 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 80043b4:	0020      	movs	r0, r4
 80043b6:	f006 ffd1 	bl	800b35c <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80043ba:	0028      	movs	r0, r5
 80043bc:	f006 ffce 	bl	800b35c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043c0:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80043c2:	b007      	add	sp, #28
 80043c4:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80043c6:	1e6a      	subs	r2, r5, #1
 80043c8:	00d3      	lsls	r3, r2, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <Unbridge+0x78>)
 80043d0:	589b      	ldr	r3, [r3, r2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80043d6:	0028      	movs	r0, r5
 80043d8:	f006 ffc0 	bl	800b35c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043dc:	2000      	movs	r0, #0
 80043de:	e7f0      	b.n	80043c2 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80043e0:	2068      	movs	r0, #104	; 0x68
 80043e2:	e7ee      	b.n	80043c2 <Unbridge+0x56>
 80043e4:	20001544 	.word	0x20001544

080043e8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80043ec:	7804      	ldrb	r4, [r0, #0]
 80043ee:	2c00      	cmp	r4, #0
 80043f0:	d010      	beq.n	8004414 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80043f2:	2603      	movs	r6, #3
 80043f4:	e004      	b.n	8004400 <StringToLowerCase+0x18>
 80043f6:	702a      	strb	r2, [r5, #0]
 80043f8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80043fa:	782c      	ldrb	r4, [r5, #0]
 80043fc:	2c00      	cmp	r4, #0
 80043fe:	d009      	beq.n	8004414 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004400:	f00e fc7c 	bl	8012cfc <__locale_ctype_ptr>
 8004404:	1900      	adds	r0, r0, r4
 8004406:	7843      	ldrb	r3, [r0, #1]
 8004408:	4033      	ands	r3, r6
 800440a:	0022      	movs	r2, r4
 800440c:	2b01      	cmp	r3, #1
 800440e:	d1f2      	bne.n	80043f6 <StringToLowerCase+0xe>
 8004410:	3220      	adds	r2, #32
 8004412:	e7f0      	b.n	80043f6 <StringToLowerCase+0xe>
	}
}
 8004414:	bd70      	pop	{r4, r5, r6, pc}
	...

08004418 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	46c6      	mov	lr, r8
 800441c:	b500      	push	{lr}
 800441e:	b088      	sub	sp, #32
 8004420:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004422:	4bdc      	ldr	r3, [pc, #880]	; (8004794 <ParseSnippetCondition+0x37c>)
 8004424:	781c      	ldrb	r4, [r3, #0]
 8004426:	2c05      	cmp	r4, #5
 8004428:	d100      	bne.n	800442c <ParseSnippetCondition+0x14>
 800442a:	e210      	b.n	800484e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800442c:	49da      	ldr	r1, [pc, #872]	; (8004798 <ParseSnippetCondition+0x380>)
 800442e:	00a3      	lsls	r3, r4, #2
 8004430:	191a      	adds	r2, r3, r4
 8004432:	0092      	lsls	r2, r2, #2
 8004434:	2000      	movs	r0, #0
 8004436:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004438:	191a      	adds	r2, r3, r4
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	188a      	adds	r2, r1, r2
 800443e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004440:	1918      	adds	r0, r3, r4
 8004442:	0080      	lsls	r0, r0, #2
 8004444:	3002      	adds	r0, #2
 8004446:	1840      	adds	r0, r0, r1
 8004448:	2204      	movs	r2, #4
 800444a:	2100      	movs	r1, #0
 800444c:	f00e fca2 	bl	8012d94 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004450:	782b      	ldrb	r3, [r5, #0]
 8004452:	2b62      	cmp	r3, #98	; 0x62
 8004454:	d102      	bne.n	800445c <ParseSnippetCondition+0x44>
 8004456:	78ab      	ldrb	r3, [r5, #2]
 8004458:	2b2e      	cmp	r3, #46	; 0x2e
 800445a:	d032      	beq.n	80044c2 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800445c:	4ecf      	ldr	r6, [pc, #828]	; (800479c <ParseSnippetCondition+0x384>)
 800445e:	0029      	movs	r1, r5
 8004460:	0030      	movs	r0, r6
 8004462:	f00f fa61 	bl	8013928 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004466:	4cce      	ldr	r4, [pc, #824]	; (80047a0 <ParseSnippetCondition+0x388>)
 8004468:	0021      	movs	r1, r4
 800446a:	0030      	movs	r0, r6
 800446c:	f010 f8dc 	bl	8014628 <strtok>
 8004470:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004472:	0021      	movs	r1, r4
 8004474:	2000      	movs	r0, #0
 8004476:	f010 f8d7 	bl	8014628 <strtok>
 800447a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800447c:	0021      	movs	r1, r4
 800447e:	2000      	movs	r0, #0
 8004480:	f010 f8d2 	bl	8014628 <strtok>
 8004484:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004486:	2d00      	cmp	r5, #0
 8004488:	d100      	bne.n	800448c <ParseSnippetCondition+0x74>
 800448a:	e1e5      	b.n	8004858 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800448c:	0028      	movs	r0, r5
 800448e:	f7ff f88f 	bl	80035b0 <IsModuleParameter>
 8004492:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004494:	d100      	bne.n	8004498 <ParseSnippetCondition+0x80>
 8004496:	e18f      	b.n	80047b8 <ParseSnippetCondition+0x3a0>
 8004498:	2e00      	cmp	r6, #0
 800449a:	d000      	beq.n	800449e <ParseSnippetCondition+0x86>
 800449c:	e18e      	b.n	80047bc <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 800449e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80044a0:	2c00      	cmp	r4, #0
 80044a2:	d000      	beq.n	80044a6 <ParseSnippetCondition+0x8e>
 80044a4:	e1d4      	b.n	8004850 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 80044a6:	4cbb      	ldr	r4, [pc, #748]	; (8004794 <ParseSnippetCondition+0x37c>)
 80044a8:	7823      	ldrb	r3, [r4, #0]
 80044aa:	49bb      	ldr	r1, [pc, #748]	; (8004798 <ParseSnippetCondition+0x380>)
 80044ac:	009a      	lsls	r2, r3, #2
 80044ae:	18d0      	adds	r0, r2, r3
 80044b0:	0080      	lsls	r0, r0, #2
 80044b2:	3602      	adds	r6, #2
 80044b4:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80044b6:	180a      	adds	r2, r1, r0
 80044b8:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80044ba:	3301      	adds	r3, #1
 80044bc:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 80044be:	2000      	movs	r0, #0
 80044c0:	e1c6      	b.n	8004850 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80044c2:	786e      	ldrb	r6, [r5, #1]
 80044c4:	3e30      	subs	r6, #48	; 0x30
 80044c6:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 80044c8:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80044ca:	2e03      	cmp	r6, #3
 80044cc:	d900      	bls.n	80044d0 <ParseSnippetCondition+0xb8>
 80044ce:	e1bf      	b.n	8004850 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80044d0:	4ab1      	ldr	r2, [pc, #708]	; (8004798 <ParseSnippetCondition+0x380>)
 80044d2:	00a3      	lsls	r3, r4, #2
 80044d4:	1919      	adds	r1, r3, r4
 80044d6:	0089      	lsls	r1, r1, #2
 80044d8:	3001      	adds	r0, #1
 80044da:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80044dc:	1853      	adds	r3, r2, r1
 80044de:	2200      	movs	r2, #0
 80044e0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80044e2:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80044e4:	1cef      	adds	r7, r5, #3
 80044e6:	3207      	adds	r2, #7
 80044e8:	49ae      	ldr	r1, [pc, #696]	; (80047a4 <ParseSnippetCondition+0x38c>)
 80044ea:	0038      	movs	r0, r7
 80044ec:	f00f fa24 	bl	8013938 <strncmp>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d121      	bne.n	8004538 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80044f4:	00a3      	lsls	r3, r4, #2
 80044f6:	191c      	adds	r4, r3, r4
 80044f8:	00a4      	lsls	r4, r4, #2
 80044fa:	4ba7      	ldr	r3, [pc, #668]	; (8004798 <ParseSnippetCondition+0x380>)
 80044fc:	191c      	adds	r4, r3, r4
 80044fe:	2305      	movs	r3, #5
 8004500:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004502:	00f2      	lsls	r2, r6, #3
 8004504:	1992      	adds	r2, r2, r6
 8004506:	4ba8      	ldr	r3, [pc, #672]	; (80047a8 <ParseSnippetCondition+0x390>)
 8004508:	189b      	adds	r3, r3, r2
 800450a:	7a1b      	ldrb	r3, [r3, #8]
 800450c:	07db      	lsls	r3, r3, #31
 800450e:	d504      	bpl.n	800451a <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004510:	4aa0      	ldr	r2, [pc, #640]	; (8004794 <ParseSnippetCondition+0x37c>)
 8004512:	7813      	ldrb	r3, [r2, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	7013      	strb	r3, [r2, #0]
 8004518:	e19a      	b.n	8004850 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800451a:	2301      	movs	r3, #1
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	2300      	movs	r3, #0
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	9303      	str	r3, [sp, #12]
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	2101      	movs	r1, #1
 800452e:	0030      	movs	r0, r6
 8004530:	f007 fdfa 	bl	800c128 <SetButtonEvents>
				status =BOS_OK;
 8004534:	2000      	movs	r0, #0
 8004536:	e7eb      	b.n	8004510 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004538:	220e      	movs	r2, #14
 800453a:	499c      	ldr	r1, [pc, #624]	; (80047ac <ParseSnippetCondition+0x394>)
 800453c:	0038      	movs	r0, r7
 800453e:	f00f f9fb 	bl	8013938 <strncmp>
 8004542:	2800      	cmp	r0, #0
 8004544:	d11c      	bne.n	8004580 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004546:	00a3      	lsls	r3, r4, #2
 8004548:	191c      	adds	r4, r3, r4
 800454a:	00a4      	lsls	r4, r4, #2
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <ParseSnippetCondition+0x380>)
 800454e:	191c      	adds	r4, r3, r4
 8004550:	2306      	movs	r3, #6
 8004552:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004554:	00f2      	lsls	r2, r6, #3
 8004556:	1992      	adds	r2, r2, r6
 8004558:	4b93      	ldr	r3, [pc, #588]	; (80047a8 <ParseSnippetCondition+0x390>)
 800455a:	189b      	adds	r3, r3, r2
 800455c:	7a1b      	ldrb	r3, [r3, #8]
 800455e:	079b      	lsls	r3, r3, #30
 8004560:	d4d6      	bmi.n	8004510 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004562:	2301      	movs	r3, #1
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	2300      	movs	r3, #0
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	9303      	str	r3, [sp, #12]
 800456c:	9302      	str	r3, [sp, #8]
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	2100      	movs	r1, #0
 8004576:	0030      	movs	r0, r6
 8004578:	f007 fdd6 	bl	800c128 <SetButtonEvents>
				status =BOS_OK;
 800457c:	2000      	movs	r0, #0
 800457e:	e7c7      	b.n	8004510 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004580:	220c      	movs	r2, #12
 8004582:	498b      	ldr	r1, [pc, #556]	; (80047b0 <ParseSnippetCondition+0x398>)
 8004584:	0038      	movs	r0, r7
 8004586:	f00f f9d7 	bl	8013938 <strncmp>
 800458a:	2800      	cmp	r0, #0
 800458c:	d17a      	bne.n	8004684 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 800458e:	00f2      	lsls	r2, r6, #3
 8004590:	1992      	adds	r2, r2, r6
 8004592:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <ParseSnippetCondition+0x390>)
 8004594:	189b      	adds	r3, r3, r2
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d030      	beq.n	80045fe <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 800459c:	00f2      	lsls	r2, r6, #3
 800459e:	1992      	adds	r2, r2, r6
 80045a0:	4b81      	ldr	r3, [pc, #516]	; (80047a8 <ParseSnippetCondition+0x390>)
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d04a      	beq.n	8004640 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 80045aa:	00f2      	lsls	r2, r6, #3
 80045ac:	1992      	adds	r2, r2, r6
 80045ae:	4b7e      	ldr	r3, [pc, #504]	; (80047a8 <ParseSnippetCondition+0x390>)
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80045b4:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1aa      	bne.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 80045ba:	4f77      	ldr	r7, [pc, #476]	; (8004798 <ParseSnippetCondition+0x380>)
 80045bc:	00a3      	lsls	r3, r4, #2
 80045be:	191b      	adds	r3, r3, r4
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	220b      	movs	r2, #11
 80045c6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80045c8:	0028      	movs	r0, r5
 80045ca:	300f      	adds	r0, #15
 80045cc:	f00e fb61 	bl	8012c92 <atoi>
 80045d0:	b2c0      	uxtb	r0, r0
 80045d2:	4b70      	ldr	r3, [pc, #448]	; (8004794 <ParseSnippetCondition+0x37c>)
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	0093      	lsls	r3, r2, #2
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	18ff      	adds	r7, r7, r3
 80045de:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80045e0:	2301      	movs	r3, #1
 80045e2:	9305      	str	r3, [sp, #20]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	9303      	str	r3, [sp, #12]
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	9001      	str	r0, [sp, #4]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	0030      	movs	r0, r6
 80045f6:	f007 fd97 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 80045fa:	2000      	movs	r0, #0
 80045fc:	e788      	b.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80045fe:	4f66      	ldr	r7, [pc, #408]	; (8004798 <ParseSnippetCondition+0x380>)
 8004600:	00a3      	lsls	r3, r4, #2
 8004602:	191b      	adds	r3, r3, r4
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2209      	movs	r2, #9
 800460a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800460c:	0028      	movs	r0, r5
 800460e:	300f      	adds	r0, #15
 8004610:	f00e fb3f 	bl	8012c92 <atoi>
 8004614:	b2c3      	uxtb	r3, r0
 8004616:	4a5f      	ldr	r2, [pc, #380]	; (8004794 <ParseSnippetCondition+0x37c>)
 8004618:	7811      	ldrb	r1, [r2, #0]
 800461a:	008a      	lsls	r2, r1, #2
 800461c:	1852      	adds	r2, r2, r1
 800461e:	0092      	lsls	r2, r2, #2
 8004620:	18bf      	adds	r7, r7, r2
 8004622:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004624:	2201      	movs	r2, #1
 8004626:	9205      	str	r2, [sp, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	9204      	str	r2, [sp, #16]
 800462c:	9203      	str	r2, [sp, #12]
 800462e:	9202      	str	r2, [sp, #8]
 8004630:	9201      	str	r2, [sp, #4]
 8004632:	9200      	str	r2, [sp, #0]
 8004634:	2100      	movs	r1, #0
 8004636:	0030      	movs	r0, r6
 8004638:	f007 fd76 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 800463c:	2000      	movs	r0, #0
 800463e:	e767      	b.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004640:	4f55      	ldr	r7, [pc, #340]	; (8004798 <ParseSnippetCondition+0x380>)
 8004642:	00a3      	lsls	r3, r4, #2
 8004644:	191b      	adds	r3, r3, r4
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	220a      	movs	r2, #10
 800464c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800464e:	0028      	movs	r0, r5
 8004650:	300f      	adds	r0, #15
 8004652:	f00e fb1e 	bl	8012c92 <atoi>
 8004656:	b2c0      	uxtb	r0, r0
 8004658:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <ParseSnippetCondition+0x37c>)
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	0093      	lsls	r3, r2, #2
 800465e:	189b      	adds	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	18ff      	adds	r7, r7, r3
 8004664:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004666:	2301      	movs	r3, #1
 8004668:	9305      	str	r3, [sp, #20]
 800466a:	2300      	movs	r3, #0
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	9302      	str	r3, [sp, #8]
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	2100      	movs	r1, #0
 800467a:	0030      	movs	r0, r6
 800467c:	f007 fd54 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 8004680:	2000      	movs	r0, #0
 8004682:	e745      	b.n	8004510 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004684:	220d      	movs	r2, #13
 8004686:	494b      	ldr	r1, [pc, #300]	; (80047b4 <ParseSnippetCondition+0x39c>)
 8004688:	0038      	movs	r0, r7
 800468a:	f00f f955 	bl	8013938 <strncmp>
 800468e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004690:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004692:	2b00      	cmp	r3, #0
 8004694:	d000      	beq.n	8004698 <ParseSnippetCondition+0x280>
 8004696:	e73b      	b.n	8004510 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004698:	00f2      	lsls	r2, r6, #3
 800469a:	1992      	adds	r2, r2, r6
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <ParseSnippetCondition+0x390>)
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	795b      	ldrb	r3, [r3, #5]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d031      	beq.n	800470a <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 80046a6:	00f2      	lsls	r2, r6, #3
 80046a8:	1992      	adds	r2, r2, r6
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <ParseSnippetCondition+0x390>)
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	799b      	ldrb	r3, [r3, #6]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d04c      	beq.n	800474e <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 80046b4:	00f2      	lsls	r2, r6, #3
 80046b6:	1992      	adds	r2, r2, r6
 80046b8:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <ParseSnippetCondition+0x390>)
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80046be:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d000      	beq.n	80046c6 <ParseSnippetCondition+0x2ae>
 80046c4:	e724      	b.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 80046c6:	4f34      	ldr	r7, [pc, #208]	; (8004798 <ParseSnippetCondition+0x380>)
 80046c8:	3314      	adds	r3, #20
 80046ca:	4698      	mov	r8, r3
 80046cc:	435c      	muls	r4, r3
 80046ce:	193c      	adds	r4, r7, r4
 80046d0:	3b06      	subs	r3, #6
 80046d2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80046d4:	0028      	movs	r0, r5
 80046d6:	3010      	adds	r0, #16
 80046d8:	f00e fadb 	bl	8012c92 <atoi>
 80046dc:	b2c0      	uxtb	r0, r0
 80046de:	4b2d      	ldr	r3, [pc, #180]	; (8004794 <ParseSnippetCondition+0x37c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	4642      	mov	r2, r8
 80046e4:	4353      	muls	r3, r2
 80046e6:	18ff      	adds	r7, r7, r3
 80046e8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 80046ea:	2301      	movs	r3, #1
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	9004      	str	r0, [sp, #16]
 80046f0:	2400      	movs	r4, #0
 80046f2:	9403      	str	r4, [sp, #12]
 80046f4:	9402      	str	r4, [sp, #8]
 80046f6:	9401      	str	r4, [sp, #4]
 80046f8:	9400      	str	r4, [sp, #0]
 80046fa:	0023      	movs	r3, r4
 80046fc:	0022      	movs	r2, r4
 80046fe:	0021      	movs	r1, r4
 8004700:	0030      	movs	r0, r6
 8004702:	f007 fd11 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 8004706:	0020      	movs	r0, r4
 8004708:	e702      	b.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 800470a:	4f23      	ldr	r7, [pc, #140]	; (8004798 <ParseSnippetCondition+0x380>)
 800470c:	00a3      	lsls	r3, r4, #2
 800470e:	191b      	adds	r3, r3, r4
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	220c      	movs	r2, #12
 8004716:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004718:	0028      	movs	r0, r5
 800471a:	3010      	adds	r0, #16
 800471c:	f00e fab9 	bl	8012c92 <atoi>
 8004720:	b2c0      	uxtb	r0, r0
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <ParseSnippetCondition+0x37c>)
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	0093      	lsls	r3, r2, #2
 8004728:	189b      	adds	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	18ff      	adds	r7, r7, r3
 800472e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004730:	2301      	movs	r3, #1
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	2300      	movs	r3, #0
 8004736:	9304      	str	r3, [sp, #16]
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	9002      	str	r0, [sp, #8]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	0030      	movs	r0, r6
 8004746:	f007 fcef 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 800474a:	2000      	movs	r0, #0
 800474c:	e6e0      	b.n	8004510 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 800474e:	4f12      	ldr	r7, [pc, #72]	; (8004798 <ParseSnippetCondition+0x380>)
 8004750:	00a3      	lsls	r3, r4, #2
 8004752:	191b      	adds	r3, r3, r4
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	220d      	movs	r2, #13
 800475a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800475c:	0028      	movs	r0, r5
 800475e:	3010      	adds	r0, #16
 8004760:	f00e fa97 	bl	8012c92 <atoi>
 8004764:	b2c0      	uxtb	r0, r0
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <ParseSnippetCondition+0x37c>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	0093      	lsls	r3, r2, #2
 800476c:	189b      	adds	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	18ff      	adds	r7, r7, r3
 8004772:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004774:	2301      	movs	r3, #1
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	2300      	movs	r3, #0
 800477a:	9304      	str	r3, [sp, #16]
 800477c:	9003      	str	r0, [sp, #12]
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	0030      	movs	r0, r6
 800478a:	f007 fccd 	bl	800c128 <SetButtonEvents>
					status =BOS_OK;
 800478e:	2000      	movs	r0, #0
 8004790:	e6be      	b.n	8004510 <ParseSnippetCondition+0xf8>
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	20000cf7 	.word	0x20000cf7
 8004798:	20005af8 	.word	0x20005af8
 800479c:	20000c5c 	.word	0x20000c5c
 80047a0:	080168dc 	.word	0x080168dc
 80047a4:	08018194 	.word	0x08018194
 80047a8:	200016a8 	.word	0x200016a8
 80047ac:	08017218 	.word	0x08017218
 80047b0:	08017228 	.word	0x08017228
 80047b4:	08017238 	.word	0x08017238
			else if(secondPart != NULL && thirdPart != NULL){
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	d04f      	beq.n	800485c <ParseSnippetCondition+0x444>
 80047bc:	2c00      	cmp	r4, #0
 80047be:	d04f      	beq.n	8004860 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 80047c0:	0020      	movs	r0, r4
 80047c2:	f7fe fef5 	bl	80035b0 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d024      	beq.n	8004814 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 80047ca:	4b27      	ldr	r3, [pc, #156]	; (8004868 <ParseSnippetCondition+0x450>)
 80047cc:	781c      	ldrb	r4, [r3, #0]
 80047ce:	4a27      	ldr	r2, [pc, #156]	; (800486c <ParseSnippetCondition+0x454>)
 80047d0:	00a3      	lsls	r3, r4, #2
 80047d2:	1919      	adds	r1, r3, r4
 80047d4:	0089      	lsls	r1, r1, #2
 80047d6:	2704      	movs	r7, #4
 80047d8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80047da:	1919      	adds	r1, r3, r4
 80047dc:	0089      	lsls	r1, r1, #2
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 80047e2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 80047e4:	4d20      	ldr	r5, [pc, #128]	; (8004868 <ParseSnippetCondition+0x450>)
 80047e6:	782c      	ldrb	r4, [r5, #0]
 80047e8:	0030      	movs	r0, r6
 80047ea:	f7fe feed 	bl	80035c8 <IsMathOperator>
 80047ee:	491f      	ldr	r1, [pc, #124]	; (800486c <ParseSnippetCondition+0x454>)
 80047f0:	00a3      	lsls	r3, r4, #2
 80047f2:	191b      	adds	r3, r3, r4
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	18cb      	adds	r3, r1, r3
 80047f8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80047fa:	782a      	ldrb	r2, [r5, #0]
 80047fc:	0093      	lsls	r3, r2, #2
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	18cb      	adds	r3, r1, r3
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02c      	beq.n	8004864 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 800480a:	3201      	adds	r2, #1
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <ParseSnippetCondition+0x450>)
 800480e:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004810:	2000      	movs	r0, #0
 8004812:	e01d      	b.n	8004850 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <ParseSnippetCondition+0x450>)
 8004816:	4698      	mov	r8, r3
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	4f14      	ldr	r7, [pc, #80]	; (800486c <ParseSnippetCondition+0x454>)
 800481c:	0093      	lsls	r3, r2, #2
 800481e:	1899      	adds	r1, r3, r2
 8004820:	0089      	lsls	r1, r1, #2
 8004822:	2003      	movs	r0, #3
 8004824:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004826:	187b      	adds	r3, r7, r1
 8004828:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 800482a:	0020      	movs	r0, r4
 800482c:	f00e fa2c 	bl	8012c88 <atof>
 8004830:	f7fe f8de 	bl	80029f0 <__aeabi_d2f>
 8004834:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004836:	4643      	mov	r3, r8
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	0098      	lsls	r0, r3, #2
 800483c:	18c0      	adds	r0, r0, r3
 800483e:	0080      	lsls	r0, r0, #2
 8004840:	3006      	adds	r0, #6
 8004842:	19c0      	adds	r0, r0, r7
 8004844:	2204      	movs	r2, #4
 8004846:	a907      	add	r1, sp, #28
 8004848:	f00e fa9b 	bl	8012d82 <memcpy>
 800484c:	e7ca      	b.n	80047e4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 800484e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004850:	b008      	add	sp, #32
 8004852:	bc04      	pop	{r2}
 8004854:	4690      	mov	r8, r2
 8004856:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004858:	2067      	movs	r0, #103	; 0x67
 800485a:	e7f9      	b.n	8004850 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 800485c:	2067      	movs	r0, #103	; 0x67
 800485e:	e7f7      	b.n	8004850 <ParseSnippetCondition+0x438>
 8004860:	2067      	movs	r0, #103	; 0x67
 8004862:	e7f5      	b.n	8004850 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004864:	2067      	movs	r0, #103	; 0x67
 8004866:	e7f3      	b.n	8004850 <ParseSnippetCondition+0x438>
 8004868:	20000cf7 	.word	0x20000cf7
 800486c:	20005af8 	.word	0x20005af8

08004870 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	000c      	movs	r4, r1
	switch(code){
 8004874:	2802      	cmp	r0, #2
 8004876:	d017      	beq.n	80048a8 <AddSnippet+0x38>
 8004878:	2803      	cmp	r0, #3
 800487a:	d003      	beq.n	8004884 <AddSnippet+0x14>
 800487c:	2801      	cmp	r0, #1
 800487e:	d00f      	beq.n	80048a0 <AddSnippet+0x30>
	return BOS_OK;
 8004880:	2000      	movs	r0, #0
 8004882:	e00c      	b.n	800489e <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004884:	4b35      	ldr	r3, [pc, #212]	; (800495c <AddSnippet+0xec>)
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	3a01      	subs	r2, #1
 800488a:	0093      	lsls	r3, r2, #2
 800488c:	189b      	adds	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4a33      	ldr	r2, [pc, #204]	; (8004960 <AddSnippet+0xf0>)
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	2201      	movs	r2, #1
 8004896:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004898:	f005 f95c 	bl	8009b54 <SaveToRO>
	return BOS_OK;
 800489c:	2000      	movs	r0, #0
}
 800489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 80048a0:	0008      	movs	r0, r1
 80048a2:	f7ff fdb9 	bl	8004418 <ParseSnippetCondition>
 80048a6:	e7fa      	b.n	800489e <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <AddSnippet+0xec>)
 80048aa:	781d      	ldrb	r5, [r3, #0]
 80048ac:	3d01      	subs	r5, #1
 80048ae:	00ab      	lsls	r3, r5, #2
 80048b0:	195b      	adds	r3, r3, r5
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <AddSnippet+0xf0>)
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	68de      	ldr	r6, [r3, #12]
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d03d      	beq.n	800493a <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80048be:	0030      	movs	r0, r6
 80048c0:	f7fb fc2a 	bl	8000118 <strlen>
 80048c4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80048c6:	0020      	movs	r0, r4
 80048c8:	f7fb fc26 	bl	8000118 <strlen>
 80048cc:	1839      	adds	r1, r7, r0
 80048ce:	3102      	adds	r1, #2
 80048d0:	0030      	movs	r0, r6
 80048d2:	f00e ff9f 	bl	8013814 <realloc>
 80048d6:	4e22      	ldr	r6, [pc, #136]	; (8004960 <AddSnippet+0xf0>)
 80048d8:	00ab      	lsls	r3, r5, #2
 80048da:	195d      	adds	r5, r3, r5
 80048dc:	00ad      	lsls	r5, r5, #2
 80048de:	1975      	adds	r5, r6, r5
 80048e0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80048e2:	4d1e      	ldr	r5, [pc, #120]	; (800495c <AddSnippet+0xec>)
 80048e4:	782a      	ldrb	r2, [r5, #0]
 80048e6:	3a01      	subs	r2, #1
 80048e8:	0093      	lsls	r3, r2, #2
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	18f3      	adds	r3, r6, r3
 80048f0:	1c7a      	adds	r2, r7, #1
 80048f2:	68d8      	ldr	r0, [r3, #12]
 80048f4:	1880      	adds	r0, r0, r2
 80048f6:	0021      	movs	r1, r4
 80048f8:	f00f f816 	bl	8013928 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 80048fc:	782a      	ldrb	r2, [r5, #0]
 80048fe:	3a01      	subs	r2, #1
 8004900:	0093      	lsls	r3, r2, #2
 8004902:	189b      	adds	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	18f6      	adds	r6, r6, r3
 8004908:	68f3      	ldr	r3, [r6, #12]
 800490a:	2213      	movs	r2, #19
 800490c:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <AddSnippet+0xec>)
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	3a01      	subs	r2, #1
 8004914:	0093      	lsls	r3, r2, #2
 8004916:	189b      	adds	r3, r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4911      	ldr	r1, [pc, #68]	; (8004960 <AddSnippet+0xf0>)
 800491c:	18cb      	adds	r3, r1, r3
 800491e:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004920:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1bb      	bne.n	800489e <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004926:	0090      	lsls	r0, r2, #2
 8004928:	1880      	adds	r0, r0, r2
 800492a:	0080      	lsls	r0, r0, #2
 800492c:	1840      	adds	r0, r0, r1
 800492e:	2214      	movs	r2, #20
 8004930:	2100      	movs	r1, #0
 8004932:	f00e fa2f 	bl	8012d94 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004936:	200e      	movs	r0, #14
 8004938:	e7b1      	b.n	800489e <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800493a:	0008      	movs	r0, r1
 800493c:	f7fb fbec 	bl	8000118 <strlen>
 8004940:	3001      	adds	r0, #1
 8004942:	f00e f9e9 	bl	8012d18 <malloc>
 8004946:	00ab      	lsls	r3, r5, #2
 8004948:	195d      	adds	r5, r3, r5
 800494a:	00ad      	lsls	r5, r5, #2
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <AddSnippet+0xf0>)
 800494e:	195d      	adds	r5, r3, r5
 8004950:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004952:	0021      	movs	r1, r4
 8004954:	f00e ffe8 	bl	8013928 <strcpy>
 8004958:	e7d9      	b.n	800490e <AddSnippet+0x9e>
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000cf7 	.word	0x20000cf7
 8004960:	20005af8 	.word	0x20005af8

08004964 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	46de      	mov	lr, fp
 8004968:	4657      	mov	r7, sl
 800496a:	464e      	mov	r6, r9
 800496c:	4645      	mov	r5, r8
 800496e:	b5e0      	push	{r5, r6, r7, lr}
 8004970:	b08b      	sub	sp, #44	; 0x2c
 8004972:	9004      	str	r0, [sp, #16]
 8004974:	4688      	mov	r8, r1
 8004976:	9203      	str	r2, [sp, #12]
 8004978:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 800497a:	2209      	movs	r2, #9
 800497c:	2100      	movs	r1, #0
 800497e:	a807      	add	r0, sp, #28
 8004980:	f00e fa08 	bl	8012d94 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004984:	4fd5      	ldr	r7, [pc, #852]	; (8004cdc <CLI_CommandParser+0x378>)
				if(id == myID){
 8004986:	002e      	movs	r6, r5
 8004988:	e034      	b.n	80049f4 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800498a:	2252      	movs	r2, #82	; 0x52
 800498c:	49d4      	ldr	r1, [pc, #848]	; (8004ce0 <CLI_CommandParser+0x37c>)
 800498e:	0020      	movs	r0, r4
 8004990:	f00e f9f7 	bl	8012d82 <memcpy>
				recordSnippet =0;
 8004994:	4bd1      	ldr	r3, [pc, #836]	; (8004cdc <CLI_CommandParser+0x378>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e044      	b.n	8004a26 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 800499c:	2206      	movs	r2, #6
 800499e:	49d1      	ldr	r1, [pc, #836]	; (8004ce4 <CLI_CommandParser+0x380>)
 80049a0:	9803      	ldr	r0, [sp, #12]
 80049a2:	f00e ffc9 	bl	8013938 <strncmp>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d053      	beq.n	8004a52 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 80049aa:	2d02      	cmp	r5, #2
 80049ac:	d05e      	beq.n	8004a6c <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 80049ae:	212e      	movs	r1, #46	; 0x2e
 80049b0:	9803      	ldr	r0, [sp, #12]
 80049b2:	f00e ffab 	bl	801390c <strchr>
 80049b6:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80049b8:	d006      	beq.n	80049c8 <CLI_CommandParser+0x64>
 80049ba:	3803      	subs	r0, #3
 80049bc:	2203      	movs	r2, #3
 80049be:	49ca      	ldr	r1, [pc, #808]	; (8004ce8 <CLI_CommandParser+0x384>)
 80049c0:	f00e ffba 	bl	8013938 <strncmp>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d160      	bne.n	8004a8a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80049c8:	2299      	movs	r2, #153	; 0x99
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	0021      	movs	r1, r4
 80049ce:	9803      	ldr	r0, [sp, #12]
 80049d0:	f009 f91a 	bl	800dc08 <FreeRTOS_CLIProcessCommand>
 80049d4:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80049d6:	7823      	ldrb	r3, [r4, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d000      	beq.n	80049de <CLI_CommandParser+0x7a>
 80049dc:	e16f      	b.n	8004cbe <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80049de:	0020      	movs	r0, r4
 80049e0:	f7fb fb9a 	bl	8000118 <strlen>
 80049e4:	0002      	movs	r2, r0
 80049e6:	2100      	movs	r1, #0
 80049e8:	0020      	movs	r0, r4
 80049ea:	f00e f9d3 	bl	8012d94 <memset>
	} while(xReturned != pdFALSE);
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d100      	bne.n	80049f4 <CLI_CommandParser+0x90>
 80049f2:	e1ab      	b.n	8004d4c <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 80049f4:	9803      	ldr	r0, [sp, #12]
 80049f6:	f7ff fcf7 	bl	80043e8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 80049fa:	783d      	ldrb	r5, [r7, #0]
 80049fc:	2d00      	cmp	r5, #0
 80049fe:	d1cd      	bne.n	800499c <CLI_CommandParser+0x38>
 8004a00:	2203      	movs	r2, #3
 8004a02:	49ba      	ldr	r1, [pc, #744]	; (8004cec <CLI_CommandParser+0x388>)
 8004a04:	9803      	ldr	r0, [sp, #12]
 8004a06:	f00e ff97 	bl	8013938 <strncmp>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1cf      	bne.n	80049ae <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	1cd9      	adds	r1, r3, #3
 8004a12:	3001      	adds	r0, #1
 8004a14:	f7ff ff2c 	bl	8004870 <AddSnippet>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d1b6      	bne.n	800498a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004a1c:	4baf      	ldr	r3, [pc, #700]	; (8004cdc <CLI_CommandParser+0x378>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004a22:	230d      	movs	r3, #13
 8004a24:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004a26:	7823      	ldrb	r3, [r4, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <CLI_CommandParser+0xca>
 8004a2c:	e186      	b.n	8004d3c <CLI_CommandParser+0x3d8>
 8004a2e:	4643      	mov	r3, r8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d100      	bne.n	8004a36 <CLI_CommandParser+0xd2>
 8004a34:	e19d      	b.n	8004d72 <CLI_CommandParser+0x40e>
 8004a36:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004a38:	0020      	movs	r0, r4
 8004a3a:	f7fb fb6d 	bl	8000118 <strlen>
 8004a3e:	b282      	uxth	r2, r0
 8004a40:	2301      	movs	r3, #1
 8004a42:	425b      	negs	r3, r3
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	3333      	adds	r3, #51	; 0x33
 8004a48:	0021      	movs	r1, r4
 8004a4a:	9804      	ldr	r0, [sp, #16]
 8004a4c:	f008 fec2 	bl	800d7d4 <writePxMutex>
 8004a50:	e7c5      	b.n	80049de <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004a52:	4ba2      	ldr	r3, [pc, #648]	; (8004cdc <CLI_CommandParser+0x378>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004a58:	49a5      	ldr	r1, [pc, #660]	; (8004cf0 <CLI_CommandParser+0x38c>)
 8004a5a:	3003      	adds	r0, #3
 8004a5c:	f7ff ff08 	bl	8004870 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004a60:	2241      	movs	r2, #65	; 0x41
 8004a62:	49a4      	ldr	r1, [pc, #656]	; (8004cf4 <CLI_CommandParser+0x390>)
 8004a64:	0020      	movs	r0, r4
 8004a66:	f00e f98c 	bl	8012d82 <memcpy>
			xReturned = pdFALSE;
 8004a6a:	e7dc      	b.n	8004a26 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004a6c:	9903      	ldr	r1, [sp, #12]
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7ff fefe 	bl	8004870 <AddSnippet>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d102      	bne.n	8004a7e <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004a78:	230d      	movs	r3, #13
 8004a7a:	7023      	strb	r3, [r4, #0]
 8004a7c:	e7d3      	b.n	8004a26 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004a7e:	2252      	movs	r2, #82	; 0x52
 8004a80:	4997      	ldr	r1, [pc, #604]	; (8004ce0 <CLI_CommandParser+0x37c>)
 8004a82:	0020      	movs	r0, r4
 8004a84:	f00e f97d 	bl	8012d82 <memcpy>
 8004a88:	e7cd      	b.n	8004a26 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004a8a:	f00e f937 	bl	8012cfc <__locale_ctype_ptr>
 8004a8e:	786b      	ldrb	r3, [r5, #1]
 8004a90:	18c0      	adds	r0, r0, r3
 8004a92:	7843      	ldrb	r3, [r0, #1]
 8004a94:	075b      	lsls	r3, r3, #29
 8004a96:	d497      	bmi.n	80049c8 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004a98:	9903      	ldr	r1, [sp, #12]
 8004a9a:	1a6a      	subs	r2, r5, r1
 8004a9c:	a807      	add	r0, sp, #28
 8004a9e:	f00e ff5c 	bl	801395a <strncpy>
				id =GetID(idString);
 8004aa2:	a807      	add	r0, sp, #28
 8004aa4:	f7ff fad8 	bl	8004058 <GetID>
 8004aa8:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004aaa:	4a93      	ldr	r2, [pc, #588]	; (8004cf8 <CLI_CommandParser+0x394>)
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	4693      	mov	fp, r2
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	d03d      	beq.n	8004b30 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004ab4:	2864      	cmp	r0, #100	; 0x64
 8004ab6:	d043      	beq.n	8004b40 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004ab8:	2866      	cmp	r0, #102	; 0x66
 8004aba:	d047      	beq.n	8004b4c <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004abc:	28ff      	cmp	r0, #255	; 0xff
 8004abe:	d04b      	beq.n	8004b58 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004ac0:	466b      	mov	r3, sp
 8004ac2:	7d1b      	ldrb	r3, [r3, #20]
 8004ac4:	469a      	mov	sl, r3
 8004ac6:	2bfe      	cmp	r3, #254	; 0xfe
 8004ac8:	d078      	beq.n	8004bbc <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004aca:	3501      	adds	r5, #1
 8004acc:	2206      	movs	r2, #6
 8004ace:	498b      	ldr	r1, [pc, #556]	; (8004cfc <CLI_CommandParser+0x398>)
 8004ad0:	0028      	movs	r0, r5
 8004ad2:	f00e ff31 	bl	8013938 <strncmp>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d000      	beq.n	8004adc <CLI_CommandParser+0x178>
 8004ada:	e0b4      	b.n	8004c46 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004adc:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <CLI_CommandParser+0x39c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004ae2:	2119      	movs	r1, #25
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	f003 f9db 	bl	8007ea0 <SendMessageToModule>
						osDelay(100);
 8004aea:	2064      	movs	r0, #100	; 0x64
 8004aec:	f008 fff9 	bl	800dae2 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004af0:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <CLI_CommandParser+0x3a0>)
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	4b80      	ldr	r3, [pc, #512]	; (8004cf8 <CLI_CommandParser+0x394>)
 8004af6:	7818      	ldrb	r0, [r3, #0]
 8004af8:	2300      	movs	r3, #0
 8004afa:	4651      	mov	r1, sl
 8004afc:	f005 f95e 	bl	8009dbc <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004b00:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <CLI_CommandParser+0x39c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d18e      	bne.n	8004a26 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004b08:	21fa      	movs	r1, #250	; 0xfa
 8004b0a:	0089      	lsls	r1, r1, #2
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f00a fb13 	bl	800f138 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004b12:	4b7d      	ldr	r3, [pc, #500]	; (8004d08 <CLI_CommandParser+0x3a4>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d085      	beq.n	8004a26 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004b1a:	4a7c      	ldr	r2, [pc, #496]	; (8004d0c <CLI_CommandParser+0x3a8>)
 8004b1c:	8813      	ldrh	r3, [r2, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004b22:	9b05      	ldr	r3, [sp, #20]
 8004b24:	0022      	movs	r2, r4
 8004b26:	497a      	ldr	r1, [pc, #488]	; (8004d10 <CLI_CommandParser+0x3ac>)
 8004b28:	0020      	movs	r0, r4
 8004b2a:	f00e fec1 	bl	80138b0 <siprintf>
 8004b2e:	e77a      	b.n	8004a26 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004b30:	2299      	movs	r2, #153	; 0x99
 8004b32:	1c68      	adds	r0, r5, #1
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	0021      	movs	r1, r4
 8004b38:	f009 f866 	bl	800dc08 <FreeRTOS_CLIProcessCommand>
 8004b3c:	0006      	movs	r6, r0
 8004b3e:	e74a      	b.n	80049d6 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004b40:	2227      	movs	r2, #39	; 0x27
 8004b42:	4974      	ldr	r1, [pc, #464]	; (8004d14 <CLI_CommandParser+0x3b0>)
 8004b44:	0020      	movs	r0, r4
 8004b46:	f00e f91c 	bl	8012d82 <memcpy>
 8004b4a:	e76c      	b.n	8004a26 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004b4c:	2225      	movs	r2, #37	; 0x25
 8004b4e:	4972      	ldr	r1, [pc, #456]	; (8004d18 <CLI_CommandParser+0x3b4>)
 8004b50:	0020      	movs	r0, r4
 8004b52:	f00e f916 	bl	8012d82 <memcpy>
 8004b56:	e766      	b.n	8004a26 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004b58:	221a      	movs	r2, #26
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	486f      	ldr	r0, [pc, #444]	; (8004d1c <CLI_CommandParser+0x3b8>)
 8004b5e:	f00e f919 	bl	8012d94 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004b62:	3501      	adds	r5, #1
 8004b64:	9803      	ldr	r0, [sp, #12]
 8004b66:	f7fb fad7 	bl	8000118 <strlen>
 8004b6a:	0006      	movs	r6, r0
 8004b6c:	ab07      	add	r3, sp, #28
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fb fad2 	bl	8000118 <strlen>
 8004b74:	1e72      	subs	r2, r6, #1
 8004b76:	1a12      	subs	r2, r2, r0
 8004b78:	0029      	movs	r1, r5
 8004b7a:	4869      	ldr	r0, [pc, #420]	; (8004d20 <CLI_CommandParser+0x3bc>)
 8004b7c:	f00e feed 	bl	801395a <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004b80:	9803      	ldr	r0, [sp, #12]
 8004b82:	f7fb fac9 	bl	8000118 <strlen>
 8004b86:	0006      	movs	r6, r0
 8004b88:	a807      	add	r0, sp, #28
 8004b8a:	f7fb fac5 	bl	8000118 <strlen>
 8004b8e:	1a33      	subs	r3, r6, r0
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2217      	movs	r2, #23
 8004b94:	21ff      	movs	r1, #255	; 0xff
 8004b96:	4658      	mov	r0, fp
 8004b98:	f003 f95a 	bl	8007e50 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004b9c:	2299      	movs	r2, #153	; 0x99
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	0021      	movs	r1, r4
 8004ba2:	0028      	movs	r0, r5
 8004ba4:	f009 f830 	bl	800dc08 <FreeRTOS_CLIProcessCommand>
 8004ba8:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004baa:	0020      	movs	r0, r4
 8004bac:	f7fb fab4 	bl	8000118 <strlen>
 8004bb0:	1820      	adds	r0, r4, r0
 8004bb2:	221d      	movs	r2, #29
 8004bb4:	495b      	ldr	r1, [pc, #364]	; (8004d24 <CLI_CommandParser+0x3c0>)
 8004bb6:	f00e f8e4 	bl	8012d82 <memcpy>
 8004bba:	e70c      	b.n	80049d6 <CLI_CommandParser+0x72>
					group =id >> 8;
 8004bbc:	9b05      	ldr	r3, [sp, #20]
 8004bbe:	121b      	asrs	r3, r3, #8
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	469a      	mov	sl, r3
 8004bc4:	4b58      	ldr	r3, [pc, #352]	; (8004d28 <CLI_CommandParser+0x3c4>)
 8004bc6:	4699      	mov	r9, r3
 8004bc8:	4652      	mov	r2, sl
 8004bca:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004bcc:	221a      	movs	r2, #26
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4852      	ldr	r0, [pc, #328]	; (8004d1c <CLI_CommandParser+0x3b8>)
 8004bd2:	f00e f8df 	bl	8012d94 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004bd6:	1c6b      	adds	r3, r5, #1
 8004bd8:	9305      	str	r3, [sp, #20]
 8004bda:	9803      	ldr	r0, [sp, #12]
 8004bdc:	f7fb fa9c 	bl	8000118 <strlen>
 8004be0:	0005      	movs	r5, r0
 8004be2:	aa07      	add	r2, sp, #28
 8004be4:	0010      	movs	r0, r2
 8004be6:	f7fb fa97 	bl	8000118 <strlen>
 8004bea:	3d01      	subs	r5, #1
 8004bec:	1a2a      	subs	r2, r5, r0
 8004bee:	9905      	ldr	r1, [sp, #20]
 8004bf0:	484b      	ldr	r0, [pc, #300]	; (8004d20 <CLI_CommandParser+0x3bc>)
 8004bf2:	f00e feb2 	bl	801395a <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004bf6:	9803      	ldr	r0, [sp, #12]
 8004bf8:	f7fb fa8e 	bl	8000118 <strlen>
 8004bfc:	0005      	movs	r5, r0
 8004bfe:	a807      	add	r0, sp, #28
 8004c00:	f7fb fa8a 	bl	8000118 <strlen>
 8004c04:	1a2b      	subs	r3, r5, r0
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2217      	movs	r2, #23
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	f003 f91f 	bl	8007e50 <BroadcastMessage>
					if(InGroup(myID,group))
 8004c12:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <CLI_CommandParser+0x394>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4a44      	ldr	r2, [pc, #272]	; (8004d2c <CLI_CommandParser+0x3c8>)
 8004c1c:	5a9b      	ldrh	r3, [r3, r2]
 8004c1e:	464a      	mov	r2, r9
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	4113      	asrs	r3, r2
 8004c24:	07db      	lsls	r3, r3, #31
 8004c26:	d406      	bmi.n	8004c36 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004c28:	ab07      	add	r3, sp, #28
 8004c2a:	0022      	movs	r2, r4
 8004c2c:	4940      	ldr	r1, [pc, #256]	; (8004d30 <CLI_CommandParser+0x3cc>)
 8004c2e:	0020      	movs	r0, r4
 8004c30:	f00e fe3e 	bl	80138b0 <siprintf>
 8004c34:	e6cf      	b.n	80049d6 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004c36:	2299      	movs	r2, #153	; 0x99
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	0021      	movs	r1, r4
 8004c3c:	9805      	ldr	r0, [sp, #20]
 8004c3e:	f008 ffe3 	bl	800dc08 <FreeRTOS_CLIProcessCommand>
 8004c42:	0006      	movs	r6, r0
 8004c44:	e7f0      	b.n	8004c28 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004c46:	9803      	ldr	r0, [sp, #12]
 8004c48:	f7fb fa66 	bl	8000118 <strlen>
 8004c4c:	0006      	movs	r6, r0
 8004c4e:	ab07      	add	r3, sp, #28
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fb fa61 	bl	8000118 <strlen>
 8004c56:	1e72      	subs	r2, r6, #1
 8004c58:	1a12      	subs	r2, r2, r0
 8004c5a:	0029      	movs	r1, r5
 8004c5c:	4830      	ldr	r0, [pc, #192]	; (8004d20 <CLI_CommandParser+0x3bc>)
 8004c5e:	f00e fe7c 	bl	801395a <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004c62:	9803      	ldr	r0, [sp, #12]
 8004c64:	f7fb fa58 	bl	8000118 <strlen>
 8004c68:	0005      	movs	r5, r0
 8004c6a:	a807      	add	r0, sp, #28
 8004c6c:	f7fb fa54 	bl	8000118 <strlen>
 8004c70:	3d01      	subs	r5, #1
 8004c72:	1a2a      	subs	r2, r5, r0
 8004c74:	b292      	uxth	r2, r2
 8004c76:	2117      	movs	r1, #23
 8004c78:	4650      	mov	r0, sl
 8004c7a:	f003 f911 	bl	8007ea0 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004c7e:	9a05      	ldr	r2, [sp, #20]
 8004c80:	492c      	ldr	r1, [pc, #176]	; (8004d34 <CLI_CommandParser+0x3d0>)
 8004c82:	0020      	movs	r0, r4
 8004c84:	f00e fe14 	bl	80138b0 <siprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004c88:	7823      	ldrb	r3, [r4, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <CLI_CommandParser+0x330>
 8004c8e:	4643      	mov	r3, r8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004c94:	0020      	movs	r0, r4
 8004c96:	f7fb fa3f 	bl	8000118 <strlen>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	0020      	movs	r0, r4
 8004ca0:	f00e f878 	bl	8012d94 <memset>
 8004ca4:	e72c      	b.n	8004b00 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fb fa36 	bl	8000118 <strlen>
 8004cac:	b282      	uxth	r2, r0
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	3331      	adds	r3, #49	; 0x31
 8004cb4:	0021      	movs	r1, r4
 8004cb6:	9804      	ldr	r0, [sp, #16]
 8004cb8:	f008 fd8c 	bl	800d7d4 <writePxMutex>
 8004cbc:	e7ea      	b.n	8004c94 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004cbe:	4643      	mov	r3, r8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d100      	bne.n	8004cc6 <CLI_CommandParser+0x362>
 8004cc4:	e68b      	b.n	80049de <CLI_CommandParser+0x7a>
 8004cc6:	e6b7      	b.n	8004a38 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004cc8:	2301      	movs	r3, #1
 8004cca:	425b      	negs	r3, r3
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	3333      	adds	r3, #51	; 0x33
 8004cd0:	2238      	movs	r2, #56	; 0x38
 8004cd2:	4919      	ldr	r1, [pc, #100]	; (8004d38 <CLI_CommandParser+0x3d4>)
 8004cd4:	9804      	ldr	r0, [sp, #16]
 8004cd6:	f008 fd7d 	bl	800d7d4 <writePxMutex>
}
 8004cda:	e043      	b.n	8004d64 <CLI_CommandParser+0x400>
 8004cdc:	20000d24 	.word	0x20000d24
 8004ce0:	08017050 	.word	0x08017050
 8004ce4:	080170a4 	.word	0x080170a4
 8004ce8:	080170f0 	.word	0x080170f0
 8004cec:	0801704c 	.word	0x0801704c
 8004cf0:	08016a44 	.word	0x08016a44
 8004cf4:	080170ac 	.word	0x080170ac
 8004cf8:	20000b66 	.word	0x20000b66
 8004cfc:	08017190 	.word	0x08017190
 8004d00:	20005a5c 	.word	0x20005a5c
 8004d04:	2000060b 	.word	0x2000060b
 8004d08:	20000be8 	.word	0x20000be8
 8004d0c:	20001334 	.word	0x20001334
 8004d10:	080171bc 	.word	0x080171bc
 8004d14:	080170f4 	.word	0x080170f4
 8004d18:	0801711c 	.word	0x0801711c
 8004d1c:	20000888 	.word	0x20000888
 8004d20:	20000a28 	.word	0x20000a28
 8004d24:	08017144 	.word	0x08017144
 8004d28:	20000cf6 	.word	0x20000cf6
 8004d2c:	200009b4 	.word	0x200009b4
 8004d30:	08017164 	.word	0x08017164
 8004d34:	08017198 	.word	0x08017198
 8004d38:	080171dc 	.word	0x080171dc
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d3c:	0020      	movs	r0, r4
 8004d3e:	f7fb f9eb 	bl	8000118 <strlen>
 8004d42:	0002      	movs	r2, r0
 8004d44:	2100      	movs	r1, #0
 8004d46:	0020      	movs	r0, r4
 8004d48:	f00e f824 	bl	8012d94 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004d4c:	2209      	movs	r2, #9
 8004d4e:	2100      	movs	r1, #0
 8004d50:	a807      	add	r0, sp, #28
 8004d52:	f00e f81f 	bl	8012d94 <memset>
	if(!recordSnippet && enableOutput)
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <CLI_CommandParser+0x420>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <CLI_CommandParser+0x400>
 8004d5e:	4643      	mov	r3, r8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1b1      	bne.n	8004cc8 <CLI_CommandParser+0x364>
}
 8004d64:	b00b      	add	sp, #44	; 0x2c
 8004d66:	bc3c      	pop	{r2, r3, r4, r5}
 8004d68:	4690      	mov	r8, r2
 8004d6a:	4699      	mov	r9, r3
 8004d6c:	46a2      	mov	sl, r4
 8004d6e:	46ab      	mov	fp, r5
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d72:	0020      	movs	r0, r4
 8004d74:	f7fb f9d0 	bl	8000118 <strlen>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	0020      	movs	r0, r4
 8004d7e:	f00e f809 	bl	8012d94 <memset>
 8004d82:	e7e3      	b.n	8004d4c <CLI_CommandParser+0x3e8>
 8004d84:	20000d24 	.word	0x20000d24

08004d88 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8a:	46ce      	mov	lr, r9
 8004d8c:	b500      	push	{lr}
 8004d8e:	b086      	sub	sp, #24
	char cRxedChar ='\0';
 8004d90:	230f      	movs	r3, #15
 8004d92:	aa02      	add	r2, sp, #8
 8004d94:	4694      	mov	ip, r2
 8004d96:	4463      	add	r3, ip
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4249      	negs	r1, r1
 8004da0:	2001      	movs	r0, #1
 8004da2:	f00a f9c9 	bl	800f138 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004da6:	f008 ffad 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8004daa:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8004dac:	23e1      	movs	r3, #225	; 0xe1
 8004dae:	031b      	lsls	r3, r3, #12
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <prvCLITask+0x154>)
 8004db2:	6892      	ldr	r2, [r2, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d00f      	beq.n	8004dd8 <prvCLITask+0x50>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004db8:	2401      	movs	r4, #1
			if(port != PcPort)
 8004dba:	4f49      	ldr	r7, [pc, #292]	; (8004ee0 <prvCLITask+0x158>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004dbc:	001d      	movs	r5, r3
 8004dbe:	e003      	b.n	8004dc8 <prvCLITask+0x40>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004dc0:	3401      	adds	r4, #1
 8004dc2:	b2e4      	uxtb	r4, r4
 8004dc4:	2c04      	cmp	r4, #4
 8004dc6:	d007      	beq.n	8004dd8 <prvCLITask+0x50>
			if(port != PcPort)
 8004dc8:	783b      	ldrb	r3, [r7, #0]
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d0f8      	beq.n	8004dc0 <prvCLITask+0x38>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004dce:	0029      	movs	r1, r5
 8004dd0:	0020      	movs	r0, r4
 8004dd2:	f008 fd49 	bl	800d868 <UpdateBaudrate>
 8004dd6:	e7f3      	b.n	8004dc0 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8004dd8:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <prvCLITask+0x15c>)
 8004dda:	881a      	ldrh	r2, [r3, #0]
 8004ddc:	0053      	lsls	r3, r2, #1
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4a41      	ldr	r2, [pc, #260]	; (8004ee8 <prvCLITask+0x160>)
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	4a41      	ldr	r2, [pc, #260]	; (8004eec <prvCLITask+0x164>)
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	4c41      	ldr	r4, [pc, #260]	; (8004ef0 <prvCLITask+0x168>)
 8004dec:	4d3c      	ldr	r5, [pc, #240]	; (8004ee0 <prvCLITask+0x158>)
 8004dee:	7829      	ldrb	r1, [r5, #0]
 8004df0:	9100      	str	r1, [sp, #0]
 8004df2:	4940      	ldr	r1, [pc, #256]	; (8004ef4 <prvCLITask+0x16c>)
 8004df4:	0020      	movs	r0, r4
 8004df6:	f00e fd5b 	bl	80138b0 <siprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8004dfa:	22a4      	movs	r2, #164	; 0xa4
 8004dfc:	7828      	ldrb	r0, [r5, #0]
 8004dfe:	230a      	movs	r3, #10
 8004e00:	0092      	lsls	r2, r2, #2
 8004e02:	493d      	ldr	r1, [pc, #244]	; (8004ef8 <prvCLITask+0x170>)
 8004e04:	f008 fd0e 	bl	800d824 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8004e08:	0020      	movs	r0, r4
 8004e0a:	f7fb f985 	bl	8000118 <strlen>
 8004e0e:	b282      	uxth	r2, r0
 8004e10:	7828      	ldrb	r0, [r5, #0]
 8004e12:	230a      	movs	r3, #10
 8004e14:	0021      	movs	r1, r4
 8004e16:	f008 fd05 	bl	800d824 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4699      	mov	r9, r3
		if(Read_In_CLI_Task_Flag == 1)
 8004e1e:	4c37      	ldr	r4, [pc, #220]	; (8004efc <prvCLITask+0x174>)
			cRxedChar = Rx_Data[PcPort - 1];
 8004e20:	4e2f      	ldr	r6, [pc, #188]	; (8004ee0 <prvCLITask+0x158>)
 8004e22:	4f37      	ldr	r7, [pc, #220]	; (8004f00 <prvCLITask+0x178>)
 8004e24:	e01e      	b.n	8004e64 <prvCLITask+0xdc>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <prvCLITask+0x158>)
 8004e28:	7818      	ldrb	r0, [r3, #0]
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	4935      	ldr	r1, [pc, #212]	; (8004f04 <prvCLITask+0x17c>)
 8004e30:	f008 fcf8 	bl	800d824 <writePxITMutex>
				if(cInputIndex == 0){
 8004e34:	464b      	mov	r3, r9
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d040      	beq.n	8004ebc <prvCLITask+0x134>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8004e3a:	4d33      	ldr	r5, [pc, #204]	; (8004f08 <prvCLITask+0x180>)
 8004e3c:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <prvCLITask+0x158>)
 8004e3e:	7818      	ldrb	r0, [r3, #0]
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	002a      	movs	r2, r5
 8004e44:	2101      	movs	r1, #1
 8004e46:	f7ff fd8d 	bl	8004964 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8004e4a:	0029      	movs	r1, r5
 8004e4c:	482f      	ldr	r0, [pc, #188]	; (8004f0c <prvCLITask+0x184>)
 8004e4e:	f00e fd6b 	bl	8013928 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8004e52:	2232      	movs	r2, #50	; 0x32
 8004e54:	2100      	movs	r1, #0
 8004e56:	0028      	movs	r0, r5
 8004e58:	f00d ff9c 	bl	8012d94 <memset>
				cInputIndex =0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4699      	mov	r9, r3
		taskYIELD();
 8004e60:	f00a fc24 	bl	800f6ac <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8004e64:	7823      	ldrb	r3, [r4, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d1fa      	bne.n	8004e60 <prvCLITask+0xd8>
			cRxedChar = Rx_Data[PcPort - 1];
 8004e6a:	7830      	ldrb	r0, [r6, #0]
 8004e6c:	1e42      	subs	r2, r0, #1
 8004e6e:	250f      	movs	r5, #15
 8004e70:	ab02      	add	r3, sp, #8
 8004e72:	469c      	mov	ip, r3
 8004e74:	4465      	add	r5, ip
 8004e76:	5cbb      	ldrb	r3, [r7, r2]
 8004e78:	702b      	strb	r3, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	54bb      	strb	r3, [r7, r2]
			Read_In_CLI_Task_Flag = 0;
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <prvCLITask+0x174>)
 8004e80:	7013      	strb	r3, [r2, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 8004e82:	330a      	adds	r3, #10
 8004e84:	2201      	movs	r2, #1
 8004e86:	0029      	movs	r1, r5
 8004e88:	f008 fccc 	bl	800d824 <writePxITMutex>
			if(cRxedChar == '\r'){
 8004e8c:	782b      	ldrb	r3, [r5, #0]
 8004e8e:	2b0d      	cmp	r3, #13
 8004e90:	d0c9      	beq.n	8004e26 <prvCLITask+0x9e>
				if(cRxedChar == '\n'){
 8004e92:	2b0a      	cmp	r3, #10
 8004e94:	d0e4      	beq.n	8004e60 <prvCLITask+0xd8>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d015      	beq.n	8004ec6 <prvCLITask+0x13e>
 8004e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9c:	d013      	beq.n	8004ec6 <prvCLITask+0x13e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8004e9e:	001a      	movs	r2, r3
 8004ea0:	3a20      	subs	r2, #32
 8004ea2:	2a5e      	cmp	r2, #94	; 0x5e
 8004ea4:	d8dc      	bhi.n	8004e60 <prvCLITask+0xd8>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8004ea6:	464a      	mov	r2, r9
 8004ea8:	2a31      	cmp	r2, #49	; 0x31
 8004eaa:	dcd9      	bgt.n	8004e60 <prvCLITask+0xd8>
							cInputString[cInputIndex] =cRxedChar;
 8004eac:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <prvCLITask+0x180>)
 8004eae:	4649      	mov	r1, r9
 8004eb0:	5453      	strb	r3, [r2, r1]
							cInputIndex++;
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	4699      	mov	r9, r3
 8004eba:	e7d1      	b.n	8004e60 <prvCLITask+0xd8>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8004ebc:	4913      	ldr	r1, [pc, #76]	; (8004f0c <prvCLITask+0x184>)
 8004ebe:	4812      	ldr	r0, [pc, #72]	; (8004f08 <prvCLITask+0x180>)
 8004ec0:	f00e fd32 	bl	8013928 <strcpy>
 8004ec4:	e7b9      	b.n	8004e3a <prvCLITask+0xb2>
					if(cInputIndex > 0){
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	ddc9      	ble.n	8004e60 <prvCLITask+0xd8>
						cInputIndex--;
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	4699      	mov	r9, r3
						cInputString[cInputIndex] ='\0';
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <prvCLITask+0x180>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	545a      	strb	r2, [r3, r1]
 8004eda:	e7c1      	b.n	8004e60 <prvCLITask+0xd8>
 8004edc:	20005adc 	.word	0x20005adc
 8004ee0:	2000060b 	.word	0x2000060b
 8004ee4:	20000064 	.word	0x20000064
 8004ee8:	08016a94 	.word	0x08016a94
 8004eec:	20000b66 	.word	0x20000b66
 8004ef0:	20000cf8 	.word	0x20000cf8
 8004ef4:	08017248 	.word	0x08017248
 8004ef8:	08017274 	.word	0x08017274
 8004efc:	20000613 	.word	0x20000613
 8004f00:	20000da4 	.word	0x20000da4
 8004f04:	08018b30 	.word	0x08018b30
 8004f08:	20000c28 	.word	0x20000c28
 8004f0c:	20000cc4 	.word	0x20000cc4

08004f10 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <ParseSnippetCommand+0x78>)
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0093      	lsls	r3, r2, #2
 8004f1c:	189b      	adds	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4a1a      	ldr	r2, [pc, #104]	; (8004f8c <ParseSnippetCommand+0x7c>)
 8004f22:	18d3      	adds	r3, r2, r3
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02c      	beq.n	8004f84 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8004f2a:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	782b      	ldrb	r3, [r5, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d012      	beq.n	8004f62 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8004f3c:	2113      	movs	r1, #19
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f00e fce4 	bl	801390c <strchr>
 8004f44:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8004f46:	d011      	beq.n	8004f6c <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8004f48:	1b42      	subs	r2, r0, r5
 8004f4a:	0029      	movs	r1, r5
 8004f4c:	0020      	movs	r0, r4
 8004f4e:	f00e fd04 	bl	801395a <strncpy>
		ptrStart =ptrEnd + 1;
 8004f52:	3601      	adds	r6, #1
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f56:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8004f58:	2001      	movs	r0, #1
 8004f5a:	e006      	b.n	8004f6a <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f5e:	6018      	str	r0, [r3, #0]
 8004f60:	e7e7      	b.n	8004f32 <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
		return false;
 8004f68:	2000      	movs	r0, #0
}
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8004f6c:	0029      	movs	r1, r5
 8004f6e:	0020      	movs	r0, r4
 8004f70:	f00e fcda 	bl	8013928 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8004f74:	0020      	movs	r0, r4
 8004f76:	f7fb f8cf 	bl	8000118 <strlen>
 8004f7a:	182d      	adds	r5, r5, r0
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <ParseSnippetCommand+0x80>)
 8004f7e:	601d      	str	r5, [r3, #0]
	return true;
 8004f80:	2001      	movs	r0, #1
 8004f82:	e7f2      	b.n	8004f6a <ParseSnippetCommand+0x5a>
		return false;
 8004f84:	2000      	movs	r0, #0
 8004f86:	e7f0      	b.n	8004f6a <ParseSnippetCommand+0x5a>
 8004f88:	20000cf7 	.word	0x20000cf7
 8004f8c:	20005af8 	.word	0x20005af8
 8004f90:	20000d20 	.word	0x20000d20

08004f94 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	b083      	sub	sp, #12
 8004f98:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8004f9a:	0083      	lsls	r3, r0, #2
 8004f9c:	181b      	adds	r3, r3, r0
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a3f      	ldr	r2, [pc, #252]	; (80050a0 <CheckSnippetCondition+0x10c>)
 8004fa2:	5c9b      	ldrb	r3, [r3, r2]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d003      	beq.n	8004fb0 <CheckSnippetCondition+0x1c>
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d015      	beq.n	8004fd8 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8004fac:	2000      	movs	r0, #0
 8004fae:	e011      	b.n	8004fd4 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8004fb0:	493b      	ldr	r1, [pc, #236]	; (80050a0 <CheckSnippetCondition+0x10c>)
 8004fb2:	0083      	lsls	r3, r0, #2
 8004fb4:	181a      	adds	r2, r3, r0
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8004fba:	7890      	ldrb	r0, [r2, #2]
 8004fbc:	00c2      	lsls	r2, r0, #3
 8004fbe:	1812      	adds	r2, r2, r0
 8004fc0:	191b      	adds	r3, r3, r4
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	18cb      	adds	r3, r1, r3
 8004fc6:	4937      	ldr	r1, [pc, #220]	; (80050a4 <CheckSnippetCondition+0x110>)
 8004fc8:	5c50      	ldrb	r0, [r2, r1]
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	1ac0      	subs	r0, r0, r3
 8004fce:	4243      	negs	r3, r0
 8004fd0:	4158      	adcs	r0, r3
 8004fd2:	b2c0      	uxtb	r0, r0
}
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8004fd8:	4e31      	ldr	r6, [pc, #196]	; (80050a0 <CheckSnippetCondition+0x10c>)
 8004fda:	0085      	lsls	r5, r0, #2
 8004fdc:	182b      	adds	r3, r5, r0
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	18f3      	adds	r3, r6, r3
 8004fe2:	78da      	ldrb	r2, [r3, #3]
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0053      	lsls	r3, r2, #1
 8004fe8:	189b      	adds	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4a2e      	ldr	r2, [pc, #184]	; (80050a8 <CheckSnippetCondition+0x114>)
 8004fee:	589b      	ldr	r3, [r3, r2]
 8004ff0:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004ff2:	1829      	adds	r1, r5, r0
 8004ff4:	0089      	lsls	r1, r1, #2
 8004ff6:	3106      	adds	r1, #6
 8004ff8:	1989      	adds	r1, r1, r6
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	a801      	add	r0, sp, #4
 8004ffe:	f00d fec0 	bl	8012d82 <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005002:	192d      	adds	r5, r5, r4
 8005004:	00ad      	lsls	r5, r5, #2
 8005006:	1975      	adds	r5, r6, r5
 8005008:	786b      	ldrb	r3, [r5, #1]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d83f      	bhi.n	800508e <CheckSnippetCondition+0xfa>
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <CheckSnippetCondition+0x118>)
 8005012:	58d3      	ldr	r3, [r2, r3]
 8005014:	469f      	mov	pc, r3
					if(flt1 == flt2)
 8005016:	1c39      	adds	r1, r7, #0
 8005018:	9801      	ldr	r0, [sp, #4]
 800501a:	f7fb fa4f 	bl	80004bc <__aeabi_fcmpeq>
 800501e:	1e43      	subs	r3, r0, #1
 8005020:	4198      	sbcs	r0, r3
 8005022:	e7d7      	b.n	8004fd4 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005024:	1c39      	adds	r1, r7, #0
 8005026:	9801      	ldr	r0, [sp, #4]
 8005028:	f7fb fa4e 	bl	80004c8 <__aeabi_fcmplt>
 800502c:	1e43      	subs	r3, r0, #1
 800502e:	4198      	sbcs	r0, r3
 8005030:	e7d0      	b.n	8004fd4 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005032:	1c39      	adds	r1, r7, #0
 8005034:	9801      	ldr	r0, [sp, #4]
 8005036:	f7fb fa5b 	bl	80004f0 <__aeabi_fcmpgt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d029      	beq.n	8005092 <CheckSnippetCondition+0xfe>
 800503e:	2100      	movs	r1, #0
 8005040:	1c38      	adds	r0, r7, #0
 8005042:	f7fb fa3b 	bl	80004bc <__aeabi_fcmpeq>
 8005046:	4243      	negs	r3, r0
 8005048:	4158      	adcs	r0, r3
 800504a:	e7c3      	b.n	8004fd4 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 800504c:	1c39      	adds	r1, r7, #0
 800504e:	9801      	ldr	r0, [sp, #4]
 8005050:	f7fb fa44 	bl	80004dc <__aeabi_fcmple>
 8005054:	1e43      	subs	r3, r0, #1
 8005056:	4198      	sbcs	r0, r3
 8005058:	e7bc      	b.n	8004fd4 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800505a:	1c39      	adds	r1, r7, #0
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	f7fb fa51 	bl	8000504 <__aeabi_fcmpge>
 8005062:	2800      	cmp	r0, #0
 8005064:	d017      	beq.n	8005096 <CheckSnippetCondition+0x102>
 8005066:	2100      	movs	r1, #0
 8005068:	1c38      	adds	r0, r7, #0
 800506a:	f7fb fa27 	bl	80004bc <__aeabi_fcmpeq>
 800506e:	4243      	negs	r3, r0
 8005070:	4158      	adcs	r0, r3
 8005072:	e7af      	b.n	8004fd4 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005074:	1c39      	adds	r1, r7, #0
 8005076:	9801      	ldr	r0, [sp, #4]
 8005078:	f7fb fa20 	bl	80004bc <__aeabi_fcmpeq>
 800507c:	2800      	cmp	r0, #0
 800507e:	d10c      	bne.n	800509a <CheckSnippetCondition+0x106>
 8005080:	2100      	movs	r1, #0
 8005082:	1c38      	adds	r0, r7, #0
 8005084:	f7fb fa1a 	bl	80004bc <__aeabi_fcmpeq>
 8005088:	4243      	negs	r3, r0
 800508a:	4158      	adcs	r0, r3
 800508c:	e7a2      	b.n	8004fd4 <CheckSnippetCondition+0x40>
	return false;
 800508e:	2000      	movs	r0, #0
 8005090:	e7a0      	b.n	8004fd4 <CheckSnippetCondition+0x40>
 8005092:	2000      	movs	r0, #0
 8005094:	e79e      	b.n	8004fd4 <CheckSnippetCondition+0x40>
 8005096:	2000      	movs	r0, #0
 8005098:	e79c      	b.n	8004fd4 <CheckSnippetCondition+0x40>
 800509a:	2000      	movs	r0, #0
 800509c:	e79a      	b.n	8004fd4 <CheckSnippetCondition+0x40>
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	20005af8 	.word	0x20005af8
 80050a4:	200016a8 	.word	0x200016a8
 80050a8:	20000098 	.word	0x20000098
 80050ac:	08017030 	.word	0x08017030

080050b0 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80050b2:	f008 fe27 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 80050b6:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80050b8:	4b1c      	ldr	r3, [pc, #112]	; (800512c <ExecuteSnippet+0x7c>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d032      	beq.n	8005126 <ExecuteSnippet+0x76>
 80050c0:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80050c2:	4f1b      	ldr	r7, [pc, #108]	; (8005130 <ExecuteSnippet+0x80>)
 80050c4:	e01a      	b.n	80050fc <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <ExecuteSnippet+0x84>)
 80050c8:	7818      	ldrb	r0, [r3, #0]
 80050ca:	002b      	movs	r3, r5
 80050cc:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <ExecuteSnippet+0x88>)
 80050ce:	2100      	movs	r1, #0
 80050d0:	f7ff fc48 	bl	8004964 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050d4:	0028      	movs	r0, r5
 80050d6:	f7fb f81f 	bl	8000118 <strlen>
 80050da:	0002      	movs	r2, r0
 80050dc:	2100      	movs	r1, #0
 80050de:	0028      	movs	r0, r5
 80050e0:	f00d fe58 	bl	8012d94 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80050e4:	4914      	ldr	r1, [pc, #80]	; (8005138 <ExecuteSnippet+0x88>)
 80050e6:	68f0      	ldr	r0, [r6, #12]
 80050e8:	f7ff ff12 	bl	8004f10 <ParseSnippetCommand>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1ea      	bne.n	80050c6 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80050f0:	3401      	adds	r4, #1
 80050f2:	b2a4      	uxth	r4, r4
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <ExecuteSnippet+0x7c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d914      	bls.n	8005126 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80050fc:	00a3      	lsls	r3, r4, #2
 80050fe:	191b      	adds	r3, r3, r4
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	7c1b      	ldrb	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f2      	beq.n	80050f0 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800510a:	b2e0      	uxtb	r0, r4
 800510c:	f7ff ff42 	bl	8004f94 <CheckSnippetCondition>
 8005110:	2800      	cmp	r0, #0
 8005112:	d0ed      	beq.n	80050f0 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <ExecuteSnippet+0x8c>)
 8005116:	2220      	movs	r2, #32
 8005118:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800511a:	00a3      	lsls	r3, r4, #2
 800511c:	191e      	adds	r6, r3, r4
 800511e:	00b6      	lsls	r6, r6, #2
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <ExecuteSnippet+0x80>)
 8005122:	199e      	adds	r6, r3, r6
 8005124:	e7de      	b.n	80050e4 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005126:	2000      	movs	r0, #0
 8005128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	20000cf7 	.word	0x20000cf7
 8005130:	20005af8 	.word	0x20005af8
 8005134:	2000060b 	.word	0x2000060b
 8005138:	20000c90 	.word	0x20000c90
 800513c:	20005a5c 	.word	0x20005a5c

08005140 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005140:	2000      	movs	r0, #0
 8005142:	4770      	bx	lr

08005144 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	0005      	movs	r5, r0
 800514a:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 800514c:	2300      	movs	r3, #0
 800514e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005150:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005152:	aa01      	add	r2, sp, #4
 8005154:	2101      	movs	r1, #1
 8005156:	0020      	movs	r0, r4
 8005158:	f008 fdd8 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800515c:	2300      	movs	r3, #0
 800515e:	56c3      	ldrsb	r3, [r0, r3]
 8005160:	2b70      	cmp	r3, #112	; 0x70
 8005162:	d00e      	beq.n	8005182 <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005164:	466a      	mov	r2, sp
 8005166:	2102      	movs	r1, #2
 8005168:	0020      	movs	r0, r4
 800516a:	f008 fdcf 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800516e:	f00d fd96 	bl	8012c9e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005172:	2213      	movs	r2, #19
 8005174:	490f      	ldr	r1, [pc, #60]	; (80051b4 <setBaudrateCommand+0x70>)
 8005176:	0028      	movs	r0, r5
 8005178:	f00d fe03 	bl	8012d82 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800517c:	2000      	movs	r0, #0
 800517e:	b002      	add	sp, #8
 8005180:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005182:	3001      	adds	r0, #1
 8005184:	f00d fd8b 	bl	8012c9e <atol>
 8005188:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800518a:	466a      	mov	r2, sp
 800518c:	2102      	movs	r1, #2
 800518e:	0020      	movs	r0, r4
 8005190:	f008 fdbc 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005194:	f00d fd83 	bl	8012c9e <atol>
 8005198:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 800519a:	b2f0      	uxtb	r0, r6
 800519c:	0021      	movs	r1, r4
 800519e:	f008 fb63 	bl	800d868 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80051a2:	23ff      	movs	r3, #255	; 0xff
 80051a4:	4033      	ands	r3, r6
 80051a6:	0022      	movs	r2, r4
 80051a8:	4903      	ldr	r1, [pc, #12]	; (80051b8 <setBaudrateCommand+0x74>)
 80051aa:	0028      	movs	r0, r5
 80051ac:	f00e fb80 	bl	80138b0 <siprintf>
 80051b0:	e7e4      	b.n	800517c <setBaudrateCommand+0x38>
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	08017f00 	.word	0x08017f00
 80051b8:	08017ed8 	.word	0x08017ed8

080051bc <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80051bc:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80051be:	4b03      	ldr	r3, [pc, #12]	; (80051cc <flashsizeCommand+0x10>)
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	4903      	ldr	r1, [pc, #12]	; (80051d0 <flashsizeCommand+0x14>)
 80051c4:	f00e fb74 	bl	80138b0 <siprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80051c8:	2000      	movs	r0, #0
 80051ca:	bd10      	pop	{r4, pc}
 80051cc:	1ffff7cc 	.word	0x1ffff7cc
 80051d0:	080178cc 	.word	0x080178cc

080051d4 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80051d4:	b510      	push	{r4, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	0004      	movs	r4, r0
 80051da:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80051dc:	2300      	movs	r3, #0
 80051de:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80051e4:	aa01      	add	r2, sp, #4
 80051e6:	2101      	movs	r1, #1
 80051e8:	f008 fd90 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80051ec:	7803      	ldrb	r3, [r0, #0]
 80051ee:	3b32      	subs	r3, #50	; 0x32
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80051f4:	2215      	movs	r2, #21
 80051f6:	490b      	ldr	r1, [pc, #44]	; (8005224 <GetReadPrecentageCommand+0x50>)
 80051f8:	0020      	movs	r0, r4
 80051fa:	f00d fdc2 	bl	8012d82 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80051fe:	2000      	movs	r0, #0
 8005200:	b002      	add	sp, #8
 8005202:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005204:	f00d fd4b 	bl	8012c9e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005208:	b2c0      	uxtb	r0, r0
 800520a:	4669      	mov	r1, sp
 800520c:	f007 fa28 	bl	800c660 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005210:	9800      	ldr	r0, [sp, #0]
 8005212:	f7fd fb9b 	bl	800294c <__aeabi_f2d>
 8005216:	0002      	movs	r2, r0
 8005218:	000b      	movs	r3, r1
 800521a:	4903      	ldr	r1, [pc, #12]	; (8005228 <GetReadPrecentageCommand+0x54>)
 800521c:	0020      	movs	r0, r4
 800521e:	f00e fb47 	bl	80138b0 <siprintf>
 8005222:	e7ec      	b.n	80051fe <GetReadPrecentageCommand+0x2a>
 8005224:	080175c8 	.word	0x080175c8
 8005228:	080175a4 	.word	0x080175a4

0800522c <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800522c:	b510      	push	{r4, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005232:	2300      	movs	r3, #0
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005238:	4669      	mov	r1, sp
 800523a:	a801      	add	r0, sp, #4
 800523c:	f007 f952 	bl	800c4e4 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005240:	a901      	add	r1, sp, #4
 8005242:	0020      	movs	r0, r4
 8005244:	f00e fb70 	bl	8013928 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005248:	9800      	ldr	r0, [sp, #0]
 800524a:	f7fd fb7f 	bl	800294c <__aeabi_f2d>
 800524e:	0002      	movs	r2, r0
 8005250:	000b      	movs	r3, r1
 8005252:	4903      	ldr	r1, [pc, #12]	; (8005260 <ReadVrefCommand+0x34>)
 8005254:	0020      	movs	r0, r4
 8005256:	f00e fb2b 	bl	80138b0 <siprintf>
}
 800525a:	2000      	movs	r0, #0
 800525c:	b002      	add	sp, #8
 800525e:	bd10      	pop	{r4, pc}
 8005260:	08017614 	.word	0x08017614

08005264 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005264:	b510      	push	{r4, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800526a:	2300      	movs	r3, #0
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005270:	4669      	mov	r1, sp
 8005272:	a801      	add	r0, sp, #4
 8005274:	f007 f936 	bl	800c4e4 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005278:	a901      	add	r1, sp, #4
 800527a:	0020      	movs	r0, r4
 800527c:	f00e fb54 	bl	8013928 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005280:	9801      	ldr	r0, [sp, #4]
 8005282:	f7fd fb63 	bl	800294c <__aeabi_f2d>
 8005286:	0002      	movs	r2, r0
 8005288:	000b      	movs	r3, r1
 800528a:	4903      	ldr	r1, [pc, #12]	; (8005298 <ReadTempCommand+0x34>)
 800528c:	0020      	movs	r0, r4
 800528e:	f00e fb0f 	bl	80138b0 <siprintf>
}
 8005292:	2000      	movs	r0, #0
 8005294:	b002      	add	sp, #8
 8005296:	bd10      	pop	{r4, pc}
 8005298:	080175e0 	.word	0x080175e0

0800529c <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	0005      	movs	r5, r0
 80052a2:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80052a8:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80052ae:	aa03      	add	r2, sp, #12
 80052b0:	2101      	movs	r1, #1
 80052b2:	0030      	movs	r0, r6
 80052b4:	f008 fd2a 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80052b8:	0004      	movs	r4, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80052ba:	aa02      	add	r2, sp, #8
 80052bc:	2102      	movs	r1, #2
 80052be:	0030      	movs	r0, r6
 80052c0:	f008 fd24 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80052c4:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80052c6:	7823      	ldrb	r3, [r4, #0]
 80052c8:	3b32      	subs	r3, #50	; 0x32
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d907      	bls.n	80052de <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80052ce:	2215      	movs	r2, #21
 80052d0:	4919      	ldr	r1, [pc, #100]	; (8005338 <ADCReadCommand+0x9c>)
 80052d2:	0028      	movs	r0, r5
 80052d4:	f00d fd55 	bl	8012d82 <memcpy>
}
 80052d8:	2000      	movs	r0, #0
 80052da:	b004      	add	sp, #16
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80052de:	0020      	movs	r0, r4
 80052e0:	f00d fcdd 	bl	8012c9e <atol>
 80052e4:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80052e6:	4915      	ldr	r1, [pc, #84]	; (800533c <ADCReadCommand+0xa0>)
 80052e8:	0030      	movs	r0, r6
 80052ea:	f7fa ff0b 	bl	8000104 <strcmp>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d005      	beq.n	80052fe <ADCReadCommand+0x62>
 80052f2:	4913      	ldr	r1, [pc, #76]	; (8005340 <ADCReadCommand+0xa4>)
 80052f4:	0030      	movs	r0, r6
 80052f6:	f7fa ff05 	bl	8000104 <strcmp>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d116      	bne.n	800532c <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 80052fe:	4e0f      	ldr	r6, [pc, #60]	; (800533c <ADCReadCommand+0xa0>)
 8005300:	0031      	movs	r1, r6
 8005302:	0020      	movs	r0, r4
 8005304:	f007 fa8e 	bl	800c824 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005308:	aa01      	add	r2, sp, #4
 800530a:	0031      	movs	r1, r6
 800530c:	0020      	movs	r0, r4
 800530e:	f007 fabb 	bl	800c888 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005312:	a901      	add	r1, sp, #4
 8005314:	0028      	movs	r0, r5
 8005316:	f00e fb07 	bl	8013928 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800531a:	9801      	ldr	r0, [sp, #4]
 800531c:	f7fb f926 	bl	800056c <__aeabi_f2uiz>
 8005320:	b282      	uxth	r2, r0
 8005322:	4908      	ldr	r1, [pc, #32]	; (8005344 <ADCReadCommand+0xa8>)
 8005324:	0028      	movs	r0, r5
 8005326:	f00e fac3 	bl	80138b0 <siprintf>
 800532a:	e7d5      	b.n	80052d8 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800532c:	2212      	movs	r2, #18
 800532e:	4906      	ldr	r1, [pc, #24]	; (8005348 <ADCReadCommand+0xac>)
 8005330:	0028      	movs	r0, r5
 8005332:	f00d fd26 	bl	8012d82 <memcpy>
 8005336:	e7cf      	b.n	80052d8 <ADCReadCommand+0x3c>
 8005338:	080175c8 	.word	0x080175c8
 800533c:	08017554 	.word	0x08017554
 8005340:	08017558 	.word	0x08017558
 8005344:	08017560 	.word	0x08017560
 8005348:	08017570 	.word	0x08017570

0800534c <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	46ce      	mov	lr, r9
 8005350:	b500      	push	{lr}
 8005352:	b086      	sub	sp, #24
 8005354:	9003      	str	r0, [sp, #12]
 8005356:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005358:	2300      	movs	r3, #0
 800535a:	9305      	str	r3, [sp, #20]
	char WriteVaule[1] ="H";
 800535c:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <testportCommand+0x198>)
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	ab04      	add	r3, sp, #16
 8005362:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005364:	aa05      	add	r2, sp, #20
 8005366:	2101      	movs	r1, #1
 8005368:	f008 fcd0 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800536c:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 800536e:	495e      	ldr	r1, [pc, #376]	; (80054e8 <testportCommand+0x19c>)
 8005370:	f7fa fec8 	bl	8000104 <strcmp>
 8005374:	2800      	cmp	r0, #0
 8005376:	d176      	bne.n	8005466 <testportCommand+0x11a>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005378:	4b5c      	ldr	r3, [pc, #368]	; (80054ec <testportCommand+0x1a0>)
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	4b5c      	ldr	r3, [pc, #368]	; (80054f0 <testportCommand+0x1a4>)
 800537e:	189b      	adds	r3, r3, r2
 8005380:	3b01      	subs	r3, #1
 8005382:	781e      	ldrb	r6, [r3, #0]
 8005384:	2401      	movs	r4, #1
			if(PcPort != ports){
 8005386:	4d59      	ldr	r5, [pc, #356]	; (80054ec <testportCommand+0x1a0>)
 8005388:	e040      	b.n	800540c <testportCommand+0xc0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800538a:	0022      	movs	r2, r4
 800538c:	4959      	ldr	r1, [pc, #356]	; (80054f4 <testportCommand+0x1a8>)
 800538e:	9f03      	ldr	r7, [sp, #12]
 8005390:	0038      	movs	r0, r7
 8005392:	f00e fa8d 	bl	80138b0 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005396:	0038      	movs	r0, r7
 8005398:	f7fa febe 	bl	8000118 <strlen>
 800539c:	b282      	uxth	r2, r0
 800539e:	4b53      	ldr	r3, [pc, #332]	; (80054ec <testportCommand+0x1a0>)
 80053a0:	7818      	ldrb	r0, [r3, #0]
 80053a2:	2364      	movs	r3, #100	; 0x64
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	3b5a      	subs	r3, #90	; 0x5a
 80053a8:	0039      	movs	r1, r7
 80053aa:	f008 fa13 	bl	800d7d4 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80053ae:	2254      	movs	r2, #84	; 0x54
 80053b0:	4951      	ldr	r1, [pc, #324]	; (80054f8 <testportCommand+0x1ac>)
 80053b2:	9f03      	ldr	r7, [sp, #12]
 80053b4:	0038      	movs	r0, r7
 80053b6:	f00d fce4 	bl	8012d82 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80053ba:	0038      	movs	r0, r7
 80053bc:	f7fa feac 	bl	8000118 <strlen>
 80053c0:	b282      	uxth	r2, r0
 80053c2:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <testportCommand+0x1a0>)
 80053c4:	7818      	ldrb	r0, [r3, #0]
 80053c6:	2364      	movs	r3, #100	; 0x64
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	3b5a      	subs	r3, #90	; 0x5a
 80053cc:	0039      	movs	r1, r7
 80053ce:	f008 fa01 	bl	800d7d4 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80053d2:	3601      	adds	r6, #1
 80053d4:	4b45      	ldr	r3, [pc, #276]	; (80054ec <testportCommand+0x1a0>)
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	3a01      	subs	r2, #1
 80053da:	0053      	lsls	r3, r2, #1
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	019b      	lsls	r3, r3, #6
 80053e0:	4a46      	ldr	r2, [pc, #280]	; (80054fc <testportCommand+0x1b0>)
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	5d9b      	ldrb	r3, [r3, r6]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <testportCommand+0xba>
 80053ea:	4691      	mov	r9, r2
 80053ec:	4f3f      	ldr	r7, [pc, #252]	; (80054ec <testportCommand+0x1a0>)
					Delay_ms(1);
 80053ee:	2001      	movs	r0, #1
 80053f0:	f00a fac8 	bl	800f984 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80053f4:	783a      	ldrb	r2, [r7, #0]
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0053      	lsls	r3, r2, #1
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	444b      	add	r3, r9
 8005400:	5d9b      	ldrb	r3, [r3, r6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f3      	beq.n	80053ee <testportCommand+0xa2>
 8005406:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005408:	2c04      	cmp	r4, #4
 800540a:	d035      	beq.n	8005478 <testportCommand+0x12c>
 800540c:	b2e7      	uxtb	r7, r4
			if(PcPort != ports){
 800540e:	782b      	ldrb	r3, [r5, #0]
 8005410:	42bb      	cmp	r3, r7
 8005412:	d0f8      	beq.n	8005406 <testportCommand+0xba>
				WriteVaule[0] =rand();
 8005414:	f00e f9cc 	bl	80137b0 <rand>
 8005418:	ab02      	add	r3, sp, #8
 800541a:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 800541c:	2364      	movs	r3, #100	; 0x64
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	3b5a      	subs	r3, #90	; 0x5a
 8005422:	2201      	movs	r2, #1
 8005424:	a904      	add	r1, sp, #16
 8005426:	0038      	movs	r0, r7
 8005428:	f008 f9d4 	bl	800d7d4 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800542c:	0038      	movs	r0, r7
 800542e:	f008 f9bd 	bl	800d7ac <GetUart>
 8005432:	6803      	ldr	r3, [r0, #0]
 8005434:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005436:	aa02      	add	r2, sp, #8
 8005438:	7a12      	ldrb	r2, [r2, #8]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	429a      	cmp	r2, r3
 800543e:	d0a4      	beq.n	800538a <testportCommand+0x3e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005440:	0022      	movs	r2, r4
 8005442:	492f      	ldr	r1, [pc, #188]	; (8005500 <testportCommand+0x1b4>)
 8005444:	9f03      	ldr	r7, [sp, #12]
 8005446:	0038      	movs	r0, r7
 8005448:	f00e fa32 	bl	80138b0 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800544c:	0038      	movs	r0, r7
 800544e:	f7fa fe63 	bl	8000118 <strlen>
 8005452:	b282      	uxth	r2, r0
 8005454:	4b25      	ldr	r3, [pc, #148]	; (80054ec <testportCommand+0x1a0>)
 8005456:	7818      	ldrb	r0, [r3, #0]
 8005458:	2364      	movs	r3, #100	; 0x64
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	3b5a      	subs	r3, #90	; 0x5a
 800545e:	0039      	movs	r1, r7
 8005460:	f008 f9b8 	bl	800d7d4 <writePxMutex>
 8005464:	e7a3      	b.n	80053ae <testportCommand+0x62>
	else if(pcParameterString1[0] == 'p'){
 8005466:	2300      	movs	r3, #0
 8005468:	56e3      	ldrsb	r3, [r4, r3]
 800546a:	2b70      	cmp	r3, #112	; 0x70
 800546c:	d009      	beq.n	8005482 <testportCommand+0x136>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800546e:	220f      	movs	r2, #15
 8005470:	4924      	ldr	r1, [pc, #144]	; (8005504 <testportCommand+0x1b8>)
 8005472:	9803      	ldr	r0, [sp, #12]
 8005474:	f00d fc85 	bl	8012d82 <memcpy>
}
 8005478:	2000      	movs	r0, #0
 800547a:	b006      	add	sp, #24
 800547c:	bc04      	pop	{r2}
 800547e:	4691      	mov	r9, r2
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005482:	1c60      	adds	r0, r4, #1
 8005484:	f00d fc0b 	bl	8012c9e <atol>
 8005488:	0004      	movs	r4, r0
 800548a:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 800548c:	1e73      	subs	r3, r6, #1
 800548e:	2b02      	cmp	r3, #2
 8005490:	d905      	bls.n	800549e <testportCommand+0x152>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005492:	221b      	movs	r2, #27
 8005494:	491c      	ldr	r1, [pc, #112]	; (8005508 <testportCommand+0x1bc>)
 8005496:	9803      	ldr	r0, [sp, #12]
 8005498:	f00d fc73 	bl	8012d82 <memcpy>
 800549c:	e7ec      	b.n	8005478 <testportCommand+0x12c>
				WriteVaule[0] =rand();
 800549e:	f00e f987 	bl	80137b0 <rand>
 80054a2:	af04      	add	r7, sp, #16
 80054a4:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80054a6:	2364      	movs	r3, #100	; 0x64
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	3b32      	subs	r3, #50	; 0x32
 80054ac:	2201      	movs	r2, #1
 80054ae:	0039      	movs	r1, r7
 80054b0:	0030      	movs	r0, r6
 80054b2:	f008 f98f 	bl	800d7d4 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80054b6:	2000      	movs	r0, #0
 80054b8:	f008 f978 	bl	800d7ac <GetUart>
 80054bc:	6803      	ldr	r3, [r0, #0]
 80054be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80054c0:	783a      	ldrb	r2, [r7, #0]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d006      	beq.n	80054d6 <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80054c8:	22ff      	movs	r2, #255	; 0xff
 80054ca:	4022      	ands	r2, r4
 80054cc:	490c      	ldr	r1, [pc, #48]	; (8005500 <testportCommand+0x1b4>)
 80054ce:	9803      	ldr	r0, [sp, #12]
 80054d0:	f00e f9ee 	bl	80138b0 <siprintf>
	return pdFALSE;
 80054d4:	e7d0      	b.n	8005478 <testportCommand+0x12c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	4022      	ands	r2, r4
 80054da:	4906      	ldr	r1, [pc, #24]	; (80054f4 <testportCommand+0x1a8>)
 80054dc:	9803      	ldr	r0, [sp, #12]
 80054de:	f00e f9e7 	bl	80138b0 <siprintf>
 80054e2:	e7c9      	b.n	8005478 <testportCommand+0x12c>
 80054e4:	08016708 	.word	0x08016708
 80054e8:	08016a64 	.word	0x08016a64
 80054ec:	2000060b 	.word	0x2000060b
 80054f0:	20000fe8 	.word	0x20000fe8
 80054f4:	08018f48 	.word	0x08018f48
 80054f8:	08018f78 	.word	0x08018f78
 80054fc:	20000da8 	.word	0x20000da8
 8005500:	08018f64 	.word	0x08018f64
 8005504:	08018fcc 	.word	0x08018fcc
 8005508:	08018fdc 	.word	0x08018fdc

0800550c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	0005      	movs	r5, r0
 8005512:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005514:	2300      	movs	r3, #0
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800551a:	aa01      	add	r2, sp, #4
 800551c:	2101      	movs	r1, #1
 800551e:	0020      	movs	r0, r4
 8005520:	f008 fbf4 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005524:	2300      	movs	r3, #0
 8005526:	56c3      	ldrsb	r3, [r0, r3]
 8005528:	2b70      	cmp	r3, #112	; 0x70
 800552a:	d00e      	beq.n	800554a <unbridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800552c:	466a      	mov	r2, sp
 800552e:	2102      	movs	r1, #2
 8005530:	0020      	movs	r0, r4
 8005532:	f008 fbeb 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005536:	2300      	movs	r3, #0
 8005538:	56c3      	ldrsb	r3, [r0, r3]
 800553a:	2b70      	cmp	r3, #112	; 0x70
 800553c:	d01d      	beq.n	800557a <unbridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800553e:	220f      	movs	r2, #15
 8005540:	4919      	ldr	r1, [pc, #100]	; (80055a8 <unbridgeCommand+0x9c>)
 8005542:	0028      	movs	r0, r5
 8005544:	f00d fc1d 	bl	8012d82 <memcpy>
 8005548:	e014      	b.n	8005574 <unbridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800554a:	3001      	adds	r0, #1
 800554c:	f00d fba7 	bl	8012c9e <atol>
 8005550:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005552:	466a      	mov	r2, sp
 8005554:	2102      	movs	r1, #2
 8005556:	0020      	movs	r0, r4
 8005558:	f008 fbd8 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800555c:	2300      	movs	r3, #0
 800555e:	56c3      	ldrsb	r3, [r0, r3]
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d00e      	beq.n	8005582 <unbridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005564:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005566:	2867      	cmp	r0, #103	; 0x67
 8005568:	d0e9      	beq.n	800553e <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800556a:	2219      	movs	r2, #25
 800556c:	490f      	ldr	r1, [pc, #60]	; (80055ac <unbridgeCommand+0xa0>)
 800556e:	0028      	movs	r0, r5
 8005570:	f00d fc07 	bl	8012d82 <memcpy>
}
 8005574:	2000      	movs	r0, #0
 8005576:	b002      	add	sp, #8
 8005578:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800557a:	3001      	adds	r0, #1
 800557c:	f00d fb8f 	bl	8012c9e <atol>
 8005580:	e7dd      	b.n	800553e <unbridgeCommand+0x32>
 8005582:	3001      	adds	r0, #1
 8005584:	f00d fb8b 	bl	8012c9e <atol>
 8005588:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 800558a:	b2c1      	uxtb	r1, r0
 800558c:	b2f0      	uxtb	r0, r6
 800558e:	f7fe feed 	bl	800436c <Unbridge>
	if(result == BOS_OK)
 8005592:	2800      	cmp	r0, #0
 8005594:	d1e7      	bne.n	8005566 <unbridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005596:	22ff      	movs	r2, #255	; 0xff
 8005598:	0023      	movs	r3, r4
 800559a:	4013      	ands	r3, r2
 800559c:	4032      	ands	r2, r6
 800559e:	4904      	ldr	r1, [pc, #16]	; (80055b0 <unbridgeCommand+0xa4>)
 80055a0:	0028      	movs	r0, r5
 80055a2:	f00e f985 	bl	80138b0 <siprintf>
 80055a6:	e7e5      	b.n	8005574 <unbridgeCommand+0x68>
 80055a8:	08018fcc 	.word	0x08018fcc
 80055ac:	08019094 	.word	0x08019094
 80055b0:	08019074 	.word	0x08019074

080055b4 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	0005      	movs	r5, r0
 80055ba:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80055bc:	2300      	movs	r3, #0
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c2:	aa01      	add	r2, sp, #4
 80055c4:	2101      	movs	r1, #1
 80055c6:	0020      	movs	r0, r4
 80055c8:	f008 fba0 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80055cc:	2300      	movs	r3, #0
 80055ce:	56c3      	ldrsb	r3, [r0, r3]
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d00e      	beq.n	80055f2 <bridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055d4:	466a      	mov	r2, sp
 80055d6:	2102      	movs	r1, #2
 80055d8:	0020      	movs	r0, r4
 80055da:	f008 fb97 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80055de:	2300      	movs	r3, #0
 80055e0:	56c3      	ldrsb	r3, [r0, r3]
 80055e2:	2b70      	cmp	r3, #112	; 0x70
 80055e4:	d01d      	beq.n	8005622 <bridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055e6:	220f      	movs	r2, #15
 80055e8:	4919      	ldr	r1, [pc, #100]	; (8005650 <bridgeCommand+0x9c>)
 80055ea:	0028      	movs	r0, r5
 80055ec:	f00d fbc9 	bl	8012d82 <memcpy>
 80055f0:	e014      	b.n	800561c <bridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055f2:	3001      	adds	r0, #1
 80055f4:	f00d fb53 	bl	8012c9e <atol>
 80055f8:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055fa:	466a      	mov	r2, sp
 80055fc:	2102      	movs	r1, #2
 80055fe:	0020      	movs	r0, r4
 8005600:	f008 fb84 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005604:	2300      	movs	r3, #0
 8005606:	56c3      	ldrsb	r3, [r0, r3]
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d00e      	beq.n	800562a <bridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 800560c:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 800560e:	2867      	cmp	r0, #103	; 0x67
 8005610:	d0e9      	beq.n	80055e6 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005612:	2217      	movs	r2, #23
 8005614:	490f      	ldr	r1, [pc, #60]	; (8005654 <bridgeCommand+0xa0>)
 8005616:	0028      	movs	r0, r5
 8005618:	f00d fbb3 	bl	8012d82 <memcpy>
}
 800561c:	2000      	movs	r0, #0
 800561e:	b002      	add	sp, #8
 8005620:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005622:	3001      	adds	r0, #1
 8005624:	f00d fb3b 	bl	8012c9e <atol>
 8005628:	e7dd      	b.n	80055e6 <bridgeCommand+0x32>
 800562a:	3001      	adds	r0, #1
 800562c:	f00d fb37 	bl	8012c9e <atol>
 8005630:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005632:	b2c1      	uxtb	r1, r0
 8005634:	b2f0      	uxtb	r0, r6
 8005636:	f7fe fe85 	bl	8004344 <Bridge>
	if(result == BOS_OK)
 800563a:	2800      	cmp	r0, #0
 800563c:	d1e7      	bne.n	800560e <bridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 800563e:	22ff      	movs	r2, #255	; 0xff
 8005640:	0023      	movs	r3, r4
 8005642:	4013      	ands	r3, r2
 8005644:	4032      	ands	r2, r6
 8005646:	4904      	ldr	r1, [pc, #16]	; (8005658 <bridgeCommand+0xa4>)
 8005648:	0028      	movs	r0, r5
 800564a:	f00e f931 	bl	80138b0 <siprintf>
 800564e:	e7e5      	b.n	800561c <bridgeCommand+0x68>
 8005650:	08018fcc 	.word	0x08018fcc
 8005654:	08017768 	.word	0x08017768
 8005658:	08017744 	.word	0x08017744

0800565c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565e:	46de      	mov	lr, fp
 8005660:	464f      	mov	r7, r9
 8005662:	4646      	mov	r6, r8
 8005664:	b5c0      	push	{r6, r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	9001      	str	r0, [sp, #4]
 800566a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800566c:	2300      	movs	r3, #0
 800566e:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005670:	aa03      	add	r2, sp, #12
 8005672:	2101      	movs	r1, #1
 8005674:	f008 fb4a 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005678:	f00d fb0b 	bl	8012c92 <atoi>
 800567c:	0004      	movs	r4, r0
 800567e:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8005680:	2d00      	cmp	r5, #0
 8005682:	d003      	beq.n	800568c <delSnipCommand+0x30>
 8005684:	4b31      	ldr	r3, [pc, #196]	; (800574c <delSnipCommand+0xf0>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	42ab      	cmp	r3, r5
 800568a:	d20b      	bcs.n	80056a4 <delSnipCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800568c:	2223      	movs	r2, #35	; 0x23
 800568e:	4930      	ldr	r1, [pc, #192]	; (8005750 <delSnipCommand+0xf4>)
 8005690:	9801      	ldr	r0, [sp, #4]
 8005692:	f00d fb76 	bl	8012d82 <memcpy>
}
 8005696:	2000      	movs	r0, #0
 8005698:	b004      	add	sp, #16
 800569a:	bc1c      	pop	{r2, r3, r4}
 800569c:	4690      	mov	r8, r2
 800569e:	4699      	mov	r9, r3
 80056a0:	46a3      	mov	fp, r4
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80056a4:	27ff      	movs	r7, #255	; 0xff
 80056a6:	4007      	ands	r7, r0
 80056a8:	3f01      	subs	r7, #1
 80056aa:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <delSnipCommand+0xf8>)
 80056ac:	4699      	mov	r9, r3
 80056ae:	00bb      	lsls	r3, r7, #2
 80056b0:	4698      	mov	r8, r3
 80056b2:	19db      	adds	r3, r3, r7
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	2600      	movs	r6, #0
 80056b8:	464a      	mov	r2, r9
 80056ba:	549e      	strb	r6, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 80056bc:	4643      	mov	r3, r8
 80056be:	19db      	adds	r3, r3, r7
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	444b      	add	r3, r9
 80056c4:	469b      	mov	fp, r3
 80056c6:	705e      	strb	r6, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 80056c8:	4643      	mov	r3, r8
 80056ca:	19d8      	adds	r0, r3, r7
 80056cc:	0080      	lsls	r0, r0, #2
 80056ce:	3002      	adds	r0, #2
 80056d0:	4448      	add	r0, r9
 80056d2:	2204      	movs	r2, #4
 80056d4:	2100      	movs	r1, #0
 80056d6:	f00d fb5d 	bl	8012d94 <memset>
		snippets[index - 1].state = false;
 80056da:	465b      	mov	r3, fp
 80056dc:	741e      	strb	r6, [r3, #16]
		free(snippets[index - 1].cmd);
 80056de:	68d8      	ldr	r0, [r3, #12]
 80056e0:	f00d fb24 	bl	8012d2c <free>
		snippets[index - 1].cmd = NULL;
 80056e4:	465f      	mov	r7, fp
 80056e6:	60fe      	str	r6, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <delSnipCommand+0xf0>)
 80056ea:	781f      	ldrb	r7, [r3, #0]
 80056ec:	42bd      	cmp	r5, r7
 80056ee:	d222      	bcs.n	8005736 <delSnipCommand+0xda>
 80056f0:	23ff      	movs	r3, #255	; 0xff
 80056f2:	4023      	ands	r3, r4
 80056f4:	009c      	lsls	r4, r3, #2
 80056f6:	18e4      	adds	r4, r4, r3
 80056f8:	00a4      	lsls	r4, r4, #2
 80056fa:	4916      	ldr	r1, [pc, #88]	; (8005754 <delSnipCommand+0xf8>)
 80056fc:	1864      	adds	r4, r4, r1
 80056fe:	1e7a      	subs	r2, r7, #1
 8005700:	1b52      	subs	r2, r2, r5
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	18d3      	adds	r3, r2, r3
 8005706:	009d      	lsls	r5, r3, #2
 8005708:	18ed      	adds	r5, r5, r3
 800570a:	00ad      	lsls	r5, r5, #2
 800570c:	3114      	adds	r1, #20
 800570e:	186d      	adds	r5, r5, r1
 8005710:	e002      	b.n	8005718 <delSnipCommand+0xbc>
 8005712:	3414      	adds	r4, #20
 8005714:	42ac      	cmp	r4, r5
 8005716:	d00e      	beq.n	8005736 <delSnipCommand+0xda>
			if(snippets[s].cond.conditionType){
 8005718:	7823      	ldrb	r3, [r4, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f9      	beq.n	8005712 <delSnipCommand+0xb6>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800571e:	2214      	movs	r2, #20
 8005720:	0021      	movs	r1, r4
 8005722:	0020      	movs	r0, r4
 8005724:	3814      	subs	r0, #20
 8005726:	f00d fb2c 	bl	8012d82 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 800572a:	2214      	movs	r2, #20
 800572c:	2100      	movs	r1, #0
 800572e:	0020      	movs	r0, r4
 8005730:	f00d fb30 	bl	8012d94 <memset>
 8005734:	e7ed      	b.n	8005712 <delSnipCommand+0xb6>
		--numOfRecordedSnippets;
 8005736:	3f01      	subs	r7, #1
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <delSnipCommand+0xf0>)
 800573a:	701f      	strb	r7, [r3, #0]
		SaveToRO();
 800573c:	f004 fa0a 	bl	8009b54 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005740:	2236      	movs	r2, #54	; 0x36
 8005742:	4905      	ldr	r1, [pc, #20]	; (8005758 <delSnipCommand+0xfc>)
 8005744:	9801      	ldr	r0, [sp, #4]
 8005746:	f00d fb1c 	bl	8012d82 <memcpy>
 800574a:	e7a4      	b.n	8005696 <delSnipCommand+0x3a>
 800574c:	20000cf7 	.word	0x20000cf7
 8005750:	08017888 	.word	0x08017888
 8005754:	20005af8 	.word	0x20005af8
 8005758:	08017850 	.word	0x08017850

0800575c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800575c:	b510      	push	{r4, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	0004      	movs	r4, r0
 8005762:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005764:	2300      	movs	r3, #0
 8005766:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005768:	aa01      	add	r2, sp, #4
 800576a:	2101      	movs	r1, #1
 800576c:	f008 face 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005770:	f00d fa8f 	bl	8012c92 <atoi>
 8005774:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <pauseSnipCommand+0x26>
 800577a:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <pauseSnipCommand+0x5c>)
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d207      	bcs.n	8005792 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005782:	2223      	movs	r2, #35	; 0x23
 8005784:	490d      	ldr	r1, [pc, #52]	; (80057bc <pauseSnipCommand+0x60>)
 8005786:	0020      	movs	r0, r4
 8005788:	f00d fafb 	bl	8012d82 <memcpy>
}
 800578c:	2000      	movs	r0, #0
 800578e:	b002      	add	sp, #8
 8005790:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005792:	23ff      	movs	r3, #255	; 0xff
 8005794:	4018      	ands	r0, r3
 8005796:	3801      	subs	r0, #1
 8005798:	0083      	lsls	r3, r0, #2
 800579a:	1818      	adds	r0, r3, r0
 800579c:	0080      	lsls	r0, r0, #2
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <pauseSnipCommand+0x64>)
 80057a0:	1818      	adds	r0, r3, r0
 80057a2:	2300      	movs	r3, #0
 80057a4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80057a6:	f004 f9d5 	bl	8009b54 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80057aa:	2235      	movs	r2, #53	; 0x35
 80057ac:	4905      	ldr	r1, [pc, #20]	; (80057c4 <pauseSnipCommand+0x68>)
 80057ae:	0020      	movs	r0, r4
 80057b0:	f00d fae7 	bl	8012d82 <memcpy>
 80057b4:	e7ea      	b.n	800578c <pauseSnipCommand+0x30>
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	20000cf7 	.word	0x20000cf7
 80057bc:	08017888 	.word	0x08017888
 80057c0:	20005af8 	.word	0x20005af8
 80057c4:	08017c98 	.word	0x08017c98

080057c8 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c8:	b510      	push	{r4, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	0004      	movs	r4, r0
 80057ce:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057d4:	aa01      	add	r2, sp, #4
 80057d6:	2101      	movs	r1, #1
 80057d8:	f008 fa98 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80057dc:	f00d fa59 	bl	8012c92 <atoi>
 80057e0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <actSnipCommand+0x26>
 80057e6:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <actSnipCommand+0x5c>)
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d207      	bcs.n	80057fe <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057ee:	2223      	movs	r2, #35	; 0x23
 80057f0:	490d      	ldr	r1, [pc, #52]	; (8005828 <actSnipCommand+0x60>)
 80057f2:	0020      	movs	r0, r4
 80057f4:	f00d fac5 	bl	8012d82 <memcpy>
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	b002      	add	sp, #8
 80057fc:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 80057fe:	23ff      	movs	r3, #255	; 0xff
 8005800:	4018      	ands	r0, r3
 8005802:	3801      	subs	r0, #1
 8005804:	0083      	lsls	r3, r0, #2
 8005806:	1818      	adds	r0, r3, r0
 8005808:	0080      	lsls	r0, r0, #2
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <actSnipCommand+0x64>)
 800580c:	1818      	adds	r0, r3, r0
 800580e:	2301      	movs	r3, #1
 8005810:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005812:	f004 f99f 	bl	8009b54 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005816:	2238      	movs	r2, #56	; 0x38
 8005818:	4905      	ldr	r1, [pc, #20]	; (8005830 <actSnipCommand+0x68>)
 800581a:	0020      	movs	r0, r4
 800581c:	f00d fab1 	bl	8012d82 <memcpy>
 8005820:	e7ea      	b.n	80057f8 <actSnipCommand+0x30>
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	20000cf7 	.word	0x20000cf7
 8005828:	08017888 	.word	0x08017888
 800582c:	20005af8 	.word	0x20005af8
 8005830:	0801764c 	.word	0x0801764c

08005834 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	46de      	mov	lr, fp
 8005838:	4657      	mov	r7, sl
 800583a:	464e      	mov	r6, r9
 800583c:	4645      	mov	r5, r8
 800583e:	b5e0      	push	{r5, r6, r7, lr}
 8005840:	b08b      	sub	sp, #44	; 0x2c
 8005842:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005844:	aa06      	add	r2, sp, #24
 8005846:	4b7c      	ldr	r3, [pc, #496]	; (8005a38 <snipCommand+0x204>)
 8005848:	3304      	adds	r3, #4
 800584a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800584c:	c223      	stmia	r2!, {r0, r1, r5}
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005852:	4b7a      	ldr	r3, [pc, #488]	; (8005a3c <snipCommand+0x208>)
 8005854:	7818      	ldrb	r0, [r3, #0]
 8005856:	2301      	movs	r3, #1
 8005858:	425b      	negs	r3, r3
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	3333      	adds	r3, #51	; 0x33
 800585e:	2237      	movs	r2, #55	; 0x37
 8005860:	4977      	ldr	r1, [pc, #476]	; (8005a40 <snipCommand+0x20c>)
 8005862:	f007 ffb7 	bl	800d7d4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005866:	4b77      	ldr	r3, [pc, #476]	; (8005a44 <snipCommand+0x210>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d100      	bne.n	8005870 <snipCommand+0x3c>
 800586e:	e0d5      	b.n	8005a1c <snipCommand+0x1e8>
 8005870:	2600      	movs	r6, #0
		if(snippets[s].cond.conditionType)
 8005872:	4b75      	ldr	r3, [pc, #468]	; (8005a48 <snipCommand+0x214>)
 8005874:	4699      	mov	r9, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005876:	4d75      	ldr	r5, [pc, #468]	; (8005a4c <snipCommand+0x218>)
 8005878:	e0bd      	b.n	80059f6 <snipCommand+0x1c2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 800587a:	4b73      	ldr	r3, [pc, #460]	; (8005a48 <snipCommand+0x214>)
 800587c:	469b      	mov	fp, r3
 800587e:	00b3      	lsls	r3, r6, #2
 8005880:	469a      	mov	sl, r3
 8005882:	199b      	adds	r3, r3, r6
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	445b      	add	r3, fp
 8005888:	7c1a      	ldrb	r2, [r3, #16]
 800588a:	00d3      	lsls	r3, r2, #3
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	aa06      	add	r2, sp, #24
 8005890:	4694      	mov	ip, r2
 8005892:	4463      	add	r3, ip
 8005894:	4642      	mov	r2, r8
 8005896:	496e      	ldr	r1, [pc, #440]	; (8005a50 <snipCommand+0x21c>)
 8005898:	0020      	movs	r0, r4
 800589a:	f00e f809 	bl	80138b0 <siprintf>
		switch(snippets[s].cond.conditionType){
 800589e:	4653      	mov	r3, sl
 80058a0:	199b      	adds	r3, r3, r6
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	465a      	mov	r2, fp
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d02c      	beq.n	8005906 <snipCommand+0xd2>
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d000      	beq.n	80058b2 <snipCommand+0x7e>
 80058b0:	e0ad      	b.n	8005a0e <snipCommand+0x1da>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80058b2:	00b1      	lsls	r1, r6, #2
 80058b4:	1989      	adds	r1, r1, r6
 80058b6:	0089      	lsls	r1, r1, #2
 80058b8:	3106      	adds	r1, #6
 80058ba:	4e63      	ldr	r6, [pc, #396]	; (8005a48 <snipCommand+0x214>)
 80058bc:	1989      	adds	r1, r1, r6
 80058be:	2204      	movs	r2, #4
 80058c0:	a805      	add	r0, sp, #20
 80058c2:	f00d fa5e 	bl	8012d82 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 80058c6:	00bb      	lsls	r3, r7, #2
 80058c8:	19db      	adds	r3, r3, r7
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	18f6      	adds	r6, r6, r3
 80058ce:	78f2      	ldrb	r2, [r6, #3]
 80058d0:	3a01      	subs	r2, #1
 80058d2:	0053      	lsls	r3, r2, #1
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4a5e      	ldr	r2, [pc, #376]	; (8005a54 <snipCommand+0x220>)
 80058da:	18d3      	adds	r3, r2, r3
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	469a      	mov	sl, r3
 80058e0:	9805      	ldr	r0, [sp, #20]
 80058e2:	f7fd f833 	bl	800294c <__aeabi_f2d>
 80058e6:	9002      	str	r0, [sp, #8]
 80058e8:	9103      	str	r1, [sp, #12]
 80058ea:	7873      	ldrb	r3, [r6, #1]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	005a      	lsls	r2, r3, #1
 80058f0:	18d2      	adds	r2, r2, r3
 80058f2:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <snipCommand+0x224>)
 80058f4:	189b      	adds	r3, r3, r2
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4653      	mov	r3, sl
 80058fa:	0022      	movs	r2, r4
 80058fc:	4957      	ldr	r1, [pc, #348]	; (8005a5c <snipCommand+0x228>)
 80058fe:	0020      	movs	r0, r4
 8005900:	f00d ffd6 	bl	80138b0 <siprintf>
				break;
 8005904:	e083      	b.n	8005a0e <snipCommand+0x1da>
				switch(snippets[s].cond.buffer1[1]){
 8005906:	00b3      	lsls	r3, r6, #2
 8005908:	199b      	adds	r3, r3, r6
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4a4e      	ldr	r2, [pc, #312]	; (8005a48 <snipCommand+0x214>)
 800590e:	18d3      	adds	r3, r2, r3
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	3b05      	subs	r3, #5
 8005914:	b2da      	uxtb	r2, r3
 8005916:	2a09      	cmp	r2, #9
 8005918:	d879      	bhi.n	8005a0e <snipCommand+0x1da>
 800591a:	0093      	lsls	r3, r2, #2
 800591c:	4a50      	ldr	r2, [pc, #320]	; (8005a60 <snipCommand+0x22c>)
 800591e:	58d3      	ldr	r3, [r2, r3]
 8005920:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005922:	00b3      	lsls	r3, r6, #2
 8005924:	199b      	adds	r3, r3, r6
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4a47      	ldr	r2, [pc, #284]	; (8005a48 <snipCommand+0x214>)
 800592a:	18d2      	adds	r2, r2, r3
 800592c:	7893      	ldrb	r3, [r2, #2]
 800592e:	68d2      	ldr	r2, [r2, #12]
 8005930:	9200      	str	r2, [sp, #0]
 8005932:	0022      	movs	r2, r4
 8005934:	494b      	ldr	r1, [pc, #300]	; (8005a64 <snipCommand+0x230>)
 8005936:	0020      	movs	r0, r4
 8005938:	f00d ffba 	bl	80138b0 <siprintf>
						break;
 800593c:	e067      	b.n	8005a0e <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 800593e:	00b3      	lsls	r3, r6, #2
 8005940:	199b      	adds	r3, r3, r6
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a40      	ldr	r2, [pc, #256]	; (8005a48 <snipCommand+0x214>)
 8005946:	18d2      	adds	r2, r2, r3
 8005948:	7893      	ldrb	r3, [r2, #2]
 800594a:	68d2      	ldr	r2, [r2, #12]
 800594c:	9200      	str	r2, [sp, #0]
 800594e:	0022      	movs	r2, r4
 8005950:	4945      	ldr	r1, [pc, #276]	; (8005a68 <snipCommand+0x234>)
 8005952:	0020      	movs	r0, r4
 8005954:	f00d ffac 	bl	80138b0 <siprintf>
						break;
 8005958:	e059      	b.n	8005a0e <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800595a:	00b2      	lsls	r2, r6, #2
 800595c:	1992      	adds	r2, r2, r6
 800595e:	0093      	lsls	r3, r2, #2
 8005960:	4a39      	ldr	r2, [pc, #228]	; (8005a48 <snipCommand+0x214>)
 8005962:	18d2      	adds	r2, r2, r3
 8005964:	7893      	ldrb	r3, [r2, #2]
 8005966:	68d1      	ldr	r1, [r2, #12]
 8005968:	9101      	str	r1, [sp, #4]
 800596a:	7912      	ldrb	r2, [r2, #4]
 800596c:	9200      	str	r2, [sp, #0]
 800596e:	0022      	movs	r2, r4
 8005970:	493e      	ldr	r1, [pc, #248]	; (8005a6c <snipCommand+0x238>)
 8005972:	0020      	movs	r0, r4
 8005974:	f00d ff9c 	bl	80138b0 <siprintf>
						break;
 8005978:	e049      	b.n	8005a0e <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800597a:	00b2      	lsls	r2, r6, #2
 800597c:	1992      	adds	r2, r2, r6
 800597e:	0093      	lsls	r3, r2, #2
 8005980:	4a31      	ldr	r2, [pc, #196]	; (8005a48 <snipCommand+0x214>)
 8005982:	18d2      	adds	r2, r2, r3
 8005984:	7893      	ldrb	r3, [r2, #2]
 8005986:	68d1      	ldr	r1, [r2, #12]
 8005988:	9101      	str	r1, [sp, #4]
 800598a:	7912      	ldrb	r2, [r2, #4]
 800598c:	9200      	str	r2, [sp, #0]
 800598e:	0022      	movs	r2, r4
 8005990:	4937      	ldr	r1, [pc, #220]	; (8005a70 <snipCommand+0x23c>)
 8005992:	0020      	movs	r0, r4
 8005994:	f00d ff8c 	bl	80138b0 <siprintf>
						break;
 8005998:	e039      	b.n	8005a0e <snipCommand+0x1da>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 800599a:	002b      	movs	r3, r5
 800599c:	0022      	movs	r2, r4
 800599e:	4935      	ldr	r1, [pc, #212]	; (8005a74 <snipCommand+0x240>)
 80059a0:	0020      	movs	r0, r4
 80059a2:	f00d ff85 	bl	80138b0 <siprintf>
			memset(&commands,0x00,strlen((char* )commands));
 80059a6:	0028      	movs	r0, r5
 80059a8:	f7fa fbb6 	bl	8000118 <strlen>
 80059ac:	0002      	movs	r2, r0
 80059ae:	2100      	movs	r1, #0
 80059b0:	0028      	movs	r0, r5
 80059b2:	f00d f9ef 	bl	8012d94 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 80059b6:	0031      	movs	r1, r6
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff faa9 	bl	8004f10 <ParseSnippetCommand>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d1eb      	bne.n	800599a <snipCommand+0x166>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 80059c2:	0020      	movs	r0, r4
 80059c4:	f7fa fba8 	bl	8000118 <strlen>
 80059c8:	1820      	adds	r0, r4, r0
 80059ca:	220c      	movs	r2, #12
 80059cc:	492a      	ldr	r1, [pc, #168]	; (8005a78 <snipCommand+0x244>)
 80059ce:	f00d f9d8 	bl	8012d82 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80059d2:	0020      	movs	r0, r4
 80059d4:	f7fa fba0 	bl	8000118 <strlen>
 80059d8:	b282      	uxth	r2, r0
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <snipCommand+0x208>)
 80059dc:	7818      	ldrb	r0, [r3, #0]
 80059de:	2301      	movs	r3, #1
 80059e0:	425b      	negs	r3, r3
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	3333      	adds	r3, #51	; 0x33
 80059e6:	0021      	movs	r1, r4
 80059e8:	f007 fef4 	bl	800d7d4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 80059ec:	4646      	mov	r6, r8
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <snipCommand+0x210>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	4543      	cmp	r3, r8
 80059f4:	d912      	bls.n	8005a1c <snipCommand+0x1e8>
 80059f6:	1c73      	adds	r3, r6, #1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 80059fc:	0037      	movs	r7, r6
 80059fe:	00b3      	lsls	r3, r6, #2
 8005a00:	199b      	adds	r3, r3, r6
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	464a      	mov	r2, r9
 8005a06:	5c9b      	ldrb	r3, [r3, r2]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d000      	beq.n	8005a0e <snipCommand+0x1da>
 8005a0c:	e735      	b.n	800587a <snipCommand+0x46>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005a0e:	4e0f      	ldr	r6, [pc, #60]	; (8005a4c <snipCommand+0x218>)
 8005a10:	00bb      	lsls	r3, r7, #2
 8005a12:	19db      	adds	r3, r3, r7
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4f0c      	ldr	r7, [pc, #48]	; (8005a48 <snipCommand+0x214>)
 8005a18:	18ff      	adds	r7, r7, r3
 8005a1a:	e7cc      	b.n	80059b6 <snipCommand+0x182>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005a1c:	22b5      	movs	r2, #181	; 0xb5
 8005a1e:	4917      	ldr	r1, [pc, #92]	; (8005a7c <snipCommand+0x248>)
 8005a20:	0020      	movs	r0, r4
 8005a22:	f00d f9ae 	bl	8012d82 <memcpy>
}
 8005a26:	2000      	movs	r0, #0
 8005a28:	b00b      	add	sp, #44	; 0x2c
 8005a2a:	bc3c      	pop	{r2, r3, r4, r5}
 8005a2c:	4690      	mov	r8, r2
 8005a2e:	4699      	mov	r9, r3
 8005a30:	46a2      	mov	sl, r4
 8005a32:	46ab      	mov	fp, r5
 8005a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	08016708 	.word	0x08016708
 8005a3c:	2000060b 	.word	0x2000060b
 8005a40:	0801812c 	.word	0x0801812c
 8005a44:	20000cf7 	.word	0x20000cf7
 8005a48:	20005af8 	.word	0x20005af8
 8005a4c:	20000d28 	.word	0x20000d28
 8005a50:	08018164 	.word	0x08018164
 8005a54:	20000098 	.word	0x20000098
 8005a58:	08017c5c 	.word	0x08017c5c
 8005a5c:	080181d0 	.word	0x080181d0
 8005a60:	08017508 	.word	0x08017508
 8005a64:	08018170 	.word	0x08018170
 8005a68:	08018184 	.word	0x08018184
 8005a6c:	0801819c 	.word	0x0801819c
 8005a70:	080181b4 	.word	0x080181b4
 8005a74:	080181e0 	.word	0x080181e0
 8005a78:	080181e8 	.word	0x080181e8
 8005a7c:	080181f4 	.word	0x080181f4

08005a80 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a80:	b510      	push	{r4, lr}
 8005a82:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005a84:	f009 ff92 	bl	800f9ac <HAL_GetDEVID>
	switch(dev){
 8005a88:	0400      	lsls	r0, r0, #16
 8005a8a:	0c00      	lsrs	r0, r0, #16
 8005a8c:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <idcodeCommand+0x78>)
 8005a8e:	469c      	mov	ip, r3
 8005a90:	4460      	add	r0, ip
 8005a92:	2808      	cmp	r0, #8
 8005a94:	d82a      	bhi.n	8005aec <idcodeCommand+0x6c>
 8005a96:	0080      	lsls	r0, r0, #2
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <idcodeCommand+0x7c>)
 8005a9a:	581b      	ldr	r3, [r3, r0]
 8005a9c:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <idcodeCommand+0x80>)
 8005aa0:	4918      	ldr	r1, [pc, #96]	; (8005b04 <idcodeCommand+0x84>)
 8005aa2:	0020      	movs	r0, r4
 8005aa4:	f00d ff04 	bl	80138b0 <siprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005aa8:	f009 ff7a 	bl	800f9a0 <HAL_GetREVID>
 8005aac:	0b03      	lsrs	r3, r0, #12
 8005aae:	0022      	movs	r2, r4
 8005ab0:	4915      	ldr	r1, [pc, #84]	; (8005b08 <idcodeCommand+0x88>)
 8005ab2:	0020      	movs	r0, r4
 8005ab4:	f00d fefc 	bl	80138b0 <siprintf>
}
 8005ab8:	2000      	movs	r0, #0
 8005aba:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005abc:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <idcodeCommand+0x8c>)
 8005abe:	4911      	ldr	r1, [pc, #68]	; (8005b04 <idcodeCommand+0x84>)
 8005ac0:	0020      	movs	r0, r4
 8005ac2:	f00d fef5 	bl	80138b0 <siprintf>
			break;
 8005ac6:	e7ef      	b.n	8005aa8 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <idcodeCommand+0x90>)
 8005aca:	490e      	ldr	r1, [pc, #56]	; (8005b04 <idcodeCommand+0x84>)
 8005acc:	0020      	movs	r0, r4
 8005ace:	f00d feef 	bl	80138b0 <siprintf>
			break;
 8005ad2:	e7e9      	b.n	8005aa8 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005ad4:	4a0f      	ldr	r2, [pc, #60]	; (8005b14 <idcodeCommand+0x94>)
 8005ad6:	490b      	ldr	r1, [pc, #44]	; (8005b04 <idcodeCommand+0x84>)
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f00d fee9 	bl	80138b0 <siprintf>
			break;
 8005ade:	e7e3      	b.n	8005aa8 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <idcodeCommand+0x98>)
 8005ae2:	4908      	ldr	r1, [pc, #32]	; (8005b04 <idcodeCommand+0x84>)
 8005ae4:	0020      	movs	r0, r4
 8005ae6:	f00d fee3 	bl	80138b0 <siprintf>
			break;
 8005aea:	e7dd      	b.n	8005aa8 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <idcodeCommand+0x9c>)
 8005aee:	4905      	ldr	r1, [pc, #20]	; (8005b04 <idcodeCommand+0x84>)
 8005af0:	0020      	movs	r0, r4
 8005af2:	f00d fedd 	bl	80138b0 <siprintf>
			break;
 8005af6:	e7d7      	b.n	8005aa8 <idcodeCommand+0x28>
 8005af8:	fffffbc0 	.word	0xfffffbc0
 8005afc:	08017530 	.word	0x08017530
 8005b00:	08017b58 	.word	0x08017b58
 8005b04:	08017b64 	.word	0x08017b64
 8005b08:	08017bb0 	.word	0x08017bb0
 8005b0c:	08017b78 	.word	0x08017b78
 8005b10:	08017b84 	.word	0x08017b84
 8005b14:	08017b90 	.word	0x08017b90
 8005b18:	08017b9c 	.word	0x08017b9c
 8005b1c:	08017ba8 	.word	0x08017ba8

08005b20 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005b24:	220e      	movs	r2, #14
 8005b26:	4911      	ldr	r1, [pc, #68]	; (8005b6c <uuidCommand+0x4c>)
 8005b28:	f00d f92b 	bl	8012d82 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <uuidCommand+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4d10      	ldr	r5, [pc, #64]	; (8005b74 <uuidCommand+0x54>)
 8005b32:	0022      	movs	r2, r4
 8005b34:	0029      	movs	r1, r5
 8005b36:	0020      	movs	r0, r4
 8005b38:	f00d feba 	bl	80138b0 <siprintf>
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <uuidCommand+0x58>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	0022      	movs	r2, r4
 8005b42:	0029      	movs	r1, r5
 8005b44:	0020      	movs	r0, r4
 8005b46:	f00d feb3 	bl	80138b0 <siprintf>
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <uuidCommand+0x5c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	0022      	movs	r2, r4
 8005b50:	0029      	movs	r1, r5
 8005b52:	0020      	movs	r0, r4
 8005b54:	f00d feac 	bl	80138b0 <siprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f7fa fadd 	bl	8000118 <strlen>
 8005b5e:	1820      	adds	r0, r4, r0
 8005b60:	2203      	movs	r2, #3
 8005b62:	4907      	ldr	r1, [pc, #28]	; (8005b80 <uuidCommand+0x60>)
 8005b64:	f00d f90d 	bl	8012d82 <memcpy>
}
 8005b68:	2000      	movs	r0, #0
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	080190c0 	.word	0x080190c0
 8005b70:	1ffff7ac 	.word	0x1ffff7ac
 8005b74:	080190d0 	.word	0x080190d0
 8005b78:	1ffff7b0 	.word	0x1ffff7b0
 8005b7c:	1ffff7b4 	.word	0x1ffff7b4
 8005b80:	08018b30 	.word	0x08018b30

08005b84 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b84:	b510      	push	{r4, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	0004      	movs	r4, r0
	GetTimeDate();
 8005b8a:	f007 fc3b 	bl	800d404 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <timeCommand+0x78>)
 8005b90:	7b5b      	ldrb	r3, [r3, #13]
 8005b92:	2b18      	cmp	r3, #24
 8005b94:	d004      	beq.n	8005ba0 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	d00e      	beq.n	8005bb8 <timeCommand+0x34>
}
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	b004      	add	sp, #16
 8005b9e:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005ba0:	4916      	ldr	r1, [pc, #88]	; (8005bfc <timeCommand+0x78>)
 8005ba2:	7c4b      	ldrb	r3, [r1, #17]
 8005ba4:	7c8a      	ldrb	r2, [r1, #18]
 8005ba6:	89c8      	ldrh	r0, [r1, #14]
 8005ba8:	9001      	str	r0, [sp, #4]
 8005baa:	7c09      	ldrb	r1, [r1, #16]
 8005bac:	9100      	str	r1, [sp, #0]
 8005bae:	4914      	ldr	r1, [pc, #80]	; (8005c00 <timeCommand+0x7c>)
 8005bb0:	0020      	movs	r0, r4
 8005bb2:	f00d fe7d 	bl	80138b0 <siprintf>
 8005bb6:	e7f0      	b.n	8005b9a <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <timeCommand+0x78>)
 8005bba:	7cdb      	ldrb	r3, [r3, #19]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d00f      	beq.n	8005be0 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d1ea      	bne.n	8005b9a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005bc4:	490d      	ldr	r1, [pc, #52]	; (8005bfc <timeCommand+0x78>)
 8005bc6:	7c4b      	ldrb	r3, [r1, #17]
 8005bc8:	7c8a      	ldrb	r2, [r1, #18]
 8005bca:	480e      	ldr	r0, [pc, #56]	; (8005c04 <timeCommand+0x80>)
 8005bcc:	9002      	str	r0, [sp, #8]
 8005bce:	89c8      	ldrh	r0, [r1, #14]
 8005bd0:	9001      	str	r0, [sp, #4]
 8005bd2:	7c09      	ldrb	r1, [r1, #16]
 8005bd4:	9100      	str	r1, [sp, #0]
 8005bd6:	490c      	ldr	r1, [pc, #48]	; (8005c08 <timeCommand+0x84>)
 8005bd8:	0020      	movs	r0, r4
 8005bda:	f00d fe69 	bl	80138b0 <siprintf>
 8005bde:	e7dc      	b.n	8005b9a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005be0:	4906      	ldr	r1, [pc, #24]	; (8005bfc <timeCommand+0x78>)
 8005be2:	7c4b      	ldrb	r3, [r1, #17]
 8005be4:	7c8a      	ldrb	r2, [r1, #18]
 8005be6:	4809      	ldr	r0, [pc, #36]	; (8005c0c <timeCommand+0x88>)
 8005be8:	9002      	str	r0, [sp, #8]
 8005bea:	89c8      	ldrh	r0, [r1, #14]
 8005bec:	9001      	str	r0, [sp, #4]
 8005bee:	7c09      	ldrb	r1, [r1, #16]
 8005bf0:	9100      	str	r1, [sp, #0]
 8005bf2:	4905      	ldr	r1, [pc, #20]	; (8005c08 <timeCommand+0x84>)
 8005bf4:	0020      	movs	r0, r4
 8005bf6:	f00d fe5b 	bl	80138b0 <siprintf>
 8005bfa:	e7ce      	b.n	8005b9a <timeCommand+0x16>
 8005bfc:	20005adc 	.word	0x20005adc
 8005c00:	08019008 	.word	0x08019008
 8005c04:	08019060 	.word	0x08019060
 8005c08:	08019030 	.word	0x08019030
 8005c0c:	0801905c 	.word	0x0801905c

08005c10 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c10:	b510      	push	{r4, lr}
 8005c12:	0004      	movs	r4, r0
	GetTimeDate();
 8005c14:	f007 fbf6 	bl	800d404 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005c18:	f7fe fb72 	bl	8004300 <GetDateString>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	4903      	ldr	r1, [pc, #12]	; (8005c2c <dateCommand+0x1c>)
 8005c20:	0020      	movs	r0, r4
 8005c22:	f00d fe45 	bl	80138b0 <siprintf>
}
 8005c26:	2000      	movs	r0, #0
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	08017790 	.word	0x08017790

08005c30 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	b085      	sub	sp, #20
 8005c34:	9001      	str	r0, [sp, #4]
 8005c36:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c3e:	aa03      	add	r2, sp, #12
 8005c40:	2101      	movs	r1, #1
 8005c42:	0030      	movs	r0, r6
 8005c44:	f008 f862 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8005c48:	0004      	movs	r4, r0
 8005c4a:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <getCommand+0x1e0>)
 8005c4c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005c4e:	2204      	movs	r2, #4
 8005c50:	4970      	ldr	r1, [pc, #448]	; (8005e14 <getCommand+0x1e4>)
 8005c52:	f00d fe71 	bl	8013938 <strncmp>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d000      	beq.n	8005c5c <getCommand+0x2c>
 8005c5a:	e090      	b.n	8005d7e <getCommand+0x14e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005c5c:	1d27      	adds	r7, r4, #4
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	1f1e      	subs	r6, r3, #4
 8005c62:	0032      	movs	r2, r6
 8005c64:	496c      	ldr	r1, [pc, #432]	; (8005e18 <getCommand+0x1e8>)
 8005c66:	0038      	movs	r0, r7
 8005c68:	f00d fe66 	bl	8013938 <strncmp>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d11f      	bne.n	8005cb0 <getCommand+0x80>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005c70:	4b6a      	ldr	r3, [pc, #424]	; (8005e1c <getCommand+0x1ec>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d009      	beq.n	8005c8c <getCommand+0x5c>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d00d      	beq.n	8005c98 <getCommand+0x68>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <getCommand+0x74>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005c80:	0022      	movs	r2, r4
 8005c82:	4967      	ldr	r1, [pc, #412]	; (8005e20 <getCommand+0x1f0>)
 8005c84:	9801      	ldr	r0, [sp, #4]
 8005c86:	f00d fe13 	bl	80138b0 <siprintf>
 8005c8a:	e084      	b.n	8005d96 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005c8c:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <getCommand+0x1f4>)
 8005c8e:	4966      	ldr	r1, [pc, #408]	; (8005e28 <getCommand+0x1f8>)
 8005c90:	9801      	ldr	r0, [sp, #4]
 8005c92:	f00d fe0d 	bl	80138b0 <siprintf>
 8005c96:	e07e      	b.n	8005d96 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005c98:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <getCommand+0x1fc>)
 8005c9a:	4963      	ldr	r1, [pc, #396]	; (8005e28 <getCommand+0x1f8>)
 8005c9c:	9801      	ldr	r0, [sp, #4]
 8005c9e:	f00d fe07 	bl	80138b0 <siprintf>
 8005ca2:	e078      	b.n	8005d96 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005ca4:	4a62      	ldr	r2, [pc, #392]	; (8005e30 <getCommand+0x200>)
 8005ca6:	4960      	ldr	r1, [pc, #384]	; (8005e28 <getCommand+0x1f8>)
 8005ca8:	9801      	ldr	r0, [sp, #4]
 8005caa:	f00d fe01 	bl	80138b0 <siprintf>
 8005cae:	e072      	b.n	8005d96 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005cb0:	0032      	movs	r2, r6
 8005cb2:	4960      	ldr	r1, [pc, #384]	; (8005e34 <getCommand+0x204>)
 8005cb4:	0038      	movs	r0, r7
 8005cb6:	f00d fe3f 	bl	8013938 <strncmp>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d119      	bne.n	8005cf2 <getCommand+0xc2>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005cbe:	4b57      	ldr	r3, [pc, #348]	; (8005e1c <getCommand+0x1ec>)
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d009      	beq.n	8005cda <getCommand+0xaa>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d00d      	beq.n	8005ce6 <getCommand+0xb6>
			else if(BOSMessaging.trace == TRACE_NONE)
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d8      	bne.n	8005c80 <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005cce:	4a58      	ldr	r2, [pc, #352]	; (8005e30 <getCommand+0x200>)
 8005cd0:	4955      	ldr	r1, [pc, #340]	; (8005e28 <getCommand+0x1f8>)
 8005cd2:	9801      	ldr	r0, [sp, #4]
 8005cd4:	f00d fdec 	bl	80138b0 <siprintf>
 8005cd8:	e05d      	b.n	8005d96 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005cda:	4a52      	ldr	r2, [pc, #328]	; (8005e24 <getCommand+0x1f4>)
 8005cdc:	4952      	ldr	r1, [pc, #328]	; (8005e28 <getCommand+0x1f8>)
 8005cde:	9801      	ldr	r0, [sp, #4]
 8005ce0:	f00d fde6 	bl	80138b0 <siprintf>
 8005ce4:	e057      	b.n	8005d96 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ce6:	4a51      	ldr	r2, [pc, #324]	; (8005e2c <getCommand+0x1fc>)
 8005ce8:	494f      	ldr	r1, [pc, #316]	; (8005e28 <getCommand+0x1f8>)
 8005cea:	9801      	ldr	r0, [sp, #4]
 8005cec:	f00d fde0 	bl	80138b0 <siprintf>
 8005cf0:	e051      	b.n	8005d96 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005cf2:	0032      	movs	r2, r6
 8005cf4:	4950      	ldr	r1, [pc, #320]	; (8005e38 <getCommand+0x208>)
 8005cf6:	0038      	movs	r0, r7
 8005cf8:	f00d fe1e 	bl	8013938 <strncmp>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d022      	beq.n	8005d46 <getCommand+0x116>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005d00:	0032      	movs	r2, r6
 8005d02:	494e      	ldr	r1, [pc, #312]	; (8005e3c <getCommand+0x20c>)
 8005d04:	0038      	movs	r0, r7
 8005d06:	f00d fe17 	bl	8013938 <strncmp>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d022      	beq.n	8005d54 <getCommand+0x124>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005d0e:	0032      	movs	r2, r6
 8005d10:	494b      	ldr	r1, [pc, #300]	; (8005e40 <getCommand+0x210>)
 8005d12:	0038      	movs	r0, r7
 8005d14:	f00d fe10 	bl	8013938 <strncmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d022      	beq.n	8005d62 <getCommand+0x132>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005d1c:	0032      	movs	r2, r6
 8005d1e:	4949      	ldr	r1, [pc, #292]	; (8005e44 <getCommand+0x214>)
 8005d20:	0038      	movs	r0, r7
 8005d22:	f00d fe09 	bl	8013938 <strncmp>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d022      	beq.n	8005d70 <getCommand+0x140>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005d2a:	0032      	movs	r2, r6
 8005d2c:	4946      	ldr	r1, [pc, #280]	; (8005e48 <getCommand+0x218>)
 8005d2e:	0038      	movs	r0, r7
 8005d30:	f00d fe02 	bl	8013938 <strncmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d129      	bne.n	8005d8c <getCommand+0x15c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005d38:	4b44      	ldr	r3, [pc, #272]	; (8005e4c <getCommand+0x21c>)
 8005d3a:	795a      	ldrb	r2, [r3, #5]
 8005d3c:	4944      	ldr	r1, [pc, #272]	; (8005e50 <getCommand+0x220>)
 8005d3e:	9801      	ldr	r0, [sp, #4]
 8005d40:	f00d fdb6 	bl	80138b0 <siprintf>
 8005d44:	e027      	b.n	8005d96 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <getCommand+0x21c>)
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	4941      	ldr	r1, [pc, #260]	; (8005e50 <getCommand+0x220>)
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	f00d fdaf 	bl	80138b0 <siprintf>
 8005d52:	e020      	b.n	8005d96 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005d54:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <getCommand+0x21c>)
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	493d      	ldr	r1, [pc, #244]	; (8005e50 <getCommand+0x220>)
 8005d5a:	9801      	ldr	r0, [sp, #4]
 8005d5c:	f00d fda8 	bl	80138b0 <siprintf>
 8005d60:	e019      	b.n	8005d96 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005d62:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <getCommand+0x21c>)
 8005d64:	885a      	ldrh	r2, [r3, #2]
 8005d66:	493a      	ldr	r1, [pc, #232]	; (8005e50 <getCommand+0x220>)
 8005d68:	9801      	ldr	r0, [sp, #4]
 8005d6a:	f00d fda1 	bl	80138b0 <siprintf>
 8005d6e:	e012      	b.n	8005d96 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005d70:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <getCommand+0x21c>)
 8005d72:	791a      	ldrb	r2, [r3, #4]
 8005d74:	4936      	ldr	r1, [pc, #216]	; (8005e50 <getCommand+0x220>)
 8005d76:	9801      	ldr	r0, [sp, #4]
 8005d78:	f00d fd9a 	bl	80138b0 <siprintf>
 8005d7c:	e00b      	b.n	8005d96 <getCommand+0x166>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005d7e:	2205      	movs	r2, #5
 8005d80:	4934      	ldr	r1, [pc, #208]	; (8005e54 <getCommand+0x224>)
 8005d82:	0020      	movs	r0, r4
 8005d84:	f00d fdd8 	bl	8013938 <strncmp>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d007      	beq.n	8005d9c <getCommand+0x16c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005d8c:	2213      	movs	r2, #19
 8005d8e:	4932      	ldr	r1, [pc, #200]	; (8005e58 <getCommand+0x228>)
 8005d90:	9801      	ldr	r0, [sp, #4]
 8005d92:	f00c fff6 	bl	8012d82 <memcpy>
}
 8005d96:	2000      	movs	r0, #0
 8005d98:	b005      	add	sp, #20
 8005d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d9c:	aa02      	add	r2, sp, #8
 8005d9e:	2102      	movs	r1, #2
 8005da0:	0030      	movs	r0, r6
 8005da2:	f007 ffb3 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8005da6:	0006      	movs	r6, r0
 8005da8:	4f2c      	ldr	r7, [pc, #176]	; (8005e5c <getCommand+0x22c>)
		for(i =0; i < MaxNumOfGroups; i++){
 8005daa:	2400      	movs	r4, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005dac:	0039      	movs	r1, r7
 8005dae:	0030      	movs	r0, r6
 8005db0:	f7fa f9a8 	bl	8000104 <strcmp>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d01b      	beq.n	8005df0 <getCommand+0x1c0>
		for(i =0; i < MaxNumOfGroups; i++){
 8005db8:	3401      	adds	r4, #1
 8005dba:	b2e4      	uxtb	r4, r4
 8005dbc:	370a      	adds	r7, #10
 8005dbe:	2c0a      	cmp	r4, #10
 8005dc0:	d1f4      	bne.n	8005dac <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005dc2:	0032      	movs	r2, r6
 8005dc4:	4926      	ldr	r1, [pc, #152]	; (8005e60 <getCommand+0x230>)
 8005dc6:	9801      	ldr	r0, [sp, #4]
 8005dc8:	f00d fd72 	bl	80138b0 <siprintf>
			return pdFALSE;
 8005dcc:	e7e3      	b.n	8005d96 <getCommand+0x166>
			for(j =1; j <= N; j++)						// N modules
 8005dce:	3401      	adds	r4, #1
 8005dd0:	b2e4      	uxtb	r4, r4
 8005dd2:	783b      	ldrb	r3, [r7, #0]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d3de      	bcc.n	8005d96 <getCommand+0x166>
				if(InGroup(j,i)){
 8005dd8:	1e63      	subs	r3, r4, #1
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	5b5b      	ldrh	r3, [r3, r5]
 8005dde:	421e      	tst	r6, r3
 8005de0:	d0f5      	beq.n	8005dce <getCommand+0x19e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005de2:	0023      	movs	r3, r4
 8005de4:	9801      	ldr	r0, [sp, #4]
 8005de6:	0002      	movs	r2, r0
 8005de8:	491e      	ldr	r1, [pc, #120]	; (8005e64 <getCommand+0x234>)
 8005dea:	f00d fd61 	bl	80138b0 <siprintf>
 8005dee:	e7ee      	b.n	8005dce <getCommand+0x19e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005df0:	0032      	movs	r2, r6
 8005df2:	491d      	ldr	r1, [pc, #116]	; (8005e68 <getCommand+0x238>)
 8005df4:	9801      	ldr	r0, [sp, #4]
 8005df6:	f00d fd5b 	bl	80138b0 <siprintf>
			for(j =1; j <= N; j++)						// N modules
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <getCommand+0x23c>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0c9      	beq.n	8005d96 <getCommand+0x166>
 8005e02:	2601      	movs	r6, #1
 8005e04:	40a6      	lsls	r6, r4
 8005e06:	2401      	movs	r4, #1
				if(InGroup(j,i)){
 8005e08:	4d19      	ldr	r5, [pc, #100]	; (8005e70 <getCommand+0x240>)
			for(j =1; j <= N; j++)						// N modules
 8005e0a:	4f18      	ldr	r7, [pc, #96]	; (8005e6c <getCommand+0x23c>)
 8005e0c:	e7e4      	b.n	8005dd8 <getCommand+0x1a8>
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	20000d6c 	.word	0x20000d6c
 8005e14:	080178fc 	.word	0x080178fc
 8005e18:	08017904 	.word	0x08017904
 8005e1c:	20005a5c 	.word	0x20005a5c
 8005e20:	080179c8 	.word	0x080179c8
 8005e24:	08016a64 	.word	0x08016a64
 8005e28:	080168bc 	.word	0x080168bc
 8005e2c:	08017910 	.word	0x08017910
 8005e30:	08017914 	.word	0x08017914
 8005e34:	0801791c 	.word	0x0801791c
 8005e38:	08017924 	.word	0x08017924
 8005e3c:	08017930 	.word	0x08017930
 8005e40:	0801793c 	.word	0x0801793c
 8005e44:	0801794c 	.word	0x0801794c
 8005e48:	08017960 	.word	0x08017960
 8005e4c:	20005adc 	.word	0x20005adc
 8005e50:	080171b4 	.word	0x080171b4
 8005e54:	08017974 	.word	0x08017974
 8005e58:	08017984 	.word	0x08017984
 8005e5c:	20000950 	.word	0x20000950
 8005e60:	08017998 	.word	0x08017998
 8005e64:	0801797c 	.word	0x0801797c
 8005e68:	080179b4 	.word	0x080179b4
 8005e6c:	20000030 	.word	0x20000030
 8005e70:	200009b4 	.word	0x200009b4

08005e74 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	0005      	movs	r5, r0
 8005e7a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e80:	aa01      	add	r2, sp, #4
 8005e82:	2101      	movs	r1, #1
 8005e84:	f007 ff42 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8005e88:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8005e8a:	9e01      	ldr	r6, [sp, #4]
 8005e8c:	0032      	movs	r2, r6
 8005e8e:	491e      	ldr	r1, [pc, #120]	; (8005f08 <defaultCommand+0x94>)
 8005e90:	f00d fd52 	bl	8013938 <strncmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d020      	beq.n	8005eda <defaultCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8005e98:	0032      	movs	r2, r6
 8005e9a:	491c      	ldr	r1, [pc, #112]	; (8005f0c <defaultCommand+0x98>)
 8005e9c:	0020      	movs	r0, r4
 8005e9e:	f00d fd4b 	bl	8013938 <strncmp>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d12a      	bne.n	8005efc <defaultCommand+0x88>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2116      	movs	r1, #22
 8005eaa:	20ff      	movs	r0, #255	; 0xff
 8005eac:	f001 fff8 	bl	8007ea0 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8005eb0:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <defaultCommand+0x9c>)
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8005eb6:	2064      	movs	r0, #100	; 0x64
 8005eb8:	f007 fe13 	bl	800dae2 <osDelay>
		ClearEEportsDir();
 8005ebc:	f7fd fae8 	bl	8003490 <ClearEEportsDir>
		ClearROtopology();
 8005ec0:	f003 ff50 	bl	8009d64 <ClearROtopology>
		osDelay(100);
 8005ec4:	2064      	movs	r0, #100	; 0x64
 8005ec6:	f007 fe0c 	bl	800dae2 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	4911      	ldr	r1, [pc, #68]	; (8005f14 <defaultCommand+0xa0>)
 8005ece:	0028      	movs	r0, r5
 8005ed0:	f00c ff57 	bl	8012d82 <memcpy>
}
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8005eda:	490f      	ldr	r1, [pc, #60]	; (8005f18 <defaultCommand+0xa4>)
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <defaultCommand+0xa8>)
 8005ede:	000a      	movs	r2, r1
 8005ee0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005ee2:	c213      	stmia	r2!, {r0, r1, r4}
 8005ee4:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005ee6:	c213      	stmia	r2!, {r0, r1, r4}
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005eec:	f7fd fa8c 	bl	8003408 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8005ef0:	2227      	movs	r2, #39	; 0x27
 8005ef2:	490b      	ldr	r1, [pc, #44]	; (8005f20 <defaultCommand+0xac>)
 8005ef4:	0028      	movs	r0, r5
 8005ef6:	f00c ff44 	bl	8012d82 <memcpy>
 8005efa:	e7eb      	b.n	8005ed4 <defaultCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8005efc:	220f      	movs	r2, #15
 8005efe:	4909      	ldr	r1, [pc, #36]	; (8005f24 <defaultCommand+0xb0>)
 8005f00:	0028      	movs	r0, r5
 8005f02:	f00c ff3e 	bl	8012d82 <memcpy>
 8005f06:	e7e5      	b.n	8005ed4 <defaultCommand+0x60>
 8005f08:	080177b8 	.word	0x080177b8
 8005f0c:	080177e8 	.word	0x080177e8
 8005f10:	200009e8 	.word	0x200009e8
 8005f14:	08017800 	.word	0x08017800
 8005f18:	20005adc 	.word	0x20005adc
 8005f1c:	20000014 	.word	0x20000014
 8005f20:	080177c0 	.word	0x080177c0
 8005f24:	080177f0 	.word	0x080177f0

08005f28 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2a:	46ce      	mov	lr, r9
 8005f2c:	4647      	mov	r7, r8
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08f      	sub	sp, #60	; 0x3c
 8005f32:	9007      	str	r0, [sp, #28]
 8005f34:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	930d      	str	r3, [sp, #52]	; 0x34
 8005f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f3c:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8005f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f40:	9309      	str	r3, [sp, #36]	; 0x24
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f42:	aa0d      	add	r2, sp, #52	; 0x34
 8005f44:	2101      	movs	r1, #1
 8005f46:	0028      	movs	r0, r5
 8005f48:	f007 fee0 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8005f4c:	0004      	movs	r4, r0
 8005f4e:	4bda      	ldr	r3, [pc, #872]	; (80062b8 <setCommand+0x390>)
 8005f50:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005f52:	2204      	movs	r2, #4
 8005f54:	49d9      	ldr	r1, [pc, #868]	; (80062bc <setCommand+0x394>)
 8005f56:	f00d fcef 	bl	8013938 <strncmp>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d015      	beq.n	8005f8a <setCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8005f5e:	2204      	movs	r2, #4
 8005f60:	49d7      	ldr	r1, [pc, #860]	; (80062c0 <setCommand+0x398>)
 8005f62:	0020      	movs	r0, r4
 8005f64:	f00d fce8 	bl	8013938 <strncmp>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d100      	bne.n	8005f6e <setCommand+0x46>
 8005f6c:	e167      	b.n	800623e <setCommand+0x316>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8005f6e:	2204      	movs	r2, #4
 8005f70:	49d4      	ldr	r1, [pc, #848]	; (80062c4 <setCommand+0x39c>)
 8005f72:	0020      	movs	r0, r4
 8005f74:	f00d fce0 	bl	8013938 <strncmp>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d100      	bne.n	8005f7e <setCommand+0x56>
 8005f7c:	e1f9      	b.n	8006372 <setCommand+0x44a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005f7e:	2213      	movs	r2, #19
 8005f80:	49d1      	ldr	r1, [pc, #836]	; (80062c8 <setCommand+0x3a0>)
 8005f82:	9807      	ldr	r0, [sp, #28]
 8005f84:	f00c fefd 	bl	8012d82 <memcpy>
 8005f88:	e266      	b.n	8006458 <setCommand+0x530>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005f8a:	aa0c      	add	r2, sp, #48	; 0x30
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	0028      	movs	r0, r5
 8005f90:	f007 febc 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8005f94:	0007      	movs	r7, r0
 8005f96:	4bcd      	ldr	r3, [pc, #820]	; (80062cc <setCommand+0x3a4>)
 8005f98:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005f9a:	4bc7      	ldr	r3, [pc, #796]	; (80062b8 <setCommand+0x390>)
 8005f9c:	681c      	ldr	r4, [r3, #0]
 8005f9e:	3404      	adds	r4, #4
 8005fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa2:	1f1d      	subs	r5, r3, #4
 8005fa4:	002a      	movs	r2, r5
 8005fa6:	49ca      	ldr	r1, [pc, #808]	; (80062d0 <setCommand+0x3a8>)
 8005fa8:	0020      	movs	r0, r4
 8005faa:	f00d fcc5 	bl	8013938 <strncmp>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d15b      	bne.n	800606a <setCommand+0x142>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8005fb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005fb4:	0022      	movs	r2, r4
 8005fb6:	49c7      	ldr	r1, [pc, #796]	; (80062d4 <setCommand+0x3ac>)
 8005fb8:	0038      	movs	r0, r7
 8005fba:	f00d fcbd 	bl	8013938 <strncmp>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d01a      	beq.n	8005ff8 <setCommand+0xd0>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8005fc2:	0022      	movs	r2, r4
 8005fc4:	49c4      	ldr	r1, [pc, #784]	; (80062d8 <setCommand+0x3b0>)
 8005fc6:	0038      	movs	r0, r7
 8005fc8:	f00d fcb6 	bl	8013938 <strncmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d02a      	beq.n	8006026 <setCommand+0xfe>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8005fd0:	0022      	movs	r2, r4
 8005fd2:	49c2      	ldr	r1, [pc, #776]	; (80062dc <setCommand+0x3b4>)
 8005fd4:	0038      	movs	r0, r7
 8005fd6:	f00d fcaf 	bl	8013938 <strncmp>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d02f      	beq.n	800603e <setCommand+0x116>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8005fde:	0022      	movs	r2, r4
 8005fe0:	49bf      	ldr	r1, [pc, #764]	; (80062e0 <setCommand+0x3b8>)
 8005fe2:	0038      	movs	r0, r7
 8005fe4:	f00d fca8 	bl	8013938 <strncmp>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d034      	beq.n	8006056 <setCommand+0x12e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8005fec:	220f      	movs	r2, #15
 8005fee:	49bd      	ldr	r1, [pc, #756]	; (80062e4 <setCommand+0x3bc>)
 8005ff0:	9807      	ldr	r0, [sp, #28]
 8005ff2:	f00c fec6 	bl	8012d82 <memcpy>
 8005ff6:	e22f      	b.n	8006458 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8005ff8:	4bbb      	ldr	r3, [pc, #748]	; (80062e8 <setCommand+0x3c0>)
 8005ffa:	2260      	movs	r2, #96	; 0x60
 8005ffc:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8005ffe:	7859      	ldrb	r1, [r3, #1]
 8006000:	0209      	lsls	r1, r1, #8
 8006002:	2360      	movs	r3, #96	; 0x60
 8006004:	4319      	orrs	r1, r3
 8006006:	308a      	adds	r0, #138	; 0x8a
 8006008:	0040      	lsls	r0, r0, #1
 800600a:	f005 fb0b 	bl	800b624 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800600e:	4baa      	ldr	r3, [pc, #680]	; (80062b8 <setCommand+0x390>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006016:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006018:	4bac      	ldr	r3, [pc, #688]	; (80062cc <setCommand+0x3a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	49b3      	ldr	r1, [pc, #716]	; (80062ec <setCommand+0x3c4>)
 800601e:	9807      	ldr	r0, [sp, #28]
 8006020:	f00d fc46 	bl	80138b0 <siprintf>
	return pdFALSE;
 8006024:	e218      	b.n	8006458 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006026:	4bb0      	ldr	r3, [pc, #704]	; (80062e8 <setCommand+0x3c0>)
 8006028:	2220      	movs	r2, #32
 800602a:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800602c:	7859      	ldrb	r1, [r3, #1]
 800602e:	0209      	lsls	r1, r1, #8
 8006030:	2320      	movs	r3, #32
 8006032:	4319      	orrs	r1, r3
 8006034:	308a      	adds	r0, #138	; 0x8a
 8006036:	0040      	lsls	r0, r0, #1
 8006038:	f005 faf4 	bl	800b624 <EE_WriteVariable>
 800603c:	e7e7      	b.n	800600e <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800603e:	4baa      	ldr	r3, [pc, #680]	; (80062e8 <setCommand+0x3c0>)
 8006040:	2240      	movs	r2, #64	; 0x40
 8006042:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006044:	7859      	ldrb	r1, [r3, #1]
 8006046:	0209      	lsls	r1, r1, #8
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	4319      	orrs	r1, r3
 800604c:	308a      	adds	r0, #138	; 0x8a
 800604e:	0040      	lsls	r0, r0, #1
 8006050:	f005 fae8 	bl	800b624 <EE_WriteVariable>
 8006054:	e7db      	b.n	800600e <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006056:	4ba4      	ldr	r3, [pc, #656]	; (80062e8 <setCommand+0x3c0>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800605c:	7859      	ldrb	r1, [r3, #1]
 800605e:	0209      	lsls	r1, r1, #8
 8006060:	308a      	adds	r0, #138	; 0x8a
 8006062:	0040      	lsls	r0, r0, #1
 8006064:	f005 fade 	bl	800b624 <EE_WriteVariable>
 8006068:	e7d1      	b.n	800600e <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800606a:	002a      	movs	r2, r5
 800606c:	49a0      	ldr	r1, [pc, #640]	; (80062f0 <setCommand+0x3c8>)
 800606e:	0020      	movs	r0, r4
 8006070:	f00d fc62 	bl	8013938 <strncmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	d149      	bne.n	800610c <setCommand+0x1e4>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006078:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800607a:	0022      	movs	r2, r4
 800607c:	4995      	ldr	r1, [pc, #596]	; (80062d4 <setCommand+0x3ac>)
 800607e:	0038      	movs	r0, r7
 8006080:	f00d fc5a 	bl	8013938 <strncmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	d01d      	beq.n	80060c4 <setCommand+0x19c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006088:	0022      	movs	r2, r4
 800608a:	4993      	ldr	r1, [pc, #588]	; (80062d8 <setCommand+0x3b0>)
 800608c:	0038      	movs	r0, r7
 800608e:	f00d fc53 	bl	8013938 <strncmp>
 8006092:	2800      	cmp	r0, #0
 8006094:	d022      	beq.n	80060dc <setCommand+0x1b4>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006096:	0022      	movs	r2, r4
 8006098:	498d      	ldr	r1, [pc, #564]	; (80062d0 <setCommand+0x3a8>)
 800609a:	0038      	movs	r0, r7
 800609c:	f00d fc4c 	bl	8013938 <strncmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d027      	beq.n	80060f4 <setCommand+0x1cc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80060a4:	0022      	movs	r2, r4
 80060a6:	498e      	ldr	r1, [pc, #568]	; (80062e0 <setCommand+0x3b8>)
 80060a8:	0038      	movs	r0, r7
 80060aa:	f00d fc45 	bl	8013938 <strncmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d19c      	bne.n	8005fec <setCommand+0xc4>
				BOSMessaging.trace =TRACE_NONE;
 80060b2:	4b8d      	ldr	r3, [pc, #564]	; (80062e8 <setCommand+0x3c0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060b8:	7819      	ldrb	r1, [r3, #0]
 80060ba:	308a      	adds	r0, #138	; 0x8a
 80060bc:	0040      	lsls	r0, r0, #1
 80060be:	f005 fab1 	bl	800b624 <EE_WriteVariable>
 80060c2:	e7a4      	b.n	800600e <setCommand+0xe6>
				BOSMessaging.trace =TRACE_BOTH;
 80060c4:	4b88      	ldr	r3, [pc, #544]	; (80062e8 <setCommand+0x3c0>)
 80060c6:	2203      	movs	r2, #3
 80060c8:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	21c0      	movs	r1, #192	; 0xc0
 80060ce:	0089      	lsls	r1, r1, #2
 80060d0:	4319      	orrs	r1, r3
 80060d2:	308a      	adds	r0, #138	; 0x8a
 80060d4:	0040      	lsls	r0, r0, #1
 80060d6:	f005 faa5 	bl	800b624 <EE_WriteVariable>
 80060da:	e798      	b.n	800600e <setCommand+0xe6>
				BOSMessaging.trace =TRACE_MESSAGE;
 80060dc:	4b82      	ldr	r3, [pc, #520]	; (80062e8 <setCommand+0x3c0>)
 80060de:	2201      	movs	r2, #1
 80060e0:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2180      	movs	r1, #128	; 0x80
 80060e6:	0049      	lsls	r1, r1, #1
 80060e8:	4319      	orrs	r1, r3
 80060ea:	308a      	adds	r0, #138	; 0x8a
 80060ec:	0040      	lsls	r0, r0, #1
 80060ee:	f005 fa99 	bl	800b624 <EE_WriteVariable>
 80060f2:	e78c      	b.n	800600e <setCommand+0xe6>
				BOSMessaging.trace =TRACE_RESPONSE;
 80060f4:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <setCommand+0x3c0>)
 80060f6:	2202      	movs	r2, #2
 80060f8:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	0089      	lsls	r1, r1, #2
 8006100:	4319      	orrs	r1, r3
 8006102:	308a      	adds	r0, #138	; 0x8a
 8006104:	0040      	lsls	r0, r0, #1
 8006106:	f005 fa8d 	bl	800b624 <EE_WriteVariable>
 800610a:	e780      	b.n	800600e <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800610c:	002a      	movs	r2, r5
 800610e:	4979      	ldr	r1, [pc, #484]	; (80062f4 <setCommand+0x3cc>)
 8006110:	0020      	movs	r0, r4
 8006112:	f00d fc11 	bl	8013938 <strncmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	d02f      	beq.n	800617a <setCommand+0x252>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800611a:	002a      	movs	r2, r5
 800611c:	4976      	ldr	r1, [pc, #472]	; (80062f8 <setCommand+0x3d0>)
 800611e:	0020      	movs	r0, r4
 8006120:	f00d fc0a 	bl	8013938 <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d05b      	beq.n	80061e0 <setCommand+0x2b8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006128:	002a      	movs	r2, r5
 800612a:	4974      	ldr	r1, [pc, #464]	; (80062fc <setCommand+0x3d4>)
 800612c:	0020      	movs	r0, r4
 800612e:	f00d fc03 	bl	8013938 <strncmp>
 8006132:	2800      	cmp	r0, #0
 8006134:	d062      	beq.n	80061fc <setCommand+0x2d4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006136:	002a      	movs	r2, r5
 8006138:	4971      	ldr	r1, [pc, #452]	; (8006300 <setCommand+0x3d8>)
 800613a:	0020      	movs	r0, r4
 800613c:	f00d fbfc 	bl	8013938 <strncmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	d069      	beq.n	8006218 <setCommand+0x2f0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006144:	002a      	movs	r2, r5
 8006146:	496f      	ldr	r1, [pc, #444]	; (8006304 <setCommand+0x3dc>)
 8006148:	0020      	movs	r0, r4
 800614a:	f00d fbf5 	bl	8013938 <strncmp>
 800614e:	2800      	cmp	r0, #0
 8006150:	d000      	beq.n	8006154 <setCommand+0x22c>
 8006152:	e714      	b.n	8005f7e <setCommand+0x56>
			temp16 =atoi((const char* )pcParameterString2);
 8006154:	0038      	movs	r0, r7
 8006156:	f00c fd9c 	bl	8012c92 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800615a:	1e43      	subs	r3, r0, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	2bfe      	cmp	r3, #254	; 0xfe
 8006160:	d900      	bls.n	8006164 <setCommand+0x23c>
 8006162:	e743      	b.n	8005fec <setCommand+0xc4>
				BOS.buttons.maxInterClickTime =temp16;
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <setCommand+0x3e0>)
 8006166:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006168:	0200      	lsls	r0, r0, #8
 800616a:	7919      	ldrb	r1, [r3, #4]
 800616c:	4301      	orrs	r1, r0
 800616e:	b289      	uxth	r1, r1
 8006170:	2018      	movs	r0, #24
 8006172:	30ff      	adds	r0, #255	; 0xff
 8006174:	f005 fa56 	bl	800b624 <EE_WriteVariable>
 8006178:	e749      	b.n	800600e <setCommand+0xe6>
			temp2 =atoi((const char* )pcParameterString2);
 800617a:	0038      	movs	r0, r7
 800617c:	f00c fd89 	bl	8012c92 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006180:	23e1      	movs	r3, #225	; 0xe1
 8006182:	031b      	lsls	r3, r3, #12
 8006184:	4298      	cmp	r0, r3
 8006186:	d900      	bls.n	800618a <setCommand+0x262>
 8006188:	e730      	b.n	8005fec <setCommand+0xc4>
				BOS.clibaudrate =temp2;
 800618a:	4c5f      	ldr	r4, [pc, #380]	; (8006308 <setCommand+0x3e0>)
 800618c:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800618e:	b281      	uxth	r1, r0
 8006190:	208c      	movs	r0, #140	; 0x8c
 8006192:	0040      	lsls	r0, r0, #1
 8006194:	f005 fa46 	bl	800b624 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006198:	8961      	ldrh	r1, [r4, #10]
 800619a:	201a      	movs	r0, #26
 800619c:	30ff      	adds	r0, #255	; 0xff
 800619e:	f005 fa41 	bl	800b624 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80061a2:	4b45      	ldr	r3, [pc, #276]	; (80062b8 <setCommand+0x390>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061aa:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80061ac:	4b47      	ldr	r3, [pc, #284]	; (80062cc <setCommand+0x3a4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	494e      	ldr	r1, [pc, #312]	; (80062ec <setCommand+0x3c4>)
 80061b2:	9c07      	ldr	r4, [sp, #28]
 80061b4:	0020      	movs	r0, r4
 80061b6:	f00d fb7b 	bl	80138b0 <siprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80061ba:	0020      	movs	r0, r4
 80061bc:	f7f9 ffac 	bl	8000118 <strlen>
 80061c0:	46a4      	mov	ip, r4
 80061c2:	4460      	add	r0, ip
 80061c4:	2230      	movs	r2, #48	; 0x30
 80061c6:	4951      	ldr	r1, [pc, #324]	; (800630c <setCommand+0x3e4>)
 80061c8:	f00c fddb 	bl	8012d82 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80061cc:	0020      	movs	r0, r4
 80061ce:	f7f9 ffa3 	bl	8000118 <strlen>
 80061d2:	46a4      	mov	ip, r4
 80061d4:	4460      	add	r0, ip
 80061d6:	22b2      	movs	r2, #178	; 0xb2
 80061d8:	494d      	ldr	r1, [pc, #308]	; (8006310 <setCommand+0x3e8>)
 80061da:	f00c fdd2 	bl	8012d82 <memcpy>
 80061de:	e13b      	b.n	8006458 <setCommand+0x530>
			temp16 =atoi((const char* )pcParameterString2);
 80061e0:	0038      	movs	r0, r7
 80061e2:	f00c fd56 	bl	8012c92 <atoi>
 80061e6:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d100      	bne.n	80061ee <setCommand+0x2c6>
 80061ec:	e6fe      	b.n	8005fec <setCommand+0xc4>
				BOS.buttons.debounce =temp16;
 80061ee:	4b46      	ldr	r3, [pc, #280]	; (8006308 <setCommand+0x3e0>)
 80061f0:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80061f2:	2016      	movs	r0, #22
 80061f4:	30ff      	adds	r0, #255	; 0xff
 80061f6:	f005 fa15 	bl	800b624 <EE_WriteVariable>
 80061fa:	e708      	b.n	800600e <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 80061fc:	0038      	movs	r0, r7
 80061fe:	f00c fd48 	bl	8012c92 <atoi>
 8006202:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006204:	2900      	cmp	r1, #0
 8006206:	d100      	bne.n	800620a <setCommand+0x2e2>
 8006208:	e6f0      	b.n	8005fec <setCommand+0xc4>
				BOS.buttons.singleClickTime =temp16;
 800620a:	4b3f      	ldr	r3, [pc, #252]	; (8006308 <setCommand+0x3e0>)
 800620c:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800620e:	208b      	movs	r0, #139	; 0x8b
 8006210:	0040      	lsls	r0, r0, #1
 8006212:	f005 fa07 	bl	800b624 <EE_WriteVariable>
 8006216:	e6fa      	b.n	800600e <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 8006218:	0038      	movs	r0, r7
 800621a:	f00c fd3a 	bl	8012c92 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800621e:	1e43      	subs	r3, r0, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	2bfe      	cmp	r3, #254	; 0xfe
 8006224:	d900      	bls.n	8006228 <setCommand+0x300>
 8006226:	e6e1      	b.n	8005fec <setCommand+0xc4>
				BOS.buttons.minInterClickTime =temp16;
 8006228:	b2c0      	uxtb	r0, r0
 800622a:	4b37      	ldr	r3, [pc, #220]	; (8006308 <setCommand+0x3e0>)
 800622c:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800622e:	7959      	ldrb	r1, [r3, #5]
 8006230:	0209      	lsls	r1, r1, #8
 8006232:	4301      	orrs	r1, r0
 8006234:	2018      	movs	r0, #24
 8006236:	30ff      	adds	r0, #255	; 0xff
 8006238:	f005 f9f4 	bl	800b624 <EE_WriteVariable>
 800623c:	e6e7      	b.n	800600e <setCommand+0xe6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800623e:	aa0c      	add	r2, sp, #48	; 0x30
 8006240:	2102      	movs	r1, #2
 8006242:	0028      	movs	r0, r5
 8006244:	f007 fd62 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006248:	4f20      	ldr	r7, [pc, #128]	; (80062cc <setCommand+0x3a4>)
 800624a:	6038      	str	r0, [r7, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800624c:	aa0b      	add	r2, sp, #44	; 0x2c
 800624e:	2103      	movs	r1, #3
 8006250:	0028      	movs	r0, r5
 8006252:	f007 fd5b 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006256:	4c2f      	ldr	r4, [pc, #188]	; (8006314 <setCommand+0x3ec>)
 8006258:	6020      	str	r0, [r4, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800625a:	aa0a      	add	r2, sp, #40	; 0x28
 800625c:	2104      	movs	r1, #4
 800625e:	0028      	movs	r0, r5
 8006260:	f007 fd54 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006264:	4e2c      	ldr	r6, [pc, #176]	; (8006318 <setCommand+0x3f0>)
 8006266:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006268:	aa09      	add	r2, sp, #36	; 0x24
 800626a:	2105      	movs	r1, #5
 800626c:	0028      	movs	r0, r5
 800626e:	f007 fd4d 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006272:	4d2a      	ldr	r5, [pc, #168]	; (800631c <setCommand+0x3f4>)
 8006274:	6028      	str	r0, [r5, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006276:	6838      	ldr	r0, [r7, #0]
 8006278:	f00c fd0b 	bl	8012c92 <atoi>
 800627c:	b2c7      	uxtb	r7, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	f00c fd07 	bl	8012c92 <atoi>
 8006284:	0004      	movs	r4, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006286:	6830      	ldr	r0, [r6, #0]
 8006288:	f00c fd03 	bl	8012c92 <atoi>
 800628c:	0006      	movs	r6, r0
		if(pcParameterString5 != NULL){
 800628e:	682d      	ldr	r5, [r5, #0]
 8006290:	2d00      	cmp	r5, #0
 8006292:	d04b      	beq.n	800632c <setCommand+0x404>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006294:	2202      	movs	r2, #2
 8006296:	4922      	ldr	r1, [pc, #136]	; (8006320 <setCommand+0x3f8>)
 8006298:	0028      	movs	r0, r5
 800629a:	f00d fb4d 	bl	8013938 <strncmp>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d042      	beq.n	8006328 <setCommand+0x400>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80062a2:	2202      	movs	r2, #2
 80062a4:	491f      	ldr	r1, [pc, #124]	; (8006324 <setCommand+0x3fc>)
 80062a6:	0028      	movs	r0, r5
 80062a8:	f00d fb46 	bl	8013938 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d000      	beq.n	80062b2 <setCommand+0x38a>
 80062b0:	e69c      	b.n	8005fec <setCommand+0xc4>
				temp84 =RTC_PM;
 80062b2:	2302      	movs	r3, #2
 80062b4:	4699      	mov	r9, r3
 80062b6:	e039      	b.n	800632c <setCommand+0x404>
 80062b8:	20000d68 	.word	0x20000d68
 80062bc:	080178fc 	.word	0x080178fc
 80062c0:	08018028 	.word	0x08018028
 80062c4:	08018034 	.word	0x08018034
 80062c8:	08017984 	.word	0x08017984
 80062cc:	20000d74 	.word	0x20000d74
 80062d0:	08017904 	.word	0x08017904
 80062d4:	08016a64 	.word	0x08016a64
 80062d8:	08017f24 	.word	0x08017f24
 80062dc:	08017f2c 	.word	0x08017f2c
 80062e0:	08017914 	.word	0x08017914
 80062e4:	080177f0 	.word	0x080177f0
 80062e8:	20005a5c 	.word	0x20005a5c
 80062ec:	08017f30 	.word	0x08017f30
 80062f0:	0801791c 	.word	0x0801791c
 80062f4:	08017924 	.word	0x08017924
 80062f8:	08017930 	.word	0x08017930
 80062fc:	0801793c 	.word	0x0801793c
 8006300:	0801794c 	.word	0x0801794c
 8006304:	08017960 	.word	0x08017960
 8006308:	20005adc 	.word	0x20005adc
 800630c:	08017f44 	.word	0x08017f44
 8006310:	08017f74 	.word	0x08017f74
 8006314:	20000d7c 	.word	0x20000d7c
 8006318:	20000d80 	.word	0x20000d80
 800631c:	20000d84 	.word	0x20000d84
 8006320:	08019430 	.word	0x08019430
 8006324:	08018030 	.word	0x08018030
				temp84 =RTC_AM;
 8006328:	2301      	movs	r3, #1
 800632a:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800632c:	2f17      	cmp	r7, #23
 800632e:	d900      	bls.n	8006332 <setCommand+0x40a>
 8006330:	e65c      	b.n	8005fec <setCommand+0xc4>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006332:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006334:	2c3b      	cmp	r4, #59	; 0x3b
 8006336:	d900      	bls.n	800633a <setCommand+0x412>
 8006338:	e658      	b.n	8005fec <setCommand+0xc4>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800633a:	b2f5      	uxtb	r5, r6
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800633c:	2d3b      	cmp	r5, #59	; 0x3b
 800633e:	d900      	bls.n	8006342 <setCommand+0x41a>
 8006340:	e654      	b.n	8005fec <setCommand+0xc4>
				GetTimeDate();
 8006342:	f007 f85f 	bl	800d404 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006346:	4bd0      	ldr	r3, [pc, #832]	; (8006688 <setCommand+0x760>)
 8006348:	7d1a      	ldrb	r2, [r3, #20]
 800634a:	4694      	mov	ip, r2
 800634c:	8b1a      	ldrh	r2, [r3, #24]
 800634e:	7d59      	ldrb	r1, [r3, #21]
 8006350:	7d98      	ldrb	r0, [r3, #22]
 8006352:	7b1b      	ldrb	r3, [r3, #12]
 8006354:	b25b      	sxtb	r3, r3
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	464b      	mov	r3, r9
 800635a:	9303      	str	r3, [sp, #12]
 800635c:	9702      	str	r7, [sp, #8]
 800635e:	9401      	str	r4, [sp, #4]
 8006360:	9500      	str	r5, [sp, #0]
 8006362:	4663      	mov	r3, ip
 8006364:	f006 fff4 	bl	800d350 <BOS_CalendarConfig>
 8006368:	0007      	movs	r7, r0
	if(result == BOS_OK){
 800636a:	2f00      	cmp	r7, #0
 800636c:	d100      	bne.n	8006370 <setCommand+0x448>
 800636e:	e64e      	b.n	800600e <setCommand+0xe6>
 8006370:	e06c      	b.n	800644c <setCommand+0x524>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006372:	aa0c      	add	r2, sp, #48	; 0x30
 8006374:	2102      	movs	r1, #2
 8006376:	0028      	movs	r0, r5
 8006378:	f007 fcc8 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800637c:	4cc3      	ldr	r4, [pc, #780]	; (800668c <setCommand+0x764>)
 800637e:	6020      	str	r0, [r4, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006380:	aa0b      	add	r2, sp, #44	; 0x2c
 8006382:	2103      	movs	r1, #3
 8006384:	0028      	movs	r0, r5
 8006386:	f007 fcc1 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800638a:	4bc1      	ldr	r3, [pc, #772]	; (8006690 <setCommand+0x768>)
 800638c:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800638e:	aa0a      	add	r2, sp, #40	; 0x28
 8006390:	2104      	movs	r1, #4
 8006392:	0028      	movs	r0, r5
 8006394:	f007 fcba 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006398:	4bbe      	ldr	r3, [pc, #760]	; (8006694 <setCommand+0x76c>)
 800639a:	4699      	mov	r9, r3
 800639c:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800639e:	aa09      	add	r2, sp, #36	; 0x24
 80063a0:	2105      	movs	r1, #5
 80063a2:	0028      	movs	r0, r5
 80063a4:	f007 fcb2 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80063a8:	4fbb      	ldr	r7, [pc, #748]	; (8006698 <setCommand+0x770>)
 80063aa:	6038      	str	r0, [r7, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80063ac:	464b      	mov	r3, r9
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	f00c fc6f 	bl	8012c92 <atoi>
 80063b4:	0005      	movs	r5, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f00c fc6b 	bl	8012c92 <atoi>
 80063bc:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80063be:	6824      	ldr	r4, [r4, #0]
 80063c0:	2206      	movs	r2, #6
 80063c2:	49b6      	ldr	r1, [pc, #728]	; (800669c <setCommand+0x774>)
 80063c4:	0020      	movs	r0, r4
 80063c6:	f00d fab7 	bl	8013938 <strncmp>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d100      	bne.n	80063d0 <setCommand+0x4a8>
 80063ce:	e096      	b.n	80064fe <setCommand+0x5d6>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80063d0:	2207      	movs	r2, #7
 80063d2:	49b3      	ldr	r1, [pc, #716]	; (80066a0 <setCommand+0x778>)
 80063d4:	0020      	movs	r0, r4
 80063d6:	f00d faaf 	bl	8013938 <strncmp>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d100      	bne.n	80063e0 <setCommand+0x4b8>
 80063de:	e14f      	b.n	8006680 <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80063e0:	2209      	movs	r2, #9
 80063e2:	49b0      	ldr	r1, [pc, #704]	; (80066a4 <setCommand+0x77c>)
 80063e4:	0020      	movs	r0, r4
 80063e6:	f00d faa7 	bl	8013938 <strncmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d100      	bne.n	80063f0 <setCommand+0x4c8>
 80063ee:	e195      	b.n	800671c <setCommand+0x7f4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80063f0:	2208      	movs	r2, #8
 80063f2:	49ad      	ldr	r1, [pc, #692]	; (80066a8 <setCommand+0x780>)
 80063f4:	0020      	movs	r0, r4
 80063f6:	f00d fa9f 	bl	8013938 <strncmp>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d100      	bne.n	8006400 <setCommand+0x4d8>
 80063fe:	e190      	b.n	8006722 <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006400:	2206      	movs	r2, #6
 8006402:	49aa      	ldr	r1, [pc, #680]	; (80066ac <setCommand+0x784>)
 8006404:	0020      	movs	r0, r4
 8006406:	f00d fa97 	bl	8013938 <strncmp>
 800640a:	2800      	cmp	r0, #0
 800640c:	d100      	bne.n	8006410 <setCommand+0x4e8>
 800640e:	e18b      	b.n	8006728 <setCommand+0x800>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006410:	2208      	movs	r2, #8
 8006412:	49a7      	ldr	r1, [pc, #668]	; (80066b0 <setCommand+0x788>)
 8006414:	0020      	movs	r0, r4
 8006416:	f00d fa8f 	bl	8013938 <strncmp>
 800641a:	2800      	cmp	r0, #0
 800641c:	d100      	bne.n	8006420 <setCommand+0x4f8>
 800641e:	e186      	b.n	800672e <setCommand+0x806>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006420:	2206      	movs	r2, #6
 8006422:	49a4      	ldr	r1, [pc, #656]	; (80066b4 <setCommand+0x78c>)
 8006424:	0020      	movs	r0, r4
 8006426:	f00d fa87 	bl	8013938 <strncmp>
 800642a:	2800      	cmp	r0, #0
 800642c:	d100      	bne.n	8006430 <setCommand+0x508>
 800642e:	e181      	b.n	8006734 <setCommand+0x80c>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006430:	4b97      	ldr	r3, [pc, #604]	; (8006690 <setCommand+0x768>)
 8006432:	681c      	ldr	r4, [r3, #0]
 8006434:	2207      	movs	r2, #7
 8006436:	49a0      	ldr	r1, [pc, #640]	; (80066b8 <setCommand+0x790>)
 8006438:	0020      	movs	r0, r4
 800643a:	f00d fa7d 	bl	8013938 <strncmp>
			result =BOS_ERR_WrongValue;
 800643e:	2768      	movs	r7, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006440:	2800      	cmp	r0, #0
 8006442:	d003      	beq.n	800644c <setCommand+0x524>
 8006444:	e067      	b.n	8006516 <setCommand+0x5ee>
			temp82 =JANUARY;
 8006446:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006448:	2f00      	cmp	r7, #0
 800644a:	d036      	beq.n	80064ba <setCommand+0x592>
	else if(result == BOS_ERR_WrongParam)
 800644c:	2f67      	cmp	r7, #103	; 0x67
 800644e:	d100      	bne.n	8006452 <setCommand+0x52a>
 8006450:	e595      	b.n	8005f7e <setCommand+0x56>
	else if(result == BOS_ERR_WrongValue)
 8006452:	2f68      	cmp	r7, #104	; 0x68
 8006454:	d100      	bne.n	8006458 <setCommand+0x530>
 8006456:	e5c9      	b.n	8005fec <setCommand+0xc4>
}
 8006458:	2000      	movs	r0, #0
 800645a:	b00f      	add	sp, #60	; 0x3c
 800645c:	bc0c      	pop	{r2, r3}
 800645e:	4690      	mov	r8, r2
 8006460:	4699      	mov	r9, r3
 8006462:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp82 =FEBRUARY;
 8006464:	2402      	movs	r4, #2
 8006466:	e7ef      	b.n	8006448 <setCommand+0x520>
 8006468:	2402      	movs	r4, #2
 800646a:	e7ed      	b.n	8006448 <setCommand+0x520>
			temp82 =MARCH;
 800646c:	2403      	movs	r4, #3
 800646e:	e7eb      	b.n	8006448 <setCommand+0x520>
 8006470:	2403      	movs	r4, #3
 8006472:	e7e9      	b.n	8006448 <setCommand+0x520>
			temp82 =APRIL;
 8006474:	2404      	movs	r4, #4
 8006476:	e7e7      	b.n	8006448 <setCommand+0x520>
 8006478:	2404      	movs	r4, #4
 800647a:	e7e5      	b.n	8006448 <setCommand+0x520>
			temp82 =MAY;
 800647c:	2405      	movs	r4, #5
 800647e:	e7e3      	b.n	8006448 <setCommand+0x520>
 8006480:	2405      	movs	r4, #5
 8006482:	e7e1      	b.n	8006448 <setCommand+0x520>
			temp82 =JUNE;
 8006484:	2406      	movs	r4, #6
 8006486:	e7df      	b.n	8006448 <setCommand+0x520>
 8006488:	2406      	movs	r4, #6
 800648a:	e7dd      	b.n	8006448 <setCommand+0x520>
			temp82 =JULY;
 800648c:	2407      	movs	r4, #7
 800648e:	e7db      	b.n	8006448 <setCommand+0x520>
 8006490:	2407      	movs	r4, #7
 8006492:	e7d9      	b.n	8006448 <setCommand+0x520>
			temp82 =AUGUST;
 8006494:	2408      	movs	r4, #8
 8006496:	e7d7      	b.n	8006448 <setCommand+0x520>
 8006498:	2408      	movs	r4, #8
 800649a:	e7d5      	b.n	8006448 <setCommand+0x520>
			temp82 =SEPTEMBER;
 800649c:	2409      	movs	r4, #9
 800649e:	e7d3      	b.n	8006448 <setCommand+0x520>
 80064a0:	2409      	movs	r4, #9
 80064a2:	e7d1      	b.n	8006448 <setCommand+0x520>
			temp82 =OCTOBER;
 80064a4:	240a      	movs	r4, #10
 80064a6:	e7cf      	b.n	8006448 <setCommand+0x520>
 80064a8:	240a      	movs	r4, #10
 80064aa:	e7cd      	b.n	8006448 <setCommand+0x520>
			temp82 =NOVEMBER;
 80064ac:	240b      	movs	r4, #11
 80064ae:	e7cb      	b.n	8006448 <setCommand+0x520>
 80064b0:	240b      	movs	r4, #11
 80064b2:	e7c9      	b.n	8006448 <setCommand+0x520>
			temp82 =DECEMBER;
 80064b4:	240c      	movs	r4, #12
 80064b6:	e7c7      	b.n	8006448 <setCommand+0x520>
			temp82 =JANUARY;
 80064b8:	2401      	movs	r4, #1
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064ba:	b2ed      	uxtb	r5, r5
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064bc:	1e6b      	subs	r3, r5, #1
 80064be:	2b1e      	cmp	r3, #30
 80064c0:	d900      	bls.n	80064c4 <setCommand+0x59c>
 80064c2:	e593      	b.n	8005fec <setCommand+0xc4>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064c4:	b2b7      	uxth	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064c6:	4b7d      	ldr	r3, [pc, #500]	; (80066bc <setCommand+0x794>)
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b64      	cmp	r3, #100	; 0x64
 80064ce:	d900      	bls.n	80064d2 <setCommand+0x5aa>
 80064d0:	e58c      	b.n	8005fec <setCommand+0xc4>
				GetTimeDate();
 80064d2:	f006 ff97 	bl	800d404 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064d6:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <setCommand+0x760>)
 80064d8:	220c      	movs	r2, #12
 80064da:	569a      	ldrsb	r2, [r3, r2]
 80064dc:	9204      	str	r2, [sp, #16]
 80064de:	7cda      	ldrb	r2, [r3, #19]
 80064e0:	9203      	str	r2, [sp, #12]
 80064e2:	7c9a      	ldrb	r2, [r3, #18]
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	7c5a      	ldrb	r2, [r3, #17]
 80064e8:	9201      	str	r2, [sp, #4]
 80064ea:	7c1b      	ldrb	r3, [r3, #16]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4643      	mov	r3, r8
 80064f0:	003a      	movs	r2, r7
 80064f2:	0029      	movs	r1, r5
 80064f4:	0020      	movs	r0, r4
 80064f6:	f006 ff2b 	bl	800d350 <BOS_CalendarConfig>
 80064fa:	0007      	movs	r7, r0
 80064fc:	e735      	b.n	800636a <setCommand+0x442>
			temp81 =MONDAY;
 80064fe:	2301      	movs	r3, #1
 8006500:	4698      	mov	r8, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <setCommand+0x768>)
 8006504:	681c      	ldr	r4, [r3, #0]
 8006506:	2207      	movs	r2, #7
 8006508:	496b      	ldr	r1, [pc, #428]	; (80066b8 <setCommand+0x790>)
 800650a:	0020      	movs	r0, r4
 800650c:	f00d fa14 	bl	8013938 <strncmp>
 8006510:	2700      	movs	r7, #0
 8006512:	2800      	cmp	r0, #0
 8006514:	d0d0      	beq.n	80064b8 <setCommand+0x590>
 8006516:	2202      	movs	r2, #2
 8006518:	4969      	ldr	r1, [pc, #420]	; (80066c0 <setCommand+0x798>)
 800651a:	0020      	movs	r0, r4
 800651c:	f00d fa0c 	bl	8013938 <strncmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	d100      	bne.n	8006526 <setCommand+0x5fe>
 8006524:	e78f      	b.n	8006446 <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006526:	2208      	movs	r2, #8
 8006528:	4966      	ldr	r1, [pc, #408]	; (80066c4 <setCommand+0x79c>)
 800652a:	0020      	movs	r0, r4
 800652c:	f00d fa04 	bl	8013938 <strncmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	d097      	beq.n	8006464 <setCommand+0x53c>
 8006534:	2202      	movs	r2, #2
 8006536:	4964      	ldr	r1, [pc, #400]	; (80066c8 <setCommand+0x7a0>)
 8006538:	0020      	movs	r0, r4
 800653a:	f00d f9fd 	bl	8013938 <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d092      	beq.n	8006468 <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006542:	2205      	movs	r2, #5
 8006544:	4961      	ldr	r1, [pc, #388]	; (80066cc <setCommand+0x7a4>)
 8006546:	0020      	movs	r0, r4
 8006548:	f00d f9f6 	bl	8013938 <strncmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	d08d      	beq.n	800646c <setCommand+0x544>
 8006550:	2202      	movs	r2, #2
 8006552:	495f      	ldr	r1, [pc, #380]	; (80066d0 <setCommand+0x7a8>)
 8006554:	0020      	movs	r0, r4
 8006556:	f00d f9ef 	bl	8013938 <strncmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	d088      	beq.n	8006470 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800655e:	2205      	movs	r2, #5
 8006560:	495c      	ldr	r1, [pc, #368]	; (80066d4 <setCommand+0x7ac>)
 8006562:	0020      	movs	r0, r4
 8006564:	f00d f9e8 	bl	8013938 <strncmp>
 8006568:	2800      	cmp	r0, #0
 800656a:	d083      	beq.n	8006474 <setCommand+0x54c>
 800656c:	2202      	movs	r2, #2
 800656e:	495a      	ldr	r1, [pc, #360]	; (80066d8 <setCommand+0x7b0>)
 8006570:	0020      	movs	r0, r4
 8006572:	f00d f9e1 	bl	8013938 <strncmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	d100      	bne.n	800657c <setCommand+0x654>
 800657a:	e77d      	b.n	8006478 <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800657c:	2203      	movs	r2, #3
 800657e:	4957      	ldr	r1, [pc, #348]	; (80066dc <setCommand+0x7b4>)
 8006580:	0020      	movs	r0, r4
 8006582:	f00d f9d9 	bl	8013938 <strncmp>
 8006586:	2800      	cmp	r0, #0
 8006588:	d100      	bne.n	800658c <setCommand+0x664>
 800658a:	e777      	b.n	800647c <setCommand+0x554>
 800658c:	2202      	movs	r2, #2
 800658e:	4954      	ldr	r1, [pc, #336]	; (80066e0 <setCommand+0x7b8>)
 8006590:	0020      	movs	r0, r4
 8006592:	f00d f9d1 	bl	8013938 <strncmp>
 8006596:	2800      	cmp	r0, #0
 8006598:	d100      	bne.n	800659c <setCommand+0x674>
 800659a:	e771      	b.n	8006480 <setCommand+0x558>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 800659c:	2204      	movs	r2, #4
 800659e:	4951      	ldr	r1, [pc, #324]	; (80066e4 <setCommand+0x7bc>)
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00d f9c9 	bl	8013938 <strncmp>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d100      	bne.n	80065ac <setCommand+0x684>
 80065aa:	e76b      	b.n	8006484 <setCommand+0x55c>
 80065ac:	2202      	movs	r2, #2
 80065ae:	494e      	ldr	r1, [pc, #312]	; (80066e8 <setCommand+0x7c0>)
 80065b0:	0020      	movs	r0, r4
 80065b2:	f00d f9c1 	bl	8013938 <strncmp>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d100      	bne.n	80065bc <setCommand+0x694>
 80065ba:	e765      	b.n	8006488 <setCommand+0x560>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80065bc:	2204      	movs	r2, #4
 80065be:	494b      	ldr	r1, [pc, #300]	; (80066ec <setCommand+0x7c4>)
 80065c0:	0020      	movs	r0, r4
 80065c2:	f00d f9b9 	bl	8013938 <strncmp>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d100      	bne.n	80065cc <setCommand+0x6a4>
 80065ca:	e75f      	b.n	800648c <setCommand+0x564>
 80065cc:	2202      	movs	r2, #2
 80065ce:	4948      	ldr	r1, [pc, #288]	; (80066f0 <setCommand+0x7c8>)
 80065d0:	0020      	movs	r0, r4
 80065d2:	f00d f9b1 	bl	8013938 <strncmp>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d100      	bne.n	80065dc <setCommand+0x6b4>
 80065da:	e759      	b.n	8006490 <setCommand+0x568>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065dc:	2205      	movs	r2, #5
 80065de:	4945      	ldr	r1, [pc, #276]	; (80066f4 <setCommand+0x7cc>)
 80065e0:	0020      	movs	r0, r4
 80065e2:	f00d f9a9 	bl	8013938 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d100      	bne.n	80065ec <setCommand+0x6c4>
 80065ea:	e753      	b.n	8006494 <setCommand+0x56c>
 80065ec:	2202      	movs	r2, #2
 80065ee:	4942      	ldr	r1, [pc, #264]	; (80066f8 <setCommand+0x7d0>)
 80065f0:	0020      	movs	r0, r4
 80065f2:	f00d f9a1 	bl	8013938 <strncmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d100      	bne.n	80065fc <setCommand+0x6d4>
 80065fa:	e74d      	b.n	8006498 <setCommand+0x570>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065fc:	2209      	movs	r2, #9
 80065fe:	493f      	ldr	r1, [pc, #252]	; (80066fc <setCommand+0x7d4>)
 8006600:	0020      	movs	r0, r4
 8006602:	f00d f999 	bl	8013938 <strncmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	d100      	bne.n	800660c <setCommand+0x6e4>
 800660a:	e747      	b.n	800649c <setCommand+0x574>
 800660c:	2202      	movs	r2, #2
 800660e:	493c      	ldr	r1, [pc, #240]	; (8006700 <setCommand+0x7d8>)
 8006610:	0020      	movs	r0, r4
 8006612:	f00d f991 	bl	8013938 <strncmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d100      	bne.n	800661c <setCommand+0x6f4>
 800661a:	e741      	b.n	80064a0 <setCommand+0x578>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800661c:	2207      	movs	r2, #7
 800661e:	4939      	ldr	r1, [pc, #228]	; (8006704 <setCommand+0x7dc>)
 8006620:	0020      	movs	r0, r4
 8006622:	f00d f989 	bl	8013938 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d100      	bne.n	800662c <setCommand+0x704>
 800662a:	e73b      	b.n	80064a4 <setCommand+0x57c>
 800662c:	2202      	movs	r2, #2
 800662e:	4936      	ldr	r1, [pc, #216]	; (8006708 <setCommand+0x7e0>)
 8006630:	0020      	movs	r0, r4
 8006632:	f00d f981 	bl	8013938 <strncmp>
 8006636:	2800      	cmp	r0, #0
 8006638:	d100      	bne.n	800663c <setCommand+0x714>
 800663a:	e735      	b.n	80064a8 <setCommand+0x580>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 800663c:	2208      	movs	r2, #8
 800663e:	4933      	ldr	r1, [pc, #204]	; (800670c <setCommand+0x7e4>)
 8006640:	0020      	movs	r0, r4
 8006642:	f00d f979 	bl	8013938 <strncmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	d100      	bne.n	800664c <setCommand+0x724>
 800664a:	e72f      	b.n	80064ac <setCommand+0x584>
 800664c:	2202      	movs	r2, #2
 800664e:	4930      	ldr	r1, [pc, #192]	; (8006710 <setCommand+0x7e8>)
 8006650:	0020      	movs	r0, r4
 8006652:	f00d f971 	bl	8013938 <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d100      	bne.n	800665c <setCommand+0x734>
 800665a:	e729      	b.n	80064b0 <setCommand+0x588>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 800665c:	2208      	movs	r2, #8
 800665e:	492d      	ldr	r1, [pc, #180]	; (8006714 <setCommand+0x7ec>)
 8006660:	0020      	movs	r0, r4
 8006662:	f00d f969 	bl	8013938 <strncmp>
 8006666:	2800      	cmp	r0, #0
 8006668:	d100      	bne.n	800666c <setCommand+0x744>
 800666a:	e723      	b.n	80064b4 <setCommand+0x58c>
 800666c:	2202      	movs	r2, #2
 800666e:	492a      	ldr	r1, [pc, #168]	; (8006718 <setCommand+0x7f0>)
 8006670:	0020      	movs	r0, r4
 8006672:	f00d f961 	bl	8013938 <strncmp>
			temp82 =DECEMBER;
 8006676:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006678:	2800      	cmp	r0, #0
 800667a:	d100      	bne.n	800667e <setCommand+0x756>
 800667c:	e6e4      	b.n	8006448 <setCommand+0x520>
 800667e:	e4b5      	b.n	8005fec <setCommand+0xc4>
			temp81 =TUESDAY;
 8006680:	2302      	movs	r3, #2
 8006682:	4698      	mov	r8, r3
 8006684:	e73d      	b.n	8006502 <setCommand+0x5da>
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	20005adc 	.word	0x20005adc
 800668c:	20000d74 	.word	0x20000d74
 8006690:	20000d7c 	.word	0x20000d7c
 8006694:	20000d80 	.word	0x20000d80
 8006698:	20000d84 	.word	0x20000d84
 800669c:	0801803c 	.word	0x0801803c
 80066a0:	08018044 	.word	0x08018044
 80066a4:	0801804c 	.word	0x0801804c
 80066a8:	08018058 	.word	0x08018058
 80066ac:	08018064 	.word	0x08018064
 80066b0:	0801806c 	.word	0x0801806c
 80066b4:	08018078 	.word	0x08018078
 80066b8:	08018114 	.word	0x08018114
 80066bc:	fffff830 	.word	0xfffff830
 80066c0:	08018080 	.word	0x08018080
 80066c4:	08018084 	.word	0x08018084
 80066c8:	08018090 	.word	0x08018090
 80066cc:	08018094 	.word	0x08018094
 80066d0:	0801809c 	.word	0x0801809c
 80066d4:	080180a0 	.word	0x080180a0
 80066d8:	080180a8 	.word	0x080180a8
 80066dc:	080180ac 	.word	0x080180ac
 80066e0:	080180b0 	.word	0x080180b0
 80066e4:	080180b4 	.word	0x080180b4
 80066e8:	080180bc 	.word	0x080180bc
 80066ec:	080180c0 	.word	0x080180c0
 80066f0:	080180c8 	.word	0x080180c8
 80066f4:	080180cc 	.word	0x080180cc
 80066f8:	080180d4 	.word	0x080180d4
 80066fc:	080180d8 	.word	0x080180d8
 8006700:	080180e4 	.word	0x080180e4
 8006704:	080180e8 	.word	0x080180e8
 8006708:	080180f0 	.word	0x080180f0
 800670c:	080180f4 	.word	0x080180f4
 8006710:	08018100 	.word	0x08018100
 8006714:	08018104 	.word	0x08018104
 8006718:	08018110 	.word	0x08018110
			temp81 =WEDNESDAY;
 800671c:	2303      	movs	r3, #3
 800671e:	4698      	mov	r8, r3
 8006720:	e6ef      	b.n	8006502 <setCommand+0x5da>
			temp81 =THURSDAY;
 8006722:	2304      	movs	r3, #4
 8006724:	4698      	mov	r8, r3
 8006726:	e6ec      	b.n	8006502 <setCommand+0x5da>
			temp81 =FRIDAY;
 8006728:	2305      	movs	r3, #5
 800672a:	4698      	mov	r8, r3
 800672c:	e6e9      	b.n	8006502 <setCommand+0x5da>
			temp81 =SATURDAY;
 800672e:	2306      	movs	r3, #6
 8006730:	4698      	mov	r8, r3
 8006732:	e6e6      	b.n	8006502 <setCommand+0x5da>
			temp81 =SUNDAY;
 8006734:	2307      	movs	r3, #7
 8006736:	4698      	mov	r8, r3
 8006738:	e6e3      	b.n	8006502 <setCommand+0x5da>
 800673a:	46c0      	nop			; (mov r8, r8)

0800673c <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800673c:	b530      	push	{r4, r5, lr}
 800673e:	b083      	sub	sp, #12
 8006740:	0005      	movs	r5, r0
 8006742:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006744:	2300      	movs	r3, #0
 8006746:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006748:	aa01      	add	r2, sp, #4
 800674a:	2101      	movs	r1, #1
 800674c:	f007 fade 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006750:	2300      	movs	r3, #0
 8006752:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006754:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006756:	2b70      	cmp	r3, #112	; 0x70
 8006758:	d007      	beq.n	800676a <removebuttonCommand+0x2e>
	result =RemovePortButton(port);
 800675a:	0020      	movs	r0, r4
 800675c:	f005 fc5e 	bl	800c01c <RemovePortButton>
	if(result == BOS_OK){
 8006760:	2800      	cmp	r0, #0
 8006762:	d007      	beq.n	8006774 <removebuttonCommand+0x38>
}
 8006764:	2000      	movs	r0, #0
 8006766:	b003      	add	sp, #12
 8006768:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800676a:	3001      	adds	r0, #1
 800676c:	f00c fa97 	bl	8012c9e <atol>
 8006770:	b2c4      	uxtb	r4, r0
 8006772:	e7f2      	b.n	800675a <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006774:	0023      	movs	r3, r4
 8006776:	0022      	movs	r2, r4
 8006778:	4902      	ldr	r1, [pc, #8]	; (8006784 <removebuttonCommand+0x48>)
 800677a:	0028      	movs	r0, r5
 800677c:	f00d f898 	bl	80138b0 <siprintf>
 8006780:	e7f0      	b.n	8006764 <removebuttonCommand+0x28>
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	08017dd4 	.word	0x08017dd4

08006788 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678a:	b087      	sub	sp, #28
 800678c:	9003      	str	r0, [sp, #12]
 800678e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006790:	2300      	movs	r3, #0
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	9304      	str	r3, [sp, #16]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006796:	aa05      	add	r2, sp, #20
 8006798:	2101      	movs	r1, #1
 800679a:	0030      	movs	r0, r6
 800679c:	f007 fab6 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80067a0:	0004      	movs	r4, r0
 80067a2:	4b23      	ldr	r3, [pc, #140]	; (8006830 <addbuttonCommand+0xa8>)
 80067a4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 80067a6:	9f05      	ldr	r7, [sp, #20]
 80067a8:	003a      	movs	r2, r7
 80067aa:	4922      	ldr	r1, [pc, #136]	; (8006834 <addbuttonCommand+0xac>)
 80067ac:	f00d f8c4 	bl	8013938 <strncmp>
		type =MOMENTARY_NO;
 80067b0:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d017      	beq.n	80067e6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80067b6:	003a      	movs	r2, r7
 80067b8:	491f      	ldr	r1, [pc, #124]	; (8006838 <addbuttonCommand+0xb0>)
 80067ba:	0020      	movs	r0, r4
 80067bc:	f00d f8bc 	bl	8013938 <strncmp>
		type =MOMENTARY_NC;
 80067c0:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d00f      	beq.n	80067e6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80067c6:	003a      	movs	r2, r7
 80067c8:	491c      	ldr	r1, [pc, #112]	; (800683c <addbuttonCommand+0xb4>)
 80067ca:	0020      	movs	r0, r4
 80067cc:	f00d f8b4 	bl	8013938 <strncmp>
		type =ONOFF_NO;
 80067d0:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d007      	beq.n	80067e6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80067d6:	003a      	movs	r2, r7
 80067d8:	4919      	ldr	r1, [pc, #100]	; (8006840 <addbuttonCommand+0xb8>)
 80067da:	0020      	movs	r0, r4
 80067dc:	f00d f8ac 	bl	8013938 <strncmp>
		type =ONOFF_NC;
 80067e0:	4245      	negs	r5, r0
 80067e2:	4145      	adcs	r5, r0
 80067e4:	00ad      	lsls	r5, r5, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067e6:	aa04      	add	r2, sp, #16
 80067e8:	2102      	movs	r1, #2
 80067ea:	0030      	movs	r0, r6
 80067ec:	f007 fa8e 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80067f0:	2300      	movs	r3, #0
 80067f2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 80067f4:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 80067f6:	2b70      	cmp	r3, #112	; 0x70
 80067f8:	d008      	beq.n	800680c <addbuttonCommand+0x84>
	result =AddPortButton(type,port);
 80067fa:	0021      	movs	r1, r4
 80067fc:	0028      	movs	r0, r5
 80067fe:	f005 fb7b 	bl	800bef8 <AddPortButton>
	if(result == BOS_OK){
 8006802:	2800      	cmp	r0, #0
 8006804:	d007      	beq.n	8006816 <addbuttonCommand+0x8e>
}
 8006806:	2000      	movs	r0, #0
 8006808:	b007      	add	sp, #28
 800680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 800680c:	3001      	adds	r0, #1
 800680e:	f00c fa46 	bl	8012c9e <atol>
 8006812:	b2c4      	uxtb	r4, r0
 8006814:	e7f1      	b.n	80067fa <addbuttonCommand+0x72>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006816:	4b06      	ldr	r3, [pc, #24]	; (8006830 <addbuttonCommand+0xa8>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	9905      	ldr	r1, [sp, #20]
 800681e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006820:	9400      	str	r4, [sp, #0]
 8006822:	0023      	movs	r3, r4
 8006824:	4907      	ldr	r1, [pc, #28]	; (8006844 <addbuttonCommand+0xbc>)
 8006826:	9803      	ldr	r0, [sp, #12]
 8006828:	f00d f842 	bl	80138b0 <siprintf>
 800682c:	e7eb      	b.n	8006806 <addbuttonCommand+0x7e>
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	20000d64 	.word	0x20000d64
 8006834:	08017694 	.word	0x08017694
 8006838:	080176a4 	.word	0x080176a4
 800683c:	080176b4 	.word	0x080176b4
 8006840:	080176c0 	.word	0x080176c0
 8006844:	080176cc 	.word	0x080176cc

08006848 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	46d6      	mov	lr, sl
 800684c:	464f      	mov	r7, r9
 800684e:	4646      	mov	r6, r8
 8006850:	b5c0      	push	{r6, r7, lr}
 8006852:	b098      	sub	sp, #96	; 0x60
 8006854:	9007      	str	r0, [sp, #28]
 8006856:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006858:	2300      	movs	r3, #0
 800685a:	9317      	str	r3, [sp, #92]	; 0x5c
 800685c:	9316      	str	r3, [sp, #88]	; 0x58
 800685e:	9315      	str	r3, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006860:	9314      	str	r3, [sp, #80]	; 0x50
 8006862:	9313      	str	r3, [sp, #76]	; 0x4c
 8006864:	9312      	str	r3, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006866:	9311      	str	r3, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006868:	220a      	movs	r2, #10
 800686a:	2100      	movs	r1, #0
 800686c:	a80e      	add	r0, sp, #56	; 0x38
 800686e:	f00c fa91 	bl	8012d94 <memset>
 8006872:	220a      	movs	r2, #10
 8006874:	2100      	movs	r1, #0
 8006876:	a80b      	add	r0, sp, #44	; 0x2c
 8006878:	f00c fa8c 	bl	8012d94 <memset>
 800687c:	220a      	movs	r2, #10
 800687e:	2100      	movs	r1, #0
 8006880:	a808      	add	r0, sp, #32
 8006882:	f00c fa87 	bl	8012d94 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006886:	aa17      	add	r2, sp, #92	; 0x5c
 8006888:	2101      	movs	r1, #1
 800688a:	0020      	movs	r0, r4
 800688c:	f007 fa3e 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006890:	2300      	movs	r3, #0
 8006892:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006894:	2200      	movs	r2, #0
 8006896:	9206      	str	r2, [sp, #24]
	if(pcParameterString1[0] == 'P'){
 8006898:	2b50      	cmp	r3, #80	; 0x50
 800689a:	d100      	bne.n	800689e <scastCommand+0x56>
 800689c:	e06f      	b.n	800697e <scastCommand+0x136>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800689e:	aa16      	add	r2, sp, #88	; 0x58
 80068a0:	2102      	movs	r1, #2
 80068a2:	0020      	movs	r0, r4
 80068a4:	f007 fa32 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80068a8:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 80068aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068ac:	a80e      	add	r0, sp, #56	; 0x38
 80068ae:	f00d f854 	bl	801395a <strncpy>
	srcM =(uint8_t )GetID(par1);
 80068b2:	a80e      	add	r0, sp, #56	; 0x38
 80068b4:	f7fd fbd0 	bl	8004058 <GetID>
 80068b8:	b2c3      	uxtb	r3, r0
 80068ba:	4698      	mov	r8, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80068bc:	aa15      	add	r2, sp, #84	; 0x54
 80068be:	2103      	movs	r1, #3
 80068c0:	0020      	movs	r0, r4
 80068c2:	f007 fa23 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 80068c6:	2300      	movs	r3, #0
 80068c8:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 80068ca:	2200      	movs	r2, #0
 80068cc:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 80068ce:	2b70      	cmp	r3, #112	; 0x70
 80068d0:	d05b      	beq.n	800698a <scastCommand+0x142>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80068d2:	aa14      	add	r2, sp, #80	; 0x50
 80068d4:	2104      	movs	r1, #4
 80068d6:	0020      	movs	r0, r4
 80068d8:	f007 fa18 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80068dc:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 80068de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068e0:	a80b      	add	r0, sp, #44	; 0x2c
 80068e2:	f00d f83a 	bl	801395a <strncpy>
	dstM =(uint8_t )GetID(par2);
 80068e6:	a80b      	add	r0, sp, #44	; 0x2c
 80068e8:	f7fd fbb6 	bl	8004058 <GetID>
 80068ec:	b2c3      	uxtb	r3, r0
 80068ee:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80068f0:	aa13      	add	r2, sp, #76	; 0x4c
 80068f2:	2105      	movs	r1, #5
 80068f4:	0020      	movs	r0, r4
 80068f6:	f007 fa09 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 80068fa:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 80068fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80068fe:	0032      	movs	r2, r6
 8006900:	492c      	ldr	r1, [pc, #176]	; (80069b4 <scastCommand+0x16c>)
 8006902:	f00d f819 	bl	8013938 <strncmp>
		direction =FORWARD;
 8006906:	2700      	movs	r7, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006908:	2800      	cmp	r0, #0
 800690a:	d00f      	beq.n	800692c <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 800690c:	0032      	movs	r2, r6
 800690e:	492a      	ldr	r1, [pc, #168]	; (80069b8 <scastCommand+0x170>)
 8006910:	0028      	movs	r0, r5
 8006912:	f00d f811 	bl	8013938 <strncmp>
		direction =BACKWARD;
 8006916:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006918:	2800      	cmp	r0, #0
 800691a:	d007      	beq.n	800692c <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 800691c:	0032      	movs	r2, r6
 800691e:	4927      	ldr	r1, [pc, #156]	; (80069bc <scastCommand+0x174>)
 8006920:	0028      	movs	r0, r5
 8006922:	f00d f809 	bl	8013938 <strncmp>
		direction =BIDIRECTIONAL;
 8006926:	4247      	negs	r7, r0
 8006928:	4147      	adcs	r7, r0
 800692a:	007f      	lsls	r7, r7, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 800692c:	0032      	movs	r2, r6
 800692e:	0029      	movs	r1, r5
 8006930:	a808      	add	r0, sp, #32
 8006932:	f00d f812 	bl	801395a <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006936:	aa12      	add	r2, sp, #72	; 0x48
 8006938:	2106      	movs	r1, #6
 800693a:	0020      	movs	r0, r4
 800693c:	f007 f9e6 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006940:	f00c f9ad 	bl	8012c9e <atol>
 8006944:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006946:	aa11      	add	r2, sp, #68	; 0x44
 8006948:	2107      	movs	r1, #7
 800694a:	0020      	movs	r0, r4
 800694c:	f007 f9de 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006950:	f00c f9a5 	bl	8012c9e <atol>
 8006954:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006956:	2300      	movs	r3, #0
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	9002      	str	r0, [sp, #8]
 800695c:	9501      	str	r5, [sp, #4]
 800695e:	9700      	str	r7, [sp, #0]
 8006960:	464b      	mov	r3, r9
 8006962:	4652      	mov	r2, sl
 8006964:	4641      	mov	r1, r8
 8006966:	9806      	ldr	r0, [sp, #24]
 8006968:	f001 fac0 	bl	8007eec <StartScastDMAStream>
	if(result == BOS_OK){
 800696c:	2800      	cmp	r0, #0
 800696e:	d012      	beq.n	8006996 <scastCommand+0x14e>
}
 8006970:	2000      	movs	r0, #0
 8006972:	b018      	add	sp, #96	; 0x60
 8006974:	bc1c      	pop	{r2, r3, r4}
 8006976:	4690      	mov	r8, r2
 8006978:	4699      	mov	r9, r3
 800697a:	46a2      	mov	sl, r4
 800697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 800697e:	3001      	adds	r0, #1
 8006980:	f00c f98d 	bl	8012c9e <atol>
 8006984:	b2c3      	uxtb	r3, r0
 8006986:	9306      	str	r3, [sp, #24]
 8006988:	e789      	b.n	800689e <scastCommand+0x56>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 800698a:	3001      	adds	r0, #1
 800698c:	f00c f987 	bl	8012c9e <atol>
 8006990:	b2c3      	uxtb	r3, r0
 8006992:	469a      	mov	sl, r3
 8006994:	e79d      	b.n	80068d2 <scastCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006996:	9404      	str	r4, [sp, #16]
 8006998:	9503      	str	r5, [sp, #12]
 800699a:	ab0b      	add	r3, sp, #44	; 0x2c
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	4653      	mov	r3, sl
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	ab0e      	add	r3, sp, #56	; 0x38
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	9b06      	ldr	r3, [sp, #24]
 80069a8:	aa08      	add	r2, sp, #32
 80069aa:	4905      	ldr	r1, [pc, #20]	; (80069c0 <scastCommand+0x178>)
 80069ac:	9807      	ldr	r0, [sp, #28]
 80069ae:	f00c ff7f 	bl	80138b0 <siprintf>
 80069b2:	e7dd      	b.n	8006970 <scastCommand+0x128>
 80069b4:	08017e1c 	.word	0x08017e1c
 80069b8:	08017e24 	.word	0x08017e24
 80069bc:	08017e30 	.word	0x08017e30
 80069c0:	08017e40 	.word	0x08017e40

080069c4 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b083      	sub	sp, #12
 80069c8:	0004      	movs	r4, r0
	if(N > 1)
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <infoCommand+0xa0>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 80069ce:	2600      	movs	r6, #0
	if(N > 1)
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d831      	bhi.n	8006a38 <infoCommand+0x74>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80069d4:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <infoCommand+0xa0>)
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	4923      	ldr	r1, [pc, #140]	; (8006a68 <infoCommand+0xa4>)
 80069da:	0020      	movs	r0, r4
 80069dc:	f00c ff68 	bl	80138b0 <siprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80069e0:	0020      	movs	r0, r4
 80069e2:	f7f9 fb99 	bl	8000118 <strlen>
 80069e6:	b282      	uxth	r2, r0
 80069e8:	4d20      	ldr	r5, [pc, #128]	; (8006a6c <infoCommand+0xa8>)
 80069ea:	7828      	ldrb	r0, [r5, #0]
 80069ec:	2701      	movs	r7, #1
 80069ee:	427f      	negs	r7, r7
 80069f0:	9700      	str	r7, [sp, #0]
 80069f2:	2332      	movs	r3, #50	; 0x32
 80069f4:	0021      	movs	r1, r4
 80069f6:	f006 feed 	bl	800d7d4 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 80069fa:	2213      	movs	r2, #19
 80069fc:	491c      	ldr	r1, [pc, #112]	; (8006a70 <infoCommand+0xac>)
 80069fe:	0020      	movs	r0, r4
 8006a00:	f00c f9bf 	bl	8012d82 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006a04:	0020      	movs	r0, r4
 8006a06:	f7f9 fb87 	bl	8000118 <strlen>
 8006a0a:	b282      	uxth	r2, r0
 8006a0c:	7828      	ldrb	r0, [r5, #0]
 8006a0e:	9700      	str	r7, [sp, #0]
 8006a10:	2332      	movs	r3, #50	; 0x32
 8006a12:	0021      	movs	r1, r4
 8006a14:	f006 fede 	bl	800d7d4 <writePxMutex>
	DisplayTopology(PcPort);
 8006a18:	7828      	ldrb	r0, [r5, #0]
 8006a1a:	f7fd f87b 	bl	8003b14 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006a1e:	7828      	ldrb	r0, [r5, #0]
 8006a20:	f7fd f946 	bl	8003cb0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006a24:	2e02      	cmp	r6, #2
 8006a26:	d00b      	beq.n	8006a40 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006a28:	2202      	movs	r2, #2
 8006a2a:	4912      	ldr	r1, [pc, #72]	; (8006a74 <infoCommand+0xb0>)
 8006a2c:	0020      	movs	r0, r4
 8006a2e:	f00c f9a8 	bl	8012d82 <memcpy>
}
 8006a32:	2000      	movs	r0, #0
 8006a34:	b003      	add	sp, #12
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006a38:	f006 ff58 	bl	800d8ec <ReadPortsDir>
 8006a3c:	0006      	movs	r6, r0
 8006a3e:	e7c9      	b.n	80069d4 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006a40:	2244      	movs	r2, #68	; 0x44
 8006a42:	490d      	ldr	r1, [pc, #52]	; (8006a78 <infoCommand+0xb4>)
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00c f99c 	bl	8012d82 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	f7f9 fb64 	bl	8000118 <strlen>
 8006a50:	b282      	uxth	r2, r0
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <infoCommand+0xa8>)
 8006a54:	7818      	ldrb	r0, [r3, #0]
 8006a56:	003b      	movs	r3, r7
 8006a58:	9700      	str	r7, [sp, #0]
 8006a5a:	3333      	adds	r3, #51	; 0x33
 8006a5c:	0021      	movs	r1, r4
 8006a5e:	f006 feb9 	bl	800d7d4 <writePxMutex>
 8006a62:	e7e1      	b.n	8006a28 <infoCommand+0x64>
 8006a64:	20000030 	.word	0x20000030
 8006a68:	08017bd8 	.word	0x08017bd8
 8006a6c:	2000060b 	.word	0x2000060b
 8006a70:	08017bf4 	.word	0x08017bf4
 8006a74:	080168dc 	.word	0x080168dc
 8006a78:	08017c08 	.word	0x08017c08

08006a7c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a7c:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f7fd f98a 	bl	8003d98 <DisplayModuleStatus>
}
 8006a84:	2000      	movs	r0, #0
 8006a86:	bd10      	pop	{r4, pc}

08006a88 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	46ce      	mov	lr, r9
 8006a8c:	b500      	push	{lr}
 8006a8e:	b090      	sub	sp, #64	; 0x40
 8006a90:	9000      	str	r0, [sp, #0]
 8006a92:	0015      	movs	r5, r2
 8006a94:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006a96:	2227      	movs	r2, #39	; 0x27
 8006a98:	2100      	movs	r1, #0
 8006a9a:	a806      	add	r0, sp, #24
 8006a9c:	f00c f97a 	bl	8012d94 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	a803      	add	r0, sp, #12
 8006aa6:	f00c f975 	bl	8012d94 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006aaa:	4c56      	ldr	r4, [pc, #344]	; (8006c04 <groupCommand+0x17c>)
 8006aac:	0022      	movs	r2, r4
 8006aae:	2101      	movs	r1, #1
 8006ab0:	0028      	movs	r0, r5
 8006ab2:	f007 f92b 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006ab6:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	a803      	add	r0, sp, #12
 8006abc:	f00c ff4d 	bl	801395a <strncpy>
 8006ac0:	4c51      	ldr	r4, [pc, #324]	; (8006c08 <groupCommand+0x180>)
 8006ac2:	0027      	movs	r7, r4
 8006ac4:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006ac6:	0021      	movs	r1, r4
 8006ac8:	a803      	add	r0, sp, #12
 8006aca:	f7f9 fb1b 	bl	8000104 <strcmp>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d018      	beq.n	8006b04 <groupCommand+0x7c>
 8006ad2:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006ad4:	42bc      	cmp	r4, r7
 8006ad6:	d1f6      	bne.n	8006ac6 <groupCommand+0x3e>
	type =1;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4699      	mov	r9, r3
	count =2;
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <groupCommand+0x184>)
 8006ade:	2202      	movs	r2, #2
 8006ae0:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ae2:	3208      	adds	r2, #8
 8006ae4:	494a      	ldr	r1, [pc, #296]	; (8006c10 <groupCommand+0x188>)
 8006ae6:	9800      	ldr	r0, [sp, #0]
 8006ae8:	f00c f94b 	bl	8012d82 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006aec:	4a49      	ldr	r2, [pc, #292]	; (8006c14 <groupCommand+0x18c>)
 8006aee:	2102      	movs	r1, #2
 8006af0:	9801      	ldr	r0, [sp, #4]
 8006af2:	f007 f90b 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006af6:	4b48      	ldr	r3, [pc, #288]	; (8006c18 <groupCommand+0x190>)
 8006af8:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d05e      	beq.n	8006bbc <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006afe:	4f45      	ldr	r7, [pc, #276]	; (8006c14 <groupCommand+0x18c>)
		if(count > 2)
 8006b00:	4e42      	ldr	r6, [pc, #264]	; (8006c0c <groupCommand+0x184>)
 8006b02:	e012      	b.n	8006b2a <groupCommand+0xa2>
			type =0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	4699      	mov	r9, r3
 8006b08:	e7e8      	b.n	8006adc <groupCommand+0x54>
		strcat((char* )pcWriteBuffer,module);
 8006b0a:	a906      	add	r1, sp, #24
 8006b0c:	9800      	ldr	r0, [sp, #0]
 8006b0e:	f00c feef 	bl	80138f0 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006b12:	3401      	adds	r4, #1
 8006b14:	b261      	sxtb	r1, r4
 8006b16:	4b3d      	ldr	r3, [pc, #244]	; (8006c0c <groupCommand+0x184>)
 8006b18:	7019      	strb	r1, [r3, #0]
 8006b1a:	4a3e      	ldr	r2, [pc, #248]	; (8006c14 <groupCommand+0x18c>)
 8006b1c:	9801      	ldr	r0, [sp, #4]
 8006b1e:	f007 f8f5 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006b22:	4b3d      	ldr	r3, [pc, #244]	; (8006c18 <groupCommand+0x190>)
 8006b24:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d048      	beq.n	8006bbc <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006b2a:	683d      	ldr	r5, [r7, #0]
 8006b2c:	ac06      	add	r4, sp, #24
 8006b2e:	002a      	movs	r2, r5
 8006b30:	0001      	movs	r1, r0
 8006b32:	0020      	movs	r0, r4
 8006b34:	f00c ff11 	bl	801395a <strncpy>
		module[xParameterStringLength] ='\0';
 8006b38:	2300      	movs	r3, #0
 8006b3a:	5563      	strb	r3, [r4, r5]
		modID =GetID(module);
 8006b3c:	0020      	movs	r0, r4
 8006b3e:	f7fd fa8b 	bl	8004058 <GetID>
		if(modID < 0)
 8006b42:	2800      	cmp	r0, #0
 8006b44:	db30      	blt.n	8006ba8 <groupCommand+0x120>
		result =AddModuleToGroup(modID,alias);
 8006b46:	b2c0      	uxtb	r0, r0
 8006b48:	a903      	add	r1, sp, #12
 8006b4a:	f7fd fb51 	bl	80041f0 <AddModuleToGroup>
		if(result != BOS_OK)
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d146      	bne.n	8006be0 <groupCommand+0x158>
		if(count > 2)
 8006b52:	2400      	movs	r4, #0
 8006b54:	5734      	ldrsb	r4, [r6, r4]
 8006b56:	2c02      	cmp	r4, #2
 8006b58:	ddd7      	ble.n	8006b0a <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006b5a:	9d00      	ldr	r5, [sp, #0]
 8006b5c:	0028      	movs	r0, r5
 8006b5e:	f7f9 fadb 	bl	8000118 <strlen>
 8006b62:	46ac      	mov	ip, r5
 8006b64:	4460      	add	r0, ip
 8006b66:	2203      	movs	r2, #3
 8006b68:	492c      	ldr	r1, [pc, #176]	; (8006c1c <groupCommand+0x194>)
 8006b6a:	f00c f90a 	bl	8012d82 <memcpy>
 8006b6e:	e7cc      	b.n	8006b0a <groupCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006b70:	aa03      	add	r2, sp, #12
 8006b72:	492b      	ldr	r1, [pc, #172]	; (8006c20 <groupCommand+0x198>)
 8006b74:	9800      	ldr	r0, [sp, #0]
 8006b76:	f00c fe9b 	bl	80138b0 <siprintf>
 8006b7a:	e01a      	b.n	8006bb2 <groupCommand+0x12a>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006b7c:	aa03      	add	r2, sp, #12
 8006b7e:	4929      	ldr	r1, [pc, #164]	; (8006c24 <groupCommand+0x19c>)
 8006b80:	a806      	add	r0, sp, #24
 8006b82:	f00c fe95 	bl	80138b0 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006b86:	a906      	add	r1, sp, #24
 8006b88:	9800      	ldr	r0, [sp, #0]
 8006b8a:	f00c feb1 	bl	80138f0 <strcat>
 8006b8e:	e010      	b.n	8006bb2 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006b90:	aa03      	add	r2, sp, #12
 8006b92:	4925      	ldr	r1, [pc, #148]	; (8006c28 <groupCommand+0x1a0>)
 8006b94:	9800      	ldr	r0, [sp, #0]
 8006b96:	f00c fe8b 	bl	80138b0 <siprintf>
 8006b9a:	e00a      	b.n	8006bb2 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006b9c:	aa03      	add	r2, sp, #12
 8006b9e:	4923      	ldr	r1, [pc, #140]	; (8006c2c <groupCommand+0x1a4>)
 8006ba0:	9800      	ldr	r0, [sp, #0]
 8006ba2:	f00c fe85 	bl	80138b0 <siprintf>
 8006ba6:	e004      	b.n	8006bb2 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ba8:	aa06      	add	r2, sp, #24
 8006baa:	4921      	ldr	r1, [pc, #132]	; (8006c30 <groupCommand+0x1a8>)
 8006bac:	9800      	ldr	r0, [sp, #0]
 8006bae:	f00c fe7f 	bl	80138b0 <siprintf>
}
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	b010      	add	sp, #64	; 0x40
 8006bb6:	bc04      	pop	{r2}
 8006bb8:	4691      	mov	r9, r2
 8006bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <groupCommand+0x184>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d0d4      	beq.n	8006b70 <groupCommand+0xe8>
	else if(result == BOS_OK && type){
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1d7      	bne.n	8006b7c <groupCommand+0xf4>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006bcc:	aa03      	add	r2, sp, #12
 8006bce:	4919      	ldr	r1, [pc, #100]	; (8006c34 <groupCommand+0x1ac>)
 8006bd0:	a806      	add	r0, sp, #24
 8006bd2:	f00c fe6d 	bl	80138b0 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006bd6:	a906      	add	r1, sp, #24
 8006bd8:	9800      	ldr	r0, [sp, #0]
 8006bda:	f00c fe89 	bl	80138f0 <strcat>
 8006bde:	e7e8      	b.n	8006bb2 <groupCommand+0x12a>
	else if(count == 2)
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <groupCommand+0x184>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d0c2      	beq.n	8006b70 <groupCommand+0xe8>
	else if(result == BOS_ERR_Keyword)
 8006bea:	2806      	cmp	r0, #6
 8006bec:	d0d0      	beq.n	8006b90 <groupCommand+0x108>
	else if(result == BOS_ERR_ExistingAlias)
 8006bee:	2807      	cmp	r0, #7
 8006bf0:	d0d4      	beq.n	8006b9c <groupCommand+0x114>
	else if(result == BOS_ERR_ExistingCmd)
 8006bf2:	2808      	cmp	r0, #8
 8006bf4:	d1dd      	bne.n	8006bb2 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006bf6:	aa03      	add	r2, sp, #12
 8006bf8:	490f      	ldr	r1, [pc, #60]	; (8006c38 <groupCommand+0x1b0>)
 8006bfa:	9800      	ldr	r0, [sp, #0]
 8006bfc:	f00c fe58 	bl	80138b0 <siprintf>
 8006c00:	e7d7      	b.n	8006bb2 <groupCommand+0x12a>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	20000d94 	.word	0x20000d94
 8006c08:	20000950 	.word	0x20000950
 8006c0c:	20000d5a 	.word	0x20000d5a
 8006c10:	080179f8 	.word	0x080179f8
 8006c14:	20000d88 	.word	0x20000d88
 8006c18:	20000d5c 	.word	0x20000d5c
 8006c1c:	08017a04 	.word	0x08017a04
 8006c20:	08017a08 	.word	0x08017a08
 8006c24:	08017a34 	.word	0x08017a34
 8006c28:	08017a70 	.word	0x08017a70
 8006c2c:	08017ab0 	.word	0x08017ab0
 8006c30:	08017b24 	.word	0x08017b24
 8006c34:	08017a50 	.word	0x08017a50
 8006c38:	08017ae4 	.word	0x08017ae4

08006c3c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	0004      	movs	r4, r0
 8006c40:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c42:	4d1c      	ldr	r5, [pc, #112]	; (8006cb4 <nameCommand+0x78>)
 8006c44:	002a      	movs	r2, r5
 8006c46:	2101      	movs	r1, #1
 8006c48:	f007 f860 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006c4c:	0001      	movs	r1, r0
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <nameCommand+0x7c>)
 8006c50:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	dd01      	ble.n	8006c5c <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006c58:	2300      	movs	r3, #0
 8006c5a:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <nameCommand+0x80>)
 8006c5e:	7818      	ldrb	r0, [r3, #0]
 8006c60:	f7fd fa5e 	bl	8004120 <NameModule>
	if(result == BOS_OK)
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d007      	beq.n	8006c78 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006c68:	2806      	cmp	r0, #6
 8006c6a:	d00e      	beq.n	8006c8a <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8006c6c:	2807      	cmp	r0, #7
 8006c6e:	d013      	beq.n	8006c98 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8006c70:	2808      	cmp	r0, #8
 8006c72:	d018      	beq.n	8006ca6 <nameCommand+0x6a>
}
 8006c74:	2000      	movs	r0, #0
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <nameCommand+0x7c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <nameCommand+0x80>)
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	490f      	ldr	r1, [pc, #60]	; (8006cc0 <nameCommand+0x84>)
 8006c82:	0020      	movs	r0, r4
 8006c84:	f00c fe14 	bl	80138b0 <siprintf>
 8006c88:	e7f4      	b.n	8006c74 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <nameCommand+0x7c>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	490d      	ldr	r1, [pc, #52]	; (8006cc4 <nameCommand+0x88>)
 8006c90:	0020      	movs	r0, r4
 8006c92:	f00c fe0d 	bl	80138b0 <siprintf>
 8006c96:	e7ed      	b.n	8006c74 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <nameCommand+0x7c>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	490a      	ldr	r1, [pc, #40]	; (8006cc8 <nameCommand+0x8c>)
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	f00c fe06 	bl	80138b0 <siprintf>
 8006ca4:	e7e6      	b.n	8006c74 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006ca6:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <nameCommand+0x7c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4908      	ldr	r1, [pc, #32]	; (8006ccc <nameCommand+0x90>)
 8006cac:	0020      	movs	r0, r4
 8006cae:	f00c fdff 	bl	80138b0 <siprintf>
 8006cb2:	e7df      	b.n	8006c74 <nameCommand+0x38>
 8006cb4:	20000d90 	.word	0x20000d90
 8006cb8:	20000d60 	.word	0x20000d60
 8006cbc:	20000b66 	.word	0x20000b66
 8006cc0:	08017c70 	.word	0x08017c70
 8006cc4:	08017a70 	.word	0x08017a70
 8006cc8:	08017ab0 	.word	0x08017ab0
 8006ccc:	08017ae4 	.word	0x08017ae4

08006cd0 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	9003      	str	r0, [sp, #12]
 8006cd6:	0014      	movs	r4, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cd8:	4a4a      	ldr	r2, [pc, #296]	; (8006e04 <bootloaderUpdateCommand+0x134>)
 8006cda:	2101      	movs	r1, #1
 8006cdc:	0020      	movs	r0, r4
 8006cde:	f007 f815 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d044      	beq.n	8006d70 <bootloaderUpdateCommand+0xa0>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006ce6:	4b47      	ldr	r3, [pc, #284]	; (8006e04 <bootloaderUpdateCommand+0x134>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4947      	ldr	r1, [pc, #284]	; (8006e08 <bootloaderUpdateCommand+0x138>)
 8006cec:	f00c fe24 	bl	8013938 <strncmp>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d135      	bne.n	8006d60 <bootloaderUpdateCommand+0x90>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cf4:	4a45      	ldr	r2, [pc, #276]	; (8006e0c <bootloaderUpdateCommand+0x13c>)
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	0020      	movs	r0, r4
 8006cfa:	f007 f807 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006cfe:	4d44      	ldr	r5, [pc, #272]	; (8006e10 <bootloaderUpdateCommand+0x140>)
 8006d00:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d02:	4a44      	ldr	r2, [pc, #272]	; (8006e14 <bootloaderUpdateCommand+0x144>)
 8006d04:	2103      	movs	r1, #3
 8006d06:	0020      	movs	r0, r4
 8006d08:	f007 f800 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 8006d0c:	4b42      	ldr	r3, [pc, #264]	; (8006e18 <bootloaderUpdateCommand+0x148>)
 8006d0e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8006d10:	6828      	ldr	r0, [r5, #0]
 8006d12:	2300      	movs	r3, #0
 8006d14:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8006d16:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006d18:	2b23      	cmp	r3, #35	; 0x23
 8006d1a:	d054      	beq.n	8006dc6 <bootloaderUpdateCommand+0xf6>
			if(pcParameterString3[0] == 'p'){
 8006d1c:	4b3e      	ldr	r3, [pc, #248]	; (8006e18 <bootloaderUpdateCommand+0x148>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	56c3      	ldrsb	r3, [r0, r3]
 8006d24:	2b70      	cmp	r3, #112	; 0x70
 8006d26:	d054      	beq.n	8006dd2 <bootloaderUpdateCommand+0x102>
				result =BOS_ERR_WrongValue;
 8006d28:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 8006d2a:	4b3c      	ldr	r3, [pc, #240]	; (8006e1c <bootloaderUpdateCommand+0x14c>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	42bb      	cmp	r3, r7
 8006d30:	d054      	beq.n	8006ddc <bootloaderUpdateCommand+0x10c>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006d32:	4b3b      	ldr	r3, [pc, #236]	; (8006e20 <bootloaderUpdateCommand+0x150>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006d38:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <bootloaderUpdateCommand+0x154>)
 8006d3a:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	211a      	movs	r1, #26
 8006d40:	0038      	movs	r0, r7
 8006d42:	f001 f8ad 	bl	8007ea0 <SendMessageToModule>
				osDelay(100);
 8006d46:	2064      	movs	r0, #100	; 0x64
 8006d48:	f006 fecb 	bl	800dae2 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <bootloaderUpdateCommand+0x158>)
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	4b32      	ldr	r3, [pc, #200]	; (8006e1c <bootloaderUpdateCommand+0x14c>)
 8006d52:	7818      	ldrb	r0, [r3, #0]
 8006d54:	0033      	movs	r3, r6
 8006d56:	0039      	movs	r1, r7
 8006d58:	f003 f830 	bl	8009dbc <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006d5c:	2c68      	cmp	r4, #104	; 0x68
 8006d5e:	d104      	bne.n	8006d6a <bootloaderUpdateCommand+0x9a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006d60:	220f      	movs	r2, #15
 8006d62:	4932      	ldr	r1, [pc, #200]	; (8006e2c <bootloaderUpdateCommand+0x15c>)
 8006d64:	9803      	ldr	r0, [sp, #12]
 8006d66:	f00c f80c 	bl	8012d82 <memcpy>
}
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	b005      	add	sp, #20
 8006d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006d70:	4b2a      	ldr	r3, [pc, #168]	; (8006e1c <bootloaderUpdateCommand+0x14c>)
 8006d72:	781a      	ldrb	r2, [r3, #0]
 8006d74:	492e      	ldr	r1, [pc, #184]	; (8006e30 <bootloaderUpdateCommand+0x160>)
 8006d76:	9c03      	ldr	r4, [sp, #12]
 8006d78:	0020      	movs	r0, r4
 8006d7a:	f00c fd99 	bl	80138b0 <siprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <bootloaderUpdateCommand+0x164>)
 8006d80:	6819      	ldr	r1, [r3, #0]
 8006d82:	0020      	movs	r0, r4
 8006d84:	f00c fdb4 	bl	80138f0 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006d88:	0020      	movs	r0, r4
 8006d8a:	f7f9 f9c5 	bl	8000118 <strlen>
 8006d8e:	b282      	uxth	r2, r0
 8006d90:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <bootloaderUpdateCommand+0x158>)
 8006d92:	7818      	ldrb	r0, [r3, #0]
 8006d94:	2301      	movs	r3, #1
 8006d96:	425b      	negs	r3, r3
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	3333      	adds	r3, #51	; 0x33
 8006d9c:	0021      	movs	r1, r4
 8006d9e:	f006 fd19 	bl	800d7d4 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006da2:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <bootloaderUpdateCommand+0x168>)
 8006da4:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <bootloaderUpdateCommand+0x16c>)
 8006da6:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <bootloaderUpdateCommand+0x170>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006dae:	200a      	movs	r0, #10
 8006db0:	f006 fe97 	bl	800dae2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <bootloaderUpdateCommand+0x174>)
 8006dba:	4a23      	ldr	r2, [pc, #140]	; (8006e48 <bootloaderUpdateCommand+0x178>)
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	e7fd      	b.n	8006dc2 <bootloaderUpdateCommand+0xf2>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f00b ff69 	bl	8012c9e <atol>
 8006dcc:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8006dce:	2400      	movs	r4, #0
 8006dd0:	e7a4      	b.n	8006d1c <bootloaderUpdateCommand+0x4c>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f00b ff63 	bl	8012c9e <atol>
 8006dd8:	b2c6      	uxtb	r6, r0
 8006dda:	e7a6      	b.n	8006d2a <bootloaderUpdateCommand+0x5a>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	3319      	adds	r3, #25
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	0030      	movs	r0, r6
 8006de8:	f000 fdd4 	bl	8007994 <SendMessageFromPort>
				osDelay(100);
 8006dec:	2064      	movs	r0, #100	; 0x64
 8006dee:	f006 fe78 	bl	800dae2 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <bootloaderUpdateCommand+0x14c>)
 8006df4:	7818      	ldrb	r0, [r3, #0]
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <bootloaderUpdateCommand+0x158>)
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	0033      	movs	r3, r6
 8006dfc:	0001      	movs	r1, r0
 8006dfe:	f002 ffdd 	bl	8009dbc <remoteBootloaderUpdate>
 8006e02:	e7ab      	b.n	8006d5c <bootloaderUpdateCommand+0x8c>
 8006e04:	20000d8c 	.word	0x20000d8c
 8006e08:	08017730 	.word	0x08017730
 8006e0c:	20000d98 	.word	0x20000d98
 8006e10:	20000d70 	.word	0x20000d70
 8006e14:	20000d9c 	.word	0x20000d9c
 8006e18:	20000d78 	.word	0x20000d78
 8006e1c:	20000b66 	.word	0x20000b66
 8006e20:	20005a5c 	.word	0x20005a5c
 8006e24:	20000a28 	.word	0x20000a28
 8006e28:	2000060b 	.word	0x2000060b
 8006e2c:	080177f0 	.word	0x080177f0
 8006e30:	08017710 	.word	0x08017710
 8006e34:	20000068 	.word	0x20000068
 8006e38:	20007ff0 	.word	0x20007ff0
 8006e3c:	deadbeef 	.word	0xdeadbeef
 8006e40:	200009e8 	.word	0x200009e8
 8006e44:	e000ed00 	.word	0xe000ed00
 8006e48:	05fa0004 	.word	0x05fa0004

08006e4c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4c:	b570      	push	{r4, r5, r6, lr}
	if(!moduleAlias[myID][0])
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <pingCommand+0x54>)
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	0093      	lsls	r3, r2, #2
 8006e54:	189b      	adds	r3, r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	4912      	ldr	r1, [pc, #72]	; (8006ea4 <pingCommand+0x58>)
 8006e5a:	5c5b      	ldrb	r3, [r3, r1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01a      	beq.n	8006e96 <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006e60:	0093      	lsls	r3, r2, #2
 8006e62:	189b      	adds	r3, r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	490f      	ldr	r1, [pc, #60]	; (8006ea4 <pingCommand+0x58>)
 8006e68:	185b      	adds	r3, r3, r1
 8006e6a:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <pingCommand+0x5c>)
 8006e6c:	f00c fd20 	bl	80138b0 <siprintf>
	RTOS_IND_blink(200);
 8006e70:	2580      	movs	r5, #128	; 0x80
 8006e72:	012d      	lsls	r5, r5, #4
 8006e74:	2490      	movs	r4, #144	; 0x90
 8006e76:	05e4      	lsls	r4, r4, #23
 8006e78:	2201      	movs	r2, #1
 8006e7a:	0029      	movs	r1, r5
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00a f9e1 	bl	8011244 <HAL_GPIO_WritePin>
 8006e82:	20c8      	movs	r0, #200	; 0xc8
 8006e84:	f006 fe2d 	bl	800dae2 <osDelay>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	0029      	movs	r1, r5
 8006e8c:	0020      	movs	r0, r4
 8006e8e:	f00a f9d9 	bl	8011244 <HAL_GPIO_WritePin>
}
 8006e92:	2000      	movs	r0, #0
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8006e96:	4905      	ldr	r1, [pc, #20]	; (8006eac <pingCommand+0x60>)
 8006e98:	f00c fd0a 	bl	80138b0 <siprintf>
 8006e9c:	e7e8      	b.n	8006e70 <pingCommand+0x24>
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000b66 	.word	0x20000b66
 8006ea4:	20000a58 	.word	0x20000a58
 8006ea8:	08017cf4 	.word	0x08017cf4
 8006eac:	08017ce0 	.word	0x08017ce0

08006eb0 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8006eb4:	2241      	movs	r2, #65	; 0x41
 8006eb6:	4904      	ldr	r1, [pc, #16]	; (8006ec8 <prvRunTimeStatsCommand+0x18>)
 8006eb8:	f00b ff63 	bl	8012d82 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8006ebc:	0020      	movs	r0, r4
 8006ebe:	3040      	adds	r0, #64	; 0x40
 8006ec0:	f008 f8d4 	bl	800f06c <vTaskGetRunTimeStats>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd10      	pop	{r4, pc}
 8006ec8:	08017d20 	.word	0x08017d20

08006ecc <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8006ed0:	2250      	movs	r2, #80	; 0x50
 8006ed2:	4904      	ldr	r1, [pc, #16]	; (8006ee4 <prvTaskStatsCommand+0x18>)
 8006ed4:	f00b ff55 	bl	8012d82 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8006ed8:	0020      	movs	r0, r4
 8006eda:	304f      	adds	r0, #79	; 0x4f
 8006edc:	f008 f866 	bl	800efac <vTaskList>
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	08017d74 	.word	0x08017d74

08006ee8 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	4b03      	ldr	r3, [pc, #12]	; (8006efc <resetCommand+0x14>)
 8006eee:	4a04      	ldr	r2, [pc, #16]	; (8006f00 <resetCommand+0x18>)
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	e7fd      	b.n	8006ef6 <resetCommand+0xe>
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	e000ed00 	.word	0xe000ed00
 8006f00:	05fa0004 	.word	0x05fa0004

08006f04 <RegisterUserCLICommands>:
}
 8006f04:	4770      	bx	lr
	...

08006f08 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8006f08:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8006f0a:	4835      	ldr	r0, [pc, #212]	; (8006fe0 <vRegisterCLICommands+0xd8>)
 8006f0c:	f006 fe64 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8006f10:	4834      	ldr	r0, [pc, #208]	; (8006fe4 <vRegisterCLICommands+0xdc>)
 8006f12:	f006 fe61 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8006f16:	4834      	ldr	r0, [pc, #208]	; (8006fe8 <vRegisterCLICommands+0xe0>)
 8006f18:	f006 fe5e 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8006f1c:	4833      	ldr	r0, [pc, #204]	; (8006fec <vRegisterCLICommands+0xe4>)
 8006f1e:	f006 fe5b 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8006f22:	4833      	ldr	r0, [pc, #204]	; (8006ff0 <vRegisterCLICommands+0xe8>)
 8006f24:	f006 fe58 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8006f28:	4832      	ldr	r0, [pc, #200]	; (8006ff4 <vRegisterCLICommands+0xec>)
 8006f2a:	f006 fe55 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8006f2e:	4832      	ldr	r0, [pc, #200]	; (8006ff8 <vRegisterCLICommands+0xf0>)
 8006f30:	f006 fe52 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8006f34:	4831      	ldr	r0, [pc, #196]	; (8006ffc <vRegisterCLICommands+0xf4>)
 8006f36:	f006 fe4f 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8006f3a:	4831      	ldr	r0, [pc, #196]	; (8007000 <vRegisterCLICommands+0xf8>)
 8006f3c:	f006 fe4c 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8006f40:	4830      	ldr	r0, [pc, #192]	; (8007004 <vRegisterCLICommands+0xfc>)
 8006f42:	f006 fe49 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8006f46:	4830      	ldr	r0, [pc, #192]	; (8007008 <vRegisterCLICommands+0x100>)
 8006f48:	f006 fe46 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8006f4c:	482f      	ldr	r0, [pc, #188]	; (800700c <vRegisterCLICommands+0x104>)
 8006f4e:	f006 fe43 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8006f52:	482f      	ldr	r0, [pc, #188]	; (8007010 <vRegisterCLICommands+0x108>)
 8006f54:	f006 fe40 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8006f58:	482e      	ldr	r0, [pc, #184]	; (8007014 <vRegisterCLICommands+0x10c>)
 8006f5a:	f006 fe3d 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8006f5e:	482e      	ldr	r0, [pc, #184]	; (8007018 <vRegisterCLICommands+0x110>)
 8006f60:	f006 fe3a 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8006f64:	482d      	ldr	r0, [pc, #180]	; (800701c <vRegisterCLICommands+0x114>)
 8006f66:	f006 fe37 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8006f6a:	482d      	ldr	r0, [pc, #180]	; (8007020 <vRegisterCLICommands+0x118>)
 8006f6c:	f006 fe34 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8006f70:	482c      	ldr	r0, [pc, #176]	; (8007024 <vRegisterCLICommands+0x11c>)
 8006f72:	f006 fe31 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8006f76:	482c      	ldr	r0, [pc, #176]	; (8007028 <vRegisterCLICommands+0x120>)
 8006f78:	f006 fe2e 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8006f7c:	482b      	ldr	r0, [pc, #172]	; (800702c <vRegisterCLICommands+0x124>)
 8006f7e:	f006 fe2b 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8006f82:	482b      	ldr	r0, [pc, #172]	; (8007030 <vRegisterCLICommands+0x128>)
 8006f84:	f006 fe28 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8006f88:	482a      	ldr	r0, [pc, #168]	; (8007034 <vRegisterCLICommands+0x12c>)
 8006f8a:	f006 fe25 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8006f8e:	482a      	ldr	r0, [pc, #168]	; (8007038 <vRegisterCLICommands+0x130>)
 8006f90:	f006 fe22 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8006f94:	4829      	ldr	r0, [pc, #164]	; (800703c <vRegisterCLICommands+0x134>)
 8006f96:	f006 fe1f 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8006f9a:	4829      	ldr	r0, [pc, #164]	; (8007040 <vRegisterCLICommands+0x138>)
 8006f9c:	f006 fe1c 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8006fa0:	4828      	ldr	r0, [pc, #160]	; (8007044 <vRegisterCLICommands+0x13c>)
 8006fa2:	f006 fe19 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8006fa6:	4828      	ldr	r0, [pc, #160]	; (8007048 <vRegisterCLICommands+0x140>)
 8006fa8:	f006 fe16 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8006fac:	4827      	ldr	r0, [pc, #156]	; (800704c <vRegisterCLICommands+0x144>)
 8006fae:	f006 fe13 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8006fb2:	4827      	ldr	r0, [pc, #156]	; (8007050 <vRegisterCLICommands+0x148>)
 8006fb4:	f006 fe10 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8006fb8:	4826      	ldr	r0, [pc, #152]	; (8007054 <vRegisterCLICommands+0x14c>)
 8006fba:	f006 fe0d 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8006fbe:	4826      	ldr	r0, [pc, #152]	; (8007058 <vRegisterCLICommands+0x150>)
 8006fc0:	f006 fe0a 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8006fc4:	4825      	ldr	r0, [pc, #148]	; (800705c <vRegisterCLICommands+0x154>)
 8006fc6:	f006 fe07 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8006fca:	4825      	ldr	r0, [pc, #148]	; (8007060 <vRegisterCLICommands+0x158>)
 8006fcc:	f006 fe04 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8006fd0:	4b24      	ldr	r3, [pc, #144]	; (8007064 <vRegisterCLICommands+0x15c>)
 8006fd2:	2223      	movs	r2, #35	; 0x23
 8006fd4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8006fd6:	f002 ff7b 	bl	8009ed0 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8006fda:	f7ff ff93 	bl	8006f04 <RegisterUserCLICommands>
}
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	08017dc4 	.word	0x08017dc4
 8006fe4:	08017d64 	.word	0x08017d64
 8006fe8:	08017d10 	.word	0x08017d10
 8006fec:	08017734 	.word	0x08017734
 8006ff0:	080178bc 	.word	0x080178bc
 8006ff4:	08017e0c 	.word	0x08017e0c
 8006ff8:	08017c88 	.word	0x08017c88
 8006ffc:	08017b48 	.word	0x08017b48
 8007000:	080182bc 	.word	0x080182bc
 8007004:	08017c4c 	.word	0x08017c4c
 8007008:	08017ec8 	.word	0x08017ec8
 800700c:	08017700 	.word	0x08017700
 8007010:	08017dfc 	.word	0x08017dfc
 8007014:	0801811c 	.word	0x0801811c
 8007018:	080179e8 	.word	0x080179e8
 800701c:	08017840 	.word	0x08017840
 8007020:	08019064 	.word	0x08019064
 8007024:	080177a8 	.word	0x080177a8
 8007028:	08017f14 	.word	0x08017f14
 800702c:	080190d8 	.word	0x080190d8
 8007030:	08017bc8 	.word	0x08017bc8
 8007034:	080178ec 	.word	0x080178ec
 8007038:	080182ac 	.word	0x080182ac
 800703c:	08017684 	.word	0x08017684
 8007040:	08017cd0 	.word	0x08017cd0
 8007044:	080178ac 	.word	0x080178ac
 8007048:	08017780 	.word	0x08017780
 800704c:	080190b0 	.word	0x080190b0
 8007050:	08018ff8 	.word	0x08018ff8
 8007054:	08017584 	.word	0x08017584
 8007058:	08017604 	.word	0x08017604
 800705c:	0801763c 	.word	0x0801763c
 8007060:	08017594 	.word	0x08017594
 8007064:	20005a58 	.word	0x20005a58

08007068 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	0005      	movs	r5, r0
 800706c:	000e      	movs	r6, r1
 800706e:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007070:	f002 ff4a 	bl	8009f08 <GetPort>
 8007074:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <StartDMAstream+0x44>)
 8007078:	5c1b      	ldrb	r3, [r3, r0]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d902      	bls.n	8007084 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800707e:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007080:	2b03      	cmp	r3, #3
 8007082:	d112      	bne.n	80070aa <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8007084:	0020      	movs	r0, r4
 8007086:	f003 fd2f 	bl	800aae8 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800708a:	1e63      	subs	r3, r4, #1
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a08      	ldr	r2, [pc, #32]	; (80070b0 <StartDMAstream+0x48>)
 8007090:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007092:	4a06      	ldr	r2, [pc, #24]	; (80070ac <StartDMAstream+0x44>)
 8007094:	2102      	movs	r1, #2
 8007096:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007098:	4a06      	ldr	r2, [pc, #24]	; (80070b4 <StartDMAstream+0x4c>)
 800709a:	2100      	movs	r1, #0
 800709c:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 800709e:	003a      	movs	r2, r7
 80070a0:	0031      	movs	r1, r6
 80070a2:	0028      	movs	r0, r5
 80070a4:	f004 f98c 	bl	800b3c0 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80070a8:	2000      	movs	r0, #0
}
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	20000bd0 	.word	0x20000bd0
 80070b0:	20001030 	.word	0x20001030
 80070b4:	20001024 	.word	0x20001024

080070b8 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80070bc:	4b12      	ldr	r3, [pc, #72]	; (8007108 <DMA_IRQHandler+0x50>)
 80070be:	5c1b      	ldrb	r3, [r3, r0]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d008      	beq.n	80070d6 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80070c4:	3c01      	subs	r4, #1
 80070c6:	00e0      	lsls	r0, r4, #3
 80070c8:	1b00      	subs	r0, r0, r4
 80070ca:	00c0      	lsls	r0, r0, #3
 80070cc:	4c0f      	ldr	r4, [pc, #60]	; (800710c <DMA_IRQHandler+0x54>)
 80070ce:	1900      	adds	r0, r0, r4
 80070d0:	f009 f9a0 	bl	8010414 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80070d6:	1e45      	subs	r5, r0, #1
 80070d8:	00e8      	lsls	r0, r5, #3
 80070da:	1b40      	subs	r0, r0, r5
 80070dc:	00c0      	lsls	r0, r0, #3
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <DMA_IRQHandler+0x58>)
 80070e0:	18c0      	adds	r0, r0, r3
 80070e2:	f009 f997 	bl	8010414 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80070e6:	00aa      	lsls	r2, r5, #2
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <DMA_IRQHandler+0x5c>)
 80070ea:	58d2      	ldr	r2, [r2, r3]
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	d006      	beq.n	80070fe <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80070f0:	4909      	ldr	r1, [pc, #36]	; (8007118 <DMA_IRQHandler+0x60>)
 80070f2:	00ad      	lsls	r5, r5, #2
 80070f4:	586b      	ldr	r3, [r5, r1]
 80070f6:	3301      	adds	r3, #1
 80070f8:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d8ea      	bhi.n	80070d4 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80070fe:	0020      	movs	r0, r4
 8007100:	f003 fcc6 	bl	800aa90 <StopStreamDMA>
}
 8007104:	e7e6      	b.n	80070d4 <DMA_IRQHandler+0x1c>
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	20000bd0 	.word	0x20000bd0
 800710c:	2000134c 	.word	0x2000134c
 8007110:	20001544 	.word	0x20001544
 8007114:	2000103c 	.word	0x2000103c
 8007118:	20001024 	.word	0x20001024

0800711c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800711c:	4b08      	ldr	r3, [pc, #32]	; (8007140 <ResetUartORE+0x24>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	2308      	movs	r3, #8
 8007122:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007124:	4a07      	ldr	r2, [pc, #28]	; (8007144 <ResetUartORE+0x28>)
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800712a:	4a07      	ldr	r2, [pc, #28]	; (8007148 <ResetUartORE+0x2c>)
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007130:	4a06      	ldr	r2, [pc, #24]	; (800714c <ResetUartORE+0x30>)
 8007132:	6812      	ldr	r2, [r2, #0]
 8007134:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <ResetUartORE+0x34>)
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	6213      	str	r3, [r2, #32]
#endif
}
 800713c:	4770      	bx	lr
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	20005cb4 	.word	0x20005cb4
 8007144:	20005e24 	.word	0x20005e24
 8007148:	20005c04 	.word	0x20005c04
 800714c:	20005db0 	.word	0x20005db0
 8007150:	20005d38 	.word	0x20005d38

08007154 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007158:	2400      	movs	r4, #0
 800715a:	9403      	str	r4, [sp, #12]
 800715c:	9402      	str	r4, [sp, #8]
 800715e:	4b3c      	ldr	r3, [pc, #240]	; (8007250 <MX_FREERTOS_Init+0xfc>)
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	2503      	movs	r5, #3
 8007164:	9500      	str	r5, [sp, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	22f0      	movs	r2, #240	; 0xf0
 800716a:	493a      	ldr	r1, [pc, #232]	; (8007254 <MX_FREERTOS_Init+0x100>)
 800716c:	483a      	ldr	r0, [pc, #232]	; (8007258 <MX_FREERTOS_Init+0x104>)
 800716e:	f007 fa3b 	bl	800e5e8 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007172:	9403      	str	r4, [sp, #12]
 8007174:	9402      	str	r4, [sp, #8]
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <MX_FREERTOS_Init+0x108>)
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	9500      	str	r5, [sp, #0]
 800717c:	2300      	movs	r3, #0
 800717e:	22f0      	movs	r2, #240	; 0xf0
 8007180:	4937      	ldr	r1, [pc, #220]	; (8007260 <MX_FREERTOS_Init+0x10c>)
 8007182:	4838      	ldr	r0, [pc, #224]	; (8007264 <MX_FREERTOS_Init+0x110>)
 8007184:	f007 fa30 	bl	800e5e8 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007188:	9403      	str	r4, [sp, #12]
 800718a:	9402      	str	r4, [sp, #8]
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <MX_FREERTOS_Init+0x114>)
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	9500      	str	r5, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	22f0      	movs	r2, #240	; 0xf0
 8007196:	4935      	ldr	r1, [pc, #212]	; (800726c <MX_FREERTOS_Init+0x118>)
 8007198:	4835      	ldr	r0, [pc, #212]	; (8007270 <MX_FREERTOS_Init+0x11c>)
 800719a:	f007 fa25 	bl	800e5e8 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 800719e:	f7ff feb3 	bl	8006f08 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80071a2:	228c      	movs	r2, #140	; 0x8c
 80071a4:	9403      	str	r4, [sp, #12]
 80071a6:	9402      	str	r4, [sp, #8]
 80071a8:	4b32      	ldr	r3, [pc, #200]	; (8007274 <MX_FREERTOS_Init+0x120>)
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	9500      	str	r5, [sp, #0]
 80071ae:	2300      	movs	r3, #0
 80071b0:	0052      	lsls	r2, r2, #1
 80071b2:	4931      	ldr	r1, [pc, #196]	; (8007278 <MX_FREERTOS_Init+0x124>)
 80071b4:	4831      	ldr	r0, [pc, #196]	; (800727c <MX_FREERTOS_Init+0x128>)
 80071b6:	f007 fa17 	bl	800e5e8 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80071ba:	4d31      	ldr	r5, [pc, #196]	; (8007280 <MX_FREERTOS_Init+0x12c>)
 80071bc:	9403      	str	r4, [sp, #12]
 80071be:	9402      	str	r4, [sp, #8]
 80071c0:	4b30      	ldr	r3, [pc, #192]	; (8007284 <MX_FREERTOS_Init+0x130>)
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	2604      	movs	r6, #4
 80071c6:	9600      	str	r6, [sp, #0]
 80071c8:	2301      	movs	r3, #1
 80071ca:	22f0      	movs	r2, #240	; 0xf0
 80071cc:	492e      	ldr	r1, [pc, #184]	; (8007288 <MX_FREERTOS_Init+0x134>)
 80071ce:	0028      	movs	r0, r5
 80071d0:	f007 fa0a 	bl	800e5e8 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80071d4:	9403      	str	r4, [sp, #12]
 80071d6:	9402      	str	r4, [sp, #8]
 80071d8:	4b2c      	ldr	r3, [pc, #176]	; (800728c <MX_FREERTOS_Init+0x138>)
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	9600      	str	r6, [sp, #0]
 80071de:	2302      	movs	r3, #2
 80071e0:	22f0      	movs	r2, #240	; 0xf0
 80071e2:	492b      	ldr	r1, [pc, #172]	; (8007290 <MX_FREERTOS_Init+0x13c>)
 80071e4:	0028      	movs	r0, r5
 80071e6:	f007 f9ff 	bl	800e5e8 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80071ea:	9403      	str	r4, [sp, #12]
 80071ec:	9402      	str	r4, [sp, #8]
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <MX_FREERTOS_Init+0x140>)
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	9600      	str	r6, [sp, #0]
 80071f4:	2303      	movs	r3, #3
 80071f6:	22f0      	movs	r2, #240	; 0xf0
 80071f8:	4927      	ldr	r1, [pc, #156]	; (8007298 <MX_FREERTOS_Init+0x144>)
 80071fa:	0028      	movs	r0, r5
 80071fc:	f007 f9f4 	bl	800e5e8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007200:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007202:	2101      	movs	r1, #1
 8007204:	a809      	add	r0, sp, #36	; 0x24
 8007206:	f006 fc74 	bl	800daf2 <osSemaphoreCreate>
 800720a:	4e24      	ldr	r6, [pc, #144]	; (800729c <MX_FREERTOS_Init+0x148>)
 800720c:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 800720e:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007210:	2101      	movs	r1, #1
 8007212:	a808      	add	r0, sp, #32
 8007214:	f006 fc6d 	bl	800daf2 <osSemaphoreCreate>
 8007218:	4d21      	ldr	r5, [pc, #132]	; (80072a0 <MX_FREERTOS_Init+0x14c>)
 800721a:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 800721c:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 800721e:	2101      	movs	r1, #1
 8007220:	a807      	add	r0, sp, #28
 8007222:	f006 fc66 	bl	800daf2 <osSemaphoreCreate>
 8007226:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007228:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800722a:	2101      	movs	r1, #1
 800722c:	a806      	add	r0, sp, #24
 800722e:	f006 fc60 	bl	800daf2 <osSemaphoreCreate>
 8007232:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007234:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007236:	2101      	movs	r1, #1
 8007238:	a805      	add	r0, sp, #20
 800723a:	f006 fc5a 	bl	800daf2 <osSemaphoreCreate>
 800723e:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007240:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007242:	2101      	movs	r1, #1
 8007244:	a804      	add	r0, sp, #16
 8007246:	f006 fc54 	bl	800daf2 <osSemaphoreCreate>
 800724a:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 800724c:	b00a      	add	sp, #40	; 0x28
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	20001070 	.word	0x20001070
 8007254:	080190e8 	.word	0x080190e8
 8007258:	08007645 	.word	0x08007645
 800725c:	20001048 	.word	0x20001048
 8007260:	080190f4 	.word	0x080190f4
 8007264:	08008089 	.word	0x08008089
 8007268:	2000106c 	.word	0x2000106c
 800726c:	08019100 	.word	0x08019100
 8007270:	08012c87 	.word	0x08012c87
 8007274:	20001144 	.word	0x20001144
 8007278:	0801910c 	.word	0x0801910c
 800727c:	08004d89 	.word	0x08004d89
 8007280:	08008225 	.word	0x08008225
 8007284:	2000104c 	.word	0x2000104c
 8007288:	08019114 	.word	0x08019114
 800728c:	20001050 	.word	0x20001050
 8007290:	08019120 	.word	0x08019120
 8007294:	20001054 	.word	0x20001054
 8007298:	0801912c 	.word	0x0801912c
 800729c:	20005b80 	.word	0x20005b80
 80072a0:	20005b60 	.word	0x20005b60

080072a4 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 80072a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a6:	46de      	mov	lr, fp
 80072a8:	4657      	mov	r7, sl
 80072aa:	464e      	mov	r6, r9
 80072ac:	4645      	mov	r5, r8
 80072ae:	b5e0      	push	{r5, r6, r7, lr}
 80072b0:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80072b2:	4bd3      	ldr	r3, [pc, #844]	; (8007600 <ExecuteMonitor+0x35c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d000      	beq.n	80072bc <ExecuteMonitor+0x18>
 80072ba:	e19a      	b.n	80075f2 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 80072bc:	4bd0      	ldr	r3, [pc, #832]	; (8007600 <ExecuteMonitor+0x35c>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
	flag=0;
 80072c2:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 80072c4:	3220      	adds	r2, #32
 80072c6:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80072c8:	4bce      	ldr	r3, [pc, #824]	; (8007604 <ExecuteMonitor+0x360>)
 80072ca:	3301      	adds	r3, #1
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4bce      	ldr	r3, [pc, #824]	; (8007608 <ExecuteMonitor+0x364>)
 80072d0:	3304      	adds	r3, #4
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	e186      	b.n	80075e4 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80072d6:	4bcd      	ldr	r3, [pc, #820]	; (800760c <ExecuteMonitor+0x368>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2220      	movs	r2, #32
 80072dc:	4393      	bics	r3, r2
 80072de:	d018      	beq.n	8007312 <ExecuteMonitor+0x6e>
 80072e0:	4bc7      	ldr	r3, [pc, #796]	; (8007600 <ExecuteMonitor+0x35c>)
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	d800      	bhi.n	80072ec <ExecuteMonitor+0x48>
 80072ea:	e0b8      	b.n	800745e <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 80072ec:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 80072ee:	2064      	movs	r0, #100	; 0x64
 80072f0:	f006 f91e 	bl	800d530 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80072f4:	7963      	ldrb	r3, [r4, #5]
 80072f6:	783a      	ldrb	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d0ec      	beq.n	80072d6 <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80072fc:	49c4      	ldr	r1, [pc, #784]	; (8007610 <ExecuteMonitor+0x36c>)
 80072fe:	780a      	ldrb	r2, [r1, #0]
 8007300:	1c50      	adds	r0, r2, #1
 8007302:	7008      	strb	r0, [r1, #0]
 8007304:	49c0      	ldr	r1, [pc, #768]	; (8007608 <ExecuteMonitor+0x364>)
 8007306:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8007308:	4ac0      	ldr	r2, [pc, #768]	; (800760c <ExecuteMonitor+0x368>)
 800730a:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 800730c:	4bbc      	ldr	r3, [pc, #752]	; (8007600 <ExecuteMonitor+0x35c>)
 800730e:	715e      	strb	r6, [r3, #5]
 8007310:	e7e1      	b.n	80072d6 <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 8007312:	4bbb      	ldr	r3, [pc, #748]	; (8007600 <ExecuteMonitor+0x35c>)
 8007314:	791b      	ldrb	r3, [r3, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d000      	beq.n	800731c <ExecuteMonitor+0x78>
 800731a:	e0a0      	b.n	800745e <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 800731c:	4bbc      	ldr	r3, [pc, #752]	; (8007610 <ExecuteMonitor+0x36c>)
 800731e:	464a      	mov	r2, r9
 8007320:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007322:	4bb9      	ldr	r3, [pc, #740]	; (8007608 <ExecuteMonitor+0x364>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b5b      	cmp	r3, #91	; 0x5b
 8007328:	d020      	beq.n	800736c <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 800732a:	2b23      	cmp	r3, #35	; 0x23
 800732c:	d063      	beq.n	80073f6 <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 800732e:	2b3d      	cmp	r3, #61	; 0x3d
 8007330:	d074      	beq.n	800741c <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 8007332:	4cb4      	ldr	r4, [pc, #720]	; (8007604 <ExecuteMonitor+0x360>)
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	4ab7      	ldr	r2, [pc, #732]	; (8007614 <ExecuteMonitor+0x370>)
 8007338:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800733a:	0118      	lsls	r0, r3, #4
 800733c:	1ac3      	subs	r3, r0, r3
 800733e:	48b6      	ldr	r0, [pc, #728]	; (8007618 <ExecuteMonitor+0x374>)
 8007340:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007342:	220f      	movs	r2, #15
 8007344:	0021      	movs	r1, r4
 8007346:	f00b fd1c 	bl	8012d82 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800734a:	2214      	movs	r2, #20
 800734c:	4649      	mov	r1, r9
 800734e:	48ae      	ldr	r0, [pc, #696]	; (8007608 <ExecuteMonitor+0x364>)
 8007350:	f00b fd20 	bl	8012d94 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007354:	2214      	movs	r2, #20
 8007356:	4649      	mov	r1, r9
 8007358:	0020      	movs	r0, r4
 800735a:	f00b fd1b 	bl	8012d94 <memset>
		                    nonProcessingParameterIndex=0;
 800735e:	465b      	mov	r3, fp
 8007360:	4652      	mov	r2, sl
 8007362:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8007364:	2603      	movs	r6, #3
 8007366:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 8007368:	4ca5      	ldr	r4, [pc, #660]	; (8007600 <ExecuteMonitor+0x35c>)
 800736a:	e7bf      	b.n	80072ec <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 800736c:	4ba8      	ldr	r3, [pc, #672]	; (8007610 <ExecuteMonitor+0x36c>)
 800736e:	2201      	movs	r2, #1
 8007370:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007372:	4baa      	ldr	r3, [pc, #680]	; (800761c <ExecuteMonitor+0x378>)
 8007374:	781c      	ldrb	r4, [r3, #0]
 8007376:	4ba4      	ldr	r3, [pc, #656]	; (8007608 <ExecuteMonitor+0x364>)
 8007378:	7858      	ldrb	r0, [r3, #1]
 800737a:	210a      	movs	r1, #10
 800737c:	f7f8 ff64 	bl	8000248 <__aeabi_uidivmod>
 8007380:	b2c9      	uxtb	r1, r1
 8007382:	2603      	movs	r6, #3
 8007384:	42a1      	cmp	r1, r4
 8007386:	d00d      	beq.n	80073a4 <ExecuteMonitor+0x100>
 8007388:	4b9f      	ldr	r3, [pc, #636]	; (8007608 <ExecuteMonitor+0x364>)
 800738a:	4698      	mov	r8, r3
 800738c:	1cb5      	adds	r5, r6, #2
 800738e:	b2ed      	uxtb	r5, r5
 8007390:	4643      	mov	r3, r8
 8007392:	5d98      	ldrb	r0, [r3, r6]
 8007394:	210a      	movs	r1, #10
 8007396:	f7f8 ff57 	bl	8000248 <__aeabi_uidivmod>
 800739a:	b2c9      	uxtb	r1, r1
 800739c:	42a1      	cmp	r1, r4
 800739e:	d002      	beq.n	80073a6 <ExecuteMonitor+0x102>
 80073a0:	002e      	movs	r6, r5
 80073a2:	e7f3      	b.n	800738c <ExecuteMonitor+0xe8>
 80073a4:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 80073a6:	1c74      	adds	r4, r6, #1
 80073a8:	b2e4      	uxtb	r4, r4
 80073aa:	4b99      	ldr	r3, [pc, #612]	; (8007610 <ExecuteMonitor+0x36c>)
 80073ac:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80073ae:	4b96      	ldr	r3, [pc, #600]	; (8007608 <ExecuteMonitor+0x364>)
 80073b0:	5d1d      	ldrb	r5, [r3, r4]
 80073b2:	210a      	movs	r1, #10
 80073b4:	0028      	movs	r0, r5
 80073b6:	f7f8 ff47 	bl	8000248 <__aeabi_uidivmod>
 80073ba:	4b92      	ldr	r3, [pc, #584]	; (8007604 <ExecuteMonitor+0x360>)
 80073bc:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80073be:	2d5d      	cmp	r5, #93	; 0x5d
 80073c0:	d009      	beq.n	80073d6 <ExecuteMonitor+0x132>
 80073c2:	3602      	adds	r6, #2
 80073c4:	b2f4      	uxtb	r4, r6
 80073c6:	4990      	ldr	r1, [pc, #576]	; (8007608 <ExecuteMonitor+0x364>)
 80073c8:	e000      	b.n	80073cc <ExecuteMonitor+0x128>
 80073ca:	001c      	movs	r4, r3
 80073cc:	1c63      	adds	r3, r4, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	5d0a      	ldrb	r2, [r1, r4]
 80073d2:	2a5d      	cmp	r2, #93	; 0x5d
 80073d4:	d1f9      	bne.n	80073ca <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 80073d6:	3401      	adds	r4, #1
 80073d8:	b2e1      	uxtb	r1, r4
 80073da:	4b8d      	ldr	r3, [pc, #564]	; (8007610 <ExecuteMonitor+0x36c>)
 80073dc:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 80073de:	4b90      	ldr	r3, [pc, #576]	; (8007620 <ExecuteMonitor+0x37c>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80073e4:	4887      	ldr	r0, [pc, #540]	; (8007604 <ExecuteMonitor+0x360>)
 80073e6:	3213      	adds	r2, #19
 80073e8:	1a52      	subs	r2, r2, r1
 80073ea:	4c87      	ldr	r4, [pc, #540]	; (8007608 <ExecuteMonitor+0x364>)
 80073ec:	1861      	adds	r1, r4, r1
 80073ee:	3001      	adds	r0, #1
 80073f0:	f00b fcc7 	bl	8012d82 <memcpy>
 80073f4:	e79d      	b.n	8007332 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80073f6:	4c83      	ldr	r4, [pc, #524]	; (8007604 <ExecuteMonitor+0x360>)
 80073f8:	4d83      	ldr	r5, [pc, #524]	; (8007608 <ExecuteMonitor+0x364>)
 80073fa:	7868      	ldrb	r0, [r5, #1]
 80073fc:	210a      	movs	r1, #10
 80073fe:	f7f8 ff23 	bl	8000248 <__aeabi_uidivmod>
 8007402:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 8007404:	4b82      	ldr	r3, [pc, #520]	; (8007610 <ExecuteMonitor+0x36c>)
 8007406:	2202      	movs	r2, #2
 8007408:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800740a:	4b85      	ldr	r3, [pc, #532]	; (8007620 <ExecuteMonitor+0x37c>)
 800740c:	3a01      	subs	r2, #1
 800740e:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007410:	1c60      	adds	r0, r4, #1
 8007412:	1ca9      	adds	r1, r5, #2
 8007414:	3211      	adds	r2, #17
 8007416:	f00b fcb4 	bl	8012d82 <memcpy>
 800741a:	e78a      	b.n	8007332 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800741c:	4b7a      	ldr	r3, [pc, #488]	; (8007608 <ExecuteMonitor+0x364>)
 800741e:	7858      	ldrb	r0, [r3, #1]
 8007420:	210a      	movs	r1, #10
 8007422:	f7f8 ff11 	bl	8000248 <__aeabi_uidivmod>
 8007426:	4b7d      	ldr	r3, [pc, #500]	; (800761c <ExecuteMonitor+0x378>)
 8007428:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800742a:	4b77      	ldr	r3, [pc, #476]	; (8007608 <ExecuteMonitor+0x364>)
 800742c:	7898      	ldrb	r0, [r3, #2]
 800742e:	210a      	movs	r1, #10
 8007430:	f7f8 ff0a 	bl	8000248 <__aeabi_uidivmod>
 8007434:	4b7b      	ldr	r3, [pc, #492]	; (8007624 <ExecuteMonitor+0x380>)
 8007436:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007438:	4b73      	ldr	r3, [pc, #460]	; (8007608 <ExecuteMonitor+0x364>)
 800743a:	78d8      	ldrb	r0, [r3, #3]
 800743c:	210a      	movs	r1, #10
 800743e:	f7f8 ff03 	bl	8000248 <__aeabi_uidivmod>
 8007442:	4b70      	ldr	r3, [pc, #448]	; (8007604 <ExecuteMonitor+0x360>)
 8007444:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 8007446:	4b72      	ldr	r3, [pc, #456]	; (8007610 <ExecuteMonitor+0x36c>)
 8007448:	2204      	movs	r2, #4
 800744a:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 800744c:	4b74      	ldr	r3, [pc, #464]	; (8007620 <ExecuteMonitor+0x37c>)
 800744e:	3a03      	subs	r2, #3
 8007450:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007452:	320f      	adds	r2, #15
 8007454:	9901      	ldr	r1, [sp, #4]
 8007456:	9800      	ldr	r0, [sp, #0]
 8007458:	f00b fc93 	bl	8012d82 <memcpy>
 800745c:	e769      	b.n	8007332 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 800745e:	2b01      	cmp	r3, #1
 8007460:	d015      	beq.n	800748e <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8007462:	4b67      	ldr	r3, [pc, #412]	; (8007600 <ExecuteMonitor+0x35c>)
 8007464:	791b      	ldrb	r3, [r3, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d000      	beq.n	800746c <ExecuteMonitor+0x1c8>
 800746a:	e778      	b.n	800735e <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 800746c:	2300      	movs	r3, #0
 800746e:	4a6e      	ldr	r2, [pc, #440]	; (8007628 <ExecuteMonitor+0x384>)
 8007470:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007472:	4a6e      	ldr	r2, [pc, #440]	; (800762c <ExecuteMonitor+0x388>)
 8007474:	2101      	movs	r1, #1
 8007476:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 8007478:	4a6d      	ldr	r2, [pc, #436]	; (8007630 <ExecuteMonitor+0x38c>)
 800747a:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 800747c:	4b69      	ldr	r3, [pc, #420]	; (8007624 <ExecuteMonitor+0x380>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d100      	bne.n	8007486 <ExecuteMonitor+0x1e2>
 8007484:	e07f      	b.n	8007586 <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007486:	0017      	movs	r7, r2
 8007488:	4e68      	ldr	r6, [pc, #416]	; (800762c <ExecuteMonitor+0x388>)
 800748a:	4d67      	ldr	r5, [pc, #412]	; (8007628 <ExecuteMonitor+0x384>)
 800748c:	e062      	b.n	8007554 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 800748e:	4b66      	ldr	r3, [pc, #408]	; (8007628 <ExecuteMonitor+0x384>)
 8007490:	464a      	mov	r2, r9
 8007492:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 8007494:	4b65      	ldr	r3, [pc, #404]	; (800762c <ExecuteMonitor+0x388>)
 8007496:	2201      	movs	r2, #1
 8007498:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 800749a:	4b65      	ldr	r3, [pc, #404]	; (8007630 <ExecuteMonitor+0x38c>)
 800749c:	464a      	mov	r2, r9
 800749e:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80074a0:	4b60      	ldr	r3, [pc, #384]	; (8007624 <ExecuteMonitor+0x380>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d02a      	beq.n	80074fe <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80074a8:	4b61      	ldr	r3, [pc, #388]	; (8007630 <ExecuteMonitor+0x38c>)
 80074aa:	4698      	mov	r8, r3
 80074ac:	4e5f      	ldr	r6, [pc, #380]	; (800762c <ExecuteMonitor+0x388>)
 80074ae:	4d5e      	ldr	r5, [pc, #376]	; (8007628 <ExecuteMonitor+0x384>)
 80074b0:	e00b      	b.n	80074ca <ExecuteMonitor+0x226>
		                   counter++;
 80074b2:	4a5f      	ldr	r2, [pc, #380]	; (8007630 <ExecuteMonitor+0x38c>)
 80074b4:	7813      	ldrb	r3, [r2, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80074bc:	4a5b      	ldr	r2, [pc, #364]	; (800762c <ExecuteMonitor+0x388>)
 80074be:	2101      	movs	r1, #1
 80074c0:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 80074c2:	4a58      	ldr	r2, [pc, #352]	; (8007624 <ExecuteMonitor+0x380>)
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d019      	beq.n	80074fe <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80074ca:	4643      	mov	r3, r8
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	7830      	ldrb	r0, [r6, #0]
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	7033      	strb	r3, [r6, #0]
 80074d4:	7829      	ldrb	r1, [r5, #0]
 80074d6:	1c4b      	adds	r3, r1, #1
 80074d8:	702b      	strb	r3, [r5, #0]
 80074da:	4c56      	ldr	r4, [pc, #344]	; (8007634 <ExecuteMonitor+0x390>)
 80074dc:	0113      	lsls	r3, r2, #4
 80074de:	1a9a      	subs	r2, r3, r2
 80074e0:	4b4d      	ldr	r3, [pc, #308]	; (8007618 <ExecuteMonitor+0x374>)
 80074e2:	189b      	adds	r3, r3, r2
 80074e4:	5c1b      	ldrb	r3, [r3, r0]
 80074e6:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 80074e8:	2001      	movs	r0, #1
 80074ea:	f008 fa4b 	bl	800f984 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80074ee:	782b      	ldrb	r3, [r5, #0]
 80074f0:	18e4      	adds	r4, r4, r3
 80074f2:	3c01      	subs	r4, #1
 80074f4:	7823      	ldrb	r3, [r4, #0]
 80074f6:	2220      	movs	r2, #32
 80074f8:	4393      	bics	r3, r2
 80074fa:	d1e6      	bne.n	80074ca <ExecuteMonitor+0x226>
 80074fc:	e7d9      	b.n	80074b2 <ExecuteMonitor+0x20e>
		          		   flag=0;
 80074fe:	4b40      	ldr	r3, [pc, #256]	; (8007600 <ExecuteMonitor+0x35c>)
 8007500:	464a      	mov	r2, r9
 8007502:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 8007504:	4b4a      	ldr	r3, [pc, #296]	; (8007630 <ExecuteMonitor+0x38c>)
 8007506:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <ExecuteMonitor+0x394>)
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800750e:	4e4b      	ldr	r6, [pc, #300]	; (800763c <ExecuteMonitor+0x398>)
 8007510:	4d48      	ldr	r5, [pc, #288]	; (8007634 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007512:	4c49      	ldr	r4, [pc, #292]	; (8007638 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007514:	18f2      	adds	r2, r6, r3
 8007516:	3281      	adds	r2, #129	; 0x81
 8007518:	32ff      	adds	r2, #255	; 0xff
 800751a:	5ceb      	ldrb	r3, [r5, r3]
 800751c:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 800751e:	2001      	movs	r0, #1
 8007520:	f008 fa30 	bl	800f984 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007524:	7823      	ldrb	r3, [r4, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	7023      	strb	r3, [r4, #0]
 800752c:	2b3f      	cmp	r3, #63	; 0x3f
 800752e:	d9f1      	bls.n	8007514 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	4649      	mov	r1, r9
 8007534:	483f      	ldr	r0, [pc, #252]	; (8007634 <ExecuteMonitor+0x390>)
 8007536:	f00b fc2d 	bl	8012d94 <memset>
 800753a:	e792      	b.n	8007462 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 800753c:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <ExecuteMonitor+0x38c>)
 800753e:	7813      	ldrb	r3, [r2, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	b2db      	uxtb	r3, r3
 8007544:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 8007546:	4a39      	ldr	r2, [pc, #228]	; (800762c <ExecuteMonitor+0x388>)
 8007548:	2101      	movs	r1, #1
 800754a:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 800754c:	4a35      	ldr	r2, [pc, #212]	; (8007624 <ExecuteMonitor+0x380>)
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d018      	beq.n	8007586 <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007554:	783a      	ldrb	r2, [r7, #0]
 8007556:	7830      	ldrb	r0, [r6, #0]
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	7033      	strb	r3, [r6, #0]
 800755c:	7829      	ldrb	r1, [r5, #0]
 800755e:	1c4b      	adds	r3, r1, #1
 8007560:	702b      	strb	r3, [r5, #0]
 8007562:	4c34      	ldr	r4, [pc, #208]	; (8007634 <ExecuteMonitor+0x390>)
 8007564:	0113      	lsls	r3, r2, #4
 8007566:	1a9a      	subs	r2, r3, r2
 8007568:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <ExecuteMonitor+0x374>)
 800756a:	189b      	adds	r3, r3, r2
 800756c:	5c1b      	ldrb	r3, [r3, r0]
 800756e:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8007570:	2001      	movs	r0, #1
 8007572:	f008 fa07 	bl	800f984 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007576:	782b      	ldrb	r3, [r5, #0]
 8007578:	18e4      	adds	r4, r4, r3
 800757a:	3c01      	subs	r4, #1
 800757c:	7823      	ldrb	r3, [r4, #0]
 800757e:	2220      	movs	r2, #32
 8007580:	4393      	bics	r3, r2
 8007582:	d1e7      	bne.n	8007554 <ExecuteMonitor+0x2b0>
 8007584:	e7da      	b.n	800753c <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 8007586:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <ExecuteMonitor+0x38c>)
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 800758c:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <ExecuteMonitor+0x35c>)
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01d      	beq.n	80075d0 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007594:	4b28      	ldr	r3, [pc, #160]	; (8007638 <ExecuteMonitor+0x394>)
 8007596:	4699      	mov	r9, r3
 8007598:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800759a:	4f28      	ldr	r7, [pc, #160]	; (800763c <ExecuteMonitor+0x398>)
 800759c:	4e25      	ldr	r6, [pc, #148]	; (8007634 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800759e:	464b      	mov	r3, r9
 80075a0:	701d      	strb	r5, [r3, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	4c24      	ldr	r4, [pc, #144]	; (8007638 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80075a6:	18fa      	adds	r2, r7, r3
 80075a8:	3281      	adds	r2, #129	; 0x81
 80075aa:	32ff      	adds	r2, #255	; 0xff
 80075ac:	5cf3      	ldrb	r3, [r6, r3]
 80075ae:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80075b0:	20c8      	movs	r0, #200	; 0xc8
 80075b2:	f005 ffbd 	bl	800d530 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80075b6:	7823      	ldrb	r3, [r4, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	7023      	strb	r3, [r4, #0]
 80075be:	2b3f      	cmp	r3, #63	; 0x3f
 80075c0:	d9f1      	bls.n	80075a6 <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 80075c2:	4c0f      	ldr	r4, [pc, #60]	; (8007600 <ExecuteMonitor+0x35c>)
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	f008 f9dd 	bl	800f984 <HAL_Delay>
                  while(flag != NonActive)
 80075ca:	7923      	ldrb	r3, [r4, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e6      	bne.n	800759e <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80075d0:	2240      	movs	r2, #64	; 0x40
 80075d2:	2100      	movs	r1, #0
 80075d4:	4817      	ldr	r0, [pc, #92]	; (8007634 <ExecuteMonitor+0x390>)
 80075d6:	f00b fbdd 	bl	8012d94 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80075da:	22c0      	movs	r2, #192	; 0xc0
 80075dc:	2100      	movs	r1, #0
 80075de:	4818      	ldr	r0, [pc, #96]	; (8007640 <ExecuteMonitor+0x39c>)
 80075e0:	f00b fbd8 	bl	8012d94 <memset>
		                    nonProcessingParameterIndex=0;
 80075e4:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <ExecuteMonitor+0x36c>)
 80075e6:	469b      	mov	fp, r3
 80075e8:	2300      	movs	r3, #0
 80075ea:	4699      	mov	r9, r3
 80075ec:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 80075ee:	4f07      	ldr	r7, [pc, #28]	; (800760c <ExecuteMonitor+0x368>)
 80075f0:	e6b5      	b.n	800735e <ExecuteMonitor+0xba>
		           }
	}
  }
}
 80075f2:	b003      	add	sp, #12
 80075f4:	bc3c      	pop	{r2, r3, r4, r5}
 80075f6:	4690      	mov	r8, r2
 80075f8:	4699      	mov	r9, r3
 80075fa:	46a2      	mov	sl, r4
 80075fc:	46ab      	mov	fp, r5
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	20000000 	.word	0x20000000
 8007604:	20001058 	.word	0x20001058
 8007608:	200010b4 	.word	0x200010b4
 800760c:	20005b5c 	.word	0x20005b5c
 8007610:	20005b7d 	.word	0x20005b7d
 8007614:	20005b9f 	.word	0x20005b9f
 8007618:	200010c8 	.word	0x200010c8
 800761c:	20005b9e 	.word	0x20005b9e
 8007620:	20005b7c 	.word	0x20005b7c
 8007624:	20005b9c 	.word	0x20005b9c
 8007628:	20005ba0 	.word	0x20005ba0
 800762c:	20005b9d 	.word	0x20005b9d
 8007630:	20005b7e 	.word	0x20005b7e
 8007634:	20001074 	.word	0x20001074
 8007638:	20005b5d 	.word	0x20005b5d
 800763c:	20000da8 	.word	0x20000da8
 8007640:	20000f28 	.word	0x20000f28

08007644 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007646:	46c6      	mov	lr, r8
 8007648:	b500      	push	{lr}
		switch(indMode){
 800764a:	4c2c      	ldr	r4, [pc, #176]	; (80076fc <StartDefaultTask+0xb8>)
				indMode =IND_OFF;
 800764c:	46a0      	mov	r8, r4
				indMode =IND_OFF;
 800764e:	0027      	movs	r7, r4
 8007650:	e022      	b.n	8007698 <StartDefaultTask+0x54>
				RTOS_IND_blink(200);
 8007652:	2680      	movs	r6, #128	; 0x80
 8007654:	0136      	lsls	r6, r6, #4
 8007656:	2590      	movs	r5, #144	; 0x90
 8007658:	05ed      	lsls	r5, r5, #23
 800765a:	2201      	movs	r2, #1
 800765c:	0031      	movs	r1, r6
 800765e:	0028      	movs	r0, r5
 8007660:	f009 fdf0 	bl	8011244 <HAL_GPIO_WritePin>
 8007664:	20c8      	movs	r0, #200	; 0xc8
 8007666:	f006 fa3c 	bl	800dae2 <osDelay>
 800766a:	2200      	movs	r2, #0
 800766c:	0031      	movs	r1, r6
 800766e:	0028      	movs	r0, r5
 8007670:	f009 fde8 	bl	8011244 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <StartDefaultTask+0xb8>)
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 800767a:	f005 f96b 	bl	800c954 <CheckAttachedButtons>
		ExecuteSnippet();
 800767e:	f7fd fd17 	bl	80050b0 <ExecuteSnippet>
		ExecuteMonitor();
 8007682:	f7ff fe0f 	bl	80072a4 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007686:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <StartDefaultTask+0xbc>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <StartDefaultTask+0x50>
			delayButtonStateReset = false;
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <StartDefaultTask+0xc0>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007694:	f008 f80a 	bl	800f6ac <vPortYield>
		switch(indMode){
 8007698:	7823      	ldrb	r3, [r4, #0]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d004      	beq.n	80076a8 <StartDefaultTask+0x64>
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d017      	beq.n	80076d2 <StartDefaultTask+0x8e>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d1e9      	bne.n	800767a <StartDefaultTask+0x36>
 80076a6:	e7d4      	b.n	8007652 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 80076a8:	2680      	movs	r6, #128	; 0x80
 80076aa:	0136      	lsls	r6, r6, #4
 80076ac:	2590      	movs	r5, #144	; 0x90
 80076ae:	05ed      	lsls	r5, r5, #23
 80076b0:	2201      	movs	r2, #1
 80076b2:	0031      	movs	r1, r6
 80076b4:	0028      	movs	r0, r5
 80076b6:	f009 fdc5 	bl	8011244 <HAL_GPIO_WritePin>
 80076ba:	2064      	movs	r0, #100	; 0x64
 80076bc:	f006 fa11 	bl	800dae2 <osDelay>
 80076c0:	2200      	movs	r2, #0
 80076c2:	0031      	movs	r1, r6
 80076c4:	0028      	movs	r0, r5
 80076c6:	f009 fdbd 	bl	8011244 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80076ca:	2300      	movs	r3, #0
 80076cc:	4642      	mov	r2, r8
 80076ce:	7013      	strb	r3, [r2, #0]
				break;
 80076d0:	e7d3      	b.n	800767a <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 80076d2:	2680      	movs	r6, #128	; 0x80
 80076d4:	0136      	lsls	r6, r6, #4
 80076d6:	2590      	movs	r5, #144	; 0x90
 80076d8:	05ed      	lsls	r5, r5, #23
 80076da:	2201      	movs	r2, #1
 80076dc:	0031      	movs	r1, r6
 80076de:	0028      	movs	r0, r5
 80076e0:	f009 fdb0 	bl	8011244 <HAL_GPIO_WritePin>
 80076e4:	201e      	movs	r0, #30
 80076e6:	f006 f9fc 	bl	800dae2 <osDelay>
 80076ea:	2200      	movs	r2, #0
 80076ec:	0031      	movs	r1, r6
 80076ee:	0028      	movs	r0, r5
 80076f0:	f009 fda8 	bl	8011244 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80076f4:	2300      	movs	r3, #0
 80076f6:	703b      	strb	r3, [r7, #0]
				break;
 80076f8:	e7bf      	b.n	800767a <StartDefaultTask+0x36>
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	200009e8 	.word	0x200009e8
 8007700:	200016da 	.word	0x200016da
 8007704:	200016d8 	.word	0x200016d8

08007708 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007708:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800770a:	4b04      	ldr	r3, [pc, #16]	; (800771c <vMainConfigureTimerForRunTimeStats+0x14>)
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	4904      	ldr	r1, [pc, #16]	; (8007720 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007710:	f7f8 fd14 	bl	800013c <__udivsi3>
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007716:	6018      	str	r0, [r3, #0]
}
 8007718:	bd10      	pop	{r4, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	200000ac 	.word	0x200000ac
 8007720:	00002710 	.word	0x00002710
 8007724:	20001140 	.word	0x20001140

08007728 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007728:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <ulMainGetRunTimeCounterValue+0x40>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	21fa      	movs	r1, #250	; 0xfa
 8007730:	0089      	lsls	r1, r1, #2
 8007732:	f7f8 fd03 	bl	800013c <__udivsi3>
 8007736:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <ulMainGetRunTimeCounterValue+0x44>)
 800773a:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 800773c:	f007 f8dc 	bl	800e8f8 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <ulMainGetRunTimeCounterValue+0x48>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	015b      	lsls	r3, r3, #5
 8007746:	d50d      	bpl.n	8007764 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007748:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800774a:	4b08      	ldr	r3, [pc, #32]	; (800776c <ulMainGetRunTimeCounterValue+0x44>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007750:	0084      	lsls	r4, r0, #2
 8007752:	1824      	adds	r4, r4, r0
 8007754:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007756:	4b07      	ldr	r3, [pc, #28]	; (8007774 <ulMainGetRunTimeCounterValue+0x4c>)
 8007758:	6819      	ldr	r1, [r3, #0]
 800775a:	0028      	movs	r0, r5
 800775c:	f7f8 fcee 	bl	800013c <__udivsi3>
 8007760:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007762:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007764:	1b2d      	subs	r5, r5, r4
 8007766:	e7f3      	b.n	8007750 <ulMainGetRunTimeCounterValue+0x28>
 8007768:	200000ac 	.word	0x200000ac
 800776c:	e000e018 	.word	0xe000e018
 8007770:	e000ed04 	.word	0xe000ed04
 8007774:	20001140 	.word	0x20001140

08007778 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007778:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800777a:	f007 ff3f 	bl	800f5fc <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800777e:	b2c4      	uxtb	r4, r0
 8007780:	0020      	movs	r0, r4
 8007782:	f003 f985 	bl	800aa90 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007786:	0020      	movs	r0, r4
 8007788:	f003 fde8 	bl	800b35c <SwitchStreamDMAToMsg>
}
 800778c:	bd10      	pop	{r4, pc}
	...

08007790 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	b085      	sub	sp, #20
 8007794:	000d      	movs	r5, r1
 8007796:	0014      	movs	r4, r2
 8007798:	220f      	movs	r2, #15
 800779a:	446a      	add	r2, sp
 800779c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800779e:	aa0a      	add	r2, sp, #40	; 0x28
 80077a0:	7812      	ldrb	r2, [r2, #0]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d058      	beq.n	8007858 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d100      	bne.n	80077ac <SetupDMAStreams+0x1c>
 80077aa:	e0be      	b.n	800792a <SetupDMAStreams+0x19a>
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	d100      	bne.n	80077b2 <SetupDMAStreams+0x22>
 80077b0:	e0bf      	b.n	8007932 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d055      	beq.n	8007862 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 80077b6:	2801      	cmp	r0, #1
 80077b8:	d100      	bne.n	80077bc <SetupDMAStreams+0x2c>
 80077ba:	e08b      	b.n	80078d4 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 80077bc:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80077be:	2802      	cmp	r0, #2
 80077c0:	d000      	beq.n	80077c4 <SetupDMAStreams+0x34>
 80077c2:	e0b3      	b.n	800792c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80077c4:	0018      	movs	r0, r3
 80077c6:	f005 fff1 	bl	800d7ac <GetUart>
 80077ca:	0006      	movs	r6, r0
 80077cc:	ab0a      	add	r3, sp, #40	; 0x28
 80077ce:	7818      	ldrb	r0, [r3, #0]
 80077d0:	f005 ffec 	bl	800d7ac <GetUart>
 80077d4:	0001      	movs	r1, r0
 80077d6:	2201      	movs	r2, #1
 80077d8:	0030      	movs	r0, r6
 80077da:	f7ff fc45 	bl	8007068 <StartDMAstream>
 80077de:	0002      	movs	r2, r0
 80077e0:	2817      	cmp	r0, #23
 80077e2:	d100      	bne.n	80077e6 <SetupDMAStreams+0x56>
 80077e4:	e0a2      	b.n	800792c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80077e6:	0160      	lsls	r0, r4, #5
 80077e8:	1b00      	subs	r0, r0, r4
 80077ea:	0080      	lsls	r0, r0, #2
 80077ec:	1900      	adds	r0, r0, r4
 80077ee:	00c0      	lsls	r0, r0, #3
 80077f0:	21fa      	movs	r1, #250	; 0xfa
 80077f2:	0089      	lsls	r1, r1, #2
 80077f4:	f7f8 fca2 	bl	800013c <__udivsi3>
 80077f8:	0004      	movs	r4, r0
 80077fa:	260f      	movs	r6, #15
 80077fc:	446e      	add	r6, sp
 80077fe:	4b4e      	ldr	r3, [pc, #312]	; (8007938 <SetupDMAStreams+0x1a8>)
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	0033      	movs	r3, r6
 8007804:	2200      	movs	r2, #0
 8007806:	0001      	movs	r1, r0
 8007808:	484c      	ldr	r0, [pc, #304]	; (800793c <SetupDMAStreams+0x1ac>)
 800780a:	f007 fda3 	bl	800f354 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800780e:	7833      	ldrb	r3, [r6, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a4a      	ldr	r2, [pc, #296]	; (8007940 <SetupDMAStreams+0x1b0>)
 8007816:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007818:	ab0a      	add	r3, sp, #40	; 0x28
 800781a:	7818      	ldrb	r0, [r3, #0]
 800781c:	f005 ffc6 	bl	800d7ac <GetUart>
 8007820:	0007      	movs	r7, r0
 8007822:	7830      	ldrb	r0, [r6, #0]
 8007824:	f005 ffc2 	bl	800d7ac <GetUart>
 8007828:	0001      	movs	r1, r0
 800782a:	2201      	movs	r2, #1
 800782c:	0038      	movs	r0, r7
 800782e:	f7ff fc1b 	bl	8007068 <StartDMAstream>
 8007832:	0002      	movs	r2, r0
 8007834:	2817      	cmp	r0, #23
 8007836:	d079      	beq.n	800792c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007838:	4b3f      	ldr	r3, [pc, #252]	; (8007938 <SetupDMAStreams+0x1a8>)
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	ab0a      	add	r3, sp, #40	; 0x28
 800783e:	2200      	movs	r2, #0
 8007840:	0021      	movs	r1, r4
 8007842:	483e      	ldr	r0, [pc, #248]	; (800793c <SetupDMAStreams+0x1ac>)
 8007844:	f007 fd86 	bl	800f354 <xTimerCreate>
 8007848:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 800784a:	ab0a      	add	r3, sp, #40	; 0x28
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	3b01      	subs	r3, #1
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a3b      	ldr	r2, [pc, #236]	; (8007940 <SetupDMAStreams+0x1b0>)
 8007854:	509d      	str	r5, [r3, r2]
 8007856:	e02d      	b.n	80078b4 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8007858:	4a3a      	ldr	r2, [pc, #232]	; (8007944 <SetupDMAStreams+0x1b4>)
 800785a:	2102      	movs	r1, #2
 800785c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800785e:	2267      	movs	r2, #103	; 0x67
 8007860:	e064      	b.n	800792c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007862:	0018      	movs	r0, r3
 8007864:	f005 ffa2 	bl	800d7ac <GetUart>
 8007868:	0006      	movs	r6, r0
 800786a:	ab0a      	add	r3, sp, #40	; 0x28
 800786c:	7818      	ldrb	r0, [r3, #0]
 800786e:	f005 ff9d 	bl	800d7ac <GetUart>
 8007872:	0001      	movs	r1, r0
 8007874:	2201      	movs	r2, #1
 8007876:	0030      	movs	r0, r6
 8007878:	f7ff fbf6 	bl	8007068 <StartDMAstream>
 800787c:	0002      	movs	r2, r0
 800787e:	2817      	cmp	r0, #23
 8007880:	d054      	beq.n	800792c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007882:	260f      	movs	r6, #15
 8007884:	446e      	add	r6, sp
 8007886:	0160      	lsls	r0, r4, #5
 8007888:	1b00      	subs	r0, r0, r4
 800788a:	0080      	lsls	r0, r0, #2
 800788c:	1900      	adds	r0, r0, r4
 800788e:	00c0      	lsls	r0, r0, #3
 8007890:	21fa      	movs	r1, #250	; 0xfa
 8007892:	0089      	lsls	r1, r1, #2
 8007894:	f7f8 fc52 	bl	800013c <__udivsi3>
 8007898:	0001      	movs	r1, r0
 800789a:	4b27      	ldr	r3, [pc, #156]	; (8007938 <SetupDMAStreams+0x1a8>)
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	0033      	movs	r3, r6
 80078a0:	2200      	movs	r2, #0
 80078a2:	4826      	ldr	r0, [pc, #152]	; (800793c <SetupDMAStreams+0x1ac>)
 80078a4:	f007 fd56 	bl	800f354 <xTimerCreate>
 80078a8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80078aa:	7833      	ldrb	r3, [r6, #0]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a23      	ldr	r2, [pc, #140]	; (8007940 <SetupDMAStreams+0x1b0>)
 80078b2:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 80078b4:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d038      	beq.n	800792c <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80078ba:	f007 f817 	bl	800e8ec <xTaskGetTickCount>
 80078be:	0002      	movs	r2, r0
 80078c0:	2301      	movs	r3, #1
 80078c2:	425b      	negs	r3, r3
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	2101      	movs	r1, #1
 80078ca:	0020      	movs	r0, r4
 80078cc:	f007 fd60 	bl	800f390 <xTimerGenericCommand>
	return BOS_OK;
 80078d0:	2200      	movs	r2, #0
 80078d2:	e02b      	b.n	800792c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80078d4:	0010      	movs	r0, r2
 80078d6:	f005 ff69 	bl	800d7ac <GetUart>
 80078da:	0006      	movs	r6, r0
 80078dc:	230f      	movs	r3, #15
 80078de:	446b      	add	r3, sp
 80078e0:	7818      	ldrb	r0, [r3, #0]
 80078e2:	f005 ff63 	bl	800d7ac <GetUart>
 80078e6:	0001      	movs	r1, r0
 80078e8:	2201      	movs	r2, #1
 80078ea:	0030      	movs	r0, r6
 80078ec:	f7ff fbbc 	bl	8007068 <StartDMAstream>
 80078f0:	0002      	movs	r2, r0
 80078f2:	2817      	cmp	r0, #23
 80078f4:	d01a      	beq.n	800792c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80078f6:	0160      	lsls	r0, r4, #5
 80078f8:	1b00      	subs	r0, r0, r4
 80078fa:	0080      	lsls	r0, r0, #2
 80078fc:	1900      	adds	r0, r0, r4
 80078fe:	00c0      	lsls	r0, r0, #3
 8007900:	21fa      	movs	r1, #250	; 0xfa
 8007902:	0089      	lsls	r1, r1, #2
 8007904:	f7f8 fc1a 	bl	800013c <__udivsi3>
 8007908:	0001      	movs	r1, r0
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <SetupDMAStreams+0x1a8>)
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	ab0a      	add	r3, sp, #40	; 0x28
 8007910:	2200      	movs	r2, #0
 8007912:	480a      	ldr	r0, [pc, #40]	; (800793c <SetupDMAStreams+0x1ac>)
 8007914:	f007 fd1e 	bl	800f354 <xTimerCreate>
 8007918:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800791a:	230f      	movs	r3, #15
 800791c:	446b      	add	r3, sp
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a06      	ldr	r2, [pc, #24]	; (8007940 <SetupDMAStreams+0x1b0>)
 8007926:	509d      	str	r5, [r3, r2]
 8007928:	e7c4      	b.n	80078b4 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 800792a:	2267      	movs	r2, #103	; 0x67
}
 800792c:	0010      	movs	r0, r2
 800792e:	b005      	add	sp, #20
 8007930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007932:	2267      	movs	r2, #103	; 0x67
 8007934:	e7fa      	b.n	800792c <SetupDMAStreams+0x19c>
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	08007779 	.word	0x08007779
 800793c:	08019138 	.word	0x08019138
 8007940:	2000103c 	.word	0x2000103c
 8007944:	20000bd0 	.word	0x20000bd0

08007948 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007948:	b510      	push	{r4, lr}
	switch(port){
 800794a:	2802      	cmp	r0, #2
 800794c:	d00c      	beq.n	8007968 <NotifyMessagingTask+0x20>
 800794e:	2803      	cmp	r0, #3
 8007950:	d012      	beq.n	8007978 <NotifyMessagingTask+0x30>
 8007952:	2801      	cmp	r0, #1
 8007954:	d000      	beq.n	8007958 <NotifyMessagingTask+0x10>
			break;
#endif
		default:
			break;
	}
}
 8007956:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <NotifyMessagingTask+0x40>)
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	2202      	movs	r2, #2
 8007960:	2100      	movs	r1, #0
 8007962:	f007 fc35 	bl	800f1d0 <xTaskGenericNotify>
			break;
 8007966:	e7f6      	b.n	8007956 <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <NotifyMessagingTask+0x44>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	2202      	movs	r2, #2
 8007970:	2100      	movs	r1, #0
 8007972:	f007 fc2d 	bl	800f1d0 <xTaskGenericNotify>
			break;
 8007976:	e7ee      	b.n	8007956 <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <NotifyMessagingTask+0x48>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	2202      	movs	r2, #2
 8007980:	2100      	movs	r1, #0
 8007982:	f007 fc25 	bl	800f1d0 <xTaskGenericNotify>
}
 8007986:	e7e6      	b.n	8007956 <NotifyMessagingTask+0xe>
 8007988:	2000104c 	.word	0x2000104c
 800798c:	20001050 	.word	0x20001050
 8007990:	20001054 	.word	0x20001054

08007994 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	46de      	mov	lr, fp
 8007998:	4657      	mov	r7, sl
 800799a:	464e      	mov	r6, r9
 800799c:	4645      	mov	r5, r8
 800799e:	b5e0      	push	{r5, r6, r7, lr}
 80079a0:	b087      	sub	sp, #28
 80079a2:	0005      	movs	r5, r0
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	0014      	movs	r4, r2
 80079a8:	4699      	mov	r9, r3
 80079aa:	ab10      	add	r3, sp, #64	; 0x40
 80079ac:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80079ae:	0003      	movs	r3, r0
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d100      	bne.n	80079b6 <SendMessageFromPort+0x22>
 80079b4:	e1e8      	b.n	8007d88 <SendMessageFromPort+0x3f4>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d14d      	bne.n	8007a56 <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80079ba:	1c93      	adds	r3, r2, #2
 80079bc:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80079be:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d900      	bls.n	80079c6 <SendMessageFromPort+0x32>
 80079c4:	e162      	b.n	8007c8c <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80079c6:	2000      	movs	r0, #0
 80079c8:	f006 fef6 	bl	800e7b8 <uxTaskPriorityGet>
 80079cc:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80079ce:	2105      	movs	r1, #5
 80079d0:	2000      	movs	r0, #0
 80079d2:	f006 ff01 	bl	800e7d8 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80079d6:	4bc4      	ldr	r3, [pc, #784]	; (8007ce8 <SendMessageFromPort+0x354>)
 80079d8:	2248      	movs	r2, #72	; 0x48
 80079da:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80079dc:	3212      	adds	r2, #18
 80079de:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d000      	beq.n	80079e8 <SendMessageFromPort+0x54>
 80079e6:	e1e8      	b.n	8007dba <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80079e8:	1e73      	subs	r3, r6, #1
 80079ea:	4ac0      	ldr	r2, [pc, #768]	; (8007cec <SendMessageFromPort+0x358>)
 80079ec:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80079ee:	4ec0      	ldr	r6, [pc, #768]	; (8007cf0 <SendMessageFromPort+0x35c>)
 80079f0:	00d9      	lsls	r1, r3, #3
 80079f2:	1ac9      	subs	r1, r1, r3
 80079f4:	00c9      	lsls	r1, r1, #3
 80079f6:	4bbf      	ldr	r3, [pc, #764]	; (8007cf4 <SendMessageFromPort+0x360>)
 80079f8:	18c9      	adds	r1, r1, r3
 80079fa:	003a      	movs	r2, r7
 80079fc:	0030      	movs	r0, r6
 80079fe:	f00b f9c0 	bl	8012d82 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007a02:	3e03      	subs	r6, #3
 8007a04:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007a06:	1cfb      	adds	r3, r7, #3
 8007a08:	4698      	mov	r8, r3
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	0031      	movs	r1, r6
 8007a0e:	48ba      	ldr	r0, [pc, #744]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007a10:	f00b f9b7 	bl	8012d82 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007a14:	b2bf      	uxth	r7, r7
 8007a16:	1cf9      	adds	r1, r7, #3
 8007a18:	48b7      	ldr	r0, [pc, #732]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007a1a:	f003 fd13 	bl	800b444 <CalculateCRC8>
 8007a1e:	4643      	mov	r3, r8
 8007a20:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007a22:	2238      	movs	r2, #56	; 0x38
 8007a24:	2100      	movs	r1, #0
 8007a26:	48b4      	ldr	r0, [pc, #720]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007a28:	f00b f9b4 	bl	8012d94 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007a2c:	3402      	adds	r4, #2
 8007a2e:	b2e4      	uxtb	r4, r4
 8007a30:	2c01      	cmp	r4, #1
 8007a32:	d800      	bhi.n	8007a36 <SendMessageFromPort+0xa2>
 8007a34:	e14e      	b.n	8007cd4 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007a36:	464b      	mov	r3, r9
 8007a38:	3b2c      	subs	r3, #44	; 0x2c
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d800      	bhi.n	8007a42 <SendMessageFromPort+0xae>
 8007a40:	e110      	b.n	8007c64 <SendMessageFromPort+0x2d0>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007a42:	4bae      	ldr	r3, [pc, #696]	; (8007cfc <SendMessageFromPort+0x368>)
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2600      	movs	r6, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d100      	bne.n	8007a4e <SendMessageFromPort+0xba>
 8007a4c:	e111      	b.n	8007c72 <SendMessageFromPort+0x2de>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007a4e:	3704      	adds	r7, #4
 8007a50:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 8007a52:	4cab      	ldr	r4, [pc, #684]	; (8007d00 <SendMessageFromPort+0x36c>)
 8007a54:	e12d      	b.n	8007cb2 <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <SendMessageFromPort+0xce>
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	d100      	bne.n	8007a62 <SendMessageFromPort+0xce>
 8007a60:	e194      	b.n	8007d8c <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 8007a62:	2000      	movs	r0, #0
 8007a64:	f006 fea8 	bl	800e7b8 <uxTaskPriorityGet>
 8007a68:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007a6a:	2105      	movs	r1, #5
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f006 feb3 	bl	800e7d8 <vTaskPrioritySet>
	message[0] ='H';
 8007a72:	4b9d      	ldr	r3, [pc, #628]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007a74:	2248      	movs	r2, #72	; 0x48
 8007a76:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007a78:	3212      	adds	r2, #18
 8007a7a:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0b2      	beq.n	80079e8 <SendMessageFromPort+0x54>
		if(src == 0)
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d102      	bne.n	8007a8e <SendMessageFromPort+0xfa>
			src =myID;
 8007a88:	4b9e      	ldr	r3, [pc, #632]	; (8007d04 <SendMessageFromPort+0x370>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8007a8e:	4a96      	ldr	r2, [pc, #600]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007a94:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007a9a:	4998      	ldr	r1, [pc, #608]	; (8007cfc <SendMessageFromPort+0x368>)
 8007a9c:	790b      	ldrb	r3, [r1, #4]
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	7848      	ldrb	r0, [r1, #1]
 8007aa2:	0080      	lsls	r0, r0, #2
 8007aa4:	4303      	orrs	r3, r0
 8007aa6:	7809      	ldrb	r1, [r1, #0]
 8007aa8:	430b      	orrs	r3, r1
		if(code > 0xFF)
 8007aaa:	21ff      	movs	r1, #255	; 0xff
 8007aac:	4549      	cmp	r1, r9
 8007aae:	4189      	sbcs	r1, r1
 8007ab0:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007ab2:	0049      	lsls	r1, r1, #1
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007aba:	4649      	mov	r1, r9
 8007abc:	7191      	strb	r1, [r2, #6]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4693      	mov	fp, r2
		if(extendCode == true){
 8007ac2:	29ff      	cmp	r1, #255	; 0xff
 8007ac4:	d904      	bls.n	8007ad0 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007ac6:	0a0a      	lsrs	r2, r1, #8
 8007ac8:	4987      	ldr	r1, [pc, #540]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007aca:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007acc:	2201      	movs	r2, #1
 8007ace:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007ad0:	2e2e      	cmp	r6, #46	; 0x2e
 8007ad2:	d932      	bls.n	8007b3a <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	4a83      	ldr	r2, [pc, #524]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007adc:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007ade:	4b8a      	ldr	r3, [pc, #552]	; (8007d08 <SendMessageFromPort+0x374>)
 8007ae0:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007ae6:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ae8:	465b      	mov	r3, fp
 8007aea:	1ddf      	adds	r7, r3, #7
 8007aec:	003b      	movs	r3, r7
 8007aee:	4694      	mov	ip, r2
 8007af0:	4463      	add	r3, ip
 8007af2:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 8007af4:	4b84      	ldr	r3, [pc, #528]	; (8007d08 <SendMessageFromPort+0x374>)
 8007af6:	881f      	ldrh	r7, [r3, #0]
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	d02d      	beq.n	8007b58 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007afc:	0031      	movs	r1, r6
 8007afe:	0038      	movs	r0, r7
 8007b00:	f7f8 fb1c 	bl	800013c <__udivsi3>
 8007b04:	b280      	uxth	r0, r0
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d141      	bne.n	8007b8e <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007b0a:	4b77      	ldr	r3, [pc, #476]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007b0c:	795a      	ldrb	r2, [r3, #5]
 8007b0e:	237f      	movs	r3, #127	; 0x7f
 8007b10:	4013      	ands	r3, r2
 8007b12:	4a75      	ldr	r2, [pc, #468]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007b14:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007b16:	4e7d      	ldr	r6, [pc, #500]	; (8007d0c <SendMessageFromPort+0x378>)
 8007b18:	8831      	ldrh	r1, [r6, #0]
 8007b1a:	4b7d      	ldr	r3, [pc, #500]	; (8007d10 <SendMessageFromPort+0x37c>)
 8007b1c:	18c9      	adds	r1, r1, r3
 8007b1e:	003a      	movs	r2, r7
 8007b20:	9805      	ldr	r0, [sp, #20]
 8007b22:	f00b f92e 	bl	8012d82 <memcpy>
					ptrShift =0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8007b2a:	4a77      	ldr	r2, [pc, #476]	; (8007d08 <SendMessageFromPort+0x374>)
 8007b2c:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	445b      	add	r3, fp
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8007b36:	003e      	movs	r6, r7
 8007b38:	e7dc      	b.n	8007af4 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	3307      	adds	r3, #7
 8007b3e:	486a      	ldr	r0, [pc, #424]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007b40:	1818      	adds	r0, r3, r0
 8007b42:	4b72      	ldr	r3, [pc, #456]	; (8007d0c <SendMessageFromPort+0x378>)
 8007b44:	8819      	ldrh	r1, [r3, #0]
 8007b46:	4b72      	ldr	r3, [pc, #456]	; (8007d10 <SendMessageFromPort+0x37c>)
 8007b48:	18c9      	adds	r1, r1, r3
 8007b4a:	0032      	movs	r2, r6
 8007b4c:	f00b f919 	bl	8012d82 <memcpy>
			length =numberOfParams + shift + 4;
 8007b50:	1d31      	adds	r1, r6, #4
 8007b52:	4459      	add	r1, fp
 8007b54:	b2cb      	uxtb	r3, r1
 8007b56:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8007b58:	4b6e      	ldr	r3, [pc, #440]	; (8007d14 <SendMessageFromPort+0x380>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d058      	beq.n	8007c12 <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8007b60:	4b6d      	ldr	r3, [pc, #436]	; (8007d18 <SendMessageFromPort+0x384>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2bff      	cmp	r3, #255	; 0xff
 8007b66:	d100      	bne.n	8007b6a <SendMessageFromPort+0x1d6>
 8007b68:	e114      	b.n	8007d94 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007b6a:	4a6c      	ldr	r2, [pc, #432]	; (8007d1c <SendMessageFromPort+0x388>)
 8007b6c:	7817      	ldrb	r7, [r2, #0]
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	d076      	beq.n	8007c60 <SendMessageFromPort+0x2cc>
 8007b72:	2201      	movs	r2, #1
 8007b74:	409a      	lsls	r2, r3
 8007b76:	4690      	mov	r8, r2
 8007b78:	4869      	ldr	r0, [pc, #420]	; (8007d20 <SendMessageFromPort+0x38c>)
 8007b7a:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007b7c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007b7e:	495a      	ldr	r1, [pc, #360]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007b80:	468c      	mov	ip, r1
 8007b82:	44b4      	add	ip, r6
 8007b84:	9505      	str	r5, [sp, #20]
 8007b86:	4645      	mov	r5, r8
 8007b88:	46a0      	mov	r8, r4
 8007b8a:	465c      	mov	r4, fp
 8007b8c:	e017      	b.n	8007bbe <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007b8e:	9600      	str	r6, [sp, #0]
 8007b90:	464b      	mov	r3, r9
 8007b92:	0022      	movs	r2, r4
 8007b94:	9903      	ldr	r1, [sp, #12]
 8007b96:	0028      	movs	r0, r5
 8007b98:	f7ff fefc 	bl	8007994 <SendMessageFromPort>
					osDelay(10);
 8007b9c:	200a      	movs	r0, #10
 8007b9e:	f005 ffa0 	bl	800dae2 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007ba2:	4a59      	ldr	r2, [pc, #356]	; (8007d08 <SendMessageFromPort+0x374>)
 8007ba4:	8813      	ldrh	r3, [r2, #0]
 8007ba6:	1b9b      	subs	r3, r3, r6
 8007ba8:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8007baa:	4a58      	ldr	r2, [pc, #352]	; (8007d0c <SendMessageFromPort+0x378>)
 8007bac:	8813      	ldrh	r3, [r2, #0]
 8007bae:	18f3      	adds	r3, r6, r3
 8007bb0:	8013      	strh	r3, [r2, #0]
 8007bb2:	e79f      	b.n	8007af4 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3002      	adds	r0, #2
 8007bba:	42bb      	cmp	r3, r7
 8007bbc:	d80e      	bhi.n	8007bdc <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 8007bbe:	8801      	ldrh	r1, [r0, #0]
 8007bc0:	420d      	tst	r5, r1
 8007bc2:	d0f7      	beq.n	8007bb4 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007bc8:	18b1      	adds	r1, r6, r2
 8007bca:	3101      	adds	r1, #1
 8007bcc:	292d      	cmp	r1, #45	; 0x2d
 8007bce:	dd00      	ble.n	8007bd2 <SendMessageFromPort+0x23e>
 8007bd0:	e0de      	b.n	8007d90 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007bd2:	4661      	mov	r1, ip
 8007bd4:	1889      	adds	r1, r1, r2
 8007bd6:	1909      	adds	r1, r1, r4
 8007bd8:	718b      	strb	r3, [r1, #6]
 8007bda:	e7eb      	b.n	8007bb4 <SendMessageFromPort+0x220>
 8007bdc:	46a3      	mov	fp, r4
 8007bde:	9d05      	ldr	r5, [sp, #20]
 8007be0:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007be2:	465b      	mov	r3, fp
 8007be4:	3307      	adds	r3, #7
 8007be6:	199b      	adds	r3, r3, r6
 8007be8:	189b      	adds	r3, r3, r2
 8007bea:	493f      	ldr	r1, [pc, #252]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007bec:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007bee:	18b1      	adds	r1, r6, r2
 8007bf0:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007bf2:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007bf4:	292d      	cmp	r1, #45	; 0x2d
 8007bf6:	dc49      	bgt.n	8007c8c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007bf8:	484a      	ldr	r0, [pc, #296]	; (8007d24 <SendMessageFromPort+0x390>)
 8007bfa:	7801      	ldrb	r1, [r0, #0]
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	b2c9      	uxtb	r1, r1
 8007c00:	7001      	strb	r1, [r0, #0]
 8007c02:	4839      	ldr	r0, [pc, #228]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007c04:	18c3      	adds	r3, r0, r3
 8007c06:	7059      	strb	r1, [r3, #1]
 8007c08:	4651      	mov	r1, sl
 8007c0a:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007c0c:	188a      	adds	r2, r1, r2
 8007c0e:	b2d3      	uxtb	r3, r2
 8007c10:	469a      	mov	sl, r3
	message[2] =length;
 8007c12:	4b35      	ldr	r3, [pc, #212]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007c14:	4698      	mov	r8, r3
 8007c16:	4652      	mov	r2, sl
 8007c18:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007c1a:	1cd6      	adds	r6, r2, #3
 8007c1c:	0032      	movs	r2, r6
 8007c1e:	4641      	mov	r1, r8
 8007c20:	4835      	ldr	r0, [pc, #212]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007c22:	f00b f8ae 	bl	8012d82 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007c26:	4653      	mov	r3, sl
 8007c28:	b29f      	uxth	r7, r3
 8007c2a:	0031      	movs	r1, r6
 8007c2c:	4832      	ldr	r0, [pc, #200]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007c2e:	f003 fc09 	bl	800b444 <CalculateCRC8>
 8007c32:	4643      	mov	r3, r8
 8007c34:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007c36:	2238      	movs	r2, #56	; 0x38
 8007c38:	2100      	movs	r1, #0
 8007c3a:	482f      	ldr	r0, [pc, #188]	; (8007cf8 <SendMessageFromPort+0x364>)
 8007c3c:	f00b f8aa 	bl	8012d94 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007c40:	3402      	adds	r4, #2
 8007c42:	b2e4      	uxtb	r4, r4
 8007c44:	2c01      	cmp	r4, #1
 8007c46:	d900      	bls.n	8007c4a <SendMessageFromPort+0x2b6>
 8007c48:	e6f5      	b.n	8007a36 <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8007c4a:	9803      	ldr	r0, [sp, #12]
 8007c4c:	f7fb fdc4 	bl	80037d8 <FindBroadcastRoutes>
 8007c50:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007c52:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007c54:	4b34      	ldr	r3, [pc, #208]	; (8007d28 <SendMessageFromPort+0x394>)
 8007c56:	4699      	mov	r9, r3
 8007c58:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <SendMessageFromPort+0x370>)
 8007c5a:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007c5c:	9503      	str	r5, [sp, #12]
 8007c5e:	e074      	b.n	8007d4a <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8007c60:	2200      	movs	r2, #0
 8007c62:	e7be      	b.n	8007be2 <SendMessageFromPort+0x24e>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007c64:	1d3a      	adds	r2, r7, #4
 8007c66:	b292      	uxth	r2, r2
 8007c68:	2332      	movs	r3, #50	; 0x32
 8007c6a:	491f      	ldr	r1, [pc, #124]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007c6c:	0028      	movs	r0, r5
 8007c6e:	f7fa ff61 	bl	8002b34 <Send_BOS_Message>
		ACK_FLAG =false; rejected_FLAG=false;
 8007c72:	2300      	movs	r3, #0
 8007c74:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <SendMessageFromPort+0x36c>)
 8007c76:	7013      	strb	r3, [r2, #0]
 8007c78:	4a2c      	ldr	r2, [pc, #176]	; (8007d2c <SendMessageFromPort+0x398>)
 8007c7a:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8007c7c:	9904      	ldr	r1, [sp, #16]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f006 fdaa 	bl	800e7d8 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8007c84:	4b2a      	ldr	r3, [pc, #168]	; (8007d30 <SendMessageFromPort+0x39c>)
 8007c86:	2202      	movs	r2, #2
 8007c88:	701a      	strb	r2, [r3, #0]
	
	return result;
 8007c8a:	2000      	movs	r0, #0
}
 8007c8c:	b007      	add	sp, #28
 8007c8e:	bc3c      	pop	{r2, r3, r4, r5}
 8007c90:	4690      	mov	r8, r2
 8007c92:	4699      	mov	r9, r3
 8007c94:	46a2      	mov	sl, r4
 8007c96:	46ab      	mov	fp, r5
 8007c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007c9a:	2332      	movs	r3, #50	; 0x32
 8007c9c:	003a      	movs	r2, r7
 8007c9e:	4912      	ldr	r1, [pc, #72]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	f7fa ff47 	bl	8002b34 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	b2f6      	uxtb	r6, r6
 8007caa:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <SendMessageFromPort+0x368>)
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	42b3      	cmp	r3, r6
 8007cb0:	d9df      	bls.n	8007c72 <SendMessageFromPort+0x2de>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007cb2:	2332      	movs	r3, #50	; 0x32
 8007cb4:	003a      	movs	r2, r7
 8007cb6:	490c      	ldr	r1, [pc, #48]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007cb8:	0028      	movs	r0, r5
 8007cba:	f7fa ff3b 	bl	8002b34 <Send_BOS_Message>
				osDelay(200);
 8007cbe:	20c8      	movs	r0, #200	; 0xc8
 8007cc0:	f005 ff0f 	bl	800dae2 <osDelay>
				if(ACK_FLAG == true)
 8007cc4:	7823      	ldrb	r3, [r4, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1d3      	bne.n	8007c72 <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 8007cca:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <SendMessageFromPort+0x398>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0e9      	beq.n	8007ca6 <SendMessageFromPort+0x312>
 8007cd2:	e7e2      	b.n	8007c9a <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1b7      	bne.n	8007c4a <SendMessageFromPort+0x2b6>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1b4      	bne.n	8007c4a <SendMessageFromPort+0x2b6>
			src =message[4];
 8007ce0:	4b01      	ldr	r3, [pc, #4]	; (8007ce8 <SendMessageFromPort+0x354>)
 8007ce2:	791b      	ldrb	r3, [r3, #4]
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	e7b0      	b.n	8007c4a <SendMessageFromPort+0x2b6>
 8007ce8:	200009ec 	.word	0x200009ec
 8007cec:	20000a24 	.word	0x20000a24
 8007cf0:	200009ef 	.word	0x200009ef
 8007cf4:	200008a4 	.word	0x200008a4
 8007cf8:	20000fec 	.word	0x20000fec
 8007cfc:	20005a5c 	.word	0x20005a5c
 8007d00:	200002b4 	.word	0x200002b4
 8007d04:	20000b66 	.word	0x20000b66
 8007d08:	2000114a 	.word	0x2000114a
 8007d0c:	20001148 	.word	0x20001148
 8007d10:	20000a28 	.word	0x20000a28
 8007d14:	200002b6 	.word	0x200002b6
 8007d18:	20000031 	.word	0x20000031
 8007d1c:	20000030 	.word	0x20000030
 8007d20:	200009b4 	.word	0x200009b4
 8007d24:	20000850 	.word	0x20000850
 8007d28:	20000854 	.word	0x20000854
 8007d2c:	20000bdc 	.word	0x20000bdc
 8007d30:	20000be8 	.word	0x20000be8
			rejected_FLAG=false;
 8007d34:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <SendMessageFromPort+0x430>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8007d3a:	200a      	movs	r0, #10
 8007d3c:	f005 fbf8 	bl	800d530 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007d40:	3401      	adds	r4, #1
 8007d42:	b2e4      	uxtb	r4, r4
 8007d44:	3601      	adds	r6, #1
 8007d46:	2c04      	cmp	r4, #4
 8007d48:	d098      	beq.n	8007c7c <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007d4a:	4643      	mov	r3, r8
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	464a      	mov	r2, r9
 8007d54:	5a9b      	ldrh	r3, [r3, r2]
 8007d56:	4133      	asrs	r3, r6
 8007d58:	07db      	lsls	r3, r3, #31
 8007d5a:	d5eb      	bpl.n	8007d34 <SendMessageFromPort+0x3a0>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007d5c:	1d3d      	adds	r5, r7, #4
 8007d5e:	b2ad      	uxth	r5, r5
 8007d60:	2332      	movs	r3, #50	; 0x32
 8007d62:	002a      	movs	r2, r5
 8007d64:	4918      	ldr	r1, [pc, #96]	; (8007dc8 <SendMessageFromPort+0x434>)
 8007d66:	0020      	movs	r0, r4
 8007d68:	f7fa fee4 	bl	8002b34 <Send_BOS_Message>
				osDelay(200);
 8007d6c:	20c8      	movs	r0, #200	; 0xc8
 8007d6e:	f005 feb8 	bl	800dae2 <osDelay>
				if(rejected_FLAG == true)
 8007d72:	4b14      	ldr	r3, [pc, #80]	; (8007dc4 <SendMessageFromPort+0x430>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0dc      	beq.n	8007d34 <SendMessageFromPort+0x3a0>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007d7a:	2332      	movs	r3, #50	; 0x32
 8007d7c:	002a      	movs	r2, r5
 8007d7e:	4912      	ldr	r1, [pc, #72]	; (8007dc8 <SendMessageFromPort+0x434>)
 8007d80:	9803      	ldr	r0, [sp, #12]
 8007d82:	f7fa fed7 	bl	8002b34 <Send_BOS_Message>
 8007d86:	e7d5      	b.n	8007d34 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8007d88:	2067      	movs	r0, #103	; 0x67
 8007d8a:	e77f      	b.n	8007c8c <SendMessageFromPort+0x2f8>
 8007d8c:	2067      	movs	r0, #103	; 0x67
 8007d8e:	e77d      	b.n	8007c8c <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007d90:	2069      	movs	r0, #105	; 0x69
 8007d92:	e77b      	b.n	8007c8c <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007d94:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007d96:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007d98:	2b2d      	cmp	r3, #45	; 0x2d
 8007d9a:	dd00      	ble.n	8007d9e <SendMessageFromPort+0x40a>
 8007d9c:	e776      	b.n	8007c8c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 8007d9e:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <SendMessageFromPort+0x438>)
 8007da0:	7813      	ldrb	r3, [r2, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	7013      	strb	r3, [r2, #0]
 8007da8:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <SendMessageFromPort+0x434>)
 8007daa:	1992      	adds	r2, r2, r6
 8007dac:	445a      	add	r2, fp
 8007dae:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8007db0:	4651      	mov	r1, sl
 8007db2:	3101      	adds	r1, #1
 8007db4:	b2cb      	uxtb	r3, r1
 8007db6:	469a      	mov	sl, r3
 8007db8:	e72b      	b.n	8007c12 <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007dba:	464b      	mov	r3, r9
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d100      	bne.n	8007dc2 <SendMessageFromPort+0x42e>
 8007dc0:	e612      	b.n	80079e8 <SendMessageFromPort+0x54>
 8007dc2:	e664      	b.n	8007a8e <SendMessageFromPort+0xfa>
 8007dc4:	20000bdc 	.word	0x20000bdc
 8007dc8:	200009ec 	.word	0x200009ec
 8007dcc:	20000850 	.word	0x20000850

08007dd0 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8007dd0:	b530      	push	{r4, r5, lr}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <ForwardReceivedMessage+0x34>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8007ddc:	1e42      	subs	r2, r0, #1
 8007dde:	00d3      	lsls	r3, r2, #3
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <ForwardReceivedMessage+0x38>)
 8007de6:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <ForwardReceivedMessage+0x3c>)
 8007dea:	7818      	ldrb	r0, [r3, #0]
 8007dec:	0021      	movs	r1, r4
 8007dee:	f7fb fdc1 	bl	8003974 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8007df2:	9500      	str	r5, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	0022      	movs	r2, r4
 8007df8:	2100      	movs	r1, #0
 8007dfa:	f7ff fdcb 	bl	8007994 <SendMessageFromPort>
}
 8007dfe:	2000      	movs	r0, #0
 8007e00:	b003      	add	sp, #12
 8007e02:	bd30      	pop	{r4, r5, pc}
 8007e04:	200002b6 	.word	0x200002b6
 8007e08:	200008a4 	.word	0x200008a4
 8007e0c:	20000b66 	.word	0x20000b66

08007e10 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8007e10:	b500      	push	{lr}
 8007e12:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <BroadcastReceivedMessage+0x38>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <BroadcastReceivedMessage+0x3c>)
 8007e1c:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8007e1e:	28ff      	cmp	r0, #255	; 0xff
 8007e20:	d009      	beq.n	8007e36 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8007e22:	9100      	str	r1, [sp, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	22fe      	movs	r2, #254	; 0xfe
 8007e28:	2100      	movs	r1, #0
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7ff fdb2 	bl	8007994 <SendMessageFromPort>
}
 8007e30:	2000      	movs	r0, #0
 8007e32:	b003      	add	sp, #12
 8007e34:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8007e36:	9100      	str	r1, [sp, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	32ff      	adds	r2, #255	; 0xff
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f7ff fda8 	bl	8007994 <SendMessageFromPort>
 8007e44:	e7f4      	b.n	8007e30 <BroadcastReceivedMessage+0x20>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	200002b6 	.word	0x200002b6
 8007e4c:	20000031 	.word	0x20000031

08007e50 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8007e50:	b530      	push	{r4, r5, lr}
 8007e52:	b083      	sub	sp, #12
 8007e54:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <BroadcastMessage+0x44>)
 8007e58:	2501      	movs	r5, #1
 8007e5a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <BroadcastMessage+0x48>)
 8007e5e:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8007e60:	29ff      	cmp	r1, #255	; 0xff
 8007e62:	d00e      	beq.n	8007e82 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8007e64:	9400      	str	r4, [sp, #0]
 8007e66:	0013      	movs	r3, r2
 8007e68:	22fe      	movs	r2, #254	; 0xfe
 8007e6a:	0001      	movs	r1, r0
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7ff fd91 	bl	8007994 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8007e72:	0022      	movs	r2, r4
 8007e74:	2100      	movs	r1, #0
 8007e76:	4809      	ldr	r0, [pc, #36]	; (8007e9c <BroadcastMessage+0x4c>)
 8007e78:	f00a ff8c 	bl	8012d94 <memset>
}
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	b003      	add	sp, #12
 8007e80:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8007e82:	9400      	str	r4, [sp, #0]
 8007e84:	0013      	movs	r3, r2
 8007e86:	22ff      	movs	r2, #255	; 0xff
 8007e88:	0001      	movs	r1, r0
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7ff fd82 	bl	8007994 <SendMessageFromPort>
 8007e90:	e7ef      	b.n	8007e72 <BroadcastMessage+0x22>
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	200002b6 	.word	0x200002b6
 8007e98:	20000031 	.word	0x20000031
 8007e9c:	20000a28 	.word	0x20000a28

08007ea0 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	0004      	movs	r4, r0
 8007ea6:	000e      	movs	r6, r1
 8007ea8:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8007eaa:	28ff      	cmp	r0, #255	; 0xff
 8007eac:	d012      	beq.n	8007ed4 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8007eae:	4f0d      	ldr	r7, [pc, #52]	; (8007ee4 <SendMessageToModule+0x44>)
 8007eb0:	7838      	ldrb	r0, [r7, #0]
 8007eb2:	0021      	movs	r1, r4
 8007eb4:	f7fb fd5e 	bl	8003974 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8007eb8:	7839      	ldrb	r1, [r7, #0]
 8007eba:	9500      	str	r5, [sp, #0]
 8007ebc:	0033      	movs	r3, r6
 8007ebe:	0022      	movs	r2, r4
 8007ec0:	f7ff fd68 	bl	8007994 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8007ec4:	002a      	movs	r2, r5
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4807      	ldr	r0, [pc, #28]	; (8007ee8 <SendMessageToModule+0x48>)
 8007eca:	f00a ff63 	bl	8012d94 <memset>
}
 8007ece:	2000      	movs	r0, #0
 8007ed0:	b003      	add	sp, #12
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <SendMessageToModule+0x44>)
 8007ed6:	7818      	ldrb	r0, [r3, #0]
 8007ed8:	0013      	movs	r3, r2
 8007eda:	000a      	movs	r2, r1
 8007edc:	21ff      	movs	r1, #255	; 0xff
 8007ede:	f7ff ffb7 	bl	8007e50 <BroadcastMessage>
 8007ee2:	e7f4      	b.n	8007ece <SendMessageToModule+0x2e>
 8007ee4:	20000b66 	.word	0x20000b66
 8007ee8:	20000a28 	.word	0x20000a28

08007eec <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8007eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eee:	46de      	mov	lr, fp
 8007ef0:	4657      	mov	r7, sl
 8007ef2:	464e      	mov	r6, r9
 8007ef4:	4645      	mov	r5, r8
 8007ef6:	b5e0      	push	{r5, r6, r7, lr}
 8007ef8:	b091      	sub	sp, #68	; 0x44
 8007efa:	900f      	str	r0, [sp, #60]	; 0x3c
 8007efc:	000c      	movs	r4, r1
 8007efe:	9106      	str	r1, [sp, #24]
 8007f00:	0015      	movs	r5, r2
 8007f02:	920e      	str	r2, [sp, #56]	; 0x38
 8007f04:	001e      	movs	r6, r3
 8007f06:	ab1a      	add	r3, sp, #104	; 0x68
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4698      	mov	r8, r3
 8007f0c:	ab1d      	add	r3, sp, #116	; 0x74
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8007f12:	4b5a      	ldr	r3, [pc, #360]	; (800807c <StartScastDMAStream+0x190>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	428b      	cmp	r3, r1
 8007f18:	d11d      	bne.n	8007f56 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007f1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8007f20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f22:	0c1b      	lsrs	r3, r3, #16
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8007f28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8007f30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007f32:	0e1b      	lsrs	r3, r3, #24
 8007f34:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8007f36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8007f3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	469b      	mov	fp, r3
 8007f46:	4d4e      	ldr	r5, [pc, #312]	; (8008080 <StartScastDMAStream+0x194>)
 8007f48:	231a      	movs	r3, #26
 8007f4a:	4699      	mov	r9, r3
 8007f4c:	44a9      	add	r9, r5
				temp2 =dstP;
 8007f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f50:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007f52:	4c4c      	ldr	r4, [pc, #304]	; (8008084 <StartScastDMAStream+0x198>)
 8007f54:	e05c      	b.n	8008010 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007f56:	4b4b      	ldr	r3, [pc, #300]	; (8008084 <StartScastDMAStream+0x198>)
 8007f58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f5a:	0e12      	lsrs	r2, r2, #24
 8007f5c:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8007f5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f60:	0c12      	lsrs	r2, r2, #16
 8007f62:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8007f64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f66:	0a12      	lsrs	r2, r2, #8
 8007f68:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8007f6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f6c:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8007f6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f70:	0e12      	lsrs	r2, r2, #24
 8007f72:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8007f74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f76:	0c12      	lsrs	r2, r2, #16
 8007f78:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8007f7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f7c:	0a12      	lsrs	r2, r2, #8
 8007f7e:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8007f80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f82:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8007f84:	4642      	mov	r2, r8
 8007f86:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8007f88:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8007f8a:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8007f8c:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8007f8e:	4652      	mov	r2, sl
 8007f90:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8007f92:	220d      	movs	r2, #13
 8007f94:	211c      	movs	r1, #28
 8007f96:	0020      	movs	r0, r4
 8007f98:	f7ff ff82 	bl	8007ea0 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	b011      	add	sp, #68	; 0x44
 8007fa0:	bc3c      	pop	{r2, r3, r4, r5}
 8007fa2:	4690      	mov	r8, r2
 8007fa4:	4699      	mov	r9, r3
 8007fa6:	46a2      	mov	sl, r4
 8007fa8:	46ab      	mov	fp, r5
 8007faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8007fac:	9906      	ldr	r1, [sp, #24]
 8007fae:	f7fb fce1 	bl	8003974 <FindRoute>
 8007fb2:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8007fb4:	0031      	movs	r1, r6
 8007fb6:	9806      	ldr	r0, [sp, #24]
 8007fb8:	f7fb fcdc 	bl	8003974 <FindRoute>
			if(route[i] == dstM){
 8007fbc:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8007fc0:	42b0      	cmp	r0, r6
 8007fc2:	d134      	bne.n	800802e <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007fc4:	9a08      	ldr	r2, [sp, #32]
 8007fc6:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8007fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fca:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8007fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fce:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8007fd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007fd2:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8007fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fd6:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8007fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fda:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8007fdc:	465a      	mov	r2, fp
 8007fde:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8007fe0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fe2:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8007fe8:	9a07      	ldr	r2, [sp, #28]
 8007fea:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8007fec:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8007fee:	4653      	mov	r3, sl
 8007ff0:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8007ff2:	0031      	movs	r1, r6
 8007ff4:	9806      	ldr	r0, [sp, #24]
 8007ff6:	f7fb fcbd 	bl	8003974 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8007ffa:	7878      	ldrb	r0, [r7, #1]
 8007ffc:	220c      	movs	r2, #12
 8007ffe:	211b      	movs	r1, #27
 8008000:	f7ff ff4e 	bl	8007ea0 <SendMessageToModule>
			osDelay(10);
 8008004:	200a      	movs	r0, #10
 8008006:	f005 fd6c 	bl	800dae2 <osDelay>
 800800a:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 800800c:	454d      	cmp	r5, r9
 800800e:	d013      	beq.n	8008038 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8008010:	0031      	movs	r1, r6
 8008012:	9806      	ldr	r0, [sp, #24]
 8008014:	f7fb fcae 	bl	8003974 <FindRoute>
 8008018:	002f      	movs	r7, r5
		if(route[i]){
 800801a:	7868      	ldrb	r0, [r5, #1]
 800801c:	2800      	cmp	r0, #0
 800801e:	d0f4      	beq.n	800800a <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8008020:	78a9      	ldrb	r1, [r5, #2]
 8008022:	2900      	cmp	r1, #0
 8008024:	d0c2      	beq.n	8007fac <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008026:	f7fb fca5 	bl	8003974 <FindRoute>
 800802a:	9007      	str	r0, [sp, #28]
 800802c:	e7c2      	b.n	8007fb4 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 800802e:	7839      	ldrb	r1, [r7, #0]
 8008030:	f7fb fca0 	bl	8003974 <FindRoute>
 8008034:	0003      	movs	r3, r0
 8008036:	e7c5      	b.n	8007fc4 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8008038:	9806      	ldr	r0, [sp, #24]
 800803a:	42b0      	cmp	r0, r6
 800803c:	d118      	bne.n	8008070 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800803e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008044:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008046:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008048:	4640      	mov	r0, r8
 800804a:	f7ff fba1 	bl	8007790 <SetupDMAStreams>
	if(stored){
 800804e:	4653      	mov	r3, sl
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0a3      	beq.n	8007f9c <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008054:	2300      	movs	r3, #0
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	9303      	str	r3, [sp, #12]
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008064:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008066:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008068:	4640      	mov	r0, r8
 800806a:	f7fb f987 	bl	800337c <SaveEEstreams>
 800806e:	e795      	b.n	8007f9c <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8008070:	0031      	movs	r1, r6
 8008072:	f7fb fc7f 	bl	8003974 <FindRoute>
 8008076:	900e      	str	r0, [sp, #56]	; 0x38
 8008078:	e7e1      	b.n	800803e <StartScastDMAStream+0x152>
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	20000b66 	.word	0x20000b66
 8008080:	20005ba3 	.word	0x20005ba3
 8008084:	20000a28 	.word	0x20000a28

08008088 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	46de      	mov	lr, fp
 800808c:	4657      	mov	r7, sl
 800808e:	464e      	mov	r6, r9
 8008090:	4645      	mov	r5, r8
 8008092:	b5e0      	push	{r5, r6, r7, lr}


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008094:	4b55      	ldr	r3, [pc, #340]	; (80081ec <BackEndTask+0x164>)
 8008096:	4698      	mov	r8, r3
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008098:	4b55      	ldr	r3, [pc, #340]	; (80081f0 <BackEndTask+0x168>)
 800809a:	4699      	mov	r9, r3
 800809c:	e037      	b.n	800810e <BackEndTask+0x86>


			Message_counter++;
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
			{
				Accepted_Messages++;
 800809e:	4a55      	ldr	r2, [pc, #340]	; (80081f4 <BackEndTask+0x16c>)
 80080a0:	8813      	ldrh	r3, [r2, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	8013      	strh	r3, [r2, #0]
				messageLength[port_index] =length;
 80080a6:	4b54      	ldr	r3, [pc, #336]	; (80081f8 <BackEndTask+0x170>)
 80080a8:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80080aa:	00e0      	lsls	r0, r4, #3
 80080ac:	1b00      	subs	r0, r0, r4
 80080ae:	00c0      	lsls	r0, r0, #3
 80080b0:	4b52      	ldr	r3, [pc, #328]	; (80081fc <BackEndTask+0x174>)
 80080b2:	469a      	mov	sl, r3
 80080b4:	4450      	add	r0, sl
 80080b6:	00a2      	lsls	r2, r4, #2
 80080b8:	1912      	adds	r2, r2, r4
 80080ba:	00d3      	lsls	r3, r2, #3
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	3303      	adds	r3, #3
 80080c2:	4661      	mov	r1, ip
 80080c4:	00c9      	lsls	r1, r1, #3
 80080c6:	1859      	adds	r1, r3, r1
 80080c8:	4b4d      	ldr	r3, [pc, #308]	; (8008200 <BackEndTask+0x178>)
 80080ca:	18c9      	adds	r1, r1, r3
 80080cc:	002a      	movs	r2, r5
 80080ce:	f00a fe58 	bl	8012d82 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80080d2:	00e3      	lsls	r3, r4, #3
 80080d4:	1b1b      	subs	r3, r3, r4
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4652      	mov	r2, sl
 80080da:	5c9b      	ldrb	r3, [r3, r2]
 80080dc:	4a49      	ldr	r2, [pc, #292]	; (8008204 <BackEndTask+0x17c>)
 80080de:	7812      	ldrb	r2, [r2, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d003      	beq.n	80080ec <BackEndTask+0x64>
 80080e4:	3302      	adds	r3, #2
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d803      	bhi.n	80080f4 <BackEndTask+0x6c>
					/* Notify messaging tasks */
					NotifyMessagingTask(port_number);
 80080ec:	0030      	movs	r0, r6
 80080ee:	f7ff fc2b 	bl	8007948 <NotifyMessagingTask>
 80080f2:	e069      	b.n	80081c8 <BackEndTask+0x140>

				else{
					/* Forward message */
					ForwardReceivedMessage(port_number);
 80080f4:	0030      	movs	r0, r6
 80080f6:	f7ff fe6b 	bl	8007dd0 <ForwardReceivedMessage>
 80080fa:	e065      	b.n	80081c8 <BackEndTask+0x140>
				Rejected_Messages++;
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80080fc:	4b42      	ldr	r3, [pc, #264]	; (8008208 <BackEndTask+0x180>)
 80080fe:	2200      	movs	r2, #0
 8008100:	551a      	strb	r2, [r3, r4]
 8008102:	e069      	b.n	80081d8 <BackEndTask+0x150>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008104:	4b39      	ldr	r3, [pc, #228]	; (80081ec <BackEndTask+0x164>)
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
		}

		taskYIELD();
 800810a:	f007 facf 	bl	800f6ac <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800810e:	4643      	mov	r3, r8
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4a3e      	ldr	r2, [pc, #248]	; (800820c <BackEndTask+0x184>)
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d0f7      	beq.n	800810a <BackEndTask+0x82>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800811a:	464a      	mov	r2, r9
 800811c:	5cd6      	ldrb	r6, [r2, r3]
			port_index = port_number - 1;
 800811e:	1e74      	subs	r4, r6, #1
 8008120:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008122:	4b39      	ldr	r3, [pc, #228]	; (8008208 <BackEndTask+0x180>)
 8008124:	5d19      	ldrb	r1, [r3, r4]
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <BackEndTask+0x178>)
 8008128:	469a      	mov	sl, r3
 800812a:	00cb      	lsls	r3, r1, #3
 800812c:	469c      	mov	ip, r3
 800812e:	1a5d      	subs	r5, r3, r1
 8008130:	00a0      	lsls	r0, r4, #2
 8008132:	1900      	adds	r0, r0, r4
 8008134:	00c3      	lsls	r3, r0, #3
 8008136:	1a1a      	subs	r2, r3, r0
 8008138:	1952      	adds	r2, r2, r5
 800813a:	00d2      	lsls	r2, r2, #3
 800813c:	2548      	movs	r5, #72	; 0x48
 800813e:	4657      	mov	r7, sl
 8008140:	55d5      	strb	r5, [r2, r7]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008142:	4452      	add	r2, sl
 8008144:	3512      	adds	r5, #18
 8008146:	46ab      	mov	fp, r5
 8008148:	7055      	strb	r5, [r2, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800814a:	7895      	ldrb	r5, [r2, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800814c:	4a30      	ldr	r2, [pc, #192]	; (8008210 <BackEndTask+0x188>)
 800814e:	4667      	mov	r7, ip
 8008150:	1a7f      	subs	r7, r7, r1
 8008152:	46bc      	mov	ip, r7
 8008154:	1a1b      	subs	r3, r3, r0
 8008156:	4463      	add	r3, ip
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	4650      	mov	r0, sl
 800815c:	5c1b      	ldrb	r3, [r3, r0]
 800815e:	7013      	strb	r3, [r2, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008160:	465b      	mov	r3, fp
 8008162:	7053      	strb	r3, [r2, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008164:	7095      	strb	r5, [r2, #2]
			for(int i=0;i<length;i++)
 8008166:	2d00      	cmp	r5, #0
 8008168:	dd10      	ble.n	800818c <BackEndTask+0x104>
 800816a:	00a2      	lsls	r2, r4, #2
 800816c:	1912      	adds	r2, r2, r4
 800816e:	00d3      	lsls	r3, r2, #3
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	3303      	adds	r3, #3
 8008176:	00f9      	lsls	r1, r7, #3
 8008178:	185b      	adds	r3, r3, r1
 800817a:	181b      	adds	r3, r3, r0
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <BackEndTask+0x18c>)
 800817e:	1950      	adds	r0, r2, r5
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008180:	7819      	ldrb	r1, [r3, #0]
 8008182:	7011      	strb	r1, [r2, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 8008188:	4282      	cmp	r2, r0
 800818a:	d1f9      	bne.n	8008180 <BackEndTask+0xf8>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 800818c:	1ce9      	adds	r1, r5, #3
 800818e:	4820      	ldr	r0, [pc, #128]	; (8008210 <BackEndTask+0x188>)
 8008190:	f003 f958 	bl	800b444 <CalculateCRC8>
			Message_counter++;
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <BackEndTask+0x190>)
 8008196:	8813      	ldrh	r3, [r2, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800819c:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <BackEndTask+0x180>)
 800819e:	5d19      	ldrb	r1, [r3, r4]
 80081a0:	00cb      	lsls	r3, r1, #3
 80081a2:	1a5b      	subs	r3, r3, r1
 80081a4:	469c      	mov	ip, r3
 80081a6:	00a3      	lsls	r3, r4, #2
 80081a8:	191b      	adds	r3, r3, r4
 80081aa:	00da      	lsls	r2, r3, #3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	4463      	add	r3, ip
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4a13      	ldr	r2, [pc, #76]	; (8008200 <BackEndTask+0x178>)
 80081b4:	18d3      	adds	r3, r2, r3
 80081b6:	195b      	adds	r3, r3, r5
 80081b8:	78db      	ldrb	r3, [r3, #3]
 80081ba:	4283      	cmp	r3, r0
 80081bc:	d100      	bne.n	80081c0 <BackEndTask+0x138>
 80081be:	e76e      	b.n	800809e <BackEndTask+0x16>
				Rejected_Messages++;
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <BackEndTask+0x194>)
 80081c2:	8813      	ldrh	r3, [r2, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	8013      	strh	r3, [r2, #0]
			MSG_Buffer_Index_Start[port_index]++;
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <BackEndTask+0x180>)
 80081ca:	5d1b      	ldrb	r3, [r3, r4]
 80081cc:	3301      	adds	r3, #1
 80081ce:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d093      	beq.n	80080fc <BackEndTask+0x74>
			MSG_Buffer_Index_Start[port_index]++;
 80081d4:	4a0c      	ldr	r2, [pc, #48]	; (8008208 <BackEndTask+0x180>)
 80081d6:	5513      	strb	r3, [r2, r4]
			Process_Message_Buffer_Index_Start++;
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <BackEndTask+0x164>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d08f      	beq.n	8008104 <BackEndTask+0x7c>
			Process_Message_Buffer_Index_Start++;
 80081e4:	4a01      	ldr	r2, [pc, #4]	; (80081ec <BackEndTask+0x164>)
 80081e6:	7013      	strb	r3, [r2, #0]
 80081e8:	e78f      	b.n	800810a <BackEndTask+0x82>
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	20000612 	.word	0x20000612
 80081f0:	2000060c 	.word	0x2000060c
 80081f4:	20001158 	.word	0x20001158
 80081f8:	20000a24 	.word	0x20000a24
 80081fc:	200008a4 	.word	0x200008a4
 8008200:	200002bc 	.word	0x200002bc
 8008204:	20000b66 	.word	0x20000b66
 8008208:	20000608 	.word	0x20000608
 800820c:	20000611 	.word	0x20000611
 8008210:	20005bc4 	.word	0x20005bc4
 8008214:	20005bc7 	.word	0x20005bc7
 8008218:	20001188 	.word	0x20001188
 800821c:	2000118a 	.word	0x2000118a

08008220 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008220:	2001      	movs	r0, #1
 8008222:	4770      	bx	lr

08008224 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008226:	46de      	mov	lr, fp
 8008228:	4657      	mov	r7, sl
 800822a:	464e      	mov	r6, r9
 800822c:	4645      	mov	r5, r8
 800822e:	b5e0      	push	{r5, r6, r7, lr}
 8008230:	b093      	sub	sp, #76	; 0x4c
	port =(int8_t )(unsigned )argument;
 8008232:	b2c3      	uxtb	r3, r0
 8008234:	9308      	str	r3, [sp, #32]
 8008236:	23ff      	movs	r3, #255	; 0xff
 8008238:	4003      	ands	r3, r0
 800823a:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800823c:	1e5d      	subs	r5, r3, #1
 800823e:	00eb      	lsls	r3, r5, #3
 8008240:	1b5b      	subs	r3, r3, r5
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008246:	4ae4      	ldr	r2, [pc, #912]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	9306      	str	r3, [sp, #24]
	HAL_StatusTypeDef status =HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8008250:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 8008252:	000e      	movs	r6, r1
 8008254:	1853      	adds	r3, r2, r1
 8008256:	3302      	adds	r3, #2
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	468a      	mov	sl, r1
 800825c:	e062      	b.n	8008324 <PxMessagingTask+0x100>
				longMessage =1;
 800825e:	4adf      	ldr	r2, [pc, #892]	; (80085dc <PxMessagingTask+0x3b8>)
 8008260:	2101      	movs	r1, #1
 8008262:	7011      	strb	r1, [r2, #0]
 8008264:	e06f      	b.n	8008346 <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 8008266:	4bdc      	ldr	r3, [pc, #880]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008268:	199b      	adds	r3, r3, r6
 800826a:	1818      	adds	r0, r3, r0
 800826c:	78c7      	ldrb	r7, [r0, #3]
 800826e:	e08e      	b.n	800838e <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 8008270:	4bdb      	ldr	r3, [pc, #876]	; (80085e0 <PxMessagingTask+0x3bc>)
 8008272:	2200      	movs	r2, #0
 8008274:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008276:	212c      	movs	r1, #44	; 0x2c
 8008278:	9804      	ldr	r0, [sp, #16]
 800827a:	f7ff fe11 	bl	8007ea0 <SendMessageToModule>
 800827e:	e089      	b.n	8008394 <PxMessagingTask+0x170>
					Delay_ms(100);
 8008280:	2064      	movs	r0, #100	; 0x64
 8008282:	f007 fb7f 	bl	800f984 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008286:	2300      	movs	r3, #0
 8008288:	9a08      	ldr	r2, [sp, #32]
 800828a:	4659      	mov	r1, fp
 800828c:	9804      	ldr	r0, [sp, #16]
 800828e:	f001 fd95 	bl	8009dbc <remoteBootloaderUpdate>
 8008292:	e02e      	b.n	80082f2 <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008294:	4bd3      	ldr	r3, [pc, #844]	; (80085e4 <PxMessagingTask+0x3c0>)
 8008296:	5d5a      	ldrb	r2, [r3, r5]
 8008298:	4bcf      	ldr	r3, [pc, #828]	; (80085d8 <PxMessagingTask+0x3b4>)
 800829a:	199b      	adds	r3, r3, r6
 800829c:	189b      	adds	r3, r3, r2
 800829e:	3b01      	subs	r3, #1
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4ad1      	ldr	r2, [pc, #836]	; (80085e8 <PxMessagingTask+0x3c4>)
 80082a4:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 80082a6:	2103      	movs	r1, #3
 80082a8:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d01e      	beq.n	80082ec <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80082ae:	4ace      	ldr	r2, [pc, #824]	; (80085e8 <PxMessagingTask+0x3c4>)
 80082b0:	7013      	strb	r3, [r2, #0]
 80082b2:	4ace      	ldr	r2, [pc, #824]	; (80085ec <PxMessagingTask+0x3c8>)
 80082b4:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80082b6:	9908      	ldr	r1, [sp, #32]
 80082b8:	20ff      	movs	r0, #255	; 0xff
 80082ba:	f7ff fda9 	bl	8007e10 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80082be:	4bc9      	ldr	r3, [pc, #804]	; (80085e4 <PxMessagingTask+0x3c0>)
 80082c0:	5d5a      	ldrb	r2, [r3, r5]
 80082c2:	4bc5      	ldr	r3, [pc, #788]	; (80085d8 <PxMessagingTask+0x3b4>)
 80082c4:	199b      	adds	r3, r3, r6
 80082c6:	189b      	adds	r3, r3, r2
 80082c8:	3b01      	subs	r3, #1
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
				shift +=4;
 80082ce:	9c05      	ldr	r4, [sp, #20]
 80082d0:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 80082d2:	4bc4      	ldr	r3, [pc, #784]	; (80085e4 <PxMessagingTask+0x3c0>)
 80082d4:	5d59      	ldrb	r1, [r3, r5]
 80082d6:	1b0a      	subs	r2, r1, r4
 80082d8:	b2d3      	uxtb	r3, r2
 80082da:	9305      	str	r3, [sp, #20]
					switch(code){
 80082dc:	2f2d      	cmp	r7, #45	; 0x2d
 80082de:	d901      	bls.n	80082e4 <PxMessagingTask+0xc0>
 80082e0:	f001 fa9e 	bl	8009820 <PxMessagingTask+0x15fc>
 80082e4:	00bb      	lsls	r3, r7, #2
 80082e6:	4ac2      	ldr	r2, [pc, #776]	; (80085f0 <PxMessagingTask+0x3cc>)
 80082e8:	58d3      	ldr	r3, [r2, r3]
 80082ea:	469f      	mov	pc, r3
				if(result == BOS_OK){
 80082ec:	464b      	mov	r3, r9
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0ed      	beq.n	80082ce <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 80082f2:	464b      	mov	r3, r9
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <PxMessagingTask+0xd8>
 80082f8:	f001 fab4 	bl	8009864 <PxMessagingTask+0x1640>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80082fc:	4cb9      	ldr	r4, [pc, #740]	; (80085e4 <PxMessagingTask+0x3c0>)
 80082fe:	5d62      	ldrb	r2, [r4, r5]
 8008300:	2100      	movs	r1, #0
 8008302:	9806      	ldr	r0, [sp, #24]
 8008304:	f00a fd46 	bl	8012d94 <memset>
		messageLength[port - 1] =0;
 8008308:	2300      	movs	r3, #0
 800830a:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800830c:	4bb9      	ldr	r3, [pc, #740]	; (80085f4 <PxMessagingTask+0x3d0>)
 800830e:	4642      	mov	r2, r8
 8008310:	5c9b      	ldrb	r3, [r3, r2]
 8008312:	3b02      	subs	r3, #2
 8008314:	2b02      	cmp	r3, #2
 8008316:	d903      	bls.n	8008320 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 8008318:	4bb6      	ldr	r3, [pc, #728]	; (80085f4 <PxMessagingTask+0x3d0>)
 800831a:	2200      	movs	r2, #0
 800831c:	4641      	mov	r1, r8
 800831e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008320:	f007 f9c4 	bl	800f6ac <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008324:	2101      	movs	r1, #1
 8008326:	4249      	negs	r1, r1
 8008328:	2001      	movs	r0, #1
 800832a:	f006 ff05 	bl	800f138 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800832e:	4bad      	ldr	r3, [pc, #692]	; (80085e4 <PxMessagingTask+0x3c0>)
 8008330:	5d5b      	ldrb	r3, [r3, r5]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0dd      	beq.n	80082f2 <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b25a      	sxtb	r2, r3
 800833c:	2a00      	cmp	r2, #0
 800833e:	db8e      	blt.n	800825e <PxMessagingTask+0x3a>
				longMessage =0;
 8008340:	4aa6      	ldr	r2, [pc, #664]	; (80085dc <PxMessagingTask+0x3b8>)
 8008342:	2100      	movs	r1, #0
 8008344:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008346:	4aa4      	ldr	r2, [pc, #656]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008348:	5cb1      	ldrb	r1, [r6, r2]
 800834a:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800834c:	1992      	adds	r2, r2, r6
 800834e:	7852      	ldrb	r2, [r2, #1]
 8008350:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008352:	2201      	movs	r2, #1
 8008354:	0010      	movs	r0, r2
 8008356:	4018      	ands	r0, r3
			shift =0;
 8008358:	9005      	str	r0, [sp, #20]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800835a:	49a1      	ldr	r1, [pc, #644]	; (80085e0 <PxMessagingTask+0x3bc>)
 800835c:	071c      	lsls	r4, r3, #28
 800835e:	0fa4      	lsrs	r4, r4, #30
 8008360:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008362:	091c      	lsrs	r4, r3, #4
 8008364:	4022      	ands	r2, r4
 8008366:	0014      	movs	r4, r2
 8008368:	1e67      	subs	r7, r4, #1
 800836a:	41bc      	sbcs	r4, r7
 800836c:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800836e:	2460      	movs	r4, #96	; 0x60
 8008370:	401c      	ands	r4, r3
 8008372:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 8008374:	079b      	lsls	r3, r3, #30
 8008376:	d400      	bmi.n	800837a <PxMessagingTask+0x156>
 8008378:	e775      	b.n	8008266 <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800837a:	4b97      	ldr	r3, [pc, #604]	; (80085d8 <PxMessagingTask+0x3b4>)
 800837c:	199b      	adds	r3, r3, r6
 800837e:	181b      	adds	r3, r3, r0
 8008380:	7919      	ldrb	r1, [r3, #4]
 8008382:	0209      	lsls	r1, r1, #8
 8008384:	78df      	ldrb	r7, [r3, #3]
 8008386:	187f      	adds	r7, r7, r1
 8008388:	b2bf      	uxth	r7, r7
				++shift;
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	9305      	str	r3, [sp, #20]
			if(true == BOSMessaging.received_Acknowledgment){
 800838e:	2a00      	cmp	r2, #0
 8008390:	d000      	beq.n	8008394 <PxMessagingTask+0x170>
 8008392:	e76d      	b.n	8008270 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008394:	465b      	mov	r3, fp
 8008396:	3b01      	subs	r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2bfc      	cmp	r3, #252	; 0xfc
 800839c:	d901      	bls.n	80083a2 <PxMessagingTask+0x17e>
 800839e:	f001 fa9b 	bl	80098d8 <PxMessagingTask+0x16b4>
 80083a2:	4b95      	ldr	r3, [pc, #596]	; (80085f8 <PxMessagingTask+0x3d4>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	455b      	cmp	r3, fp
 80083a8:	d101      	bne.n	80083ae <PxMessagingTask+0x18a>
 80083aa:	f001 fa95 	bl	80098d8 <PxMessagingTask+0x16b4>
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <PxMessagingTask+0x192>
 80083b2:	f001 fa8b 	bl	80098cc <PxMessagingTask+0x16a8>
				ForwardReceivedMessage(port);
 80083b6:	9808      	ldr	r0, [sp, #32]
 80083b8:	f7ff fd0a 	bl	8007dd0 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 80083bc:	4b88      	ldr	r3, [pc, #544]	; (80085e0 <PxMessagingTask+0x3bc>)
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 80083c4:	4b8d      	ldr	r3, [pc, #564]	; (80085fc <PxMessagingTask+0x3d8>)
 80083c6:	2203      	movs	r2, #3
 80083c8:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 80083ca:	2f19      	cmp	r7, #25
 80083cc:	d100      	bne.n	80083d0 <PxMessagingTask+0x1ac>
 80083ce:	e757      	b.n	8008280 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 80083d0:	2f1a      	cmp	r7, #26
 80083d2:	d18e      	bne.n	80082f2 <PxMessagingTask+0xce>
					Delay_ms(100);
 80083d4:	2064      	movs	r0, #100	; 0x64
 80083d6:	f007 fad5 	bl	800f984 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 80083da:	4b7f      	ldr	r3, [pc, #508]	; (80085d8 <PxMessagingTask+0x3b4>)
 80083dc:	199b      	adds	r3, r3, r6
 80083de:	9a05      	ldr	r2, [sp, #20]
 80083e0:	5c9b      	ldrb	r3, [r3, r2]
 80083e2:	9a08      	ldr	r2, [sp, #32]
 80083e4:	4659      	mov	r1, fp
 80083e6:	9804      	ldr	r0, [sp, #16]
 80083e8:	f001 fce8 	bl	8009dbc <remoteBootloaderUpdate>
 80083ec:	e781      	b.n	80082f2 <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 80083ee:	9b05      	ldr	r3, [sp, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01f      	beq.n	8008434 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	1e58      	subs	r0, r3, #1
 80083f8:	0042      	lsls	r2, r0, #1
 80083fa:	4b81      	ldr	r3, [pc, #516]	; (8008600 <PxMessagingTask+0x3dc>)
 80083fc:	5ad3      	ldrh	r3, [r2, r3]
 80083fe:	4652      	mov	r2, sl
 8008400:	1911      	adds	r1, r2, r4
 8008402:	4a75      	ldr	r2, [pc, #468]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008404:	1889      	adds	r1, r1, r2
 8008406:	3201      	adds	r2, #1
 8008408:	4452      	add	r2, sl
 800840a:	1914      	adds	r4, r2, r4
 800840c:	9a05      	ldr	r2, [sp, #20]
 800840e:	3a01      	subs	r2, #1
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	18a4      	adds	r4, r4, r2
 8008414:	2780      	movs	r7, #128	; 0x80
 8008416:	023f      	lsls	r7, r7, #8
 8008418:	4684      	mov	ip, r0
 800841a:	780a      	ldrb	r2, [r1, #0]
 800841c:	3a01      	subs	r2, #1
 800841e:	0038      	movs	r0, r7
 8008420:	4110      	asrs	r0, r2
 8008422:	4303      	orrs	r3, r0
 8008424:	b29b      	uxth	r3, r3
 8008426:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8008428:	42a1      	cmp	r1, r4
 800842a:	d1f6      	bne.n	800841a <PxMessagingTask+0x1f6>
 800842c:	4660      	mov	r0, ip
 800842e:	0040      	lsls	r0, r0, #1
 8008430:	4a73      	ldr	r2, [pc, #460]	; (8008600 <PxMessagingTask+0x3dc>)
 8008432:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8008434:	4b73      	ldr	r3, [pc, #460]	; (8008604 <PxMessagingTask+0x3e0>)
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
							break;
 800843a:	2300      	movs	r3, #0
 800843c:	4699      	mov	r9, r3
 800843e:	e75d      	b.n	80082fc <PxMessagingTask+0xd8>
							indMode =IND_PING;
 8008440:	4b6e      	ldr	r3, [pc, #440]	; (80085fc <PxMessagingTask+0x3d8>)
 8008442:	2201      	movs	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008446:	200a      	movs	r0, #10
 8008448:	f005 fb4b 	bl	800dae2 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800844c:	4b64      	ldr	r3, [pc, #400]	; (80085e0 <PxMessagingTask+0x3bc>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2240      	movs	r2, #64	; 0x40
 8008452:	4393      	bics	r3, r2
 8008454:	2200      	movs	r2, #0
 8008456:	4691      	mov	r9, r2
 8008458:	2b20      	cmp	r3, #32
 800845a:	d000      	beq.n	800845e <PxMessagingTask+0x23a>
 800845c:	e74e      	b.n	80082fc <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800845e:	2102      	movs	r1, #2
 8008460:	9804      	ldr	r0, [sp, #16]
 8008462:	f7ff fd1d 	bl	8007ea0 <SendMessageToModule>
 8008466:	e749      	b.n	80082fc <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 8008468:	4b63      	ldr	r3, [pc, #396]	; (80085f8 <PxMessagingTask+0x3d4>)
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	0093      	lsls	r3, r2, #2
 800846e:	189b      	adds	r3, r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4a65      	ldr	r2, [pc, #404]	; (8008608 <PxMessagingTask+0x3e4>)
 8008474:	5c9b      	ldrb	r3, [r3, r2]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d118      	bne.n	80084ac <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800847a:	9a04      	ldr	r2, [sp, #16]
 800847c:	4963      	ldr	r1, [pc, #396]	; (800860c <PxMessagingTask+0x3e8>)
 800847e:	4864      	ldr	r0, [pc, #400]	; (8008610 <PxMessagingTask+0x3ec>)
 8008480:	f00b fa16 	bl	80138b0 <siprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008484:	4c62      	ldr	r4, [pc, #392]	; (8008610 <PxMessagingTask+0x3ec>)
 8008486:	0020      	movs	r0, r4
 8008488:	f7f7 fe46 	bl	8000118 <strlen>
 800848c:	b282      	uxth	r2, r0
 800848e:	4b61      	ldr	r3, [pc, #388]	; (8008614 <PxMessagingTask+0x3f0>)
 8008490:	7818      	ldrb	r0, [r3, #0]
 8008492:	2301      	movs	r3, #1
 8008494:	425b      	negs	r3, r3
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	3333      	adds	r3, #51	; 0x33
 800849a:	0021      	movs	r1, r4
 800849c:	f005 f99a 	bl	800d7d4 <writePxMutex>
							responseStatus =BOS_OK;
 80084a0:	4b58      	ldr	r3, [pc, #352]	; (8008604 <PxMessagingTask+0x3e0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
							break;
 80084a6:	2300      	movs	r3, #0
 80084a8:	4699      	mov	r9, r3
 80084aa:	e727      	b.n	80082fc <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80084ac:	230a      	movs	r3, #10
 80084ae:	9904      	ldr	r1, [sp, #16]
 80084b0:	434b      	muls	r3, r1
 80084b2:	4a55      	ldr	r2, [pc, #340]	; (8008608 <PxMessagingTask+0x3e4>)
 80084b4:	189b      	adds	r3, r3, r2
 80084b6:	000a      	movs	r2, r1
 80084b8:	4957      	ldr	r1, [pc, #348]	; (8008618 <PxMessagingTask+0x3f4>)
 80084ba:	4855      	ldr	r0, [pc, #340]	; (8008610 <PxMessagingTask+0x3ec>)
 80084bc:	f00b f9f8 	bl	80138b0 <siprintf>
 80084c0:	e7e0      	b.n	8008484 <PxMessagingTask+0x260>
							IND_ON();
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	2090      	movs	r0, #144	; 0x90
 80084c6:	2201      	movs	r2, #1
 80084c8:	0109      	lsls	r1, r1, #4
 80084ca:	05c0      	lsls	r0, r0, #23
 80084cc:	f008 feba 	bl	8011244 <HAL_GPIO_WritePin>
							break;
 80084d0:	2300      	movs	r3, #0
 80084d2:	4699      	mov	r9, r3
 80084d4:	e712      	b.n	80082fc <PxMessagingTask+0xd8>
							IND_OFF();
 80084d6:	2180      	movs	r1, #128	; 0x80
 80084d8:	2090      	movs	r0, #144	; 0x90
 80084da:	2200      	movs	r2, #0
 80084dc:	0109      	lsls	r1, r1, #4
 80084de:	05c0      	lsls	r0, r0, #23
 80084e0:	f008 feb0 	bl	8011244 <HAL_GPIO_WritePin>
							break;
 80084e4:	2300      	movs	r3, #0
 80084e6:	4699      	mov	r9, r3
 80084e8:	e708      	b.n	80082fc <PxMessagingTask+0xd8>
							IND_toggle();
 80084ea:	2180      	movs	r1, #128	; 0x80
 80084ec:	2090      	movs	r0, #144	; 0x90
 80084ee:	0109      	lsls	r1, r1, #4
 80084f0:	05c0      	lsls	r0, r0, #23
 80084f2:	f008 fead 	bl	8011250 <HAL_GPIO_TogglePin>
							break;
 80084f6:	2300      	movs	r3, #0
 80084f8:	4699      	mov	r9, r3
 80084fa:	e6ff      	b.n	80082fc <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 80084fc:	4f47      	ldr	r7, [pc, #284]	; (800861c <PxMessagingTask+0x3f8>)
 80084fe:	00ab      	lsls	r3, r5, #2
 8008500:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008502:	1992      	adds	r2, r2, r6
 8008504:	1910      	adds	r0, r2, r4
 8008506:	7881      	ldrb	r1, [r0, #2]
 8008508:	468c      	mov	ip, r1
 800850a:	9904      	ldr	r1, [sp, #16]
 800850c:	0209      	lsls	r1, r1, #8
 800850e:	4461      	add	r1, ip
 8008510:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	5d11      	ldrb	r1, [r2, r4]
 8008516:	0209      	lsls	r1, r1, #8
 8008518:	7842      	ldrb	r2, [r0, #1]
 800851a:	1852      	adds	r2, r2, r1
 800851c:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800851e:	4b40      	ldr	r3, [pc, #256]	; (8008620 <PxMessagingTask+0x3fc>)
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	4a40      	ldr	r2, [pc, #256]	; (8008624 <PxMessagingTask+0x400>)
 8008524:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800852a:	9c08      	ldr	r4, [sp, #32]
 800852c:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800852e:	2002      	movs	r0, #2
 8008530:	f005 fad7 	bl	800dae2 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008534:	2303      	movs	r3, #3
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	0020      	movs	r0, r4
 8008540:	f7ff fa28 	bl	8007994 <SendMessageFromPort>
							break;
 8008544:	2300      	movs	r3, #0
 8008546:	4699      	mov	r9, r3
 8008548:	e6d8      	b.n	80082fc <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800854a:	4f34      	ldr	r7, [pc, #208]	; (800861c <PxMessagingTask+0x3f8>)
 800854c:	00ab      	lsls	r3, r5, #2
 800854e:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <PxMessagingTask+0x3b4>)
 8008550:	1992      	adds	r2, r2, r6
 8008552:	1910      	adds	r0, r2, r4
 8008554:	7881      	ldrb	r1, [r0, #2]
 8008556:	468c      	mov	ip, r1
 8008558:	9904      	ldr	r1, [sp, #16]
 800855a:	0209      	lsls	r1, r1, #8
 800855c:	4461      	add	r1, ip
 800855e:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008560:	18fb      	adds	r3, r7, r3
 8008562:	5d11      	ldrb	r1, [r2, r4]
 8008564:	0209      	lsls	r1, r1, #8
 8008566:	7842      	ldrb	r2, [r0, #1]
 8008568:	1852      	adds	r2, r2, r1
 800856a:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800856c:	4b25      	ldr	r3, [pc, #148]	; (8008604 <PxMessagingTask+0x3e0>)
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
							break;
 8008572:	2300      	movs	r3, #0
 8008574:	4699      	mov	r9, r3
 8008576:	e6c1      	b.n	80082fc <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 8008578:	9808      	ldr	r0, [sp, #32]
 800857a:	f7fb f909 	bl	8003790 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800857e:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <PxMessagingTask+0x3d8>)
 8008580:	2202      	movs	r2, #2
 8008582:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008584:	200a      	movs	r0, #10
 8008586:	f005 faac 	bl	800dae2 <osDelay>
 800858a:	2401      	movs	r4, #1
							temp =0;
 800858c:	2300      	movs	r3, #0
 800858e:	9307      	str	r3, [sp, #28]
								if(neighbors[p - 1][0]){
 8008590:	4f22      	ldr	r7, [pc, #136]	; (800861c <PxMessagingTask+0x3f8>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008592:	003b      	movs	r3, r7
 8008594:	3b04      	subs	r3, #4
 8008596:	4699      	mov	r9, r3
 8008598:	b2e2      	uxtb	r2, r4
 800859a:	00a1      	lsls	r1, r4, #2
								if(neighbors[p - 1][0]){
 800859c:	1f0b      	subs	r3, r1, #4
 800859e:	5afb      	ldrh	r3, [r7, r3]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <PxMessagingTask+0x398>
 80085a4:	3401      	adds	r4, #1
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80085a6:	2c04      	cmp	r4, #4
 80085a8:	d1f6      	bne.n	8008598 <PxMessagingTask+0x374>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 80085aa:	466b      	mov	r3, sp
 80085ac:	8b9a      	ldrh	r2, [r3, #28]
 80085ae:	210d      	movs	r1, #13
 80085b0:	9804      	ldr	r0, [sp, #16]
 80085b2:	f7ff fc75 	bl	8007ea0 <SendMessageToModule>
							break;
 80085b6:	2300      	movs	r3, #0
 80085b8:	4699      	mov	r9, r3
 80085ba:	e69f      	b.n	80082fc <PxMessagingTask+0xd8>
									messageParams[temp] =p;
 80085bc:	4b19      	ldr	r3, [pc, #100]	; (8008624 <PxMessagingTask+0x400>)
 80085be:	9807      	ldr	r0, [sp, #28]
 80085c0:	541a      	strb	r2, [r3, r0]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80085c2:	3001      	adds	r0, #1
 80085c4:	18c0      	adds	r0, r0, r3
 80085c6:	4449      	add	r1, r9
 80085c8:	2204      	movs	r2, #4
 80085ca:	f00a fbda 	bl	8012d82 <memcpy>
									temp +=5;
 80085ce:	9807      	ldr	r0, [sp, #28]
 80085d0:	1d43      	adds	r3, r0, #5
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	9307      	str	r3, [sp, #28]
 80085d6:	e7e5      	b.n	80085a4 <PxMessagingTask+0x380>
 80085d8:	200008a4 	.word	0x200008a4
 80085dc:	200009e9 	.word	0x200009e9
 80085e0:	20005a5c 	.word	0x20005a5c
 80085e4:	20000a24 	.word	0x20000a24
 80085e8:	2000118c 	.word	0x2000118c
 80085ec:	20000850 	.word	0x20000850
 80085f0:	08019144 	.word	0x08019144
 80085f4:	20000bd0 	.word	0x20000bd0
 80085f8:	20000b66 	.word	0x20000b66
 80085fc:	200009e8 	.word	0x200009e8
 8008600:	20005fa8 	.word	0x20005fa8
 8008604:	20000be8 	.word	0x20000be8
 8008608:	20000a58 	.word	0x20000a58
 800860c:	08017ce0 	.word	0x08017ce0
 8008610:	200012e4 	.word	0x200012e4
 8008614:	2000060b 	.word	0x2000060b
 8008618:	08017cf4 	.word	0x08017cf4
 800861c:	20000b68 	.word	0x20000b68
 8008620:	20000064 	.word	0x20000064
 8008624:	20000a28 	.word	0x20000a28
							temp =numOfParams / 5;
 8008628:	2105      	movs	r1, #5
 800862a:	9805      	ldr	r0, [sp, #20]
 800862c:	f7f7 fd86 	bl	800013c <__udivsi3>
 8008630:	b2c2      	uxtb	r2, r0
 8008632:	9207      	str	r2, [sp, #28]
							for(uint8_t k =0; k < temp; k++){
 8008634:	2a00      	cmp	r2, #0
 8008636:	d018      	beq.n	800866a <PxMessagingTask+0x446>
 8008638:	4653      	mov	r3, sl
 800863a:	191f      	adds	r7, r3, r4
 800863c:	4bdc      	ldr	r3, [pc, #880]	; (80089b0 <PxMessagingTask+0x78c>)
 800863e:	18ff      	adds	r7, r7, r3
 8008640:	3305      	adds	r3, #5
 8008642:	4453      	add	r3, sl
 8008644:	191c      	adds	r4, r3, r4
 8008646:	1e53      	subs	r3, r2, #1
 8008648:	b2db      	uxtb	r3, r3
 800864a:	009a      	lsls	r2, r3, #2
 800864c:	18d3      	adds	r3, r2, r3
 800864e:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008650:	4bd8      	ldr	r3, [pc, #864]	; (80089b4 <PxMessagingTask+0x790>)
 8008652:	4699      	mov	r9, r3
 8008654:	7838      	ldrb	r0, [r7, #0]
 8008656:	3801      	subs	r0, #1
 8008658:	0080      	lsls	r0, r0, #2
 800865a:	4448      	add	r0, r9
 800865c:	1c79      	adds	r1, r7, #1
 800865e:	2204      	movs	r2, #4
 8008660:	f00a fb8f 	bl	8012d82 <memcpy>
 8008664:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 8008666:	42a7      	cmp	r7, r4
 8008668:	d1f4      	bne.n	8008654 <PxMessagingTask+0x430>
							responseStatus =BOS_OK;
 800866a:	4bd3      	ldr	r3, [pc, #844]	; (80089b8 <PxMessagingTask+0x794>)
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
							break;
 8008670:	2300      	movs	r3, #0
 8008672:	4699      	mov	r9, r3
 8008674:	e642      	b.n	80082fc <PxMessagingTask+0xd8>
 8008676:	4653      	mov	r3, sl
 8008678:	18e3      	adds	r3, r4, r3
 800867a:	4acd      	ldr	r2, [pc, #820]	; (80089b0 <PxMessagingTask+0x78c>)
 800867c:	4699      	mov	r9, r3
 800867e:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008680:	2701      	movs	r7, #1
								if(p != port)
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	42bb      	cmp	r3, r7
 8008686:	d006      	beq.n	8008696 <PxMessagingTask+0x472>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008688:	0038      	movs	r0, r7
 800868a:	f005 f88f 	bl	800d7ac <GetUart>
 800868e:	464b      	mov	r3, r9
 8008690:	7819      	ldrb	r1, [r3, #0]
 8008692:	f005 f8f3 	bl	800d87c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008696:	3701      	adds	r7, #1
 8008698:	b2ff      	uxtb	r7, r7
 800869a:	2301      	movs	r3, #1
 800869c:	469c      	mov	ip, r3
 800869e:	44e1      	add	r9, ip
 80086a0:	2f04      	cmp	r7, #4
 80086a2:	d1ee      	bne.n	8008682 <PxMessagingTask+0x45e>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 80086a4:	9808      	ldr	r0, [sp, #32]
 80086a6:	f005 f881 	bl	800d7ac <GetUart>
 80086aa:	4bc1      	ldr	r3, [pc, #772]	; (80089b0 <PxMessagingTask+0x78c>)
 80086ac:	199b      	adds	r3, r3, r6
 80086ae:	191c      	adds	r4, r3, r4
 80086b0:	7aa1      	ldrb	r1, [r4, #10]
 80086b2:	f005 f8e3 	bl	800d87c <SwapUartPins>
							break;
 80086b6:	2300      	movs	r3, #0
 80086b8:	4699      	mov	r9, r3
 80086ba:	e61f      	b.n	80082fc <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80086bc:	0020      	movs	r0, r4
 80086be:	4bbc      	ldr	r3, [pc, #752]	; (80089b0 <PxMessagingTask+0x78c>)
 80086c0:	199b      	adds	r3, r3, r6
 80086c2:	5d1b      	ldrb	r3, [r3, r4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <PxMessagingTask+0x4ba>
								myID =cMessage[port - 1][1 + shift];
 80086c8:	2238      	movs	r2, #56	; 0x38
 80086ca:	436a      	muls	r2, r5
 80086cc:	4bb8      	ldr	r3, [pc, #736]	; (80089b0 <PxMessagingTask+0x78c>)
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	191c      	adds	r4, r3, r4
 80086d2:	7862      	ldrb	r2, [r4, #1]
 80086d4:	4bb9      	ldr	r3, [pc, #740]	; (80089bc <PxMessagingTask+0x798>)
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	2300      	movs	r3, #0
 80086da:	4699      	mov	r9, r3
 80086dc:	e60e      	b.n	80082fc <PxMessagingTask+0xd8>
 80086de:	2200      	movs	r2, #0
 80086e0:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d000      	beq.n	80086e8 <PxMessagingTask+0x4c4>
 80086e6:	e609      	b.n	80082fc <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 80086e8:	49b5      	ldr	r1, [pc, #724]	; (80089c0 <PxMessagingTask+0x79c>)
 80086ea:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80086ec:	3238      	adds	r2, #56	; 0x38
 80086ee:	436a      	muls	r2, r5
 80086f0:	4baf      	ldr	r3, [pc, #700]	; (80089b0 <PxMessagingTask+0x78c>)
 80086f2:	189b      	adds	r3, r3, r2
 80086f4:	181b      	adds	r3, r3, r0
 80086f6:	785a      	ldrb	r2, [r3, #1]
 80086f8:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80086fa:	7898      	ldrb	r0, [r3, #2]
 80086fc:	2303      	movs	r3, #3
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	330d      	adds	r3, #13
 8008702:	464a      	mov	r2, r9
 8008704:	4649      	mov	r1, r9
 8008706:	f7ff f945 	bl	8007994 <SendMessageFromPort>
 800870a:	e5f7      	b.n	80082fc <PxMessagingTask+0xd8>
							if(longMessage){
 800870c:	4bad      	ldr	r3, [pc, #692]	; (80089c4 <PxMessagingTask+0x7a0>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d012      	beq.n	800873a <PxMessagingTask+0x516>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008714:	4bac      	ldr	r3, [pc, #688]	; (80089c8 <PxMessagingTask+0x7a4>)
 8008716:	4699      	mov	r9, r3
 8008718:	881f      	ldrh	r7, [r3, #0]
 800871a:	48ac      	ldr	r0, [pc, #688]	; (80089cc <PxMessagingTask+0x7a8>)
 800871c:	1838      	adds	r0, r7, r0
 800871e:	4454      	add	r4, sl
 8008720:	49a3      	ldr	r1, [pc, #652]	; (80089b0 <PxMessagingTask+0x78c>)
 8008722:	1861      	adds	r1, r4, r1
 8008724:	9c05      	ldr	r4, [sp, #20]
 8008726:	0022      	movs	r2, r4
 8008728:	f00a fb2b 	bl	8012d82 <memcpy>
								longMessageLastPtr +=numOfParams;
 800872c:	46a4      	mov	ip, r4
 800872e:	4467      	add	r7, ip
 8008730:	464b      	mov	r3, r9
 8008732:	801f      	strh	r7, [r3, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	4699      	mov	r9, r3
 8008738:	e5e0      	b.n	80082fc <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800873a:	4ba3      	ldr	r3, [pc, #652]	; (80089c8 <PxMessagingTask+0x7a4>)
 800873c:	469b      	mov	fp, r3
 800873e:	881f      	ldrh	r7, [r3, #0]
 8008740:	4ba2      	ldr	r3, [pc, #648]	; (80089cc <PxMessagingTask+0x7a8>)
 8008742:	4699      	mov	r9, r3
 8008744:	18f8      	adds	r0, r7, r3
 8008746:	4454      	add	r4, sl
 8008748:	4999      	ldr	r1, [pc, #612]	; (80089b0 <PxMessagingTask+0x78c>)
 800874a:	1861      	adds	r1, r4, r1
 800874c:	9c05      	ldr	r4, [sp, #20]
 800874e:	0022      	movs	r2, r4
 8008750:	f00a fb17 	bl	8012d82 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008754:	193c      	adds	r4, r7, r4
 8008756:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008758:	2116      	movs	r1, #22
 800875a:	0020      	movs	r0, r4
 800875c:	f7f7 fcee 	bl	800013c <__udivsi3>
 8008760:	4b9b      	ldr	r3, [pc, #620]	; (80089d0 <PxMessagingTask+0x7ac>)
 8008762:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008764:	0022      	movs	r2, r4
 8008766:	4649      	mov	r1, r9
 8008768:	489a      	ldr	r0, [pc, #616]	; (80089d4 <PxMessagingTask+0x7b0>)
 800876a:	f00a fb0a 	bl	8012d82 <memcpy>
								longMessageLastPtr =0;
 800876e:	2400      	movs	r4, #0
 8008770:	465b      	mov	r3, fp
 8008772:	801c      	strh	r4, [r3, #0]
 8008774:	46a1      	mov	r9, r4
 8008776:	e5c1      	b.n	80082fc <PxMessagingTask+0xd8>
							ReadPortsDirMSG(src);
 8008778:	9804      	ldr	r0, [sp, #16]
 800877a:	f005 f8e5 	bl	800d948 <ReadPortsDirMSG>
								break;
 800877e:	2300      	movs	r3, #0
 8008780:	4699      	mov	r9, r3
 8008782:	e5bb      	b.n	80082fc <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008784:	4b8a      	ldr	r3, [pc, #552]	; (80089b0 <PxMessagingTask+0x78c>)
 8008786:	199b      	adds	r3, r3, r6
 8008788:	5d1f      	ldrb	r7, [r3, r4]
 800878a:	063f      	lsls	r7, r7, #24
 800878c:	191b      	adds	r3, r3, r4
 800878e:	78da      	ldrb	r2, [r3, #3]
 8008790:	18bf      	adds	r7, r7, r2
 8008792:	785a      	ldrb	r2, [r3, #1]
 8008794:	0412      	lsls	r2, r2, #16
 8008796:	18bf      	adds	r7, r7, r2
 8008798:	789a      	ldrb	r2, [r3, #2]
 800879a:	0212      	lsls	r2, r2, #8
 800879c:	18ba      	adds	r2, r7, r2
 800879e:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80087a0:	791b      	ldrb	r3, [r3, #4]
 80087a2:	2bff      	cmp	r3, #255	; 0xff
 80087a4:	d01c      	beq.n	80087e0 <PxMessagingTask+0x5bc>
								for(p =0; p < numOfParams; p++){
 80087a6:	9b05      	ldr	r3, [sp, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d016      	beq.n	80087da <PxMessagingTask+0x5b6>
 80087ac:	4653      	mov	r3, sl
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	1912      	adds	r2, r2, r4
 80087b2:	4b7f      	ldr	r3, [pc, #508]	; (80089b0 <PxMessagingTask+0x78c>)
 80087b4:	18d7      	adds	r7, r2, r3
 80087b6:	3305      	adds	r3, #5
 80087b8:	4453      	add	r3, sl
 80087ba:	191c      	adds	r4, r3, r4
 80087bc:	9b05      	ldr	r3, [sp, #20]
 80087be:	3b01      	subs	r3, #1
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 80087c4:	783b      	ldrb	r3, [r7, #0]
 80087c6:	9307      	str	r3, [sp, #28]
									if(temp > 0 && temp <= NumOfPorts){
 80087c8:	3b01      	subs	r3, #1
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d919      	bls.n	8008802 <PxMessagingTask+0x5de>
 80087ce:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 80087d0:	42a7      	cmp	r7, r4
 80087d2:	d1f7      	bne.n	80087c4 <PxMessagingTask+0x5a0>
 80087d4:	2300      	movs	r3, #0
 80087d6:	4699      	mov	r9, r3
 80087d8:	e590      	b.n	80082fc <PxMessagingTask+0xd8>
							temp =temp32 =0;
 80087da:	9307      	str	r3, [sp, #28]
								for(p =0; p < numOfParams; p++){
 80087dc:	4699      	mov	r9, r3
 80087de:	e58d      	b.n	80082fc <PxMessagingTask+0xd8>
									UpdateBaudrate(p,temp32);
 80087e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80087e2:	0021      	movs	r1, r4
 80087e4:	2001      	movs	r0, #1
 80087e6:	f005 f83f 	bl	800d868 <UpdateBaudrate>
 80087ea:	0021      	movs	r1, r4
 80087ec:	2002      	movs	r0, #2
 80087ee:	f005 f83b 	bl	800d868 <UpdateBaudrate>
 80087f2:	0021      	movs	r1, r4
 80087f4:	2003      	movs	r0, #3
 80087f6:	f005 f837 	bl	800d868 <UpdateBaudrate>
							temp =temp32 =0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	4699      	mov	r9, r3
 8008800:	e57c      	b.n	80082fc <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 8008802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008804:	9807      	ldr	r0, [sp, #28]
 8008806:	f005 f82f 	bl	800d868 <UpdateBaudrate>
 800880a:	e7e0      	b.n	80087ce <PxMessagingTask+0x5aa>
							SaveToRO();
 800880c:	f001 f9a2 	bl	8009b54 <SaveToRO>
							SaveEEportsDir();
 8008810:	f7fa fd48 	bl	80032a4 <SaveEEportsDir>
							indMode =IND_PING;
 8008814:	4b70      	ldr	r3, [pc, #448]	; (80089d8 <PxMessagingTask+0x7b4>)
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
							break;
 800881a:	2300      	movs	r3, #0
 800881c:	4699      	mov	r9, r3
 800881e:	e56d      	b.n	80082fc <PxMessagingTask+0xd8>
							ClearEEportsDir();
 8008820:	f7fa fe36 	bl	8003490 <ClearEEportsDir>
							ClearROtopology();
 8008824:	f001 fa9e 	bl	8009d64 <ClearROtopology>
							osDelay(100);
 8008828:	2064      	movs	r0, #100	; 0x64
 800882a:	f005 f95a 	bl	800dae2 <osDelay>
							indMode =IND_TOPOLOGY;
 800882e:	4b6a      	ldr	r3, [pc, #424]	; (80089d8 <PxMessagingTask+0x7b4>)
 8008830:	2202      	movs	r2, #2
 8008832:	701a      	strb	r2, [r3, #0]
							break;
 8008834:	2300      	movs	r3, #0
 8008836:	4699      	mov	r9, r3
 8008838:	e560      	b.n	80082fc <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800883a:	f005 fa63 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 800883e:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 8008840:	465b      	mov	r3, fp
 8008842:	2bff      	cmp	r3, #255	; 0xff
 8008844:	d028      	beq.n	8008898 <PxMessagingTask+0x674>
							else if(dst == BOS_MULTICAST)
 8008846:	2bfe      	cmp	r3, #254	; 0xfe
 8008848:	d02f      	beq.n	80088aa <PxMessagingTask+0x686>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800884a:	4454      	add	r4, sl
 800884c:	4958      	ldr	r1, [pc, #352]	; (80089b0 <PxMessagingTask+0x78c>)
 800884e:	1861      	adds	r1, r4, r1
 8008850:	9a05      	ldr	r2, [sp, #20]
 8008852:	4862      	ldr	r0, [pc, #392]	; (80089dc <PxMessagingTask+0x7b8>)
 8008854:	f00a fa95 	bl	8012d82 <memcpy>
								temp =PcPort;
 8008858:	4c61      	ldr	r4, [pc, #388]	; (80089e0 <PxMessagingTask+0x7bc>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800885a:	4b60      	ldr	r3, [pc, #384]	; (80089dc <PxMessagingTask+0x7b8>)
 800885c:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800885e:	4b61      	ldr	r3, [pc, #388]	; (80089e4 <PxMessagingTask+0x7c0>)
 8008860:	4699      	mov	r9, r3
								temp =PcPort;
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	9307      	str	r3, [sp, #28]
								PcPort =port;
 8008866:	9a08      	ldr	r2, [sp, #32]
 8008868:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800886a:	2299      	movs	r2, #153	; 0x99
 800886c:	0092      	lsls	r2, r2, #2
 800886e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008870:	4658      	mov	r0, fp
 8008872:	f005 f9c9 	bl	800dc08 <FreeRTOS_CLIProcessCommand>
 8008876:	0007      	movs	r7, r0
								PcPort =temp;
 8008878:	9b07      	ldr	r3, [sp, #28]
 800887a:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800887c:	464b      	mov	r3, r9
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b60      	cmp	r3, #96	; 0x60
 8008882:	d01d      	beq.n	80088c0 <PxMessagingTask+0x69c>
							} while(xReturned != pdFALSE);
 8008884:	2f00      	cmp	r7, #0
 8008886:	d1ec      	bne.n	8008862 <PxMessagingTask+0x63e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008888:	2232      	movs	r2, #50	; 0x32
 800888a:	2100      	movs	r1, #0
 800888c:	4853      	ldr	r0, [pc, #332]	; (80089dc <PxMessagingTask+0x7b8>)
 800888e:	f00a fa81 	bl	8012d94 <memset>
							break;
 8008892:	2300      	movs	r3, #0
 8008894:	4699      	mov	r9, r3
 8008896:	e531      	b.n	80082fc <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008898:	9a05      	ldr	r2, [sp, #20]
 800889a:	3a01      	subs	r2, #1
 800889c:	4454      	add	r4, sl
 800889e:	4944      	ldr	r1, [pc, #272]	; (80089b0 <PxMessagingTask+0x78c>)
 80088a0:	1861      	adds	r1, r4, r1
 80088a2:	484e      	ldr	r0, [pc, #312]	; (80089dc <PxMessagingTask+0x7b8>)
 80088a4:	f00a fa6d 	bl	8012d82 <memcpy>
 80088a8:	e7d6      	b.n	8008858 <PxMessagingTask+0x634>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	9a07      	ldr	r2, [sp, #28]
 80088ae:	1a9a      	subs	r2, r3, r2
 80088b0:	3a02      	subs	r2, #2
 80088b2:	4454      	add	r4, sl
 80088b4:	493e      	ldr	r1, [pc, #248]	; (80089b0 <PxMessagingTask+0x78c>)
 80088b6:	1861      	adds	r1, r4, r1
 80088b8:	4848      	ldr	r0, [pc, #288]	; (80089dc <PxMessagingTask+0x7b8>)
 80088ba:	f00a fa62 	bl	8012d82 <memcpy>
 80088be:	e7cb      	b.n	8008858 <PxMessagingTask+0x634>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 80088c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80088c2:	f7f7 fc29 	bl	8000118 <strlen>
 80088c6:	0002      	movs	r2, r0
 80088c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088ca:	483d      	ldr	r0, [pc, #244]	; (80089c0 <PxMessagingTask+0x79c>)
 80088cc:	f00a fa59 	bl	8012d82 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 80088d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80088d2:	f7f7 fc21 	bl	8000118 <strlen>
 80088d6:	b282      	uxth	r2, r0
 80088d8:	2118      	movs	r1, #24
 80088da:	9804      	ldr	r0, [sp, #16]
 80088dc:	f7ff fae0 	bl	8007ea0 <SendMessageToModule>
									osDelay(10);
 80088e0:	200a      	movs	r0, #10
 80088e2:	f005 f8fe 	bl	800dae2 <osDelay>
 80088e6:	e7cd      	b.n	8008884 <PxMessagingTask+0x660>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80088e8:	f005 fa0c 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 80088ec:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80088ee:	f7f7 fc13 	bl	8000118 <strlen>
 80088f2:	0002      	movs	r2, r0
 80088f4:	2100      	movs	r1, #0
 80088f6:	0038      	movs	r0, r7
 80088f8:	f00a fa4c 	bl	8012d94 <memset>
							if(longMessage){
 80088fc:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <PxMessagingTask+0x7a0>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d013      	beq.n	800892c <PxMessagingTask+0x708>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008904:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <PxMessagingTask+0x7a4>)
 8008906:	4699      	mov	r9, r3
 8008908:	8818      	ldrh	r0, [r3, #0]
 800890a:	1838      	adds	r0, r7, r0
 800890c:	4454      	add	r4, sl
 800890e:	4928      	ldr	r1, [pc, #160]	; (80089b0 <PxMessagingTask+0x78c>)
 8008910:	1861      	adds	r1, r4, r1
 8008912:	9c05      	ldr	r4, [sp, #20]
 8008914:	0022      	movs	r2, r4
 8008916:	f00a fa34 	bl	8012d82 <memcpy>
								longMessageLastPtr +=numOfParams;
 800891a:	464b      	mov	r3, r9
 800891c:	881a      	ldrh	r2, [r3, #0]
 800891e:	46a4      	mov	ip, r4
 8008920:	4462      	add	r2, ip
 8008922:	464b      	mov	r3, r9
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	2300      	movs	r3, #0
 8008928:	4699      	mov	r9, r3
 800892a:	e4e7      	b.n	80082fc <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800892c:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <PxMessagingTask+0x7a4>)
 800892e:	4699      	mov	r9, r3
 8008930:	8818      	ldrh	r0, [r3, #0]
 8008932:	1838      	adds	r0, r7, r0
 8008934:	4454      	add	r4, sl
 8008936:	491e      	ldr	r1, [pc, #120]	; (80089b0 <PxMessagingTask+0x78c>)
 8008938:	1861      	adds	r1, r4, r1
 800893a:	9a05      	ldr	r2, [sp, #20]
 800893c:	f00a fa21 	bl	8012d82 <memcpy>
								longMessageLastPtr =0;
 8008940:	2400      	movs	r4, #0
 8008942:	464b      	mov	r3, r9
 8008944:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 8008946:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <PxMessagingTask+0x794>)
 8008948:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800894a:	0023      	movs	r3, r4
 800894c:	0022      	movs	r2, r4
 800894e:	0021      	movs	r1, r4
 8008950:	4825      	ldr	r0, [pc, #148]	; (80089e8 <PxMessagingTask+0x7c4>)
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	f006 fc3c 	bl	800f1d0 <xTaskGenericNotify>
 8008958:	46a1      	mov	r9, r4
 800895a:	e4cf      	b.n	80082fc <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800895c:	4b23      	ldr	r3, [pc, #140]	; (80089ec <PxMessagingTask+0x7c8>)
 800895e:	4a24      	ldr	r2, [pc, #144]	; (80089f0 <PxMessagingTask+0x7cc>)
 8008960:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <PxMessagingTask+0x7b4>)
 8008964:	2201      	movs	r2, #1
 8008966:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008968:	200a      	movs	r0, #10
 800896a:	f005 f8ba 	bl	800dae2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <PxMessagingTask+0x7d0>)
 8008974:	4a20      	ldr	r2, [pc, #128]	; (80089f8 <PxMessagingTask+0x7d4>)
 8008976:	60da      	str	r2, [r3, #12]
 8008978:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800897c:	46c0      	nop			; (mov r8, r8)
 800897e:	e7fd      	b.n	800897c <PxMessagingTask+0x758>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008980:	4f0b      	ldr	r7, [pc, #44]	; (80089b0 <PxMessagingTask+0x78c>)
 8008982:	19bf      	adds	r7, r7, r6
 8008984:	5d38      	ldrb	r0, [r7, r4]
 8008986:	2300      	movs	r3, #0
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	3319      	adds	r3, #25
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	f7ff f800 	bl	8007994 <SendMessageFromPort>
							osDelay(100);
 8008994:	2064      	movs	r0, #100	; 0x64
 8008996:	f005 f8a4 	bl	800dae2 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800899a:	5d3b      	ldrb	r3, [r7, r4]
 800899c:	4a07      	ldr	r2, [pc, #28]	; (80089bc <PxMessagingTask+0x798>)
 800899e:	7811      	ldrb	r1, [r2, #0]
 80089a0:	9a08      	ldr	r2, [sp, #32]
 80089a2:	9804      	ldr	r0, [sp, #16]
 80089a4:	f001 fa0a 	bl	8009dbc <remoteBootloaderUpdate>
							break;
 80089a8:	2300      	movs	r3, #0
 80089aa:	4699      	mov	r9, r3
 80089ac:	e4a6      	b.n	80082fc <PxMessagingTask+0xd8>
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	200008a4 	.word	0x200008a4
 80089b4:	20000b74 	.word	0x20000b74
 80089b8:	20000be8 	.word	0x20000be8
 80089bc:	20000b66 	.word	0x20000b66
 80089c0:	20000a28 	.word	0x20000a28
 80089c4:	200009e9 	.word	0x200009e9
 80089c8:	200009ea 	.word	0x200009ea
 80089cc:	200011c4 	.word	0x200011c4
 80089d0:	20000030 	.word	0x20000030
 80089d4:	20000614 	.word	0x20000614
 80089d8:	200009e8 	.word	0x200009e8
 80089dc:	20001190 	.word	0x20001190
 80089e0:	2000060b 	.word	0x2000060b
 80089e4:	20005a5c 	.word	0x20005a5c
 80089e8:	20001144 	.word	0x20001144
 80089ec:	20007ff0 	.word	0x20007ff0
 80089f0:	deadbeef 	.word	0xdeadbeef
 80089f4:	e000ed00 	.word	0xe000ed00
 80089f8:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 80089fc:	46a3      	mov	fp, r4
 80089fe:	230b      	movs	r3, #11
 8008a00:	4699      	mov	r9, r3
 8008a02:	44a1      	add	r9, r4
 8008a04:	4be7      	ldr	r3, [pc, #924]	; (8008da4 <PxMessagingTask+0xb80>)
 8008a06:	199b      	adds	r3, r3, r6
 8008a08:	464a      	mov	r2, r9
 8008a0a:	5c9b      	ldrb	r3, [r3, r2]
 8008a0c:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 8008a0e:	9b05      	ldr	r3, [sp, #20]
 8008a10:	2b0f      	cmp	r3, #15
 8008a12:	d100      	bne.n	8008a16 <PxMessagingTask+0x7f2>
 8008a14:	e088      	b.n	8008b28 <PxMessagingTask+0x904>
							if(numOfParams == 17)
 8008a16:	9b05      	ldr	r3, [sp, #20]
 8008a18:	2b11      	cmp	r3, #17
 8008a1a:	d100      	bne.n	8008a1e <PxMessagingTask+0x7fa>
 8008a1c:	e08c      	b.n	8008b38 <PxMessagingTask+0x914>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008a1e:	465b      	mov	r3, fp
 8008a20:	1c59      	adds	r1, r3, #1
 8008a22:	910c      	str	r1, [sp, #48]	; 0x30
 8008a24:	1c98      	adds	r0, r3, #2
 8008a26:	900d      	str	r0, [sp, #52]	; 0x34
 8008a28:	1cda      	adds	r2, r3, #3
 8008a2a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a2c:	4bdd      	ldr	r3, [pc, #884]	; (8008da4 <PxMessagingTask+0xb80>)
 8008a2e:	199b      	adds	r3, r3, r6
 8008a30:	465c      	mov	r4, fp
 8008a32:	5d1c      	ldrb	r4, [r3, r4]
 8008a34:	0624      	lsls	r4, r4, #24
 8008a36:	5c9a      	ldrb	r2, [r3, r2]
 8008a38:	18a4      	adds	r4, r4, r2
 8008a3a:	5c5a      	ldrb	r2, [r3, r1]
 8008a3c:	0412      	lsls	r2, r2, #16
 8008a3e:	18a4      	adds	r4, r4, r2
 8008a40:	5c1a      	ldrb	r2, [r3, r0]
 8008a42:	0212      	lsls	r2, r2, #8
 8008a44:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008a46:	465a      	mov	r2, fp
 8008a48:	3204      	adds	r2, #4
 8008a4a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	3105      	adds	r1, #5
 8008a50:	9110      	str	r1, [sp, #64]	; 0x40
 8008a52:	4658      	mov	r0, fp
 8008a54:	3006      	adds	r0, #6
 8008a56:	9011      	str	r0, [sp, #68]	; 0x44
 8008a58:	465f      	mov	r7, fp
 8008a5a:	3707      	adds	r7, #7
 8008a5c:	9707      	str	r7, [sp, #28]
 8008a5e:	5c9f      	ldrb	r7, [r3, r2]
 8008a60:	063f      	lsls	r7, r7, #24
 8008a62:	5c5a      	ldrb	r2, [r3, r1]
 8008a64:	0412      	lsls	r2, r2, #16
 8008a66:	18bf      	adds	r7, r7, r2
 8008a68:	9a07      	ldr	r2, [sp, #28]
 8008a6a:	5c9a      	ldrb	r2, [r3, r2]
 8008a6c:	18bf      	adds	r7, r7, r2
 8008a6e:	5c1b      	ldrb	r3, [r3, r0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	18ff      	adds	r7, r7, r3
							if(temp == false){
 8008a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d166      	bne.n	8008b48 <PxMessagingTask+0x924>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008a7a:	4bca      	ldr	r3, [pc, #808]	; (8008da4 <PxMessagingTask+0xb80>)
 8008a7c:	199b      	adds	r3, r3, r6
 8008a7e:	445b      	add	r3, fp
 8008a80:	7a5b      	ldrb	r3, [r3, #9]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d012      	beq.n	8008aac <PxMessagingTask+0x888>
 8008a86:	2138      	movs	r1, #56	; 0x38
 8008a88:	4369      	muls	r1, r5
 8008a8a:	4ac6      	ldr	r2, [pc, #792]	; (8008da4 <PxMessagingTask+0xb80>)
 8008a8c:	1852      	adds	r2, r2, r1
 8008a8e:	445a      	add	r2, fp
 8008a90:	7a91      	ldrb	r1, [r2, #10]
 8008a92:	2900      	cmp	r1, #0
 8008a94:	d00a      	beq.n	8008aac <PxMessagingTask+0x888>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008a96:	2038      	movs	r0, #56	; 0x38
 8008a98:	4368      	muls	r0, r5
 8008a9a:	4ac2      	ldr	r2, [pc, #776]	; (8008da4 <PxMessagingTask+0xb80>)
 8008a9c:	1812      	adds	r2, r2, r0
 8008a9e:	445a      	add	r2, fp
 8008aa0:	7a10      	ldrb	r0, [r2, #8]
 8008aa2:	9100      	str	r1, [sp, #0]
 8008aa4:	003a      	movs	r2, r7
 8008aa6:	0021      	movs	r1, r4
 8008aa8:	f7fe fe72 	bl	8007790 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008aac:	4bbd      	ldr	r3, [pc, #756]	; (8008da4 <PxMessagingTask+0xb80>)
 8008aae:	199b      	adds	r3, r3, r6
 8008ab0:	464a      	mov	r2, r9
 8008ab2:	5c9b      	ldrb	r3, [r3, r2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d012      	beq.n	8008ade <PxMessagingTask+0x8ba>
 8008ab8:	2138      	movs	r1, #56	; 0x38
 8008aba:	4369      	muls	r1, r5
 8008abc:	4ab9      	ldr	r2, [pc, #740]	; (8008da4 <PxMessagingTask+0xb80>)
 8008abe:	1852      	adds	r2, r2, r1
 8008ac0:	445a      	add	r2, fp
 8008ac2:	7b11      	ldrb	r1, [r2, #12]
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d00a      	beq.n	8008ade <PxMessagingTask+0x8ba>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008ac8:	2038      	movs	r0, #56	; 0x38
 8008aca:	4368      	muls	r0, r5
 8008acc:	4ab5      	ldr	r2, [pc, #724]	; (8008da4 <PxMessagingTask+0xb80>)
 8008ace:	1812      	adds	r2, r2, r0
 8008ad0:	445a      	add	r2, fp
 8008ad2:	7a10      	ldrb	r0, [r2, #8]
 8008ad4:	9100      	str	r1, [sp, #0]
 8008ad6:	003a      	movs	r2, r7
 8008ad8:	0021      	movs	r1, r4
 8008ada:	f7fe fe59 	bl	8007790 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008ade:	4bb1      	ldr	r3, [pc, #708]	; (8008da4 <PxMessagingTask+0xb80>)
 8008ae0:	199b      	adds	r3, r3, r6
 8008ae2:	445b      	add	r3, fp
 8008ae4:	7b5b      	ldrb	r3, [r3, #13]
 8008ae6:	9307      	str	r3, [sp, #28]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4691      	mov	r9, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <PxMessagingTask+0x8d0>
 8008af0:	f7ff fc04 	bl	80082fc <PxMessagingTask+0xd8>
 8008af4:	3238      	adds	r2, #56	; 0x38
 8008af6:	436a      	muls	r2, r5
 8008af8:	4baa      	ldr	r3, [pc, #680]	; (8008da4 <PxMessagingTask+0xb80>)
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	445b      	add	r3, fp
 8008afe:	7b9a      	ldrb	r2, [r3, #14]
 8008b00:	454a      	cmp	r2, r9
 8008b02:	d101      	bne.n	8008b08 <PxMessagingTask+0x8e4>
 8008b04:	f000 febb 	bl	800987e <PxMessagingTask+0x165a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8008b08:	2138      	movs	r1, #56	; 0x38
 8008b0a:	4369      	muls	r1, r5
 8008b0c:	4ba5      	ldr	r3, [pc, #660]	; (8008da4 <PxMessagingTask+0xb80>)
 8008b0e:	185b      	adds	r3, r3, r1
 8008b10:	445b      	add	r3, fp
 8008b12:	7a18      	ldrb	r0, [r3, #8]
 8008b14:	9200      	str	r2, [sp, #0]
 8008b16:	9b07      	ldr	r3, [sp, #28]
 8008b18:	003a      	movs	r2, r7
 8008b1a:	0021      	movs	r1, r4
 8008b1c:	f7fe fe38 	bl	8007790 <SetupDMAStreams>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	f7ff fbea 	bl	80082fc <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 8008b28:	2238      	movs	r2, #56	; 0x38
 8008b2a:	436a      	muls	r2, r5
 8008b2c:	4b9d      	ldr	r3, [pc, #628]	; (8008da4 <PxMessagingTask+0xb80>)
 8008b2e:	189b      	adds	r3, r3, r2
 8008b30:	191c      	adds	r4, r3, r4
 8008b32:	7b63      	ldrb	r3, [r4, #13]
 8008b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b36:	e772      	b.n	8008a1e <PxMessagingTask+0x7fa>
								temp =cMessage[port - 1][15 + shift];
 8008b38:	2238      	movs	r2, #56	; 0x38
 8008b3a:	436a      	muls	r2, r5
 8008b3c:	4b99      	ldr	r3, [pc, #612]	; (8008da4 <PxMessagingTask+0xb80>)
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	445b      	add	r3, fp
 8008b42:	7bdb      	ldrb	r3, [r3, #15]
 8008b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b46:	e76a      	b.n	8008a1e <PxMessagingTask+0x7fa>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8008b48:	2338      	movs	r3, #56	; 0x38
 8008b4a:	436b      	muls	r3, r5
 8008b4c:	4c95      	ldr	r4, [pc, #596]	; (8008da4 <PxMessagingTask+0xb80>)
 8008b4e:	18e4      	adds	r4, r4, r3
 8008b50:	465b      	mov	r3, fp
 8008b52:	18e6      	adds	r6, r4, r3
 8008b54:	7a31      	ldrb	r1, [r6, #8]
 8008b56:	20e4      	movs	r0, #228	; 0xe4
 8008b58:	f002 fd64 	bl	800b624 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	5ce3      	ldrb	r3, [r4, r3]
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b64:	5ca1      	ldrb	r1, [r4, r2]
 8008b66:	18c9      	adds	r1, r1, r3
 8008b68:	b289      	uxth	r1, r1
 8008b6a:	20e5      	movs	r0, #229	; 0xe5
 8008b6c:	f002 fd5a 	bl	800b624 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8008b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b72:	5ce3      	ldrb	r3, [r4, r3]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b78:	5ca1      	ldrb	r1, [r4, r2]
 8008b7a:	18c9      	adds	r1, r1, r3
 8008b7c:	b289      	uxth	r1, r1
 8008b7e:	20e6      	movs	r0, #230	; 0xe6
 8008b80:	f002 fd50 	bl	800b624 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8008b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b86:	5ce3      	ldrb	r3, [r4, r3]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b8c:	5ca1      	ldrb	r1, [r4, r2]
 8008b8e:	18c9      	adds	r1, r1, r3
 8008b90:	b289      	uxth	r1, r1
 8008b92:	20e7      	movs	r0, #231	; 0xe7
 8008b94:	f002 fd46 	bl	800b624 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8008b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b9a:	5ce3      	ldrb	r3, [r4, r3]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	9a07      	ldr	r2, [sp, #28]
 8008ba0:	5ca1      	ldrb	r1, [r4, r2]
 8008ba2:	18c9      	adds	r1, r1, r3
 8008ba4:	b289      	uxth	r1, r1
 8008ba6:	20e8      	movs	r0, #232	; 0xe8
 8008ba8:	f002 fd3c 	bl	800b624 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8008bac:	7a73      	ldrb	r3, [r6, #9]
 8008bae:	021b      	lsls	r3, r3, #8
 8008bb0:	7ab1      	ldrb	r1, [r6, #10]
 8008bb2:	18c9      	adds	r1, r1, r3
 8008bb4:	b289      	uxth	r1, r1
 8008bb6:	20e9      	movs	r0, #233	; 0xe9
 8008bb8:	f002 fd34 	bl	800b624 <EE_WriteVariable>
								if(numOfParams == 19)
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	2b13      	cmp	r3, #19
 8008bc0:	d116      	bne.n	8008bf0 <PxMessagingTask+0x9cc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8008bc2:	3325      	adds	r3, #37	; 0x25
 8008bc4:	436b      	muls	r3, r5
 8008bc6:	4d77      	ldr	r5, [pc, #476]	; (8008da4 <PxMessagingTask+0xb80>)
 8008bc8:	18ed      	adds	r5, r5, r3
 8008bca:	464b      	mov	r3, r9
 8008bcc:	5ceb      	ldrb	r3, [r5, r3]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	445d      	add	r5, fp
 8008bd2:	7b29      	ldrb	r1, [r5, #12]
 8008bd4:	18c9      	adds	r1, r1, r3
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	20ea      	movs	r0, #234	; 0xea
 8008bda:	f002 fd23 	bl	800b624 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	4b71      	ldr	r3, [pc, #452]	; (8008da8 <PxMessagingTask+0xb84>)
 8008be4:	4a71      	ldr	r2, [pc, #452]	; (8008dac <PxMessagingTask+0xb88>)
 8008be6:	60da      	str	r2, [r3, #12]
 8008be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	e7fd      	b.n	8008bec <PxMessagingTask+0x9c8>
								if(numOfParams == 21)
 8008bf0:	9b05      	ldr	r3, [sp, #20]
 8008bf2:	2b15      	cmp	r3, #21
 8008bf4:	d1f3      	bne.n	8008bde <PxMessagingTask+0x9ba>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8008bf6:	3323      	adds	r3, #35	; 0x23
 8008bf8:	435d      	muls	r5, r3
 8008bfa:	4b6a      	ldr	r3, [pc, #424]	; (8008da4 <PxMessagingTask+0xb80>)
 8008bfc:	195b      	adds	r3, r3, r5
 8008bfe:	445b      	add	r3, fp
 8008c00:	7b5a      	ldrb	r2, [r3, #13]
 8008c02:	0212      	lsls	r2, r2, #8
 8008c04:	7b99      	ldrb	r1, [r3, #14]
 8008c06:	1889      	adds	r1, r1, r2
 8008c08:	b289      	uxth	r1, r1
 8008c0a:	20eb      	movs	r0, #235	; 0xeb
 8008c0c:	f002 fd0a 	bl	800b624 <EE_WriteVariable>
 8008c10:	e7e5      	b.n	8008bde <PxMessagingTask+0x9ba>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008c12:	4f64      	ldr	r7, [pc, #400]	; (8008da4 <PxMessagingTask+0xb80>)
 8008c14:	19bf      	adds	r7, r7, r6
 8008c16:	1939      	adds	r1, r7, r4
 8008c18:	7a8b      	ldrb	r3, [r1, #10]
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	7aca      	ldrb	r2, [r1, #11]
 8008c1e:	4864      	ldr	r0, [pc, #400]	; (8008db0 <PxMessagingTask+0xb8c>)
 8008c20:	7803      	ldrb	r3, [r0, #0]
 8008c22:	4699      	mov	r9, r3
 8008c24:	7a4b      	ldrb	r3, [r1, #9]
 8008c26:	469b      	mov	fp, r3
 8008c28:	7b08      	ldrb	r0, [r1, #12]
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	1e58      	subs	r0, r3, #1
 8008c2e:	4183      	sbcs	r3, r0
 8008c30:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c32:	7908      	ldrb	r0, [r1, #4]
 8008c34:	0603      	lsls	r3, r0, #24
 8008c36:	469c      	mov	ip, r3
 8008c38:	7948      	ldrb	r0, [r1, #5]
 8008c3a:	0400      	lsls	r0, r0, #16
 8008c3c:	4460      	add	r0, ip
 8008c3e:	79cb      	ldrb	r3, [r1, #7]
 8008c40:	469c      	mov	ip, r3
 8008c42:	4460      	add	r0, ip
 8008c44:	798b      	ldrb	r3, [r1, #6]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	469c      	mov	ip, r3
 8008c4a:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008c4c:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c4e:	5d38      	ldrb	r0, [r7, r4]
 8008c50:	0600      	lsls	r0, r0, #24
 8008c52:	78cc      	ldrb	r4, [r1, #3]
 8008c54:	1900      	adds	r0, r0, r4
 8008c56:	784c      	ldrb	r4, [r1, #1]
 8008c58:	0424      	lsls	r4, r4, #16
 8008c5a:	1900      	adds	r0, r0, r4
 8008c5c:	788c      	ldrb	r4, [r1, #2]
 8008c5e:	0224      	lsls	r4, r4, #8
 8008c60:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008c62:	9001      	str	r0, [sp, #4]
 8008c64:	7a09      	ldrb	r1, [r1, #8]
 8008c66:	9100      	str	r1, [sp, #0]
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	4658      	mov	r0, fp
 8008c6e:	f7ff f93d 	bl	8007eec <StartScastDMAStream>
							break;
 8008c72:	2300      	movs	r3, #0
 8008c74:	4699      	mov	r9, r3
 8008c76:	f7ff fb41 	bl	80082fc <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008c7a:	0023      	movs	r3, r4
 8008c7c:	4a49      	ldr	r2, [pc, #292]	; (8008da4 <PxMessagingTask+0xb80>)
 8008c7e:	1992      	adds	r2, r2, r6
 8008c80:	5d12      	ldrb	r2, [r2, r4]
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	d000      	beq.n	8008c88 <PxMessagingTask+0xa64>
 8008c86:	e099      	b.n	8008dbc <PxMessagingTask+0xb98>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008c88:	3238      	adds	r2, #56	; 0x38
 8008c8a:	436a      	muls	r2, r5
 8008c8c:	4b45      	ldr	r3, [pc, #276]	; (8008da4 <PxMessagingTask+0xb80>)
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	191c      	adds	r4, r3, r4
 8008c92:	78a3      	ldrb	r3, [r4, #2]
 8008c94:	061b      	lsls	r3, r3, #24
 8008c96:	78e2      	ldrb	r2, [r4, #3]
 8008c98:	0412      	lsls	r2, r2, #16
 8008c9a:	189b      	adds	r3, r3, r2
 8008c9c:	7962      	ldrb	r2, [r4, #5]
 8008c9e:	189b      	adds	r3, r3, r2
 8008ca0:	7922      	ldrb	r2, [r4, #4]
 8008ca2:	0212      	lsls	r2, r2, #8
 8008ca4:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008ca6:	7862      	ldrb	r2, [r4, #1]
 8008ca8:	3a01      	subs	r2, #1
 8008caa:	b2d1      	uxtb	r1, r2
 8008cac:	2907      	cmp	r1, #7
 8008cae:	d901      	bls.n	8008cb4 <PxMessagingTask+0xa90>
 8008cb0:	f000 fdcc 	bl	800984c <PxMessagingTask+0x1628>
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	493e      	ldr	r1, [pc, #248]	; (8008db4 <PxMessagingTask+0xb90>)
 8008cba:	588a      	ldr	r2, [r1, r2]
 8008cbc:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	4b3d      	ldr	r3, [pc, #244]	; (8008db8 <PxMessagingTask+0xb94>)
 8008cc2:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	211f      	movs	r1, #31
 8008cc8:	9804      	ldr	r0, [sp, #16]
 8008cca:	f7ff f8e9 	bl	8007ea0 <SendMessageToModule>
										break;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4699      	mov	r9, r3
 8008cd2:	f7ff fb13 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	4b37      	ldr	r3, [pc, #220]	; (8008db8 <PxMessagingTask+0xb94>)
 8008cda:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008cdc:	2201      	movs	r2, #1
 8008cde:	211f      	movs	r1, #31
 8008ce0:	9804      	ldr	r0, [sp, #16]
 8008ce2:	f7ff f8dd 	bl	8007ea0 <SendMessageToModule>
										break;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4699      	mov	r9, r3
 8008cea:	f7ff fb07 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008cee:	8819      	ldrh	r1, [r3, #0]
 8008cf0:	4a31      	ldr	r2, [pc, #196]	; (8008db8 <PxMessagingTask+0xb94>)
 8008cf2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	0a1b      	lsrs	r3, r3, #8
 8008cf8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	211f      	movs	r1, #31
 8008cfe:	9804      	ldr	r0, [sp, #16]
 8008d00:	f7ff f8ce 	bl	8007ea0 <SendMessageToModule>
										break;
 8008d04:	2300      	movs	r3, #0
 8008d06:	4699      	mov	r9, r3
 8008d08:	f7ff faf8 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008d0c:	8819      	ldrh	r1, [r3, #0]
 8008d0e:	4a2a      	ldr	r2, [pc, #168]	; (8008db8 <PxMessagingTask+0xb94>)
 8008d10:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	121b      	asrs	r3, r3, #8
 8008d18:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	211f      	movs	r1, #31
 8008d1e:	9804      	ldr	r0, [sp, #16]
 8008d20:	f7ff f8be 	bl	8007ea0 <SendMessageToModule>
										break;
 8008d24:	2300      	movs	r3, #0
 8008d26:	4699      	mov	r9, r3
 8008d28:	f7ff fae8 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008d2c:	6819      	ldr	r1, [r3, #0]
 8008d2e:	4a22      	ldr	r2, [pc, #136]	; (8008db8 <PxMessagingTask+0xb94>)
 8008d30:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	0a09      	lsrs	r1, r1, #8
 8008d36:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	0c09      	lsrs	r1, r1, #16
 8008d3c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	0e1b      	lsrs	r3, r3, #24
 8008d42:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008d44:	2204      	movs	r2, #4
 8008d46:	211f      	movs	r1, #31
 8008d48:	9804      	ldr	r0, [sp, #16]
 8008d4a:	f7ff f8a9 	bl	8007ea0 <SendMessageToModule>
										break;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4699      	mov	r9, r3
 8008d52:	f7ff fad3 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	4a17      	ldr	r2, [pc, #92]	; (8008db8 <PxMessagingTask+0xb94>)
 8008d5a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	1209      	asrs	r1, r1, #8
 8008d60:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	1409      	asrs	r1, r1, #16
 8008d66:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	161b      	asrs	r3, r3, #24
 8008d6c:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008d6e:	2204      	movs	r2, #4
 8008d70:	211f      	movs	r1, #31
 8008d72:	9804      	ldr	r0, [sp, #16]
 8008d74:	f7ff f894 	bl	8007ea0 <SendMessageToModule>
										break;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4699      	mov	r9, r3
 8008d7c:	f7ff fabe 	bl	80082fc <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8008d80:	7819      	ldrb	r1, [r3, #0]
 8008d82:	4a0d      	ldr	r2, [pc, #52]	; (8008db8 <PxMessagingTask+0xb94>)
 8008d84:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8008d86:	7859      	ldrb	r1, [r3, #1]
 8008d88:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8008d8a:	7899      	ldrb	r1, [r3, #2]
 8008d8c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8008d8e:	78db      	ldrb	r3, [r3, #3]
 8008d90:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008d92:	2208      	movs	r2, #8
 8008d94:	211f      	movs	r1, #31
 8008d96:	9804      	ldr	r0, [sp, #16]
 8008d98:	f7ff f882 	bl	8007ea0 <SendMessageToModule>
										break; // You cannot bitwise floats
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4699      	mov	r9, r3
 8008da0:	f7ff faac 	bl	80082fc <PxMessagingTask+0xd8>
 8008da4:	200008a4 	.word	0x200008a4
 8008da8:	e000ed00 	.word	0xe000ed00
 8008dac:	05fa0004 	.word	0x05fa0004
 8008db0:	20000b66 	.word	0x20000b66
 8008db4:	080191fc 	.word	0x080191fc
 8008db8:	20000a28 	.word	0x20000a28
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8008dbc:	2a02      	cmp	r2, #2
 8008dbe:	d000      	beq.n	8008dc2 <PxMessagingTask+0xb9e>
 8008dc0:	e09f      	b.n	8008f02 <PxMessagingTask+0xcde>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8008dc2:	48ef      	ldr	r0, [pc, #956]	; (8009180 <PxMessagingTask+0xf5c>)
 8008dc4:	3236      	adds	r2, #54	; 0x36
 8008dc6:	436a      	muls	r2, r5
 8008dc8:	1882      	adds	r2, r0, r2
 8008dca:	1851      	adds	r1, r2, r1
 8008dcc:	3901      	subs	r1, #1
 8008dce:	2200      	movs	r2, #0
 8008dd0:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	4453      	add	r3, sl
 8008dd6:	1818      	adds	r0, r3, r0
 8008dd8:	f7fa fbea 	bl	80035b0 <IsModuleParameter>
 8008ddc:	9007      	str	r0, [sp, #28]
								if(temp == 0){ // Parameter does not exist
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d108      	bne.n	8008df4 <PxMessagingTask+0xbd0>
									SendMessageToModule(src,
 8008de2:	2201      	movs	r2, #1
 8008de4:	211f      	movs	r1, #31
 8008de6:	9804      	ldr	r0, [sp, #16]
 8008de8:	f7ff f85a 	bl	8007ea0 <SendMessageToModule>
 8008dec:	2300      	movs	r3, #0
 8008dee:	4699      	mov	r9, r3
 8008df0:	f7ff fa84 	bl	80082fc <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8008df4:	3801      	subs	r0, #1
 8008df6:	4ae3      	ldr	r2, [pc, #908]	; (8009184 <PxMessagingTask+0xf60>)
 8008df8:	210c      	movs	r1, #12
 8008dfa:	4341      	muls	r1, r0
 8008dfc:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8008dfe:	1852      	adds	r2, r2, r1
 8008e00:	7912      	ldrb	r2, [r2, #4]
 8008e02:	49e1      	ldr	r1, [pc, #900]	; (8009188 <PxMessagingTask+0xf64>)
 8008e04:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8008e06:	3a01      	subs	r2, #1
 8008e08:	b2d1      	uxtb	r1, r2
 8008e0a:	2907      	cmp	r1, #7
 8008e0c:	d901      	bls.n	8008e12 <PxMessagingTask+0xbee>
 8008e0e:	f000 fd21 	bl	8009854 <PxMessagingTask+0x1630>
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	0092      	lsls	r2, r2, #2
 8008e16:	49dd      	ldr	r1, [pc, #884]	; (800918c <PxMessagingTask+0xf68>)
 8008e18:	588a      	ldr	r2, [r1, r2]
 8008e1a:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 8008e1c:	781a      	ldrb	r2, [r3, #0]
 8008e1e:	4bda      	ldr	r3, [pc, #872]	; (8009188 <PxMessagingTask+0xf64>)
 8008e20:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008e22:	2202      	movs	r2, #2
 8008e24:	211f      	movs	r1, #31
 8008e26:	9804      	ldr	r0, [sp, #16]
 8008e28:	f7ff f83a 	bl	8007ea0 <SendMessageToModule>
											break;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4699      	mov	r9, r3
 8008e30:	f7ff fa64 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	4bd4      	ldr	r3, [pc, #848]	; (8009188 <PxMessagingTask+0xf64>)
 8008e38:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	211f      	movs	r1, #31
 8008e3e:	9804      	ldr	r0, [sp, #16]
 8008e40:	f7ff f82e 	bl	8007ea0 <SendMessageToModule>
											break;
 8008e44:	2300      	movs	r3, #0
 8008e46:	4699      	mov	r9, r3
 8008e48:	f7ff fa58 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008e4c:	8819      	ldrh	r1, [r3, #0]
 8008e4e:	4ace      	ldr	r2, [pc, #824]	; (8009188 <PxMessagingTask+0xf64>)
 8008e50:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	0a1b      	lsrs	r3, r3, #8
 8008e56:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008e58:	2203      	movs	r2, #3
 8008e5a:	211f      	movs	r1, #31
 8008e5c:	9804      	ldr	r0, [sp, #16]
 8008e5e:	f7ff f81f 	bl	8007ea0 <SendMessageToModule>
											break;
 8008e62:	2300      	movs	r3, #0
 8008e64:	4699      	mov	r9, r3
 8008e66:	f7ff fa49 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008e6a:	8819      	ldrh	r1, [r3, #0]
 8008e6c:	4ac6      	ldr	r2, [pc, #792]	; (8009188 <PxMessagingTask+0xf64>)
 8008e6e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b21b      	sxth	r3, r3
 8008e74:	121b      	asrs	r3, r3, #8
 8008e76:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008e78:	2203      	movs	r2, #3
 8008e7a:	211f      	movs	r1, #31
 8008e7c:	9804      	ldr	r0, [sp, #16]
 8008e7e:	f7ff f80f 	bl	8007ea0 <SendMessageToModule>
											break;
 8008e82:	2300      	movs	r3, #0
 8008e84:	4699      	mov	r9, r3
 8008e86:	f7ff fa39 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008e8a:	6819      	ldr	r1, [r3, #0]
 8008e8c:	4abe      	ldr	r2, [pc, #760]	; (8009188 <PxMessagingTask+0xf64>)
 8008e8e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008e90:	6819      	ldr	r1, [r3, #0]
 8008e92:	0a09      	lsrs	r1, r1, #8
 8008e94:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008e96:	6819      	ldr	r1, [r3, #0]
 8008e98:	0c09      	lsrs	r1, r1, #16
 8008e9a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ea2:	2205      	movs	r2, #5
 8008ea4:	211f      	movs	r1, #31
 8008ea6:	9804      	ldr	r0, [sp, #16]
 8008ea8:	f7fe fffa 	bl	8007ea0 <SendMessageToModule>
											break;
 8008eac:	2300      	movs	r3, #0
 8008eae:	4699      	mov	r9, r3
 8008eb0:	f7ff fa24 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008eb4:	6819      	ldr	r1, [r3, #0]
 8008eb6:	4ab4      	ldr	r2, [pc, #720]	; (8009188 <PxMessagingTask+0xf64>)
 8008eb8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008eba:	6819      	ldr	r1, [r3, #0]
 8008ebc:	1209      	asrs	r1, r1, #8
 8008ebe:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	1409      	asrs	r1, r1, #16
 8008ec4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	161b      	asrs	r3, r3, #24
 8008eca:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ecc:	2205      	movs	r2, #5
 8008ece:	211f      	movs	r1, #31
 8008ed0:	9804      	ldr	r0, [sp, #16]
 8008ed2:	f7fe ffe5 	bl	8007ea0 <SendMessageToModule>
											break;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4699      	mov	r9, r3
 8008eda:	f7ff fa0f 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8008ede:	7819      	ldrb	r1, [r3, #0]
 8008ee0:	4aa9      	ldr	r2, [pc, #676]	; (8009188 <PxMessagingTask+0xf64>)
 8008ee2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8008ee4:	7859      	ldrb	r1, [r3, #1]
 8008ee6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8008ee8:	7899      	ldrb	r1, [r3, #2]
 8008eea:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ef0:	2209      	movs	r2, #9
 8008ef2:	211f      	movs	r1, #31
 8008ef4:	9804      	ldr	r0, [sp, #16]
 8008ef6:	f7fe ffd3 	bl	8007ea0 <SendMessageToModule>
											break;
 8008efa:	2300      	movs	r3, #0
 8008efc:	4699      	mov	r9, r3
 8008efe:	f7ff f9fd 	bl	80082fc <PxMessagingTask+0xd8>
								}
 8008f02:	2300      	movs	r3, #0
 8008f04:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8008f06:	2a02      	cmp	r2, #2
 8008f08:	d801      	bhi.n	8008f0e <PxMessagingTask+0xcea>
 8008f0a:	f7ff f9f7 	bl	80082fc <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 8008f0e:	3a04      	subs	r2, #4
 8008f10:	0092      	lsls	r2, r2, #2
 8008f12:	4b9f      	ldr	r3, [pc, #636]	; (8009190 <PxMessagingTask+0xf6c>)
 8008f14:	58d1      	ldr	r1, [r2, r3]
 8008f16:	220f      	movs	r2, #15
 8008f18:	400a      	ands	r2, r1
 8008f1a:	4b9b      	ldr	r3, [pc, #620]	; (8009188 <PxMessagingTask+0xf64>)
 8008f1c:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8008f1e:	454a      	cmp	r2, r9
 8008f20:	d106      	bne.n	8008f30 <PxMessagingTask+0xd0c>
									SendMessageToModule(src,
 8008f22:	2201      	movs	r2, #1
 8008f24:	211f      	movs	r1, #31
 8008f26:	9804      	ldr	r0, [sp, #16]
 8008f28:	f7fe ffba 	bl	8007ea0 <SendMessageToModule>
 8008f2c:	f7ff f9e6 	bl	80082fc <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8008f30:	0c09      	lsrs	r1, r1, #16
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	059b      	lsls	r3, r3, #22
 8008f36:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8008f38:	3a01      	subs	r2, #1
 8008f3a:	b2d0      	uxtb	r0, r2
 8008f3c:	2807      	cmp	r0, #7
 8008f3e:	d901      	bls.n	8008f44 <PxMessagingTask+0xd20>
 8008f40:	f000 fc8c 	bl	800985c <PxMessagingTask+0x1638>
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	4892      	ldr	r0, [pc, #584]	; (8009194 <PxMessagingTask+0xf70>)
 8008f4a:	5882      	ldr	r2, [r0, r2]
 8008f4c:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	4b8d      	ldr	r3, [pc, #564]	; (8009188 <PxMessagingTask+0xf64>)
 8008f52:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008f54:	2202      	movs	r2, #2
 8008f56:	211f      	movs	r1, #31
 8008f58:	9804      	ldr	r0, [sp, #16]
 8008f5a:	f7fe ffa1 	bl	8007ea0 <SendMessageToModule>
											break;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4699      	mov	r9, r3
 8008f62:	f7ff f9cb 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	4b87      	ldr	r3, [pc, #540]	; (8009188 <PxMessagingTask+0xf64>)
 8008f6a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	211f      	movs	r1, #31
 8008f70:	9804      	ldr	r0, [sp, #16]
 8008f72:	f7fe ff95 	bl	8007ea0 <SendMessageToModule>
											break;
 8008f76:	2300      	movs	r3, #0
 8008f78:	4699      	mov	r9, r3
 8008f7a:	f7ff f9bf 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008f7e:	8819      	ldrh	r1, [r3, #0]
 8008f80:	4a81      	ldr	r2, [pc, #516]	; (8009188 <PxMessagingTask+0xf64>)
 8008f82:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	211f      	movs	r1, #31
 8008f8e:	9804      	ldr	r0, [sp, #16]
 8008f90:	f7fe ff86 	bl	8007ea0 <SendMessageToModule>
											break;
 8008f94:	2300      	movs	r3, #0
 8008f96:	4699      	mov	r9, r3
 8008f98:	f7ff f9b0 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008f9c:	8819      	ldrh	r1, [r3, #0]
 8008f9e:	4a7a      	ldr	r2, [pc, #488]	; (8009188 <PxMessagingTask+0xf64>)
 8008fa0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	121b      	asrs	r3, r3, #8
 8008fa8:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008faa:	2203      	movs	r2, #3
 8008fac:	211f      	movs	r1, #31
 8008fae:	9804      	ldr	r0, [sp, #16]
 8008fb0:	f7fe ff76 	bl	8007ea0 <SendMessageToModule>
											break;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4699      	mov	r9, r3
 8008fb8:	f7ff f9a0 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	4a72      	ldr	r2, [pc, #456]	; (8009188 <PxMessagingTask+0xf64>)
 8008fc0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	0a09      	lsrs	r1, r1, #8
 8008fc6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	0c09      	lsrs	r1, r1, #16
 8008fcc:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	0e1b      	lsrs	r3, r3, #24
 8008fd2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008fd4:	2205      	movs	r2, #5
 8008fd6:	211f      	movs	r1, #31
 8008fd8:	9804      	ldr	r0, [sp, #16]
 8008fda:	f7fe ff61 	bl	8007ea0 <SendMessageToModule>
											break;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4699      	mov	r9, r3
 8008fe2:	f7ff f98b 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008fe6:	6819      	ldr	r1, [r3, #0]
 8008fe8:	4a67      	ldr	r2, [pc, #412]	; (8009188 <PxMessagingTask+0xf64>)
 8008fea:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008fec:	6819      	ldr	r1, [r3, #0]
 8008fee:	1209      	asrs	r1, r1, #8
 8008ff0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	1409      	asrs	r1, r1, #16
 8008ff6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	161b      	asrs	r3, r3, #24
 8008ffc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ffe:	2205      	movs	r2, #5
 8009000:	211f      	movs	r1, #31
 8009002:	9804      	ldr	r0, [sp, #16]
 8009004:	f7fe ff4c 	bl	8007ea0 <SendMessageToModule>
											break;
 8009008:	2300      	movs	r3, #0
 800900a:	4699      	mov	r9, r3
 800900c:	f7ff f976 	bl	80082fc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	4b5d      	ldr	r3, [pc, #372]	; (8009188 <PxMessagingTask+0xf64>)
 8009014:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009016:	4a60      	ldr	r2, [pc, #384]	; (8009198 <PxMessagingTask+0xf74>)
 8009018:	188a      	adds	r2, r1, r2
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800901e:	4a5f      	ldr	r2, [pc, #380]	; (800919c <PxMessagingTask+0xf78>)
 8009020:	188a      	adds	r2, r1, r2
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009026:	4a5e      	ldr	r2, [pc, #376]	; (80091a0 <PxMessagingTask+0xf7c>)
 8009028:	4694      	mov	ip, r2
 800902a:	4461      	add	r1, ip
 800902c:	780a      	ldrb	r2, [r1, #0]
 800902e:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009030:	2209      	movs	r2, #9
 8009032:	211f      	movs	r1, #31
 8009034:	9804      	ldr	r0, [sp, #16]
 8009036:	f7fe ff33 	bl	8007ea0 <SendMessageToModule>
											break;
 800903a:	2300      	movs	r3, #0
 800903c:	4699      	mov	r9, r3
 800903e:	f7ff f95d 	bl	80082fc <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009042:	4b58      	ldr	r3, [pc, #352]	; (80091a4 <PxMessagingTask+0xf80>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2002      	movs	r0, #2
 800904a:	4240      	negs	r0, r0
 800904c:	17c1      	asrs	r1, r0, #31
 800904e:	1812      	adds	r2, r2, r0
 8009050:	414b      	adcs	r3, r1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00c      	beq.n	8009070 <PxMessagingTask+0xe4c>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009056:	4b54      	ldr	r3, [pc, #336]	; (80091a8 <PxMessagingTask+0xf84>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b10      	cmp	r3, #16
 800905c:	d101      	bne.n	8009062 <PxMessagingTask+0xe3e>
 800905e:	f000 fc13 	bl	8009888 <PxMessagingTask+0x1664>
								responseStatus =BOS_OK;
 8009062:	4b51      	ldr	r3, [pc, #324]	; (80091a8 <PxMessagingTask+0xf84>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	2300      	movs	r3, #0
 800906a:	4699      	mov	r9, r3
 800906c:	f7ff f946 	bl	80082fc <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <PxMessagingTask+0xe54>
 8009074:	2a01      	cmp	r2, #1
 8009076:	d8ee      	bhi.n	8009056 <PxMessagingTask+0xe32>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009078:	2138      	movs	r1, #56	; 0x38
 800907a:	4369      	muls	r1, r5
 800907c:	4a40      	ldr	r2, [pc, #256]	; (8009180 <PxMessagingTask+0xf5c>)
 800907e:	1852      	adds	r2, r2, r1
 8009080:	5d12      	ldrb	r2, [r2, r4]
 8009082:	494a      	ldr	r1, [pc, #296]	; (80091ac <PxMessagingTask+0xf88>)
 8009084:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009086:	2a08      	cmp	r2, #8
 8009088:	d8e5      	bhi.n	8009056 <PxMessagingTask+0xe32>
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	4948      	ldr	r1, [pc, #288]	; (80091b0 <PxMessagingTask+0xf8c>)
 800908e:	588a      	ldr	r2, [r1, r2]
 8009090:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009092:	4b45      	ldr	r3, [pc, #276]	; (80091a8 <PxMessagingTask+0xf84>)
 8009094:	2210      	movs	r2, #16
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	4699      	mov	r9, r3
 800909c:	f7ff f92e 	bl	80082fc <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80090a0:	4a40      	ldr	r2, [pc, #256]	; (80091a4 <PxMessagingTask+0xf80>)
 80090a2:	2038      	movs	r0, #56	; 0x38
 80090a4:	4368      	muls	r0, r5
 80090a6:	4936      	ldr	r1, [pc, #216]	; (8009180 <PxMessagingTask+0xf5c>)
 80090a8:	1809      	adds	r1, r1, r0
 80090aa:	1909      	adds	r1, r1, r4
 80090ac:	784b      	ldrb	r3, [r1, #1]
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	6053      	str	r3, [r2, #4]
										break;
 80090b4:	e7cf      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 80090b6:	4a3b      	ldr	r2, [pc, #236]	; (80091a4 <PxMessagingTask+0xf80>)
 80090b8:	2038      	movs	r0, #56	; 0x38
 80090ba:	4368      	muls	r0, r5
 80090bc:	4930      	ldr	r1, [pc, #192]	; (8009180 <PxMessagingTask+0xf5c>)
 80090be:	1809      	adds	r1, r1, r0
 80090c0:	1909      	adds	r1, r1, r4
 80090c2:	2301      	movs	r3, #1
 80090c4:	56cb      	ldrsb	r3, [r1, r3]
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	17db      	asrs	r3, r3, #31
 80090ca:	6053      	str	r3, [r2, #4]
										break;
 80090cc:	e7c3      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 80090ce:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <PxMessagingTask+0xf80>)
 80090d0:	2038      	movs	r0, #56	; 0x38
 80090d2:	4368      	muls	r0, r5
 80090d4:	492a      	ldr	r1, [pc, #168]	; (8009180 <PxMessagingTask+0xf5c>)
 80090d6:	1809      	adds	r1, r1, r0
 80090d8:	1909      	adds	r1, r1, r4
 80090da:	788b      	ldrb	r3, [r1, #2]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	7849      	ldrb	r1, [r1, #1]
 80090e0:	185b      	adds	r3, r3, r1
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	17db      	asrs	r3, r3, #31
 80090e6:	6053      	str	r3, [r2, #4]
										break;
 80090e8:	e7b5      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 80090ea:	4a2e      	ldr	r2, [pc, #184]	; (80091a4 <PxMessagingTask+0xf80>)
 80090ec:	2038      	movs	r0, #56	; 0x38
 80090ee:	4368      	muls	r0, r5
 80090f0:	4923      	ldr	r1, [pc, #140]	; (8009180 <PxMessagingTask+0xf5c>)
 80090f2:	1809      	adds	r1, r1, r0
 80090f4:	1909      	adds	r1, r1, r4
 80090f6:	788b      	ldrb	r3, [r1, #2]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	7849      	ldrb	r1, [r1, #1]
 80090fc:	185b      	adds	r3, r3, r1
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	17db      	asrs	r3, r3, #31
 8009102:	6053      	str	r3, [r2, #4]
										break;
 8009104:	e7a7      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009106:	4a27      	ldr	r2, [pc, #156]	; (80091a4 <PxMessagingTask+0xf80>)
 8009108:	2038      	movs	r0, #56	; 0x38
 800910a:	4368      	muls	r0, r5
 800910c:	491c      	ldr	r1, [pc, #112]	; (8009180 <PxMessagingTask+0xf5c>)
 800910e:	1809      	adds	r1, r1, r0
 8009110:	1909      	adds	r1, r1, r4
 8009112:	788b      	ldrb	r3, [r1, #2]
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	78c8      	ldrb	r0, [r1, #3]
 8009118:	0400      	lsls	r0, r0, #16
 800911a:	181b      	adds	r3, r3, r0
 800911c:	7848      	ldrb	r0, [r1, #1]
 800911e:	181b      	adds	r3, r3, r0
 8009120:	7909      	ldrb	r1, [r1, #4]
 8009122:	0609      	lsls	r1, r1, #24
 8009124:	185b      	adds	r3, r3, r1
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	2300      	movs	r3, #0
 800912a:	6053      	str	r3, [r2, #4]
										break;
 800912c:	e793      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800912e:	4a1d      	ldr	r2, [pc, #116]	; (80091a4 <PxMessagingTask+0xf80>)
 8009130:	2038      	movs	r0, #56	; 0x38
 8009132:	4368      	muls	r0, r5
 8009134:	4912      	ldr	r1, [pc, #72]	; (8009180 <PxMessagingTask+0xf5c>)
 8009136:	1809      	adds	r1, r1, r0
 8009138:	1909      	adds	r1, r1, r4
 800913a:	788b      	ldrb	r3, [r1, #2]
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	7848      	ldrb	r0, [r1, #1]
 8009140:	181b      	adds	r3, r3, r0
 8009142:	78c8      	ldrb	r0, [r1, #3]
 8009144:	0400      	lsls	r0, r0, #16
 8009146:	181b      	adds	r3, r3, r0
 8009148:	7909      	ldrb	r1, [r1, #4]
 800914a:	0609      	lsls	r1, r1, #24
 800914c:	185b      	adds	r3, r3, r1
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	17db      	asrs	r3, r3, #31
 8009152:	6053      	str	r3, [r2, #4]
										break;
 8009154:	e77f      	b.n	8009056 <PxMessagingTask+0xe32>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009156:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <PxMessagingTask+0xf80>)
 8009158:	2038      	movs	r0, #56	; 0x38
 800915a:	4368      	muls	r0, r5
 800915c:	4908      	ldr	r1, [pc, #32]	; (8009180 <PxMessagingTask+0xf5c>)
 800915e:	1809      	adds	r1, r1, r0
 8009160:	1909      	adds	r1, r1, r4
 8009162:	788b      	ldrb	r3, [r1, #2]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	78c8      	ldrb	r0, [r1, #3]
 8009168:	0400      	lsls	r0, r0, #16
 800916a:	181b      	adds	r3, r3, r0
 800916c:	7848      	ldrb	r0, [r1, #1]
 800916e:	181b      	adds	r3, r3, r0
 8009170:	7909      	ldrb	r1, [r1, #4]
 8009172:	0609      	lsls	r1, r1, #24
 8009174:	185b      	adds	r3, r3, r1
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	6053      	str	r3, [r2, #4]
										break;
 800917c:	e76b      	b.n	8009056 <PxMessagingTask+0xe32>
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	200008a4 	.word	0x200008a4
 8009184:	20000098 	.word	0x20000098
 8009188:	20000a28 	.word	0x20000a28
 800918c:	0801921c 	.word	0x0801921c
 8009190:	20005a64 	.word	0x20005a64
 8009194:	0801923c 	.word	0x0801923c
 8009198:	20000001 	.word	0x20000001
 800919c:	20000002 	.word	0x20000002
 80091a0:	20000003 	.word	0x20000003
 80091a4:	20000be0 	.word	0x20000be0
 80091a8:	20000be8 	.word	0x20000be8
 80091ac:	20000094 	.word	0x20000094
 80091b0:	0801925c 	.word	0x0801925c
							responseStatus =BOS_OK; // Initialize response
 80091b4:	4bdd      	ldr	r3, [pc, #884]	; (800952c <PxMessagingTask+0x1308>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 80091ba:	46a1      	mov	r9, r4
 80091bc:	4bdc      	ldr	r3, [pc, #880]	; (8009530 <PxMessagingTask+0x130c>)
 80091be:	199b      	adds	r3, r3, r6
 80091c0:	5d1b      	ldrb	r3, [r3, r4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d100      	bne.n	80091c8 <PxMessagingTask+0xfa4>
 80091c6:	e10b      	b.n	80093e0 <PxMessagingTask+0x11bc>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 80091c8:	2b1e      	cmp	r3, #30
 80091ca:	d900      	bls.n	80091ce <PxMessagingTask+0xfaa>
 80091cc:	e104      	b.n	80093d8 <PxMessagingTask+0x11b4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80091ce:	1e5c      	subs	r4, r3, #1
 80091d0:	00a2      	lsls	r2, r4, #2
 80091d2:	4bd8      	ldr	r3, [pc, #864]	; (8009534 <PxMessagingTask+0x1310>)
 80091d4:	58d1      	ldr	r1, [r2, r3]
 80091d6:	0c0b      	lsrs	r3, r1, #16
 80091d8:	2280      	movs	r2, #128	; 0x80
 80091da:	0592      	lsls	r2, r2, #22
 80091dc:	4694      	mov	ip, r2
 80091de:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80091e0:	464a      	mov	r2, r9
 80091e2:	1c57      	adds	r7, r2, #1
 80091e4:	2038      	movs	r0, #56	; 0x38
 80091e6:	4368      	muls	r0, r5
 80091e8:	4ad1      	ldr	r2, [pc, #836]	; (8009530 <PxMessagingTask+0x130c>)
 80091ea:	1812      	adds	r2, r2, r0
 80091ec:	5dd2      	ldrb	r2, [r2, r7]
 80091ee:	4693      	mov	fp, r2
 80091f0:	3a01      	subs	r2, #1
 80091f2:	b2d0      	uxtb	r0, r2
 80091f4:	2807      	cmp	r0, #7
 80091f6:	d81b      	bhi.n	8009230 <PxMessagingTask+0x100c>
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	0092      	lsls	r2, r2, #2
 80091fc:	48ce      	ldr	r0, [pc, #824]	; (8009538 <PxMessagingTask+0x1314>)
 80091fe:	5882      	ldr	r2, [r0, r2]
 8009200:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009202:	070a      	lsls	r2, r1, #28
 8009204:	d109      	bne.n	800921a <PxMessagingTask+0xff6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009206:	2001      	movs	r0, #1
 8009208:	f009 fd86 	bl	8012d18 <malloc>
 800920c:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800920e:	d00c      	beq.n	800922a <PxMessagingTask+0x1006>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009210:	00a4      	lsls	r4, r4, #2
 8009212:	0400      	lsls	r0, r0, #16
 8009214:	4458      	add	r0, fp
 8009216:	4ac7      	ldr	r2, [pc, #796]	; (8009534 <PxMessagingTask+0x1310>)
 8009218:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800921a:	2138      	movs	r1, #56	; 0x38
 800921c:	4369      	muls	r1, r5
 800921e:	4ac4      	ldr	r2, [pc, #784]	; (8009530 <PxMessagingTask+0x130c>)
 8009220:	1852      	adds	r2, r2, r1
 8009222:	444a      	add	r2, r9
 8009224:	7892      	ldrb	r2, [r2, #2]
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e002      	b.n	8009230 <PxMessagingTask+0x100c>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800922a:	4bc0      	ldr	r3, [pc, #768]	; (800952c <PxMessagingTask+0x1308>)
 800922c:	2212      	movs	r2, #18
 800922e:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009230:	2338      	movs	r3, #56	; 0x38
 8009232:	436b      	muls	r3, r5
 8009234:	4abe      	ldr	r2, [pc, #760]	; (8009530 <PxMessagingTask+0x130c>)
 8009236:	18d2      	adds	r2, r2, r3
 8009238:	464b      	mov	r3, r9
 800923a:	5cd3      	ldrb	r3, [r2, r3]
 800923c:	3b01      	subs	r3, #1
 800923e:	0098      	lsls	r0, r3, #2
 8009240:	49bc      	ldr	r1, [pc, #752]	; (8009534 <PxMessagingTask+0x1310>)
 8009242:	5841      	ldr	r1, [r0, r1]
 8009244:	5dd2      	ldrb	r2, [r2, r7]
 8009246:	200f      	movs	r0, #15
 8009248:	4008      	ands	r0, r1
 800924a:	4290      	cmp	r0, r2
 800924c:	d009      	beq.n	8009262 <PxMessagingTask+0x103e>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	48ba      	ldr	r0, [pc, #744]	; (800953c <PxMessagingTask+0x1318>)
 8009252:	4684      	mov	ip, r0
 8009254:	4462      	add	r2, ip
 8009256:	400a      	ands	r2, r1
 8009258:	49b6      	ldr	r1, [pc, #728]	; (8009534 <PxMessagingTask+0x1310>)
 800925a:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800925c:	4bb3      	ldr	r3, [pc, #716]	; (800952c <PxMessagingTask+0x1308>)
 800925e:	2214      	movs	r2, #20
 8009260:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009262:	4bb7      	ldr	r3, [pc, #732]	; (8009540 <PxMessagingTask+0x131c>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2240      	movs	r2, #64	; 0x40
 8009268:	4393      	bics	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	4691      	mov	r9, r2
 800926e:	2b20      	cmp	r3, #32
 8009270:	d001      	beq.n	8009276 <PxMessagingTask+0x1052>
 8009272:	f7ff f843 	bl	80082fc <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 8009276:	4bad      	ldr	r3, [pc, #692]	; (800952c <PxMessagingTask+0x1308>)
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	4bb2      	ldr	r3, [pc, #712]	; (8009544 <PxMessagingTask+0x1320>)
 800927c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800927e:	2201      	movs	r2, #1
 8009280:	2121      	movs	r1, #33	; 0x21
 8009282:	9804      	ldr	r0, [sp, #16]
 8009284:	f7fe fe0c 	bl	8007ea0 <SendMessageToModule>
 8009288:	f7ff f838 	bl	80082fc <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800928c:	070a      	lsls	r2, r1, #28
 800928e:	d10a      	bne.n	80092a6 <PxMessagingTask+0x1082>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009290:	2001      	movs	r0, #1
 8009292:	f009 fd41 	bl	8012d18 <malloc>
 8009296:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009298:	d100      	bne.n	800929c <PxMessagingTask+0x1078>
 800929a:	e36d      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800929c:	00a4      	lsls	r4, r4, #2
 800929e:	0400      	lsls	r0, r0, #16
 80092a0:	3002      	adds	r0, #2
 80092a2:	4aa4      	ldr	r2, [pc, #656]	; (8009534 <PxMessagingTask+0x1310>)
 80092a4:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80092a6:	2138      	movs	r1, #56	; 0x38
 80092a8:	4369      	muls	r1, r5
 80092aa:	4aa1      	ldr	r2, [pc, #644]	; (8009530 <PxMessagingTask+0x130c>)
 80092ac:	1852      	adds	r2, r2, r1
 80092ae:	444a      	add	r2, r9
 80092b0:	7892      	ldrb	r2, [r2, #2]
 80092b2:	b252      	sxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	e7bb      	b.n	8009230 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80092b8:	070a      	lsls	r2, r1, #28
 80092ba:	d10a      	bne.n	80092d2 <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 80092bc:	2002      	movs	r0, #2
 80092be:	f009 fd2b 	bl	8012d18 <malloc>
 80092c2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80092c4:	d100      	bne.n	80092c8 <PxMessagingTask+0x10a4>
 80092c6:	e357      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80092c8:	00a4      	lsls	r4, r4, #2
 80092ca:	0400      	lsls	r0, r0, #16
 80092cc:	3003      	adds	r0, #3
 80092ce:	4a99      	ldr	r2, [pc, #612]	; (8009534 <PxMessagingTask+0x1310>)
 80092d0:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 80092d2:	2138      	movs	r1, #56	; 0x38
 80092d4:	4369      	muls	r1, r5
 80092d6:	4a96      	ldr	r2, [pc, #600]	; (8009530 <PxMessagingTask+0x130c>)
 80092d8:	1852      	adds	r2, r2, r1
 80092da:	444a      	add	r2, r9
 80092dc:	78d1      	ldrb	r1, [r2, #3]
 80092de:	0209      	lsls	r1, r1, #8
 80092e0:	7892      	ldrb	r2, [r2, #2]
 80092e2:	1852      	adds	r2, r2, r1
 80092e4:	b292      	uxth	r2, r2
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	e7a2      	b.n	8009230 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80092ea:	070a      	lsls	r2, r1, #28
 80092ec:	d10a      	bne.n	8009304 <PxMessagingTask+0x10e0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80092ee:	2002      	movs	r0, #2
 80092f0:	f009 fd12 	bl	8012d18 <malloc>
 80092f4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80092f6:	d100      	bne.n	80092fa <PxMessagingTask+0x10d6>
 80092f8:	e33e      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80092fa:	00a4      	lsls	r4, r4, #2
 80092fc:	0400      	lsls	r0, r0, #16
 80092fe:	3004      	adds	r0, #4
 8009300:	4a8c      	ldr	r2, [pc, #560]	; (8009534 <PxMessagingTask+0x1310>)
 8009302:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009304:	2138      	movs	r1, #56	; 0x38
 8009306:	4369      	muls	r1, r5
 8009308:	4a89      	ldr	r2, [pc, #548]	; (8009530 <PxMessagingTask+0x130c>)
 800930a:	1852      	adds	r2, r2, r1
 800930c:	444a      	add	r2, r9
 800930e:	78d1      	ldrb	r1, [r2, #3]
 8009310:	0209      	lsls	r1, r1, #8
 8009312:	7892      	ldrb	r2, [r2, #2]
 8009314:	1852      	adds	r2, r2, r1
 8009316:	b212      	sxth	r2, r2
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	e789      	b.n	8009230 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800931c:	070a      	lsls	r2, r1, #28
 800931e:	d10a      	bne.n	8009336 <PxMessagingTask+0x1112>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009320:	2004      	movs	r0, #4
 8009322:	f009 fcf9 	bl	8012d18 <malloc>
 8009326:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009328:	d100      	bne.n	800932c <PxMessagingTask+0x1108>
 800932a:	e325      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800932c:	00a4      	lsls	r4, r4, #2
 800932e:	0400      	lsls	r0, r0, #16
 8009330:	3005      	adds	r0, #5
 8009332:	4a80      	ldr	r2, [pc, #512]	; (8009534 <PxMessagingTask+0x1310>)
 8009334:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009336:	2238      	movs	r2, #56	; 0x38
 8009338:	436a      	muls	r2, r5
 800933a:	497d      	ldr	r1, [pc, #500]	; (8009530 <PxMessagingTask+0x130c>)
 800933c:	1889      	adds	r1, r1, r2
 800933e:	4449      	add	r1, r9
 8009340:	78ca      	ldrb	r2, [r1, #3]
 8009342:	0212      	lsls	r2, r2, #8
 8009344:	7908      	ldrb	r0, [r1, #4]
 8009346:	0400      	lsls	r0, r0, #16
 8009348:	1812      	adds	r2, r2, r0
 800934a:	7888      	ldrb	r0, [r1, #2]
 800934c:	1812      	adds	r2, r2, r0
 800934e:	7949      	ldrb	r1, [r1, #5]
 8009350:	0609      	lsls	r1, r1, #24
 8009352:	1852      	adds	r2, r2, r1
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e76b      	b.n	8009230 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009358:	070a      	lsls	r2, r1, #28
 800935a:	d10a      	bne.n	8009372 <PxMessagingTask+0x114e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800935c:	2004      	movs	r0, #4
 800935e:	f009 fcdb 	bl	8012d18 <malloc>
 8009362:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009364:	d100      	bne.n	8009368 <PxMessagingTask+0x1144>
 8009366:	e307      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009368:	00a4      	lsls	r4, r4, #2
 800936a:	0400      	lsls	r0, r0, #16
 800936c:	3006      	adds	r0, #6
 800936e:	4a71      	ldr	r2, [pc, #452]	; (8009534 <PxMessagingTask+0x1310>)
 8009370:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009372:	2238      	movs	r2, #56	; 0x38
 8009374:	436a      	muls	r2, r5
 8009376:	496e      	ldr	r1, [pc, #440]	; (8009530 <PxMessagingTask+0x130c>)
 8009378:	1889      	adds	r1, r1, r2
 800937a:	4449      	add	r1, r9
 800937c:	78ca      	ldrb	r2, [r1, #3]
 800937e:	0212      	lsls	r2, r2, #8
 8009380:	7888      	ldrb	r0, [r1, #2]
 8009382:	1812      	adds	r2, r2, r0
 8009384:	7908      	ldrb	r0, [r1, #4]
 8009386:	0400      	lsls	r0, r0, #16
 8009388:	1812      	adds	r2, r2, r0
 800938a:	7949      	ldrb	r1, [r1, #5]
 800938c:	0609      	lsls	r1, r1, #24
 800938e:	1852      	adds	r2, r2, r1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e74d      	b.n	8009230 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009394:	070a      	lsls	r2, r1, #28
 8009396:	d10a      	bne.n	80093ae <PxMessagingTask+0x118a>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009398:	2004      	movs	r0, #4
 800939a:	f009 fcbd 	bl	8012d18 <malloc>
 800939e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80093a0:	d100      	bne.n	80093a4 <PxMessagingTask+0x1180>
 80093a2:	e2e9      	b.n	8009978 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80093a4:	00a4      	lsls	r4, r4, #2
 80093a6:	0400      	lsls	r0, r0, #16
 80093a8:	3007      	adds	r0, #7
 80093aa:	4a62      	ldr	r2, [pc, #392]	; (8009534 <PxMessagingTask+0x1310>)
 80093ac:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80093ae:	2238      	movs	r2, #56	; 0x38
 80093b0:	436a      	muls	r2, r5
 80093b2:	495f      	ldr	r1, [pc, #380]	; (8009530 <PxMessagingTask+0x130c>)
 80093b4:	1889      	adds	r1, r1, r2
 80093b6:	4449      	add	r1, r9
 80093b8:	78ca      	ldrb	r2, [r1, #3]
 80093ba:	0212      	lsls	r2, r2, #8
 80093bc:	7908      	ldrb	r0, [r1, #4]
 80093be:	0400      	lsls	r0, r0, #16
 80093c0:	1812      	adds	r2, r2, r0
 80093c2:	7888      	ldrb	r0, [r1, #2]
 80093c4:	1812      	adds	r2, r2, r0
 80093c6:	7949      	ldrb	r1, [r1, #5]
 80093c8:	0609      	lsls	r1, r1, #24
 80093ca:	1852      	adds	r2, r2, r1
 80093cc:	495e      	ldr	r1, [pc, #376]	; (8009548 <PxMessagingTask+0x1324>)
 80093ce:	600a      	str	r2, [r1, #0]
 80093d0:	2000      	movs	r0, #0
 80093d2:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e72b      	b.n	8009230 <PxMessagingTask+0x100c>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80093d8:	4b54      	ldr	r3, [pc, #336]	; (800952c <PxMessagingTask+0x1308>)
 80093da:	2213      	movs	r2, #19
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	e740      	b.n	8009262 <PxMessagingTask+0x103e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80093e0:	2238      	movs	r2, #56	; 0x38
 80093e2:	436a      	muls	r2, r5
 80093e4:	4b52      	ldr	r3, [pc, #328]	; (8009530 <PxMessagingTask+0x130c>)
 80093e6:	189b      	adds	r3, r3, r2
 80093e8:	191b      	adds	r3, r3, r4
 80093ea:	789c      	ldrb	r4, [r3, #2]
 80093ec:	0624      	lsls	r4, r4, #24
 80093ee:	78da      	ldrb	r2, [r3, #3]
 80093f0:	0412      	lsls	r2, r2, #16
 80093f2:	18a4      	adds	r4, r4, r2
 80093f4:	795a      	ldrb	r2, [r3, #5]
 80093f6:	18a4      	adds	r4, r4, r2
 80093f8:	791b      	ldrb	r3, [r3, #4]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 80093fe:	23e0      	movs	r3, #224	; 0xe0
 8009400:	061b      	lsls	r3, r3, #24
 8009402:	18e2      	adds	r2, r4, r3
 8009404:	4b51      	ldr	r3, [pc, #324]	; (800954c <PxMessagingTask+0x1328>)
 8009406:	429a      	cmp	r2, r3
 8009408:	d86f      	bhi.n	80094ea <PxMessagingTask+0x12c6>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800940a:	2238      	movs	r2, #56	; 0x38
 800940c:	436a      	muls	r2, r5
 800940e:	4b48      	ldr	r3, [pc, #288]	; (8009530 <PxMessagingTask+0x130c>)
 8009410:	189b      	adds	r3, r3, r2
 8009412:	444b      	add	r3, r9
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	3b01      	subs	r3, #1
 8009418:	b2da      	uxtb	r2, r3
 800941a:	2a07      	cmp	r2, #7
 800941c:	d900      	bls.n	8009420 <PxMessagingTask+0x11fc>
 800941e:	e720      	b.n	8009262 <PxMessagingTask+0x103e>
 8009420:	b2db      	uxtb	r3, r3
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4a4a      	ldr	r2, [pc, #296]	; (8009550 <PxMessagingTask+0x132c>)
 8009426:	58d3      	ldr	r3, [r2, r3]
 8009428:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800942a:	2238      	movs	r2, #56	; 0x38
 800942c:	436a      	muls	r2, r5
 800942e:	4b40      	ldr	r3, [pc, #256]	; (8009530 <PxMessagingTask+0x130c>)
 8009430:	189b      	adds	r3, r3, r2
 8009432:	444b      	add	r3, r9
 8009434:	799b      	ldrb	r3, [r3, #6]
 8009436:	7023      	strb	r3, [r4, #0]
											break;
 8009438:	e713      	b.n	8009262 <PxMessagingTask+0x103e>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800943a:	2238      	movs	r2, #56	; 0x38
 800943c:	436a      	muls	r2, r5
 800943e:	4b3c      	ldr	r3, [pc, #240]	; (8009530 <PxMessagingTask+0x130c>)
 8009440:	189b      	adds	r3, r3, r2
 8009442:	444b      	add	r3, r9
 8009444:	799b      	ldrb	r3, [r3, #6]
 8009446:	b25b      	sxtb	r3, r3
 8009448:	7023      	strb	r3, [r4, #0]
											break;
 800944a:	e70a      	b.n	8009262 <PxMessagingTask+0x103e>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800944c:	2238      	movs	r2, #56	; 0x38
 800944e:	436a      	muls	r2, r5
 8009450:	4b37      	ldr	r3, [pc, #220]	; (8009530 <PxMessagingTask+0x130c>)
 8009452:	189b      	adds	r3, r3, r2
 8009454:	444b      	add	r3, r9
 8009456:	79da      	ldrb	r2, [r3, #7]
 8009458:	0212      	lsls	r2, r2, #8
 800945a:	799b      	ldrb	r3, [r3, #6]
 800945c:	189b      	adds	r3, r3, r2
 800945e:	b29b      	uxth	r3, r3
 8009460:	8023      	strh	r3, [r4, #0]
											break;
 8009462:	e6fe      	b.n	8009262 <PxMessagingTask+0x103e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009464:	2238      	movs	r2, #56	; 0x38
 8009466:	436a      	muls	r2, r5
 8009468:	4b31      	ldr	r3, [pc, #196]	; (8009530 <PxMessagingTask+0x130c>)
 800946a:	189b      	adds	r3, r3, r2
 800946c:	444b      	add	r3, r9
 800946e:	79da      	ldrb	r2, [r3, #7]
 8009470:	0212      	lsls	r2, r2, #8
 8009472:	799b      	ldrb	r3, [r3, #6]
 8009474:	189b      	adds	r3, r3, r2
 8009476:	b21b      	sxth	r3, r3
 8009478:	8023      	strh	r3, [r4, #0]
											break;
 800947a:	e6f2      	b.n	8009262 <PxMessagingTask+0x103e>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800947c:	2338      	movs	r3, #56	; 0x38
 800947e:	436b      	muls	r3, r5
 8009480:	4a2b      	ldr	r2, [pc, #172]	; (8009530 <PxMessagingTask+0x130c>)
 8009482:	18d2      	adds	r2, r2, r3
 8009484:	444a      	add	r2, r9
 8009486:	79d3      	ldrb	r3, [r2, #7]
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	7a11      	ldrb	r1, [r2, #8]
 800948c:	0409      	lsls	r1, r1, #16
 800948e:	185b      	adds	r3, r3, r1
 8009490:	7991      	ldrb	r1, [r2, #6]
 8009492:	185b      	adds	r3, r3, r1
 8009494:	7a52      	ldrb	r2, [r2, #9]
 8009496:	0612      	lsls	r2, r2, #24
 8009498:	189b      	adds	r3, r3, r2
 800949a:	6023      	str	r3, [r4, #0]
											break;
 800949c:	e6e1      	b.n	8009262 <PxMessagingTask+0x103e>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800949e:	2338      	movs	r3, #56	; 0x38
 80094a0:	436b      	muls	r3, r5
 80094a2:	4a23      	ldr	r2, [pc, #140]	; (8009530 <PxMessagingTask+0x130c>)
 80094a4:	18d2      	adds	r2, r2, r3
 80094a6:	444a      	add	r2, r9
 80094a8:	79d3      	ldrb	r3, [r2, #7]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	7991      	ldrb	r1, [r2, #6]
 80094ae:	185b      	adds	r3, r3, r1
 80094b0:	7a11      	ldrb	r1, [r2, #8]
 80094b2:	0409      	lsls	r1, r1, #16
 80094b4:	185b      	adds	r3, r3, r1
 80094b6:	7a52      	ldrb	r2, [r2, #9]
 80094b8:	0612      	lsls	r2, r2, #24
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	6023      	str	r3, [r4, #0]
											break;
 80094be:	e6d0      	b.n	8009262 <PxMessagingTask+0x103e>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80094c0:	2338      	movs	r3, #56	; 0x38
 80094c2:	436b      	muls	r3, r5
 80094c4:	4a1a      	ldr	r2, [pc, #104]	; (8009530 <PxMessagingTask+0x130c>)
 80094c6:	18d2      	adds	r2, r2, r3
 80094c8:	444a      	add	r2, r9
 80094ca:	79d3      	ldrb	r3, [r2, #7]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	7a11      	ldrb	r1, [r2, #8]
 80094d0:	0409      	lsls	r1, r1, #16
 80094d2:	185b      	adds	r3, r3, r1
 80094d4:	7991      	ldrb	r1, [r2, #6]
 80094d6:	185b      	adds	r3, r3, r1
 80094d8:	7a52      	ldrb	r2, [r2, #9]
 80094da:	0612      	lsls	r2, r2, #24
 80094dc:	189b      	adds	r3, r3, r2
 80094de:	4a1a      	ldr	r2, [pc, #104]	; (8009548 <PxMessagingTask+0x1324>)
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	2100      	movs	r1, #0
 80094e4:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 80094e6:	6023      	str	r3, [r4, #0]
											break;
 80094e8:	e6bb      	b.n	8009262 <PxMessagingTask+0x103e>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80094ea:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <PxMessagingTask+0x1330>)
 80094ec:	23f8      	movs	r3, #248	; 0xf8
 80094ee:	061b      	lsls	r3, r3, #24
 80094f0:	18e3      	adds	r3, r4, r3
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d900      	bls.n	80094f8 <PxMessagingTask+0x12d4>
 80094f6:	e0af      	b.n	8009658 <PxMessagingTask+0x1434>
									HAL_FLASH_Unlock();
 80094f8:	f007 fbfc 	bl	8010cf4 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80094fc:	2f22      	cmp	r7, #34	; 0x22
 80094fe:	d102      	bne.n	8009506 <PxMessagingTask+0x12e2>
										EraseSector(temp32);
 8009500:	0020      	movs	r0, r4
 8009502:	f002 fb65 	bl	800bbd0 <EraseSector>
									if(responseStatus == BOS_OK){
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <PxMessagingTask+0x1308>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d12e      	bne.n	800956c <PxMessagingTask+0x1348>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800950e:	2238      	movs	r2, #56	; 0x38
 8009510:	436a      	muls	r2, r5
 8009512:	4b07      	ldr	r3, [pc, #28]	; (8009530 <PxMessagingTask+0x130c>)
 8009514:	189b      	adds	r3, r3, r2
 8009516:	444b      	add	r3, r9
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	3b01      	subs	r3, #1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	2a07      	cmp	r2, #7
 8009520:	d824      	bhi.n	800956c <PxMessagingTask+0x1348>
 8009522:	b2db      	uxtb	r3, r3
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <PxMessagingTask+0x1334>)
 8009528:	58d3      	ldr	r3, [r2, r3]
 800952a:	469f      	mov	pc, r3
 800952c:	20000be8 	.word	0x20000be8
 8009530:	200008a4 	.word	0x200008a4
 8009534:	20005a64 	.word	0x20005a64
 8009538:	08019280 	.word	0x08019280
 800953c:	0000fff0 	.word	0x0000fff0
 8009540:	20005a5c 	.word	0x20005a5c
 8009544:	20000a28 	.word	0x20000a28
 8009548:	20000be0 	.word	0x20000be0
 800954c:	00007fff 	.word	0x00007fff
 8009550:	080192a0 	.word	0x080192a0
 8009554:	0001ffff 	.word	0x0001ffff
 8009558:	080192c0 	.word	0x080192c0
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800955c:	8823      	ldrh	r3, [r4, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	4acb      	ldr	r2, [pc, #812]	; (8009890 <PxMessagingTask+0x166c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00c      	beq.n	8009580 <PxMessagingTask+0x135c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009566:	4bcb      	ldr	r3, [pc, #812]	; (8009894 <PxMessagingTask+0x1670>)
 8009568:	2216      	movs	r2, #22
 800956a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800956c:	f007 fbd4 	bl	8010d18 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d100      	bne.n	8009578 <PxMessagingTask+0x1354>
 8009576:	e674      	b.n	8009262 <PxMessagingTask+0x103e>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009578:	4bc6      	ldr	r3, [pc, #792]	; (8009894 <PxMessagingTask+0x1670>)
 800957a:	2216      	movs	r2, #22
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	e670      	b.n	8009262 <PxMessagingTask+0x103e>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009580:	2238      	movs	r2, #56	; 0x38
 8009582:	436a      	muls	r2, r5
 8009584:	4bc4      	ldr	r3, [pc, #784]	; (8009898 <PxMessagingTask+0x1674>)
 8009586:	189b      	adds	r3, r3, r2
 8009588:	444b      	add	r3, r9
 800958a:	799a      	ldrb	r2, [r3, #6]
 800958c:	2300      	movs	r3, #0
 800958e:	49c3      	ldr	r1, [pc, #780]	; (800989c <PxMessagingTask+0x1678>)
 8009590:	600a      	str	r2, [r1, #0]
 8009592:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009594:	0021      	movs	r1, r4
 8009596:	2001      	movs	r0, #1
 8009598:	f007 fbf6 	bl	8010d88 <HAL_FLASH_Program>
 800959c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800959e:	e7e5      	b.n	800956c <PxMessagingTask+0x1348>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 80095a0:	8823      	ldrh	r3, [r4, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4aba      	ldr	r2, [pc, #744]	; (8009890 <PxMessagingTask+0x166c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d003      	beq.n	80095b2 <PxMessagingTask+0x138e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80095aa:	4bba      	ldr	r3, [pc, #744]	; (8009894 <PxMessagingTask+0x1670>)
 80095ac:	2216      	movs	r2, #22
 80095ae:	701a      	strb	r2, [r3, #0]
													break;
 80095b0:	e7dc      	b.n	800956c <PxMessagingTask+0x1348>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80095b2:	2238      	movs	r2, #56	; 0x38
 80095b4:	436a      	muls	r2, r5
 80095b6:	4bb8      	ldr	r3, [pc, #736]	; (8009898 <PxMessagingTask+0x1674>)
 80095b8:	189b      	adds	r3, r3, r2
 80095ba:	444b      	add	r3, r9
 80095bc:	79da      	ldrb	r2, [r3, #7]
 80095be:	0212      	lsls	r2, r2, #8
 80095c0:	799b      	ldrb	r3, [r3, #6]
 80095c2:	18d2      	adds	r2, r2, r3
 80095c4:	17d3      	asrs	r3, r2, #31
 80095c6:	49b5      	ldr	r1, [pc, #724]	; (800989c <PxMessagingTask+0x1678>)
 80095c8:	600a      	str	r2, [r1, #0]
 80095ca:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 80095cc:	0021      	movs	r1, r4
 80095ce:	2001      	movs	r0, #1
 80095d0:	f007 fbda 	bl	8010d88 <HAL_FLASH_Program>
 80095d4:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 80095d6:	e7c9      	b.n	800956c <PxMessagingTask+0x1348>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	d003      	beq.n	80095e6 <PxMessagingTask+0x13c2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80095de:	4bad      	ldr	r3, [pc, #692]	; (8009894 <PxMessagingTask+0x1670>)
 80095e0:	2216      	movs	r2, #22
 80095e2:	701a      	strb	r2, [r3, #0]
													break;
 80095e4:	e7c2      	b.n	800956c <PxMessagingTask+0x1348>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 80095e6:	2238      	movs	r2, #56	; 0x38
 80095e8:	436a      	muls	r2, r5
 80095ea:	4bab      	ldr	r3, [pc, #684]	; (8009898 <PxMessagingTask+0x1674>)
 80095ec:	189b      	adds	r3, r3, r2
 80095ee:	444b      	add	r3, r9
 80095f0:	79da      	ldrb	r2, [r3, #7]
 80095f2:	0212      	lsls	r2, r2, #8
 80095f4:	7a19      	ldrb	r1, [r3, #8]
 80095f6:	0409      	lsls	r1, r1, #16
 80095f8:	1852      	adds	r2, r2, r1
 80095fa:	7999      	ldrb	r1, [r3, #6]
 80095fc:	1852      	adds	r2, r2, r1
 80095fe:	7a5b      	ldrb	r3, [r3, #9]
 8009600:	061b      	lsls	r3, r3, #24
 8009602:	18d2      	adds	r2, r2, r3
 8009604:	2300      	movs	r3, #0
 8009606:	49a5      	ldr	r1, [pc, #660]	; (800989c <PxMessagingTask+0x1678>)
 8009608:	600a      	str	r2, [r1, #0]
 800960a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800960c:	0021      	movs	r1, r4
 800960e:	2002      	movs	r0, #2
 8009610:	f007 fbba 	bl	8010d88 <HAL_FLASH_Program>
 8009614:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009616:	e7a9      	b.n	800956c <PxMessagingTask+0x1348>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	d003      	beq.n	8009626 <PxMessagingTask+0x1402>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800961e:	4b9d      	ldr	r3, [pc, #628]	; (8009894 <PxMessagingTask+0x1670>)
 8009620:	2216      	movs	r2, #22
 8009622:	701a      	strb	r2, [r3, #0]
													break;
 8009624:	e7a2      	b.n	800956c <PxMessagingTask+0x1348>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009626:	2238      	movs	r2, #56	; 0x38
 8009628:	436a      	muls	r2, r5
 800962a:	4b9b      	ldr	r3, [pc, #620]	; (8009898 <PxMessagingTask+0x1674>)
 800962c:	189b      	adds	r3, r3, r2
 800962e:	444b      	add	r3, r9
 8009630:	79da      	ldrb	r2, [r3, #7]
 8009632:	0212      	lsls	r2, r2, #8
 8009634:	7a19      	ldrb	r1, [r3, #8]
 8009636:	0409      	lsls	r1, r1, #16
 8009638:	1852      	adds	r2, r2, r1
 800963a:	7999      	ldrb	r1, [r3, #6]
 800963c:	1852      	adds	r2, r2, r1
 800963e:	7a5b      	ldrb	r3, [r3, #9]
 8009640:	061b      	lsls	r3, r3, #24
 8009642:	18d2      	adds	r2, r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	4995      	ldr	r1, [pc, #596]	; (800989c <PxMessagingTask+0x1678>)
 8009648:	600a      	str	r2, [r1, #0]
 800964a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800964c:	0021      	movs	r1, r4
 800964e:	2003      	movs	r0, #3
 8009650:	f007 fb9a 	bl	8010d88 <HAL_FLASH_Program>
 8009654:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009656:	e789      	b.n	800956c <PxMessagingTask+0x1348>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009658:	4b8e      	ldr	r3, [pc, #568]	; (8009894 <PxMessagingTask+0x1670>)
 800965a:	2215      	movs	r2, #21
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e600      	b.n	8009262 <PxMessagingTask+0x103e>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009660:	4b8d      	ldr	r3, [pc, #564]	; (8009898 <PxMessagingTask+0x1674>)
 8009662:	199b      	adds	r3, r3, r6
 8009664:	5d1a      	ldrb	r2, [r3, r4]
 8009666:	4b8b      	ldr	r3, [pc, #556]	; (8009894 <PxMessagingTask+0x1670>)
 8009668:	701a      	strb	r2, [r3, #0]
							break;
 800966a:	2300      	movs	r3, #0
 800966c:	4699      	mov	r9, r3
 800966e:	f7fe fe45 	bl	80082fc <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	3a01      	subs	r2, #1
 8009676:	b292      	uxth	r2, r2
 8009678:	1c61      	adds	r1, r4, #1
 800967a:	4451      	add	r1, sl
 800967c:	4b86      	ldr	r3, [pc, #536]	; (8009898 <PxMessagingTask+0x1674>)
 800967e:	18c9      	adds	r1, r1, r3
 8009680:	199b      	adds	r3, r3, r6
 8009682:	5d18      	ldrb	r0, [r3, r4]
 8009684:	230a      	movs	r3, #10
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	f004 f8a4 	bl	800d7d4 <writePxMutex>
							break;
 800968c:	2300      	movs	r3, #0
 800968e:	4699      	mov	r9, r3
 8009690:	f7fe fe34 	bl	80082fc <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 8009694:	4a80      	ldr	r2, [pc, #512]	; (8009898 <PxMessagingTask+0x1674>)
 8009696:	1992      	adds	r2, r2, r6
 8009698:	5d12      	ldrb	r2, [r2, r4]
 800969a:	2a01      	cmp	r2, #1
 800969c:	d06a      	beq.n	8009774 <PxMessagingTask+0x1550>
 800969e:	2a00      	cmp	r2, #0
 80096a0:	d040      	beq.n	8009724 <PxMessagingTask+0x1500>
 80096a2:	2a02      	cmp	r2, #2
 80096a4:	d100      	bne.n	80096a8 <PxMessagingTask+0x1484>
 80096a6:	e08d      	b.n	80097c4 <PxMessagingTask+0x15a0>
							ADCPort =cMessage[port - 1][shift];
 80096a8:	4b7b      	ldr	r3, [pc, #492]	; (8009898 <PxMessagingTask+0x1674>)
 80096aa:	199b      	adds	r3, r3, r6
 80096ac:	5d18      	ldrb	r0, [r3, r4]
 80096ae:	4a7c      	ldr	r2, [pc, #496]	; (80098a0 <PxMessagingTask+0x167c>)
 80096b0:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 80096b2:	191b      	adds	r3, r3, r4
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	4a7b      	ldr	r2, [pc, #492]	; (80098a4 <PxMessagingTask+0x1680>)
 80096b8:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d000      	beq.n	80096c0 <PxMessagingTask+0x149c>
 80096be:	e093      	b.n	80097e8 <PxMessagingTask+0x15c4>
								ADCSelectChannel(ADCPort,"top");
 80096c0:	4f79      	ldr	r7, [pc, #484]	; (80098a8 <PxMessagingTask+0x1684>)
 80096c2:	0039      	movs	r1, r7
 80096c4:	f003 f8ae 	bl	800c824 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 80096c8:	4b75      	ldr	r3, [pc, #468]	; (80098a0 <PxMessagingTask+0x167c>)
 80096ca:	7818      	ldrb	r0, [r3, #0]
 80096cc:	4a77      	ldr	r2, [pc, #476]	; (80098ac <PxMessagingTask+0x1688>)
 80096ce:	0039      	movs	r1, r7
 80096d0:	f003 f8da 	bl	800c888 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80096d4:	4976      	ldr	r1, [pc, #472]	; (80098b0 <PxMessagingTask+0x168c>)
 80096d6:	4877      	ldr	r0, [pc, #476]	; (80098b4 <PxMessagingTask+0x1690>)
 80096d8:	f002 ff04 	bl	800c4e4 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80096dc:	4f6e      	ldr	r7, [pc, #440]	; (8009898 <PxMessagingTask+0x1674>)
 80096de:	19bf      	adds	r7, r7, r6
 80096e0:	5d38      	ldrb	r0, [r7, r4]
 80096e2:	4b6f      	ldr	r3, [pc, #444]	; (80098a0 <PxMessagingTask+0x167c>)
 80096e4:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80096e6:	4974      	ldr	r1, [pc, #464]	; (80098b8 <PxMessagingTask+0x1694>)
 80096e8:	f002 ffba 	bl	800c660 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80096ec:	193c      	adds	r4, r7, r4
 80096ee:	79a3      	ldrb	r3, [r4, #6]
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	79e2      	ldrb	r2, [r4, #7]
 80096f4:	0412      	lsls	r2, r2, #16
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	7962      	ldrb	r2, [r4, #5]
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	7a22      	ldrb	r2, [r4, #8]
 80096fe:	0612      	lsls	r2, r2, #24
 8009700:	189b      	adds	r3, r3, r2
 8009702:	4a6e      	ldr	r2, [pc, #440]	; (80098bc <PxMessagingTask+0x1698>)
 8009704:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009706:	7aa3      	ldrb	r3, [r4, #10]
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	7ae1      	ldrb	r1, [r4, #11]
 800970c:	0409      	lsls	r1, r1, #16
 800970e:	185b      	adds	r3, r3, r1
 8009710:	7a61      	ldrb	r1, [r4, #9]
 8009712:	185b      	adds	r3, r3, r1
 8009714:	7b21      	ldrb	r1, [r4, #12]
 8009716:	0609      	lsls	r1, r1, #24
 8009718:	185b      	adds	r3, r3, r1
 800971a:	6213      	str	r3, [r2, #32]
							break;
 800971c:	2300      	movs	r3, #0
 800971e:	4699      	mov	r9, r3
 8009720:	f7fe fdec 	bl	80082fc <PxMessagingTask+0xd8>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009724:	2138      	movs	r1, #56	; 0x38
 8009726:	4369      	muls	r1, r5
 8009728:	4a5b      	ldr	r2, [pc, #364]	; (8009898 <PxMessagingTask+0x1674>)
 800972a:	1852      	adds	r2, r2, r1
 800972c:	1913      	adds	r3, r2, r4
 800972e:	789a      	ldrb	r2, [r3, #2]
 8009730:	0212      	lsls	r2, r2, #8
 8009732:	78d9      	ldrb	r1, [r3, #3]
 8009734:	0409      	lsls	r1, r1, #16
 8009736:	1852      	adds	r2, r2, r1
 8009738:	7859      	ldrb	r1, [r3, #1]
 800973a:	1852      	adds	r2, r2, r1
 800973c:	7919      	ldrb	r1, [r3, #4]
 800973e:	0609      	lsls	r1, r1, #24
 8009740:	1852      	adds	r2, r2, r1
 8009742:	495e      	ldr	r1, [pc, #376]	; (80098bc <PxMessagingTask+0x1698>)
 8009744:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009746:	799a      	ldrb	r2, [r3, #6]
 8009748:	0212      	lsls	r2, r2, #8
 800974a:	79d8      	ldrb	r0, [r3, #7]
 800974c:	0400      	lsls	r0, r0, #16
 800974e:	1812      	adds	r2, r2, r0
 8009750:	7958      	ldrb	r0, [r3, #5]
 8009752:	1812      	adds	r2, r2, r0
 8009754:	7a18      	ldrb	r0, [r3, #8]
 8009756:	0600      	lsls	r0, r0, #24
 8009758:	1812      	adds	r2, r2, r0
 800975a:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800975c:	7a9a      	ldrb	r2, [r3, #10]
 800975e:	0212      	lsls	r2, r2, #8
 8009760:	7ad8      	ldrb	r0, [r3, #11]
 8009762:	0400      	lsls	r0, r0, #16
 8009764:	1812      	adds	r2, r2, r0
 8009766:	7a58      	ldrb	r0, [r3, #9]
 8009768:	1812      	adds	r2, r2, r0
 800976a:	7b1b      	ldrb	r3, [r3, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	18d3      	adds	r3, r2, r3
 8009770:	608b      	str	r3, [r1, #8]
									break;
 8009772:	e799      	b.n	80096a8 <PxMessagingTask+0x1484>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009774:	2238      	movs	r2, #56	; 0x38
 8009776:	436a      	muls	r2, r5
 8009778:	4b47      	ldr	r3, [pc, #284]	; (8009898 <PxMessagingTask+0x1674>)
 800977a:	189b      	adds	r3, r3, r2
 800977c:	191b      	adds	r3, r3, r4
 800977e:	789a      	ldrb	r2, [r3, #2]
 8009780:	0212      	lsls	r2, r2, #8
 8009782:	78d9      	ldrb	r1, [r3, #3]
 8009784:	0409      	lsls	r1, r1, #16
 8009786:	1852      	adds	r2, r2, r1
 8009788:	7859      	ldrb	r1, [r3, #1]
 800978a:	1852      	adds	r2, r2, r1
 800978c:	7919      	ldrb	r1, [r3, #4]
 800978e:	0609      	lsls	r1, r1, #24
 8009790:	1852      	adds	r2, r2, r1
 8009792:	494a      	ldr	r1, [pc, #296]	; (80098bc <PxMessagingTask+0x1698>)
 8009794:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009796:	799a      	ldrb	r2, [r3, #6]
 8009798:	0212      	lsls	r2, r2, #8
 800979a:	79d8      	ldrb	r0, [r3, #7]
 800979c:	0400      	lsls	r0, r0, #16
 800979e:	1812      	adds	r2, r2, r0
 80097a0:	7958      	ldrb	r0, [r3, #5]
 80097a2:	1812      	adds	r2, r2, r0
 80097a4:	7a18      	ldrb	r0, [r3, #8]
 80097a6:	0600      	lsls	r0, r0, #24
 80097a8:	1812      	adds	r2, r2, r0
 80097aa:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80097ac:	7a9a      	ldrb	r2, [r3, #10]
 80097ae:	0212      	lsls	r2, r2, #8
 80097b0:	7ad8      	ldrb	r0, [r3, #11]
 80097b2:	0400      	lsls	r0, r0, #16
 80097b4:	1812      	adds	r2, r2, r0
 80097b6:	7a58      	ldrb	r0, [r3, #9]
 80097b8:	1812      	adds	r2, r2, r0
 80097ba:	7b1b      	ldrb	r3, [r3, #12]
 80097bc:	061b      	lsls	r3, r3, #24
 80097be:	18d3      	adds	r3, r2, r3
 80097c0:	614b      	str	r3, [r1, #20]
									break;
 80097c2:	e771      	b.n	80096a8 <PxMessagingTask+0x1484>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80097c4:	2138      	movs	r1, #56	; 0x38
 80097c6:	4369      	muls	r1, r5
 80097c8:	4a33      	ldr	r2, [pc, #204]	; (8009898 <PxMessagingTask+0x1674>)
 80097ca:	1852      	adds	r2, r2, r1
 80097cc:	1912      	adds	r2, r2, r4
 80097ce:	7893      	ldrb	r3, [r2, #2]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	78d1      	ldrb	r1, [r2, #3]
 80097d4:	0409      	lsls	r1, r1, #16
 80097d6:	185b      	adds	r3, r3, r1
 80097d8:	7851      	ldrb	r1, [r2, #1]
 80097da:	185b      	adds	r3, r3, r1
 80097dc:	7912      	ldrb	r2, [r2, #4]
 80097de:	0612      	lsls	r2, r2, #24
 80097e0:	189b      	adds	r3, r3, r2
 80097e2:	4a36      	ldr	r2, [pc, #216]	; (80098bc <PxMessagingTask+0x1698>)
 80097e4:	6193      	str	r3, [r2, #24]
 80097e6:	e75f      	b.n	80096a8 <PxMessagingTask+0x1484>
							else if(1 == ADCSide){
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d000      	beq.n	80097ee <PxMessagingTask+0x15ca>
 80097ec:	e772      	b.n	80096d4 <PxMessagingTask+0x14b0>
								ADCSelectChannel(ADCPort,"bottom");
 80097ee:	4f34      	ldr	r7, [pc, #208]	; (80098c0 <PxMessagingTask+0x169c>)
 80097f0:	0039      	movs	r1, r7
 80097f2:	f003 f817 	bl	800c824 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <PxMessagingTask+0x167c>)
 80097f8:	7818      	ldrb	r0, [r3, #0]
 80097fa:	4a2c      	ldr	r2, [pc, #176]	; (80098ac <PxMessagingTask+0x1688>)
 80097fc:	0039      	movs	r1, r7
 80097fe:	f003 f843 	bl	800c888 <ReadADCChannel>
 8009802:	e767      	b.n	80096d4 <PxMessagingTask+0x14b0>
							ACK_FLAG =1;
 8009804:	4b2f      	ldr	r3, [pc, #188]	; (80098c4 <PxMessagingTask+0x16a0>)
 8009806:	2201      	movs	r2, #1
 8009808:	701a      	strb	r2, [r3, #0]
							break;
 800980a:	2300      	movs	r3, #0
 800980c:	4699      	mov	r9, r3
 800980e:	f7fe fd75 	bl	80082fc <PxMessagingTask+0xd8>
							rejected_FLAG =1;
 8009812:	4b2d      	ldr	r3, [pc, #180]	; (80098c8 <PxMessagingTask+0x16a4>)
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
							break;
 8009818:	2300      	movs	r3, #0
 800981a:	4699      	mov	r9, r3
 800981c:	f7fe fd6e 	bl	80082fc <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009820:	9400      	str	r4, [sp, #0]
 8009822:	465b      	mov	r3, fp
 8009824:	9a04      	ldr	r2, [sp, #16]
 8009826:	9908      	ldr	r1, [sp, #32]
 8009828:	0038      	movs	r0, r7
 800982a:	f7fe fcf9 	bl	8008220 <User_MessagingParser>
 800982e:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 8009830:	2801      	cmp	r0, #1
 8009832:	d001      	beq.n	8009838 <PxMessagingTask+0x1614>
 8009834:	f7fe fd62 	bl	80082fc <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009838:	9400      	str	r4, [sp, #0]
 800983a:	465b      	mov	r3, fp
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	9908      	ldr	r1, [sp, #32]
 8009840:	0038      	movs	r0, r7
 8009842:	f000 fe67 	bl	800a514 <Module_MessagingTask>
 8009846:	4681      	mov	r9, r0
 8009848:	f7fe fd53 	bl	80082f2 <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800984c:	2300      	movs	r3, #0
 800984e:	4699      	mov	r9, r3
 8009850:	f7fe fd4f 	bl	80082f2 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009854:	2300      	movs	r3, #0
 8009856:	4699      	mov	r9, r3
 8009858:	f7fe fd4b 	bl	80082f2 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800985c:	2300      	movs	r3, #0
 800985e:	4699      	mov	r9, r3
 8009860:	f7fe fd47 	bl	80082f2 <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	9804      	ldr	r0, [sp, #16]
 800986a:	f7fe fb19 	bl	8007ea0 <SendMessageToModule>
			result =BOS_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	4699      	mov	r9, r3
 8009872:	f7fe fd43 	bl	80082fc <PxMessagingTask+0xd8>
					switch(code){
 8009876:	2300      	movs	r3, #0
 8009878:	4699      	mov	r9, r3
 800987a:	f7fe fd3f 	bl	80082fc <PxMessagingTask+0xd8>
 800987e:	9207      	str	r2, [sp, #28]
 8009880:	2300      	movs	r3, #0
 8009882:	4699      	mov	r9, r3
 8009884:	f7fe fd3a 	bl	80082fc <PxMessagingTask+0xd8>
 8009888:	2300      	movs	r3, #0
 800988a:	4699      	mov	r9, r3
 800988c:	f7fe fd36 	bl	80082fc <PxMessagingTask+0xd8>
 8009890:	0000ffff 	.word	0x0000ffff
 8009894:	20000be8 	.word	0x20000be8
 8009898:	200008a4 	.word	0x200008a4
 800989c:	20000be0 	.word	0x20000be0
 80098a0:	20001150 	.word	0x20001150
 80098a4:	20001152 	.word	0x20001152
 80098a8:	08017554 	.word	0x08017554
 80098ac:	20001154 	.word	0x20001154
 80098b0:	20001160 	.word	0x20001160
 80098b4:	2000115c 	.word	0x2000115c
 80098b8:	2000114c 	.word	0x2000114c
 80098bc:	20001164 	.word	0x20001164
 80098c0:	08017558 	.word	0x08017558
 80098c4:	200002b4 	.word	0x200002b4
 80098c8:	20000bdc 	.word	0x20000bdc
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80098cc:	455b      	cmp	r3, fp
 80098ce:	d003      	beq.n	80098d8 <PxMessagingTask+0x16b4>
 80098d0:	2f10      	cmp	r7, #16
 80098d2:	d001      	beq.n	80098d8 <PxMessagingTask+0x16b4>
 80098d4:	f7fe fd6f 	bl	80083b6 <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80098d8:	465b      	mov	r3, fp
 80098da:	2bff      	cmp	r3, #255	; 0xff
 80098dc:	d101      	bne.n	80098e2 <PxMessagingTask+0x16be>
 80098de:	f7fe fcd9 	bl	8008294 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80098e2:	2bfe      	cmp	r3, #254	; 0xfe
 80098e4:	d001      	beq.n	80098ea <PxMessagingTask+0x16c6>
 80098e6:	f7fe fd01 	bl	80082ec <PxMessagingTask+0xc8>
 80098ea:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <PxMessagingTask+0x1774>)
 80098ec:	5d5a      	ldrb	r2, [r3, r5]
 80098ee:	4b2b      	ldr	r3, [pc, #172]	; (800999c <PxMessagingTask+0x1778>)
 80098f0:	199b      	adds	r3, r3, r6
 80098f2:	189b      	adds	r3, r3, r2
 80098f4:	3b01      	subs	r3, #1
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	4a29      	ldr	r2, [pc, #164]	; (80099a0 <PxMessagingTask+0x177c>)
 80098fa:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 80098fc:	2103      	movs	r1, #3
 80098fe:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009900:	429a      	cmp	r2, r3
 8009902:	d101      	bne.n	8009908 <PxMessagingTask+0x16e4>
 8009904:	f7fe fcf5 	bl	80082f2 <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009908:	4a25      	ldr	r2, [pc, #148]	; (80099a0 <PxMessagingTask+0x177c>)
 800990a:	7013      	strb	r3, [r2, #0]
 800990c:	4a25      	ldr	r2, [pc, #148]	; (80099a4 <PxMessagingTask+0x1780>)
 800990e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009910:	9908      	ldr	r1, [sp, #32]
 8009912:	20fe      	movs	r0, #254	; 0xfe
 8009914:	f7fe fa7c 	bl	8007e10 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009918:	4b1f      	ldr	r3, [pc, #124]	; (8009998 <PxMessagingTask+0x1774>)
 800991a:	5d59      	ldrb	r1, [r3, r5]
 800991c:	4b1f      	ldr	r3, [pc, #124]	; (800999c <PxMessagingTask+0x1778>)
 800991e:	199b      	adds	r3, r3, r6
 8009920:	185a      	adds	r2, r3, r1
 8009922:	3a01      	subs	r2, #1
 8009924:	2000      	movs	r0, #0
 8009926:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009928:	1e8a      	subs	r2, r1, #2
 800992a:	5c9c      	ldrb	r4, [r3, r2]
 800992c:	9407      	str	r4, [sp, #28]
					for(i =0; i < temp; i++){
 800992e:	2c00      	cmp	r4, #0
 8009930:	d02e      	beq.n	8009990 <PxMessagingTask+0x176c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009932:	1b13      	subs	r3, r2, r4
 8009934:	469c      	mov	ip, r3
 8009936:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <PxMessagingTask+0x1784>)
 8009938:	7818      	ldrb	r0, [r3, #0]
 800993a:	4b18      	ldr	r3, [pc, #96]	; (800999c <PxMessagingTask+0x1778>)
 800993c:	199b      	adds	r3, r3, r6
 800993e:	4662      	mov	r2, ip
 8009940:	5c9b      	ldrb	r3, [r3, r2]
 8009942:	4283      	cmp	r3, r0
 8009944:	d011      	beq.n	800996a <PxMessagingTask+0x1746>
 8009946:	4653      	mov	r3, sl
 8009948:	3301      	adds	r3, #1
 800994a:	4463      	add	r3, ip
 800994c:	4a13      	ldr	r2, [pc, #76]	; (800999c <PxMessagingTask+0x1778>)
 800994e:	189b      	adds	r3, r3, r2
 8009950:	3201      	adds	r2, #1
 8009952:	4452      	add	r2, sl
 8009954:	3c01      	subs	r4, #1
 8009956:	b2e4      	uxtb	r4, r4
 8009958:	1912      	adds	r2, r2, r4
 800995a:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800995c:	4293      	cmp	r3, r2
 800995e:	d017      	beq.n	8009990 <PxMessagingTask+0x176c>
 8009960:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009962:	1e5c      	subs	r4, r3, #1
 8009964:	7824      	ldrb	r4, [r4, #0]
 8009966:	4284      	cmp	r4, r0
 8009968:	d1f8      	bne.n	800995c <PxMessagingTask+0x1738>
				shift +=4;
 800996a:	9c05      	ldr	r4, [sp, #20]
 800996c:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800996e:	1b0a      	subs	r2, r1, r4
 8009970:	b2d3      	uxtb	r3, r2
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	f7fe fcb2 	bl	80082dc <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009978:	2338      	movs	r3, #56	; 0x38
 800997a:	436b      	muls	r3, r5
 800997c:	4a07      	ldr	r2, [pc, #28]	; (800999c <PxMessagingTask+0x1778>)
 800997e:	18d2      	adds	r2, r2, r3
 8009980:	464b      	mov	r3, r9
 8009982:	5cd3      	ldrb	r3, [r2, r3]
 8009984:	3b01      	subs	r3, #1
 8009986:	0098      	lsls	r0, r3, #2
 8009988:	4908      	ldr	r1, [pc, #32]	; (80099ac <PxMessagingTask+0x1788>)
 800998a:	5841      	ldr	r1, [r0, r1]
 800998c:	5dd2      	ldrb	r2, [r2, r7]
 800998e:	e45e      	b.n	800924e <PxMessagingTask+0x102a>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009990:	2366      	movs	r3, #102	; 0x66
 8009992:	4699      	mov	r9, r3
 8009994:	f7fe fcb2 	bl	80082fc <PxMessagingTask+0xd8>
 8009998:	20000a24 	.word	0x20000a24
 800999c:	200008a4 	.word	0x200008a4
 80099a0:	2000118c 	.word	0x2000118c
 80099a4:	20000850 	.word	0x20000850
 80099a8:	20000b66 	.word	0x20000b66
 80099ac:	20005a64 	.word	0x20005a64

080099b0 <unitCommand>:
 |															Commands																 	|
 -----------------------------------------------------------------------
 */

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 80099b0:	b510      	push	{r4, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	0004      	movs	r4, r0
 80099b6:	0010      	movs	r0, r2
	Module_Status result = H2AR3_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	9301      	str	r3, [sp, #4]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 80099bc:	aa01      	add	r2, sp, #4
 80099be:	2101      	movs	r1, #1
 80099c0:	f004 f9a4 	bl	800dd0c <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 80099c4:	7803      	ldrb	r3, [r0, #0]
 80099c6:	2b76      	cmp	r3, #118	; 0x76
 80099c8:	d009      	beq.n	80099de <unitCommand+0x2e>
		unit = Volt;
		strcpy((char*) pcWriteBuffer,
				(char*) "Used measurement unit: Volt\r\n");
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 80099ca:	2b61      	cmp	r3, #97	; 0x61
 80099cc:	d010      	beq.n	80099f0 <unitCommand+0x40>
		result = H2AR3_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H2AR3_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 80099ce:	2213      	movs	r2, #19
 80099d0:	490c      	ldr	r1, [pc, #48]	; (8009a04 <unitCommand+0x54>)
 80099d2:	0020      	movs	r0, r4
 80099d4:	f009 f9d5 	bl	8012d82 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 80099d8:	2000      	movs	r0, #0
 80099da:	b002      	add	sp, #8
 80099dc:	bd10      	pop	{r4, pc}
		unit = Volt;
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <unitCommand+0x58>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 80099e4:	321d      	adds	r2, #29
 80099e6:	4909      	ldr	r1, [pc, #36]	; (8009a0c <unitCommand+0x5c>)
 80099e8:	0020      	movs	r0, r4
 80099ea:	f009 f9ca 	bl	8012d82 <memcpy>
 80099ee:	e7f3      	b.n	80099d8 <unitCommand+0x28>
		unit = Amp;
 80099f0:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <unitCommand+0x58>)
 80099f2:	2202      	movs	r2, #2
 80099f4:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 80099f6:	321e      	adds	r2, #30
 80099f8:	4905      	ldr	r1, [pc, #20]	; (8009a10 <unitCommand+0x60>)
 80099fa:	0020      	movs	r0, r4
 80099fc:	f009 f9c1 	bl	8012d82 <memcpy>
 8009a00:	e7ea      	b.n	80099d8 <unitCommand+0x28>
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	08017f00 	.word	0x08017f00
 8009a08:	200000a4 	.word	0x200000a4
 8009a0c:	0801953c 	.word	0x0801953c
 8009a10:	0801955c 	.word	0x0801955c

08009a14 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 8009a14:	b510      	push	{r4, lr}
 8009a16:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009a18:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <CheckForEnterKey+0x5c>)
 8009a1a:	781c      	ldrb	r4, [r3, #0]
 8009a1c:	3c01      	subs	r4, #1
 8009a1e:	0063      	lsls	r3, r4, #1
 8009a20:	191b      	adds	r3, r3, r4
 8009a22:	019b      	lsls	r3, r3, #6
 8009a24:	4a13      	ldr	r2, [pc, #76]	; (8009a74 <CheckForEnterKey+0x60>)
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	2b0d      	cmp	r3, #13
 8009a2a:	d00c      	beq.n	8009a46 <CheckForEnterKey+0x32>
 8009a2c:	0061      	lsls	r1, r4, #1
 8009a2e:	1909      	adds	r1, r1, r4
 8009a30:	0189      	lsls	r1, r1, #6
 8009a32:	1889      	adds	r1, r1, r2
 8009a34:	2301      	movs	r3, #1
 8009a36:	0018      	movs	r0, r3
 8009a38:	5cca      	ldrb	r2, [r1, r3]
 8009a3a:	2a0d      	cmp	r2, #13
 8009a3c:	d004      	beq.n	8009a48 <CheckForEnterKey+0x34>
 8009a3e:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 8009a40:	2bc0      	cmp	r3, #192	; 0xc0
 8009a42:	d1f8      	bne.n	8009a36 <CheckForEnterKey+0x22>
 8009a44:	e012      	b.n	8009a6c <CheckForEnterKey+0x58>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009a46:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 8009a48:	0063      	lsls	r3, r4, #1
 8009a4a:	191c      	adds	r4, r3, r4
 8009a4c:	01a4      	lsls	r4, r4, #6
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <CheckForEnterKey+0x60>)
 8009a50:	191c      	adds	r4, r3, r4
 8009a52:	2300      	movs	r3, #0
 8009a54:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 8009a56:	4a08      	ldr	r2, [pc, #32]	; (8009a78 <CheckForEnterKey+0x64>)
 8009a58:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 8009a5a:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <CheckForEnterKey+0x68>)
 8009a5c:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 8009a5e:	4a08      	ldr	r2, [pc, #32]	; (8009a80 <CheckForEnterKey+0x6c>)
 8009a60:	6810      	ldr	r0, [r2, #0]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	2200      	movs	r2, #0
 8009a66:	2103      	movs	r1, #3
 8009a68:	f005 fc92 	bl	800f390 <xTimerGenericCommand>
}
 8009a6c:	b002      	add	sp, #8
 8009a6e:	bd10      	pop	{r4, pc}
 8009a70:	2000060b 	.word	0x2000060b
 8009a74:	20000da8 	.word	0x20000da8
 8009a78:	20001340 	.word	0x20001340
 8009a7c:	20005c74 	.word	0x20005c74
 8009a80:	20001348 	.word	0x20001348

08009a84 <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 8009a84:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 8009a86:	f005 fdb9 	bl	800f5fc <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 8009a8a:	28ff      	cmp	r0, #255	; 0xff
 8009a8c:	d000      	beq.n	8009a90 <HandleTimeout+0xc>
}
 8009a8e:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 8009a90:	2300      	movs	r3, #0
 8009a92:	4a02      	ldr	r2, [pc, #8]	; (8009a9c <HandleTimeout+0x18>)
 8009a94:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 8009a96:	4a02      	ldr	r2, [pc, #8]	; (8009aa0 <HandleTimeout+0x1c>)
 8009a98:	7013      	strb	r3, [r2, #0]
}
 8009a9a:	e7f8      	b.n	8009a8e <HandleTimeout+0xa>
 8009a9c:	20005c74 	.word	0x20005c74
 8009aa0:	20001340 	.word	0x20001340

08009aa4 <SystemClock_Config>:
void SystemClock_Config(void) {
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009aa8:	2401      	movs	r4, #1
 8009aaa:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009aac:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009aae:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ab4:	2702      	movs	r7, #2
 8009ab6:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ab8:	2680      	movs	r6, #128	; 0x80
 8009aba:	0276      	lsls	r6, r6, #9
 8009abc:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009abe:	2380      	movs	r3, #128	; 0x80
 8009ac0:	035b      	lsls	r3, r3, #13
 8009ac2:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009ac8:	a80d      	add	r0, sp, #52	; 0x34
 8009aca:	f007 fbd1 	bl	8011270 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009ace:	2307      	movs	r3, #7
 8009ad0:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009ad2:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009ad4:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009ad6:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009ad8:	2101      	movs	r1, #1
 8009ada:	a809      	add	r0, sp, #36	; 0x24
 8009adc:	f007 fe8a 	bl	80117f4 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <SystemClock_Config+0xa8>)
 8009ae2:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009ae4:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009ae6:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009ae8:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009aea:	a802      	add	r0, sp, #8
 8009aec:	f008 f830 	bl	8011b50 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009af0:	4d17      	ldr	r5, [pc, #92]	; (8009b50 <SystemClock_Config+0xac>)
 8009af2:	69ea      	ldr	r2, [r5, #28]
 8009af4:	2180      	movs	r1, #128	; 0x80
 8009af6:	0549      	lsls	r1, r1, #21
 8009af8:	430a      	orrs	r2, r1
 8009afa:	61ea      	str	r2, [r5, #28]
 8009afc:	69eb      	ldr	r3, [r5, #28]
 8009afe:	400b      	ands	r3, r1
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009b04:	f007 fbaa 	bl	801125c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009b08:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009b0a:	23c0      	movs	r3, #192	; 0xc0
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009b10:	a802      	add	r0, sp, #8
 8009b12:	f008 f81d 	bl	8011b50 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009b16:	f007 fff7 	bl	8011b08 <HAL_RCC_GetHCLKFreq>
 8009b1a:	21fa      	movs	r1, #250	; 0xfa
 8009b1c:	0089      	lsls	r1, r1, #2
 8009b1e:	f7f6 fb0d 	bl	800013c <__udivsi3>
 8009b22:	f006 fa99 	bl	8010058 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009b26:	2004      	movs	r0, #4
 8009b28:	f006 fab2 	bl	8010090 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 8009b2c:	69ab      	ldr	r3, [r5, #24]
 8009b2e:	4323      	orrs	r3, r4
 8009b30:	61ab      	str	r3, [r5, #24]
 8009b32:	69ab      	ldr	r3, [r5, #24]
 8009b34:	401c      	ands	r4, r3
 8009b36:	9401      	str	r4, [sp, #4]
 8009b38:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4240      	negs	r0, r0
 8009b42:	f006 fa41 	bl	800ffc8 <HAL_NVIC_SetPriority>
}
 8009b46:	b01b      	add	sp, #108	; 0x6c
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	00040003 	.word	0x00040003
 8009b50:	40021000 	.word	0x40021000

08009b54 <SaveToRO>:
uint8_t SaveToRO(void) {
 8009b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b56:	46de      	mov	lr, fp
 8009b58:	4657      	mov	r7, sl
 8009b5a:	464e      	mov	r6, r9
 8009b5c:	4645      	mov	r5, r8
 8009b5e:	b5e0      	push	{r5, r6, r7, lr}
 8009b60:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 8009b62:	2215      	movs	r2, #21
 8009b64:	2100      	movs	r1, #0
 8009b66:	a802      	add	r0, sp, #8
 8009b68:	f009 f914 	bl	8012d94 <memset>
	HAL_FLASH_Unlock();
 8009b6c:	f007 f8c2 	bl	8010cf4 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8009b70:	4872      	ldr	r0, [pc, #456]	; (8009d3c <SaveToRO+0x1e8>)
 8009b72:	f007 f981 	bl	8010e78 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 8009b76:	4872      	ldr	r0, [pc, #456]	; (8009d40 <SaveToRO+0x1ec>)
 8009b78:	f007 f8d8 	bl	8010d2c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d112      	bne.n	8009ba6 <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009b80:	4a70      	ldr	r2, [pc, #448]	; (8009d44 <SaveToRO+0x1f0>)
 8009b82:	6913      	ldr	r3, [r2, #16]
 8009b84:	2102      	movs	r1, #2
 8009b86:	438b      	bics	r3, r1
 8009b88:	6113      	str	r3, [r2, #16]
	if (myID) {
 8009b8a:	4b6f      	ldr	r3, [pc, #444]	; (8009d48 <SaveToRO+0x1f4>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d113      	bne.n	8009bba <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009b92:	4b6e      	ldr	r3, [pc, #440]	; (8009d4c <SaveToRO+0x1f8>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d100      	bne.n	8009b9c <SaveToRO+0x48>
 8009b9a:	e0ca      	b.n	8009d32 <SaveToRO+0x1de>
 8009b9c:	2500      	movs	r5, #0
 8009b9e:	4c6c      	ldr	r4, [pc, #432]	; (8009d50 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 8009ba0:	4b6c      	ldr	r3, [pc, #432]	; (8009d54 <SaveToRO+0x200>)
 8009ba2:	4698      	mov	r8, r3
 8009ba4:	e06e      	b.n	8009c84 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 8009ba6:	4b6c      	ldr	r3, [pc, #432]	; (8009d58 <SaveToRO+0x204>)
 8009ba8:	69d8      	ldr	r0, [r3, #28]
 8009baa:	b2c0      	uxtb	r0, r0
}
 8009bac:	b009      	add	sp, #36	; 0x24
 8009bae:	bc3c      	pop	{r2, r3, r4, r5}
 8009bb0:	4690      	mov	r8, r2
 8009bb2:	4699      	mov	r9, r3
 8009bb4:	46a2      	mov	sl, r4
 8009bb6:	46ab      	mov	fp, r5
 8009bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009bba:	4a68      	ldr	r2, [pc, #416]	; (8009d5c <SaveToRO+0x208>)
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	0212      	lsls	r2, r2, #8
 8009bc0:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009bc2:	b292      	uxth	r2, r2
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	495d      	ldr	r1, [pc, #372]	; (8009d3c <SaveToRO+0x1e8>)
 8009bc8:	2001      	movs	r0, #1
 8009bca:	f007 f8dd 	bl	8010d88 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009bce:	485c      	ldr	r0, [pc, #368]	; (8009d40 <SaveToRO+0x1ec>)
 8009bd0:	f007 f8ac 	bl	8010d2c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d111      	bne.n	8009bfc <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009bd8:	4a5a      	ldr	r2, [pc, #360]	; (8009d44 <SaveToRO+0x1f0>)
 8009bda:	6913      	ldr	r3, [r2, #16]
 8009bdc:	2101      	movs	r1, #1
 8009bde:	438b      	bics	r3, r1
 8009be0:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009be2:	4b5e      	ldr	r3, [pc, #376]	; (8009d5c <SaveToRO+0x208>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2201      	movs	r2, #1
 8009be8:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 8009bea:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0d0      	beq.n	8009b92 <SaveToRO+0x3e>
 8009bf0:	2316      	movs	r3, #22
 8009bf2:	469b      	mov	fp, r3
 8009bf4:	4b5a      	ldr	r3, [pc, #360]	; (8009d60 <SaveToRO+0x20c>)
 8009bf6:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 8009bf8:	4698      	mov	r8, r3
 8009bfa:	e02a      	b.n	8009c52 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 8009bfc:	4b56      	ldr	r3, [pc, #344]	; (8009d58 <SaveToRO+0x204>)
 8009bfe:	69d8      	ldr	r0, [r3, #28]
 8009c00:	b2c0      	uxtb	r0, r0
 8009c02:	e7d3      	b.n	8009bac <SaveToRO+0x58>
						return pFlash.ErrorCode;
 8009c04:	4b54      	ldr	r3, [pc, #336]	; (8009d58 <SaveToRO+0x204>)
 8009c06:	69d8      	ldr	r0, [r3, #28]
 8009c08:	b2c0      	uxtb	r0, r0
 8009c0a:	e7cf      	b.n	8009bac <SaveToRO+0x58>
 8009c0c:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009c0e:	42b4      	cmp	r4, r6
 8009c10:	d017      	beq.n	8009c42 <SaveToRO+0xee>
				if (array[i - 1][0]) {
 8009c12:	4643      	mov	r3, r8
 8009c14:	5afb      	ldrh	r3, [r7, r3]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0f8      	beq.n	8009c0c <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009c1a:	8822      	ldrh	r2, [r4, #0]
 8009c1c:	4b47      	ldr	r3, [pc, #284]	; (8009d3c <SaveToRO+0x1e8>)
 8009c1e:	18e9      	adds	r1, r5, r3
 8009c20:	2300      	movs	r3, #0
 8009c22:	2001      	movs	r0, #1
 8009c24:	f007 f8b0 	bl	8010d88 <HAL_FLASH_Program>
					add += 2;
 8009c28:	3502      	adds	r5, #2
 8009c2a:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 8009c2c:	4844      	ldr	r0, [pc, #272]	; (8009d40 <SaveToRO+0x1ec>)
 8009c2e:	f007 f87d 	bl	8010d2c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1e6      	bne.n	8009c04 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009c36:	4a43      	ldr	r2, [pc, #268]	; (8009d44 <SaveToRO+0x1f0>)
 8009c38:	6913      	ldr	r3, [r2, #16]
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	438b      	bics	r3, r1
 8009c3e:	6113      	str	r3, [r2, #16]
 8009c40:	e7e4      	b.n	8009c0c <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 8009c42:	464b      	mov	r3, r9
 8009c44:	3301      	adds	r3, #1
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4699      	mov	r9, r3
 8009c4a:	4b44      	ldr	r3, [pc, #272]	; (8009d5c <SaveToRO+0x208>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	454b      	cmp	r3, r9
 8009c50:	d39f      	bcc.n	8009b92 <SaveToRO+0x3e>
 8009c52:	465e      	mov	r6, fp
 8009c54:	464b      	mov	r3, r9
 8009c56:	435e      	muls	r6, r3
 8009c58:	0034      	movs	r4, r6
 8009c5a:	3c16      	subs	r4, #22
 8009c5c:	4454      	add	r4, sl
 8009c5e:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 8009c60:	1e5f      	subs	r7, r3, #1
 8009c62:	465b      	mov	r3, fp
 8009c64:	435f      	muls	r7, r3
 8009c66:	e7d4      	b.n	8009c12 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 8009c68:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <SaveToRO+0x204>)
 8009c6a:	69d8      	ldr	r0, [r3, #28]
 8009c6c:	b2c0      	uxtb	r0, r0
 8009c6e:	e79d      	b.n	8009bac <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009c70:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <SaveToRO+0x204>)
 8009c72:	69d8      	ldr	r0, [r3, #28]
 8009c74:	b2c0      	uxtb	r0, r0
 8009c76:	e799      	b.n	8009bac <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009c78:	3501      	adds	r5, #1
 8009c7a:	b2ed      	uxtb	r5, r5
 8009c7c:	4b33      	ldr	r3, [pc, #204]	; (8009d4c <SaveToRO+0x1f8>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	d956      	bls.n	8009d32 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 8009c84:	9501      	str	r5, [sp, #4]
 8009c86:	00ab      	lsls	r3, r5, #2
 8009c88:	195b      	adds	r3, r3, r5
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	5c9b      	ldrb	r3, [r3, r2]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0f1      	beq.n	8009c78 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009c94:	23fe      	movs	r3, #254	; 0xfe
 8009c96:	aa02      	add	r2, sp, #8
 8009c98:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009c9a:	00a9      	lsls	r1, r5, #2
 8009c9c:	1949      	adds	r1, r1, r5
 8009c9e:	0089      	lsls	r1, r1, #2
 8009ca0:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <SaveToRO+0x200>)
 8009ca2:	469c      	mov	ip, r3
 8009ca4:	4461      	add	r1, ip
 8009ca6:	2214      	movs	r2, #20
 8009ca8:	ab02      	add	r3, sp, #8
 8009caa:	1c58      	adds	r0, r3, #1
 8009cac:	f009 f869 	bl	8012d82 <memcpy>
 8009cb0:	2314      	movs	r3, #20
 8009cb2:	469b      	mov	fp, r3
 8009cb4:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 8009cb6:	ae02      	add	r6, sp, #8
 8009cb8:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009cba:	4f22      	ldr	r7, [pc, #136]	; (8009d44 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009cbc:	5b32      	ldrh	r2, [r6, r4]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	0021      	movs	r1, r4
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	f007 f860 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009cc8:	481d      	ldr	r0, [pc, #116]	; (8009d40 <SaveToRO+0x1ec>)
 8009cca:	f007 f82f 	bl	8010d2c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d1ca      	bne.n	8009c68 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	4393      	bics	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009cda:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009cdc:	455c      	cmp	r4, fp
 8009cde:	d1ed      	bne.n	8009cbc <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009ce0:	2700      	movs	r7, #0
 8009ce2:	9a01      	ldr	r2, [sp, #4]
 8009ce4:	0093      	lsls	r3, r2, #2
 8009ce6:	189e      	adds	r6, r3, r2
 8009ce8:	00b6      	lsls	r6, r6, #2
 8009cea:	4b1a      	ldr	r3, [pc, #104]	; (8009d54 <SaveToRO+0x200>)
 8009cec:	469a      	mov	sl, r3
 8009cee:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <SaveToRO+0x1f0>)
 8009cf2:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009cf4:	4653      	mov	r3, sl
 8009cf6:	68de      	ldr	r6, [r3, #12]
 8009cf8:	0030      	movs	r0, r6
 8009cfa:	f7f6 fa0d 	bl	8000118 <strlen>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	0840      	lsrs	r0, r0, #1
 8009d02:	4287      	cmp	r7, r0
 8009d04:	d2b8      	bcs.n	8009c78 <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009d06:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009d08:	5af2      	ldrh	r2, [r6, r3]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	0021      	movs	r1, r4
 8009d0e:	2001      	movs	r0, #1
 8009d10:	f007 f83a 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009d14:	480a      	ldr	r0, [pc, #40]	; (8009d40 <SaveToRO+0x1ec>)
 8009d16:	f007 f809 	bl	8010d2c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d1a8      	bne.n	8009c70 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d1e:	465b      	mov	r3, fp
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2201      	movs	r2, #1
 8009d24:	4393      	bics	r3, r2
 8009d26:	465a      	mov	r2, fp
 8009d28:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 8009d2a:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009d2c:	3701      	adds	r7, #1
 8009d2e:	b2ff      	uxtb	r7, r7
 8009d30:	e7e0      	b.n	8009cf4 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 8009d32:	f006 fff1 	bl	8010d18 <HAL_FLASH_Lock>
	return result;
 8009d36:	2000      	movs	r0, #0
 8009d38:	e738      	b.n	8009bac <SaveToRO+0x58>
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	0801d800 	.word	0x0801d800
 8009d40:	0000c350 	.word	0x0000c350
 8009d44:	40022000 	.word	0x40022000
 8009d48:	20000b66 	.word	0x20000b66
 8009d4c:	20000cf7 	.word	0x20000cf7
 8009d50:	0801dc00 	.word	0x0801dc00
 8009d54:	20005af8 	.word	0x20005af8
 8009d58:	20006020 	.word	0x20006020
 8009d5c:	20000030 	.word	0x20000030
 8009d60:	20000614 	.word	0x20000614

08009d64 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 8009d64:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009d66:	228f      	movs	r2, #143	; 0x8f
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4805      	ldr	r0, [pc, #20]	; (8009d84 <ClearROtopology+0x20>)
 8009d6e:	f009 f811 	bl	8012d94 <memset>
	N = 1;
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <ClearROtopology+0x24>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
	myID = 0;
 8009d78:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <ClearROtopology+0x28>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009d7e:	f7ff fee9 	bl	8009b54 <SaveToRO>
}
 8009d82:	bd10      	pop	{r4, pc}
 8009d84:	20000614 	.word	0x20000614
 8009d88:	20000030 	.word	0x20000030
 8009d8c:	20000b66 	.word	0x20000b66

08009d90 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009d90:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009d92:	f003 fd0b 	bl	800d7ac <GetUart>
 8009d96:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 8009d98:	23e1      	movs	r3, #225	; 0xe1
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009d9e:	2380      	movs	r3, #128	; 0x80
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	015b      	lsls	r3, r3, #5
 8009da8:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009daa:	f008 fe13 	bl	80129d4 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	6813      	ldr	r3, [r2, #0]
 8009db2:	2120      	movs	r1, #32
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6013      	str	r3, [r2, #0]
}
 8009db8:	bd10      	pop	{r4, pc}
	...

08009dbc <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	0007      	movs	r7, r0
 8009dc2:	000e      	movs	r6, r1
 8009dc4:	0015      	movs	r5, r2
 8009dc6:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 8009dc8:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <remoteBootloaderUpdate+0xbc>)
 8009dca:	7818      	ldrb	r0, [r3, #0]
 8009dcc:	f7f9 fdd2 	bl	8003974 <FindRoute>
 8009dd0:	9005      	str	r0, [sp, #20]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009dd2:	2c00      	cmp	r4, #0
 8009dd4:	d035      	beq.n	8009e42 <remoteBootloaderUpdate+0x86>
 8009dd6:	4b28      	ldr	r3, [pc, #160]	; (8009e78 <remoteBootloaderUpdate+0xbc>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	42b3      	cmp	r3, r6
 8009ddc:	d024      	beq.n	8009e28 <remoteBootloaderUpdate+0x6c>
	if(src == myID){
 8009dde:	4b26      	ldr	r3, [pc, #152]	; (8009e78 <remoteBootloaderUpdate+0xbc>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	42bb      	cmp	r3, r7
 8009de4:	d131      	bne.n	8009e4a <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009de6:	f003 ff8d 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8009dea:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009dec:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <remoteBootloaderUpdate+0xc0>)
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	0023      	movs	r3, r4
 8009df2:	0032      	movs	r2, r6
 8009df4:	0038      	movs	r0, r7
 8009df6:	f009 fd5b 	bl	80138b0 <siprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009dfa:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <remoteBootloaderUpdate+0xc4>)
 8009dfc:	6819      	ldr	r1, [r3, #0]
 8009dfe:	0038      	movs	r0, r7
 8009e00:	f009 fd76 	bl	80138f0 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009e04:	0038      	movs	r0, r7
 8009e06:	f7f6 f987 	bl	8000118 <strlen>
 8009e0a:	b282      	uxth	r2, r0
 8009e0c:	2332      	movs	r3, #50	; 0x32
 8009e0e:	0039      	movs	r1, r7
 8009e10:	0028      	movs	r0, r5
 8009e12:	f003 fd07 	bl	800d824 <writePxITMutex>
		Delay_ms(100);
 8009e16:	2064      	movs	r0, #100	; 0x64
 8009e18:	f005 fdb4 	bl	800f984 <HAL_Delay>
 8009e1c:	e015      	b.n	8009e4a <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009e1e:	f003 ff71 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8009e22:	0007      	movs	r7, r0
		myOutport =outport;
 8009e24:	9405      	str	r4, [sp, #20]
 8009e26:	e7e1      	b.n	8009dec <remoteBootloaderUpdate+0x30>
	if(src == myID){
 8009e28:	42bb      	cmp	r3, r7
 8009e2a:	d0f8      	beq.n	8009e1e <remoteBootloaderUpdate+0x62>
		myOutport =outport;
 8009e2c:	9405      	str	r4, [sp, #20]
 8009e2e:	e00c      	b.n	8009e4a <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009e30:	f003 ff68 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8009e34:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009e36:	4b13      	ldr	r3, [pc, #76]	; (8009e84 <remoteBootloaderUpdate+0xc8>)
 8009e38:	6819      	ldr	r1, [r3, #0]
 8009e3a:	0032      	movs	r2, r6
 8009e3c:	f009 fd38 	bl	80138b0 <siprintf>
 8009e40:	e7db      	b.n	8009dfa <remoteBootloaderUpdate+0x3e>
	if(src == myID){
 8009e42:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <remoteBootloaderUpdate+0xbc>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	42bb      	cmp	r3, r7
 8009e48:	d0f2      	beq.n	8009e30 <remoteBootloaderUpdate+0x74>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009e4a:	0028      	movs	r0, r5
 8009e4c:	f7ff ffa0 	bl	8009d90 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009e50:	9c05      	ldr	r4, [sp, #20]
 8009e52:	0020      	movs	r0, r4
 8009e54:	f7ff ff9c 	bl	8009d90 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009e58:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <remoteBootloaderUpdate+0xbc>)
 8009e5a:	7819      	ldrb	r1, [r3, #0]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	9302      	str	r3, [sp, #8]
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	3303      	adds	r3, #3
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	000b      	movs	r3, r1
 8009e6c:	0022      	movs	r2, r4
 8009e6e:	0028      	movs	r0, r5
 8009e70:	f7fe f83c 	bl	8007eec <StartScastDMAStream>
}
 8009e74:	b007      	add	sp, #28
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e78:	20000b66 	.word	0x20000b66
 8009e7c:	2000008c 	.word	0x2000008c
 8009e80:	20000090 	.word	0x20000090
 8009e84:	20000088 	.word	0x20000088

08009e88 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 8009e88:	b500      	push	{lr}
 8009e8a:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 8009e8c:	f003 fb74 	bl	800d578 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8009e90:	f003 fb8a 	bl	800d5a8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8009e94:	f003 fba0 	bl	800d5d8 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 8009e98:	f003 fbb6 	bl	800d608 <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 8009e9c:	f003 fbcc 	bl	800d638 <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 8009ea0:	2296      	movs	r2, #150	; 0x96
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <Module_Peripheral_Init+0x3c>)
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	2303      	movs	r3, #3
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	0052      	lsls	r2, r2, #1
 8009eb4:	4904      	ldr	r1, [pc, #16]	; (8009ec8 <Module_Peripheral_Init+0x40>)
 8009eb6:	4805      	ldr	r0, [pc, #20]	; (8009ecc <Module_Peripheral_Init+0x44>)
 8009eb8:	f004 fb96 	bl	800e5e8 <xTaskGenericCreate>
	MX_ADC_Init();
 8009ebc:	f002 fae8 	bl	800c490 <MX_ADC_Init>
}
 8009ec0:	b005      	add	sp, #20
 8009ec2:	bd00      	pop	{pc}
 8009ec4:	2000133c 	.word	0x2000133c
 8009ec8:	08019318 	.word	0x08019318
 8009ecc:	0800a261 	.word	0x0800a261

08009ed0 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 8009ed0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 8009ed2:	4808      	ldr	r0, [pc, #32]	; (8009ef4 <RegisterModuleCLICommands+0x24>)
 8009ed4:	f003 fe80 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 8009ed8:	4807      	ldr	r0, [pc, #28]	; (8009ef8 <RegisterModuleCLICommands+0x28>)
 8009eda:	f003 fe7d 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 8009ede:	4807      	ldr	r0, [pc, #28]	; (8009efc <RegisterModuleCLICommands+0x2c>)
 8009ee0:	f003 fe7a 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 8009ee4:	4806      	ldr	r0, [pc, #24]	; (8009f00 <RegisterModuleCLICommands+0x30>)
 8009ee6:	f003 fe77 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 8009eea:	4806      	ldr	r0, [pc, #24]	; (8009f04 <RegisterModuleCLICommands+0x34>)
 8009eec:	f003 fe74 	bl	800dbd8 <FreeRTOS_CLIRegisterCommand>
}
 8009ef0:	bd10      	pop	{r4, pc}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	080193b4 	.word	0x080193b4
 8009ef8:	0801952c 	.word	0x0801952c
 8009efc:	080193c4 	.word	0x080193c4
 8009f00:	0801957c 	.word	0x0801957c
 8009f04:	080193a4 	.word	0x080193a4

08009f08 <GetPort>:
	if (huart->Instance == USART2)
 8009f08:	6800      	ldr	r0, [r0, #0]
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <GetPort+0x28>)
 8009f0c:	4298      	cmp	r0, r3
 8009f0e:	d00b      	beq.n	8009f28 <GetPort+0x20>
	else if (huart->Instance == USART6)
 8009f10:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <GetPort+0x2c>)
 8009f12:	4298      	cmp	r0, r3
 8009f14:	d00a      	beq.n	8009f2c <GetPort+0x24>
	return 0;
 8009f16:	4b08      	ldr	r3, [pc, #32]	; (8009f38 <GetPort+0x30>)
 8009f18:	469c      	mov	ip, r3
 8009f1a:	4460      	add	r0, ip
 8009f1c:	4243      	negs	r3, r0
 8009f1e:	4158      	adcs	r0, r3
 8009f20:	4240      	negs	r0, r0
 8009f22:	2303      	movs	r3, #3
 8009f24:	4018      	ands	r0, r3
}
 8009f26:	4770      	bx	lr
		return P1;
 8009f28:	2001      	movs	r0, #1
 8009f2a:	e7fc      	b.n	8009f26 <GetPort+0x1e>
		return P2;
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	e7fa      	b.n	8009f26 <GetPort+0x1e>
 8009f30:	40004400 	.word	0x40004400
 8009f34:	40011400 	.word	0x40011400
 8009f38:	bfffb800 	.word	0xbfffb800

08009f3c <SendResults>:
		uint8_t Module, float *Buffer) {
 8009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	1c07      	adds	r7, r0, #0
 8009f42:	000c      	movs	r4, r1
 8009f44:	9302      	str	r3, [sp, #8]
 8009f46:	ab0c      	add	r3, sp, #48	; 0x30
 8009f48:	781d      	ldrb	r5, [r3, #0]
	uint32_t RawMsgInt = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 8009f4e:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009f50:	f003 fed8 	bl	800dd04 <FreeRTOS_CLIGetOutputBuffer>
 8009f54:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 8009f56:	2c04      	cmp	r4, #4
 8009f58:	d100      	bne.n	8009f5c <SendResults+0x20>
 8009f5a:	e0ce      	b.n	800a0fa <SendResults+0x1be>
 8009f5c:	2c02      	cmp	r4, #2
 8009f5e:	d11d      	bne.n	8009f9c <SendResults+0x60>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 8009f60:	4b67      	ldr	r3, [pc, #412]	; (800a100 <SendResults+0x1c4>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b05      	cmp	r3, #5
 8009f66:	d07d      	beq.n	800a064 <SendResults+0x128>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 8009f68:	2b07      	cmp	r3, #7
 8009f6a:	d000      	beq.n	8009f6e <SendResults+0x32>
 8009f6c:	e0be      	b.n	800a0ec <SendResults+0x1b0>
			if (Module == myID) {
 8009f6e:	4b65      	ldr	r3, [pc, #404]	; (800a104 <SendResults+0x1c8>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	42ab      	cmp	r3, r5
 8009f74:	d100      	bne.n	8009f78 <SendResults+0x3c>
 8009f76:	e0a3      	b.n	800a0c0 <SendResults+0x184>
				messageParams[0] = Port;
 8009f78:	4b63      	ldr	r3, [pc, #396]	; (800a108 <SendResults+0x1cc>)
 8009f7a:	9a02      	ldr	r2, [sp, #8]
 8009f7c:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 8009f7e:	aa05      	add	r2, sp, #20
 8009f80:	78d1      	ldrb	r1, [r2, #3]
 8009f82:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 8009f84:	7891      	ldrb	r1, [r2, #2]
 8009f86:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 8009f88:	7851      	ldrb	r1, [r2, #1]
 8009f8a:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 8009f90:	2205      	movs	r2, #5
 8009f92:	2123      	movs	r1, #35	; 0x23
 8009f94:	0028      	movs	r0, r5
 8009f96:	f7fd ff83 	bl	8007ea0 <SendMessageToModule>
 8009f9a:	e0a7      	b.n	800a0ec <SendResults+0x1b0>
		strUnit = malloc(6 * sizeof(char));
 8009f9c:	2006      	movs	r0, #6
 8009f9e:	f008 febb 	bl	8012d18 <malloc>
 8009fa2:	0006      	movs	r6, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 8009fa4:	2206      	movs	r2, #6
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f008 fef4 	bl	8012d94 <memset>
		if (unit == Volt) {
 8009fac:	4b57      	ldr	r3, [pc, #348]	; (800a10c <SendResults+0x1d0>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d00d      	beq.n	8009fd0 <SendResults+0x94>
		} else if (unit == Amp) {
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d011      	beq.n	8009fdc <SendResults+0xa0>
			sprintf((char*) strUnit, "Volt");
 8009fb8:	4b55      	ldr	r3, [pc, #340]	; (800a110 <SendResults+0x1d4>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	6032      	str	r2, [r6, #0]
 8009fbe:	791b      	ldrb	r3, [r3, #4]
 8009fc0:	7133      	strb	r3, [r6, #4]
	switch (Mode) {
 8009fc2:	2c08      	cmp	r4, #8
 8009fc4:	d900      	bls.n	8009fc8 <SendResults+0x8c>
 8009fc6:	e095      	b.n	800a0f4 <SendResults+0x1b8>
 8009fc8:	00a3      	lsls	r3, r4, #2
 8009fca:	4a52      	ldr	r2, [pc, #328]	; (800a114 <SendResults+0x1d8>)
 8009fcc:	58d3      	ldr	r3, [r2, r3]
 8009fce:	469f      	mov	pc, r3
			sprintf((char*) strUnit, "Volt");
 8009fd0:	4b4f      	ldr	r3, [pc, #316]	; (800a110 <SendResults+0x1d4>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	6032      	str	r2, [r6, #0]
 8009fd6:	791b      	ldrb	r3, [r3, #4]
 8009fd8:	7133      	strb	r3, [r6, #4]
 8009fda:	e7f2      	b.n	8009fc2 <SendResults+0x86>
			sprintf((char*) strUnit, "Amp");
 8009fdc:	4b4e      	ldr	r3, [pc, #312]	; (800a118 <SendResults+0x1dc>)
 8009fde:	6033      	str	r3, [r6, #0]
 8009fe0:	e7ef      	b.n	8009fc2 <SendResults+0x86>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 8009fe2:	4b47      	ldr	r3, [pc, #284]	; (800a100 <SendResults+0x1c4>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	d01d      	beq.n	800a026 <SendResults+0xea>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 8009fea:	2b07      	cmp	r3, #7
 8009fec:	d17e      	bne.n	800a0ec <SendResults+0x1b0>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 8009fee:	1c38      	adds	r0, r7, #0
 8009ff0:	f7f8 fcac 	bl	800294c <__aeabi_f2d>
 8009ff4:	9000      	str	r0, [sp, #0]
 8009ff6:	9101      	str	r1, [sp, #4]
 8009ff8:	0032      	movs	r2, r6
 8009ffa:	4948      	ldr	r1, [pc, #288]	; (800a11c <SendResults+0x1e0>)
 8009ffc:	9d03      	ldr	r5, [sp, #12]
 8009ffe:	0028      	movs	r0, r5
 800a000:	f009 fc56 	bl	80138b0 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a004:	0028      	movs	r0, r5
 800a006:	f7f6 f887 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a00a:	23fa      	movs	r3, #250	; 0xfa
 800a00c:	b282      	uxth	r2, r0
 800a00e:	4944      	ldr	r1, [pc, #272]	; (800a120 <SendResults+0x1e4>)
 800a010:	7808      	ldrb	r0, [r1, #0]
 800a012:	2101      	movs	r1, #1
 800a014:	4249      	negs	r1, r1
 800a016:	9100      	str	r1, [sp, #0]
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	0029      	movs	r1, r5
 800a01c:	f003 fbda 	bl	800d7d4 <writePxMutex>
			CheckForEnterKey();
 800a020:	f7ff fcf8 	bl	8009a14 <CheckForEnterKey>
 800a024:	e062      	b.n	800a0ec <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800a026:	493f      	ldr	r1, [pc, #252]	; (800a124 <SendResults+0x1e8>)
 800a028:	1c38      	adds	r0, r7, #0
 800a02a:	f7f6 fb9b 	bl	8000764 <__aeabi_fmul>
 800a02e:	f7f6 fa9d 	bl	800056c <__aeabi_f2uiz>
 800a032:	0003      	movs	r3, r0
 800a034:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800a036:	0032      	movs	r2, r6
 800a038:	493b      	ldr	r1, [pc, #236]	; (800a128 <SendResults+0x1ec>)
 800a03a:	9d03      	ldr	r5, [sp, #12]
 800a03c:	0028      	movs	r0, r5
 800a03e:	f009 fc37 	bl	80138b0 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a042:	0028      	movs	r0, r5
 800a044:	f7f6 f868 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a048:	23fa      	movs	r3, #250	; 0xfa
 800a04a:	b282      	uxth	r2, r0
 800a04c:	4934      	ldr	r1, [pc, #208]	; (800a120 <SendResults+0x1e4>)
 800a04e:	7808      	ldrb	r0, [r1, #0]
 800a050:	2101      	movs	r1, #1
 800a052:	4249      	negs	r1, r1
 800a054:	9100      	str	r1, [sp, #0]
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	0029      	movs	r1, r5
 800a05a:	f003 fbbb 	bl	800d7d4 <writePxMutex>
			CheckForEnterKey();
 800a05e:	f7ff fcd9 	bl	8009a14 <CheckForEnterKey>
 800a062:	e043      	b.n	800a0ec <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800a064:	492f      	ldr	r1, [pc, #188]	; (800a124 <SendResults+0x1e8>)
 800a066:	1c38      	adds	r0, r7, #0
 800a068:	f7f6 fb7c 	bl	8000764 <__aeabi_fmul>
 800a06c:	f7f6 fa7e 	bl	800056c <__aeabi_f2uiz>
 800a070:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800a072:	4b24      	ldr	r3, [pc, #144]	; (800a104 <SendResults+0x1c8>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	42ab      	cmp	r3, r5
 800a078:	d011      	beq.n	800a09e <SendResults+0x162>
				messageParams[0] = Port;
 800a07a:	4b23      	ldr	r3, [pc, #140]	; (800a108 <SendResults+0x1cc>)
 800a07c:	9a02      	ldr	r2, [sp, #8]
 800a07e:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a080:	aa04      	add	r2, sp, #16
 800a082:	78d1      	ldrb	r1, [r2, #3]
 800a084:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a086:	7891      	ldrb	r1, [r2, #2]
 800a088:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a08a:	7851      	ldrb	r1, [r2, #1]
 800a08c:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a092:	2205      	movs	r2, #5
 800a094:	2123      	movs	r1, #35	; 0x23
 800a096:	0028      	movs	r0, r5
 800a098:	f7fd ff02 	bl	8007ea0 <SendMessageToModule>
 800a09c:	e026      	b.n	800a0ec <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a09e:	ab04      	add	r3, sp, #16
 800a0a0:	78da      	ldrb	r2, [r3, #3]
 800a0a2:	4922      	ldr	r1, [pc, #136]	; (800a12c <SendResults+0x1f0>)
 800a0a4:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a0a6:	789a      	ldrb	r2, [r3, #2]
 800a0a8:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a0aa:	785a      	ldrb	r2, [r3, #1]
 800a0ac:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	9802      	ldr	r0, [sp, #8]
 800a0ba:	f003 fb8b 	bl	800d7d4 <writePxMutex>
 800a0be:	e015      	b.n	800a0ec <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a0c0:	ab05      	add	r3, sp, #20
 800a0c2:	78da      	ldrb	r2, [r3, #3]
 800a0c4:	4919      	ldr	r1, [pc, #100]	; (800a12c <SendResults+0x1f0>)
 800a0c6:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a0c8:	789a      	ldrb	r2, [r3, #2]
 800a0ca:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a0cc:	785a      	ldrb	r2, [r3, #1]
 800a0ce:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a0d4:	230a      	movs	r3, #10
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	2204      	movs	r2, #4
 800a0da:	9802      	ldr	r0, [sp, #8]
 800a0dc:	f003 fb7a 	bl	800d7d4 <writePxMutex>
 800a0e0:	e004      	b.n	800a0ec <SendResults+0x1b0>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	a905      	add	r1, sp, #20
 800a0e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a0e8:	f008 fe4b 	bl	8012d82 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a0ec:	3c02      	subs	r4, #2
 800a0ee:	23fd      	movs	r3, #253	; 0xfd
 800a0f0:	421c      	tst	r4, r3
 800a0f2:	d002      	beq.n	800a0fa <SendResults+0x1be>
		free(strUnit);
 800a0f4:	0030      	movs	r0, r6
 800a0f6:	f008 fe19 	bl	8012d2c <free>
}
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	b007      	add	sp, #28
 800a0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a100:	20000095 	.word	0x20000095
 800a104:	20000b66 	.word	0x20000b66
 800a108:	20000a28 	.word	0x20000a28
 800a10c:	200000a4 	.word	0x200000a4
 800a110:	08019324 	.word	0x08019324
 800a114:	080192e0 	.word	0x080192e0
 800a118:	00706d41 	.word	0x00706d41
 800a11c:	0801933c 	.word	0x0801933c
 800a120:	2000060b 	.word	0x2000060b
 800a124:	41200000 	.word	0x41200000
 800a128:	0801932c 	.word	0x0801932c
 800a12c:	20001344 	.word	0x20001344

0800a130 <CalculationVolt>:
float CalculationVolt(void) {
 800a130:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH9();
 800a132:	f000 fc11 	bl	800a958 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800a136:	4c18      	ldr	r4, [pc, #96]	; (800a198 <CalculationVolt+0x68>)
 800a138:	0020      	movs	r0, r4
 800a13a:	f005 fda5 	bl	800fc88 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a13e:	21fa      	movs	r1, #250	; 0xfa
 800a140:	0089      	lsls	r1, r1, #2
 800a142:	0020      	movs	r0, r4
 800a144:	f005 fdf2 	bl	800fd2c <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800a148:	0020      	movs	r0, r4
 800a14a:	f005 fe93 	bl	800fe74 <HAL_ADC_GetValue>
 800a14e:	4d13      	ldr	r5, [pc, #76]	; (800a19c <CalculationVolt+0x6c>)
 800a150:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800a152:	0020      	movs	r0, r4
 800a154:	f005 fdc8 	bl	800fce8 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800a158:	f000 fc10 	bl	800a97c <ADC_Deselect_CH9>
	return tmp_adc;
 800a15c:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Volt);
 800a15e:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <CalculationVolt+0x70>)
 800a160:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);// 12 bit resolution
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	f7f6 fe14 	bl	8000d90 <__aeabi_ui2f>
 800a168:	f7f8 fbf0 	bl	800294c <__aeabi_f2d>
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <CalculationVolt+0x74>)
 800a16e:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <CalculationVolt+0x78>)
 800a170:	f7f7 fd74 	bl	8001c5c <__aeabi_dmul>
 800a174:	f7f8 fc3c 	bl	80029f0 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a178:	f7f8 fbe8 	bl	800294c <__aeabi_f2d>
 800a17c:	4a0b      	ldr	r2, [pc, #44]	; (800a1ac <CalculationVolt+0x7c>)
 800a17e:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <CalculationVolt+0x80>)
 800a180:	f7f7 ffde 	bl	8002140 <__aeabi_dsub>
 800a184:	f7f8 fc34 	bl	80029f0 <__aeabi_d2f>
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <CalculationVolt+0x84>)
 800a18a:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * (4000150/(50*150));//measured_volt =0;533.3533
 800a18c:	490a      	ldr	r1, [pc, #40]	; (800a1b8 <CalculationVolt+0x88>)
 800a18e:	f7f6 fae9 	bl	8000764 <__aeabi_fmul>
 800a192:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <CalculationVolt+0x8c>)
 800a194:	6018      	str	r0, [r3, #0]
}
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	20005ec4 	.word	0x20005ec4
 800a19c:	20005d28 	.word	0x20005d28
 800a1a0:	20005d34 	.word	0x20005d34
 800a1a4:	e734d9b4 	.word	0xe734d9b4
 800a1a8:	3f4a680c 	.word	0x3f4a680c
 800a1ac:	66666666 	.word	0x66666666
 800a1b0:	3ffa6666 	.word	0x3ffa6666
 800a1b4:	20005c00 	.word	0x20005c00
 800a1b8:	44054000 	.word	0x44054000
 800a1bc:	20005e94 	.word	0x20005e94

0800a1c0 <CalculationAmp>:
float CalculationAmp(void) {
 800a1c0:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH7();
 800a1c2:	f000 fba5 	bl	800a910 <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 800a1c6:	4c1b      	ldr	r4, [pc, #108]	; (800a234 <CalculationAmp+0x74>)
 800a1c8:	0020      	movs	r0, r4
 800a1ca:	f005 fd5d 	bl	800fc88 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a1ce:	21fa      	movs	r1, #250	; 0xfa
 800a1d0:	0089      	lsls	r1, r1, #2
 800a1d2:	0020      	movs	r0, r4
 800a1d4:	f005 fdaa 	bl	800fd2c <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800a1d8:	0020      	movs	r0, r4
 800a1da:	f005 fe4b 	bl	800fe74 <HAL_ADC_GetValue>
 800a1de:	4d16      	ldr	r5, [pc, #88]	; (800a238 <CalculationAmp+0x78>)
 800a1e0:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800a1e2:	0020      	movs	r0, r4
 800a1e4:	f005 fd80 	bl	800fce8 <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 800a1e8:	f000 fba4 	bl	800a934 <ADC_Deselect_CH7>
	return tmp_adc;
 800a1ec:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Amp);
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <CalculationAmp+0x7c>)
 800a1f0:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	f7f6 fdcc 	bl	8000d90 <__aeabi_ui2f>
 800a1f8:	f7f8 fba8 	bl	800294c <__aeabi_f2d>
 800a1fc:	4a10      	ldr	r2, [pc, #64]	; (800a240 <CalculationAmp+0x80>)
 800a1fe:	4b11      	ldr	r3, [pc, #68]	; (800a244 <CalculationAmp+0x84>)
 800a200:	f7f7 fd2c 	bl	8001c5c <__aeabi_dmul>
 800a204:	f7f8 fbf4 	bl	80029f0 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a208:	f7f8 fba0 	bl	800294c <__aeabi_f2d>
 800a20c:	4a0e      	ldr	r2, [pc, #56]	; (800a248 <CalculationAmp+0x88>)
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <CalculationAmp+0x8c>)
 800a210:	f7f7 ff96 	bl	8002140 <__aeabi_dsub>
 800a214:	f7f8 fbec 	bl	80029f0 <__aeabi_d2f>
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <CalculationAmp+0x90>)
 800a21a:	6018      	str	r0, [r3, #0]
	measured_amp =(_volt/0.009795);//2.5 we have to make average error of vref before load is switched on
 800a21c:	f7f8 fb96 	bl	800294c <__aeabi_f2d>
 800a220:	4a0c      	ldr	r2, [pc, #48]	; (800a254 <CalculationAmp+0x94>)
 800a222:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <CalculationAmp+0x98>)
 800a224:	f7f7 f910 	bl	8001448 <__aeabi_ddiv>
 800a228:	f7f8 fbe2 	bl	80029f0 <__aeabi_d2f>
 800a22c:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <CalculationAmp+0x9c>)
 800a22e:	6018      	str	r0, [r3, #0]
}
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	20005ec4 	.word	0x20005ec4
 800a238:	20005d28 	.word	0x20005d28
 800a23c:	20005d34 	.word	0x20005d34
 800a240:	e734d9b4 	.word	0xe734d9b4
 800a244:	3f4a680c 	.word	0x3f4a680c
 800a248:	66666666 	.word	0x66666666
 800a24c:	3ffa6666 	.word	0x3ffa6666
 800a250:	20005c00 	.word	0x20005c00
 800a254:	a5508701 	.word	0xa5508701
 800a258:	3f840f66 	.word	0x3f840f66
 800a25c:	20005d24 	.word	0x20005d24

0800a260 <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800a260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a262:	46c6      	mov	lr, r8
 800a264:	b500      	push	{lr}
 800a266:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800a268:	483b      	ldr	r0, [pc, #236]	; (800a358 <VoltAmpTask+0xf8>)
 800a26a:	f005 fdbf 	bl	800fdec <HAL_ADC_Start_IT>
		switch (unit) {
 800a26e:	4c3b      	ldr	r4, [pc, #236]	; (800a35c <VoltAmpTask+0xfc>)
			DATA_To_SEND = CalculationVolt();
 800a270:	4e3b      	ldr	r6, [pc, #236]	; (800a360 <VoltAmpTask+0x100>)
			DATA_To_SEND = CalculationVolt();
 800a272:	46b0      	mov	r8, r6
 800a274:	e02e      	b.n	800a2d4 <VoltAmpTask+0x74>
			DATA_To_SEND = CalculationVolt();
 800a276:	f7ff ff5b 	bl	800a130 <CalculationVolt>
 800a27a:	6030      	str	r0, [r6, #0]
		switch (global_mode) {
 800a27c:	4b39      	ldr	r3, [pc, #228]	; (800a364 <VoltAmpTask+0x104>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d031      	beq.n	800a2e8 <VoltAmpTask+0x88>
 800a284:	2b03      	cmp	r3, #3
 800a286:	d04c      	beq.n	800a322 <VoltAmpTask+0xc2>
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d008      	beq.n	800a29e <VoltAmpTask+0x3e>
			global_mode = IDLE_CASE;
 800a28c:	4b35      	ldr	r3, [pc, #212]	; (800a364 <VoltAmpTask+0x104>)
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
			break;
 800a292:	e01d      	b.n	800a2d0 <VoltAmpTask+0x70>
			DATA_To_SEND = CalculationAmp();
 800a294:	f7ff ff94 	bl	800a1c0 <CalculationAmp>
 800a298:	4b31      	ldr	r3, [pc, #196]	; (800a360 <VoltAmpTask+0x100>)
 800a29a:	6018      	str	r0, [r3, #0]
			break;
 800a29c:	e7ee      	b.n	800a27c <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800a29e:	f005 fb6b 	bl	800f978 <HAL_GetTick>
 800a2a2:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800a2a4:	4b2d      	ldr	r3, [pc, #180]	; (800a35c <VoltAmpTask+0xfc>)
 800a2a6:	781a      	ldrb	r2, [r3, #0]
 800a2a8:	4b2e      	ldr	r3, [pc, #184]	; (800a364 <VoltAmpTask+0x104>)
 800a2aa:	7819      	ldrb	r1, [r3, #0]
 800a2ac:	4b2c      	ldr	r3, [pc, #176]	; (800a360 <VoltAmpTask+0x100>)
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	f7ff fe41 	bl	8009f3c <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a2ba:	4f2b      	ldr	r7, [pc, #172]	; (800a368 <VoltAmpTask+0x108>)
 800a2bc:	e001      	b.n	800a2c2 <VoltAmpTask+0x62>
				taskYIELD();
 800a2be:	f005 f9f5 	bl	800f6ac <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a2c2:	f005 fb59 	bl	800f978 <HAL_GetTick>
 800a2c6:	1b40      	subs	r0, r0, r5
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	4298      	cmp	r0, r3
 800a2ce:	d3f6      	bcc.n	800a2be <VoltAmpTask+0x5e>
		taskYIELD();
 800a2d0:	f005 f9ec 	bl	800f6ac <vPortYield>
		switch (unit) {
 800a2d4:	7823      	ldrb	r3, [r4, #0]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d0cd      	beq.n	800a276 <VoltAmpTask+0x16>
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d0da      	beq.n	800a294 <VoltAmpTask+0x34>
			DATA_To_SEND = CalculationVolt();
 800a2de:	f7ff ff27 	bl	800a130 <CalculationVolt>
 800a2e2:	4643      	mov	r3, r8
 800a2e4:	6018      	str	r0, [r3, #0]
			break;
 800a2e6:	e7c9      	b.n	800a27c <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800a2e8:	f005 fb46 	bl	800f978 <HAL_GetTick>
 800a2ec:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800a2ee:	4b1f      	ldr	r3, [pc, #124]	; (800a36c <VoltAmpTask+0x10c>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	4a1a      	ldr	r2, [pc, #104]	; (800a35c <VoltAmpTask+0xfc>)
 800a2f4:	7812      	ldrb	r2, [r2, #0]
 800a2f6:	491b      	ldr	r1, [pc, #108]	; (800a364 <VoltAmpTask+0x104>)
 800a2f8:	7809      	ldrb	r1, [r1, #0]
 800a2fa:	4819      	ldr	r0, [pc, #100]	; (800a360 <VoltAmpTask+0x100>)
 800a2fc:	6800      	ldr	r0, [r0, #0]
 800a2fe:	2700      	movs	r7, #0
 800a300:	9701      	str	r7, [sp, #4]
 800a302:	4f1b      	ldr	r7, [pc, #108]	; (800a370 <VoltAmpTask+0x110>)
 800a304:	783f      	ldrb	r7, [r7, #0]
 800a306:	9700      	str	r7, [sp, #0]
 800a308:	f7ff fe18 	bl	8009f3c <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a30c:	4f16      	ldr	r7, [pc, #88]	; (800a368 <VoltAmpTask+0x108>)
 800a30e:	e001      	b.n	800a314 <VoltAmpTask+0xb4>
				taskYIELD();
 800a310:	f005 f9cc 	bl	800f6ac <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a314:	f005 fb30 	bl	800f978 <HAL_GetTick>
 800a318:	1b40      	subs	r0, r0, r5
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	4298      	cmp	r0, r3
 800a31e:	d3f7      	bcc.n	800a310 <VoltAmpTask+0xb0>
 800a320:	e7d6      	b.n	800a2d0 <VoltAmpTask+0x70>
			t0 = HAL_GetTick();
 800a322:	f005 fb29 	bl	800f978 <HAL_GetTick>
 800a326:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <VoltAmpTask+0xfc>)
 800a32a:	781a      	ldrb	r2, [r3, #0]
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <VoltAmpTask+0x104>)
 800a32e:	7819      	ldrb	r1, [r3, #0]
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <VoltAmpTask+0x100>)
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <VoltAmpTask+0x114>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	f7ff fdfd 	bl	8009f3c <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a342:	4f09      	ldr	r7, [pc, #36]	; (800a368 <VoltAmpTask+0x108>)
 800a344:	e001      	b.n	800a34a <VoltAmpTask+0xea>
				taskYIELD();
 800a346:	f005 f9b1 	bl	800f6ac <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a34a:	f005 fb15 	bl	800f978 <HAL_GetTick>
 800a34e:	1b40      	subs	r0, r0, r5
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	4298      	cmp	r0, r3
 800a354:	d3f7      	bcc.n	800a346 <VoltAmpTask+0xe6>
 800a356:	e7bb      	b.n	800a2d0 <VoltAmpTask+0x70>
 800a358:	20005ec4 	.word	0x20005ec4
 800a35c:	200000a4 	.word	0x200000a4
 800a360:	20001338 	.word	0x20001338
 800a364:	20005c74 	.word	0x20005c74
 800a368:	20005e20 	.word	0x20005e20
 800a36c:	20005c75 	.word	0x20005c75
 800a370:	20005e98 	.word	0x20005e98
 800a374:	20005d30 	.word	0x20005d30

0800a378 <SampleV>:
uint8_t SampleV(float *volt) {
 800a378:	b510      	push	{r4, lr}
 800a37a:	0004      	movs	r4, r0
	*volt = CalculationVolt();
 800a37c:	f7ff fed8 	bl	800a130 <CalculationVolt>
 800a380:	6020      	str	r0, [r4, #0]
}
 800a382:	2000      	movs	r0, #0
 800a384:	bd10      	pop	{r4, pc}

0800a386 <SampleA>:
uint8_t SampleA(float *curr) {
 800a386:	b510      	push	{r4, lr}
 800a388:	0004      	movs	r4, r0
	*curr = CalculationAmp();
 800a38a:	f7ff ff19 	bl	800a1c0 <CalculationAmp>
 800a38e:	6020      	str	r0, [r4, #0]
}
 800a390:	2000      	movs	r0, #0
 800a392:	bd10      	pop	{r4, pc}

0800a394 <sampleCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a394:	b510      	push	{r4, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	0004      	movs	r4, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	switch (unit) {
 800a39a:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <sampleCommand+0x54>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d005      	beq.n	800a3ae <sampleCommand+0x1a>
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d01c      	beq.n	800a3e0 <sampleCommand+0x4c>
		break;
	case Amp:
		SampleA(&DATA_To_SEND1);
		break;
	default:
		SampleV(&DATA_To_SEND1);
 800a3a6:	4811      	ldr	r0, [pc, #68]	; (800a3ec <sampleCommand+0x58>)
 800a3a8:	f7ff ffe6 	bl	800a378 <SampleV>
 800a3ac:	e002      	b.n	800a3b4 <sampleCommand+0x20>
		SampleV(&DATA_To_SEND1);
 800a3ae:	480f      	ldr	r0, [pc, #60]	; (800a3ec <sampleCommand+0x58>)
 800a3b0:	f7ff ffe2 	bl	800a378 <SampleV>
	}

	global_mode = SAMPLE_CLI_CASE;
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <sampleCommand+0x5c>)
 800a3b6:	2206      	movs	r2, #6
 800a3b8:	701a      	strb	r2, [r3, #0]
	SendResults(DATA_To_SEND1, global_mode, unit, 0, 0, NULL);
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <sampleCommand+0x54>)
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <sampleCommand+0x58>)
 800a3c0:	6818      	ldr	r0, [r3, #0]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	2106      	movs	r1, #6
 800a3ca:	f7ff fdb7 	bl	8009f3c <SendResults>

	if (result != H2AR3_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a3ce:	2299      	movs	r2, #153	; 0x99
 800a3d0:	0092      	lsls	r2, r2, #2
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	0020      	movs	r0, r4
 800a3d6:	f008 fcdd 	bl	8012d94 <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a3da:	2000      	movs	r0, #0
 800a3dc:	b002      	add	sp, #8
 800a3de:	bd10      	pop	{r4, pc}
		SampleA(&DATA_To_SEND1);
 800a3e0:	4802      	ldr	r0, [pc, #8]	; (800a3ec <sampleCommand+0x58>)
 800a3e2:	f7ff ffd0 	bl	800a386 <SampleA>
		break;
 800a3e6:	e7e5      	b.n	800a3b4 <sampleCommand+0x20>
 800a3e8:	200000a4 	.word	0x200000a4
 800a3ec:	20000008 	.word	0x20000008
 800a3f0:	20005c74 	.word	0x20005c74

0800a3f4 <StreamVToPort>:
		uint32_t Timeout) {
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	b082      	sub	sp, #8
	global_port = Port;
 800a3f8:	4c19      	ldr	r4, [pc, #100]	; (800a460 <StreamVToPort+0x6c>)
 800a3fa:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800a3fc:	4819      	ldr	r0, [pc, #100]	; (800a464 <StreamVToPort+0x70>)
 800a3fe:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800a400:	4919      	ldr	r1, [pc, #100]	; (800a468 <StreamVToPort+0x74>)
 800a402:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <StreamVToPort+0x78>)
 800a406:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800a408:	4a19      	ldr	r2, [pc, #100]	; (800a470 <StreamVToPort+0x7c>)
 800a40a:	2102      	movs	r1, #2
 800a40c:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800a40e:	4a19      	ldr	r2, [pc, #100]	; (800a474 <StreamVToPort+0x80>)
 800a410:	3901      	subs	r1, #1
 800a412:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800a414:	1e5a      	subs	r2, r3, #1
 800a416:	3203      	adds	r2, #3
 800a418:	d902      	bls.n	800a420 <StreamVToPort+0x2c>
}
 800a41a:	2000      	movs	r0, #0
 800a41c:	b002      	add	sp, #8
 800a41e:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800a420:	0158      	lsls	r0, r3, #5
 800a422:	1ac0      	subs	r0, r0, r3
 800a424:	0080      	lsls	r0, r0, #2
 800a426:	18c0      	adds	r0, r0, r3
 800a428:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800a42a:	21fa      	movs	r1, #250	; 0xfa
 800a42c:	0089      	lsls	r1, r1, #2
 800a42e:	f7f5 fe85 	bl	800013c <__udivsi3>
 800a432:	0001      	movs	r1, r0
 800a434:	4b10      	ldr	r3, [pc, #64]	; (800a478 <StreamVToPort+0x84>)
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	23ff      	movs	r3, #255	; 0xff
 800a43a:	2200      	movs	r2, #0
 800a43c:	480f      	ldr	r0, [pc, #60]	; (800a47c <StreamVToPort+0x88>)
 800a43e:	f004 ff89 	bl	800f354 <xTimerCreate>
 800a442:	0004      	movs	r4, r0
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <StreamVToPort+0x8c>)
 800a446:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800a448:	f004 fa50 	bl	800e8ec <xTaskGetTickCount>
 800a44c:	0002      	movs	r2, r0
 800a44e:	2301      	movs	r3, #1
 800a450:	425b      	negs	r3, r3
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	2300      	movs	r3, #0
 800a456:	2101      	movs	r1, #1
 800a458:	0020      	movs	r0, r4
 800a45a:	f004 ff99 	bl	800f390 <xTimerGenericCommand>
 800a45e:	e7dc      	b.n	800a41a <StreamVToPort+0x26>
 800a460:	20005c75 	.word	0x20005c75
 800a464:	20005e98 	.word	0x20005e98
 800a468:	20005e20 	.word	0x20005e20
 800a46c:	20005e9c 	.word	0x20005e9c
 800a470:	20005c74 	.word	0x20005c74
 800a474:	200000a4 	.word	0x200000a4
 800a478:	08009a85 	.word	0x08009a85
 800a47c:	08019360 	.word	0x08019360
 800a480:	20001348 	.word	0x20001348

0800a484 <StreamAToPort>:
		uint32_t Timeout) {
 800a484:	b510      	push	{r4, lr}
 800a486:	b082      	sub	sp, #8
	global_port = Port;
 800a488:	4c19      	ldr	r4, [pc, #100]	; (800a4f0 <StreamAToPort+0x6c>)
 800a48a:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800a48c:	4819      	ldr	r0, [pc, #100]	; (800a4f4 <StreamAToPort+0x70>)
 800a48e:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800a490:	4919      	ldr	r1, [pc, #100]	; (800a4f8 <StreamAToPort+0x74>)
 800a492:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800a494:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <StreamAToPort+0x78>)
 800a496:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800a498:	2202      	movs	r2, #2
 800a49a:	4919      	ldr	r1, [pc, #100]	; (800a500 <StreamAToPort+0x7c>)
 800a49c:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800a49e:	4919      	ldr	r1, [pc, #100]	; (800a504 <StreamAToPort+0x80>)
 800a4a0:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	3203      	adds	r2, #3
 800a4a6:	d902      	bls.n	800a4ae <StreamAToPort+0x2a>
}
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	b002      	add	sp, #8
 800a4ac:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800a4ae:	0158      	lsls	r0, r3, #5
 800a4b0:	1ac0      	subs	r0, r0, r3
 800a4b2:	0080      	lsls	r0, r0, #2
 800a4b4:	18c0      	adds	r0, r0, r3
 800a4b6:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800a4b8:	21fa      	movs	r1, #250	; 0xfa
 800a4ba:	0089      	lsls	r1, r1, #2
 800a4bc:	f7f5 fe3e 	bl	800013c <__udivsi3>
 800a4c0:	0001      	movs	r1, r0
 800a4c2:	4b11      	ldr	r3, [pc, #68]	; (800a508 <StreamAToPort+0x84>)
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	23ff      	movs	r3, #255	; 0xff
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4810      	ldr	r0, [pc, #64]	; (800a50c <StreamAToPort+0x88>)
 800a4cc:	f004 ff42 	bl	800f354 <xTimerCreate>
 800a4d0:	0004      	movs	r4, r0
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <StreamAToPort+0x8c>)
 800a4d4:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800a4d6:	f004 fa09 	bl	800e8ec <xTaskGetTickCount>
 800a4da:	0002      	movs	r2, r0
 800a4dc:	2301      	movs	r3, #1
 800a4de:	425b      	negs	r3, r3
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	0020      	movs	r0, r4
 800a4e8:	f004 ff52 	bl	800f390 <xTimerGenericCommand>
 800a4ec:	e7dc      	b.n	800a4a8 <StreamAToPort+0x24>
 800a4ee:	46c0      	nop			; (mov r8, r8)
 800a4f0:	20005c75 	.word	0x20005c75
 800a4f4:	20005e98 	.word	0x20005e98
 800a4f8:	20005e20 	.word	0x20005e20
 800a4fc:	20005e9c 	.word	0x20005e9c
 800a500:	20005c74 	.word	0x20005c74
 800a504:	200000a4 	.word	0x200000a4
 800a508:	08009a85 	.word	0x08009a85
 800a50c:	08019360 	.word	0x08019360
 800a510:	20001348 	.word	0x20001348

0800a514 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800a514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a516:	46c6      	mov	lr, r8
 800a518:	b500      	push	{lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	ab08      	add	r3, sp, #32
 800a51e:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800a520:	4b39      	ldr	r3, [pc, #228]	; (800a608 <Module_MessagingTask+0xf4>)
 800a522:	469c      	mov	ip, r3
 800a524:	4460      	add	r0, ip
 800a526:	b283      	uxth	r3, r0
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d86a      	bhi.n	800a602 <Module_MessagingTask+0xee>
 800a52c:	0098      	lsls	r0, r3, #2
 800a52e:	4b37      	ldr	r3, [pc, #220]	; (800a60c <Module_MessagingTask+0xf8>)
 800a530:	581b      	ldr	r3, [r3, r0]
 800a532:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a534:	1e4f      	subs	r7, r1, #1
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800a536:	4836      	ldr	r0, [pc, #216]	; (800a610 <Module_MessagingTask+0xfc>)
 800a538:	00fd      	lsls	r5, r7, #3
 800a53a:	1bee      	subs	r6, r5, r7
 800a53c:	00f6      	lsls	r6, r6, #3
 800a53e:	1986      	adds	r6, r0, r6
 800a540:	1931      	adds	r1, r6, r4
 800a542:	79cb      	ldrb	r3, [r1, #7]
 800a544:	021b      	lsls	r3, r3, #8
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a546:	7a0a      	ldrb	r2, [r1, #8]
 800a548:	0412      	lsls	r2, r2, #16
 800a54a:	189b      	adds	r3, r3, r2
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a54c:	798a      	ldrb	r2, [r1, #6]
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a54e:	189b      	adds	r3, r3, r2
				+ ((uint32_t)cMessage[port - 1][9 + shift] <<24);
 800a550:	7a4a      	ldrb	r2, [r1, #9]
 800a552:	0612      	lsls	r2, r2, #24
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a554:	4698      	mov	r8, r3
 800a556:	4490      	add	r8, r2
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800a558:	78ca      	ldrb	r2, [r1, #3]
 800a55a:	0212      	lsls	r2, r2, #8
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a55c:	790b      	ldrb	r3, [r1, #4]
 800a55e:	041b      	lsls	r3, r3, #16
 800a560:	469c      	mov	ip, r3
 800a562:	4462      	add	r2, ip
		period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a564:	788b      	ldrb	r3, [r1, #2]
 800a566:	469c      	mov	ip, r3
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a568:	4462      	add	r2, ip
				+ ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a56a:	7949      	ldrb	r1, [r1, #5]
 800a56c:	0609      	lsls	r1, r1, #24
		period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a56e:	1852      	adds	r2, r2, r1
		StreamVToPort(cMessage[port - 1][1 + shift],
 800a570:	5d31      	ldrb	r1, [r6, r4]
 800a572:	1934      	adds	r4, r6, r4
 800a574:	7860      	ldrb	r0, [r4, #1]
 800a576:	4643      	mov	r3, r8
 800a578:	f7ff ff3c 	bl	800a3f4 <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800a57c:	2000      	movs	r0, #0
}
 800a57e:	b002      	add	sp, #8
 800a580:	bc04      	pop	{r2}
 800a582:	4690      	mov	r8, r2
 800a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
				period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a586:	1e4f      	subs	r7, r1, #1
						+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800a588:	4821      	ldr	r0, [pc, #132]	; (800a610 <Module_MessagingTask+0xfc>)
 800a58a:	00fd      	lsls	r5, r7, #3
 800a58c:	1bee      	subs	r6, r5, r7
 800a58e:	00f6      	lsls	r6, r6, #3
 800a590:	1986      	adds	r6, r0, r6
 800a592:	1931      	adds	r1, r6, r4
 800a594:	79cb      	ldrb	r3, [r1, #7]
 800a596:	021b      	lsls	r3, r3, #8
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a598:	7a0a      	ldrb	r2, [r1, #8]
 800a59a:	0412      	lsls	r2, r2, #16
 800a59c:	189b      	adds	r3, r3, r2
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a59e:	798a      	ldrb	r2, [r1, #6]
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a5a0:	189b      	adds	r3, r3, r2
						+((uint32_t) cMessage[port - 1][9 + shift] <<24);
 800a5a2:	7a4a      	ldrb	r2, [r1, #9]
 800a5a4:	0612      	lsls	r2, r2, #24
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a5a6:	4698      	mov	r8, r3
 800a5a8:	4490      	add	r8, r2
						+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800a5aa:	78ca      	ldrb	r2, [r1, #3]
 800a5ac:	0212      	lsls	r2, r2, #8
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a5ae:	790b      	ldrb	r3, [r1, #4]
 800a5b0:	041b      	lsls	r3, r3, #16
 800a5b2:	469c      	mov	ip, r3
 800a5b4:	4462      	add	r2, ip
				period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a5b6:	788b      	ldrb	r3, [r1, #2]
 800a5b8:	469c      	mov	ip, r3
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a5ba:	4462      	add	r2, ip
						+ ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a5bc:	7949      	ldrb	r1, [r1, #5]
 800a5be:	0609      	lsls	r1, r1, #24
				period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a5c0:	1852      	adds	r2, r2, r1
				StreamAToPort(cMessage[port - 1][1 + shift],
 800a5c2:	5d31      	ldrb	r1, [r6, r4]
 800a5c4:	1934      	adds	r4, r6, r4
 800a5c6:	7860      	ldrb	r0, [r4, #1]
 800a5c8:	4643      	mov	r3, r8
 800a5ca:	f7ff ff5b 	bl	800a484 <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800a5ce:	2000      	movs	r0, #0
		break;
 800a5d0:	e7d5      	b.n	800a57e <Module_MessagingTask+0x6a>
		global_mode = IDLE_CASE;
 800a5d2:	4b10      	ldr	r3, [pc, #64]	; (800a614 <Module_MessagingTask+0x100>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <Module_MessagingTask+0x104>)
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	2301      	movs	r3, #1
 800a5de:	425b      	negs	r3, r3
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2103      	movs	r1, #3
 800a5e6:	f004 fed3 	bl	800f390 <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800a5ea:	2000      	movs	r0, #0
		break;
 800a5ec:	e7c7      	b.n	800a57e <Module_MessagingTask+0x6a>
		SampleV(&H2AR3_Read_V);
 800a5ee:	480b      	ldr	r0, [pc, #44]	; (800a61c <Module_MessagingTask+0x108>)
 800a5f0:	f7ff fec2 	bl	800a378 <SampleV>
	Module_Status result = H2AR3_OK;
 800a5f4:	2000      	movs	r0, #0
		break;
 800a5f6:	e7c2      	b.n	800a57e <Module_MessagingTask+0x6a>
		SampleA(&H2AR3_Read_A);
 800a5f8:	4809      	ldr	r0, [pc, #36]	; (800a620 <Module_MessagingTask+0x10c>)
 800a5fa:	f7ff fec4 	bl	800a386 <SampleA>
	Module_Status result = H2AR3_OK;
 800a5fe:	2000      	movs	r0, #0
		break;
 800a600:	e7bd      	b.n	800a57e <Module_MessagingTask+0x6a>
		result = H2AR3_ERR_UnknownMessage;
 800a602:	2001      	movs	r0, #1
 800a604:	e7bb      	b.n	800a57e <Module_MessagingTask+0x6a>
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	fffff7cc 	.word	0xfffff7cc
 800a60c:	08019304 	.word	0x08019304
 800a610:	200008a4 	.word	0x200008a4
 800a614:	20005c74 	.word	0x20005c74
 800a618:	20001348 	.word	0x20001348
 800a61c:	20005da8 	.word	0x20005da8
 800a620:	20005dac 	.word	0x20005dac

0800a624 <Stop>:
uint8_t Stop(void) {
 800a624:	b500      	push	{lr}
 800a626:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800a628:	2300      	movs	r3, #0
 800a62a:	4a06      	ldr	r2, [pc, #24]	; (800a644 <Stop+0x20>)
 800a62c:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800a62e:	4a06      	ldr	r2, [pc, #24]	; (800a648 <Stop+0x24>)
 800a630:	6810      	ldr	r0, [r2, #0]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	2103      	movs	r1, #3
 800a638:	f004 feaa 	bl	800f390 <xTimerGenericCommand>
}
 800a63c:	2000      	movs	r0, #0
 800a63e:	b003      	add	sp, #12
 800a640:	bd00      	pop	{pc}
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	20005c74 	.word	0x20005c74
 800a648:	20001348 	.word	0x20001348

0800a64c <stopCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800a64c:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	volt_buffer = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	4a03      	ldr	r2, [pc, #12]	; (800a660 <stopCommand+0x14>)
 800a652:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800a654:	4a03      	ldr	r2, [pc, #12]	; (800a664 <stopCommand+0x18>)
 800a656:	6013      	str	r3, [r2, #0]
	Stop();
 800a658:	f7ff ffe4 	bl	800a624 <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a65c:	2000      	movs	r0, #0
 800a65e:	bd10      	pop	{r4, pc}
 800a660:	20005d2c 	.word	0x20005d2c
 800a664:	20005bfc 	.word	0x20005bfc

0800a668 <StreamVToCLI>:
{
 800a668:	b510      	push	{r4, lr}
 800a66a:	b082      	sub	sp, #8
	global_period=Period;
 800a66c:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <StreamVToCLI+0x70>)
 800a66e:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800a670:	4b1a      	ldr	r3, [pc, #104]	; (800a6dc <StreamVToCLI+0x74>)
 800a672:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800a674:	2301      	movs	r3, #1
 800a676:	4a1a      	ldr	r2, [pc, #104]	; (800a6e0 <StreamVToCLI+0x78>)
 800a678:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800a67a:	4a1a      	ldr	r2, [pc, #104]	; (800a6e4 <StreamVToCLI+0x7c>)
 800a67c:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800a67e:	1e4b      	subs	r3, r1, #1
 800a680:	3303      	adds	r3, #3
 800a682:	d909      	bls.n	800a698 <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800a684:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <StreamVToCLI+0x74>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800a68c:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <StreamVToCLI+0x80>)
 800a68e:	2201      	movs	r2, #1
 800a690:	701a      	strb	r2, [r3, #0]
}
 800a692:	2000      	movs	r0, #0
 800a694:	b002      	add	sp, #8
 800a696:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800a698:	0148      	lsls	r0, r1, #5
 800a69a:	1a40      	subs	r0, r0, r1
 800a69c:	0080      	lsls	r0, r0, #2
 800a69e:	1840      	adds	r0, r0, r1
 800a6a0:	00c0      	lsls	r0, r0, #3
 800a6a2:	21fa      	movs	r1, #250	; 0xfa
 800a6a4:	0089      	lsls	r1, r1, #2
 800a6a6:	f7f5 fd49 	bl	800013c <__udivsi3>
 800a6aa:	0001      	movs	r1, r0
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <StreamVToCLI+0x84>)
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	23ff      	movs	r3, #255	; 0xff
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	480e      	ldr	r0, [pc, #56]	; (800a6f0 <StreamVToCLI+0x88>)
 800a6b6:	f004 fe4d 	bl	800f354 <xTimerCreate>
 800a6ba:	0004      	movs	r4, r0
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <StreamVToCLI+0x8c>)
 800a6be:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800a6c0:	f004 f914 	bl	800e8ec <xTaskGetTickCount>
 800a6c4:	0002      	movs	r2, r0
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	0020      	movs	r0, r4
 800a6d2:	f004 fe5d 	bl	800f390 <xTimerGenericCommand>
 800a6d6:	e7d5      	b.n	800a684 <StreamVToCLI+0x1c>
 800a6d8:	20005e20 	.word	0x20005e20
 800a6dc:	20005e9c 	.word	0x20005e9c
 800a6e0:	20005c74 	.word	0x20005c74
 800a6e4:	200000a4 	.word	0x200000a4
 800a6e8:	20001340 	.word	0x20001340
 800a6ec:	08009a85 	.word	0x08009a85
 800a6f0:	0801934c 	.word	0x0801934c
 800a6f4:	20001348 	.word	0x20001348

0800a6f8 <StreamAToCLI>:
{
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	b082      	sub	sp, #8
	global_period=Period;
 800a6fc:	4b1b      	ldr	r3, [pc, #108]	; (800a76c <StreamAToCLI+0x74>)
 800a6fe:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800a700:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <StreamAToCLI+0x78>)
 800a702:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800a704:	4b1b      	ldr	r3, [pc, #108]	; (800a774 <StreamAToCLI+0x7c>)
 800a706:	2201      	movs	r2, #1
 800a708:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800a70a:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <StreamAToCLI+0x80>)
 800a70c:	3201      	adds	r2, #1
 800a70e:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800a710:	1e4b      	subs	r3, r1, #1
 800a712:	3303      	adds	r3, #3
 800a714:	d909      	bls.n	800a72a <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800a716:	4b16      	ldr	r3, [pc, #88]	; (800a770 <StreamAToCLI+0x78>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800a71e:	4b17      	ldr	r3, [pc, #92]	; (800a77c <StreamAToCLI+0x84>)
 800a720:	2201      	movs	r2, #1
 800a722:	701a      	strb	r2, [r3, #0]
}
 800a724:	2000      	movs	r0, #0
 800a726:	b002      	add	sp, #8
 800a728:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800a72a:	0148      	lsls	r0, r1, #5
 800a72c:	1a40      	subs	r0, r0, r1
 800a72e:	0080      	lsls	r0, r0, #2
 800a730:	1840      	adds	r0, r0, r1
 800a732:	00c0      	lsls	r0, r0, #3
 800a734:	21fa      	movs	r1, #250	; 0xfa
 800a736:	0089      	lsls	r1, r1, #2
 800a738:	f7f5 fd00 	bl	800013c <__udivsi3>
 800a73c:	0001      	movs	r1, r0
 800a73e:	4b10      	ldr	r3, [pc, #64]	; (800a780 <StreamAToCLI+0x88>)
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	23ff      	movs	r3, #255	; 0xff
 800a744:	2200      	movs	r2, #0
 800a746:	480f      	ldr	r0, [pc, #60]	; (800a784 <StreamAToCLI+0x8c>)
 800a748:	f004 fe04 	bl	800f354 <xTimerCreate>
 800a74c:	0004      	movs	r4, r0
 800a74e:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <StreamAToCLI+0x90>)
 800a750:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800a752:	f004 f8cb 	bl	800e8ec <xTaskGetTickCount>
 800a756:	0002      	movs	r2, r0
 800a758:	2301      	movs	r3, #1
 800a75a:	425b      	negs	r3, r3
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	2300      	movs	r3, #0
 800a760:	2101      	movs	r1, #1
 800a762:	0020      	movs	r0, r4
 800a764:	f004 fe14 	bl	800f390 <xTimerGenericCommand>
 800a768:	e7d5      	b.n	800a716 <StreamAToCLI+0x1e>
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	20005e20 	.word	0x20005e20
 800a770:	20005e9c 	.word	0x20005e9c
 800a774:	20005c74 	.word	0x20005c74
 800a778:	200000a4 	.word	0x200000a4
 800a77c:	20001340 	.word	0x20001340
 800a780:	08009a85 	.word	0x08009a85
 800a784:	0801934c 	.word	0x0801934c
 800a788:	20001348 	.word	0x20001348

0800a78c <demoCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800a78c:	b530      	push	{r4, r5, lr}
 800a78e:	b083      	sub	sp, #12
 800a790:	0005      	movs	r5, r0



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a792:	222d      	movs	r2, #45	; 0x2d
 800a794:	491e      	ldr	r1, [pc, #120]	; (800a810 <demoCommand+0x84>)
 800a796:	f008 faf4 	bl	8012d82 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800a79a:	0028      	movs	r0, r5
 800a79c:	f7f5 fcbc 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800a7a0:	b282      	uxth	r2, r0
 800a7a2:	4b1c      	ldr	r3, [pc, #112]	; (800a814 <demoCommand+0x88>)
 800a7a4:	7818      	ldrb	r0, [r3, #0]
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	425b      	negs	r3, r3
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	3333      	adds	r3, #51	; 0x33
 800a7ae:	0029      	movs	r1, r5
 800a7b0:	f003 f810 	bl	800d7d4 <writePxMutex>
		switch (unit) {
 800a7b4:	4b18      	ldr	r3, [pc, #96]	; (800a818 <demoCommand+0x8c>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d007      	beq.n	800a7cc <demoCommand+0x40>
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d020      	beq.n	800a802 <demoCommand+0x76>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800a7c0:	20fa      	movs	r0, #250	; 0xfa
 800a7c2:	4916      	ldr	r1, [pc, #88]	; (800a81c <demoCommand+0x90>)
 800a7c4:	0040      	lsls	r0, r0, #1
 800a7c6:	f7ff ff4f 	bl	800a668 <StreamVToCLI>
 800a7ca:	e004      	b.n	800a7d6 <demoCommand+0x4a>
			StreamVToCLI(500, 10000);
 800a7cc:	20fa      	movs	r0, #250	; 0xfa
 800a7ce:	4913      	ldr	r1, [pc, #76]	; (800a81c <demoCommand+0x90>)
 800a7d0:	0040      	lsls	r0, r0, #1
 800a7d2:	f7ff ff49 	bl	800a668 <StreamVToCLI>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800a7d6:	4b12      	ldr	r3, [pc, #72]	; (800a820 <demoCommand+0x94>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d006      	beq.n	800a7ec <demoCommand+0x60>
 800a7de:	4c10      	ldr	r4, [pc, #64]	; (800a820 <demoCommand+0x94>)
			Delay_ms(1);
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	f005 f8cf 	bl	800f984 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800a7e6:	7823      	ldrb	r3, [r4, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f9      	bne.n	800a7e0 <demoCommand+0x54>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800a7ec:	0028      	movs	r0, r5
 800a7ee:	f7f5 fc93 	bl	8000118 <strlen>
 800a7f2:	0002      	movs	r2, r0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	0028      	movs	r0, r5
 800a7f8:	f008 facc 	bl	8012d94 <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	b003      	add	sp, #12
 800a800:	bd30      	pop	{r4, r5, pc}
			StreamAToCLI(500, 10000);
 800a802:	20fa      	movs	r0, #250	; 0xfa
 800a804:	4905      	ldr	r1, [pc, #20]	; (800a81c <demoCommand+0x90>)
 800a806:	0040      	lsls	r0, r0, #1
 800a808:	f7ff ff76 	bl	800a6f8 <StreamAToCLI>
			break;
 800a80c:	e7e3      	b.n	800a7d6 <demoCommand+0x4a>
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	08019374 	.word	0x08019374
 800a814:	2000060b 	.word	0x2000060b
 800a818:	200000a4 	.word	0x200000a4
 800a81c:	00002710 	.word	0x00002710
 800a820:	20001340 	.word	0x20001340

0800a824 <streamCommand>:
{
 800a824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a826:	b087      	sub	sp, #28
 800a828:	0005      	movs	r5, r0
 800a82a:	9100      	str	r1, [sp, #0]
 800a82c:	0014      	movs	r4, r2
	*pcWriteBuffer = '\0';
 800a82e:	2300      	movs	r3, #0
 800a830:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800a832:	9302      	str	r3, [sp, #8]
	portBASE_TYPE timeoutStrLen = 0;
 800a834:	9303      	str	r3, [sp, #12]
	portBASE_TYPE portStrLen = 0;
 800a836:	9304      	str	r3, [sp, #16]
	portBASE_TYPE modStrLen = 0;
 800a838:	9305      	str	r3, [sp, #20]
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &periodStrLen);
 800a83a:	aa02      	add	r2, sp, #8
 800a83c:	2101      	movs	r1, #1
 800a83e:	0020      	movs	r0, r4
 800a840:	f003 fa64 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800a844:	0006      	movs	r6, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &timeoutStrLen);
 800a846:	aa03      	add	r2, sp, #12
 800a848:	2102      	movs	r1, #2
 800a84a:	0020      	movs	r0, r4
 800a84c:	f003 fa5e 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800a850:	0007      	movs	r7, r0
	if ((pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800a852:	2e00      	cmp	r6, #0
 800a854:	d02d      	beq.n	800a8b2 <streamCommand+0x8e>
 800a856:	2800      	cmp	r0, #0
 800a858:	d02b      	beq.n	800a8b2 <streamCommand+0x8e>
	*pPeriod = atoi(pPeriodMSStr);
 800a85a:	0030      	movs	r0, r6
 800a85c:	f008 fa19 	bl	8012c92 <atoi>
 800a860:	9001      	str	r0, [sp, #4]
	*pTimeout = atoi(pTimeoutMSStr);
 800a862:	0038      	movs	r0, r7
 800a864:	f008 fa15 	bl	8012c92 <atoi>
 800a868:	0007      	movs	r7, r0
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &portStrLen);
 800a86a:	aa04      	add	r2, sp, #16
 800a86c:	2103      	movs	r1, #3
 800a86e:	0020      	movs	r0, r4
 800a870:	f003 fa4c 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800a874:	0006      	movs	r6, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &modStrLen);
 800a876:	aa05      	add	r2, sp, #20
 800a878:	2104      	movs	r1, #4
 800a87a:	0020      	movs	r0, r4
 800a87c:	f003 fa46 	bl	800dd0c <FreeRTOS_CLIGetParameter>
 800a880:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800a882:	d014      	beq.n	800a8ae <streamCommand+0x8a>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800a884:	2e00      	cmp	r6, #0
 800a886:	d014      	beq.n	800a8b2 <streamCommand+0x8e>
	*pPort = atoi(pPortStr);
 800a888:	0030      	movs	r0, r6
 800a88a:	f008 fa02 	bl	8012c92 <atoi>
 800a88e:	b2c6      	uxtb	r6, r0
	*pModule = atoi(pModStr);
 800a890:	0020      	movs	r0, r4
 800a892:	f008 f9fe 	bl	8012c92 <atoi>
 800a896:	b2c1      	uxtb	r1, r0
            if(unit == Volt)
 800a898:	4b1a      	ldr	r3, [pc, #104]	; (800a904 <streamCommand+0xe0>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
	*pPortOrCLI = false;
 800a89c:	2200      	movs	r2, #0
            if(unit == Volt)
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d126      	bne.n	800a8f0 <streamCommand+0xcc>
				StreamVToPort(port, module, period, timeout);
 800a8a2:	003b      	movs	r3, r7
 800a8a4:	9a01      	ldr	r2, [sp, #4]
 800a8a6:	0030      	movs	r0, r6
 800a8a8:	f7ff fda4 	bl	800a3f4 <StreamVToPort>
 800a8ac:	e022      	b.n	800a8f4 <streamCommand+0xd0>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800a8ae:	2e00      	cmp	r6, #0
 800a8b0:	d012      	beq.n	800a8d8 <streamCommand+0xb4>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800a8b2:	4a15      	ldr	r2, [pc, #84]	; (800a908 <streamCommand+0xe4>)
 800a8b4:	9900      	ldr	r1, [sp, #0]
 800a8b6:	0028      	movs	r0, r5
 800a8b8:	f008 ffc8 	bl	801384c <sniprintf>
		return pdFALSE;
 800a8bc:	e01f      	b.n	800a8fe <streamCommand+0xda>
    		if (portOrCLI) {
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	d004      	beq.n	800a8cc <streamCommand+0xa8>
    			StreamAToCLI(period, timeout);
 800a8c2:	0039      	movs	r1, r7
 800a8c4:	9801      	ldr	r0, [sp, #4]
 800a8c6:	f7ff ff17 	bl	800a6f8 <StreamAToCLI>
 800a8ca:	e013      	b.n	800a8f4 <streamCommand+0xd0>
    			StreamAToPort(port, module, period, timeout);
 800a8cc:	003b      	movs	r3, r7
 800a8ce:	9a01      	ldr	r2, [sp, #4]
 800a8d0:	0030      	movs	r0, r6
 800a8d2:	f7ff fdd7 	bl	800a484 <StreamAToPort>
 800a8d6:	e00d      	b.n	800a8f4 <streamCommand+0xd0>
            if(unit == Volt)
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <streamCommand+0xe0>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d104      	bne.n	800a8ea <streamCommand+0xc6>
				StreamVToCLI(period, timeout);
 800a8e0:	0039      	movs	r1, r7
 800a8e2:	9801      	ldr	r0, [sp, #4]
 800a8e4:	f7ff fec0 	bl	800a668 <StreamVToCLI>
 800a8e8:	e004      	b.n	800a8f4 <streamCommand+0xd0>
	*pPortOrCLI = true;
 800a8ea:	2201      	movs	r2, #1
	uint8_t module = 0;
 800a8ec:	2100      	movs	r1, #0
	uint8_t port = 0;
 800a8ee:	000e      	movs	r6, r1
            else if(unit == Amp)
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d0e4      	beq.n	800a8be <streamCommand+0x9a>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800a8f4:	4a05      	ldr	r2, [pc, #20]	; (800a90c <streamCommand+0xe8>)
 800a8f6:	9900      	ldr	r1, [sp, #0]
 800a8f8:	0028      	movs	r0, r5
 800a8fa:	f008 ffa7 	bl	801384c <sniprintf>
}
 800a8fe:	2000      	movs	r0, #0
 800a900:	b007      	add	sp, #28
 800a902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a904:	200000a4 	.word	0x200000a4
 800a908:	08019518 	.word	0x08019518
 800a90c:	08018b30 	.word	0x08018b30

0800a910 <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800a910:	b500      	push	{lr}
 800a912:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800a914:	2307      	movs	r3, #7
 800a916:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a918:	2380      	movs	r3, #128	; 0x80
 800a91a:	015b      	lsls	r3, r3, #5
 800a91c:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a91e:	2304      	movs	r3, #4
 800a920:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a922:	a901      	add	r1, sp, #4
 800a924:	4802      	ldr	r0, [pc, #8]	; (800a930 <ADC_Select_CH7+0x20>)
 800a926:	f005 faab 	bl	800fe80 <HAL_ADC_ConfigChannel>

	}

}
 800a92a:	b005      	add	sp, #20
 800a92c:	bd00      	pop	{pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	20005ec4 	.word	0x20005ec4

0800a934 <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800a934:	b500      	push	{lr}
 800a936:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800a938:	2307      	movs	r3, #7
 800a93a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a93c:	4b04      	ldr	r3, [pc, #16]	; (800a950 <ADC_Deselect_CH7+0x1c>)
 800a93e:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a940:	2304      	movs	r3, #4
 800a942:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a944:	a901      	add	r1, sp, #4
 800a946:	4803      	ldr	r0, [pc, #12]	; (800a954 <ADC_Deselect_CH7+0x20>)
 800a948:	f005 fa9a 	bl	800fe80 <HAL_ADC_ConfigChannel>

	}
}
 800a94c:	b005      	add	sp, #20
 800a94e:	bd00      	pop	{pc}
 800a950:	00001001 	.word	0x00001001
 800a954:	20005ec4 	.word	0x20005ec4

0800a958 <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800a958:	b500      	push	{lr}
 800a95a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800a95c:	2309      	movs	r3, #9
 800a95e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a960:	2380      	movs	r3, #128	; 0x80
 800a962:	015b      	lsls	r3, r3, #5
 800a964:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a966:	2304      	movs	r3, #4
 800a968:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a96a:	a901      	add	r1, sp, #4
 800a96c:	4802      	ldr	r0, [pc, #8]	; (800a978 <ADC_Select_CH9+0x20>)
 800a96e:	f005 fa87 	bl	800fe80 <HAL_ADC_ConfigChannel>

	}

}
 800a972:	b005      	add	sp, #20
 800a974:	bd00      	pop	{pc}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	20005ec4 	.word	0x20005ec4

0800a97c <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800a97c:	b500      	push	{lr}
 800a97e:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800a980:	2309      	movs	r3, #9
 800a982:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a984:	4b04      	ldr	r3, [pc, #16]	; (800a998 <ADC_Deselect_CH9+0x1c>)
 800a986:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a988:	2304      	movs	r3, #4
 800a98a:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a98c:	a901      	add	r1, sp, #4
 800a98e:	4803      	ldr	r0, [pc, #12]	; (800a99c <ADC_Deselect_CH9+0x20>)
 800a990:	f005 fa76 	bl	800fe80 <HAL_ADC_ConfigChannel>

	}
}
 800a994:	b005      	add	sp, #20
 800a996:	bd00      	pop	{pc}
 800a998:	00001001 	.word	0x00001001
 800a99c:	20005ec4 	.word	0x20005ec4

0800a9a0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a9a0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a9a2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a9a8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a9aa:	2280      	movs	r2, #128	; 0x80
 800a9ac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9ae:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9b0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a9b2:	3320      	adds	r3, #32
 800a9b4:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a9b6:	2380      	movs	r3, #128	; 0x80
 800a9b8:	019b      	lsls	r3, r3, #6
 800a9ba:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a9bc:	f005 fca2 	bl	8010304 <HAL_DMA_Init>
}
 800a9c0:	bd10      	pop	{r4, pc}

0800a9c2 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a9c2:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a9c4:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9c6:	2310      	movs	r3, #16
 800a9c8:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a9ce:	2280      	movs	r2, #128	; 0x80
 800a9d0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9d2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9d4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a9d6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a9d8:	2380      	movs	r3, #128	; 0x80
 800a9da:	019b      	lsls	r3, r3, #6
 800a9dc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a9de:	f005 fc91 	bl	8010304 <HAL_DMA_Init>
}
 800a9e2:	bd10      	pop	{r4, pc}

0800a9e4 <DMA_Init>:
{
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800a9e8:	4b18      	ldr	r3, [pc, #96]	; (800aa4c <DMA_Init+0x68>)
 800a9ea:	6959      	ldr	r1, [r3, #20]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	4311      	orrs	r1, r2
 800a9f0:	6159      	str	r1, [r3, #20]
 800a9f2:	6959      	ldr	r1, [r3, #20]
 800a9f4:	400a      	ands	r2, r1
 800a9f6:	9200      	str	r2, [sp, #0]
 800a9f8:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a9fa:	6959      	ldr	r1, [r3, #20]
 800a9fc:	2202      	movs	r2, #2
 800a9fe:	4311      	orrs	r1, r2
 800aa00:	6159      	str	r1, [r3, #20]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	401a      	ands	r2, r3
 800aa06:	9201      	str	r2, [sp, #4]
 800aa08:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800aa0a:	4c11      	ldr	r4, [pc, #68]	; (800aa50 <DMA_Init+0x6c>)
 800aa0c:	4911      	ldr	r1, [pc, #68]	; (800aa54 <DMA_Init+0x70>)
 800aa0e:	0020      	movs	r0, r4
 800aa10:	f7ff ffc6 	bl	800a9a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800aa14:	0020      	movs	r0, r4
 800aa16:	3038      	adds	r0, #56	; 0x38
 800aa18:	490f      	ldr	r1, [pc, #60]	; (800aa58 <DMA_Init+0x74>)
 800aa1a:	f7ff ffc1 	bl	800a9a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800aa1e:	0020      	movs	r0, r4
 800aa20:	3070      	adds	r0, #112	; 0x70
 800aa22:	490e      	ldr	r1, [pc, #56]	; (800aa5c <DMA_Init+0x78>)
 800aa24:	f7ff ffbc 	bl	800a9a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800aa28:	4c0d      	ldr	r4, [pc, #52]	; (800aa60 <DMA_Init+0x7c>)
 800aa2a:	490e      	ldr	r1, [pc, #56]	; (800aa64 <DMA_Init+0x80>)
 800aa2c:	0020      	movs	r0, r4
 800aa2e:	f7ff ffc8 	bl	800a9c2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800aa32:	0020      	movs	r0, r4
 800aa34:	3038      	adds	r0, #56	; 0x38
 800aa36:	490c      	ldr	r1, [pc, #48]	; (800aa68 <DMA_Init+0x84>)
 800aa38:	f7ff ffc3 	bl	800a9c2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800aa3c:	0020      	movs	r0, r4
 800aa3e:	3070      	adds	r0, #112	; 0x70
 800aa40:	490a      	ldr	r1, [pc, #40]	; (800aa6c <DMA_Init+0x88>)
 800aa42:	f7ff ffbe 	bl	800a9c2 <DMA_MSG_TX_CH_Init>
}
 800aa46:	b002      	add	sp, #8
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	40021000 	.word	0x40021000
 800aa50:	2000134c 	.word	0x2000134c
 800aa54:	40020008 	.word	0x40020008
 800aa58:	40020030 	.word	0x40020030
 800aa5c:	40020058 	.word	0x40020058
 800aa60:	2000149c 	.word	0x2000149c
 800aa64:	4002001c 	.word	0x4002001c
 800aa68:	40020044 	.word	0x40020044
 800aa6c:	40020080 	.word	0x40020080

0800aa70 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800aa70:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800aa72:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa74:	2300      	movs	r3, #0
 800aa76:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aa78:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800aa7a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa7c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa7e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aa80:	3320      	adds	r3, #32
 800aa82:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	015b      	lsls	r3, r3, #5
 800aa88:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800aa8a:	f005 fc3b 	bl	8010304 <HAL_DMA_Init>
}
 800aa8e:	bd10      	pop	{r4, pc}

0800aa90 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800aa90:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800aa92:	1e44      	subs	r4, r0, #1
 800aa94:	00e5      	lsls	r5, r4, #3
 800aa96:	1b28      	subs	r0, r5, r4
 800aa98:	00c0      	lsls	r0, r0, #3
 800aa9a:	4e07      	ldr	r6, [pc, #28]	; (800aab8 <StopStreamDMA+0x28>)
 800aa9c:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800aa9e:	f005 fc90 	bl	80103c2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800aaa2:	1b2d      	subs	r5, r5, r4
 800aaa4:	00ed      	lsls	r5, r5, #3
 800aaa6:	59aa      	ldr	r2, [r5, r6]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800aaac:	00a4      	lsls	r4, r4, #2
 800aaae:	4a03      	ldr	r2, [pc, #12]	; (800aabc <StopStreamDMA+0x2c>)
 800aab0:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800aab2:	4a03      	ldr	r2, [pc, #12]	; (800aac0 <StopStreamDMA+0x30>)
 800aab4:	50a3      	str	r3, [r4, r2]

}
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	20001544 	.word	0x20001544
 800aabc:	20001024 	.word	0x20001024
 800aac0:	2000103c 	.word	0x2000103c

0800aac4 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800aac4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800aac6:	1e45      	subs	r5, r0, #1
 800aac8:	00ec      	lsls	r4, r5, #3
 800aaca:	1b60      	subs	r0, r4, r5
 800aacc:	00c0      	lsls	r0, r0, #3
 800aace:	4e05      	ldr	r6, [pc, #20]	; (800aae4 <StopMsgDMA+0x20>)
 800aad0:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800aad2:	f005 fc76 	bl	80103c2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800aad6:	1b64      	subs	r4, r4, r5
 800aad8:	00e4      	lsls	r4, r4, #3
 800aada:	59a3      	ldr	r3, [r4, r6]
 800aadc:	2200      	movs	r2, #0
 800aade:	605a      	str	r2, [r3, #4]
}
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	2000134c 	.word	0x2000134c

0800aae8 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800aae8:	b510      	push	{r4, lr}
 800aaea:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800aaec:	f7ff ffea 	bl	800aac4 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800aaf0:	3c01      	subs	r4, #1
 800aaf2:	00e0      	lsls	r0, r4, #3
 800aaf4:	1b02      	subs	r2, r0, r4
 800aaf6:	00d2      	lsls	r2, r2, #3
 800aaf8:	4903      	ldr	r1, [pc, #12]	; (800ab08 <SwitchMsgDMAToStream+0x20>)
 800aafa:	5851      	ldr	r1, [r2, r1]
 800aafc:	4b03      	ldr	r3, [pc, #12]	; (800ab0c <SwitchMsgDMAToStream+0x24>)
 800aafe:	18d0      	adds	r0, r2, r3
 800ab00:	f7ff ffb6 	bl	800aa70 <DMA_STREAM_CH_Init>
}
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	2000134c 	.word	0x2000134c
 800ab0c:	20001544 	.word	0x20001544

0800ab10 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800ab10:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ab12:	6803      	ldr	r3, [r0, #0]
 800ab14:	4a20      	ldr	r2, [pc, #128]	; (800ab98 <SetupDMAInterrupts+0x88>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d020      	beq.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab1a:	d827      	bhi.n	800ab6c <SetupDMAInterrupts+0x5c>
 800ab1c:	4a1f      	ldr	r2, [pc, #124]	; (800ab9c <SetupDMAInterrupts+0x8c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d00e      	beq.n	800ab40 <SetupDMAInterrupts+0x30>
 800ab22:	d815      	bhi.n	800ab50 <SetupDMAInterrupts+0x40>
 800ab24:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <SetupDMAInterrupts+0x90>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d107      	bne.n	800ab3a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2009      	movs	r0, #9
 800ab2e:	f005 fa4b 	bl	800ffc8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800ab32:	2009      	movs	r0, #9
 800ab34:	f005 fa7c 	bl	8010030 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ab38:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ab3a:	4a1a      	ldr	r2, [pc, #104]	; (800aba4 <SetupDMAInterrupts+0x94>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d1fb      	bne.n	800ab38 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ab40:	2200      	movs	r2, #0
 800ab42:	200a      	movs	r0, #10
 800ab44:	f005 fa40 	bl	800ffc8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ab48:	200a      	movs	r0, #10
 800ab4a:	f005 fa71 	bl	8010030 <HAL_NVIC_EnableIRQ>
			break;
 800ab4e:	e7f3      	b.n	800ab38 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ab50:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <SetupDMAInterrupts+0x98>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d002      	beq.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab56:	4a15      	ldr	r2, [pc, #84]	; (800abac <SetupDMAInterrupts+0x9c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d1ed      	bne.n	800ab38 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	200b      	movs	r0, #11
 800ab60:	f005 fa32 	bl	800ffc8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ab64:	200b      	movs	r0, #11
 800ab66:	f005 fa63 	bl	8010030 <HAL_NVIC_EnableIRQ>
}
 800ab6a:	e7e5      	b.n	800ab38 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ab6c:	4a10      	ldr	r2, [pc, #64]	; (800abb0 <SetupDMAInterrupts+0xa0>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d0e6      	beq.n	800ab40 <SetupDMAInterrupts+0x30>
 800ab72:	d909      	bls.n	800ab88 <SetupDMAInterrupts+0x78>
 800ab74:	4a0f      	ldr	r2, [pc, #60]	; (800abb4 <SetupDMAInterrupts+0xa4>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d0f0      	beq.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab7a:	4a0f      	ldr	r2, [pc, #60]	; (800abb8 <SetupDMAInterrupts+0xa8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d0ed      	beq.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab80:	4a0e      	ldr	r2, [pc, #56]	; (800abbc <SetupDMAInterrupts+0xac>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d1d8      	bne.n	800ab38 <SetupDMAInterrupts+0x28>
 800ab86:	e7e9      	b.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab88:	4a0d      	ldr	r2, [pc, #52]	; (800abc0 <SetupDMAInterrupts+0xb0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d0e6      	beq.n	800ab5c <SetupDMAInterrupts+0x4c>
 800ab8e:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <SetupDMAInterrupts+0xb4>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d0d5      	beq.n	800ab40 <SetupDMAInterrupts+0x30>
 800ab94:	e7d0      	b.n	800ab38 <SetupDMAInterrupts+0x28>
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	4002006c 	.word	0x4002006c
 800ab9c:	40020030 	.word	0x40020030
 800aba0:	40020008 	.word	0x40020008
 800aba4:	4002001c 	.word	0x4002001c
 800aba8:	40020044 	.word	0x40020044
 800abac:	40020058 	.word	0x40020058
 800abb0:	4002041c 	.word	0x4002041c
 800abb4:	40020444 	.word	0x40020444
 800abb8:	40020458 	.word	0x40020458
 800abbc:	40020430 	.word	0x40020430
 800abc0:	40020080 	.word	0x40020080
 800abc4:	40020408 	.word	0x40020408

0800abc8 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800abc8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800abca:	6803      	ldr	r3, [r0, #0]
 800abcc:	4a1a      	ldr	r2, [pc, #104]	; (800ac38 <UnSetupDMAInterrupts+0x70>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d018      	beq.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800abd2:	d81b      	bhi.n	800ac0c <UnSetupDMAInterrupts+0x44>
 800abd4:	4a19      	ldr	r2, [pc, #100]	; (800ac3c <UnSetupDMAInterrupts+0x74>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d00a      	beq.n	800abf0 <UnSetupDMAInterrupts+0x28>
 800abda:	d80d      	bhi.n	800abf8 <UnSetupDMAInterrupts+0x30>
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <UnSetupDMAInterrupts+0x78>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d103      	bne.n	800abea <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800abe2:	2009      	movs	r0, #9
 800abe4:	f005 fa2e 	bl	8010044 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800abe8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800abea:	4a16      	ldr	r2, [pc, #88]	; (800ac44 <UnSetupDMAInterrupts+0x7c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d1fb      	bne.n	800abe8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800abf0:	200a      	movs	r0, #10
 800abf2:	f005 fa27 	bl	8010044 <HAL_NVIC_DisableIRQ>
			break;
 800abf6:	e7f7      	b.n	800abe8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800abf8:	4a13      	ldr	r2, [pc, #76]	; (800ac48 <UnSetupDMAInterrupts+0x80>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d002      	beq.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800abfe:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <UnSetupDMAInterrupts+0x84>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d1f1      	bne.n	800abe8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ac04:	200b      	movs	r0, #11
 800ac06:	f005 fa1d 	bl	8010044 <HAL_NVIC_DisableIRQ>
}
 800ac0a:	e7ed      	b.n	800abe8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800ac0c:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <UnSetupDMAInterrupts+0x88>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d0ee      	beq.n	800abf0 <UnSetupDMAInterrupts+0x28>
 800ac12:	d909      	bls.n	800ac28 <UnSetupDMAInterrupts+0x60>
 800ac14:	4a0f      	ldr	r2, [pc, #60]	; (800ac54 <UnSetupDMAInterrupts+0x8c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d0f4      	beq.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800ac1a:	4a0f      	ldr	r2, [pc, #60]	; (800ac58 <UnSetupDMAInterrupts+0x90>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d0f1      	beq.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800ac20:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <UnSetupDMAInterrupts+0x94>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d1e0      	bne.n	800abe8 <UnSetupDMAInterrupts+0x20>
 800ac26:	e7ed      	b.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800ac28:	4a0d      	ldr	r2, [pc, #52]	; (800ac60 <UnSetupDMAInterrupts+0x98>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d0ea      	beq.n	800ac04 <UnSetupDMAInterrupts+0x3c>
 800ac2e:	4a0d      	ldr	r2, [pc, #52]	; (800ac64 <UnSetupDMAInterrupts+0x9c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d0dd      	beq.n	800abf0 <UnSetupDMAInterrupts+0x28>
 800ac34:	e7d8      	b.n	800abe8 <UnSetupDMAInterrupts+0x20>
 800ac36:	46c0      	nop			; (mov r8, r8)
 800ac38:	4002006c 	.word	0x4002006c
 800ac3c:	40020030 	.word	0x40020030
 800ac40:	40020008 	.word	0x40020008
 800ac44:	4002001c 	.word	0x4002001c
 800ac48:	40020044 	.word	0x40020044
 800ac4c:	40020058 	.word	0x40020058
 800ac50:	4002041c 	.word	0x4002041c
 800ac54:	40020444 	.word	0x40020444
 800ac58:	40020458 	.word	0x40020458
 800ac5c:	40020430 	.word	0x40020430
 800ac60:	40020080 	.word	0x40020080
 800ac64:	40020408 	.word	0x40020408

0800ac68 <DMA_MSG_TX_UnSetup>:
{	
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ac6c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ac6e:	f7ff ffab 	bl	800abc8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ac72:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ac74:	2300      	movs	r3, #0
 800ac76:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ac78:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ac7a:	bd10      	pop	{r4, pc}

0800ac7c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ac7c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ac7e:	6803      	ldr	r3, [r0, #0]
 800ac80:	4abd      	ldr	r2, [pc, #756]	; (800af78 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d02f      	beq.n	800ace6 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ac86:	4abd      	ldr	r2, [pc, #756]	; (800af7c <RemapAndLinkDMAtoUARTRx+0x300>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d100      	bne.n	800ac8e <RemapAndLinkDMAtoUARTRx+0x12>
 800ac8c:	e087      	b.n	800ad9e <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ac8e:	4abc      	ldr	r2, [pc, #752]	; (800af80 <RemapAndLinkDMAtoUARTRx+0x304>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d100      	bne.n	800ac96 <RemapAndLinkDMAtoUARTRx+0x1a>
 800ac94:	e0dc      	b.n	800ae50 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ac96:	4abb      	ldr	r2, [pc, #748]	; (800af84 <RemapAndLinkDMAtoUARTRx+0x308>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d000      	beq.n	800ac9e <RemapAndLinkDMAtoUARTRx+0x22>
 800ac9c:	e18a      	b.n	800afb4 <RemapAndLinkDMAtoUARTRx+0x338>
 800ac9e:	680b      	ldr	r3, [r1, #0]
 800aca0:	4ab9      	ldr	r2, [pc, #740]	; (800af88 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d100      	bne.n	800aca8 <RemapAndLinkDMAtoUARTRx+0x2c>
 800aca6:	e12d      	b.n	800af04 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800aca8:	4ab8      	ldr	r2, [pc, #736]	; (800af8c <RemapAndLinkDMAtoUARTRx+0x310>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d100      	bne.n	800acb0 <RemapAndLinkDMAtoUARTRx+0x34>
 800acae:	e134      	b.n	800af1a <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800acb0:	4ab7      	ldr	r2, [pc, #732]	; (800af90 <RemapAndLinkDMAtoUARTRx+0x314>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d100      	bne.n	800acb8 <RemapAndLinkDMAtoUARTRx+0x3c>
 800acb6:	e13c      	b.n	800af32 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800acb8:	4ab6      	ldr	r2, [pc, #728]	; (800af94 <RemapAndLinkDMAtoUARTRx+0x318>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d100      	bne.n	800acc0 <RemapAndLinkDMAtoUARTRx+0x44>
 800acbe:	e144      	b.n	800af4a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800acc0:	4ab5      	ldr	r2, [pc, #724]	; (800af98 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d100      	bne.n	800acc8 <RemapAndLinkDMAtoUARTRx+0x4c>
 800acc6:	e14c      	b.n	800af62 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800acc8:	4ab4      	ldr	r2, [pc, #720]	; (800af9c <RemapAndLinkDMAtoUARTRx+0x320>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d11e      	bne.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800acce:	4ab4      	ldr	r2, [pc, #720]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800acd0:	23a8      	movs	r3, #168	; 0xa8
 800acd2:	58d4      	ldr	r4, [r2, r3]
 800acd4:	4db3      	ldr	r5, [pc, #716]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800acd6:	402c      	ands	r4, r5
 800acd8:	50d4      	str	r4, [r2, r3]
 800acda:	58d5      	ldr	r5, [r2, r3]
 800acdc:	24b0      	movs	r4, #176	; 0xb0
 800acde:	0124      	lsls	r4, r4, #4
 800ace0:	432c      	orrs	r4, r5
 800ace2:	50d4      	str	r4, [r2, r3]
 800ace4:	e012      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ace6:	680b      	ldr	r3, [r1, #0]
 800ace8:	4aa7      	ldr	r2, [pc, #668]	; (800af88 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d011      	beq.n	800ad12 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800acee:	4aa7      	ldr	r2, [pc, #668]	; (800af8c <RemapAndLinkDMAtoUARTRx+0x310>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d019      	beq.n	800ad28 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800acf4:	4aa6      	ldr	r2, [pc, #664]	; (800af90 <RemapAndLinkDMAtoUARTRx+0x314>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d022      	beq.n	800ad40 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800acfa:	4aa6      	ldr	r2, [pc, #664]	; (800af94 <RemapAndLinkDMAtoUARTRx+0x318>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d02b      	beq.n	800ad58 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800ad00:	4aa5      	ldr	r2, [pc, #660]	; (800af98 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d034      	beq.n	800ad70 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ad06:	4aa5      	ldr	r2, [pc, #660]	; (800af9c <RemapAndLinkDMAtoUARTRx+0x320>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d03c      	beq.n	800ad86 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800ad0c:	6641      	str	r1, [r0, #100]	; 0x64
 800ad0e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ad12:	4aa5      	ldr	r2, [pc, #660]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad14:	23a8      	movs	r3, #168	; 0xa8
 800ad16:	58d4      	ldr	r4, [r2, r3]
 800ad18:	250f      	movs	r5, #15
 800ad1a:	43ac      	bics	r4, r5
 800ad1c:	50d4      	str	r4, [r2, r3]
 800ad1e:	58d4      	ldr	r4, [r2, r3]
 800ad20:	3d07      	subs	r5, #7
 800ad22:	432c      	orrs	r4, r5
 800ad24:	50d4      	str	r4, [r2, r3]
 800ad26:	e7f1      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800ad28:	4a9f      	ldr	r2, [pc, #636]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad2a:	23a8      	movs	r3, #168	; 0xa8
 800ad2c:	58d4      	ldr	r4, [r2, r3]
 800ad2e:	4d9d      	ldr	r5, [pc, #628]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ad30:	402c      	ands	r4, r5
 800ad32:	50d4      	str	r4, [r2, r3]
 800ad34:	58d5      	ldr	r5, [r2, r3]
 800ad36:	2480      	movs	r4, #128	; 0x80
 800ad38:	0124      	lsls	r4, r4, #4
 800ad3a:	432c      	orrs	r4, r5
 800ad3c:	50d4      	str	r4, [r2, r3]
 800ad3e:	e7e5      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ad40:	4a99      	ldr	r2, [pc, #612]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad42:	23a8      	movs	r3, #168	; 0xa8
 800ad44:	58d4      	ldr	r4, [r2, r3]
 800ad46:	4d99      	ldr	r5, [pc, #612]	; (800afac <RemapAndLinkDMAtoUARTRx+0x330>)
 800ad48:	402c      	ands	r4, r5
 800ad4a:	50d4      	str	r4, [r2, r3]
 800ad4c:	58d5      	ldr	r5, [r2, r3]
 800ad4e:	2480      	movs	r4, #128	; 0x80
 800ad50:	0324      	lsls	r4, r4, #12
 800ad52:	432c      	orrs	r4, r5
 800ad54:	50d4      	str	r4, [r2, r3]
 800ad56:	e7d9      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ad58:	4a93      	ldr	r2, [pc, #588]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad5a:	23a8      	movs	r3, #168	; 0xa8
 800ad5c:	58d4      	ldr	r4, [r2, r3]
 800ad5e:	4d94      	ldr	r5, [pc, #592]	; (800afb0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ad60:	402c      	ands	r4, r5
 800ad62:	50d4      	str	r4, [r2, r3]
 800ad64:	58d5      	ldr	r5, [r2, r3]
 800ad66:	2480      	movs	r4, #128	; 0x80
 800ad68:	0424      	lsls	r4, r4, #16
 800ad6a:	432c      	orrs	r4, r5
 800ad6c:	50d4      	str	r4, [r2, r3]
 800ad6e:	e7cd      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ad70:	4a8b      	ldr	r2, [pc, #556]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ad72:	23a8      	movs	r3, #168	; 0xa8
 800ad74:	58d4      	ldr	r4, [r2, r3]
 800ad76:	25f0      	movs	r5, #240	; 0xf0
 800ad78:	43ac      	bics	r4, r5
 800ad7a:	50d4      	str	r4, [r2, r3]
 800ad7c:	58d4      	ldr	r4, [r2, r3]
 800ad7e:	3d70      	subs	r5, #112	; 0x70
 800ad80:	432c      	orrs	r4, r5
 800ad82:	50d4      	str	r4, [r2, r3]
 800ad84:	e7c2      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ad86:	4a86      	ldr	r2, [pc, #536]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ad88:	23a8      	movs	r3, #168	; 0xa8
 800ad8a:	58d4      	ldr	r4, [r2, r3]
 800ad8c:	4d85      	ldr	r5, [pc, #532]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ad8e:	402c      	ands	r4, r5
 800ad90:	50d4      	str	r4, [r2, r3]
 800ad92:	58d5      	ldr	r5, [r2, r3]
 800ad94:	2480      	movs	r4, #128	; 0x80
 800ad96:	0124      	lsls	r4, r4, #4
 800ad98:	432c      	orrs	r4, r5
 800ad9a:	50d4      	str	r4, [r2, r3]
 800ad9c:	e7b6      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ad9e:	680b      	ldr	r3, [r1, #0]
 800ada0:	4a79      	ldr	r2, [pc, #484]	; (800af88 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d01a      	beq.n	800addc <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ada6:	4a79      	ldr	r2, [pc, #484]	; (800af8c <RemapAndLinkDMAtoUARTRx+0x310>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d022      	beq.n	800adf2 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800adac:	4a78      	ldr	r2, [pc, #480]	; (800af90 <RemapAndLinkDMAtoUARTRx+0x314>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d02b      	beq.n	800ae0a <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800adb2:	4a78      	ldr	r2, [pc, #480]	; (800af94 <RemapAndLinkDMAtoUARTRx+0x318>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d034      	beq.n	800ae22 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800adb8:	4a77      	ldr	r2, [pc, #476]	; (800af98 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d03d      	beq.n	800ae3a <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800adbe:	4a77      	ldr	r2, [pc, #476]	; (800af9c <RemapAndLinkDMAtoUARTRx+0x320>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d1a3      	bne.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800adc4:	4a76      	ldr	r2, [pc, #472]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800adc6:	23a8      	movs	r3, #168	; 0xa8
 800adc8:	58d4      	ldr	r4, [r2, r3]
 800adca:	4d76      	ldr	r5, [pc, #472]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800adcc:	402c      	ands	r4, r5
 800adce:	50d4      	str	r4, [r2, r3]
 800add0:	58d5      	ldr	r5, [r2, r3]
 800add2:	2490      	movs	r4, #144	; 0x90
 800add4:	0124      	lsls	r4, r4, #4
 800add6:	432c      	orrs	r4, r5
 800add8:	50d4      	str	r4, [r2, r3]
 800adda:	e797      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800addc:	4a72      	ldr	r2, [pc, #456]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800adde:	23a8      	movs	r3, #168	; 0xa8
 800ade0:	58d4      	ldr	r4, [r2, r3]
 800ade2:	250f      	movs	r5, #15
 800ade4:	43ac      	bics	r4, r5
 800ade6:	50d4      	str	r4, [r2, r3]
 800ade8:	58d4      	ldr	r4, [r2, r3]
 800adea:	3d06      	subs	r5, #6
 800adec:	432c      	orrs	r4, r5
 800adee:	50d4      	str	r4, [r2, r3]
 800adf0:	e78c      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800adf2:	4a6d      	ldr	r2, [pc, #436]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800adf4:	23a8      	movs	r3, #168	; 0xa8
 800adf6:	58d4      	ldr	r4, [r2, r3]
 800adf8:	4d6a      	ldr	r5, [pc, #424]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800adfa:	402c      	ands	r4, r5
 800adfc:	50d4      	str	r4, [r2, r3]
 800adfe:	58d5      	ldr	r5, [r2, r3]
 800ae00:	2490      	movs	r4, #144	; 0x90
 800ae02:	0124      	lsls	r4, r4, #4
 800ae04:	432c      	orrs	r4, r5
 800ae06:	50d4      	str	r4, [r2, r3]
 800ae08:	e780      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ae0a:	4a67      	ldr	r2, [pc, #412]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ae0c:	23a8      	movs	r3, #168	; 0xa8
 800ae0e:	58d4      	ldr	r4, [r2, r3]
 800ae10:	4d66      	ldr	r5, [pc, #408]	; (800afac <RemapAndLinkDMAtoUARTRx+0x330>)
 800ae12:	402c      	ands	r4, r5
 800ae14:	50d4      	str	r4, [r2, r3]
 800ae16:	58d5      	ldr	r5, [r2, r3]
 800ae18:	2490      	movs	r4, #144	; 0x90
 800ae1a:	0324      	lsls	r4, r4, #12
 800ae1c:	432c      	orrs	r4, r5
 800ae1e:	50d4      	str	r4, [r2, r3]
 800ae20:	e774      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ae22:	4a61      	ldr	r2, [pc, #388]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ae24:	23a8      	movs	r3, #168	; 0xa8
 800ae26:	58d4      	ldr	r4, [r2, r3]
 800ae28:	4d61      	ldr	r5, [pc, #388]	; (800afb0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ae2a:	402c      	ands	r4, r5
 800ae2c:	50d4      	str	r4, [r2, r3]
 800ae2e:	58d5      	ldr	r5, [r2, r3]
 800ae30:	2490      	movs	r4, #144	; 0x90
 800ae32:	0424      	lsls	r4, r4, #16
 800ae34:	432c      	orrs	r4, r5
 800ae36:	50d4      	str	r4, [r2, r3]
 800ae38:	e768      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ae3a:	4a59      	ldr	r2, [pc, #356]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ae3c:	23a8      	movs	r3, #168	; 0xa8
 800ae3e:	58d4      	ldr	r4, [r2, r3]
 800ae40:	25f0      	movs	r5, #240	; 0xf0
 800ae42:	43ac      	bics	r4, r5
 800ae44:	50d4      	str	r4, [r2, r3]
 800ae46:	58d4      	ldr	r4, [r2, r3]
 800ae48:	3d60      	subs	r5, #96	; 0x60
 800ae4a:	432c      	orrs	r4, r5
 800ae4c:	50d4      	str	r4, [r2, r3]
 800ae4e:	e75d      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ae50:	680b      	ldr	r3, [r1, #0]
 800ae52:	4a4d      	ldr	r2, [pc, #308]	; (800af88 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d01b      	beq.n	800ae90 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800ae58:	4a4c      	ldr	r2, [pc, #304]	; (800af8c <RemapAndLinkDMAtoUARTRx+0x310>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d023      	beq.n	800aea6 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800ae5e:	4a4c      	ldr	r2, [pc, #304]	; (800af90 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d02c      	beq.n	800aebe <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ae64:	4a4b      	ldr	r2, [pc, #300]	; (800af94 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d035      	beq.n	800aed6 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ae6a:	4a4b      	ldr	r2, [pc, #300]	; (800af98 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d03e      	beq.n	800aeee <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800ae70:	4a4a      	ldr	r2, [pc, #296]	; (800af9c <RemapAndLinkDMAtoUARTRx+0x320>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d000      	beq.n	800ae78 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800ae76:	e749      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800ae78:	4a49      	ldr	r2, [pc, #292]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ae7a:	23a8      	movs	r3, #168	; 0xa8
 800ae7c:	58d4      	ldr	r4, [r2, r3]
 800ae7e:	4d49      	ldr	r5, [pc, #292]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ae80:	402c      	ands	r4, r5
 800ae82:	50d4      	str	r4, [r2, r3]
 800ae84:	58d5      	ldr	r5, [r2, r3]
 800ae86:	24a0      	movs	r4, #160	; 0xa0
 800ae88:	0124      	lsls	r4, r4, #4
 800ae8a:	432c      	orrs	r4, r5
 800ae8c:	50d4      	str	r4, [r2, r3]
 800ae8e:	e73d      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ae90:	4a45      	ldr	r2, [pc, #276]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ae92:	23a8      	movs	r3, #168	; 0xa8
 800ae94:	58d4      	ldr	r4, [r2, r3]
 800ae96:	250f      	movs	r5, #15
 800ae98:	43ac      	bics	r4, r5
 800ae9a:	50d4      	str	r4, [r2, r3]
 800ae9c:	58d4      	ldr	r4, [r2, r3]
 800ae9e:	3d05      	subs	r5, #5
 800aea0:	432c      	orrs	r4, r5
 800aea2:	50d4      	str	r4, [r2, r3]
 800aea4:	e732      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800aea6:	4a40      	ldr	r2, [pc, #256]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800aea8:	23a8      	movs	r3, #168	; 0xa8
 800aeaa:	58d4      	ldr	r4, [r2, r3]
 800aeac:	4d3d      	ldr	r5, [pc, #244]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800aeae:	402c      	ands	r4, r5
 800aeb0:	50d4      	str	r4, [r2, r3]
 800aeb2:	58d5      	ldr	r5, [r2, r3]
 800aeb4:	24a0      	movs	r4, #160	; 0xa0
 800aeb6:	0124      	lsls	r4, r4, #4
 800aeb8:	432c      	orrs	r4, r5
 800aeba:	50d4      	str	r4, [r2, r3]
 800aebc:	e726      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800aebe:	4a3a      	ldr	r2, [pc, #232]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800aec0:	23a8      	movs	r3, #168	; 0xa8
 800aec2:	58d4      	ldr	r4, [r2, r3]
 800aec4:	4d39      	ldr	r5, [pc, #228]	; (800afac <RemapAndLinkDMAtoUARTRx+0x330>)
 800aec6:	402c      	ands	r4, r5
 800aec8:	50d4      	str	r4, [r2, r3]
 800aeca:	58d5      	ldr	r5, [r2, r3]
 800aecc:	24a0      	movs	r4, #160	; 0xa0
 800aece:	0324      	lsls	r4, r4, #12
 800aed0:	432c      	orrs	r4, r5
 800aed2:	50d4      	str	r4, [r2, r3]
 800aed4:	e71a      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800aed6:	4a34      	ldr	r2, [pc, #208]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800aed8:	23a8      	movs	r3, #168	; 0xa8
 800aeda:	58d4      	ldr	r4, [r2, r3]
 800aedc:	4d34      	ldr	r5, [pc, #208]	; (800afb0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800aede:	402c      	ands	r4, r5
 800aee0:	50d4      	str	r4, [r2, r3]
 800aee2:	58d5      	ldr	r5, [r2, r3]
 800aee4:	24a0      	movs	r4, #160	; 0xa0
 800aee6:	0424      	lsls	r4, r4, #16
 800aee8:	432c      	orrs	r4, r5
 800aeea:	50d4      	str	r4, [r2, r3]
 800aeec:	e70e      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800aeee:	4a2c      	ldr	r2, [pc, #176]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800aef0:	23a8      	movs	r3, #168	; 0xa8
 800aef2:	58d4      	ldr	r4, [r2, r3]
 800aef4:	25f0      	movs	r5, #240	; 0xf0
 800aef6:	43ac      	bics	r4, r5
 800aef8:	50d4      	str	r4, [r2, r3]
 800aefa:	58d4      	ldr	r4, [r2, r3]
 800aefc:	3d50      	subs	r5, #80	; 0x50
 800aefe:	432c      	orrs	r4, r5
 800af00:	50d4      	str	r4, [r2, r3]
 800af02:	e703      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800af04:	4a28      	ldr	r2, [pc, #160]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800af06:	23a8      	movs	r3, #168	; 0xa8
 800af08:	58d4      	ldr	r4, [r2, r3]
 800af0a:	250f      	movs	r5, #15
 800af0c:	43ac      	bics	r4, r5
 800af0e:	50d4      	str	r4, [r2, r3]
 800af10:	58d4      	ldr	r4, [r2, r3]
 800af12:	3d04      	subs	r5, #4
 800af14:	432c      	orrs	r4, r5
 800af16:	50d4      	str	r4, [r2, r3]
 800af18:	e6f8      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800af1a:	4a23      	ldr	r2, [pc, #140]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800af1c:	23a8      	movs	r3, #168	; 0xa8
 800af1e:	58d4      	ldr	r4, [r2, r3]
 800af20:	4d20      	ldr	r5, [pc, #128]	; (800afa4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800af22:	402c      	ands	r4, r5
 800af24:	50d4      	str	r4, [r2, r3]
 800af26:	58d5      	ldr	r5, [r2, r3]
 800af28:	24b0      	movs	r4, #176	; 0xb0
 800af2a:	0124      	lsls	r4, r4, #4
 800af2c:	432c      	orrs	r4, r5
 800af2e:	50d4      	str	r4, [r2, r3]
 800af30:	e6ec      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800af32:	4a1d      	ldr	r2, [pc, #116]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800af34:	23a8      	movs	r3, #168	; 0xa8
 800af36:	58d4      	ldr	r4, [r2, r3]
 800af38:	4d1c      	ldr	r5, [pc, #112]	; (800afac <RemapAndLinkDMAtoUARTRx+0x330>)
 800af3a:	402c      	ands	r4, r5
 800af3c:	50d4      	str	r4, [r2, r3]
 800af3e:	58d5      	ldr	r5, [r2, r3]
 800af40:	24b0      	movs	r4, #176	; 0xb0
 800af42:	0324      	lsls	r4, r4, #12
 800af44:	432c      	orrs	r4, r5
 800af46:	50d4      	str	r4, [r2, r3]
 800af48:	e6e0      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800af4c:	23a8      	movs	r3, #168	; 0xa8
 800af4e:	58d4      	ldr	r4, [r2, r3]
 800af50:	4d17      	ldr	r5, [pc, #92]	; (800afb0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800af52:	402c      	ands	r4, r5
 800af54:	50d4      	str	r4, [r2, r3]
 800af56:	58d5      	ldr	r5, [r2, r3]
 800af58:	24b0      	movs	r4, #176	; 0xb0
 800af5a:	0424      	lsls	r4, r4, #16
 800af5c:	432c      	orrs	r4, r5
 800af5e:	50d4      	str	r4, [r2, r3]
 800af60:	e6d4      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800af62:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800af64:	23a8      	movs	r3, #168	; 0xa8
 800af66:	58d4      	ldr	r4, [r2, r3]
 800af68:	25f0      	movs	r5, #240	; 0xf0
 800af6a:	43ac      	bics	r4, r5
 800af6c:	50d4      	str	r4, [r2, r3]
 800af6e:	58d4      	ldr	r4, [r2, r3]
 800af70:	3d40      	subs	r5, #64	; 0x40
 800af72:	432c      	orrs	r4, r5
 800af74:	50d4      	str	r4, [r2, r3]
 800af76:	e6c9      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
 800af78:	40013800 	.word	0x40013800
 800af7c:	40004400 	.word	0x40004400
 800af80:	40004800 	.word	0x40004800
 800af84:	40004c00 	.word	0x40004c00
 800af88:	40020008 	.word	0x40020008
 800af8c:	40020030 	.word	0x40020030
 800af90:	40020058 	.word	0x40020058
 800af94:	4002006c 	.word	0x4002006c
 800af98:	4002041c 	.word	0x4002041c
 800af9c:	40020430 	.word	0x40020430
 800afa0:	40020400 	.word	0x40020400
 800afa4:	fffff0ff 	.word	0xfffff0ff
 800afa8:	40020000 	.word	0x40020000
 800afac:	fff0ffff 	.word	0xfff0ffff
 800afb0:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800afb4:	4ab9      	ldr	r2, [pc, #740]	; (800b29c <RemapAndLinkDMAtoUARTRx+0x620>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d159      	bne.n	800b06e <RemapAndLinkDMAtoUARTRx+0x3f2>
 800afba:	680b      	ldr	r3, [r1, #0]
 800afbc:	4ab8      	ldr	r2, [pc, #736]	; (800b2a0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d01b      	beq.n	800affa <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800afc2:	4ab8      	ldr	r2, [pc, #736]	; (800b2a4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d023      	beq.n	800b010 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800afc8:	4ab7      	ldr	r2, [pc, #732]	; (800b2a8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d02c      	beq.n	800b028 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800afce:	4ab7      	ldr	r2, [pc, #732]	; (800b2ac <RemapAndLinkDMAtoUARTRx+0x630>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d035      	beq.n	800b040 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800afd4:	4ab6      	ldr	r2, [pc, #728]	; (800b2b0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d03e      	beq.n	800b058 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800afda:	4ab6      	ldr	r2, [pc, #728]	; (800b2b4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d000      	beq.n	800afe2 <RemapAndLinkDMAtoUARTRx+0x366>
 800afe0:	e694      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800afe2:	4ab5      	ldr	r2, [pc, #724]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800afe4:	23a8      	movs	r3, #168	; 0xa8
 800afe6:	58d4      	ldr	r4, [r2, r3]
 800afe8:	4db4      	ldr	r5, [pc, #720]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800afea:	402c      	ands	r4, r5
 800afec:	50d4      	str	r4, [r2, r3]
 800afee:	58d5      	ldr	r5, [r2, r3]
 800aff0:	24c0      	movs	r4, #192	; 0xc0
 800aff2:	0124      	lsls	r4, r4, #4
 800aff4:	432c      	orrs	r4, r5
 800aff6:	50d4      	str	r4, [r2, r3]
 800aff8:	e688      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800affa:	4ab1      	ldr	r2, [pc, #708]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800affc:	23a8      	movs	r3, #168	; 0xa8
 800affe:	58d4      	ldr	r4, [r2, r3]
 800b000:	250f      	movs	r5, #15
 800b002:	43ac      	bics	r4, r5
 800b004:	50d4      	str	r4, [r2, r3]
 800b006:	58d4      	ldr	r4, [r2, r3]
 800b008:	3d03      	subs	r5, #3
 800b00a:	432c      	orrs	r4, r5
 800b00c:	50d4      	str	r4, [r2, r3]
 800b00e:	e67d      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b010:	4aab      	ldr	r2, [pc, #684]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b012:	23a8      	movs	r3, #168	; 0xa8
 800b014:	58d4      	ldr	r4, [r2, r3]
 800b016:	4da9      	ldr	r5, [pc, #676]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b018:	402c      	ands	r4, r5
 800b01a:	50d4      	str	r4, [r2, r3]
 800b01c:	58d5      	ldr	r5, [r2, r3]
 800b01e:	24c0      	movs	r4, #192	; 0xc0
 800b020:	0124      	lsls	r4, r4, #4
 800b022:	432c      	orrs	r4, r5
 800b024:	50d4      	str	r4, [r2, r3]
 800b026:	e671      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b028:	4aa5      	ldr	r2, [pc, #660]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b02a:	23a8      	movs	r3, #168	; 0xa8
 800b02c:	58d4      	ldr	r4, [r2, r3]
 800b02e:	4da5      	ldr	r5, [pc, #660]	; (800b2c4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b030:	402c      	ands	r4, r5
 800b032:	50d4      	str	r4, [r2, r3]
 800b034:	58d5      	ldr	r5, [r2, r3]
 800b036:	24c0      	movs	r4, #192	; 0xc0
 800b038:	0324      	lsls	r4, r4, #12
 800b03a:	432c      	orrs	r4, r5
 800b03c:	50d4      	str	r4, [r2, r3]
 800b03e:	e665      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b040:	4a9f      	ldr	r2, [pc, #636]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b042:	23a8      	movs	r3, #168	; 0xa8
 800b044:	58d4      	ldr	r4, [r2, r3]
 800b046:	4da0      	ldr	r5, [pc, #640]	; (800b2c8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b048:	402c      	ands	r4, r5
 800b04a:	50d4      	str	r4, [r2, r3]
 800b04c:	58d5      	ldr	r5, [r2, r3]
 800b04e:	24c0      	movs	r4, #192	; 0xc0
 800b050:	0424      	lsls	r4, r4, #16
 800b052:	432c      	orrs	r4, r5
 800b054:	50d4      	str	r4, [r2, r3]
 800b056:	e659      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b058:	4a97      	ldr	r2, [pc, #604]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b05a:	23a8      	movs	r3, #168	; 0xa8
 800b05c:	58d4      	ldr	r4, [r2, r3]
 800b05e:	25f0      	movs	r5, #240	; 0xf0
 800b060:	43ac      	bics	r4, r5
 800b062:	50d4      	str	r4, [r2, r3]
 800b064:	58d4      	ldr	r4, [r2, r3]
 800b066:	3d30      	subs	r5, #48	; 0x30
 800b068:	432c      	orrs	r4, r5
 800b06a:	50d4      	str	r4, [r2, r3]
 800b06c:	e64e      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b06e:	4a97      	ldr	r2, [pc, #604]	; (800b2cc <RemapAndLinkDMAtoUARTRx+0x650>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d159      	bne.n	800b128 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800b074:	680b      	ldr	r3, [r1, #0]
 800b076:	4a8a      	ldr	r2, [pc, #552]	; (800b2a0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d01b      	beq.n	800b0b4 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b07c:	4a89      	ldr	r2, [pc, #548]	; (800b2a4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d023      	beq.n	800b0ca <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b082:	4a89      	ldr	r2, [pc, #548]	; (800b2a8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d02c      	beq.n	800b0e2 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b088:	4a88      	ldr	r2, [pc, #544]	; (800b2ac <RemapAndLinkDMAtoUARTRx+0x630>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d035      	beq.n	800b0fa <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b08e:	4a88      	ldr	r2, [pc, #544]	; (800b2b0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d03e      	beq.n	800b112 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b094:	4a87      	ldr	r2, [pc, #540]	; (800b2b4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d000      	beq.n	800b09c <RemapAndLinkDMAtoUARTRx+0x420>
 800b09a:	e637      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b09c:	4a86      	ldr	r2, [pc, #536]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b09e:	23a8      	movs	r3, #168	; 0xa8
 800b0a0:	58d4      	ldr	r4, [r2, r3]
 800b0a2:	4d86      	ldr	r5, [pc, #536]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b0a4:	402c      	ands	r4, r5
 800b0a6:	50d4      	str	r4, [r2, r3]
 800b0a8:	58d5      	ldr	r5, [r2, r3]
 800b0aa:	24d0      	movs	r4, #208	; 0xd0
 800b0ac:	0124      	lsls	r4, r4, #4
 800b0ae:	432c      	orrs	r4, r5
 800b0b0:	50d4      	str	r4, [r2, r3]
 800b0b2:	e62b      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b0b4:	4a82      	ldr	r2, [pc, #520]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b0b6:	23a8      	movs	r3, #168	; 0xa8
 800b0b8:	58d4      	ldr	r4, [r2, r3]
 800b0ba:	250f      	movs	r5, #15
 800b0bc:	43ac      	bics	r4, r5
 800b0be:	50d4      	str	r4, [r2, r3]
 800b0c0:	58d4      	ldr	r4, [r2, r3]
 800b0c2:	3d02      	subs	r5, #2
 800b0c4:	432c      	orrs	r4, r5
 800b0c6:	50d4      	str	r4, [r2, r3]
 800b0c8:	e620      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b0ca:	4a7d      	ldr	r2, [pc, #500]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b0cc:	23a8      	movs	r3, #168	; 0xa8
 800b0ce:	58d4      	ldr	r4, [r2, r3]
 800b0d0:	4d7a      	ldr	r5, [pc, #488]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b0d2:	402c      	ands	r4, r5
 800b0d4:	50d4      	str	r4, [r2, r3]
 800b0d6:	58d5      	ldr	r5, [r2, r3]
 800b0d8:	24d0      	movs	r4, #208	; 0xd0
 800b0da:	0124      	lsls	r4, r4, #4
 800b0dc:	432c      	orrs	r4, r5
 800b0de:	50d4      	str	r4, [r2, r3]
 800b0e0:	e614      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b0e2:	4a77      	ldr	r2, [pc, #476]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b0e4:	23a8      	movs	r3, #168	; 0xa8
 800b0e6:	58d4      	ldr	r4, [r2, r3]
 800b0e8:	4d76      	ldr	r5, [pc, #472]	; (800b2c4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b0ea:	402c      	ands	r4, r5
 800b0ec:	50d4      	str	r4, [r2, r3]
 800b0ee:	58d5      	ldr	r5, [r2, r3]
 800b0f0:	24d0      	movs	r4, #208	; 0xd0
 800b0f2:	0324      	lsls	r4, r4, #12
 800b0f4:	432c      	orrs	r4, r5
 800b0f6:	50d4      	str	r4, [r2, r3]
 800b0f8:	e608      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b0fa:	4a71      	ldr	r2, [pc, #452]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b0fc:	23a8      	movs	r3, #168	; 0xa8
 800b0fe:	58d4      	ldr	r4, [r2, r3]
 800b100:	4d71      	ldr	r5, [pc, #452]	; (800b2c8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b102:	402c      	ands	r4, r5
 800b104:	50d4      	str	r4, [r2, r3]
 800b106:	58d5      	ldr	r5, [r2, r3]
 800b108:	24d0      	movs	r4, #208	; 0xd0
 800b10a:	0424      	lsls	r4, r4, #16
 800b10c:	432c      	orrs	r4, r5
 800b10e:	50d4      	str	r4, [r2, r3]
 800b110:	e5fc      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b112:	4a69      	ldr	r2, [pc, #420]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b114:	23a8      	movs	r3, #168	; 0xa8
 800b116:	58d4      	ldr	r4, [r2, r3]
 800b118:	25f0      	movs	r5, #240	; 0xf0
 800b11a:	43ac      	bics	r4, r5
 800b11c:	50d4      	str	r4, [r2, r3]
 800b11e:	58d4      	ldr	r4, [r2, r3]
 800b120:	3d20      	subs	r5, #32
 800b122:	432c      	orrs	r4, r5
 800b124:	50d4      	str	r4, [r2, r3]
 800b126:	e5f1      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b128:	4a69      	ldr	r2, [pc, #420]	; (800b2d0 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d159      	bne.n	800b1e2 <RemapAndLinkDMAtoUARTRx+0x566>
 800b12e:	680b      	ldr	r3, [r1, #0]
 800b130:	4a5b      	ldr	r2, [pc, #364]	; (800b2a0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d01b      	beq.n	800b16e <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b136:	4a5b      	ldr	r2, [pc, #364]	; (800b2a4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d023      	beq.n	800b184 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b13c:	4a5a      	ldr	r2, [pc, #360]	; (800b2a8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d02c      	beq.n	800b19c <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b142:	4a5a      	ldr	r2, [pc, #360]	; (800b2ac <RemapAndLinkDMAtoUARTRx+0x630>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d035      	beq.n	800b1b4 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b148:	4a59      	ldr	r2, [pc, #356]	; (800b2b0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d03e      	beq.n	800b1cc <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b14e:	4a59      	ldr	r2, [pc, #356]	; (800b2b4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d000      	beq.n	800b156 <RemapAndLinkDMAtoUARTRx+0x4da>
 800b154:	e5da      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b156:	4a58      	ldr	r2, [pc, #352]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b158:	23a8      	movs	r3, #168	; 0xa8
 800b15a:	58d4      	ldr	r4, [r2, r3]
 800b15c:	4d57      	ldr	r5, [pc, #348]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b15e:	402c      	ands	r4, r5
 800b160:	50d4      	str	r4, [r2, r3]
 800b162:	58d5      	ldr	r5, [r2, r3]
 800b164:	24e0      	movs	r4, #224	; 0xe0
 800b166:	0124      	lsls	r4, r4, #4
 800b168:	432c      	orrs	r4, r5
 800b16a:	50d4      	str	r4, [r2, r3]
 800b16c:	e5ce      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b16e:	4a54      	ldr	r2, [pc, #336]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b170:	23a8      	movs	r3, #168	; 0xa8
 800b172:	58d4      	ldr	r4, [r2, r3]
 800b174:	250f      	movs	r5, #15
 800b176:	43ac      	bics	r4, r5
 800b178:	50d4      	str	r4, [r2, r3]
 800b17a:	58d4      	ldr	r4, [r2, r3]
 800b17c:	3d01      	subs	r5, #1
 800b17e:	432c      	orrs	r4, r5
 800b180:	50d4      	str	r4, [r2, r3]
 800b182:	e5c3      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b184:	4a4e      	ldr	r2, [pc, #312]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b186:	23a8      	movs	r3, #168	; 0xa8
 800b188:	58d4      	ldr	r4, [r2, r3]
 800b18a:	4d4c      	ldr	r5, [pc, #304]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b18c:	402c      	ands	r4, r5
 800b18e:	50d4      	str	r4, [r2, r3]
 800b190:	58d5      	ldr	r5, [r2, r3]
 800b192:	24e0      	movs	r4, #224	; 0xe0
 800b194:	0124      	lsls	r4, r4, #4
 800b196:	432c      	orrs	r4, r5
 800b198:	50d4      	str	r4, [r2, r3]
 800b19a:	e5b7      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b19c:	4a48      	ldr	r2, [pc, #288]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b19e:	23a8      	movs	r3, #168	; 0xa8
 800b1a0:	58d4      	ldr	r4, [r2, r3]
 800b1a2:	4d48      	ldr	r5, [pc, #288]	; (800b2c4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b1a4:	402c      	ands	r4, r5
 800b1a6:	50d4      	str	r4, [r2, r3]
 800b1a8:	58d5      	ldr	r5, [r2, r3]
 800b1aa:	24e0      	movs	r4, #224	; 0xe0
 800b1ac:	0324      	lsls	r4, r4, #12
 800b1ae:	432c      	orrs	r4, r5
 800b1b0:	50d4      	str	r4, [r2, r3]
 800b1b2:	e5ab      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b1b4:	4a42      	ldr	r2, [pc, #264]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b1b6:	23a8      	movs	r3, #168	; 0xa8
 800b1b8:	58d4      	ldr	r4, [r2, r3]
 800b1ba:	4d43      	ldr	r5, [pc, #268]	; (800b2c8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b1bc:	402c      	ands	r4, r5
 800b1be:	50d4      	str	r4, [r2, r3]
 800b1c0:	58d5      	ldr	r5, [r2, r3]
 800b1c2:	24e0      	movs	r4, #224	; 0xe0
 800b1c4:	0424      	lsls	r4, r4, #16
 800b1c6:	432c      	orrs	r4, r5
 800b1c8:	50d4      	str	r4, [r2, r3]
 800b1ca:	e59f      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b1cc:	4a3a      	ldr	r2, [pc, #232]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b1ce:	23a8      	movs	r3, #168	; 0xa8
 800b1d0:	58d4      	ldr	r4, [r2, r3]
 800b1d2:	25f0      	movs	r5, #240	; 0xf0
 800b1d4:	43ac      	bics	r4, r5
 800b1d6:	50d4      	str	r4, [r2, r3]
 800b1d8:	58d4      	ldr	r4, [r2, r3]
 800b1da:	3d10      	subs	r5, #16
 800b1dc:	432c      	orrs	r4, r5
 800b1de:	50d4      	str	r4, [r2, r3]
 800b1e0:	e594      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b1e2:	4a3c      	ldr	r2, [pc, #240]	; (800b2d4 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d000      	beq.n	800b1ea <RemapAndLinkDMAtoUARTRx+0x56e>
 800b1e8:	e590      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
 800b1ea:	680b      	ldr	r3, [r1, #0]
 800b1ec:	4a2c      	ldr	r2, [pc, #176]	; (800b2a0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01b      	beq.n	800b22a <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b1f2:	4a2c      	ldr	r2, [pc, #176]	; (800b2a4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d022      	beq.n	800b23e <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b1f8:	4a2b      	ldr	r2, [pc, #172]	; (800b2a8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d02b      	beq.n	800b256 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b1fe:	4a2b      	ldr	r2, [pc, #172]	; (800b2ac <RemapAndLinkDMAtoUARTRx+0x630>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d034      	beq.n	800b26e <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b204:	4a2a      	ldr	r2, [pc, #168]	; (800b2b0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d03d      	beq.n	800b286 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b20a:	4a2a      	ldr	r2, [pc, #168]	; (800b2b4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d000      	beq.n	800b212 <RemapAndLinkDMAtoUARTRx+0x596>
 800b210:	e57c      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b212:	4a29      	ldr	r2, [pc, #164]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b214:	23a8      	movs	r3, #168	; 0xa8
 800b216:	58d4      	ldr	r4, [r2, r3]
 800b218:	4d28      	ldr	r5, [pc, #160]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b21a:	402c      	ands	r4, r5
 800b21c:	50d4      	str	r4, [r2, r3]
 800b21e:	58d5      	ldr	r5, [r2, r3]
 800b220:	24f0      	movs	r4, #240	; 0xf0
 800b222:	0124      	lsls	r4, r4, #4
 800b224:	432c      	orrs	r4, r5
 800b226:	50d4      	str	r4, [r2, r3]
 800b228:	e570      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b22a:	4a25      	ldr	r2, [pc, #148]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b22c:	23a8      	movs	r3, #168	; 0xa8
 800b22e:	58d5      	ldr	r5, [r2, r3]
 800b230:	260f      	movs	r6, #15
 800b232:	43b5      	bics	r5, r6
 800b234:	50d5      	str	r5, [r2, r3]
 800b236:	58d4      	ldr	r4, [r2, r3]
 800b238:	4334      	orrs	r4, r6
 800b23a:	50d4      	str	r4, [r2, r3]
 800b23c:	e566      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b23e:	4a20      	ldr	r2, [pc, #128]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b240:	23a8      	movs	r3, #168	; 0xa8
 800b242:	58d4      	ldr	r4, [r2, r3]
 800b244:	4d1d      	ldr	r5, [pc, #116]	; (800b2bc <RemapAndLinkDMAtoUARTRx+0x640>)
 800b246:	402c      	ands	r4, r5
 800b248:	50d4      	str	r4, [r2, r3]
 800b24a:	58d5      	ldr	r5, [r2, r3]
 800b24c:	24f0      	movs	r4, #240	; 0xf0
 800b24e:	0124      	lsls	r4, r4, #4
 800b250:	432c      	orrs	r4, r5
 800b252:	50d4      	str	r4, [r2, r3]
 800b254:	e55a      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b256:	4a1a      	ldr	r2, [pc, #104]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b258:	23a8      	movs	r3, #168	; 0xa8
 800b25a:	58d4      	ldr	r4, [r2, r3]
 800b25c:	4d19      	ldr	r5, [pc, #100]	; (800b2c4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b25e:	402c      	ands	r4, r5
 800b260:	50d4      	str	r4, [r2, r3]
 800b262:	58d5      	ldr	r5, [r2, r3]
 800b264:	24f0      	movs	r4, #240	; 0xf0
 800b266:	0324      	lsls	r4, r4, #12
 800b268:	432c      	orrs	r4, r5
 800b26a:	50d4      	str	r4, [r2, r3]
 800b26c:	e54e      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b26e:	4a14      	ldr	r2, [pc, #80]	; (800b2c0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b270:	23a8      	movs	r3, #168	; 0xa8
 800b272:	58d4      	ldr	r4, [r2, r3]
 800b274:	4d14      	ldr	r5, [pc, #80]	; (800b2c8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b276:	402c      	ands	r4, r5
 800b278:	50d4      	str	r4, [r2, r3]
 800b27a:	58d5      	ldr	r5, [r2, r3]
 800b27c:	24f0      	movs	r4, #240	; 0xf0
 800b27e:	0424      	lsls	r4, r4, #16
 800b280:	432c      	orrs	r4, r5
 800b282:	50d4      	str	r4, [r2, r3]
 800b284:	e542      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b286:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b288:	23a8      	movs	r3, #168	; 0xa8
 800b28a:	58d5      	ldr	r5, [r2, r3]
 800b28c:	26f0      	movs	r6, #240	; 0xf0
 800b28e:	43b5      	bics	r5, r6
 800b290:	50d5      	str	r5, [r2, r3]
 800b292:	58d4      	ldr	r4, [r2, r3]
 800b294:	4334      	orrs	r4, r6
 800b296:	50d4      	str	r4, [r2, r3]
 800b298:	e538      	b.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x90>
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	40005000 	.word	0x40005000
 800b2a0:	40020008 	.word	0x40020008
 800b2a4:	40020030 	.word	0x40020030
 800b2a8:	40020058 	.word	0x40020058
 800b2ac:	4002006c 	.word	0x4002006c
 800b2b0:	4002041c 	.word	0x4002041c
 800b2b4:	40020430 	.word	0x40020430
 800b2b8:	40020400 	.word	0x40020400
 800b2bc:	fffff0ff 	.word	0xfffff0ff
 800b2c0:	40020000 	.word	0x40020000
 800b2c4:	fff0ffff 	.word	0xfff0ffff
 800b2c8:	ff0fffff 	.word	0xff0fffff
 800b2cc:	40011400 	.word	0x40011400
 800b2d0:	40011800 	.word	0x40011800
 800b2d4:	40011c00 	.word	0x40011c00

0800b2d8 <DMA_MSG_RX_Setup>:
{	
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	0004      	movs	r4, r0
 800b2dc:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b2de:	f7ff fccd 	bl	800ac7c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	0028      	movs	r0, r5
 800b2e6:	f7ff fc13 	bl	800ab10 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b2ea:	0020      	movs	r0, r4
 800b2ec:	f7fe fe0c 	bl	8009f08 <GetPort>
 800b2f0:	1e41      	subs	r1, r0, #1
 800b2f2:	4803      	ldr	r0, [pc, #12]	; (800b300 <DMA_MSG_RX_Setup+0x28>)
 800b2f4:	1809      	adds	r1, r1, r0
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	0020      	movs	r0, r4
 800b2fa:	f007 f849 	bl	8012390 <HAL_UART_Receive_DMA>
}
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	20000da4 	.word	0x20000da4

0800b304 <SetupMessagingRxDMAs>:
{	
 800b304:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b306:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <SetupMessagingRxDMAs+0x3c>)
 800b308:	785b      	ldrb	r3, [r3, #1]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d008      	beq.n	800b320 <SetupMessagingRxDMAs+0x1c>
	if (portStatus[P2] == FREE)	
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <SetupMessagingRxDMAs+0x3c>)
 800b310:	789b      	ldrb	r3, [r3, #2]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <SetupMessagingRxDMAs+0x26>
	if (portStatus[P3] == FREE)
 800b316:	4b0a      	ldr	r3, [pc, #40]	; (800b340 <SetupMessagingRxDMAs+0x3c>)
 800b318:	78db      	ldrb	r3, [r3, #3]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <SetupMessagingRxDMAs+0x30>
}
 800b31e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b320:	4908      	ldr	r1, [pc, #32]	; (800b344 <SetupMessagingRxDMAs+0x40>)
 800b322:	4809      	ldr	r0, [pc, #36]	; (800b348 <SetupMessagingRxDMAs+0x44>)
 800b324:	f7ff ffd8 	bl	800b2d8 <DMA_MSG_RX_Setup>
 800b328:	e7f1      	b.n	800b30e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b32a:	4908      	ldr	r1, [pc, #32]	; (800b34c <SetupMessagingRxDMAs+0x48>)
 800b32c:	4808      	ldr	r0, [pc, #32]	; (800b350 <SetupMessagingRxDMAs+0x4c>)
 800b32e:	f7ff ffd3 	bl	800b2d8 <DMA_MSG_RX_Setup>
 800b332:	e7f0      	b.n	800b316 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b334:	4907      	ldr	r1, [pc, #28]	; (800b354 <SetupMessagingRxDMAs+0x50>)
 800b336:	4808      	ldr	r0, [pc, #32]	; (800b358 <SetupMessagingRxDMAs+0x54>)
 800b338:	f7ff ffce 	bl	800b2d8 <DMA_MSG_RX_Setup>
}
 800b33c:	e7ef      	b.n	800b31e <SetupMessagingRxDMAs+0x1a>
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	20000bd0 	.word	0x20000bd0
 800b344:	2000134c 	.word	0x2000134c
 800b348:	20005e24 	.word	0x20005e24
 800b34c:	20001384 	.word	0x20001384
 800b350:	20005d38 	.word	0x20005d38
 800b354:	200013bc 	.word	0x200013bc
 800b358:	20005c04 	.word	0x20005c04

0800b35c <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35e:	b083      	sub	sp, #12
 800b360:	0004      	movs	r4, r0
	StopStreamDMA(port);
 800b362:	f7ff fb95 	bl	800aa90 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b366:	9401      	str	r4, [sp, #4]
 800b368:	3c01      	subs	r4, #1
 800b36a:	00e7      	lsls	r7, r4, #3
 800b36c:	1b3d      	subs	r5, r7, r4
 800b36e:	00ed      	lsls	r5, r5, #3
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <SwitchStreamDMAToMsg+0x54>)
 800b372:	18ed      	adds	r5, r5, r3
 800b374:	4e0f      	ldr	r6, [pc, #60]	; (800b3b4 <SwitchStreamDMAToMsg+0x58>)
 800b376:	1b3b      	subs	r3, r7, r4
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	5999      	ldr	r1, [r3, r6]
 800b37c:	0028      	movs	r0, r5
 800b37e:	f7ff fb0f 	bl	800a9a0 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b382:	1b3b      	subs	r3, r7, r4
 800b384:	00db      	lsls	r3, r3, #3
 800b386:	18f3      	adds	r3, r6, r3
 800b388:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b38a:	f7fe fdbd 	bl	8009f08 <GetPort>
 800b38e:	2300      	movs	r3, #0
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <SwitchStreamDMAToMsg+0x5c>)
 800b392:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800b394:	1b3f      	subs	r7, r7, r4
 800b396:	00ff      	lsls	r7, r7, #3
 800b398:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] = 0;
 800b39a:	00a4      	lsls	r4, r4, #2
 800b39c:	4a07      	ldr	r2, [pc, #28]	; (800b3bc <SwitchStreamDMAToMsg+0x60>)
 800b39e:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b3a0:	9801      	ldr	r0, [sp, #4]
 800b3a2:	f002 fa03 	bl	800d7ac <GetUart>
 800b3a6:	0029      	movs	r1, r5
 800b3a8:	f7ff ff96 	bl	800b2d8 <DMA_MSG_RX_Setup>
}
 800b3ac:	b003      	add	sp, #12
 800b3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b0:	2000134c 	.word	0x2000134c
 800b3b4:	20001544 	.word	0x20001544
 800b3b8:	20000bd0 	.word	0x20000bd0
 800b3bc:	20001030 	.word	0x20001030

0800b3c0 <DMA_STREAM_Setup>:
{	
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	0005      	movs	r5, r0
 800b3c4:	000f      	movs	r7, r1
 800b3c6:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b3c8:	f7fe fd9e 	bl	8009f08 <GetPort>
	hDMA = &streamDMA[port-1];
 800b3cc:	3801      	subs	r0, #1
 800b3ce:	00c4      	lsls	r4, r0, #3
 800b3d0:	1a24      	subs	r4, r4, r0
 800b3d2:	00e4      	lsls	r4, r4, #3
 800b3d4:	4809      	ldr	r0, [pc, #36]	; (800b3fc <DMA_STREAM_Setup+0x3c>)
 800b3d6:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b3d8:	0021      	movs	r1, r4
 800b3da:	0028      	movs	r0, r5
 800b3dc:	f7ff fc4e 	bl	800ac7c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	0020      	movs	r0, r4
 800b3e4:	f7ff fb94 	bl	800ab10 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b3e8:	2369      	movs	r3, #105	; 0x69
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	3128      	adds	r1, #40	; 0x28
 800b3f2:	0032      	movs	r2, r6
 800b3f4:	0028      	movs	r0, r5
 800b3f6:	f006 ffcb 	bl	8012390 <HAL_UART_Receive_DMA>
}
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	20001544 	.word	0x20001544

0800b400 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b400:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b402:	4807      	ldr	r0, [pc, #28]	; (800b420 <CRC_Init+0x20>)
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <CRC_Init+0x24>)
 800b406:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b408:	2310      	movs	r3, #16
 800b40a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b40c:	2300      	movs	r3, #0
 800b40e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b410:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b412:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b414:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b416:	3303      	adds	r3, #3
 800b418:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b41a:	f004 fe9f 	bl	801015c <HAL_CRC_Init>
}
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	20005ea0 	.word	0x20005ea0
 800b424:	40023000 	.word	0x40023000

0800b428 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b428:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b42a:	4a05      	ldr	r2, [pc, #20]	; (800b440 <HAL_CRC_MspInit+0x18>)
 800b42c:	6951      	ldr	r1, [r2, #20]
 800b42e:	2340      	movs	r3, #64	; 0x40
 800b430:	4319      	orrs	r1, r3
 800b432:	6151      	str	r1, [r2, #20]
 800b434:	6952      	ldr	r2, [r2, #20]
 800b436:	4013      	ands	r3, r2
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	9b01      	ldr	r3, [sp, #4]
}
 800b43c:	b002      	add	sp, #8
 800b43e:	4770      	bx	lr
 800b440:	40021000 	.word	0x40021000

0800b444 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b444:	b530      	push	{r4, r5, lr}
 800b446:	b083      	sub	sp, #12
 800b448:	0005      	movs	r5, r0
 800b44a:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b44c:	2300      	movs	r3, #0
 800b44e:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b450:	2800      	cmp	r0, #0
 800b452:	d045      	beq.n	800b4e0 <CalculateCRC8+0x9c>

	return pTemp;
  }
  
else
	return 0;
 800b454:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800b456:	2900      	cmp	r1, #0
 800b458:	d043      	beq.n	800b4e2 <CalculateCRC8+0x9e>
	if(size < 4)
 800b45a:	2903      	cmp	r1, #3
 800b45c:	d817      	bhi.n	800b48e <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800b45e:	782a      	ldrb	r2, [r5, #0]
 800b460:	ab01      	add	r3, sp, #4
 800b462:	701a      	strb	r2, [r3, #0]
			if(--size == 0) break;
 800b464:	2901      	cmp	r1, #1
 800b466:	d00b      	beq.n	800b480 <CalculateCRC8+0x3c>
 800b468:	3c02      	subs	r4, #2
 800b46a:	b2a4      	uxth	r4, r4
 800b46c:	3401      	adds	r4, #1
		for(int i=0; i<4; i++)
 800b46e:	2301      	movs	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b470:	a901      	add	r1, sp, #4
 800b472:	5cea      	ldrb	r2, [r5, r3]
 800b474:	545a      	strb	r2, [r3, r1]
			if(--size == 0) break;
 800b476:	42a3      	cmp	r3, r4
 800b478:	d002      	beq.n	800b480 <CalculateCRC8+0x3c>
		for(int i=0; i<4; i++)
 800b47a:	3301      	adds	r3, #1
 800b47c:	2b04      	cmp	r3, #4
 800b47e:	d1f8      	bne.n	800b472 <CalculateCRC8+0x2e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b480:	2201      	movs	r2, #1
 800b482:	a901      	add	r1, sp, #4
 800b484:	4818      	ldr	r0, [pc, #96]	; (800b4e8 <CalculateCRC8+0xa4>)
 800b486:	f004 fec6 	bl	8010216 <HAL_CRC_Calculate>
 800b48a:	b2c0      	uxtb	r0, r0
 800b48c:	e029      	b.n	800b4e2 <CalculateCRC8+0x9e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b48e:	088a      	lsrs	r2, r1, #2
 800b490:	0029      	movs	r1, r5
 800b492:	4815      	ldr	r0, [pc, #84]	; (800b4e8 <CalculateCRC8+0xa4>)
 800b494:	f004 febf 	bl	8010216 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b498:	2303      	movs	r3, #3
 800b49a:	4023      	ands	r3, r4
 800b49c:	d01e      	beq.n	800b4dc <CalculateCRC8+0x98>
			temp_index = size - (size%4);
 800b49e:	22fc      	movs	r2, #252	; 0xfc
 800b4a0:	4014      	ands	r4, r2
				temp_buffer[i] = pBuffer[temp_index++];
 800b4a2:	1c61      	adds	r1, r4, #1
 800b4a4:	b2c9      	uxtb	r1, r1
 800b4a6:	5d28      	ldrb	r0, [r5, r4]
 800b4a8:	aa01      	add	r2, sp, #4
 800b4aa:	7010      	strb	r0, [r2, #0]
				if(--size == 0) break;
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d00e      	beq.n	800b4ce <CalculateCRC8+0x8a>
 800b4b0:	3b02      	subs	r3, #2
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3301      	adds	r3, #1
			for(int i=0; i<4; i++)
 800b4b6:	2201      	movs	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b4b8:	ac01      	add	r4, sp, #4
 800b4ba:	1c48      	adds	r0, r1, #1
 800b4bc:	b2c0      	uxtb	r0, r0
 800b4be:	5c69      	ldrb	r1, [r5, r1]
 800b4c0:	5511      	strb	r1, [r2, r4]
				if(--size == 0) break;
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d003      	beq.n	800b4ce <CalculateCRC8+0x8a>
			for(int i=0; i<4; i++)
 800b4c6:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b4c8:	0001      	movs	r1, r0
			for(int i=0; i<4; i++)
 800b4ca:	2a04      	cmp	r2, #4
 800b4cc:	d1f5      	bne.n	800b4ba <CalculateCRC8+0x76>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	a901      	add	r1, sp, #4
 800b4d2:	4805      	ldr	r0, [pc, #20]	; (800b4e8 <CalculateCRC8+0xa4>)
 800b4d4:	f004 fe73 	bl	80101be <HAL_CRC_Accumulate>
 800b4d8:	b2c0      	uxtb	r0, r0
 800b4da:	e002      	b.n	800b4e2 <CalculateCRC8+0x9e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b4dc:	b2c0      	uxtb	r0, r0
 800b4de:	e000      	b.n	800b4e2 <CalculateCRC8+0x9e>
	return 0;
 800b4e0:	2000      	movs	r0, #0
}
 800b4e2:	b003      	add	sp, #12
 800b4e4:	bd30      	pop	{r4, r5, pc}
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	20005ea0 	.word	0x20005ea0

0800b4ec <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	0006      	movs	r6, r0
 800b4f0:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b4f2:	f005 fbff 	bl	8010cf4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4f6:	4b2b      	ldr	r3, [pc, #172]	; (800b5a4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800b4f8:	881a      	ldrh	r2, [r3, #0]
 800b4fa:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b4fc:	4b2a      	ldr	r3, [pc, #168]	; (800b5a8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800b502:	2b00      	cmp	r3, #0
 800b504:	d104      	bne.n	800b510 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800b506:	4929      	ldr	r1, [pc, #164]	; (800b5ac <EE_VerifyPageFullWriteVariable+0xc0>)
 800b508:	428a      	cmp	r2, r1
 800b50a:	d007      	beq.n	800b51c <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800b50c:	3302      	adds	r3, #2
 800b50e:	e005      	b.n	800b51c <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800b510:	2a00      	cmp	r2, #0
 800b512:	d143      	bne.n	800b59c <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 800b514:	4925      	ldr	r1, [pc, #148]	; (800b5ac <EE_VerifyPageFullWriteVariable+0xc0>)
 800b516:	428b      	cmp	r3, r1
 800b518:	d042      	beq.n	800b5a0 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800b51a:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b51c:	4a24      	ldr	r2, [pc, #144]	; (800b5b0 <EE_VerifyPageFullWriteVariable+0xc4>)
 800b51e:	189c      	adds	r4, r3, r2
 800b520:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b522:	02db      	lsls	r3, r3, #11
 800b524:	4a23      	ldr	r2, [pc, #140]	; (800b5b4 <EE_VerifyPageFullWriteVariable+0xc8>)
 800b526:	4694      	mov	ip, r2
 800b528:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	3201      	adds	r2, #1
 800b52e:	d005      	beq.n	800b53c <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b530:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b532:	429c      	cmp	r4, r3
 800b534:	d22e      	bcs.n	800b594 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	3201      	adds	r2, #1
 800b53a:	d1f9      	bne.n	800b530 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b53c:	002a      	movs	r2, r5
 800b53e:	2300      	movs	r3, #0
 800b540:	0021      	movs	r1, r4
 800b542:	2001      	movs	r0, #1
 800b544:	f005 fc20 	bl	8010d88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b548:	481b      	ldr	r0, [pc, #108]	; (800b5b8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800b54a:	f005 fbef 	bl	8010d2c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b54e:	2800      	cmp	r0, #0
 800b550:	d003      	beq.n	800b55a <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800b552:	4b1a      	ldr	r3, [pc, #104]	; (800b5bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800b554:	69d8      	ldr	r0, [r3, #28]
 800b556:	b280      	uxth	r0, r0
 800b558:	e01f      	b.n	800b59a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b55a:	4a19      	ldr	r2, [pc, #100]	; (800b5c0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800b55c:	6913      	ldr	r3, [r2, #16]
 800b55e:	2101      	movs	r1, #1
 800b560:	438b      	bics	r3, r1
 800b562:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b564:	1ca1      	adds	r1, r4, #2
 800b566:	0032      	movs	r2, r6
 800b568:	2300      	movs	r3, #0
 800b56a:	2001      	movs	r0, #1
 800b56c:	f005 fc0c 	bl	8010d88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b570:	4811      	ldr	r0, [pc, #68]	; (800b5b8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800b572:	f005 fbdb 	bl	8010d2c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b576:	2800      	cmp	r0, #0
 800b578:	d003      	beq.n	800b582 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800b57c:	69d8      	ldr	r0, [r3, #28]
 800b57e:	b280      	uxth	r0, r0
 800b580:	e00b      	b.n	800b59a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b582:	4a0f      	ldr	r2, [pc, #60]	; (800b5c0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800b584:	6913      	ldr	r3, [r2, #16]
 800b586:	2101      	movs	r1, #1
 800b588:	438b      	bics	r3, r1
 800b58a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800b58c:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800b58e:	69d8      	ldr	r0, [r3, #28]
 800b590:	b280      	uxth	r0, r0
 800b592:	e002      	b.n	800b59a <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 800b594:	f005 fbc0 	bl	8010d18 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b598:	2080      	movs	r0, #128	; 0x80
}
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 800b59c:	20ab      	movs	r0, #171	; 0xab
 800b59e:	e7fc      	b.n	800b59a <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e7bb      	b.n	800b51c <EE_VerifyPageFullWriteVariable+0x30>
 800b5a4:	0801e000 	.word	0x0801e000
 800b5a8:	0801f000 	.word	0x0801f000
 800b5ac:	0000eeee 	.word	0x0000eeee
 800b5b0:	0001003c 	.word	0x0001003c
 800b5b4:	0801effe 	.word	0x0801effe
 800b5b8:	0000c350 	.word	0x0000c350
 800b5bc:	20006020 	.word	0x20006020
 800b5c0:	40022000 	.word	0x40022000

0800b5c4 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b5c4:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b5c6:	4b13      	ldr	r3, [pc, #76]	; (800b614 <EE_ReadVariable+0x50>)
 800b5c8:	881c      	ldrh	r4, [r3, #0]
 800b5ca:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b5cc:	4b12      	ldr	r3, [pc, #72]	; (800b618 <EE_ReadVariable+0x54>)
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b5d2:	2c00      	cmp	r4, #0
 800b5d4:	d006      	beq.n	800b5e4 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 800b5da:	20ab      	movs	r0, #171	; 0xab
 800b5dc:	e019      	b.n	800b612 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b5de:	2001      	movs	r0, #1
 800b5e0:	e017      	b.n	800b612 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800b5e2:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b5e4:	02e3      	lsls	r3, r4, #11
 800b5e6:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <EE_ReadVariable+0x58>)
 800b5e8:	4694      	mov	ip, r2
 800b5ea:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b5ec:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 800b5ee:	4a0c      	ldr	r2, [pc, #48]	; (800b620 <EE_ReadVariable+0x5c>)
 800b5f0:	4694      	mov	ip, r2
 800b5f2:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800b5f4:	881a      	ldrh	r2, [r3, #0]
 800b5f6:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800b5f8:	4290      	cmp	r0, r2
 800b5fa:	d006      	beq.n	800b60a <EE_ReadVariable+0x46>
			Address =Address - 4;
 800b5fc:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	d9ed      	bls.n	800b5de <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 800b602:	881a      	ldrh	r2, [r3, #0]
 800b604:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800b606:	4282      	cmp	r2, r0
 800b608:	d1f8      	bne.n	800b5fc <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b60a:	3b02      	subs	r3, #2
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 800b610:	2000      	movs	r0, #0
}
 800b612:	bd10      	pop	{r4, pc}
 800b614:	0801e000 	.word	0x0801e000
 800b618:	0801f000 	.word	0x0801f000
 800b61c:	0801effe 	.word	0x0801effe
 800b620:	0801e002 	.word	0x0801e002

0800b624 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b626:	46de      	mov	lr, fp
 800b628:	4647      	mov	r7, r8
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b083      	sub	sp, #12
 800b62e:	0005      	movs	r5, r0
 800b630:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800b632:	f005 fb5f 	bl	8010cf4 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b636:	0031      	movs	r1, r6
 800b638:	0028      	movs	r0, r5
 800b63a:	f7ff ff57 	bl	800b4ec <EE_VerifyPageFullWriteVariable>
 800b63e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800b640:	2880      	cmp	r0, #128	; 0x80
 800b642:	d007      	beq.n	800b654 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800b644:	f005 fb68 	bl	8010d18 <HAL_FLASH_Lock>
}
 800b648:	0020      	movs	r0, r4
 800b64a:	b003      	add	sp, #12
 800b64c:	bc0c      	pop	{r2, r3}
 800b64e:	4690      	mov	r8, r2
 800b650:	469b      	mov	fp, r3
 800b652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b654:	f005 fb4e 	bl	8010cf4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b658:	4b3e      	ldr	r3, [pc, #248]	; (800b754 <EE_WriteVariable+0x130>)
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b65e:	4a3e      	ldr	r2, [pc, #248]	; (800b758 <EE_WriteVariable+0x134>)
 800b660:	8812      	ldrh	r2, [r2, #0]
 800b662:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800b668:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	d1ea      	bne.n	800b644 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b66e:	4b3a      	ldr	r3, [pc, #232]	; (800b758 <EE_WriteVariable+0x134>)
 800b670:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b672:	4b38      	ldr	r3, [pc, #224]	; (800b754 <EE_WriteVariable+0x130>)
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	e003      	b.n	800b680 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b678:	4b36      	ldr	r3, [pc, #216]	; (800b754 <EE_WriteVariable+0x130>)
 800b67a:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <EE_WriteVariable+0x134>)
 800b67e:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b680:	4a36      	ldr	r2, [pc, #216]	; (800b75c <EE_WriteVariable+0x138>)
 800b682:	2300      	movs	r3, #0
 800b684:	9901      	ldr	r1, [sp, #4]
 800b686:	2001      	movs	r0, #1
 800b688:	f005 fb7e 	bl	8010d88 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b68c:	4834      	ldr	r0, [pc, #208]	; (800b760 <EE_WriteVariable+0x13c>)
 800b68e:	f005 fb4d 	bl	8010d2c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b692:	2800      	cmp	r0, #0
 800b694:	d003      	beq.n	800b69e <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 800b696:	4b33      	ldr	r3, [pc, #204]	; (800b764 <EE_WriteVariable+0x140>)
 800b698:	69dc      	ldr	r4, [r3, #28]
 800b69a:	b2a4      	uxth	r4, r4
 800b69c:	e7d2      	b.n	800b644 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b69e:	4a32      	ldr	r2, [pc, #200]	; (800b768 <EE_WriteVariable+0x144>)
 800b6a0:	6913      	ldr	r3, [r2, #16]
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	438b      	bics	r3, r1
 800b6a6:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b6a8:	0031      	movs	r1, r6
 800b6aa:	0028      	movs	r0, r5
 800b6ac:	f7ff ff1e 	bl	800b4ec <EE_VerifyPageFullWriteVariable>
 800b6b0:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800b6b2:	d1c7      	bne.n	800b644 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b6b4:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b6b6:	4b2d      	ldr	r3, [pc, #180]	; (800b76c <EE_WriteVariable+0x148>)
 800b6b8:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b6ba:	4e2d      	ldr	r6, [pc, #180]	; (800b770 <EE_WriteVariable+0x14c>)
 800b6bc:	e003      	b.n	800b6c6 <EE_WriteVariable+0xa2>
 800b6be:	3701      	adds	r7, #1
 800b6c0:	b2bf      	uxth	r7, r7
 800b6c2:	42b7      	cmp	r7, r6
 800b6c4:	d00f      	beq.n	800b6e6 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800b6c6:	42bd      	cmp	r5, r7
 800b6c8:	d0f9      	beq.n	800b6be <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b6ca:	4928      	ldr	r1, [pc, #160]	; (800b76c <EE_WriteVariable+0x148>)
 800b6cc:	0038      	movs	r0, r7
 800b6ce:	f7ff ff79 	bl	800b5c4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800b6d2:	2801      	cmp	r0, #1
 800b6d4:	d0f3      	beq.n	800b6be <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b6d6:	4643      	mov	r3, r8
 800b6d8:	8819      	ldrh	r1, [r3, #0]
 800b6da:	0038      	movs	r0, r7
 800b6dc:	f7ff ff06 	bl	800b4ec <EE_VerifyPageFullWriteVariable>
 800b6e0:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800b6e2:	d0ec      	beq.n	800b6be <EE_WriteVariable+0x9a>
 800b6e4:	e7ae      	b.n	800b644 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f005 fbc6 	bl	8010e78 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6ec:	481c      	ldr	r0, [pc, #112]	; (800b760 <EE_WriteVariable+0x13c>)
 800b6ee:	f005 fb1d 	bl	8010d2c <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d003      	beq.n	800b6fe <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 800b6f6:	4b1b      	ldr	r3, [pc, #108]	; (800b764 <EE_WriteVariable+0x140>)
 800b6f8:	69dc      	ldr	r4, [r3, #28]
 800b6fa:	b2a4      	uxth	r4, r4
 800b6fc:	e7a2      	b.n	800b644 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800b6fe:	2080      	movs	r0, #128	; 0x80
 800b700:	0100      	lsls	r0, r0, #4
 800b702:	4458      	add	r0, fp
 800b704:	f005 fbb8 	bl	8010e78 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b708:	4815      	ldr	r0, [pc, #84]	; (800b760 <EE_WriteVariable+0x13c>)
 800b70a:	f005 fb0f 	bl	8010d2c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b70e:	2800      	cmp	r0, #0
 800b710:	d003      	beq.n	800b71a <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 800b712:	4b14      	ldr	r3, [pc, #80]	; (800b764 <EE_WriteVariable+0x140>)
 800b714:	69dc      	ldr	r4, [r3, #28]
 800b716:	b2a4      	uxth	r4, r4
 800b718:	e794      	b.n	800b644 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b71a:	4a13      	ldr	r2, [pc, #76]	; (800b768 <EE_WriteVariable+0x144>)
 800b71c:	6913      	ldr	r3, [r2, #16]
 800b71e:	2102      	movs	r1, #2
 800b720:	438b      	bics	r3, r1
 800b722:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b724:	2200      	movs	r2, #0
 800b726:	2300      	movs	r3, #0
 800b728:	9901      	ldr	r1, [sp, #4]
 800b72a:	2001      	movs	r0, #1
 800b72c:	f005 fb2c 	bl	8010d88 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b730:	480b      	ldr	r0, [pc, #44]	; (800b760 <EE_WriteVariable+0x13c>)
 800b732:	f005 fafb 	bl	8010d2c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b736:	2800      	cmp	r0, #0
 800b738:	d003      	beq.n	800b742 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800b73a:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <EE_WriteVariable+0x140>)
 800b73c:	69dc      	ldr	r4, [r3, #28]
 800b73e:	b2a4      	uxth	r4, r4
 800b740:	e780      	b.n	800b644 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b742:	4a09      	ldr	r2, [pc, #36]	; (800b768 <EE_WriteVariable+0x144>)
 800b744:	6913      	ldr	r3, [r2, #16]
 800b746:	2101      	movs	r1, #1
 800b748:	438b      	bics	r3, r1
 800b74a:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800b74c:	f005 fae4 	bl	8010d18 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800b750:	2400      	movs	r4, #0
 800b752:	e777      	b.n	800b644 <EE_WriteVariable+0x20>
 800b754:	0801e000 	.word	0x0801e000
 800b758:	0801f000 	.word	0x0801f000
 800b75c:	0000eeee 	.word	0x0000eeee
 800b760:	0000c350 	.word	0x0000c350
 800b764:	20006020 	.word	0x20006020
 800b768:	40022000 	.word	0x40022000
 800b76c:	20001694 	.word	0x20001694
 800b770:	00000401 	.word	0x00000401

0800b774 <EE_Format>:
uint16_t EE_Format(void){
 800b774:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800b776:	f005 fabd 	bl	8010cf4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b77a:	4829      	ldr	r0, [pc, #164]	; (800b820 <EE_Format+0xac>)
 800b77c:	f005 fb7c 	bl	8010e78 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b780:	4828      	ldr	r0, [pc, #160]	; (800b824 <EE_Format+0xb0>)
 800b782:	f005 fad3 	bl	8010d2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b786:	2800      	cmp	r0, #0
 800b788:	d003      	beq.n	800b792 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800b78a:	4b27      	ldr	r3, [pc, #156]	; (800b828 <EE_Format+0xb4>)
 800b78c:	69d8      	ldr	r0, [r3, #28]
 800b78e:	b280      	uxth	r0, r0
}
 800b790:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b792:	4826      	ldr	r0, [pc, #152]	; (800b82c <EE_Format+0xb8>)
 800b794:	f005 fb70 	bl	8010e78 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b798:	4822      	ldr	r0, [pc, #136]	; (800b824 <EE_Format+0xb0>)
 800b79a:	f005 fac7 	bl	8010d2c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d003      	beq.n	800b7aa <EE_Format+0x36>
			return pFlash.ErrorCode;
 800b7a2:	4b21      	ldr	r3, [pc, #132]	; (800b828 <EE_Format+0xb4>)
 800b7a4:	69d8      	ldr	r0, [r3, #28]
 800b7a6:	b280      	uxth	r0, r0
 800b7a8:	e7f2      	b.n	800b790 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b7aa:	4a21      	ldr	r2, [pc, #132]	; (800b830 <EE_Format+0xbc>)
 800b7ac:	6913      	ldr	r3, [r2, #16]
 800b7ae:	2102      	movs	r1, #2
 800b7b0:	438b      	bics	r3, r1
 800b7b2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4919      	ldr	r1, [pc, #100]	; (800b820 <EE_Format+0xac>)
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	f005 fae4 	bl	8010d88 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7c0:	4818      	ldr	r0, [pc, #96]	; (800b824 <EE_Format+0xb0>)
 800b7c2:	f005 fab3 	bl	8010d2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d003      	beq.n	800b7d2 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800b7ca:	4b17      	ldr	r3, [pc, #92]	; (800b828 <EE_Format+0xb4>)
 800b7cc:	69d8      	ldr	r0, [r3, #28]
 800b7ce:	b280      	uxth	r0, r0
 800b7d0:	e7de      	b.n	800b790 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b7d2:	4a17      	ldr	r2, [pc, #92]	; (800b830 <EE_Format+0xbc>)
 800b7d4:	6913      	ldr	r3, [r2, #16]
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	438b      	bics	r3, r1
 800b7da:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b7dc:	4815      	ldr	r0, [pc, #84]	; (800b834 <EE_Format+0xc0>)
 800b7de:	f005 fb4b 	bl	8010e78 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7e2:	4810      	ldr	r0, [pc, #64]	; (800b824 <EE_Format+0xb0>)
 800b7e4:	f005 faa2 	bl	8010d2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d003      	beq.n	800b7f4 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <EE_Format+0xb4>)
 800b7ee:	69d8      	ldr	r0, [r3, #28]
 800b7f0:	b280      	uxth	r0, r0
 800b7f2:	e7cd      	b.n	800b790 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b7f4:	4810      	ldr	r0, [pc, #64]	; (800b838 <EE_Format+0xc4>)
 800b7f6:	f005 fb3f 	bl	8010e78 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7fa:	480a      	ldr	r0, [pc, #40]	; (800b824 <EE_Format+0xb0>)
 800b7fc:	f005 fa96 	bl	8010d2c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b800:	2800      	cmp	r0, #0
 800b802:	d003      	beq.n	800b80c <EE_Format+0x98>
			return pFlash.ErrorCode;
 800b804:	4b08      	ldr	r3, [pc, #32]	; (800b828 <EE_Format+0xb4>)
 800b806:	69d8      	ldr	r0, [r3, #28]
 800b808:	b280      	uxth	r0, r0
 800b80a:	e7c1      	b.n	800b790 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b80c:	4a08      	ldr	r2, [pc, #32]	; (800b830 <EE_Format+0xbc>)
 800b80e:	6913      	ldr	r3, [r2, #16]
 800b810:	2101      	movs	r1, #1
 800b812:	438b      	bics	r3, r1
 800b814:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800b816:	f005 fa7f 	bl	8010d18 <HAL_FLASH_Lock>
	return FlashStatus;
 800b81a:	2000      	movs	r0, #0
 800b81c:	e7b8      	b.n	800b790 <EE_Format+0x1c>
 800b81e:	46c0      	nop			; (mov r8, r8)
 800b820:	0801e000 	.word	0x0801e000
 800b824:	0000c350 	.word	0x0000c350
 800b828:	20006020 	.word	0x20006020
 800b82c:	0801e800 	.word	0x0801e800
 800b830:	40022000 	.word	0x40022000
 800b834:	0801f000 	.word	0x0801f000
 800b838:	0801f800 	.word	0x0801f800

0800b83c <EE_Init>:
uint16_t EE_Init(void){
 800b83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b83e:	46c6      	mov	lr, r8
 800b840:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800b842:	f005 fa57 	bl	8010cf4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b846:	4bbe      	ldr	r3, [pc, #760]	; (800bb40 <EE_Init+0x304>)
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b84c:	4abd      	ldr	r2, [pc, #756]	; (800bb44 <EE_Init+0x308>)
 800b84e:	8812      	ldrh	r2, [r2, #0]
 800b850:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800b852:	49bd      	ldr	r1, [pc, #756]	; (800bb48 <EE_Init+0x30c>)
 800b854:	428b      	cmp	r3, r1
 800b856:	d100      	bne.n	800b85a <EE_Init+0x1e>
 800b858:	e074      	b.n	800b944 <EE_Init+0x108>
 800b85a:	49bc      	ldr	r1, [pc, #752]	; (800bb4c <EE_Init+0x310>)
 800b85c:	428b      	cmp	r3, r1
 800b85e:	d011      	beq.n	800b884 <EE_Init+0x48>
 800b860:	2b00      	cmp	r3, #0
 800b862:	d100      	bne.n	800b866 <EE_Init+0x2a>
 800b864:	e109      	b.n	800ba7a <EE_Init+0x23e>
			FlashStatus =EE_Format();
 800b866:	f7ff ff85 	bl	800b774 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b86a:	48b9      	ldr	r0, [pc, #740]	; (800bb50 <EE_Init+0x314>)
 800b86c:	f005 fa5e 	bl	8010d2c <FLASH_WaitForLastOperation>
 800b870:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 800b872:	2e00      	cmp	r6, #0
 800b874:	d102      	bne.n	800b87c <EE_Init+0x40>
	HAL_FLASH_Lock();
 800b876:	f005 fa4f 	bl	8010d18 <HAL_FLASH_Lock>
	return HAL_OK;
 800b87a:	2600      	movs	r6, #0
}
 800b87c:	0030      	movs	r0, r6
 800b87e:	bc04      	pop	{r2}
 800b880:	4690      	mov	r8, r2
 800b882:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800b884:	2a00      	cmp	r2, #0
 800b886:	d00d      	beq.n	800b8a4 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800b888:	4baf      	ldr	r3, [pc, #700]	; (800bb48 <EE_Init+0x30c>)
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d028      	beq.n	800b8e0 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 800b88e:	f7ff ff71 	bl	800b774 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b892:	48af      	ldr	r0, [pc, #700]	; (800bb50 <EE_Init+0x314>)
 800b894:	f005 fa4a 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b898:	2800      	cmp	r0, #0
 800b89a:	d0ec      	beq.n	800b876 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800b89c:	4bad      	ldr	r3, [pc, #692]	; (800bb54 <EE_Init+0x318>)
 800b89e:	69de      	ldr	r6, [r3, #28]
 800b8a0:	b2b6      	uxth	r6, r6
 800b8a2:	e7eb      	b.n	800b87c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b8a4:	48a6      	ldr	r0, [pc, #664]	; (800bb40 <EE_Init+0x304>)
 800b8a6:	f005 fae7 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8aa:	48a9      	ldr	r0, [pc, #676]	; (800bb50 <EE_Init+0x314>)
 800b8ac:	f005 fa3e 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d003      	beq.n	800b8bc <EE_Init+0x80>
					return pFlash.ErrorCode;
 800b8b4:	4ba7      	ldr	r3, [pc, #668]	; (800bb54 <EE_Init+0x318>)
 800b8b6:	69de      	ldr	r6, [r3, #28]
 800b8b8:	b2b6      	uxth	r6, r6
 800b8ba:	e7df      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b8bc:	48a6      	ldr	r0, [pc, #664]	; (800bb58 <EE_Init+0x31c>)
 800b8be:	f005 fadb 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8c2:	48a3      	ldr	r0, [pc, #652]	; (800bb50 <EE_Init+0x314>)
 800b8c4:	f005 fa32 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d105      	bne.n	800b8d8 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8cc:	4aa3      	ldr	r2, [pc, #652]	; (800bb5c <EE_Init+0x320>)
 800b8ce:	6913      	ldr	r3, [r2, #16]
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	438b      	bics	r3, r1
 800b8d4:	6113      	str	r3, [r2, #16]
 800b8d6:	e7ce      	b.n	800b876 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800b8d8:	4b9e      	ldr	r3, [pc, #632]	; (800bb54 <EE_Init+0x318>)
 800b8da:	69de      	ldr	r6, [r3, #28]
 800b8dc:	b2b6      	uxth	r6, r6
 800b8de:	e7cd      	b.n	800b87c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b8e0:	4897      	ldr	r0, [pc, #604]	; (800bb40 <EE_Init+0x304>)
 800b8e2:	f005 fac9 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8e6:	489a      	ldr	r0, [pc, #616]	; (800bb50 <EE_Init+0x314>)
 800b8e8:	f005 fa20 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d003      	beq.n	800b8f8 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 800b8f0:	4b98      	ldr	r3, [pc, #608]	; (800bb54 <EE_Init+0x318>)
 800b8f2:	69de      	ldr	r6, [r3, #28]
 800b8f4:	b2b6      	uxth	r6, r6
 800b8f6:	e7c1      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b8f8:	4897      	ldr	r0, [pc, #604]	; (800bb58 <EE_Init+0x31c>)
 800b8fa:	f005 fabd 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8fe:	4894      	ldr	r0, [pc, #592]	; (800bb50 <EE_Init+0x314>)
 800b900:	f005 fa14 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b904:	2800      	cmp	r0, #0
 800b906:	d003      	beq.n	800b910 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800b908:	4b92      	ldr	r3, [pc, #584]	; (800bb54 <EE_Init+0x318>)
 800b90a:	69de      	ldr	r6, [r3, #28]
 800b90c:	b2b6      	uxth	r6, r6
 800b90e:	e7b5      	b.n	800b87c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b910:	4a92      	ldr	r2, [pc, #584]	; (800bb5c <EE_Init+0x320>)
 800b912:	6913      	ldr	r3, [r2, #16]
 800b914:	2102      	movs	r1, #2
 800b916:	438b      	bics	r3, r1
 800b918:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b91a:	2200      	movs	r2, #0
 800b91c:	2300      	movs	r3, #0
 800b91e:	4989      	ldr	r1, [pc, #548]	; (800bb44 <EE_Init+0x308>)
 800b920:	2001      	movs	r0, #1
 800b922:	f005 fa31 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b926:	488a      	ldr	r0, [pc, #552]	; (800bb50 <EE_Init+0x314>)
 800b928:	f005 fa00 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d105      	bne.n	800b93c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b930:	4a8a      	ldr	r2, [pc, #552]	; (800bb5c <EE_Init+0x320>)
 800b932:	6913      	ldr	r3, [r2, #16]
 800b934:	2101      	movs	r1, #1
 800b936:	438b      	bics	r3, r1
 800b938:	6113      	str	r3, [r2, #16]
 800b93a:	e79c      	b.n	800b876 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800b93c:	4b85      	ldr	r3, [pc, #532]	; (800bb54 <EE_Init+0x318>)
 800b93e:	69de      	ldr	r6, [r3, #28]
 800b940:	b2b6      	uxth	r6, r6
 800b942:	e79b      	b.n	800b87c <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800b944:	2a00      	cmp	r2, #0
 800b946:	d157      	bne.n	800b9f8 <EE_Init+0x1bc>
 800b948:	2401      	movs	r4, #1
	int16_t x =-1;
 800b94a:	2701      	movs	r7, #1
 800b94c:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b94e:	4d84      	ldr	r5, [pc, #528]	; (800bb60 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b950:	4b84      	ldr	r3, [pc, #528]	; (800bb64 <EE_Init+0x328>)
 800b952:	4698      	mov	r8, r3
 800b954:	e005      	b.n	800b962 <EE_Init+0x126>
						x =VarIdx;
 800b956:	b227      	sxth	r7, r4
 800b958:	e008      	b.n	800b96c <EE_Init+0x130>
 800b95a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b95c:	4b82      	ldr	r3, [pc, #520]	; (800bb68 <EE_Init+0x32c>)
 800b95e:	429c      	cmp	r4, r3
 800b960:	d018      	beq.n	800b994 <EE_Init+0x158>
 800b962:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b964:	882b      	ldrh	r3, [r5, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	42b3      	cmp	r3, r6
 800b96a:	d0f4      	beq.n	800b956 <EE_Init+0x11a>
					if(VarIdx != x){
 800b96c:	42bc      	cmp	r4, r7
 800b96e:	d0f4      	beq.n	800b95a <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b970:	497c      	ldr	r1, [pc, #496]	; (800bb64 <EE_Init+0x328>)
 800b972:	0030      	movs	r0, r6
 800b974:	f7ff fe26 	bl	800b5c4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b978:	2801      	cmp	r0, #1
 800b97a:	d0ee      	beq.n	800b95a <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b97c:	4643      	mov	r3, r8
 800b97e:	8819      	ldrh	r1, [r3, #0]
 800b980:	0030      	movs	r0, r6
 800b982:	f7ff fdb3 	bl	800b4ec <EE_VerifyPageFullWriteVariable>
 800b986:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b988:	4871      	ldr	r0, [pc, #452]	; (800bb50 <EE_Init+0x314>)
 800b98a:	f005 f9cf 	bl	8010d2c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0e3      	beq.n	800b95a <EE_Init+0x11e>
 800b992:	e773      	b.n	800b87c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	4969      	ldr	r1, [pc, #420]	; (800bb40 <EE_Init+0x304>)
 800b99a:	2001      	movs	r0, #1
 800b99c:	f005 f9f4 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9a0:	486b      	ldr	r0, [pc, #428]	; (800bb50 <EE_Init+0x314>)
 800b9a2:	f005 f9c3 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d003      	beq.n	800b9b2 <EE_Init+0x176>
					return pFlash.ErrorCode;
 800b9aa:	4b6a      	ldr	r3, [pc, #424]	; (800bb54 <EE_Init+0x318>)
 800b9ac:	69de      	ldr	r6, [r3, #28]
 800b9ae:	b2b6      	uxth	r6, r6
 800b9b0:	e764      	b.n	800b87c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9b2:	4a6a      	ldr	r2, [pc, #424]	; (800bb5c <EE_Init+0x320>)
 800b9b4:	6913      	ldr	r3, [r2, #16]
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	438b      	bics	r3, r1
 800b9ba:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b9bc:	4861      	ldr	r0, [pc, #388]	; (800bb44 <EE_Init+0x308>)
 800b9be:	f005 fa5b 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9c2:	4863      	ldr	r0, [pc, #396]	; (800bb50 <EE_Init+0x314>)
 800b9c4:	f005 f9b2 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d003      	beq.n	800b9d4 <EE_Init+0x198>
					return pFlash.ErrorCode;
 800b9cc:	4b61      	ldr	r3, [pc, #388]	; (800bb54 <EE_Init+0x318>)
 800b9ce:	69de      	ldr	r6, [r3, #28]
 800b9d0:	b2b6      	uxth	r6, r6
 800b9d2:	e753      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b9d4:	4865      	ldr	r0, [pc, #404]	; (800bb6c <EE_Init+0x330>)
 800b9d6:	f005 fa4f 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9da:	485d      	ldr	r0, [pc, #372]	; (800bb50 <EE_Init+0x314>)
 800b9dc:	f005 f9a6 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d105      	bne.n	800b9f0 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b9e4:	4a5d      	ldr	r2, [pc, #372]	; (800bb5c <EE_Init+0x320>)
 800b9e6:	6913      	ldr	r3, [r2, #16]
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	438b      	bics	r3, r1
 800b9ec:	6113      	str	r3, [r2, #16]
 800b9ee:	e742      	b.n	800b876 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800b9f0:	4b58      	ldr	r3, [pc, #352]	; (800bb54 <EE_Init+0x318>)
 800b9f2:	69de      	ldr	r6, [r3, #28]
 800b9f4:	b2b6      	uxth	r6, r6
 800b9f6:	e741      	b.n	800b87c <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800b9f8:	4b54      	ldr	r3, [pc, #336]	; (800bb4c <EE_Init+0x310>)
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d00b      	beq.n	800ba16 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 800b9fe:	f7ff feb9 	bl	800b774 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba02:	4853      	ldr	r0, [pc, #332]	; (800bb50 <EE_Init+0x314>)
 800ba04:	f005 f992 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d100      	bne.n	800ba0e <EE_Init+0x1d2>
 800ba0c:	e733      	b.n	800b876 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800ba0e:	4b51      	ldr	r3, [pc, #324]	; (800bb54 <EE_Init+0x318>)
 800ba10:	69de      	ldr	r6, [r3, #28]
 800ba12:	b2b6      	uxth	r6, r6
 800ba14:	e732      	b.n	800b87c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ba16:	484b      	ldr	r0, [pc, #300]	; (800bb44 <EE_Init+0x308>)
 800ba18:	f005 fa2e 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba1c:	484c      	ldr	r0, [pc, #304]	; (800bb50 <EE_Init+0x314>)
 800ba1e:	f005 f985 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d003      	beq.n	800ba2e <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 800ba26:	4b4b      	ldr	r3, [pc, #300]	; (800bb54 <EE_Init+0x318>)
 800ba28:	69de      	ldr	r6, [r3, #28]
 800ba2a:	b2b6      	uxth	r6, r6
 800ba2c:	e726      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ba2e:	484f      	ldr	r0, [pc, #316]	; (800bb6c <EE_Init+0x330>)
 800ba30:	f005 fa22 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba34:	4846      	ldr	r0, [pc, #280]	; (800bb50 <EE_Init+0x314>)
 800ba36:	f005 f979 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d003      	beq.n	800ba46 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800ba3e:	4b45      	ldr	r3, [pc, #276]	; (800bb54 <EE_Init+0x318>)
 800ba40:	69de      	ldr	r6, [r3, #28]
 800ba42:	b2b6      	uxth	r6, r6
 800ba44:	e71a      	b.n	800b87c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ba46:	4a45      	ldr	r2, [pc, #276]	; (800bb5c <EE_Init+0x320>)
 800ba48:	6913      	ldr	r3, [r2, #16]
 800ba4a:	2102      	movs	r1, #2
 800ba4c:	438b      	bics	r3, r1
 800ba4e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ba50:	2200      	movs	r2, #0
 800ba52:	2300      	movs	r3, #0
 800ba54:	493a      	ldr	r1, [pc, #232]	; (800bb40 <EE_Init+0x304>)
 800ba56:	2001      	movs	r0, #1
 800ba58:	f005 f996 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba5c:	483c      	ldr	r0, [pc, #240]	; (800bb50 <EE_Init+0x314>)
 800ba5e:	f005 f965 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d003      	beq.n	800ba6e <EE_Init+0x232>
					return pFlash.ErrorCode;
 800ba66:	4b3b      	ldr	r3, [pc, #236]	; (800bb54 <EE_Init+0x318>)
 800ba68:	69de      	ldr	r6, [r3, #28]
 800ba6a:	b2b6      	uxth	r6, r6
 800ba6c:	e706      	b.n	800b87c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba6e:	4a3b      	ldr	r2, [pc, #236]	; (800bb5c <EE_Init+0x320>)
 800ba70:	6913      	ldr	r3, [r2, #16]
 800ba72:	2101      	movs	r1, #1
 800ba74:	438b      	bics	r3, r1
 800ba76:	6113      	str	r3, [r2, #16]
 800ba78:	e6fd      	b.n	800b876 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ba7a:	2a00      	cmp	r2, #0
 800ba7c:	d009      	beq.n	800ba92 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800ba7e:	4b33      	ldr	r3, [pc, #204]	; (800bb4c <EE_Init+0x310>)
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d010      	beq.n	800baa6 <EE_Init+0x26a>
 800ba84:	2401      	movs	r4, #1
	int16_t x =-1;
 800ba86:	2701      	movs	r7, #1
 800ba88:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800ba8a:	4d39      	ldr	r5, [pc, #228]	; (800bb70 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ba8c:	4b35      	ldr	r3, [pc, #212]	; (800bb64 <EE_Init+0x328>)
 800ba8e:	4698      	mov	r8, r3
 800ba90:	e02d      	b.n	800baee <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 800ba92:	f7ff fe6f 	bl	800b774 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba96:	482e      	ldr	r0, [pc, #184]	; (800bb50 <EE_Init+0x314>)
 800ba98:	f005 f948 	bl	8010d2c <FLASH_WaitForLastOperation>
 800ba9c:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d100      	bne.n	800baa4 <EE_Init+0x268>
 800baa2:	e6e8      	b.n	800b876 <EE_Init+0x3a>
 800baa4:	e6ea      	b.n	800b87c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800baa6:	4827      	ldr	r0, [pc, #156]	; (800bb44 <EE_Init+0x308>)
 800baa8:	f005 f9e6 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800baac:	4828      	ldr	r0, [pc, #160]	; (800bb50 <EE_Init+0x314>)
 800baae:	f005 f93d 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d003      	beq.n	800babe <EE_Init+0x282>
					return pFlash.ErrorCode;
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <EE_Init+0x318>)
 800bab8:	69de      	ldr	r6, [r3, #28]
 800baba:	b2b6      	uxth	r6, r6
 800babc:	e6de      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800babe:	482b      	ldr	r0, [pc, #172]	; (800bb6c <EE_Init+0x330>)
 800bac0:	f005 f9da 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bac4:	4822      	ldr	r0, [pc, #136]	; (800bb50 <EE_Init+0x314>)
 800bac6:	f005 f931 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800baca:	2800      	cmp	r0, #0
 800bacc:	d105      	bne.n	800bada <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bace:	4a23      	ldr	r2, [pc, #140]	; (800bb5c <EE_Init+0x320>)
 800bad0:	6913      	ldr	r3, [r2, #16]
 800bad2:	2102      	movs	r1, #2
 800bad4:	438b      	bics	r3, r1
 800bad6:	6113      	str	r3, [r2, #16]
 800bad8:	e6cd      	b.n	800b876 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800bada:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <EE_Init+0x318>)
 800badc:	69de      	ldr	r6, [r3, #28]
 800bade:	b2b6      	uxth	r6, r6
 800bae0:	e6cc      	b.n	800b87c <EE_Init+0x40>
						x =VarIdx;
 800bae2:	b227      	sxth	r7, r4
 800bae4:	e008      	b.n	800baf8 <EE_Init+0x2bc>
 800bae6:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bae8:	4b1f      	ldr	r3, [pc, #124]	; (800bb68 <EE_Init+0x32c>)
 800baea:	429c      	cmp	r4, r3
 800baec:	d018      	beq.n	800bb20 <EE_Init+0x2e4>
 800baee:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800baf0:	882b      	ldrh	r3, [r5, #0]
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	42b3      	cmp	r3, r6
 800baf6:	d0f4      	beq.n	800bae2 <EE_Init+0x2a6>
					if(VarIdx != x){
 800baf8:	42bc      	cmp	r4, r7
 800bafa:	d0f4      	beq.n	800bae6 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bafc:	4919      	ldr	r1, [pc, #100]	; (800bb64 <EE_Init+0x328>)
 800bafe:	0030      	movs	r0, r6
 800bb00:	f7ff fd60 	bl	800b5c4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bb04:	2801      	cmp	r0, #1
 800bb06:	d0ee      	beq.n	800bae6 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bb08:	4643      	mov	r3, r8
 800bb0a:	8819      	ldrh	r1, [r3, #0]
 800bb0c:	0030      	movs	r0, r6
 800bb0e:	f7ff fced 	bl	800b4ec <EE_VerifyPageFullWriteVariable>
 800bb12:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb14:	480e      	ldr	r0, [pc, #56]	; (800bb50 <EE_Init+0x314>)
 800bb16:	f005 f909 	bl	8010d2c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0e3      	beq.n	800bae6 <EE_Init+0x2aa>
 800bb1e:	e6ad      	b.n	800b87c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bb20:	2200      	movs	r2, #0
 800bb22:	2300      	movs	r3, #0
 800bb24:	4907      	ldr	r1, [pc, #28]	; (800bb44 <EE_Init+0x308>)
 800bb26:	2001      	movs	r0, #1
 800bb28:	f005 f92e 	bl	8010d88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb2c:	4808      	ldr	r0, [pc, #32]	; (800bb50 <EE_Init+0x314>)
 800bb2e:	f005 f8fd 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d01e      	beq.n	800bb74 <EE_Init+0x338>
					return pFlash.ErrorCode;
 800bb36:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <EE_Init+0x318>)
 800bb38:	69de      	ldr	r6, [r3, #28]
 800bb3a:	b2b6      	uxth	r6, r6
 800bb3c:	e69e      	b.n	800b87c <EE_Init+0x40>
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0801e000 	.word	0x0801e000
 800bb44:	0801f000 	.word	0x0801f000
 800bb48:	0000eeee 	.word	0x0000eeee
 800bb4c:	0000ffff 	.word	0x0000ffff
 800bb50:	0000c350 	.word	0x0000c350
 800bb54:	20006020 	.word	0x20006020
 800bb58:	0801e800 	.word	0x0801e800
 800bb5c:	40022000 	.word	0x40022000
 800bb60:	0801e006 	.word	0x0801e006
 800bb64:	20001694 	.word	0x20001694
 800bb68:	00000401 	.word	0x00000401
 800bb6c:	0801f800 	.word	0x0801f800
 800bb70:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb74:	4a11      	ldr	r2, [pc, #68]	; (800bbbc <EE_Init+0x380>)
 800bb76:	6913      	ldr	r3, [r2, #16]
 800bb78:	2101      	movs	r1, #1
 800bb7a:	438b      	bics	r3, r1
 800bb7c:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bb7e:	4810      	ldr	r0, [pc, #64]	; (800bbc0 <EE_Init+0x384>)
 800bb80:	f005 f97a 	bl	8010e78 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb84:	480f      	ldr	r0, [pc, #60]	; (800bbc4 <EE_Init+0x388>)
 800bb86:	f005 f8d1 	bl	8010d2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d003      	beq.n	800bb96 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 800bb8e:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <EE_Init+0x38c>)
 800bb90:	69de      	ldr	r6, [r3, #28]
 800bb92:	b2b6      	uxth	r6, r6
 800bb94:	e672      	b.n	800b87c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bb96:	480d      	ldr	r0, [pc, #52]	; (800bbcc <EE_Init+0x390>)
 800bb98:	f005 f96e 	bl	8010e78 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb9c:	4809      	ldr	r0, [pc, #36]	; (800bbc4 <EE_Init+0x388>)
 800bb9e:	f005 f8c5 	bl	8010d2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d105      	bne.n	800bbb2 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bba6:	4a05      	ldr	r2, [pc, #20]	; (800bbbc <EE_Init+0x380>)
 800bba8:	6913      	ldr	r3, [r2, #16]
 800bbaa:	2102      	movs	r1, #2
 800bbac:	438b      	bics	r3, r1
 800bbae:	6113      	str	r3, [r2, #16]
 800bbb0:	e661      	b.n	800b876 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <EE_Init+0x38c>)
 800bbb4:	69de      	ldr	r6, [r3, #28]
 800bbb6:	b2b6      	uxth	r6, r6
 800bbb8:	e660      	b.n	800b87c <EE_Init+0x40>
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	40022000 	.word	0x40022000
 800bbc0:	0801e000 	.word	0x0801e000
 800bbc4:	0000c350 	.word	0x0000c350
 800bbc8:	20006020 	.word	0x20006020
 800bbcc:	0801e800 	.word	0x0801e800

0800bbd0 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800bbd0:	b500      	push	{lr}
 800bbd2:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800bbd8:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800bbda:	3301      	adds	r3, #1
 800bbdc:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800bbde:	4669      	mov	r1, sp
 800bbe0:	a801      	add	r0, sp, #4
 800bbe2:	f005 f95b 	bl	8010e9c <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d102      	bne.n	800bbf0 <EraseSector+0x20>
 800bbea:	9b00      	ldr	r3, [sp, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	d002      	beq.n	800bbf6 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800bbf0:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <EraseSector+0x2c>)
 800bbf2:	2216      	movs	r2, #22
 800bbf4:	701a      	strb	r2, [r3, #0]

	return result;
}
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	b005      	add	sp, #20
 800bbfa:	bd00      	pop	{pc}
 800bbfc:	20000be8 	.word	0x20000be8

0800bc00 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800bc00:	b500      	push	{lr}
 800bc02:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bc04:	2380      	movs	r3, #128	; 0x80
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bc12:	3303      	adds	r3, #3
 800bc14:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bc16:	2090      	movs	r0, #144	; 0x90
 800bc18:	a901      	add	r1, sp, #4
 800bc1a:	05c0      	lsls	r0, r0, #23
 800bc1c:	f005 f99e 	bl	8010f5c <HAL_GPIO_Init>
}
 800bc20:	b007      	add	sp, #28
 800bc22:	bd00      	pop	{pc}

0800bc24 <GPIO_Init>:
{
 800bc24:	b500      	push	{lr}
 800bc26:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800bc28:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <GPIO_Init+0x68>)
 800bc2a:	6959      	ldr	r1, [r3, #20]
 800bc2c:	2080      	movs	r0, #128	; 0x80
 800bc2e:	0300      	lsls	r0, r0, #12
 800bc30:	4301      	orrs	r1, r0
 800bc32:	6159      	str	r1, [r3, #20]
 800bc34:	695a      	ldr	r2, [r3, #20]
 800bc36:	4002      	ands	r2, r0
 800bc38:	9201      	str	r2, [sp, #4]
 800bc3a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800bc3c:	6959      	ldr	r1, [r3, #20]
 800bc3e:	2080      	movs	r0, #128	; 0x80
 800bc40:	0280      	lsls	r0, r0, #10
 800bc42:	4301      	orrs	r1, r0
 800bc44:	6159      	str	r1, [r3, #20]
 800bc46:	695a      	ldr	r2, [r3, #20]
 800bc48:	4002      	ands	r2, r0
 800bc4a:	9202      	str	r2, [sp, #8]
 800bc4c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800bc4e:	6959      	ldr	r1, [r3, #20]
 800bc50:	2080      	movs	r0, #128	; 0x80
 800bc52:	0340      	lsls	r0, r0, #13
 800bc54:	4301      	orrs	r1, r0
 800bc56:	6159      	str	r1, [r3, #20]
 800bc58:	695a      	ldr	r2, [r3, #20]
 800bc5a:	4002      	ands	r2, r0
 800bc5c:	9203      	str	r2, [sp, #12]
 800bc5e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bc60:	6959      	ldr	r1, [r3, #20]
 800bc62:	2080      	movs	r0, #128	; 0x80
 800bc64:	02c0      	lsls	r0, r0, #11
 800bc66:	4301      	orrs	r1, r0
 800bc68:	6159      	str	r1, [r3, #20]
 800bc6a:	695a      	ldr	r2, [r3, #20]
 800bc6c:	4002      	ands	r2, r0
 800bc6e:	9204      	str	r2, [sp, #16]
 800bc70:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bc72:	695a      	ldr	r2, [r3, #20]
 800bc74:	2180      	movs	r1, #128	; 0x80
 800bc76:	03c9      	lsls	r1, r1, #15
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	615a      	str	r2, [r3, #20]
 800bc7c:	695b      	ldr	r3, [r3, #20]
 800bc7e:	400b      	ands	r3, r1
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800bc84:	f7ff ffbc 	bl	800bc00 <IND_LED_Init>
}
 800bc88:	b007      	add	sp, #28
 800bc8a:	bd00      	pop	{pc}
 800bc8c:	40021000 	.word	0x40021000

0800bc90 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	000e      	movs	r6, r1
 800bc94:	0014      	movs	r4, r2
 800bc96:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bc98:	f001 fd88 	bl	800d7ac <GetUart>


#ifdef _Usart2	
	if (huart == &huart2)
 800bc9c:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <GetPortGPIOs+0x68>)
 800bc9e:	4298      	cmp	r0, r3
 800bca0:	d008      	beq.n	800bcb4 <GetPortGPIOs+0x24>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800bca2:	4b16      	ldr	r3, [pc, #88]	; (800bcfc <GetPortGPIOs+0x6c>)
 800bca4:	4298      	cmp	r0, r3
 800bca6:	d010      	beq.n	800bcca <GetPortGPIOs+0x3a>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800bca8:	4a15      	ldr	r2, [pc, #84]	; (800bd00 <GetPortGPIOs+0x70>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800bcaa:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800bcac:	4290      	cmp	r0, r2
 800bcae:	d018      	beq.n	800bce2 <GetPortGPIOs+0x52>
	
	return result;	
}
 800bcb0:	0018      	movs	r0, r3
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bcb4:	2390      	movs	r3, #144	; 0x90
 800bcb6:	05db      	lsls	r3, r3, #23
 800bcb8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bcba:	2204      	movs	r2, #4
 800bcbc:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bcbe:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800bcc0:	2308      	movs	r3, #8
 800bcc2:	9a04      	ldr	r2, [sp, #16]
 800bcc4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e7f2      	b.n	800bcb0 <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bcca:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <GetPortGPIOs+0x74>)
 800bccc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	00d2      	lsls	r2, r2, #3
 800bcd2:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bcd4:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800bcd6:	2380      	movs	r3, #128	; 0x80
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	9a04      	ldr	r2, [sp, #16]
 800bcdc:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	e7e6      	b.n	800bcb0 <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bce2:	2390      	movs	r3, #144	; 0x90
 800bce4:	05db      	lsls	r3, r3, #23
 800bce6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800bce8:	2210      	movs	r2, #16
 800bcea:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bcec:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800bcee:	2320      	movs	r3, #32
 800bcf0:	9a04      	ldr	r2, [sp, #16]
 800bcf2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e7db      	b.n	800bcb0 <GetPortGPIOs+0x20>
 800bcf8:	20005e24 	.word	0x20005e24
 800bcfc:	20005c04 	.word	0x20005c04
 800bd00:	20005d38 	.word	0x20005d38
 800bd04:	48000400 	.word	0x48000400

0800bd08 <IsFactoryReset>:
{
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800bd0c:	4b39      	ldr	r3, [pc, #228]	; (800bdf4 <IsFactoryReset+0xec>)
 800bd0e:	6959      	ldr	r1, [r3, #20]
 800bd10:	2080      	movs	r0, #128	; 0x80
 800bd12:	0280      	lsls	r0, r0, #10
 800bd14:	4301      	orrs	r1, r0
 800bd16:	6159      	str	r1, [r3, #20]
 800bd18:	695a      	ldr	r2, [r3, #20]
 800bd1a:	4002      	ands	r2, r0
 800bd1c:	9203      	str	r2, [sp, #12]
 800bd1e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bd20:	6959      	ldr	r1, [r3, #20]
 800bd22:	2080      	movs	r0, #128	; 0x80
 800bd24:	02c0      	lsls	r0, r0, #11
 800bd26:	4301      	orrs	r1, r0
 800bd28:	6159      	str	r1, [r3, #20]
 800bd2a:	695a      	ldr	r2, [r3, #20]
 800bd2c:	4002      	ands	r2, r0
 800bd2e:	9204      	str	r2, [sp, #16]
 800bd30:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800bd32:	6959      	ldr	r1, [r3, #20]
 800bd34:	2080      	movs	r0, #128	; 0x80
 800bd36:	0300      	lsls	r0, r0, #12
 800bd38:	4301      	orrs	r1, r0
 800bd3a:	6159      	str	r1, [r3, #20]
 800bd3c:	695a      	ldr	r2, [r3, #20]
 800bd3e:	4002      	ands	r2, r0
 800bd40:	9205      	str	r2, [sp, #20]
 800bd42:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800bd44:	695a      	ldr	r2, [r3, #20]
 800bd46:	2180      	movs	r1, #128	; 0x80
 800bd48:	0349      	lsls	r1, r1, #13
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	615a      	str	r2, [r3, #20]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	400b      	ands	r3, r1
 800bd52:	9306      	str	r3, [sp, #24]
 800bd54:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bd56:	2522      	movs	r5, #34	; 0x22
 800bd58:	446d      	add	r5, sp
 800bd5a:	ab08      	add	r3, sp, #32
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	ab0b      	add	r3, sp, #44	; 0x2c
 800bd60:	002a      	movs	r2, r5
 800bd62:	a90c      	add	r1, sp, #48	; 0x30
 800bd64:	2001      	movs	r0, #1
 800bd66:	f7ff ff93 	bl	800bc90 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bd6a:	ac07      	add	r4, sp, #28
 800bd6c:	9400      	str	r4, [sp, #0]
 800bd6e:	ab09      	add	r3, sp, #36	; 0x24
 800bd70:	221e      	movs	r2, #30
 800bd72:	446a      	add	r2, sp
 800bd74:	a90a      	add	r1, sp, #40	; 0x28
 800bd76:	2003      	movs	r0, #3
 800bd78:	f7ff ff8a 	bl	800bc90 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd80:	2600      	movs	r6, #0
 800bd82:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bd84:	882b      	ldrh	r3, [r5, #0]
 800bd86:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bd88:	a90d      	add	r1, sp, #52	; 0x34
 800bd8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd8c:	f005 f8e6 	bl	8010f5c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd90:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bd92:	2302      	movs	r3, #2
 800bd94:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bd96:	8823      	ldrh	r3, [r4, #0]
 800bd98:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bd9a:	a90d      	add	r1, sp, #52	; 0x34
 800bd9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9e:	f005 f8dd 	bl	8010f5c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bda2:	8829      	ldrh	r1, [r5, #0]
 800bda4:	2200      	movs	r2, #0
 800bda6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bda8:	f005 fa4c 	bl	8011244 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bdac:	2005      	movs	r0, #5
 800bdae:	f001 fbd1 	bl	800d554 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bdb2:	8821      	ldrh	r1, [r4, #0]
 800bdb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb6:	f005 fa3f 	bl	8011238 <HAL_GPIO_ReadPin>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d006      	beq.n	800bdcc <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <IsFactoryReset+0xf0>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	4252      	negs	r2, r2
 800bdc4:	601a      	str	r2, [r3, #0]
	return 0;
 800bdc6:	2000      	movs	r0, #0
}
 800bdc8:	b012      	add	sp, #72	; 0x48
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800bdcc:	2322      	movs	r3, #34	; 0x22
 800bdce:	446b      	add	r3, sp
 800bdd0:	8819      	ldrh	r1, [r3, #0]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdd6:	f005 fa35 	bl	8011244 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800bdda:	2005      	movs	r0, #5
 800bddc:	f001 fbba 	bl	800d554 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800bde0:	ab07      	add	r3, sp, #28
 800bde2:	8819      	ldrh	r1, [r3, #0]
 800bde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde6:	f005 fa27 	bl	8011238 <HAL_GPIO_ReadPin>
 800bdea:	2801      	cmp	r0, #1
 800bdec:	d1e7      	bne.n	800bdbe <IsFactoryReset+0xb6>
			return 1;
 800bdee:	2001      	movs	r0, #1
 800bdf0:	e7ea      	b.n	800bdc8 <IsFactoryReset+0xc0>
 800bdf2:	46c0      	nop			; (mov r8, r8)
 800bdf4:	40021000 	.word	0x40021000
 800bdf8:	20007ff0 	.word	0x20007ff0

0800bdfc <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800bdfc:	4770      	bx	lr
	...

0800be00 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800be00:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800be02:	00c2      	lsls	r2, r0, #3
 800be04:	1812      	adds	r2, r2, r0
 800be06:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be08:	189b      	adds	r3, r3, r2
 800be0a:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800be0c:	0082      	lsls	r2, r0, #2
 800be0e:	4b1a      	ldr	r3, [pc, #104]	; (800be78 <CheckForTimedButtonPress+0x78>)
 800be10:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800be12:	0163      	lsls	r3, r4, #5
 800be14:	1b1b      	subs	r3, r3, r4
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	191b      	adds	r3, r3, r4
 800be1a:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800be1c:	4299      	cmp	r1, r3
 800be1e:	d01c      	beq.n	800be5a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800be20:	00c2      	lsls	r2, r0, #3
 800be22:	1812      	adds	r2, r2, r0
 800be24:	4b13      	ldr	r3, [pc, #76]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be26:	189b      	adds	r3, r3, r2
 800be28:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800be2a:	0163      	lsls	r3, r4, #5
 800be2c:	1b1b      	subs	r3, r3, r4
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	191b      	adds	r3, r3, r4
 800be32:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800be34:	4299      	cmp	r1, r3
 800be36:	d017      	beq.n	800be68 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 800be38:	00c2      	lsls	r2, r0, #3
 800be3a:	1812      	adds	r2, r2, r0
 800be3c:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be3e:	189b      	adds	r3, r3, r2
 800be40:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800be42:	0163      	lsls	r3, r4, #5
 800be44:	1b1b      	subs	r3, r3, r4
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	191b      	adds	r3, r3, r4
 800be4a:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800be4c:	4299      	cmp	r1, r3
 800be4e:	d109      	bne.n	800be64 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 800be50:	0010      	movs	r0, r2
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be54:	220a      	movs	r2, #10
 800be56:	54c2      	strb	r2, [r0, r3]
 800be58:	e004      	b.n	800be64 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800be5a:	00c3      	lsls	r3, r0, #3
 800be5c:	1818      	adds	r0, r3, r0
 800be5e:	4b05      	ldr	r3, [pc, #20]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be60:	2209      	movs	r2, #9
 800be62:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800be64:	2000      	movs	r0, #0
 800be66:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800be68:	0010      	movs	r0, r2
 800be6a:	4b02      	ldr	r3, [pc, #8]	; (800be74 <CheckForTimedButtonPress+0x74>)
 800be6c:	220a      	movs	r2, #10
 800be6e:	54c2      	strb	r2, [r0, r3]
 800be70:	e7f8      	b.n	800be64 <CheckForTimedButtonPress+0x64>
 800be72:	46c0      	nop			; (mov r8, r8)
 800be74:	200016a8 	.word	0x200016a8
 800be78:	200016e0 	.word	0x200016e0

0800be7c <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800be7c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800be7e:	00c2      	lsls	r2, r0, #3
 800be80:	1812      	adds	r2, r2, r0
 800be82:	4b1b      	ldr	r3, [pc, #108]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800be84:	189b      	adds	r3, r3, r2
 800be86:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800be88:	0082      	lsls	r2, r0, #2
 800be8a:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <CheckForTimedButtonRelease+0x78>)
 800be8c:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800be8e:	0163      	lsls	r3, r4, #5
 800be90:	1b1b      	subs	r3, r3, r4
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	191b      	adds	r3, r3, r4
 800be96:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800be98:	4299      	cmp	r1, r3
 800be9a:	d01c      	beq.n	800bed6 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800be9c:	00c2      	lsls	r2, r0, #3
 800be9e:	1812      	adds	r2, r2, r0
 800bea0:	4b13      	ldr	r3, [pc, #76]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800bea2:	189b      	adds	r3, r3, r2
 800bea4:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800bea6:	0163      	lsls	r3, r4, #5
 800bea8:	1b1b      	subs	r3, r3, r4
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	191b      	adds	r3, r3, r4
 800beae:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800beb0:	4299      	cmp	r1, r3
 800beb2:	d017      	beq.n	800bee4 <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800beb4:	00c2      	lsls	r2, r0, #3
 800beb6:	1812      	adds	r2, r2, r0
 800beb8:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800beba:	189b      	adds	r3, r3, r2
 800bebc:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 800bebe:	0163      	lsls	r3, r4, #5
 800bec0:	1b1b      	subs	r3, r3, r4
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	191b      	adds	r3, r3, r4
 800bec6:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800bec8:	4299      	cmp	r1, r3
 800beca:	d109      	bne.n	800bee0 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800becc:	0010      	movs	r0, r2
 800bece:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800bed0:	220d      	movs	r2, #13
 800bed2:	54c2      	strb	r2, [r0, r3]
 800bed4:	e004      	b.n	800bee0 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800bed6:	00c3      	lsls	r3, r0, #3
 800bed8:	1818      	adds	r0, r3, r0
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800bedc:	220c      	movs	r2, #12
 800bede:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800bee0:	2000      	movs	r0, #0
 800bee2:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800bee4:	0010      	movs	r0, r2
 800bee6:	4b02      	ldr	r3, [pc, #8]	; (800bef0 <CheckForTimedButtonRelease+0x74>)
 800bee8:	220d      	movs	r2, #13
 800beea:	54c2      	strb	r2, [r0, r3]
 800beec:	e7f8      	b.n	800bee0 <CheckForTimedButtonRelease+0x64>
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	200016a8 	.word	0x200016a8
 800bef4:	200016f0 	.word	0x200016f0

0800bef8 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befa:	b08d      	sub	sp, #52	; 0x34
 800befc:	0006      	movs	r6, r0
 800befe:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800bf00:	4b41      	ldr	r3, [pc, #260]	; (800c008 <AddPortButton+0x110>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d157      	bne.n	800bfb8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800bf08:	4b40      	ldr	r3, [pc, #256]	; (800c00c <AddPortButton+0x114>)
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800bf0e:	4b3e      	ldr	r3, [pc, #248]	; (800c008 <AddPortButton+0x110>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d15a      	bne.n	800bfcc <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bf16:	2512      	movs	r5, #18
 800bf18:	446d      	add	r5, sp
 800bf1a:	af04      	add	r7, sp, #16
 800bf1c:	9700      	str	r7, [sp, #0]
 800bf1e:	ab05      	add	r3, sp, #20
 800bf20:	002a      	movs	r2, r5
 800bf22:	a906      	add	r1, sp, #24
 800bf24:	0020      	movs	r0, r4
 800bf26:	f7ff feb3 	bl	800bc90 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800bf2a:	882b      	ldrh	r3, [r5, #0]
 800bf2c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf32:	2500      	movs	r5, #0
 800bf34:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bf36:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bf38:	a907      	add	r1, sp, #28
 800bf3a:	9806      	ldr	r0, [sp, #24]
 800bf3c:	f005 f80e 	bl	8010f5c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800bf40:	883b      	ldrh	r3, [r7, #0]
 800bf42:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf44:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bf46:	2302      	movs	r3, #2
 800bf48:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bf4a:	a907      	add	r1, sp, #28
 800bf4c:	9805      	ldr	r0, [sp, #20]
 800bf4e:	f005 f805 	bl	8010f5c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800bf52:	00e2      	lsls	r2, r4, #3
 800bf54:	1912      	adds	r2, r2, r4
 800bf56:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <AddPortButton+0x118>)
 800bf58:	189b      	adds	r3, r3, r2
 800bf5a:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bf5c:	0025      	movs	r5, r4
 800bf5e:	353a      	adds	r5, #58	; 0x3a
 800bf60:	00ad      	lsls	r5, r5, #2
 800bf62:	210e      	movs	r1, #14
 800bf64:	4469      	add	r1, sp
 800bf66:	0028      	movs	r0, r5
 800bf68:	f7ff fb2c 	bl	800b5c4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d133      	bne.n	800bfd8 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800bf70:	230e      	movs	r3, #14
 800bf72:	446b      	add	r3, sp
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800bf78:	091a      	lsrs	r2, r3, #4
 800bf7a:	42a2      	cmp	r2, r4
 800bf7c:	d103      	bne.n	800bf86 <AddPortButton+0x8e>
 800bf7e:	220f      	movs	r2, #15
 800bf80:	4013      	ands	r3, r2
 800bf82:	42b3      	cmp	r3, r6
 800bf84:	d015      	beq.n	800bfb2 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bf86:	0324      	lsls	r4, r4, #12
 800bf88:	0231      	lsls	r1, r6, #8
 800bf8a:	4321      	orrs	r1, r4
 800bf8c:	b289      	uxth	r1, r1
 800bf8e:	230e      	movs	r3, #14
 800bf90:	446b      	add	r3, sp
 800bf92:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bf94:	0028      	movs	r0, r5
 800bf96:	f7ff fb45 	bl	800b624 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bf9a:	1c68      	adds	r0, r5, #1
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f7ff fb41 	bl	800b624 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bfa2:	1ca8      	adds	r0, r5, #2
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	f7ff fb3d 	bl	800b624 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bfaa:	1ce8      	adds	r0, r5, #3
 800bfac:	2100      	movs	r1, #0
 800bfae:	f7ff fb39 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	b00d      	add	sp, #52	; 0x34
 800bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800bfb8:	008d      	lsls	r5, r1, #2
 800bfba:	4b16      	ldr	r3, [pc, #88]	; (800c014 <AddPortButton+0x11c>)
 800bfbc:	58e8      	ldr	r0, [r5, r3]
 800bfbe:	f001 fddb 	bl	800db78 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800bfc2:	4b15      	ldr	r3, [pc, #84]	; (800c018 <AddPortButton+0x120>)
 800bfc4:	58e8      	ldr	r0, [r5, r3]
 800bfc6:	f001 fdd7 	bl	800db78 <osSemaphoreRelease>
 800bfca:	e79d      	b.n	800bf08 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800bfcc:	0020      	movs	r0, r4
 800bfce:	f001 fbed 	bl	800d7ac <GetUart>
 800bfd2:	f006 f914 	bl	80121fe <HAL_UART_DeInit>
 800bfd6:	e79e      	b.n	800bf16 <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bfd8:	0324      	lsls	r4, r4, #12
 800bfda:	0231      	lsls	r1, r6, #8
 800bfdc:	4321      	orrs	r1, r4
 800bfde:	b289      	uxth	r1, r1
 800bfe0:	230e      	movs	r3, #14
 800bfe2:	446b      	add	r3, sp
 800bfe4:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bfe6:	0028      	movs	r0, r5
 800bfe8:	f7ff fb1c 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bfec:	1c68      	adds	r0, r5, #1
 800bfee:	2100      	movs	r1, #0
 800bff0:	f7ff fb18 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bff4:	1ca8      	adds	r0, r5, #2
 800bff6:	2100      	movs	r1, #0
 800bff8:	f7ff fb14 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bffc:	1ce8      	adds	r0, r5, #3
 800bffe:	2100      	movs	r1, #0
 800c000:	f7ff fb10 	bl	800b624 <EE_WriteVariable>
 800c004:	e7d5      	b.n	800bfb2 <AddPortButton+0xba>
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	200002b7 	.word	0x200002b7
 800c00c:	20000bd0 	.word	0x20000bd0
 800c010:	200016a8 	.word	0x200016a8
 800c014:	20005b80 	.word	0x20005b80
 800c018:	20005b60 	.word	0x20005b60

0800c01c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c022:	4836      	ldr	r0, [pc, #216]	; (800c0fc <RemovePortButton+0xe0>)
 800c024:	00e9      	lsls	r1, r5, #3
 800c026:	1949      	adds	r1, r1, r5
 800c028:	1842      	adds	r2, r0, r1
 800c02a:	2300      	movs	r3, #0
 800c02c:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800c02e:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800c030:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c032:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c034:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c036:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c038:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c03a:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c03c:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c03e:	002c      	movs	r4, r5
 800c040:	343a      	adds	r4, #58	; 0x3a
 800c042:	00a4      	lsls	r4, r4, #2
 800c044:	466b      	mov	r3, sp
 800c046:	1d99      	adds	r1, r3, #6
 800c048:	0020      	movs	r0, r4
 800c04a:	f7ff fabb 	bl	800b5c4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c04e:	2800      	cmp	r0, #0
 800c050:	d02b      	beq.n	800c0aa <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c052:	0028      	movs	r0, r5
 800c054:	f001 fbaa 	bl	800d7ac <GetUart>
 800c058:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800c05a:	6803      	ldr	r3, [r0, #0]
 800c05c:	4a28      	ldr	r2, [pc, #160]	; (800c100 <RemovePortButton+0xe4>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d034      	beq.n	800c0cc <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c062:	4a28      	ldr	r2, [pc, #160]	; (800c104 <RemovePortButton+0xe8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d035      	beq.n	800c0d4 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c068:	4a27      	ldr	r2, [pc, #156]	; (800c108 <RemovePortButton+0xec>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d036      	beq.n	800c0dc <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c06e:	4a27      	ldr	r2, [pc, #156]	; (800c10c <RemovePortButton+0xf0>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d037      	beq.n	800c0e4 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c074:	4a26      	ldr	r2, [pc, #152]	; (800c110 <RemovePortButton+0xf4>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d03c      	beq.n	800c0f4 <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c07a:	4a26      	ldr	r2, [pc, #152]	; (800c114 <RemovePortButton+0xf8>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d035      	beq.n	800c0ec <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c080:	4a25      	ldr	r2, [pc, #148]	; (800c118 <RemovePortButton+0xfc>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d038      	beq.n	800c0f8 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c086:	4a25      	ldr	r2, [pc, #148]	; (800c11c <RemovePortButton+0x100>)
 800c088:	4694      	mov	ip, r2
 800c08a:	4463      	add	r3, ip
 800c08c:	1e5c      	subs	r4, r3, #1
 800c08e:	41a3      	sbcs	r3, r4
 800c090:	425c      	negs	r4, r3
 800c092:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c094:	4b22      	ldr	r3, [pc, #136]	; (800c120 <RemovePortButton+0x104>)
 800c096:	2200      	movs	r2, #0
 800c098:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c09a:	3201      	adds	r2, #1
 800c09c:	4921      	ldr	r1, [pc, #132]	; (800c124 <RemovePortButton+0x108>)
 800c09e:	0030      	movs	r0, r6
 800c0a0:	f006 f906 	bl	80122b0 <HAL_UART_Receive_IT>

	return result;
}
 800c0a4:	0020      	movs	r0, r4
 800c0a6:	b002      	add	sp, #8
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	0020      	movs	r0, r4
 800c0ae:	f7ff fab9 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c0b2:	1c60      	adds	r0, r4, #1
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	f7ff fab5 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c0ba:	1ca0      	adds	r0, r4, #2
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f7ff fab1 	bl	800b624 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c0c2:	1ce0      	adds	r0, r4, #3
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f7ff faad 	bl	800b624 <EE_WriteVariable>
 800c0ca:	e7c2      	b.n	800c052 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800c0cc:	f001 fa54 	bl	800d578 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	e7df      	b.n	800c094 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800c0d4:	f001 fa68 	bl	800d5a8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c0d8:	2400      	movs	r4, #0
 800c0da:	e7db      	b.n	800c094 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800c0dc:	f001 fa7c 	bl	800d5d8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c0e0:	2400      	movs	r4, #0
 800c0e2:	e7d7      	b.n	800c094 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800c0e4:	f001 fa90 	bl	800d608 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800c0e8:	2400      	movs	r4, #0
 800c0ea:	e7d3      	b.n	800c094 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800c0ec:	f001 faa4 	bl	800d638 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c0f0:	2400      	movs	r4, #0
 800c0f2:	e7cf      	b.n	800c094 <RemovePortButton+0x78>
 800c0f4:	2400      	movs	r4, #0
 800c0f6:	e7cd      	b.n	800c094 <RemovePortButton+0x78>
 800c0f8:	2400      	movs	r4, #0
 800c0fa:	e7cb      	b.n	800c094 <RemovePortButton+0x78>
 800c0fc:	200016a8 	.word	0x200016a8
 800c100:	40013800 	.word	0x40013800
 800c104:	40004400 	.word	0x40004400
 800c108:	40004800 	.word	0x40004800
 800c10c:	40004c00 	.word	0x40004c00
 800c110:	40005000 	.word	0x40005000
 800c114:	40011400 	.word	0x40011400
 800c118:	40011800 	.word	0x40011800
 800c11c:	bffee400 	.word	0xbffee400
 800c120:	20000bd0 	.word	0x20000bd0
 800c124:	2000094c 	.word	0x2000094c

0800c128 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c12a:	46de      	mov	lr, fp
 800c12c:	4657      	mov	r7, sl
 800c12e:	464e      	mov	r6, r9
 800c130:	4645      	mov	r5, r8
 800c132:	b5e0      	push	{r5, r6, r7, lr}
 800c134:	b085      	sub	sp, #20
 800c136:	0007      	movs	r7, r0
 800c138:	001e      	movs	r6, r3
 800c13a:	ab0e      	add	r3, sp, #56	; 0x38
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	4698      	mov	r8, r3
 800c140:	ab0f      	add	r3, sp, #60	; 0x3c
 800c142:	781d      	ldrb	r5, [r3, #0]
 800c144:	ab10      	add	r3, sp, #64	; 0x40
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	469b      	mov	fp, r3
 800c14a:	ab11      	add	r3, sp, #68	; 0x44
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	469a      	mov	sl, r3
 800c150:	ab12      	add	r3, sp, #72	; 0x48
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	4699      	mov	r9, r3
 800c156:	ab13      	add	r3, sp, #76	; 0x4c
 800c158:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c15a:	00fc      	lsls	r4, r7, #3
 800c15c:	19e4      	adds	r4, r4, r7
 800c15e:	4b9e      	ldr	r3, [pc, #632]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c160:	191b      	adds	r3, r3, r4
 800c162:	785b      	ldrb	r3, [r3, #1]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d04c      	beq.n	800c202 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c168:	00fc      	lsls	r4, r7, #3
 800c16a:	19e4      	adds	r4, r4, r7
 800c16c:	4b9a      	ldr	r3, [pc, #616]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c16e:	191b      	adds	r3, r3, r4
 800c170:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c172:	4644      	mov	r4, r8
 800c174:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c176:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c178:	465c      	mov	r4, fp
 800c17a:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c17c:	4654      	mov	r4, sl
 800c17e:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c180:	464c      	mov	r4, r9
 800c182:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c184:	2801      	cmp	r0, #1
 800c186:	d003      	beq.n	800c190 <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c188:	2800      	cmp	r0, #0
 800c18a:	d113      	bne.n	800c1b4 <SetButtonEvents+0x8c>
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d042      	beq.n	800c216 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c190:	00f9      	lsls	r1, r7, #3
 800c192:	19c9      	adds	r1, r1, r7
 800c194:	4b90      	ldr	r3, [pc, #576]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c196:	185b      	adds	r3, r3, r1
 800c198:	7a19      	ldrb	r1, [r3, #8]
 800c19a:	2401      	movs	r4, #1
 800c19c:	4321      	orrs	r1, r4
 800c19e:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c1a0:	2801      	cmp	r0, #1
 800c1a2:	d10c      	bne.n	800c1be <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c1a4:	00fa      	lsls	r2, r7, #3
 800c1a6:	19d2      	adds	r2, r2, r7
 800c1a8:	4b8b      	ldr	r3, [pc, #556]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c1aa:	189b      	adds	r3, r3, r2
 800c1ac:	7a1a      	ldrb	r2, [r3, #8]
 800c1ae:	2102      	movs	r1, #2
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c1b4:	2801      	cmp	r0, #1
 800c1b6:	d042      	beq.n	800c23e <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d152      	bne.n	800c262 <SetButtonEvents+0x13a>
 800c1bc:	e03d      	b.n	800c23a <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d031      	beq.n	800c226 <SetButtonEvents+0xfe>
 800c1c2:	e044      	b.n	800c24e <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d059      	beq.n	800c27c <SetButtonEvents+0x154>
 800c1c8:	e06d      	b.n	800c2a6 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d100      	bne.n	800c1d0 <SetButtonEvents+0xa8>
 800c1ce:	e082      	b.n	800c2d6 <SetButtonEvents+0x1ae>
 800c1d0:	e097      	b.n	800c302 <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d100      	bne.n	800c1d8 <SetButtonEvents+0xb0>
 800c1d6:	e0f2      	b.n	800c3be <SetButtonEvents+0x296>
 800c1d8:	e09f      	b.n	800c31a <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c1da:	0a19      	lsrs	r1, r3, #8
 800c1dc:	0209      	lsls	r1, r1, #8
 800c1de:	4311      	orrs	r1, r2
 800c1e0:	ab02      	add	r3, sp, #8
 800c1e2:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c1e4:	0020      	movs	r0, r4
 800c1e6:	f7ff fa1d 	bl	800b624 <EE_WriteVariable>
 800c1ea:	e0ad      	b.n	800c348 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c1ec:	0019      	movs	r1, r3
 800c1ee:	9801      	ldr	r0, [sp, #4]
 800c1f0:	f7ff fa18 	bl	800b624 <EE_WriteVariable>
 800c1f4:	e0b7      	b.n	800c366 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c1f6:	4653      	mov	r3, sl
 800c1f8:	4319      	orrs	r1, r3
 800c1fa:	0030      	movs	r0, r6
 800c1fc:	f7ff fa12 	bl	800b624 <EE_WriteVariable>
 800c200:	e0c0      	b.n	800c384 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c202:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800c204:	b005      	add	sp, #20
 800c206:	bc3c      	pop	{r2, r3, r4, r5}
 800c208:	4690      	mov	r8, r2
 800c20a:	4699      	mov	r9, r3
 800c20c:	46a2      	mov	sl, r4
 800c20e:	46ab      	mov	fp, r5
 800c210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c212:	200b      	movs	r0, #11
 800c214:	e7f6      	b.n	800c204 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c216:	00f9      	lsls	r1, r7, #3
 800c218:	19c9      	adds	r1, r1, r7
 800c21a:	4b6f      	ldr	r3, [pc, #444]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c21c:	185b      	adds	r3, r3, r1
 800c21e:	7a19      	ldrb	r1, [r3, #8]
 800c220:	2401      	movs	r4, #1
 800c222:	43a1      	bics	r1, r4
 800c224:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c226:	2a00      	cmp	r2, #0
 800c228:	d1bc      	bne.n	800c1a4 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c22a:	00fa      	lsls	r2, r7, #3
 800c22c:	19d2      	adds	r2, r2, r7
 800c22e:	4b6a      	ldr	r3, [pc, #424]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c230:	189b      	adds	r3, r3, r2
 800c232:	7a1a      	ldrb	r2, [r3, #8]
 800c234:	2102      	movs	r1, #2
 800c236:	438a      	bics	r2, r1
 800c238:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c23a:	2e00      	cmp	r6, #0
 800c23c:	d016      	beq.n	800c26c <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c23e:	00fa      	lsls	r2, r7, #3
 800c240:	19d2      	adds	r2, r2, r7
 800c242:	4b65      	ldr	r3, [pc, #404]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c244:	189b      	adds	r3, r3, r2
 800c246:	7a1a      	ldrb	r2, [r3, #8]
 800c248:	2104      	movs	r1, #4
 800c24a:	430a      	orrs	r2, r1
 800c24c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c24e:	2801      	cmp	r0, #1
 800c250:	d1b8      	bne.n	800c1c4 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c252:	00fa      	lsls	r2, r7, #3
 800c254:	19d2      	adds	r2, r2, r7
 800c256:	4b60      	ldr	r3, [pc, #384]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c258:	189b      	adds	r3, r3, r2
 800c25a:	7a1a      	ldrb	r2, [r3, #8]
 800c25c:	2108      	movs	r1, #8
 800c25e:	430a      	orrs	r2, r1
 800c260:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c262:	2801      	cmp	r0, #1
 800c264:	d017      	beq.n	800c296 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c266:	2800      	cmp	r0, #0
 800c268:	d128      	bne.n	800c2bc <SetButtonEvents+0x194>
 800c26a:	e012      	b.n	800c292 <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c26c:	00fa      	lsls	r2, r7, #3
 800c26e:	19d2      	adds	r2, r2, r7
 800c270:	4b59      	ldr	r3, [pc, #356]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c272:	189b      	adds	r3, r3, r2
 800c274:	7a1a      	ldrb	r2, [r3, #8]
 800c276:	2104      	movs	r1, #4
 800c278:	438a      	bics	r2, r1
 800c27a:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c27c:	4643      	mov	r3, r8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e7      	bne.n	800c252 <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c282:	00fa      	lsls	r2, r7, #3
 800c284:	19d2      	adds	r2, r2, r7
 800c286:	4b54      	ldr	r3, [pc, #336]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c288:	189b      	adds	r3, r3, r2
 800c28a:	7a1a      	ldrb	r2, [r3, #8]
 800c28c:	2108      	movs	r1, #8
 800c28e:	438a      	bics	r2, r1
 800c290:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c292:	2d00      	cmp	r5, #0
 800c294:	d017      	beq.n	800c2c6 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c296:	00fa      	lsls	r2, r7, #3
 800c298:	19d2      	adds	r2, r2, r7
 800c29a:	4b4f      	ldr	r3, [pc, #316]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	7a1a      	ldrb	r2, [r3, #8]
 800c2a0:	2110      	movs	r1, #16
 800c2a2:	430a      	orrs	r2, r1
 800c2a4:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c2a6:	2801      	cmp	r0, #1
 800c2a8:	d000      	beq.n	800c2ac <SetButtonEvents+0x184>
 800c2aa:	e78e      	b.n	800c1ca <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c2ac:	00fa      	lsls	r2, r7, #3
 800c2ae:	19d2      	adds	r2, r2, r7
 800c2b0:	4b49      	ldr	r3, [pc, #292]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c2b2:	189b      	adds	r3, r3, r2
 800c2b4:	7a1a      	ldrb	r2, [r3, #8]
 800c2b6:	2120      	movs	r1, #32
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c2bc:	2801      	cmp	r0, #1
 800c2be:	d018      	beq.n	800c2f2 <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d12a      	bne.n	800c31a <SetButtonEvents+0x1f2>
 800c2c4:	e012      	b.n	800c2ec <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c2c6:	00fa      	lsls	r2, r7, #3
 800c2c8:	19d2      	adds	r2, r2, r7
 800c2ca:	4b43      	ldr	r3, [pc, #268]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c2cc:	189b      	adds	r3, r3, r2
 800c2ce:	7a1a      	ldrb	r2, [r3, #8]
 800c2d0:	2110      	movs	r1, #16
 800c2d2:	438a      	bics	r2, r1
 800c2d4:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e7      	bne.n	800c2ac <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c2dc:	00fa      	lsls	r2, r7, #3
 800c2de:	19d2      	adds	r2, r2, r7
 800c2e0:	4b3d      	ldr	r3, [pc, #244]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	7a1a      	ldrb	r2, [r3, #8]
 800c2e6:	2120      	movs	r1, #32
 800c2e8:	438a      	bics	r2, r1
 800c2ea:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c2ec:	4653      	mov	r3, sl
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d05d      	beq.n	800c3ae <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c2f2:	00fa      	lsls	r2, r7, #3
 800c2f4:	19d2      	adds	r2, r2, r7
 800c2f6:	4b38      	ldr	r3, [pc, #224]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c2f8:	189b      	adds	r3, r3, r2
 800c2fa:	7a1a      	ldrb	r2, [r3, #8]
 800c2fc:	2140      	movs	r1, #64	; 0x40
 800c2fe:	430a      	orrs	r2, r1
 800c300:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c302:	2801      	cmp	r0, #1
 800c304:	d000      	beq.n	800c308 <SetButtonEvents+0x1e0>
 800c306:	e764      	b.n	800c1d2 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c308:	00fa      	lsls	r2, r7, #3
 800c30a:	19d2      	adds	r2, r2, r7
 800c30c:	4b32      	ldr	r3, [pc, #200]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	7a19      	ldrb	r1, [r3, #8]
 800c312:	2280      	movs	r2, #128	; 0x80
 800c314:	4252      	negs	r2, r2
 800c316:	430a      	orrs	r2, r1
 800c318:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c31a:	003c      	movs	r4, r7
 800c31c:	343a      	adds	r4, #58	; 0x3a
 800c31e:	00a4      	lsls	r4, r4, #2
 800c320:	ab02      	add	r3, sp, #8
 800c322:	1d99      	adds	r1, r3, #6
 800c324:	0020      	movs	r0, r4
 800c326:	f7ff f94d 	bl	800b5c4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d000      	beq.n	800c330 <SetButtonEvents+0x208>
 800c32e:	e770      	b.n	800c212 <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c330:	ab02      	add	r3, sp, #8
 800c332:	3306      	adds	r3, #6
 800c334:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c336:	00fa      	lsls	r2, r7, #3
 800c338:	19d2      	adds	r2, r2, r7
 800c33a:	4f27      	ldr	r7, [pc, #156]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c33c:	18bf      	adds	r7, r7, r2
 800c33e:	7a3a      	ldrb	r2, [r7, #8]
 800c340:	b2d9      	uxtb	r1, r3
 800c342:	4291      	cmp	r1, r2
 800c344:	d000      	beq.n	800c348 <SetButtonEvents+0x220>
 800c346:	e748      	b.n	800c1da <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c348:	1c63      	adds	r3, r4, #1
 800c34a:	aa02      	add	r2, sp, #8
 800c34c:	1d97      	adds	r7, r2, #6
 800c34e:	0039      	movs	r1, r7
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	0018      	movs	r0, r3
 800c354:	f7ff f936 	bl	800b5c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c358:	0236      	lsls	r6, r6, #8
 800c35a:	883a      	ldrh	r2, [r7, #0]
 800c35c:	465b      	mov	r3, fp
 800c35e:	4333      	orrs	r3, r6
		if (temp16
 800c360:	429a      	cmp	r2, r3
 800c362:	d000      	beq.n	800c366 <SetButtonEvents+0x23e>
 800c364:	e742      	b.n	800c1ec <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c366:	1ca6      	adds	r6, r4, #2
 800c368:	ab02      	add	r3, sp, #8
 800c36a:	1d9f      	adds	r7, r3, #6
 800c36c:	0039      	movs	r1, r7
 800c36e:	0030      	movs	r0, r6
 800c370:	f7ff f928 	bl	800b5c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c374:	4643      	mov	r3, r8
 800c376:	0219      	lsls	r1, r3, #8
 800c378:	883a      	ldrh	r2, [r7, #0]
 800c37a:	4653      	mov	r3, sl
 800c37c:	430b      	orrs	r3, r1
		if (temp16
 800c37e:	429a      	cmp	r2, r3
 800c380:	d000      	beq.n	800c384 <SetButtonEvents+0x25c>
 800c382:	e738      	b.n	800c1f6 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c384:	3403      	adds	r4, #3
 800c386:	ab02      	add	r3, sp, #8
 800c388:	1d9e      	adds	r6, r3, #6
 800c38a:	0031      	movs	r1, r6
 800c38c:	0020      	movs	r0, r4
 800c38e:	f7ff f919 	bl	800b5c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c392:	022d      	lsls	r5, r5, #8
 800c394:	8832      	ldrh	r2, [r6, #0]
 800c396:	464b      	mov	r3, r9
 800c398:	432b      	orrs	r3, r5
	return result;
 800c39a:	2000      	movs	r0, #0
		if (temp16
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d100      	bne.n	800c3a2 <SetButtonEvents+0x27a>
 800c3a0:	e730      	b.n	800c204 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c3a2:	0019      	movs	r1, r3
 800c3a4:	0020      	movs	r0, r4
 800c3a6:	f7ff f93d 	bl	800b624 <EE_WriteVariable>
	return result;
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	e72a      	b.n	800c204 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c3ae:	00fa      	lsls	r2, r7, #3
 800c3b0:	19d2      	adds	r2, r2, r7
 800c3b2:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c3b4:	189b      	adds	r3, r3, r2
 800c3b6:	7a1a      	ldrb	r2, [r3, #8]
 800c3b8:	2140      	movs	r1, #64	; 0x40
 800c3ba:	438a      	bics	r2, r1
 800c3bc:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c3be:	464b      	mov	r3, r9
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1a1      	bne.n	800c308 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c3c4:	00fa      	lsls	r2, r7, #3
 800c3c6:	19d2      	adds	r2, r2, r7
 800c3c8:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <SetButtonEvents+0x2b0>)
 800c3ca:	189b      	adds	r3, r3, r2
 800c3cc:	7a19      	ldrb	r1, [r3, #8]
 800c3ce:	227f      	movs	r2, #127	; 0x7f
 800c3d0:	400a      	ands	r2, r1
 800c3d2:	721a      	strb	r2, [r3, #8]
 800c3d4:	e7a1      	b.n	800c31a <SetButtonEvents+0x1f2>
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	200016a8 	.word	0x200016a8

0800c3dc <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c3dc:	b500      	push	{lr}
 800c3de:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c3e0:	2214      	movs	r2, #20
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	a803      	add	r0, sp, #12
 800c3e6:	f006 fcd5 	bl	8012d94 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <HAL_ADC_MspInit+0x58>)
 800c3ec:	6999      	ldr	r1, [r3, #24]
 800c3ee:	2080      	movs	r0, #128	; 0x80
 800c3f0:	0080      	lsls	r0, r0, #2
 800c3f2:	4301      	orrs	r1, r0
 800c3f4:	6199      	str	r1, [r3, #24]
 800c3f6:	699a      	ldr	r2, [r3, #24]
 800c3f8:	4002      	ands	r2, r0
 800c3fa:	9201      	str	r2, [sp, #4]
 800c3fc:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c3fe:	695a      	ldr	r2, [r3, #20]
 800c400:	2180      	movs	r1, #128	; 0x80
 800c402:	0289      	lsls	r1, r1, #10
 800c404:	430a      	orrs	r2, r1
 800c406:	615a      	str	r2, [r3, #20]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	400b      	ands	r3, r1
 800c40c:	9302      	str	r3, [sp, #8]
 800c40e:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800c410:	4b09      	ldr	r3, [pc, #36]	; (800c438 <HAL_ADC_MspInit+0x5c>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d001      	beq.n	800c41c <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800c418:	b009      	add	sp, #36	; 0x24
 800c41a:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c41c:	333b      	adds	r3, #59	; 0x3b
 800c41e:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c420:	3b39      	subs	r3, #57	; 0x39
 800c422:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c424:	3871      	subs	r0, #113	; 0x71
 800c426:	38ff      	subs	r0, #255	; 0xff
 800c428:	a903      	add	r1, sp, #12
 800c42a:	05c0      	lsls	r0, r0, #23
 800c42c:	f004 fd96 	bl	8010f5c <HAL_GPIO_Init>
}
 800c430:	e7f2      	b.n	800c418 <HAL_ADC_MspInit+0x3c>
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	40021000 	.word	0x40021000
 800c438:	200016d9 	.word	0x200016d9

0800c43c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800c43c:	6803      	ldr	r3, [r0, #0]
 800c43e:	4a0d      	ldr	r2, [pc, #52]	; (800c474 <Get_channel+0x38>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800c444:	4a0c      	ldr	r2, [pc, #48]	; (800c478 <Get_channel+0x3c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d008      	beq.n	800c45c <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800c44a:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800c44c:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <Get_channel+0x40>)
 800c44e:	4299      	cmp	r1, r3
 800c450:	d00c      	beq.n	800c46c <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <Get_channel+0x44>)
 800c454:	4299      	cmp	r1, r3
 800c456:	d1f8      	bne.n	800c44a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800c458:	2003      	movs	r0, #3
 800c45a:	e7f6      	b.n	800c44a <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <Get_channel+0x40>)
 800c45e:	4299      	cmp	r1, r3
 800c460:	d006      	beq.n	800c470 <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 800c462:	4b07      	ldr	r3, [pc, #28]	; (800c480 <Get_channel+0x44>)
 800c464:	4299      	cmp	r1, r3
 800c466:	d1f0      	bne.n	800c44a <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800c468:	2005      	movs	r0, #5
 800c46a:	e7ee      	b.n	800c44a <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800c46c:	2002      	movs	r0, #2
 800c46e:	e7ec      	b.n	800c44a <Get_channel+0xe>
		return ADC_CHANNEL_4;
 800c470:	2004      	movs	r0, #4
 800c472:	e7ea      	b.n	800c44a <Get_channel+0xe>
 800c474:	40004400 	.word	0x40004400
 800c478:	40011400 	.word	0x40011400
 800c47c:	08017554 	.word	0x08017554
 800c480:	08017558 	.word	0x08017558

0800c484 <Error_Handler>:

void Error_Handler(void) {
 800c484:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800c486:	2064      	movs	r0, #100	; 0x64
 800c488:	f003 fa7c 	bl	800f984 <HAL_Delay>

}
 800c48c:	bd10      	pop	{r4, pc}
	...

0800c490 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800c490:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c492:	4811      	ldr	r0, [pc, #68]	; (800c4d8 <MX_ADC_Init+0x48>)
 800c494:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <MX_ADC_Init+0x4c>)
 800c496:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c498:	2380      	movs	r3, #128	; 0x80
 800c49a:	061b      	lsls	r3, r3, #24
 800c49c:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c4a2:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c4a8:	2104      	movs	r1, #4
 800c4aa:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c4ac:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c4ae:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c4b0:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c4b2:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c4b4:	21c2      	movs	r1, #194	; 0xc2
 800c4b6:	31ff      	adds	r1, #255	; 0xff
 800c4b8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c4ba:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c4bc:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c4be:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c4c0:	f003 fb3a 	bl	800fb38 <HAL_ADC_Init>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d103      	bne.n	800c4d0 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800c4c8:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <MX_ADC_Init+0x50>)
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	701a      	strb	r2, [r3, #0]
}
 800c4ce:	bd10      	pop	{r4, pc}
		Error_Handler();
 800c4d0:	f7ff ffd8 	bl	800c484 <Error_Handler>
 800c4d4:	e7f8      	b.n	800c4c8 <MX_ADC_Init+0x38>
 800c4d6:	46c0      	nop			; (mov r8, r8)
 800c4d8:	20005ec4 	.word	0x20005ec4
 800c4dc:	40012400 	.word	0x40012400
 800c4e0:	20001696 	.word	0x20001696

0800c4e4 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	0005      	movs	r5, r0
 800c4ea:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 800c4ec:	4b4d      	ldr	r3, [pc, #308]	; (800c624 <ReadTempAndVref+0x140>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d100      	bne.n	800c4f6 <ReadTempAndVref+0x12>
 800c4f4:	e087      	b.n	800c606 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c4f6:	494c      	ldr	r1, [pc, #304]	; (800c628 <ReadTempAndVref+0x144>)
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c4fc:	2380      	movs	r3, #128	; 0x80
 800c4fe:	015b      	lsls	r3, r3, #5
 800c500:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c502:	2301      	movs	r3, #1
 800c504:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c506:	4849      	ldr	r0, [pc, #292]	; (800c62c <ReadTempAndVref+0x148>)
 800c508:	f003 fcba 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d000      	beq.n	800c512 <ReadTempAndVref+0x2e>
 800c510:	e07c      	b.n	800c60c <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 800c512:	4c46      	ldr	r4, [pc, #280]	; (800c62c <ReadTempAndVref+0x148>)
 800c514:	0020      	movs	r0, r4
 800c516:	f003 fbb7 	bl	800fc88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c51a:	2164      	movs	r1, #100	; 0x64
 800c51c:	0020      	movs	r0, r4
 800c51e:	f003 fc05 	bl	800fd2c <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c522:	0020      	movs	r0, r4
 800c524:	f003 fca6 	bl	800fe74 <HAL_ADC_GetValue>
 800c528:	4b41      	ldr	r3, [pc, #260]	; (800c630 <ReadTempAndVref+0x14c>)
 800c52a:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c52c:	0400      	lsls	r0, r0, #16
 800c52e:	0c00      	lsrs	r0, r0, #16
 800c530:	f7f6 f9a0 	bl	8002874 <__aeabi_i2d>
 800c534:	4a3f      	ldr	r2, [pc, #252]	; (800c634 <ReadTempAndVref+0x150>)
 800c536:	4b40      	ldr	r3, [pc, #256]	; (800c638 <ReadTempAndVref+0x154>)
 800c538:	f7f5 fb90 	bl	8001c5c <__aeabi_dmul>
 800c53c:	2200      	movs	r2, #0
 800c53e:	4b3f      	ldr	r3, [pc, #252]	; (800c63c <ReadTempAndVref+0x158>)
 800c540:	f7f4 ff82 	bl	8001448 <__aeabi_ddiv>
 800c544:	4a3e      	ldr	r2, [pc, #248]	; (800c640 <ReadTempAndVref+0x15c>)
 800c546:	4b3f      	ldr	r3, [pc, #252]	; (800c644 <ReadTempAndVref+0x160>)
 800c548:	f7f5 fdfa 	bl	8002140 <__aeabi_dsub>
 800c54c:	4a3e      	ldr	r2, [pc, #248]	; (800c648 <ReadTempAndVref+0x164>)
 800c54e:	4b3f      	ldr	r3, [pc, #252]	; (800c64c <ReadTempAndVref+0x168>)
 800c550:	f7f4 ff7a 	bl	8001448 <__aeabi_ddiv>
 800c554:	2200      	movs	r2, #0
 800c556:	4b3e      	ldr	r3, [pc, #248]	; (800c650 <ReadTempAndVref+0x16c>)
 800c558:	f7f4 fc5a 	bl	8000e10 <__aeabi_dadd>
 800c55c:	f7f6 fa48 	bl	80029f0 <__aeabi_d2f>
 800c560:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800c562:	0020      	movs	r0, r4
 800c564:	f003 fbc0 	bl	800fce8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c568:	492f      	ldr	r1, [pc, #188]	; (800c628 <ReadTempAndVref+0x144>)
 800c56a:	2310      	movs	r3, #16
 800c56c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800c56e:	4b39      	ldr	r3, [pc, #228]	; (800c654 <ReadTempAndVref+0x170>)
 800c570:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c572:	2301      	movs	r3, #1
 800c574:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c576:	0020      	movs	r0, r4
 800c578:	f003 fc82 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d148      	bne.n	800c612 <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c580:	4929      	ldr	r1, [pc, #164]	; (800c628 <ReadTempAndVref+0x144>)
 800c582:	2311      	movs	r3, #17
 800c584:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c586:	2380      	movs	r3, #128	; 0x80
 800c588:	015b      	lsls	r3, r3, #5
 800c58a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c58c:	2305      	movs	r3, #5
 800c58e:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c590:	4826      	ldr	r0, [pc, #152]	; (800c62c <ReadTempAndVref+0x148>)
 800c592:	f003 fc75 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c596:	2800      	cmp	r0, #0
 800c598:	d13e      	bne.n	800c618 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 800c59a:	4d24      	ldr	r5, [pc, #144]	; (800c62c <ReadTempAndVref+0x148>)
 800c59c:	0028      	movs	r0, r5
 800c59e:	f003 fb73 	bl	800fc88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c5a2:	2164      	movs	r1, #100	; 0x64
 800c5a4:	0028      	movs	r0, r5
 800c5a6:	f003 fbc1 	bl	800fd2c <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c5aa:	0028      	movs	r0, r5
 800c5ac:	f003 fc62 	bl	800fe74 <HAL_ADC_GetValue>
 800c5b0:	0004      	movs	r4, r0
 800c5b2:	4b29      	ldr	r3, [pc, #164]	; (800c658 <ReadTempAndVref+0x174>)
 800c5b4:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c5b6:	4b29      	ldr	r3, [pc, #164]	; (800c65c <ReadTempAndVref+0x178>)
 800c5b8:	8818      	ldrh	r0, [r3, #0]
 800c5ba:	f7f6 f95b 	bl	8002874 <__aeabi_i2d>
 800c5be:	4a1d      	ldr	r2, [pc, #116]	; (800c634 <ReadTempAndVref+0x150>)
 800c5c0:	4b1d      	ldr	r3, [pc, #116]	; (800c638 <ReadTempAndVref+0x154>)
 800c5c2:	f7f5 fb4b 	bl	8001c5c <__aeabi_dmul>
 800c5c6:	9000      	str	r0, [sp, #0]
 800c5c8:	9101      	str	r1, [sp, #4]
 800c5ca:	0420      	lsls	r0, r4, #16
 800c5cc:	0c00      	lsrs	r0, r0, #16
 800c5ce:	f7f6 f951 	bl	8002874 <__aeabi_i2d>
 800c5d2:	0002      	movs	r2, r0
 800c5d4:	000b      	movs	r3, r1
 800c5d6:	9800      	ldr	r0, [sp, #0]
 800c5d8:	9901      	ldr	r1, [sp, #4]
 800c5da:	f7f4 ff35 	bl	8001448 <__aeabi_ddiv>
 800c5de:	f7f6 fa07 	bl	80029f0 <__aeabi_d2f>
 800c5e2:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800c5e4:	0028      	movs	r0, r5
 800c5e6:	f003 fb7f 	bl	800fce8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c5ea:	490f      	ldr	r1, [pc, #60]	; (800c628 <ReadTempAndVref+0x144>)
 800c5ec:	2311      	movs	r3, #17
 800c5ee:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800c5f0:	4b18      	ldr	r3, [pc, #96]	; (800c654 <ReadTempAndVref+0x170>)
 800c5f2:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5f8:	0028      	movs	r0, r5
 800c5fa:	f003 fc41 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d10d      	bne.n	800c61e <ReadTempAndVref+0x13a>
}
 800c602:	b002      	add	sp, #8
 800c604:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 800c606:	f7ff ff43 	bl	800c490 <MX_ADC_Init>
 800c60a:	e774      	b.n	800c4f6 <ReadTempAndVref+0x12>
		Error_Handler();
 800c60c:	f7ff ff3a 	bl	800c484 <Error_Handler>
 800c610:	e77f      	b.n	800c512 <ReadTempAndVref+0x2e>
		Error_Handler();
 800c612:	f7ff ff37 	bl	800c484 <Error_Handler>
 800c616:	e7b3      	b.n	800c580 <ReadTempAndVref+0x9c>
		Error_Handler();
 800c618:	f7ff ff34 	bl	800c484 <Error_Handler>
 800c61c:	e7bd      	b.n	800c59a <ReadTempAndVref+0xb6>
		Error_Handler();
 800c61e:	f7ff ff31 	bl	800c484 <Error_Handler>
}
 800c622:	e7ee      	b.n	800c602 <ReadTempAndVref+0x11e>
 800c624:	20001696 	.word	0x20001696
 800c628:	20001700 	.word	0x20001700
 800c62c:	20005ec4 	.word	0x20005ec4
 800c630:	2000169a 	.word	0x2000169a
 800c634:	66666666 	.word	0x66666666
 800c638:	400a6666 	.word	0x400a6666
 800c63c:	40affe00 	.word	0x40affe00
 800c640:	28f5c28f 	.word	0x28f5c28f
 800c644:	3ff68f5c 	.word	0x3ff68f5c
 800c648:	33333333 	.word	0x33333333
 800c64c:	40113333 	.word	0x40113333
 800c650:	40390000 	.word	0x40390000
 800c654:	00001001 	.word	0x00001001
 800c658:	20001698 	.word	0x20001698
 800c65c:	1ffff7ba 	.word	0x1ffff7ba

0800c660 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	0004      	movs	r4, r0
 800c666:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800c668:	1e83      	subs	r3, r0, #2
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d901      	bls.n	800c672 <GetReadPrecentage+0x12>
}
 800c66e:	b006      	add	sp, #24
 800c670:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800c672:	4b4a      	ldr	r3, [pc, #296]	; (800c79c <GetReadPrecentage+0x13c>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d04f      	beq.n	800c71a <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 800c67a:	0020      	movs	r0, r4
 800c67c:	f001 f896 	bl	800d7ac <GetUart>
 800c680:	4947      	ldr	r1, [pc, #284]	; (800c7a0 <GetReadPrecentage+0x140>)
 800c682:	f7ff fedb 	bl	800c43c <Get_channel>
 800c686:	4b47      	ldr	r3, [pc, #284]	; (800c7a4 <GetReadPrecentage+0x144>)
 800c688:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800c68a:	4947      	ldr	r1, [pc, #284]	; (800c7a8 <GetReadPrecentage+0x148>)
 800c68c:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c68e:	2380      	movs	r3, #128	; 0x80
 800c690:	015b      	lsls	r3, r3, #5
 800c692:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c694:	2301      	movs	r3, #1
 800c696:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c698:	4844      	ldr	r0, [pc, #272]	; (800c7ac <GetReadPrecentage+0x14c>)
 800c69a:	f003 fbf1 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d178      	bne.n	800c794 <GetReadPrecentage+0x134>
		HAL_ADC_Start(&hadc);
 800c6a2:	4c42      	ldr	r4, [pc, #264]	; (800c7ac <GetReadPrecentage+0x14c>)
 800c6a4:	0020      	movs	r0, r4
 800c6a6:	f003 faef 	bl	800fc88 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c6aa:	2164      	movs	r1, #100	; 0x64
 800c6ac:	0020      	movs	r0, r4
 800c6ae:	f003 fb3d 	bl	800fd2c <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c6b2:	0020      	movs	r0, r4
 800c6b4:	f003 fbde 	bl	800fe74 <HAL_ADC_GetValue>
 800c6b8:	f7f4 fb6a 	bl	8000d90 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c6bc:	f7f6 f946 	bl	800294c <__aeabi_f2d>
 800c6c0:	4a3b      	ldr	r2, [pc, #236]	; (800c7b0 <GetReadPrecentage+0x150>)
 800c6c2:	4b3c      	ldr	r3, [pc, #240]	; (800c7b4 <GetReadPrecentage+0x154>)
 800c6c4:	f7f5 faca 	bl	8001c5c <__aeabi_dmul>
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4b3b      	ldr	r3, [pc, #236]	; (800c7b8 <GetReadPrecentage+0x158>)
 800c6cc:	f7f4 febc 	bl	8001448 <__aeabi_ddiv>
 800c6d0:	f7f6 f98e 	bl	80029f0 <__aeabi_d2f>
 800c6d4:	4b39      	ldr	r3, [pc, #228]	; (800c7bc <GetReadPrecentage+0x15c>)
 800c6d6:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800c6d8:	4939      	ldr	r1, [pc, #228]	; (800c7c0 <GetReadPrecentage+0x160>)
 800c6da:	f7f4 f843 	bl	8000764 <__aeabi_fmul>
 800c6de:	f7f6 f935 	bl	800294c <__aeabi_f2d>
 800c6e2:	4a33      	ldr	r2, [pc, #204]	; (800c7b0 <GetReadPrecentage+0x150>)
 800c6e4:	4b33      	ldr	r3, [pc, #204]	; (800c7b4 <GetReadPrecentage+0x154>)
 800c6e6:	f7f4 feaf 	bl	8001448 <__aeabi_ddiv>
 800c6ea:	f7f6 f981 	bl	80029f0 <__aeabi_d2f>
 800c6ee:	4b35      	ldr	r3, [pc, #212]	; (800c7c4 <GetReadPrecentage+0x164>)
 800c6f0:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800c6f2:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800c6f4:	0020      	movs	r0, r4
 800c6f6:	f003 faf7 	bl	800fce8 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c6fa:	492b      	ldr	r1, [pc, #172]	; (800c7a8 <GetReadPrecentage+0x148>)
 800c6fc:	4b29      	ldr	r3, [pc, #164]	; (800c7a4 <GetReadPrecentage+0x144>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800c702:	4b31      	ldr	r3, [pc, #196]	; (800c7c8 <GetReadPrecentage+0x168>)
 800c704:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c706:	2301      	movs	r3, #1
 800c708:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c70a:	0020      	movs	r0, r4
 800c70c:	f003 fbb8 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c710:	2800      	cmp	r0, #0
 800c712:	d0ac      	beq.n	800c66e <GetReadPrecentage+0xe>
			Error_Handler();
 800c714:	f7ff feb6 	bl	800c484 <Error_Handler>
 800c718:	e7a9      	b.n	800c66e <GetReadPrecentage+0xe>
			MX_ADC_Init();
 800c71a:	f7ff feb9 	bl	800c490 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c71e:	0020      	movs	r0, r4
 800c720:	f001 f844 	bl	800d7ac <GetUart>
 800c724:	f005 fd6b 	bl	80121fe <HAL_UART_DeInit>
			if (port == 3) {
 800c728:	2c03      	cmp	r4, #3
 800c72a:	d01a      	beq.n	800c762 <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c72c:	2690      	movs	r6, #144	; 0x90
 800c72e:	05f6      	lsls	r6, r6, #23
 800c730:	2104      	movs	r1, #4
 800c732:	0030      	movs	r0, r6
 800c734:	f004 fcf2 	bl	801111c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c738:	2304      	movs	r3, #4
 800c73a:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c73c:	3b03      	subs	r3, #3
 800c73e:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c740:	3302      	adds	r3, #2
 800c742:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c744:	a901      	add	r1, sp, #4
 800c746:	0030      	movs	r0, r6
 800c748:	f004 fc08 	bl	8010f5c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c74c:	4b1f      	ldr	r3, [pc, #124]	; (800c7cc <GetReadPrecentage+0x16c>)
 800c74e:	191b      	adds	r3, r3, r4
 800c750:	3b01      	subs	r3, #1
 800c752:	2206      	movs	r2, #6
 800c754:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c756:	3a05      	subs	r2, #5
 800c758:	2104      	movs	r1, #4
 800c75a:	0030      	movs	r0, r6
 800c75c:	f004 fd72 	bl	8011244 <HAL_GPIO_WritePin>
 800c760:	e78b      	b.n	800c67a <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c762:	2690      	movs	r6, #144	; 0x90
 800c764:	05f6      	lsls	r6, r6, #23
 800c766:	2110      	movs	r1, #16
 800c768:	0030      	movs	r0, r6
 800c76a:	f004 fcd7 	bl	801111c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c76e:	2310      	movs	r3, #16
 800c770:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c772:	3b0f      	subs	r3, #15
 800c774:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c776:	3302      	adds	r3, #2
 800c778:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c77a:	a901      	add	r1, sp, #4
 800c77c:	0030      	movs	r0, r6
 800c77e:	f004 fbed 	bl	8010f5c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c782:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <GetReadPrecentage+0x16c>)
 800c784:	2206      	movs	r2, #6
 800c786:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c788:	3a05      	subs	r2, #5
 800c78a:	2110      	movs	r1, #16
 800c78c:	0030      	movs	r0, r6
 800c78e:	f004 fd59 	bl	8011244 <HAL_GPIO_WritePin>
 800c792:	e772      	b.n	800c67a <GetReadPrecentage+0x1a>
			Error_Handler();
 800c794:	f7ff fe76 	bl	800c484 <Error_Handler>
 800c798:	e783      	b.n	800c6a2 <GetReadPrecentage+0x42>
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	20001696 	.word	0x20001696
 800c7a0:	08017558 	.word	0x08017558
 800c7a4:	200016a4 	.word	0x200016a4
 800c7a8:	20001700 	.word	0x20001700
 800c7ac:	20005ec4 	.word	0x20005ec4
 800c7b0:	66666666 	.word	0x66666666
 800c7b4:	400a6666 	.word	0x400a6666
 800c7b8:	40affe00 	.word	0x40affe00
 800c7bc:	200016dc 	.word	0x200016dc
 800c7c0:	42c80000 	.word	0x42c80000
 800c7c4:	200016d0 	.word	0x200016d0
 800c7c8:	00001001 	.word	0x00001001
 800c7cc:	20000bd0 	.word	0x20000bd0

0800c7d0 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c7d0:	2802      	cmp	r0, #2
 800c7d2:	d004      	beq.n	800c7de <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c7d4:	2803      	cmp	r0, #3
 800c7d6:	d010      	beq.n	800c7fa <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	; (800c818 <Get_Rank+0x48>)
 800c7da:	7818      	ldrb	r0, [r3, #0]
}
 800c7dc:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800c7de:	4b0f      	ldr	r3, [pc, #60]	; (800c81c <Get_Rank+0x4c>)
 800c7e0:	4299      	cmp	r1, r3
 800c7e2:	d006      	beq.n	800c7f2 <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	; (800c820 <Get_Rank+0x50>)
 800c7e6:	4299      	cmp	r1, r3
 800c7e8:	d1f6      	bne.n	800c7d8 <Get_Rank+0x8>
		Rank_t = 1;
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <Get_Rank+0x48>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	701a      	strb	r2, [r3, #0]
 800c7f0:	e7f2      	b.n	800c7d8 <Get_Rank+0x8>
		Rank_t = 0;
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <Get_Rank+0x48>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
 800c7f8:	e7ee      	b.n	800c7d8 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 800c7fa:	4b08      	ldr	r3, [pc, #32]	; (800c81c <Get_Rank+0x4c>)
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d006      	beq.n	800c80e <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <Get_Rank+0x50>)
 800c802:	4299      	cmp	r1, r3
 800c804:	d1e8      	bne.n	800c7d8 <Get_Rank+0x8>
		Rank_t = 3;
 800c806:	4b04      	ldr	r3, [pc, #16]	; (800c818 <Get_Rank+0x48>)
 800c808:	2203      	movs	r2, #3
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	e7e4      	b.n	800c7d8 <Get_Rank+0x8>
		Rank_t = 2;
 800c80e:	4b02      	ldr	r3, [pc, #8]	; (800c818 <Get_Rank+0x48>)
 800c810:	2202      	movs	r2, #2
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	e7e0      	b.n	800c7d8 <Get_Rank+0x8>
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	200016a5 	.word	0x200016a5
 800c81c:	08017554 	.word	0x08017554
 800c820:	08017558 	.word	0x08017558

0800c824 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	0004      	movs	r4, r0
 800c828:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800c82a:	1e83      	subs	r3, r0, #2
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d900      	bls.n	800c832 <ADCSelectChannel+0xe>
}
 800c830:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800c832:	4b10      	ldr	r3, [pc, #64]	; (800c874 <ADCSelectChannel+0x50>)
 800c834:	2201      	movs	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c838:	f000 ffb8 	bl	800d7ac <GetUart>
 800c83c:	f005 fcdf 	bl	80121fe <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c840:	4b0d      	ldr	r3, [pc, #52]	; (800c878 <ADCSelectChannel+0x54>)
 800c842:	191b      	adds	r3, r3, r4
 800c844:	3b01      	subs	r3, #1
 800c846:	2206      	movs	r2, #6
 800c848:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c84a:	0020      	movs	r0, r4
 800c84c:	f000 ffae 	bl	800d7ac <GetUart>
 800c850:	0029      	movs	r1, r5
 800c852:	f7ff fdf3 	bl	800c43c <Get_channel>
 800c856:	4b09      	ldr	r3, [pc, #36]	; (800c87c <ADCSelectChannel+0x58>)
 800c858:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800c85a:	0029      	movs	r1, r5
 800c85c:	0020      	movs	r0, r4
 800c85e:	f7ff ffb7 	bl	800c7d0 <Get_Rank>
 800c862:	4b07      	ldr	r3, [pc, #28]	; (800c880 <ADCSelectChannel+0x5c>)
 800c864:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800c866:	4b07      	ldr	r3, [pc, #28]	; (800c884 <ADCSelectChannel+0x60>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e0      	bne.n	800c830 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800c86e:	f7ff fe0f 	bl	800c490 <MX_ADC_Init>
}
 800c872:	e7dd      	b.n	800c830 <ADCSelectChannel+0xc>
 800c874:	200016d9 	.word	0x200016d9
 800c878:	20000bd0 	.word	0x20000bd0
 800c87c:	200016a4 	.word	0x200016a4
 800c880:	200016a5 	.word	0x200016a5
 800c884:	20001696 	.word	0x20001696

0800c888 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	0005      	movs	r5, r0
 800c88c:	000e      	movs	r6, r1
 800c88e:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800c890:	4b26      	ldr	r3, [pc, #152]	; (800c92c <ReadADCChannel+0xa4>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d008      	beq.n	800c8aa <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <ReadADCChannel+0xa8>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4a25      	ldr	r2, [pc, #148]	; (800c934 <ReadADCChannel+0xac>)
 800c8a0:	5a98      	ldrh	r0, [r3, r2]
 800c8a2:	f7f4 fa75 	bl	8000d90 <__aeabi_ui2f>
 800c8a6:	6020      	str	r0, [r4, #0]
}
 800c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800c8aa:	f000 ff7f 	bl	800d7ac <GetUart>
 800c8ae:	0031      	movs	r1, r6
 800c8b0:	f7ff fdc4 	bl	800c43c <Get_channel>
 800c8b4:	4f20      	ldr	r7, [pc, #128]	; (800c938 <ReadADCChannel+0xb0>)
 800c8b6:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800c8b8:	0031      	movs	r1, r6
 800c8ba:	0028      	movs	r0, r5
 800c8bc:	f7ff ff88 	bl	800c7d0 <Get_Rank>
 800c8c0:	4b1b      	ldr	r3, [pc, #108]	; (800c930 <ReadADCChannel+0xa8>)
 800c8c2:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800c8c4:	491d      	ldr	r1, [pc, #116]	; (800c93c <ReadADCChannel+0xb4>)
 800c8c6:	783b      	ldrb	r3, [r7, #0]
 800c8c8:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c8ca:	2380      	movs	r3, #128	; 0x80
 800c8cc:	015b      	lsls	r3, r3, #5
 800c8ce:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8d4:	481a      	ldr	r0, [pc, #104]	; (800c940 <ReadADCChannel+0xb8>)
 800c8d6:	f003 fad3 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d122      	bne.n	800c924 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800c8de:	4d18      	ldr	r5, [pc, #96]	; (800c940 <ReadADCChannel+0xb8>)
 800c8e0:	0028      	movs	r0, r5
 800c8e2:	f003 f9d1 	bl	800fc88 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c8e6:	2164      	movs	r1, #100	; 0x64
 800c8e8:	0028      	movs	r0, r5
 800c8ea:	f003 fa1f 	bl	800fd2c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800c8ee:	0028      	movs	r0, r5
 800c8f0:	f003 fac0 	bl	800fe74 <HAL_ADC_GetValue>
 800c8f4:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <ReadADCChannel+0xa8>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4a0e      	ldr	r2, [pc, #56]	; (800c934 <ReadADCChannel+0xac>)
 800c8fc:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800c8fe:	0028      	movs	r0, r5
 800c900:	f003 f9f2 	bl	800fce8 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c904:	490d      	ldr	r1, [pc, #52]	; (800c93c <ReadADCChannel+0xb4>)
 800c906:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <ReadADCChannel+0xb0>)
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <ReadADCChannel+0xbc>)
 800c90e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c910:	2303      	movs	r3, #3
 800c912:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c914:	0028      	movs	r0, r5
 800c916:	f003 fab3 	bl	800fe80 <HAL_ADC_ConfigChannel>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0bc      	beq.n	800c898 <ReadADCChannel+0x10>
			Error_Handler();
 800c91e:	f7ff fdb1 	bl	800c484 <Error_Handler>
 800c922:	e7b9      	b.n	800c898 <ReadADCChannel+0x10>
			Error_Handler();
 800c924:	f7ff fdae 	bl	800c484 <Error_Handler>
 800c928:	e7d9      	b.n	800c8de <ReadADCChannel+0x56>
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	20001696 	.word	0x20001696
 800c930:	200016a5 	.word	0x200016a5
 800c934:	2000169c 	.word	0x2000169c
 800c938:	200016a4 	.word	0x200016a4
 800c93c:	20001700 	.word	0x20001700
 800c940:	20005ec4 	.word	0x20005ec4
 800c944:	00001001 	.word	0x00001001

0800c948 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800c948:	4770      	bx	lr

0800c94a <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800c94a:	4770      	bx	lr

0800c94c <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800c94c:	4770      	bx	lr

0800c94e <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800c94e:	4770      	bx	lr

0800c950 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800c950:	4770      	bx	lr
	...

0800c954 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800c954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c956:	46de      	mov	lr, fp
 800c958:	4657      	mov	r7, sl
 800c95a:	464e      	mov	r6, r9
 800c95c:	4645      	mov	r5, r8
 800c95e:	b5e0      	push	{r5, r6, r7, lr}
 800c960:	b089      	sub	sp, #36	; 0x24
 800c962:	4dbd      	ldr	r5, [pc, #756]	; (800cc58 <CheckAttachedButtons+0x304>)
 800c964:	2404      	movs	r4, #4
 800c966:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	469b      	mov	fp, r3
 800c96c:	4699      	mov	r9, r3
 800c96e:	e111      	b.n	800cb94 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c970:	230e      	movs	r3, #14
 800c972:	aa02      	add	r2, sp, #8
 800c974:	4694      	mov	ip, r2
 800c976:	4463      	add	r3, ip
 800c978:	8819      	ldrh	r1, [r3, #0]
 800c97a:	2201      	movs	r2, #1
 800c97c:	9807      	ldr	r0, [sp, #28]
 800c97e:	f004 fc61 	bl	8011244 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c982:	200a      	movs	r0, #10
 800c984:	f000 fdd4 	bl	800d530 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c988:	ab05      	add	r3, sp, #20
 800c98a:	8819      	ldrh	r1, [r3, #0]
 800c98c:	9806      	ldr	r0, [sp, #24]
 800c98e:	f004 fc53 	bl	8011238 <HAL_GPIO_ReadPin>
 800c992:	4681      	mov	r9, r0
 800c994:	e126      	b.n	800cbe4 <CheckAttachedButtons+0x290>
			switch (button[i].type) {
 800c996:	2b01      	cmp	r3, #1
 800c998:	d105      	bne.n	800c9a6 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800c99a:	464b      	mov	r3, r9
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d046      	beq.n	800ca2e <CheckAttachedButtons+0xda>
				else if (connected == GPIO_PIN_RESET)
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d100      	bne.n	800c9a6 <CheckAttachedButtons+0x52>
 800c9a4:	e1c6      	b.n	800cd34 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800c9a6:	465b      	mov	r3, fp
 800c9a8:	2b04      	cmp	r3, #4
 800c9aa:	d001      	beq.n	800c9b0 <CheckAttachedButtons+0x5c>
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d107      	bne.n	800c9c0 <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)
 800c9b0:	4baa      	ldr	r3, [pc, #680]	; (800cc5c <CheckAttachedButtons+0x308>)
 800c9b2:	58e3      	ldr	r3, [r4, r3]
 800c9b4:	4aaa      	ldr	r2, [pc, #680]	; (800cc60 <CheckAttachedButtons+0x30c>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d842      	bhi.n	800ca40 <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	4aa7      	ldr	r2, [pc, #668]	; (800cc5c <CheckAttachedButtons+0x308>)
 800c9be:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 800c9c0:	23fd      	movs	r3, #253	; 0xfd
 800c9c2:	465a      	mov	r2, fp
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d100      	bne.n	800c9cc <CheckAttachedButtons+0x78>
 800c9ca:	e1b7      	b.n	800cd3c <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800c9cc:	4ba3      	ldr	r3, [pc, #652]	; (800cc5c <CheckAttachedButtons+0x308>)
 800c9ce:	58e3      	ldr	r3, [r4, r3]
 800c9d0:	4aa4      	ldr	r2, [pc, #656]	; (800cc64 <CheckAttachedButtons+0x310>)
 800c9d2:	8812      	ldrh	r2, [r2, #0]
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d36f      	bcc.n	800cab8 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800c9d8:	d045      	beq.n	800ca66 <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c9da:	4ba3      	ldr	r3, [pc, #652]	; (800cc68 <CheckAttachedButtons+0x314>)
 800c9dc:	58e3      	ldr	r3, [r4, r3]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d202      	bcs.n	800c9e8 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;
 800c9e2:	4ba1      	ldr	r3, [pc, #644]	; (800cc68 <CheckAttachedButtons+0x314>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800c9e8:	4b9c      	ldr	r3, [pc, #624]	; (800cc5c <CheckAttachedButtons+0x308>)
 800c9ea:	58e3      	ldr	r3, [r4, r3]
 800c9ec:	4a9d      	ldr	r2, [pc, #628]	; (800cc64 <CheckAttachedButtons+0x310>)
 800c9ee:	8852      	ldrh	r2, [r2, #2]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d952      	bls.n	800ca9a <CheckAttachedButtons+0x146>
						&& pressCounter[i] < 500) {
 800c9f4:	22f4      	movs	r2, #244	; 0xf4
 800c9f6:	32ff      	adds	r2, #255	; 0xff
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d84e      	bhi.n	800ca9a <CheckAttachedButtons+0x146>
					if (clicked == 0)
 800c9fc:	4b9b      	ldr	r3, [pc, #620]	; (800cc6c <CheckAttachedButtons+0x318>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d137      	bne.n	800ca74 <CheckAttachedButtons+0x120>
						clicked = 1;		// Record a possible single click
 800ca04:	4b99      	ldr	r3, [pc, #612]	; (800cc6c <CheckAttachedButtons+0x318>)
 800ca06:	3af3      	subs	r2, #243	; 0xf3
 800ca08:	3aff      	subs	r2, #255	; 0xff
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	e054      	b.n	800cab8 <CheckAttachedButtons+0x164>
				if (connected == GPIO_PIN_SET)
 800ca0e:	464b      	mov	r3, r9
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d00f      	beq.n	800ca34 <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1c6      	bne.n	800c9a6 <CheckAttachedButtons+0x52>
					state = OPEN;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	469b      	mov	fp, r3
 800ca1c:	e18e      	b.n	800cd3c <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 800ca1e:	464b      	mov	r3, r9
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d00a      	beq.n	800ca3a <CheckAttachedButtons+0xe6>
				else if (connected == GPIO_PIN_RESET)
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1be      	bne.n	800c9a6 <CheckAttachedButtons+0x52>
					state = OFF;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	469b      	mov	fp, r3
 800ca2c:	e186      	b.n	800cd3c <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 800ca2e:	2304      	movs	r3, #4
 800ca30:	469b      	mov	fp, r3
 800ca32:	e7bd      	b.n	800c9b0 <CheckAttachedButtons+0x5c>
					state = CLOSED;
 800ca34:	2304      	movs	r3, #4
 800ca36:	469b      	mov	fp, r3
 800ca38:	e7ba      	b.n	800c9b0 <CheckAttachedButtons+0x5c>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	469b      	mov	fp, r3
 800ca3e:	e7b7      	b.n	800c9b0 <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;			// Reset debounce counter
 800ca40:	4b86      	ldr	r3, [pc, #536]	; (800cc5c <CheckAttachedButtons+0x308>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	50e2      	str	r2, [r4, r3]
 800ca46:	e7bb      	b.n	800c9c0 <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;		// Reset debounce counter
 800ca48:	4b87      	ldr	r3, [pc, #540]	; (800cc68 <CheckAttachedButtons+0x314>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	50e2      	str	r2, [r4, r3]
 800ca4e:	e17e      	b.n	800cd4e <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800ca50:	4b87      	ldr	r3, [pc, #540]	; (800cc70 <CheckAttachedButtons+0x31c>)
 800ca52:	5cf3      	ldrb	r3, [r6, r3]
 800ca54:	4a83      	ldr	r2, [pc, #524]	; (800cc64 <CheckAttachedButtons+0x310>)
 800ca56:	7952      	ldrb	r2, [r2, #5]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d200      	bcs.n	800ca5e <CheckAttachedButtons+0x10a>
 800ca5c:	e183      	b.n	800cd66 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 800ca5e:	3301      	adds	r3, #1
 800ca60:	4a83      	ldr	r2, [pc, #524]	; (800cc70 <CheckAttachedButtons+0x31c>)
 800ca62:	54b3      	strb	r3, [r6, r2]
 800ca64:	e7b2      	b.n	800c9cc <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800ca66:	2107      	movs	r1, #7
 800ca68:	4640      	mov	r0, r8
 800ca6a:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	497b      	ldr	r1, [pc, #492]	; (800cc5c <CheckAttachedButtons+0x308>)
 800ca70:	5063      	str	r3, [r4, r1]
 800ca72:	e7b2      	b.n	800c9da <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d11f      	bne.n	800cab8 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800ca78:	4b7d      	ldr	r3, [pc, #500]	; (800cc70 <CheckAttachedButtons+0x31c>)
 800ca7a:	5cf3      	ldrb	r3, [r6, r3]
 800ca7c:	4a79      	ldr	r2, [pc, #484]	; (800cc64 <CheckAttachedButtons+0x310>)
 800ca7e:	7912      	ldrb	r2, [r2, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d219      	bcs.n	800cab8 <CheckAttachedButtons+0x164>
										< BOS.buttons.maxInterClickTime) {
 800ca84:	4a77      	ldr	r2, [pc, #476]	; (800cc64 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 800ca86:	7952      	ldrb	r2, [r2, #5]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d915      	bls.n	800cab8 <CheckAttachedButtons+0x164>
							clicked = 3;	// Record a possible double click
 800ca8c:	4b77      	ldr	r3, [pc, #476]	; (800cc6c <CheckAttachedButtons+0x318>)
 800ca8e:	2203      	movs	r2, #3
 800ca90:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800ca92:	4b77      	ldr	r3, [pc, #476]	; (800cc70 <CheckAttachedButtons+0x31c>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	54f2      	strb	r2, [r6, r3]
 800ca98:	e00e      	b.n	800cab8 <CheckAttachedButtons+0x164>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800ca9a:	3bf5      	subs	r3, #245	; 0xf5
 800ca9c:	3bff      	subs	r3, #255	; 0xff
 800ca9e:	4a75      	ldr	r2, [pc, #468]	; (800cc74 <CheckAttachedButtons+0x320>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d809      	bhi.n	800cab8 <CheckAttachedButtons+0x164>
					if (clicked)
 800caa4:	4b71      	ldr	r3, [pc, #452]	; (800cc6c <CheckAttachedButtons+0x318>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <CheckAttachedButtons+0x15e>
						clicked = 0;						// Cannot be a click
 800caac:	4b6f      	ldr	r3, [pc, #444]	; (800cc6c <CheckAttachedButtons+0x318>)
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800cab2:	9803      	ldr	r0, [sp, #12]
 800cab4:	f7ff f9a4 	bl	800be00 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cab8:	4b6b      	ldr	r3, [pc, #428]	; (800cc68 <CheckAttachedButtons+0x314>)
 800caba:	58e3      	ldr	r3, [r4, r3]
 800cabc:	4a69      	ldr	r2, [pc, #420]	; (800cc64 <CheckAttachedButtons+0x310>)
 800cabe:	8812      	ldrh	r2, [r2, #0]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d34d      	bcc.n	800cb60 <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800cac4:	d02b      	beq.n	800cb1e <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800cac6:	4b65      	ldr	r3, [pc, #404]	; (800cc5c <CheckAttachedButtons+0x308>)
 800cac8:	58e3      	ldr	r3, [r4, r3]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d202      	bcs.n	800cad4 <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;
 800cace:	4b63      	ldr	r3, [pc, #396]	; (800cc5c <CheckAttachedButtons+0x308>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800cad4:	4b64      	ldr	r3, [pc, #400]	; (800cc68 <CheckAttachedButtons+0x314>)
 800cad6:	58e3      	ldr	r3, [r4, r3]
 800cad8:	4a62      	ldr	r2, [pc, #392]	; (800cc64 <CheckAttachedButtons+0x310>)
 800cada:	8852      	ldrh	r2, [r2, #2]
 800cadc:	4293      	cmp	r3, r2
 800cade:	d93a      	bls.n	800cb56 <CheckAttachedButtons+0x202>
						&& releaseCounter[i] < 500) {
 800cae0:	22f4      	movs	r2, #244	; 0xf4
 800cae2:	32ff      	adds	r2, #255	; 0xff
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d836      	bhi.n	800cb56 <CheckAttachedButtons+0x202>
					if (clicked == 1) {
 800cae8:	4b60      	ldr	r3, [pc, #384]	; (800cc6c <CheckAttachedButtons+0x318>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d01d      	beq.n	800cb2c <CheckAttachedButtons+0x1d8>
					} else if (clicked == 3) {
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d135      	bne.n	800cb60 <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800caf4:	3303      	adds	r3, #3
 800caf6:	4642      	mov	r2, r8
 800caf8:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 800cafa:	4b5c      	ldr	r3, [pc, #368]	; (800cc6c <CheckAttachedButtons+0x318>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800cb00:	4b5d      	ldr	r3, [pc, #372]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d13f      	bne.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800cb08:	4643      	mov	r3, r8
 800cb0a:	7c5b      	ldrb	r3, [r3, #17]
 800cb0c:	079b      	lsls	r3, r3, #30
 800cb0e:	d53b      	bpl.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cb10:	4b59      	ldr	r3, [pc, #356]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cb12:	2201      	movs	r2, #1
 800cb14:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800cb16:	9803      	ldr	r0, [sp, #12]
 800cb18:	f7ff ff18 	bl	800c94c <buttonDblClickedCallback>
 800cb1c:	e034      	b.n	800cb88 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800cb1e:	2108      	movs	r1, #8
 800cb20:	4640      	mov	r0, r8
 800cb22:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 800cb24:	3301      	adds	r3, #1
 800cb26:	4950      	ldr	r1, [pc, #320]	; (800cc68 <CheckAttachedButtons+0x314>)
 800cb28:	5063      	str	r3, [r4, r1]
 800cb2a:	e7cc      	b.n	800cac6 <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;// Record a single button click event
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	4642      	mov	r2, r8
 800cb30:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 800cb32:	4b4e      	ldr	r3, [pc, #312]	; (800cc6c <CheckAttachedButtons+0x318>)
 800cb34:	2202      	movs	r2, #2
 800cb36:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800cb38:	4b4f      	ldr	r3, [pc, #316]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d123      	bne.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800cb40:	4643      	mov	r3, r8
 800cb42:	7c5b      	ldrb	r3, [r3, #17]
 800cb44:	07db      	lsls	r3, r3, #31
 800cb46:	d51f      	bpl.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cb48:	4b4b      	ldr	r3, [pc, #300]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800cb4e:	9803      	ldr	r0, [sp, #12]
 800cb50:	f7ff fefb 	bl	800c94a <buttonClickedCallback>
 800cb54:	e018      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& releaseCounter[i] < 0xFFFF) {
 800cb56:	3bf5      	subs	r3, #245	; 0xf5
 800cb58:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800cb5a:	4a46      	ldr	r2, [pc, #280]	; (800cc74 <CheckAttachedButtons+0x320>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d909      	bls.n	800cb74 <CheckAttachedButtons+0x220>
			switch (button[i].state) {
 800cb60:	4643      	mov	r3, r8
 800cb62:	7a5b      	ldrb	r3, [r3, #9]
 800cb64:	3b05      	subs	r3, #5
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	2a09      	cmp	r2, #9
 800cb6a:	d80d      	bhi.n	800cb88 <CheckAttachedButtons+0x234>
 800cb6c:	0093      	lsls	r3, r2, #2
 800cb6e:	4a43      	ldr	r2, [pc, #268]	; (800cc7c <CheckAttachedButtons+0x328>)
 800cb70:	58d3      	ldr	r3, [r2, r3]
 800cb72:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800cb74:	9803      	ldr	r0, [sp, #12]
 800cb76:	f7ff f981 	bl	800be7c <CheckForTimedButtonRelease>
 800cb7a:	e7f1      	b.n	800cb60 <CheckAttachedButtons+0x20c>
				buttonPressedCallback(i);
 800cb7c:	9803      	ldr	r0, [sp, #12]
 800cb7e:	f7ff f93d 	bl	800bdfc <buttonPressedCallback>
				button[i].state = NONE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	4642      	mov	r2, r8
 800cb86:	7253      	strb	r3, [r2, #9]
 800cb88:	3601      	adds	r6, #1
 800cb8a:	3509      	adds	r5, #9
 800cb8c:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cb8e:	2c10      	cmp	r4, #16
 800cb90:	d100      	bne.n	800cb94 <CheckAttachedButtons+0x240>
 800cb92:	e0ee      	b.n	800cd72 <CheckAttachedButtons+0x41e>
 800cb94:	b2f3      	uxtb	r3, r6
 800cb96:	9303      	str	r3, [sp, #12]
 800cb98:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 800cb9a:	7aab      	ldrb	r3, [r5, #10]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d0f3      	beq.n	800cb88 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)
 800cba0:	4b35      	ldr	r3, [pc, #212]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d100      	bne.n	800cbaa <CheckAttachedButtons+0x256>
				button[i].state = NONE;
 800cba8:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800cbaa:	230e      	movs	r3, #14
 800cbac:	aa02      	add	r2, sp, #8
 800cbae:	4694      	mov	ip, r2
 800cbb0:	4463      	add	r3, ip
 800cbb2:	469a      	mov	sl, r3
 800cbb4:	af05      	add	r7, sp, #20
 800cbb6:	9700      	str	r7, [sp, #0]
 800cbb8:	ab06      	add	r3, sp, #24
 800cbba:	4652      	mov	r2, sl
 800cbbc:	a907      	add	r1, sp, #28
 800cbbe:	9803      	ldr	r0, [sp, #12]
 800cbc0:	f7ff f866 	bl	800bc90 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cbc4:	4653      	mov	r3, sl
 800cbc6:	8819      	ldrh	r1, [r3, #0]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	9807      	ldr	r0, [sp, #28]
 800cbcc:	f004 fb3a 	bl	8011244 <HAL_GPIO_WritePin>
			Delay_us(10);
 800cbd0:	200a      	movs	r0, #10
 800cbd2:	f000 fcad 	bl	800d530 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800cbd6:	8839      	ldrh	r1, [r7, #0]
 800cbd8:	9806      	ldr	r0, [sp, #24]
 800cbda:	f004 fb2d 	bl	8011238 <HAL_GPIO_ReadPin>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d100      	bne.n	800cbe4 <CheckAttachedButtons+0x290>
 800cbe2:	e6c5      	b.n	800c970 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cbe4:	230e      	movs	r3, #14
 800cbe6:	aa02      	add	r2, sp, #8
 800cbe8:	4694      	mov	ip, r2
 800cbea:	4463      	add	r3, ip
 800cbec:	8819      	ldrh	r1, [r3, #0]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	9807      	ldr	r0, [sp, #28]
 800cbf2:	f004 fb27 	bl	8011244 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800cbf6:	4643      	mov	r3, r8
 800cbf8:	7a9b      	ldrb	r3, [r3, #10]
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d100      	bne.n	800cc00 <CheckAttachedButtons+0x2ac>
 800cbfe:	e706      	b.n	800ca0e <CheckAttachedButtons+0xba>
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	2a02      	cmp	r2, #2
 800cc04:	d800      	bhi.n	800cc08 <CheckAttachedButtons+0x2b4>
 800cc06:	e6c6      	b.n	800c996 <CheckAttachedButtons+0x42>
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d100      	bne.n	800cc0e <CheckAttachedButtons+0x2ba>
 800cc0c:	e707      	b.n	800ca1e <CheckAttachedButtons+0xca>
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d000      	beq.n	800cc14 <CheckAttachedButtons+0x2c0>
 800cc12:	e6c8      	b.n	800c9a6 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800cc14:	464b      	mov	r3, r9
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d100      	bne.n	800cc1c <CheckAttachedButtons+0x2c8>
 800cc1a:	e08e      	b.n	800cd3a <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d000      	beq.n	800cc22 <CheckAttachedButtons+0x2ce>
 800cc20:	e6c1      	b.n	800c9a6 <CheckAttachedButtons+0x52>
 800cc22:	2302      	movs	r3, #2
 800cc24:	469b      	mov	fp, r3
 800cc26:	e6c3      	b.n	800c9b0 <CheckAttachedButtons+0x5c>
				buttonReleasedCallback(i);
 800cc28:	9803      	ldr	r0, [sp, #12]
 800cc2a:	f7ff fe8d 	bl	800c948 <buttonReleasedCallback>
				button[i].state = NONE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4642      	mov	r2, r8
 800cc32:	7253      	strb	r3, [r2, #9]
				break;
 800cc34:	e7a8      	b.n	800cb88 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800cc36:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1a4      	bne.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800cc3e:	4643      	mov	r3, r8
 800cc40:	7c5b      	ldrb	r3, [r3, #17]
 800cc42:	075b      	lsls	r3, r3, #29
 800cc44:	d5a0      	bpl.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cc46:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <CheckAttachedButtons+0x324>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	9803      	ldr	r0, [sp, #12]
 800cc50:	f7ff fe7d 	bl	800c94e <buttonPressedForXCallback>
 800cc54:	e798      	b.n	800cb88 <CheckAttachedButtons+0x234>
 800cc56:	46c0      	nop			; (mov r8, r8)
 800cc58:	200016a8 	.word	0x200016a8
 800cc5c:	200016e0 	.word	0x200016e0
 800cc60:	0000fffe 	.word	0x0000fffe
 800cc64:	20005adc 	.word	0x20005adc
 800cc68:	200016f0 	.word	0x200016f0
 800cc6c:	200016cc 	.word	0x200016cc
 800cc70:	200016d4 	.word	0x200016d4
 800cc74:	0000fe0a 	.word	0x0000fe0a
 800cc78:	200016d8 	.word	0x200016d8
 800cc7c:	0801958c 	.word	0x0801958c
				if (!delayButtonStateReset
 800cc80:	4b3f      	ldr	r3, [pc, #252]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d000      	beq.n	800cc8a <CheckAttachedButtons+0x336>
 800cc88:	e77e      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800cc8a:	4643      	mov	r3, r8
 800cc8c:	7c5b      	ldrb	r3, [r3, #17]
 800cc8e:	071b      	lsls	r3, r3, #28
 800cc90:	d400      	bmi.n	800cc94 <CheckAttachedButtons+0x340>
 800cc92:	e779      	b.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cc94:	4b3a      	ldr	r3, [pc, #232]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cc96:	2201      	movs	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800cc9a:	2102      	movs	r1, #2
 800cc9c:	9803      	ldr	r0, [sp, #12]
 800cc9e:	f7ff fe56 	bl	800c94e <buttonPressedForXCallback>
 800cca2:	e771      	b.n	800cb88 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800cca4:	4b36      	ldr	r3, [pc, #216]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d000      	beq.n	800ccae <CheckAttachedButtons+0x35a>
 800ccac:	e76c      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800ccae:	4643      	mov	r3, r8
 800ccb0:	7c5b      	ldrb	r3, [r3, #17]
 800ccb2:	06db      	lsls	r3, r3, #27
 800ccb4:	d400      	bmi.n	800ccb8 <CheckAttachedButtons+0x364>
 800ccb6:	e767      	b.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800ccb8:	4b31      	ldr	r3, [pc, #196]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800ccba:	2201      	movs	r2, #1
 800ccbc:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ccbe:	2103      	movs	r1, #3
 800ccc0:	9803      	ldr	r0, [sp, #12]
 800ccc2:	f7ff fe44 	bl	800c94e <buttonPressedForXCallback>
 800ccc6:	e75f      	b.n	800cb88 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800ccc8:	4b2d      	ldr	r3, [pc, #180]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d000      	beq.n	800ccd2 <CheckAttachedButtons+0x37e>
 800ccd0:	e75a      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800ccd2:	4643      	mov	r3, r8
 800ccd4:	7c5b      	ldrb	r3, [r3, #17]
 800ccd6:	069b      	lsls	r3, r3, #26
 800ccd8:	d400      	bmi.n	800ccdc <CheckAttachedButtons+0x388>
 800ccda:	e755      	b.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800ccdc:	4b28      	ldr	r3, [pc, #160]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800cce2:	2101      	movs	r1, #1
 800cce4:	9803      	ldr	r0, [sp, #12]
 800cce6:	f7ff fe33 	bl	800c950 <buttonReleasedForYCallback>
 800ccea:	e74d      	b.n	800cb88 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800ccec:	4b24      	ldr	r3, [pc, #144]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d000      	beq.n	800ccf6 <CheckAttachedButtons+0x3a2>
 800ccf4:	e748      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800ccf6:	4643      	mov	r3, r8
 800ccf8:	7c5b      	ldrb	r3, [r3, #17]
 800ccfa:	065b      	lsls	r3, r3, #25
 800ccfc:	d400      	bmi.n	800cd00 <CheckAttachedButtons+0x3ac>
 800ccfe:	e743      	b.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cd00:	4b1f      	ldr	r3, [pc, #124]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800cd06:	2102      	movs	r1, #2
 800cd08:	9803      	ldr	r0, [sp, #12]
 800cd0a:	f7ff fe21 	bl	800c950 <buttonReleasedForYCallback>
 800cd0e:	e73b      	b.n	800cb88 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800cd10:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d000      	beq.n	800cd1a <CheckAttachedButtons+0x3c6>
 800cd18:	e736      	b.n	800cb88 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800cd1a:	4643      	mov	r3, r8
 800cd1c:	7c5b      	ldrb	r3, [r3, #17]
 800cd1e:	2b7f      	cmp	r3, #127	; 0x7f
 800cd20:	d800      	bhi.n	800cd24 <CheckAttachedButtons+0x3d0>
 800cd22:	e731      	b.n	800cb88 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800cd24:	4b16      	ldr	r3, [pc, #88]	; (800cd80 <CheckAttachedButtons+0x42c>)
 800cd26:	2201      	movs	r2, #1
 800cd28:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cd2a:	2103      	movs	r1, #3
 800cd2c:	9803      	ldr	r0, [sp, #12]
 800cd2e:	f7ff fe0f 	bl	800c950 <buttonReleasedForYCallback>
 800cd32:	e729      	b.n	800cb88 <CheckAttachedButtons+0x234>
					state = OPEN;
 800cd34:	2303      	movs	r3, #3
 800cd36:	469b      	mov	fp, r3
 800cd38:	e000      	b.n	800cd3c <CheckAttachedButtons+0x3e8>
					state = OFF;
 800cd3a:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 800cd3c:	4b11      	ldr	r3, [pc, #68]	; (800cd84 <CheckAttachedButtons+0x430>)
 800cd3e:	58e3      	ldr	r3, [r4, r3]
 800cd40:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <CheckAttachedButtons+0x434>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d900      	bls.n	800cd48 <CheckAttachedButtons+0x3f4>
 800cd46:	e67f      	b.n	800ca48 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 800cd48:	3301      	adds	r3, #1
 800cd4a:	4a0e      	ldr	r2, [pc, #56]	; (800cd84 <CheckAttachedButtons+0x430>)
 800cd4c:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 800cd4e:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <CheckAttachedButtons+0x438>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d100      	bne.n	800cd58 <CheckAttachedButtons+0x404>
 800cd56:	e67b      	b.n	800ca50 <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800cd58:	4b0d      	ldr	r3, [pc, #52]	; (800cd90 <CheckAttachedButtons+0x43c>)
 800cd5a:	5cf2      	ldrb	r2, [r6, r3]
 800cd5c:	4b0d      	ldr	r3, [pc, #52]	; (800cd94 <CheckAttachedButtons+0x440>)
 800cd5e:	795b      	ldrb	r3, [r3, #5]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d800      	bhi.n	800cd66 <CheckAttachedButtons+0x412>
 800cd64:	e632      	b.n	800c9cc <CheckAttachedButtons+0x78>
					clicked = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	4a08      	ldr	r2, [pc, #32]	; (800cd8c <CheckAttachedButtons+0x438>)
 800cd6a:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cd6c:	4a08      	ldr	r2, [pc, #32]	; (800cd90 <CheckAttachedButtons+0x43c>)
 800cd6e:	54b3      	strb	r3, [r6, r2]
 800cd70:	e62c      	b.n	800c9cc <CheckAttachedButtons+0x78>
}
 800cd72:	b009      	add	sp, #36	; 0x24
 800cd74:	bc3c      	pop	{r2, r3, r4, r5}
 800cd76:	4690      	mov	r8, r2
 800cd78:	4699      	mov	r9, r3
 800cd7a:	46a2      	mov	sl, r4
 800cd7c:	46ab      	mov	fp, r5
 800cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd80:	200016d8 	.word	0x200016d8
 800cd84:	200016f0 	.word	0x200016f0
 800cd88:	0000fffe 	.word	0x0000fffe
 800cd8c:	200016cc 	.word	0x200016cc
 800cd90:	200016d4 	.word	0x200016d4
 800cd94:	20005adc 	.word	0x20005adc

0800cd98 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	4b03      	ldr	r3, [pc, #12]	; (800cdac <NVIC_SystemReset+0x14>)
 800cd9e:	4a04      	ldr	r2, [pc, #16]	; (800cdb0 <NVIC_SystemReset+0x18>)
 800cda0:	60da      	str	r2, [r3, #12]
 800cda2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	e7fd      	b.n	800cda6 <NVIC_SystemReset+0xe>
 800cdaa:	46c0      	nop			; (mov r8, r8)
 800cdac:	e000ed00 	.word	0xe000ed00
 800cdb0:	05fa0004 	.word	0x05fa0004

0800cdb4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cdb4:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cdb6:	f002 fdd7 	bl	800f968 <HAL_IncTick>
  osSystickHandler();  
 800cdba:	f000 ff05 	bl	800dbc8 <osSystickHandler>

}
 800cdbe:	bd10      	pop	{r4, pc}

0800cdc0 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cdc0:	b530      	push	{r4, r5, lr}
 800cdc2:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800cdc4:	4d09      	ldr	r5, [pc, #36]	; (800cdec <HardFault_Handler+0x2c>)
 800cdc6:	7828      	ldrb	r0, [r5, #0]
 800cdc8:	24ff      	movs	r4, #255	; 0xff
 800cdca:	9400      	str	r4, [sp, #0]
 800cdcc:	23ff      	movs	r3, #255	; 0xff
 800cdce:	2211      	movs	r2, #17
 800cdd0:	4907      	ldr	r1, [pc, #28]	; (800cdf0 <HardFault_Handler+0x30>)
 800cdd2:	f000 fcff 	bl	800d7d4 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <HardFault_Handler+0x34>)
 800cdd8:	6819      	ldr	r1, [r3, #0]
 800cdda:	7828      	ldrb	r0, [r5, #0]
 800cddc:	9400      	str	r4, [sp, #0]
 800cdde:	23ff      	movs	r3, #255	; 0xff
 800cde0:	220f      	movs	r2, #15
 800cde2:	f000 fcf7 	bl	800d7d4 <writePxMutex>
	NVIC_SystemReset();
 800cde6:	f7ff ffd7 	bl	800cd98 <NVIC_SystemReset>
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	2000060b 	.word	0x2000060b
 800cdf0:	080195b4 	.word	0x080195b4
 800cdf4:	200000a8 	.word	0x200000a8

0800cdf8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cdf8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cdfa:	4802      	ldr	r0, [pc, #8]	; (800ce04 <USART1_IRQHandler+0xc>)
 800cdfc:	f005 fec1 	bl	8012b82 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	46c0      	nop			; (mov r8, r8)
 800ce04:	20005cb4 	.word	0x20005cb4

0800ce08 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ce08:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ce0a:	4802      	ldr	r0, [pc, #8]	; (800ce14 <USART2_IRQHandler+0xc>)
 800ce0c:	f005 feb9 	bl	8012b82 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	46c0      	nop			; (mov r8, r8)
 800ce14:	20005e24 	.word	0x20005e24

0800ce18 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ce18:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ce1a:	4805      	ldr	r0, [pc, #20]	; (800ce30 <USART3_8_IRQHandler+0x18>)
 800ce1c:	f005 feb1 	bl	8012b82 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800ce20:	4804      	ldr	r0, [pc, #16]	; (800ce34 <USART3_8_IRQHandler+0x1c>)
 800ce22:	f005 feae 	bl	8012b82 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800ce26:	4804      	ldr	r0, [pc, #16]	; (800ce38 <USART3_8_IRQHandler+0x20>)
 800ce28:	f005 feab 	bl	8012b82 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	20005c04 	.word	0x20005c04
 800ce34:	20005db0 	.word	0x20005db0
 800ce38:	20005d38 	.word	0x20005d38

0800ce3c <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800ce3c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ce3e:	2001      	movs	r0, #1
 800ce40:	f7fa f93a 	bl	80070b8 <DMA_IRQHandler>
	
}
 800ce44:	bd10      	pop	{r4, pc}
	...

0800ce48 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800ce48:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	06db      	lsls	r3, r3, #27
 800ce50:	d408      	bmi.n	800ce64 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800ce52:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	05db      	lsls	r3, r3, #23
 800ce58:	d408      	bmi.n	800ce6c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800ce5a:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	06db      	lsls	r3, r3, #27
 800ce60:	d408      	bmi.n	800ce74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800ce62:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800ce64:	2005      	movs	r0, #5
 800ce66:	f7fa f927 	bl	80070b8 <DMA_IRQHandler>
 800ce6a:	e7fa      	b.n	800ce62 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800ce6c:	2002      	movs	r0, #2
 800ce6e:	f7fa f923 	bl	80070b8 <DMA_IRQHandler>
 800ce72:	e7f6      	b.n	800ce62 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800ce74:	4803      	ldr	r0, [pc, #12]	; (800ce84 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800ce76:	f003 facd 	bl	8010414 <HAL_DMA_IRQHandler>
}
 800ce7a:	e7f2      	b.n	800ce62 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800ce7c:	40020400 	.word	0x40020400
 800ce80:	40020000 	.word	0x40020000
 800ce84:	2000149c 	.word	0x2000149c

0800ce88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800ce88:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800ce8a:	4b14      	ldr	r3, [pc, #80]	; (800cedc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	03db      	lsls	r3, r3, #15
 800ce90:	d413      	bmi.n	800ceba <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800ce92:	4b12      	ldr	r3, [pc, #72]	; (800cedc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	02db      	lsls	r3, r3, #11
 800ce98:	d413      	bmi.n	800cec2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800ce9a:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	05db      	lsls	r3, r3, #23
 800cea0:	d413      	bmi.n	800ceca <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cea2:	4b0e      	ldr	r3, [pc, #56]	; (800cedc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	04db      	lsls	r3, r3, #19
 800cea8:	d413      	bmi.n	800ced2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800ceaa:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	01db      	lsls	r3, r3, #7
 800ceb0:	d506      	bpl.n	800cec0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800ceb2:	480c      	ldr	r0, [pc, #48]	; (800cee4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800ceb4:	f003 faae 	bl	8010414 <HAL_DMA_IRQHandler>
	}
}
 800ceb8:	e002      	b.n	800cec0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800ceba:	2003      	movs	r0, #3
 800cebc:	f7fa f8fc 	bl	80070b8 <DMA_IRQHandler>
}
 800cec0:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cec2:	2004      	movs	r0, #4
 800cec4:	f7fa f8f8 	bl	80070b8 <DMA_IRQHandler>
 800cec8:	e7fa      	b.n	800cec0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800ceca:	2006      	movs	r0, #6
 800cecc:	f7fa f8f4 	bl	80070b8 <DMA_IRQHandler>
 800ced0:	e7f6      	b.n	800cec0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800ced2:	4805      	ldr	r0, [pc, #20]	; (800cee8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800ced4:	f003 fa9e 	bl	8010414 <HAL_DMA_IRQHandler>
 800ced8:	e7f2      	b.n	800cec0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800ceda:	46c0      	nop			; (mov r8, r8)
 800cedc:	40020000 	.word	0x40020000
 800cee0:	40020400 	.word	0x40020400
 800cee4:	2000150c 	.word	0x2000150c
 800cee8:	200014d4 	.word	0x200014d4

0800ceec <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ceec:	b510      	push	{r4, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cef2:	2300      	movs	r3, #0
 800cef4:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cef6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cefc:	f7fd feb4 	bl	800ac68 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cf00:	0020      	movs	r0, r4
 800cf02:	f7fd f801 	bl	8009f08 <GetPort>
 800cf06:	0080      	lsls	r0, r0, #2
 800cf08:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <HAL_UART_TxCpltCallback+0x2c>)
 800cf0a:	58c0      	ldr	r0, [r0, r3]
 800cf0c:	a901      	add	r1, sp, #4
 800cf0e:	f001 f999 	bl	800e244 <xQueueGiveFromISR>
}
 800cf12:	b002      	add	sp, #8
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	46c0      	nop			; (mov r8, r8)
 800cf18:	20005b60 	.word	0x20005b60

0800cf1c <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf1c:	b510      	push	{r4, lr}
 800cf1e:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cf20:	2369      	movs	r3, #105	; 0x69
 800cf22:	2201      	movs	r2, #1
 800cf24:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cf26:	f7fc ffef 	bl	8009f08 <GetPort>
	if (portStatus[port] == STREAM) {
 800cf2a:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <HAL_UART_ErrorCallback+0x40>)
 800cf2c:	5c1b      	ldrb	r3, [r3, r0]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d005      	beq.n	800cf3e <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cf32:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <HAL_UART_ErrorCallback+0x44>)
 800cf34:	1818      	adds	r0, r3, r0
 800cf36:	3801      	subs	r0, #1
 800cf38:	2301      	movs	r3, #1
 800cf3a:	7003      	strb	r3, [r0, #0]
	}	
}
 800cf3c:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	b292      	uxth	r2, r2
 800cf46:	3801      	subs	r0, #1
 800cf48:	0080      	lsls	r0, r0, #2
 800cf4a:	4b06      	ldr	r3, [pc, #24]	; (800cf64 <HAL_UART_ErrorCallback+0x48>)
 800cf4c:	58c3      	ldr	r3, [r0, r3]
 800cf4e:	6819      	ldr	r1, [r3, #0]
 800cf50:	3128      	adds	r1, #40	; 0x28
 800cf52:	0020      	movs	r0, r4
 800cf54:	f005 fa1c 	bl	8012390 <HAL_UART_Receive_DMA>
 800cf58:	e7f0      	b.n	800cf3c <HAL_UART_ErrorCallback+0x20>
 800cf5a:	46c0      	nop			; (mov r8, r8)
 800cf5c:	20000bd0 	.word	0x20000bd0
 800cf60:	20000da0 	.word	0x20000da0
 800cf64:	20001030 	.word	0x20001030

0800cf68 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	46de      	mov	lr, fp
 800cf6c:	4657      	mov	r7, sl
 800cf6e:	464e      	mov	r6, r9
 800cf70:	4645      	mov	r5, r8
 800cf72:	b5e0      	push	{r5, r6, r7, lr}
 800cf74:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800cf76:	f7fc ffc7 	bl	8009f08 <GetPort>
	uint8_t port_index = port_number - 1;
 800cf7a:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	4a6c      	ldr	r2, [pc, #432]	; (800d130 <HAL_UART_RxCpltCallback+0x1c8>)
 800cf80:	5cd2      	ldrb	r2, [r2, r3]
 800cf82:	2a0d      	cmp	r2, #13
 800cf84:	d010      	beq.n	800cfa8 <HAL_UART_RxCpltCallback+0x40>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800cf86:	0005      	movs	r5, r0
 800cf88:	496a      	ldr	r1, [pc, #424]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800cf8a:	5c09      	ldrb	r1, [r1, r0]
 800cf8c:	2903      	cmp	r1, #3
 800cf8e:	d036      	beq.n	800cffe <HAL_UART_RxCpltCallback+0x96>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800cf90:	2a48      	cmp	r2, #72	; 0x48
 800cf92:	d047      	beq.n	800d024 <HAL_UART_RxCpltCallback+0xbc>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800cf94:	2a5a      	cmp	r2, #90	; 0x5a
 800cf96:	d000      	beq.n	800cf9a <HAL_UART_RxCpltCallback+0x32>
 800cf98:	e0a7      	b.n	800d0ea <HAL_UART_RxCpltCallback+0x182>
 800cf9a:	2907      	cmp	r1, #7
 800cf9c:	d000      	beq.n	800cfa0 <HAL_UART_RxCpltCallback+0x38>
 800cf9e:	e0a6      	b.n	800d0ee <HAL_UART_RxCpltCallback+0x186>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800cfa0:	4b64      	ldr	r3, [pc, #400]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800cfa2:	3a52      	subs	r2, #82	; 0x52
 800cfa4:	541a      	strb	r2, [r3, r0]
 800cfa6:	e02d      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cfa8:	4962      	ldr	r1, [pc, #392]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800cfaa:	5c09      	ldrb	r1, [r1, r0]
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d000      	beq.n	800cfb2 <HAL_UART_RxCpltCallback+0x4a>
 800cfb0:	e095      	b.n	800d0de <HAL_UART_RxCpltCallback+0x176>
        for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800cfb2:	2300      	movs	r3, #0
            if(portStatus[i] == CLI)
 800cfb4:	495f      	ldr	r1, [pc, #380]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
                portStatus[i] = FREE;
 800cfb6:	2500      	movs	r5, #0
 800cfb8:	e002      	b.n	800cfc0 <HAL_UART_RxCpltCallback+0x58>
        for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800cfba:	3301      	adds	r3, #1
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d006      	beq.n	800cfce <HAL_UART_RxCpltCallback+0x66>
            if(portStatus[i] == CLI)
 800cfc0:	5cca      	ldrb	r2, [r1, r3]
 800cfc2:	2a03      	cmp	r2, #3
 800cfc4:	d1f9      	bne.n	800cfba <HAL_UART_RxCpltCallback+0x52>
                portStatus[i] = FREE;
 800cfc6:	4a5b      	ldr	r2, [pc, #364]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800cfc8:	18d2      	adds	r2, r2, r3
 800cfca:	7015      	strb	r5, [r2, #0]
 800cfcc:	e7f5      	b.n	800cfba <HAL_UART_RxCpltCallback+0x52>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800cfce:	4b59      	ldr	r3, [pc, #356]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800cfd4:	4b58      	ldr	r3, [pc, #352]	; (800d138 <HAL_UART_RxCpltCallback+0x1d0>)
 800cfd6:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800cfd8:	4b58      	ldr	r3, [pc, #352]	; (800d13c <HAL_UART_RxCpltCallback+0x1d4>)
 800cfda:	6818      	ldr	r0, [r3, #0]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	3a01      	subs	r2, #1
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	f002 f8f5 	bl	800f1d0 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800cfe6:	4b56      	ldr	r3, [pc, #344]	; (800d140 <HAL_UART_RxCpltCallback+0x1d8>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d003      	beq.n	800cff6 <HAL_UART_RxCpltCallback+0x8e>
		Activate_CLI_For_First_Time_Flag = 1;
 800cfee:	4b54      	ldr	r3, [pc, #336]	; (800d140 <HAL_UART_RxCpltCallback+0x1d8>)
 800cff0:	2201      	movs	r2, #1
 800cff2:	701a      	strb	r2, [r3, #0]
 800cff4:	e006      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800cff6:	4b53      	ldr	r3, [pc, #332]	; (800d144 <HAL_UART_RxCpltCallback+0x1dc>)
 800cff8:	2201      	movs	r2, #1
 800cffa:	701a      	strb	r2, [r3, #0]
 800cffc:	e7f7      	b.n	800cfee <HAL_UART_RxCpltCallback+0x86>
		Read_In_CLI_Task_Flag = 1;
 800cffe:	4b51      	ldr	r3, [pc, #324]	; (800d144 <HAL_UART_RxCpltCallback+0x1dc>)
 800d000:	2201      	movs	r2, #1
 800d002:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d004:	0020      	movs	r0, r4
 800d006:	f7fc ff7f 	bl	8009f08 <GetPort>
 800d00a:	1e41      	subs	r1, r0, #1
 800d00c:	4848      	ldr	r0, [pc, #288]	; (800d130 <HAL_UART_RxCpltCallback+0x1c8>)
 800d00e:	1809      	adds	r1, r1, r0
 800d010:	2201      	movs	r2, #1
 800d012:	0020      	movs	r0, r4
 800d014:	f005 f9bc 	bl	8012390 <HAL_UART_Receive_DMA>
}
 800d018:	bc3c      	pop	{r2, r3, r4, r5}
 800d01a:	4690      	mov	r8, r2
 800d01c:	4699      	mov	r9, r3
 800d01e:	46a2      	mov	sl, r4
 800d020:	46ab      	mov	fp, r5
 800d022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d024:	2900      	cmp	r1, #0
 800d026:	d160      	bne.n	800d0ea <HAL_UART_RxCpltCallback+0x182>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d028:	4b42      	ldr	r3, [pc, #264]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800d02a:	3a41      	subs	r2, #65	; 0x41
 800d02c:	541a      	strb	r2, [r3, r0]
 800d02e:	e7e9      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800d030:	4b40      	ldr	r3, [pc, #256]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800d032:	2200      	movs	r2, #0
 800d034:	555a      	strb	r2, [r3, r5]
 800d036:	e7e5      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
		portStatus[port_number] =MSG; // Receive length byte.
 800d038:	493e      	ldr	r1, [pc, #248]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800d03a:	2001      	movs	r0, #1
 800d03c:	5548      	strb	r0, [r1, r5]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d03e:	4942      	ldr	r1, [pc, #264]	; (800d148 <HAL_UART_RxCpltCallback+0x1e0>)
 800d040:	5cce      	ldrb	r6, [r1, r3]
 800d042:	00f1      	lsls	r1, r6, #3
 800d044:	1b8e      	subs	r6, r1, r6
 800d046:	0099      	lsls	r1, r3, #2
 800d048:	18c9      	adds	r1, r1, r3
 800d04a:	00c8      	lsls	r0, r1, #3
 800d04c:	1a41      	subs	r1, r0, r1
 800d04e:	1989      	adds	r1, r1, r6
 800d050:	00c9      	lsls	r1, r1, #3
 800d052:	483e      	ldr	r0, [pc, #248]	; (800d14c <HAL_UART_RxCpltCallback+0x1e4>)
 800d054:	1841      	adds	r1, r0, r1
 800d056:	708a      	strb	r2, [r1, #2]
		temp_index[port_index] = 3;
 800d058:	493d      	ldr	r1, [pc, #244]	; (800d150 <HAL_UART_RxCpltCallback+0x1e8>)
 800d05a:	2003      	movs	r0, #3
 800d05c:	54c8      	strb	r0, [r1, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d05e:	3201      	adds	r2, #1
 800d060:	493c      	ldr	r1, [pc, #240]	; (800d154 <HAL_UART_RxCpltCallback+0x1ec>)
 800d062:	54ca      	strb	r2, [r1, r3]
 800d064:	e7ce      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d066:	4e38      	ldr	r6, [pc, #224]	; (800d148 <HAL_UART_RxCpltCallback+0x1e0>)
 800d068:	5cf6      	ldrb	r6, [r6, r3]
 800d06a:	46b3      	mov	fp, r6
 800d06c:	4f38      	ldr	r7, [pc, #224]	; (800d150 <HAL_UART_RxCpltCallback+0x1e8>)
 800d06e:	46b8      	mov	r8, r7
 800d070:	5cff      	ldrb	r7, [r7, r3]
 800d072:	46bc      	mov	ip, r7
 800d074:	00f7      	lsls	r7, r6, #3
 800d076:	1bbf      	subs	r7, r7, r6
 800d078:	46ba      	mov	sl, r7
 800d07a:	009f      	lsls	r7, r3, #2
 800d07c:	46b9      	mov	r9, r7
 800d07e:	4499      	add	r9, r3
 800d080:	464f      	mov	r7, r9
 800d082:	00ff      	lsls	r7, r7, #3
 800d084:	464e      	mov	r6, r9
 800d086:	1bbf      	subs	r7, r7, r6
 800d088:	4457      	add	r7, sl
 800d08a:	00ff      	lsls	r7, r7, #3
 800d08c:	4e2f      	ldr	r6, [pc, #188]	; (800d14c <HAL_UART_RxCpltCallback+0x1e4>)
 800d08e:	46b1      	mov	r9, r6
 800d090:	444f      	add	r7, r9
 800d092:	4666      	mov	r6, ip
 800d094:	55ba      	strb	r2, [r7, r6]
			temp_index[port_index]++;
 800d096:	4662      	mov	r2, ip
 800d098:	3201      	adds	r2, #1
 800d09a:	4646      	mov	r6, r8
 800d09c:	54f2      	strb	r2, [r6, r3]
			temp_length[port_index]--;
 800d09e:	3901      	subs	r1, #1
 800d0a0:	4a2c      	ldr	r2, [pc, #176]	; (800d154 <HAL_UART_RxCpltCallback+0x1ec>)
 800d0a2:	54d1      	strb	r1, [r2, r3]
			MSG_Buffer_Index_End[port_index]++;
 800d0a4:	465e      	mov	r6, fp
 800d0a6:	3601      	adds	r6, #1
 800d0a8:	b2f6      	uxtb	r6, r6
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d0aa:	2e05      	cmp	r6, #5
 800d0ac:	d00f      	beq.n	800d0ce <HAL_UART_RxCpltCallback+0x166>
			MSG_Buffer_Index_End[port_index]++;
 800d0ae:	4a26      	ldr	r2, [pc, #152]	; (800d148 <HAL_UART_RxCpltCallback+0x1e0>)
 800d0b0:	54d6      	strb	r6, [r2, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d0b2:	4b29      	ldr	r3, [pc, #164]	; (800d158 <HAL_UART_RxCpltCallback+0x1f0>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	4a29      	ldr	r2, [pc, #164]	; (800d15c <HAL_UART_RxCpltCallback+0x1f4>)
 800d0b8:	54d0      	strb	r0, [r2, r3]
			Process_Message_Buffer_Index_End++;
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d0be:	2b05      	cmp	r3, #5
 800d0c0:	d009      	beq.n	800d0d6 <HAL_UART_RxCpltCallback+0x16e>
			Process_Message_Buffer_Index_End++;
 800d0c2:	4a25      	ldr	r2, [pc, #148]	; (800d158 <HAL_UART_RxCpltCallback+0x1f0>)
 800d0c4:	7013      	strb	r3, [r2, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800d0c6:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	555a      	strb	r2, [r3, r5]
 800d0cc:	e79a      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d0ce:	4a1e      	ldr	r2, [pc, #120]	; (800d148 <HAL_UART_RxCpltCallback+0x1e0>)
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	54d1      	strb	r1, [r2, r3]
 800d0d4:	e7ed      	b.n	800d0b2 <HAL_UART_RxCpltCallback+0x14a>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d0d6:	4b20      	ldr	r3, [pc, #128]	; (800d158 <HAL_UART_RxCpltCallback+0x1f0>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	e7f3      	b.n	800d0c6 <HAL_UART_RxCpltCallback+0x15e>
	else if(portStatus[port_number] == CLI)
 800d0de:	0005      	movs	r5, r0
 800d0e0:	4914      	ldr	r1, [pc, #80]	; (800d134 <HAL_UART_RxCpltCallback+0x1cc>)
 800d0e2:	5c09      	ldrb	r1, [r1, r0]
 800d0e4:	2903      	cmp	r1, #3
 800d0e6:	d100      	bne.n	800d0ea <HAL_UART_RxCpltCallback+0x182>
 800d0e8:	e789      	b.n	800cffe <HAL_UART_RxCpltCallback+0x96>
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d0ea:	2907      	cmp	r1, #7
 800d0ec:	d0a0      	beq.n	800d030 <HAL_UART_RxCpltCallback+0xc8>
	else if(portStatus[port_number] == Z_Status)
 800d0ee:	2908      	cmp	r1, #8
 800d0f0:	d0a2      	beq.n	800d038 <HAL_UART_RxCpltCallback+0xd0>
	else if(portStatus[port_number] == MSG)
 800d0f2:	2901      	cmp	r1, #1
 800d0f4:	d000      	beq.n	800d0f8 <HAL_UART_RxCpltCallback+0x190>
 800d0f6:	e785      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
		if(temp_length[port_index] > 1)
 800d0f8:	4916      	ldr	r1, [pc, #88]	; (800d154 <HAL_UART_RxCpltCallback+0x1ec>)
 800d0fa:	5cc9      	ldrb	r1, [r1, r3]
 800d0fc:	2901      	cmp	r1, #1
 800d0fe:	d9b2      	bls.n	800d066 <HAL_UART_RxCpltCallback+0xfe>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d100:	4813      	ldr	r0, [pc, #76]	; (800d150 <HAL_UART_RxCpltCallback+0x1e8>)
 800d102:	4684      	mov	ip, r0
 800d104:	5cc6      	ldrb	r6, [r0, r3]
 800d106:	4810      	ldr	r0, [pc, #64]	; (800d148 <HAL_UART_RxCpltCallback+0x1e0>)
 800d108:	5cc5      	ldrb	r5, [r0, r3]
 800d10a:	00e8      	lsls	r0, r5, #3
 800d10c:	1b40      	subs	r0, r0, r5
 800d10e:	4680      	mov	r8, r0
 800d110:	0098      	lsls	r0, r3, #2
 800d112:	18c0      	adds	r0, r0, r3
 800d114:	00c5      	lsls	r5, r0, #3
 800d116:	1a28      	subs	r0, r5, r0
 800d118:	4440      	add	r0, r8
 800d11a:	00c0      	lsls	r0, r0, #3
 800d11c:	4d0b      	ldr	r5, [pc, #44]	; (800d14c <HAL_UART_RxCpltCallback+0x1e4>)
 800d11e:	1828      	adds	r0, r5, r0
 800d120:	5582      	strb	r2, [r0, r6]
			temp_index[port_index]++;
 800d122:	3601      	adds	r6, #1
 800d124:	4662      	mov	r2, ip
 800d126:	54d6      	strb	r6, [r2, r3]
			temp_length[port_index]--;
 800d128:	3901      	subs	r1, #1
 800d12a:	4a0a      	ldr	r2, [pc, #40]	; (800d154 <HAL_UART_RxCpltCallback+0x1ec>)
 800d12c:	54d1      	strb	r1, [r2, r3]
 800d12e:	e769      	b.n	800d004 <HAL_UART_RxCpltCallback+0x9c>
 800d130:	20000da4 	.word	0x20000da4
 800d134:	20000bd0 	.word	0x20000bd0
 800d138:	2000060b 	.word	0x2000060b
 800d13c:	20001144 	.word	0x20001144
 800d140:	200002b5 	.word	0x200002b5
 800d144:	20000613 	.word	0x20000613
 800d148:	20000604 	.word	0x20000604
 800d14c:	200002bc 	.word	0x200002bc
 800d150:	2000170c 	.word	0x2000170c
 800d154:	20001710 	.word	0x20001710
 800d158:	20000611 	.word	0x20000611
 800d15c:	2000060c 	.word	0x2000060c

0800d160 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d160:	b530      	push	{r4, r5, lr}
 800d162:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d164:	4d09      	ldr	r5, [pc, #36]	; (800d18c <vApplicationStackOverflowHook+0x2c>)
 800d166:	7828      	ldrb	r0, [r5, #0]
 800d168:	24ff      	movs	r4, #255	; 0xff
 800d16a:	9400      	str	r4, [sp, #0]
 800d16c:	23ff      	movs	r3, #255	; 0xff
 800d16e:	2210      	movs	r2, #16
 800d170:	4907      	ldr	r1, [pc, #28]	; (800d190 <vApplicationStackOverflowHook+0x30>)
 800d172:	f000 fb2f 	bl	800d7d4 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <vApplicationStackOverflowHook+0x34>)
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	7828      	ldrb	r0, [r5, #0]
 800d17c:	9400      	str	r4, [sp, #0]
 800d17e:	23ff      	movs	r3, #255	; 0xff
 800d180:	220f      	movs	r2, #15
 800d182:	f000 fb27 	bl	800d7d4 <writePxMutex>
	NVIC_SystemReset();
 800d186:	f7ff fe07 	bl	800cd98 <NVIC_SystemReset>
 800d18a:	46c0      	nop			; (mov r8, r8)
 800d18c:	2000060b 	.word	0x2000060b
 800d190:	080195f0 	.word	0x080195f0
 800d194:	200000a8 	.word	0x200000a8

0800d198 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800d198:	b530      	push	{r4, r5, lr}
 800d19a:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d19c:	4d09      	ldr	r5, [pc, #36]	; (800d1c4 <vApplicationMallocFailedHook+0x2c>)
 800d19e:	7828      	ldrb	r0, [r5, #0]
 800d1a0:	24ff      	movs	r4, #255	; 0xff
 800d1a2:	9400      	str	r4, [sp, #0]
 800d1a4:	23ff      	movs	r3, #255	; 0xff
 800d1a6:	2214      	movs	r2, #20
 800d1a8:	4907      	ldr	r1, [pc, #28]	; (800d1c8 <vApplicationMallocFailedHook+0x30>)
 800d1aa:	f000 fb13 	bl	800d7d4 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d1ae:	4b07      	ldr	r3, [pc, #28]	; (800d1cc <vApplicationMallocFailedHook+0x34>)
 800d1b0:	6819      	ldr	r1, [r3, #0]
 800d1b2:	7828      	ldrb	r0, [r5, #0]
 800d1b4:	9400      	str	r4, [sp, #0]
 800d1b6:	23ff      	movs	r3, #255	; 0xff
 800d1b8:	220f      	movs	r2, #15
 800d1ba:	f000 fb0b 	bl	800d7d4 <writePxMutex>
	NVIC_SystemReset();
 800d1be:	f7ff fdeb 	bl	800cd98 <NVIC_SystemReset>
 800d1c2:	46c0      	nop			; (mov r8, r8)
 800d1c4:	2000060b 	.word	0x2000060b
 800d1c8:	080195d8 	.word	0x080195d8
 800d1cc:	200000a8 	.word	0x200000a8

0800d1d0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d2:	46ce      	mov	lr, r9
 800d1d4:	b500      	push	{lr}
 800d1d6:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d1d8:	ac05      	add	r4, sp, #20
 800d1da:	4b34      	ldr	r3, [pc, #208]	; (800d2ac <RTC_CalendarConfig+0xdc>)
 800d1dc:	0022      	movs	r2, r4
 800d1de:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d1e0:	c243      	stmia	r2!, {r0, r1, r6}
 800d1e2:	aa02      	add	r2, sp, #8
 800d1e4:	4b32      	ldr	r3, [pc, #200]	; (800d2b0 <RTC_CalendarConfig+0xe0>)
 800d1e6:	cb03      	ldmia	r3!, {r0, r1}
 800d1e8:	c203      	stmia	r2!, {r0, r1}
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d1ee:	2015      	movs	r0, #21
 800d1f0:	ab02      	add	r3, sp, #8
 800d1f2:	469c      	mov	ip, r3
 800d1f4:	4460      	add	r0, ip
 800d1f6:	f005 fd4c 	bl	8012c92 <atoi>
 800d1fa:	b2c3      	uxtb	r3, r0
 800d1fc:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d1fe:	2600      	movs	r6, #0
 800d200:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800d202:	a806      	add	r0, sp, #24
 800d204:	f005 fd45 	bl	8012c92 <atoi>
 800d208:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800d20a:	70e6      	strb	r6, [r4, #3]
 800d20c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d20e:	4e29      	ldr	r6, [pc, #164]	; (800d2b4 <RTC_CalendarConfig+0xe4>)
 800d210:	e002      	b.n	800d218 <RTC_CalendarConfig+0x48>
 800d212:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800d214:	2c0d      	cmp	r4, #13
 800d216:	d009      	beq.n	800d22c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d218:	00a3      	lsls	r3, r4, #2
 800d21a:	3b04      	subs	r3, #4
 800d21c:	58f1      	ldr	r1, [r6, r3]
 800d21e:	a805      	add	r0, sp, #20
 800d220:	f7f2 ff70 	bl	8000104 <strcmp>
 800d224:	2800      	cmp	r0, #0
 800d226:	d1f4      	bne.n	800d212 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800d228:	b2e5      	uxtb	r5, r4
 800d22a:	e7f2      	b.n	800d212 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d22c:	ab02      	add	r3, sp, #8
 800d22e:	1d98      	adds	r0, r3, #6
 800d230:	f005 fd2f 	bl	8012c92 <atoi>
 800d234:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800d236:	ac05      	add	r4, sp, #20
 800d238:	2600      	movs	r6, #0
 800d23a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800d23c:	ab02      	add	r3, sp, #8
 800d23e:	1cd8      	adds	r0, r3, #3
 800d240:	f005 fd27 	bl	8012c92 <atoi>
 800d244:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800d246:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800d248:	a802      	add	r0, sp, #8
 800d24a:	f005 fd22 	bl	8012c92 <atoi>
 800d24e:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d250:	a90d      	add	r1, sp, #52	; 0x34
 800d252:	464b      	mov	r3, r9
 800d254:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d256:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d258:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d25a:	2301      	movs	r3, #1
 800d25c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d25e:	2200      	movs	r2, #0
 800d260:	4815      	ldr	r0, [pc, #84]	; (800d2b8 <RTC_CalendarConfig+0xe8>)
 800d262:	f004 fe31 	bl	8011ec8 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800d266:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d268:	2800      	cmp	r0, #0
 800d26a:	d119      	bne.n	800d2a0 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800d26c:	a908      	add	r1, sp, #32
 800d26e:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d270:	9b01      	ldr	r3, [sp, #4]
 800d272:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d274:	9b00      	ldr	r3, [sp, #0]
 800d276:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d278:	2300      	movs	r3, #0
 800d27a:	720b      	strb	r3, [r1, #8]
 800d27c:	4a0f      	ldr	r2, [pc, #60]	; (800d2bc <RTC_CalendarConfig+0xec>)
 800d27e:	3018      	adds	r0, #24
 800d280:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d282:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d284:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d286:	2200      	movs	r2, #0
 800d288:	480b      	ldr	r0, [pc, #44]	; (800d2b8 <RTC_CalendarConfig+0xe8>)
 800d28a:	f004 fd97 	bl	8011dbc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d28e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d290:	2800      	cmp	r0, #0
 800d292:	d105      	bne.n	800d2a0 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d294:	4a0a      	ldr	r2, [pc, #40]	; (800d2c0 <RTC_CalendarConfig+0xf0>)
 800d296:	2101      	movs	r1, #1
 800d298:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <RTC_CalendarConfig+0xe8>)
 800d29a:	f004 fed9 	bl	8012050 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	b00e      	add	sp, #56	; 0x38
 800d2a4:	bc04      	pop	{r2}
 800d2a6:	4691      	mov	r9, r2
 800d2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2aa:	46c0      	nop			; (mov r8, r8)
 800d2ac:	08016878 	.word	0x08016878
 800d2b0:	0801689c 	.word	0x0801689c
 800d2b4:	20000034 	.word	0x20000034
 800d2b8:	20005f10 	.word	0x20005f10
 800d2bc:	20005adc 	.word	0x20005adc
 800d2c0:	000032f2 	.word	0x000032f2

0800d2c4 <RTC_Init>:
{
 800d2c4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d2c6:	4a1c      	ldr	r2, [pc, #112]	; (800d338 <RTC_Init+0x74>)
 800d2c8:	6a11      	ldr	r1, [r2, #32]
 800d2ca:	2380      	movs	r3, #128	; 0x80
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d2d2:	481a      	ldr	r0, [pc, #104]	; (800d33c <RTC_Init+0x78>)
 800d2d4:	4b1a      	ldr	r3, [pc, #104]	; (800d340 <RTC_Init+0x7c>)
 800d2d6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d2dc:	227c      	movs	r2, #124	; 0x7c
 800d2de:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d2e0:	4a18      	ldr	r2, [pc, #96]	; (800d344 <RTC_Init+0x80>)
 800d2e2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d2e4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d2e6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d2e8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d2ea:	f004 fd09 	bl	8011d00 <HAL_RTC_Init>
 800d2ee:	23ff      	movs	r3, #255	; 0xff
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d11e      	bne.n	800d332 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d2f4:	2101      	movs	r1, #1
 800d2f6:	4811      	ldr	r0, [pc, #68]	; (800d33c <RTC_Init+0x78>)
 800d2f8:	f004 feb0 	bl	801205c <HAL_RTCEx_BKUPRead>
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <RTC_Init+0x84>)
 800d2fe:	4298      	cmp	r0, r3
 800d300:	d10e      	bne.n	800d320 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d302:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <RTC_Init+0x74>)
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	d502      	bpl.n	800d310 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d30a:	4b10      	ldr	r3, [pc, #64]	; (800d34c <RTC_Init+0x88>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d310:	4b09      	ldr	r3, [pc, #36]	; (800d338 <RTC_Init+0x74>)
 800d312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d314:	015b      	lsls	r3, r3, #5
 800d316:	d505      	bpl.n	800d324 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800d318:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <RTC_Init+0x88>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	e001      	b.n	800d324 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800d320:	f7ff ff56 	bl	800d1d0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d324:	4a04      	ldr	r2, [pc, #16]	; (800d338 <RTC_Init+0x74>)
 800d326:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d328:	2380      	movs	r3, #128	; 0x80
 800d32a:	045b      	lsls	r3, r3, #17
 800d32c:	430b      	orrs	r3, r1
 800d32e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	0018      	movs	r0, r3
 800d334:	bd10      	pop	{r4, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	40021000 	.word	0x40021000
 800d33c:	20005f10 	.word	0x20005f10
 800d340:	40002800 	.word	0x40002800
 800d344:	000007cf 	.word	0x000007cf
 800d348:	000032f2 	.word	0x000032f2
 800d34c:	20001713 	.word	0x20001713

0800d350 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d352:	46c6      	mov	lr, r8
 800d354:	b500      	push	{lr}
 800d356:	b086      	sub	sp, #24
 800d358:	ac0c      	add	r4, sp, #48	; 0x30
 800d35a:	7827      	ldrb	r7, [r4, #0]
 800d35c:	ac0d      	add	r4, sp, #52	; 0x34
 800d35e:	7824      	ldrb	r4, [r4, #0]
 800d360:	46a0      	mov	r8, r4
 800d362:	ac0e      	add	r4, sp, #56	; 0x38
 800d364:	7825      	ldrb	r5, [r4, #0]
 800d366:	ac0f      	add	r4, sp, #60	; 0x3c
 800d368:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d36a:	ac05      	add	r4, sp, #20
 800d36c:	3230      	adds	r2, #48	; 0x30
 800d36e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d370:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d372:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d374:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d376:	2200      	movs	r2, #0
 800d378:	0021      	movs	r1, r4
 800d37a:	481f      	ldr	r0, [pc, #124]	; (800d3f8 <BOS_CalendarConfig+0xa8>)
 800d37c:	f004 fda4 	bl	8011ec8 <HAL_RTC_SetDate>
 800d380:	2800      	cmp	r0, #0
 800d382:	d136      	bne.n	800d3f2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d384:	466b      	mov	r3, sp
 800d386:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d388:	4642      	mov	r2, r8
 800d38a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d38c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d38e:	2300      	movs	r3, #0
 800d390:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d392:	2e01      	cmp	r6, #1
 800d394:	d020      	beq.n	800d3d8 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d396:	2e02      	cmp	r6, #2
 800d398:	d024      	beq.n	800d3e4 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d39a:	4b18      	ldr	r3, [pc, #96]	; (800d3fc <BOS_CalendarConfig+0xac>)
 800d39c:	2218      	movs	r2, #24
 800d39e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4669      	mov	r1, sp
 800d3a4:	4814      	ldr	r0, [pc, #80]	; (800d3f8 <BOS_CalendarConfig+0xa8>)
 800d3a6:	f004 fd09 	bl	8011dbc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d3aa:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d10e      	bne.n	800d3ce <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d3b0:	4a12      	ldr	r2, [pc, #72]	; (800d3fc <BOS_CalendarConfig+0xac>)
 800d3b2:	7b53      	ldrb	r3, [r2, #13]
 800d3b4:	021b      	lsls	r3, r3, #8
 800d3b6:	7911      	ldrb	r1, [r2, #4]
 800d3b8:	4319      	orrs	r1, r3
 800d3ba:	308d      	adds	r0, #141	; 0x8d
 800d3bc:	0040      	lsls	r0, r0, #1
 800d3be:	f7fe f931 	bl	800b624 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d3c2:	4a0f      	ldr	r2, [pc, #60]	; (800d400 <BOS_CalendarConfig+0xb0>)
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	480c      	ldr	r0, [pc, #48]	; (800d3f8 <BOS_CalendarConfig+0xa8>)
 800d3c8:	f004 fe42 	bl	8012050 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	b006      	add	sp, #24
 800d3d2:	bc04      	pop	{r2}
 800d3d4:	4690      	mov	r8, r2
 800d3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d3d8:	466a      	mov	r2, sp
 800d3da:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d3dc:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <BOS_CalendarConfig+0xac>)
 800d3de:	220c      	movs	r2, #12
 800d3e0:	735a      	strb	r2, [r3, #13]
 800d3e2:	e7dd      	b.n	800d3a0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d3e4:	2340      	movs	r3, #64	; 0x40
 800d3e6:	466a      	mov	r2, sp
 800d3e8:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <BOS_CalendarConfig+0xac>)
 800d3ec:	220c      	movs	r2, #12
 800d3ee:	735a      	strb	r2, [r3, #13]
 800d3f0:	e7d6      	b.n	800d3a0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d3f2:	23ff      	movs	r3, #255	; 0xff
 800d3f4:	e7eb      	b.n	800d3ce <BOS_CalendarConfig+0x7e>
 800d3f6:	46c0      	nop			; (mov r8, r8)
 800d3f8:	20005f10 	.word	0x20005f10
 800d3fc:	20005adc 	.word	0x20005adc
 800d400:	000032f2 	.word	0x000032f2

0800d404 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d404:	b530      	push	{r4, r5, lr}
 800d406:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d408:	4d16      	ldr	r5, [pc, #88]	; (800d464 <GetTimeDate+0x60>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	a902      	add	r1, sp, #8
 800d40e:	0028      	movs	r0, r5
 800d410:	f004 fdd6 	bl	8011fc0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d414:	ac07      	add	r4, sp, #28
 800d416:	2200      	movs	r2, #0
 800d418:	0021      	movs	r1, r4
 800d41a:	0028      	movs	r0, r5
 800d41c:	f004 fdf6 	bl	801200c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d420:	4b11      	ldr	r3, [pc, #68]	; (800d468 <GetTimeDate+0x64>)
 800d422:	aa02      	add	r2, sp, #8
 800d424:	7a12      	ldrb	r2, [r2, #8]
 800d426:	09d2      	lsrs	r2, r2, #7
 800d428:	3201      	adds	r2, #1
 800d42a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d42c:	9a03      	ldr	r2, [sp, #12]
 800d42e:	9201      	str	r2, [sp, #4]
 800d430:	0852      	lsrs	r2, r2, #1
 800d432:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d434:	aa02      	add	r2, sp, #8
 800d436:	7892      	ldrb	r2, [r2, #2]
 800d438:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d43a:	aa02      	add	r2, sp, #8
 800d43c:	7852      	ldrb	r2, [r2, #1]
 800d43e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d440:	aa02      	add	r2, sp, #8
 800d442:	7812      	ldrb	r2, [r2, #0]
 800d444:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d446:	78a2      	ldrb	r2, [r4, #2]
 800d448:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d44a:	7862      	ldrb	r2, [r4, #1]
 800d44c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d44e:	7822      	ldrb	r2, [r4, #0]
 800d450:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d452:	78e2      	ldrb	r2, [r4, #3]
 800d454:	21fa      	movs	r1, #250	; 0xfa
 800d456:	00c9      	lsls	r1, r1, #3
 800d458:	468c      	mov	ip, r1
 800d45a:	4462      	add	r2, ip
 800d45c:	831a      	strh	r2, [r3, #24]
}
 800d45e:	b009      	add	sp, #36	; 0x24
 800d460:	bd30      	pop	{r4, r5, pc}
 800d462:	46c0      	nop			; (mov r8, r8)
 800d464:	20005f10 	.word	0x20005f10
 800d468:	20005adc 	.word	0x20005adc

0800d46c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d46c:	b530      	push	{r4, r5, lr}
 800d46e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d470:	4a12      	ldr	r2, [pc, #72]	; (800d4bc <TIM_USEC_Init+0x50>)
 800d472:	69d1      	ldr	r1, [r2, #28]
 800d474:	2080      	movs	r0, #128	; 0x80
 800d476:	0040      	lsls	r0, r0, #1
 800d478:	4301      	orrs	r1, r0
 800d47a:	61d1      	str	r1, [r2, #28]
 800d47c:	69d3      	ldr	r3, [r2, #28]
 800d47e:	4003      	ands	r3, r0
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d484:	4c0e      	ldr	r4, [pc, #56]	; (800d4c0 <TIM_USEC_Init+0x54>)
 800d486:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <TIM_USEC_Init+0x58>)
 800d488:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d48a:	f004 fb51 	bl	8011b30 <HAL_RCC_GetPCLK1Freq>
 800d48e:	490e      	ldr	r1, [pc, #56]	; (800d4c8 <TIM_USEC_Init+0x5c>)
 800d490:	f7f2 fe54 	bl	800013c <__udivsi3>
 800d494:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d496:	2500      	movs	r5, #0
 800d498:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d49a:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <TIM_USEC_Init+0x60>)
 800d49c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d49e:	0020      	movs	r0, r4
 800d4a0:	f004 fe6c 	bl	801217c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4a4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4a6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d4a8:	a902      	add	r1, sp, #8
 800d4aa:	0020      	movs	r0, r4
 800d4ac:	f004 fe80 	bl	80121b0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d4b0:	0020      	movs	r0, r4
 800d4b2:	f004 fdda 	bl	801206a <HAL_TIM_Base_Start>
}
 800d4b6:	b005      	add	sp, #20
 800d4b8:	bd30      	pop	{r4, r5, pc}
 800d4ba:	46c0      	nop			; (mov r8, r8)
 800d4bc:	40021000 	.word	0x40021000
 800d4c0:	20005f6c 	.word	0x20005f6c
 800d4c4:	40002000 	.word	0x40002000
 800d4c8:	000f4240 	.word	0x000f4240
 800d4cc:	0000ffff 	.word	0x0000ffff

0800d4d0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d4d0:	b530      	push	{r4, r5, lr}
 800d4d2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d4d4:	4a12      	ldr	r2, [pc, #72]	; (800d520 <TIM_MSEC_Init+0x50>)
 800d4d6:	6991      	ldr	r1, [r2, #24]
 800d4d8:	2080      	movs	r0, #128	; 0x80
 800d4da:	0240      	lsls	r0, r0, #9
 800d4dc:	4301      	orrs	r1, r0
 800d4de:	6191      	str	r1, [r2, #24]
 800d4e0:	6993      	ldr	r3, [r2, #24]
 800d4e2:	4003      	ands	r3, r0
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d4e8:	4c0e      	ldr	r4, [pc, #56]	; (800d524 <TIM_MSEC_Init+0x54>)
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <TIM_MSEC_Init+0x58>)
 800d4ec:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d4ee:	f004 fb1f 	bl	8011b30 <HAL_RCC_GetPCLK1Freq>
 800d4f2:	21fa      	movs	r1, #250	; 0xfa
 800d4f4:	0089      	lsls	r1, r1, #2
 800d4f6:	f7f2 fe21 	bl	800013c <__udivsi3>
 800d4fa:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4fc:	2500      	movs	r5, #0
 800d4fe:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <TIM_MSEC_Init+0x5c>)
 800d502:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d504:	0020      	movs	r0, r4
 800d506:	f004 fe39 	bl	801217c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d50a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d50c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d50e:	a902      	add	r1, sp, #8
 800d510:	0020      	movs	r0, r4
 800d512:	f004 fe4d 	bl	80121b0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d516:	0020      	movs	r0, r4
 800d518:	f004 fda7 	bl	801206a <HAL_TIM_Base_Start>
}
 800d51c:	b005      	add	sp, #20
 800d51e:	bd30      	pop	{r4, r5, pc}
 800d520:	40021000 	.word	0x40021000
 800d524:	20005f30 	.word	0x20005f30
 800d528:	40014000 	.word	0x40014000
 800d52c:	0000ffff 	.word	0x0000ffff

0800d530 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d530:	b510      	push	{r4, lr}
 800d532:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d534:	f002 f8c6 	bl	800f6c4 <vPortEnterCritical>
	
	if (Delay)
 800d538:	2c00      	cmp	r4, #0
 800d53a:	d006      	beq.n	800d54a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d53c:	4b04      	ldr	r3, [pc, #16]	; (800d550 <StartMicroDelay+0x20>)
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d542:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d544:	1a5b      	subs	r3, r3, r1
 800d546:	42a3      	cmp	r3, r4
 800d548:	d9fb      	bls.n	800d542 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d54a:	f002 f8c7 	bl	800f6dc <vPortExitCritical>
}
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	20005f6c 	.word	0x20005f6c

0800d554 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d554:	b510      	push	{r4, lr}
 800d556:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d558:	f002 f8b4 	bl	800f6c4 <vPortEnterCritical>
	
	if (Delay)
 800d55c:	2c00      	cmp	r4, #0
 800d55e:	d006      	beq.n	800d56e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d560:	4b04      	ldr	r3, [pc, #16]	; (800d574 <StartMilliDelay+0x20>)
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d566:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d568:	1a5b      	subs	r3, r3, r1
 800d56a:	42a3      	cmp	r3, r4
 800d56c:	d9fb      	bls.n	800d566 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d56e:	f002 f8b5 	bl	800f6dc <vPortExitCritical>
}
 800d572:	bd10      	pop	{r4, pc}
 800d574:	20005f30 	.word	0x20005f30

0800d578 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d578:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d57a:	4809      	ldr	r0, [pc, #36]	; (800d5a0 <MX_USART1_UART_Init+0x28>)
 800d57c:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <MX_USART1_UART_Init+0x2c>)
 800d57e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d580:	23e1      	movs	r3, #225	; 0xe1
 800d582:	031b      	lsls	r3, r3, #12
 800d584:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d586:	2300      	movs	r3, #0
 800d588:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d58a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d58c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d58e:	220c      	movs	r2, #12
 800d590:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d592:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d594:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d596:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d598:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d59a:	f005 fa1b 	bl	80129d4 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d59e:	bd10      	pop	{r4, pc}
 800d5a0:	20005cb4 	.word	0x20005cb4
 800d5a4:	40013800 	.word	0x40013800

0800d5a8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d5a8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d5aa:	4809      	ldr	r0, [pc, #36]	; (800d5d0 <MX_USART2_UART_Init+0x28>)
 800d5ac:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <MX_USART2_UART_Init+0x2c>)
 800d5ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d5b0:	23e1      	movs	r3, #225	; 0xe1
 800d5b2:	031b      	lsls	r3, r3, #12
 800d5b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d5ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d5bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d5be:	220c      	movs	r2, #12
 800d5c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d5c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d5c6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d5c8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d5ca:	f005 fa03 	bl	80129d4 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d5ce:	bd10      	pop	{r4, pc}
 800d5d0:	20005e24 	.word	0x20005e24
 800d5d4:	40004400 	.word	0x40004400

0800d5d8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d5d8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d5da:	4809      	ldr	r0, [pc, #36]	; (800d600 <MX_USART3_UART_Init+0x28>)
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <MX_USART3_UART_Init+0x2c>)
 800d5de:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d5e0:	23e1      	movs	r3, #225	; 0xe1
 800d5e2:	031b      	lsls	r3, r3, #12
 800d5e4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d5ea:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d5ec:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d5ee:	220c      	movs	r2, #12
 800d5f0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d5f2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5f4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d5f6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d5f8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d5fa:	f005 f9eb 	bl	80129d4 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d5fe:	bd10      	pop	{r4, pc}
 800d600:	20005c04 	.word	0x20005c04
 800d604:	40004800 	.word	0x40004800

0800d608 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d608:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d60a:	4809      	ldr	r0, [pc, #36]	; (800d630 <MX_USART4_UART_Init+0x28>)
 800d60c:	4b09      	ldr	r3, [pc, #36]	; (800d634 <MX_USART4_UART_Init+0x2c>)
 800d60e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d610:	23e1      	movs	r3, #225	; 0xe1
 800d612:	031b      	lsls	r3, r3, #12
 800d614:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d616:	2300      	movs	r3, #0
 800d618:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d61a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d61c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d61e:	220c      	movs	r2, #12
 800d620:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d622:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d624:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d626:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d628:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d62a:	f005 f9d3 	bl	80129d4 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d62e:	bd10      	pop	{r4, pc}
 800d630:	20005db0 	.word	0x20005db0
 800d634:	40004c00 	.word	0x40004c00

0800d638 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d638:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d63a:	4809      	ldr	r0, [pc, #36]	; (800d660 <MX_USART6_UART_Init+0x28>)
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <MX_USART6_UART_Init+0x2c>)
 800d63e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d640:	23e1      	movs	r3, #225	; 0xe1
 800d642:	031b      	lsls	r3, r3, #12
 800d644:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d646:	2300      	movs	r3, #0
 800d648:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d64a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d64c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d64e:	220c      	movs	r2, #12
 800d650:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d652:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d654:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d656:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d658:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d65a:	f005 f9bb 	bl	80129d4 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d65e:	bd10      	pop	{r4, pc}
 800d660:	20005d38 	.word	0x20005d38
 800d664:	40011400 	.word	0x40011400

0800d668 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66a:	46ce      	mov	lr, r9
 800d66c:	b500      	push	{lr}
 800d66e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART2)
 800d670:	6803      	ldr	r3, [r0, #0]
 800d672:	4a49      	ldr	r2, [pc, #292]	; (800d798 <HAL_UART_MspInit+0x130>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d009      	beq.n	800d68c <HAL_UART_MspInit+0x24>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d678:	4a48      	ldr	r2, [pc, #288]	; (800d79c <HAL_UART_MspInit+0x134>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d032      	beq.n	800d6e4 <HAL_UART_MspInit+0x7c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d67e:	4a48      	ldr	r2, [pc, #288]	; (800d7a0 <HAL_UART_MspInit+0x138>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d05c      	beq.n	800d73e <HAL_UART_MspInit+0xd6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d684:	b008      	add	sp, #32
 800d686:	bc04      	pop	{r2}
 800d688:	4691      	mov	r9, r2
 800d68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800d68c:	4a45      	ldr	r2, [pc, #276]	; (800d7a4 <HAL_UART_MspInit+0x13c>)
 800d68e:	69d1      	ldr	r1, [r2, #28]
 800d690:	2080      	movs	r0, #128	; 0x80
 800d692:	0280      	lsls	r0, r0, #10
 800d694:	4301      	orrs	r1, r0
 800d696:	61d1      	str	r1, [r2, #28]
 800d698:	69d3      	ldr	r3, [r2, #28]
 800d69a:	4003      	ands	r3, r0
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d6a0:	2304      	movs	r3, #4
 800d6a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6a4:	2702      	movs	r7, #2
 800d6a6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6a8:	2401      	movs	r4, #1
 800d6aa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6ac:	2603      	movs	r6, #3
 800d6ae:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d6b0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d6b2:	2590      	movs	r5, #144	; 0x90
 800d6b4:	05ed      	lsls	r5, r5, #23
 800d6b6:	a903      	add	r1, sp, #12
 800d6b8:	0028      	movs	r0, r5
 800d6ba:	f003 fc4f 	bl	8010f5c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d6be:	2308      	movs	r3, #8
 800d6c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6c4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6c6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d6c8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d6ca:	a903      	add	r1, sp, #12
 800d6cc:	0028      	movs	r0, r5
 800d6ce:	f003 fc45 	bl	8010f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	201c      	movs	r0, #28
 800d6d8:	f002 fc76 	bl	800ffc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d6dc:	201c      	movs	r0, #28
 800d6de:	f002 fca7 	bl	8010030 <HAL_NVIC_EnableIRQ>
 800d6e2:	e7cf      	b.n	800d684 <HAL_UART_MspInit+0x1c>
    __USART3_CLK_ENABLE();
 800d6e4:	4a2f      	ldr	r2, [pc, #188]	; (800d7a4 <HAL_UART_MspInit+0x13c>)
 800d6e6:	69d1      	ldr	r1, [r2, #28]
 800d6e8:	2080      	movs	r0, #128	; 0x80
 800d6ea:	02c0      	lsls	r0, r0, #11
 800d6ec:	4301      	orrs	r1, r0
 800d6ee:	61d1      	str	r1, [r2, #28]
 800d6f0:	69d3      	ldr	r3, [r2, #28]
 800d6f2:	4003      	ands	r3, r0
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6fe:	2402      	movs	r4, #2
 800d700:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d702:	2701      	movs	r7, #1
 800d704:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d706:	2603      	movs	r6, #3
 800d708:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d70a:	2504      	movs	r5, #4
 800d70c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d70e:	a903      	add	r1, sp, #12
 800d710:	4825      	ldr	r0, [pc, #148]	; (800d7a8 <HAL_UART_MspInit+0x140>)
 800d712:	f003 fc23 	bl	8010f5c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d716:	2380      	movs	r3, #128	; 0x80
 800d718:	011b      	lsls	r3, r3, #4
 800d71a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d71c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d71e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d720:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;
 800d722:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d724:	a903      	add	r1, sp, #12
 800d726:	4820      	ldr	r0, [pc, #128]	; (800d7a8 <HAL_UART_MspInit+0x140>)
 800d728:	f003 fc18 	bl	8010f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d72c:	2200      	movs	r2, #0
 800d72e:	2101      	movs	r1, #1
 800d730:	201d      	movs	r0, #29
 800d732:	f002 fc49 	bl	800ffc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d736:	201d      	movs	r0, #29
 800d738:	f002 fc7a 	bl	8010030 <HAL_NVIC_EnableIRQ>
 800d73c:	e7a2      	b.n	800d684 <HAL_UART_MspInit+0x1c>
    __USART6_CLK_ENABLE();
 800d73e:	4b19      	ldr	r3, [pc, #100]	; (800d7a4 <HAL_UART_MspInit+0x13c>)
 800d740:	699a      	ldr	r2, [r3, #24]
 800d742:	2420      	movs	r4, #32
 800d744:	4322      	orrs	r2, r4
 800d746:	619a      	str	r2, [r3, #24]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	4023      	ands	r3, r4
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d750:	2310      	movs	r3, #16
 800d752:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d754:	3b0e      	subs	r3, #14
 800d756:	4699      	mov	r9, r3
 800d758:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d75a:	2501      	movs	r5, #1
 800d75c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d75e:	2703      	movs	r7, #3
 800d760:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d762:	2605      	movs	r6, #5
 800d764:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d766:	a903      	add	r1, sp, #12
 800d768:	2090      	movs	r0, #144	; 0x90
 800d76a:	05c0      	lsls	r0, r0, #23
 800d76c:	f003 fbf6 	bl	8010f5c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d770:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d772:	464b      	mov	r3, r9
 800d774:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d776:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d778:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d77a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d77c:	a903      	add	r1, sp, #12
 800d77e:	2090      	movs	r0, #144	; 0x90
 800d780:	05c0      	lsls	r0, r0, #23
 800d782:	f003 fbeb 	bl	8010f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d786:	2200      	movs	r2, #0
 800d788:	2101      	movs	r1, #1
 800d78a:	201d      	movs	r0, #29
 800d78c:	f002 fc1c 	bl	800ffc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d790:	201d      	movs	r0, #29
 800d792:	f002 fc4d 	bl	8010030 <HAL_NVIC_EnableIRQ>
}
 800d796:	e775      	b.n	800d684 <HAL_UART_MspInit+0x1c>
 800d798:	40004400 	.word	0x40004400
 800d79c:	40004800 	.word	0x40004800
 800d7a0:	40011400 	.word	0x40011400
 800d7a4:	40021000 	.word	0x40021000
 800d7a8:	48000400 	.word	0x48000400

0800d7ac <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d7ac:	2802      	cmp	r0, #2
 800d7ae:	d005      	beq.n	800d7bc <GetUart+0x10>
 800d7b0:	2803      	cmp	r0, #3
 800d7b2:	d005      	beq.n	800d7c0 <GetUart+0x14>
 800d7b4:	2801      	cmp	r0, #1
 800d7b6:	d005      	beq.n	800d7c4 <GetUart+0x18>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e000      	b.n	800d7be <GetUart+0x12>
			return P2uart;
 800d7bc:	4802      	ldr	r0, [pc, #8]	; (800d7c8 <GetUart+0x1c>)
	}		
}
 800d7be:	4770      	bx	lr
			return P3uart;
 800d7c0:	4802      	ldr	r0, [pc, #8]	; (800d7cc <GetUart+0x20>)
 800d7c2:	e7fc      	b.n	800d7be <GetUart+0x12>
			return P1uart;	
 800d7c4:	4802      	ldr	r0, [pc, #8]	; (800d7d0 <GetUart+0x24>)
 800d7c6:	e7fa      	b.n	800d7be <GetUart+0x12>
 800d7c8:	20005d38 	.word	0x20005d38
 800d7cc:	20005c04 	.word	0x20005c04
 800d7d0:	20005e24 	.word	0x20005e24

0800d7d4 <writePxMutex>:
{
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	0005      	movs	r5, r0
 800d7da:	9100      	str	r1, [sp, #0]
 800d7dc:	0017      	movs	r7, r2
 800d7de:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d7e0:	f7ff ffe4 	bl	800d7ac <GetUart>
 800d7e4:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d7e6:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d016      	beq.n	800d81a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d7ec:	00ab      	lsls	r3, r5, #2
 800d7ee:	4a0c      	ldr	r2, [pc, #48]	; (800d820 <writePxMutex+0x4c>)
 800d7f0:	5898      	ldr	r0, [r3, r2]
 800d7f2:	9901      	ldr	r1, [sp, #4]
 800d7f4:	f000 f994 	bl	800db20 <osSemaphoreWait>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d10e      	bne.n	800d81a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d7fc:	9b08      	ldr	r3, [sp, #32]
 800d7fe:	003a      	movs	r2, r7
 800d800:	9900      	ldr	r1, [sp, #0]
 800d802:	0020      	movs	r0, r4
 800d804:	f005 f840 	bl	8012888 <HAL_UART_Transmit>
 800d808:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d80a:	d001      	beq.n	800d810 <writePxMutex+0x3c>
 800d80c:	2803      	cmp	r0, #3
 800d80e:	d1f5      	bne.n	800d7fc <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d810:	00ad      	lsls	r5, r5, #2
 800d812:	4b03      	ldr	r3, [pc, #12]	; (800d820 <writePxMutex+0x4c>)
 800d814:	58e8      	ldr	r0, [r5, r3]
 800d816:	f000 f9af 	bl	800db78 <osSemaphoreRelease>
}
 800d81a:	0030      	movs	r0, r6
 800d81c:	b003      	add	sp, #12
 800d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d820:	20005b60 	.word	0x20005b60

0800d824 <writePxITMutex>:
{
 800d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d826:	b083      	sub	sp, #12
 800d828:	0004      	movs	r4, r0
 800d82a:	9101      	str	r1, [sp, #4]
 800d82c:	0017      	movs	r7, r2
 800d82e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d830:	f7ff ffbc 	bl	800d7ac <GetUart>
 800d834:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d836:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800d838:	2800      	cmp	r0, #0
 800d83a:	d008      	beq.n	800d84e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d83c:	00a4      	lsls	r4, r4, #2
 800d83e:	4b09      	ldr	r3, [pc, #36]	; (800d864 <writePxITMutex+0x40>)
 800d840:	58e0      	ldr	r0, [r4, r3]
 800d842:	0029      	movs	r1, r5
 800d844:	f000 f96c 	bl	800db20 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d848:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d002      	beq.n	800d854 <writePxITMutex+0x30>
}
 800d84e:	0018      	movs	r0, r3
 800d850:	b003      	add	sp, #12
 800d852:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d854:	003a      	movs	r2, r7
 800d856:	9901      	ldr	r1, [sp, #4]
 800d858:	0030      	movs	r0, r6
 800d85a:	f004 fced 	bl	8012238 <HAL_UART_Transmit_IT>
 800d85e:	0003      	movs	r3, r0
 800d860:	e7f5      	b.n	800d84e <writePxITMutex+0x2a>
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	20005b60 	.word	0x20005b60

0800d868 <UpdateBaudrate>:
{
 800d868:	b510      	push	{r4, lr}
 800d86a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d86c:	f7ff ff9e 	bl	800d7ac <GetUart>
	huart->Init.BaudRate = baudrate;
 800d870:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d872:	f005 f8af 	bl	80129d4 <HAL_UART_Init>
}
 800d876:	2000      	movs	r0, #0
 800d878:	bd10      	pop	{r4, pc}
	...

0800d87c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d880:	d003      	beq.n	800d88a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d882:	2901      	cmp	r1, #1
 800d884:	d002      	beq.n	800d88c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d886:	2900      	cmp	r1, #0
 800d888:	d016      	beq.n	800d8b8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d88a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d88c:	f7fc fb3c 	bl	8009f08 <GetPort>
 800d890:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <SwapUartPins+0x68>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	3b01      	subs	r3, #1
 800d896:	4d14      	ldr	r5, [pc, #80]	; (800d8e8 <SwapUartPins+0x6c>)
 800d898:	005b      	lsls	r3, r3, #1
 800d89a:	3801      	subs	r0, #1
 800d89c:	2180      	movs	r1, #128	; 0x80
 800d89e:	0209      	lsls	r1, r1, #8
 800d8a0:	000a      	movs	r2, r1
 800d8a2:	4102      	asrs	r2, r0
 800d8a4:	5b58      	ldrh	r0, [r3, r5]
 800d8a6:	4302      	orrs	r2, r0
 800d8a8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8aa:	2308      	movs	r3, #8
 800d8ac:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d8ae:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d8b0:	0020      	movs	r0, r4
 800d8b2:	f005 f88f 	bl	80129d4 <HAL_UART_Init>
 800d8b6:	e7e8      	b.n	800d88a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d8b8:	f7fc fb26 	bl	8009f08 <GetPort>
 800d8bc:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <SwapUartPins+0x68>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4d09      	ldr	r5, [pc, #36]	; (800d8e8 <SwapUartPins+0x6c>)
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	3801      	subs	r0, #1
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	0209      	lsls	r1, r1, #8
 800d8cc:	4101      	asrs	r1, r0
 800d8ce:	5b5a      	ldrh	r2, [r3, r5]
 800d8d0:	438a      	bics	r2, r1
 800d8d2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d8dc:	0020      	movs	r0, r4
 800d8de:	f005 f879 	bl	80129d4 <HAL_UART_Init>
}
 800d8e2:	e7d2      	b.n	800d88a <SwapUartPins+0xe>
 800d8e4:	20000b66 	.word	0x20000b66
 800d8e8:	20005fa8 	.word	0x20005fa8

0800d8ec <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ee:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800d8f0:	4b12      	ldr	r3, [pc, #72]	; (800d93c <ReadPortsDir+0x50>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d01c      	beq.n	800d932 <ReadPortsDir+0x46>
 800d8f8:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800d8fe:	4e10      	ldr	r6, [pc, #64]	; (800d940 <ReadPortsDir+0x54>)
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800d900:	4d10      	ldr	r5, [pc, #64]	; (800d944 <ReadPortsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 800d902:	4f0e      	ldr	r7, [pc, #56]	; (800d93c <ReadPortsDir+0x50>)
 800d904:	e004      	b.n	800d910 <ReadPortsDir+0x24>
 800d906:	3401      	adds	r4, #1
 800d908:	b2e4      	uxtb	r4, r4
 800d90a:	783b      	ldrb	r3, [r7, #0]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	d312      	bcc.n	800d936 <ReadPortsDir+0x4a>
		if (i != myID) {
 800d910:	7833      	ldrb	r3, [r6, #0]
 800d912:	42a3      	cmp	r3, r4
 800d914:	d0f7      	beq.n	800d906 <ReadPortsDir+0x1a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800d916:	2200      	movs	r2, #0
 800d918:	2113      	movs	r1, #19
 800d91a:	0020      	movs	r0, r4
 800d91c:	f7fa fac0 	bl	8007ea0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800d920:	2032      	movs	r0, #50	; 0x32
 800d922:	f7ff fe17 	bl	800d554 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800d926:	782b      	ldrb	r3, [r5, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0ec      	beq.n	800d906 <ReadPortsDir+0x1a>
				result = BOS_ERR_NoResponse;
 800d92c:	2302      	movs	r3, #2
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	e7e9      	b.n	800d906 <ReadPortsDir+0x1a>
	BOS_Status result = BOS_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 800d936:	9801      	ldr	r0, [sp, #4]
 800d938:	b003      	add	sp, #12
 800d93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d93c:	20000030 	.word	0x20000030
 800d940:	20000b66 	.word	0x20000b66
 800d944:	20000be8 	.word	0x20000be8

0800d948 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94a:	b083      	sub	sp, #12
 800d94c:	9001      	str	r0, [sp, #4]
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800d94e:	2401      	movs	r4, #1
	uint16_t temp =0;
 800d950:	2700      	movs	r7, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d952:	2680      	movs	r6, #128	; 0x80
 800d954:	0236      	lsls	r6, r6, #8
 800d956:	e002      	b.n	800d95e <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800d958:	3401      	adds	r4, #1
 800d95a:	2c04      	cmp	r4, #4
 800d95c:	d00b      	beq.n	800d976 <ReadPortsDirMSG+0x2e>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d95e:	b2e5      	uxtb	r5, r4
 800d960:	0028      	movs	r0, r5
 800d962:	f7ff ff23 	bl	800d7ac <GetUart>
 800d966:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d968:	42b3      	cmp	r3, r6
 800d96a:	d1f5      	bne.n	800d958 <ReadPortsDirMSG+0x10>
			messageParams[temp++] = p;
 800d96c:	1c7b      	adds	r3, r7, #1
 800d96e:	4a06      	ldr	r2, [pc, #24]	; (800d988 <ReadPortsDirMSG+0x40>)
 800d970:	55d5      	strb	r5, [r2, r7]
 800d972:	b29f      	uxth	r7, r3
 800d974:	e7f0      	b.n	800d958 <ReadPortsDirMSG+0x10>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800d976:	003a      	movs	r2, r7
 800d978:	2114      	movs	r1, #20
 800d97a:	9801      	ldr	r0, [sp, #4]
 800d97c:	f7fa fa90 	bl	8007ea0 <SendMessageToModule>
	return result;
}
 800d980:	2000      	movs	r0, #0
 800d982:	b003      	add	sp, #12
 800d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	20000a28 	.word	0x20000a28

0800d98c <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	46c6      	mov	lr, r8
 800d990:	b500      	push	{lr}
 800d992:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d994:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d996:	4b12      	ldr	r3, [pc, #72]	; (800d9e0 <UpdateMyPortsDir+0x54>)
 800d998:	4698      	mov	r8, r3
 800d99a:	4f12      	ldr	r7, [pc, #72]	; (800d9e4 <UpdateMyPortsDir+0x58>)
 800d99c:	2680      	movs	r6, #128	; 0x80
 800d99e:	0236      	lsls	r6, r6, #8
 800d9a0:	e00a      	b.n	800d9b8 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800d9a2:	0020      	movs	r0, r4
 800d9a4:	f7ff ff02 	bl	800d7ac <GetUart>
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	f7ff ff67 	bl	800d87c <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d9ae:	3401      	adds	r4, #1
 800d9b0:	b2e4      	uxtb	r4, r4
 800d9b2:	3501      	adds	r5, #1
 800d9b4:	2c04      	cmp	r4, #4
 800d9b6:	d00f      	beq.n	800d9d8 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d9b8:	783b      	ldrb	r3, [r7, #0]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	4642      	mov	r2, r8
 800d9c0:	5a9b      	ldrh	r3, [r3, r2]
 800d9c2:	0032      	movs	r2, r6
 800d9c4:	412a      	asrs	r2, r5
 800d9c6:	421a      	tst	r2, r3
 800d9c8:	d1eb      	bne.n	800d9a2 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800d9ca:	0020      	movs	r0, r4
 800d9cc:	f7ff feee 	bl	800d7ac <GetUart>
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	f7ff ff53 	bl	800d87c <SwapUartPins>
 800d9d6:	e7ea      	b.n	800d9ae <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 800d9d8:	2000      	movs	r0, #0
 800d9da:	bc04      	pop	{r2}
 800d9dc:	4690      	mov	r8, r2
 800d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e0:	20005fa8 	.word	0x20005fa8
 800d9e4:	20000b66 	.word	0x20000b66

0800d9e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d9e8:	4816      	ldr	r0, [pc, #88]	; (800da44 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d9ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d9ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d9ee:	e003      	b.n	800d9f8 <LoopCopyDataInit>

0800d9f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d9f0:	4b15      	ldr	r3, [pc, #84]	; (800da48 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d9f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d9f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d9f6:	3104      	adds	r1, #4

0800d9f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d9f8:	4814      	ldr	r0, [pc, #80]	; (800da4c <LoopForever+0xc>)
  ldr r3, =_edata
 800d9fa:	4b15      	ldr	r3, [pc, #84]	; (800da50 <LoopForever+0x10>)
  adds r2, r0, r1
 800d9fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d9fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800da00:	d3f6      	bcc.n	800d9f0 <CopyDataInit>
  ldr r2, =_sbss
 800da02:	4a14      	ldr	r2, [pc, #80]	; (800da54 <LoopForever+0x14>)
  b LoopFillZerobss
 800da04:	e002      	b.n	800da0c <LoopFillZerobss>

0800da06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800da06:	2300      	movs	r3, #0
  str  r3, [r2]
 800da08:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800da0a:	3204      	adds	r2, #4

0800da0c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800da0c:	4b12      	ldr	r3, [pc, #72]	; (800da58 <LoopForever+0x18>)
  cmp r2, r3
 800da0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800da10:	d3f9      	bcc.n	800da06 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800da12:	4812      	ldr	r0, [pc, #72]	; (800da5c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800da14:	4912      	ldr	r1, [pc, #72]	; (800da60 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800da16:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800da18:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800da1a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800da1c:	d005      	beq.n	800da2a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800da1e:	f000 f82b 	bl	800da78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800da22:	f005 f943 	bl	8012cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800da26:	f005 f92a 	bl	8012c7e <main>

0800da2a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800da2a:	480e      	ldr	r0, [pc, #56]	; (800da64 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800da2c:	490e      	ldr	r1, [pc, #56]	; (800da68 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800da2e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800da30:	480e      	ldr	r0, [pc, #56]	; (800da6c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800da32:	490d      	ldr	r1, [pc, #52]	; (800da68 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800da34:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800da36:	480e      	ldr	r0, [pc, #56]	; (800da70 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800da38:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800da3a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800da3c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800da3e:	4700      	bx	r0

0800da40 <LoopForever>:


LoopForever:
    b LoopForever
 800da40:	e7fe      	b.n	800da40 <LoopForever>
 800da42:	0000      	.short	0x0000
  ldr   r0, =_estack
 800da44:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800da48:	08019a94 	.word	0x08019a94
  ldr r0, =_sdata
 800da4c:	2000000c 	.word	0x2000000c
  ldr r3, =_edata
 800da50:	20000294 	.word	0x20000294
  ldr r2, =_sbss
 800da54:	20000298 	.word	0x20000298
  ldr r3, = _ebss
 800da58:	20006044 	.word	0x20006044
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800da5c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800da60:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800da64:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800da68:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800da6c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800da70:	1fffd800 	.word	0x1fffd800

0800da74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800da74:	e7fe      	b.n	800da74 <ADC1_COMP_IRQHandler>
	...

0800da78 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800da78:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <SystemInit+0x48>)
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	2101      	movs	r1, #1
 800da7e:	430a      	orrs	r2, r1
 800da80:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	480f      	ldr	r0, [pc, #60]	; (800dac4 <SystemInit+0x4c>)
 800da86:	4002      	ands	r2, r0
 800da88:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	480e      	ldr	r0, [pc, #56]	; (800dac8 <SystemInit+0x50>)
 800da8e:	4002      	ands	r2, r0
 800da90:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	480d      	ldr	r0, [pc, #52]	; (800dacc <SystemInit+0x54>)
 800da96:	4002      	ands	r2, r0
 800da98:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	480c      	ldr	r0, [pc, #48]	; (800dad0 <SystemInit+0x58>)
 800da9e:	4002      	ands	r2, r0
 800daa0:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800daa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa4:	200f      	movs	r0, #15
 800daa6:	4382      	bics	r2, r0
 800daa8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800daaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800daac:	4809      	ldr	r0, [pc, #36]	; (800dad4 <SystemInit+0x5c>)
 800daae:	4002      	ands	r2, r0
 800dab0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800dab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dab4:	438a      	bics	r2, r1
 800dab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800dab8:	2200      	movs	r2, #0
 800daba:	609a      	str	r2, [r3, #8]

}
 800dabc:	4770      	bx	lr
 800dabe:	46c0      	nop			; (mov r8, r8)
 800dac0:	40021000 	.word	0x40021000
 800dac4:	08ffb80c 	.word	0x08ffb80c
 800dac8:	fef6ffff 	.word	0xfef6ffff
 800dacc:	fffbffff 	.word	0xfffbffff
 800dad0:	ffc0ffff 	.word	0xffc0ffff
 800dad4:	fff0feac 	.word	0xfff0feac

0800dad8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dad8:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800dada:	f000 fed7 	bl	800e88c <vTaskStartScheduler>
  
  return osOK;
}
 800dade:	2000      	movs	r0, #0
 800dae0:	bd10      	pop	{r4, pc}

0800dae2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dae2:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d100      	bne.n	800daea <osDelay+0x8>
 800dae8:	3001      	adds	r0, #1
 800daea:	f001 f813 	bl	800eb14 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800daee:	2000      	movs	r0, #0
 800daf0:	bd10      	pop	{r4, pc}

0800daf2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800daf2:	b510      	push	{r4, lr}
 800daf4:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800daf6:	2901      	cmp	r1, #1
 800daf8:	d005      	beq.n	800db06 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800dafa:	2100      	movs	r1, #0
 800dafc:	f000 fae7 	bl	800e0ce <xQueueCreateCountingSemaphore>
 800db00:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800db02:	0020      	movs	r0, r4
 800db04:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800db06:	2203      	movs	r2, #3
 800db08:	2100      	movs	r1, #0
 800db0a:	f000 fac0 	bl	800e08e <xQueueGenericCreate>
 800db0e:	1e04      	subs	r4, r0, #0
 800db10:	d0f7      	beq.n	800db02 <osSemaphoreCreate+0x10>
 800db12:	2300      	movs	r3, #0
 800db14:	2200      	movs	r2, #0
 800db16:	2100      	movs	r1, #0
 800db18:	f000 fae3 	bl	800e0e2 <xQueueGenericSend>
 800db1c:	e7f1      	b.n	800db02 <osSemaphoreCreate+0x10>
	...

0800db20 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800db20:	b500      	push	{lr}
 800db22:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800db24:	2300      	movs	r3, #0
 800db26:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800db28:	2800      	cmp	r0, #0
 800db2a:	d021      	beq.n	800db70 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db2c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800db30:	2b00      	cmp	r3, #0
 800db32:	d010      	beq.n	800db56 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db34:	aa01      	add	r2, sp, #4
 800db36:	2100      	movs	r1, #0
 800db38:	f000 fc3f 	bl	800e3ba <xQueueReceiveFromISR>
 800db3c:	0003      	movs	r3, r0
      return osErrorOS;
 800db3e:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db40:	2b01      	cmp	r3, #1
 800db42:	d113      	bne.n	800db6c <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800db44:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800db46:	9b01      	ldr	r3, [sp, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00f      	beq.n	800db6c <osSemaphoreWait+0x4c>
 800db4c:	4b09      	ldr	r3, [pc, #36]	; (800db74 <osSemaphoreWait+0x54>)
 800db4e:	2280      	movs	r2, #128	; 0x80
 800db50:	0552      	lsls	r2, r2, #21
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	e00a      	b.n	800db6c <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800db56:	2300      	movs	r3, #0
 800db58:	000a      	movs	r2, r1
 800db5a:	2100      	movs	r1, #0
 800db5c:	f000 fb9d 	bl	800e29a <xQueueGenericReceive>
  return osOK;
 800db60:	3801      	subs	r0, #1
 800db62:	1e43      	subs	r3, r0, #1
 800db64:	4198      	sbcs	r0, r3
 800db66:	4240      	negs	r0, r0
 800db68:	23ff      	movs	r3, #255	; 0xff
 800db6a:	4018      	ands	r0, r3
}
 800db6c:	b003      	add	sp, #12
 800db6e:	bd00      	pop	{pc}
    return osErrorParameter;
 800db70:	2080      	movs	r0, #128	; 0x80
 800db72:	e7fb      	b.n	800db6c <osSemaphoreWait+0x4c>
 800db74:	e000ed04 	.word	0xe000ed04

0800db78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800db78:	b500      	push	{lr}
 800db7a:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800db7c:	2300      	movs	r3, #0
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00f      	beq.n	800dba8 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db88:	a901      	add	r1, sp, #4
 800db8a:	f000 fb5b 	bl	800e244 <xQueueGiveFromISR>
 800db8e:	0003      	movs	r3, r0
      return osErrorOS;
 800db90:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db92:	2b01      	cmp	r3, #1
 800db94:	d114      	bne.n	800dbc0 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800db96:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d010      	beq.n	800dbc0 <osSemaphoreRelease+0x48>
 800db9e:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <osSemaphoreRelease+0x4c>)
 800dba0:	2280      	movs	r2, #128	; 0x80
 800dba2:	0552      	lsls	r2, r2, #21
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e00b      	b.n	800dbc0 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dba8:	2300      	movs	r3, #0
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2100      	movs	r1, #0
 800dbae:	f000 fa98 	bl	800e0e2 <xQueueGenericSend>
      result = osErrorOS;
 800dbb2:	3801      	subs	r0, #1
 800dbb4:	4243      	negs	r3, r0
 800dbb6:	4158      	adcs	r0, r3
 800dbb8:	4240      	negs	r0, r0
 800dbba:	23fe      	movs	r3, #254	; 0xfe
 800dbbc:	4398      	bics	r0, r3
 800dbbe:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800dbc0:	b003      	add	sp, #12
 800dbc2:	bd00      	pop	{pc}
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800dbc8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800dbca:	f001 f971 	bl	800eeb0 <xTaskGetSchedulerState>
 800dbce:	2801      	cmp	r0, #1
 800dbd0:	d001      	beq.n	800dbd6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800dbd2:	f001 fdb7 	bl	800f744 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800dbd6:	bd10      	pop	{r4, pc}

0800dbd8 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	0005      	movs	r5, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dbdc:	2008      	movs	r0, #8
 800dbde:	f001 fded 	bl	800f7bc <pvPortMalloc>
 800dbe2:	0004      	movs	r4, r0
portBASE_TYPE xReturn = pdFAIL;
 800dbe4:	2000      	movs	r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800dbe6:	2c00      	cmp	r4, #0
 800dbe8:	d00b      	beq.n	800dc02 <FreeRTOS_CLIRegisterCommand+0x2a>
	{
		taskENTER_CRITICAL();
 800dbea:	f001 fd6b 	bl	800f6c4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800dbee:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800dbf4:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800dbfa:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800dbfc:	f001 fd6e 	bl	800f6dc <vPortExitCritical>

		xReturn = pdPASS;
 800dc00:	2001      	movs	r0, #1
	}

	return xReturn;
}
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	200000b0 	.word	0x200000b0

0800dc08 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0a:	46d6      	mov	lr, sl
 800dc0c:	b500      	push	{lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	9001      	str	r0, [sp, #4]
 800dc12:	9102      	str	r1, [sp, #8]
 800dc14:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800dc16:	4b37      	ldr	r3, [pc, #220]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00e      	beq.n	800dc3c <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	9a01      	ldr	r2, [sp, #4]
 800dc24:	9903      	ldr	r1, [sp, #12]
 800dc26:	9802      	ldr	r0, [sp, #8]
 800dc28:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d102      	bne.n	800dc34 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800dc2e:	4b31      	ldr	r3, [pc, #196]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800dc34:	b004      	add	sp, #16
 800dc36:	bc04      	pop	{r2}
 800dc38:	4692      	mov	sl, r2
 800dc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dc3c:	4d2e      	ldr	r5, [pc, #184]	; (800dcf8 <FreeRTOS_CLIProcessCommand+0xf0>)
 800dc3e:	4a2d      	ldr	r2, [pc, #180]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dc40:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dc42:	3320      	adds	r3, #32
 800dc44:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dc46:	0017      	movs	r7, r2
 800dc48:	e00a      	b.n	800dc60 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800dc4a:	0002      	movs	r2, r0
 800dc4c:	0021      	movs	r1, r4
 800dc4e:	9801      	ldr	r0, [sp, #4]
 800dc50:	f005 fe72 	bl	8013938 <strncmp>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d00e      	beq.n	800dc76 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dc58:	686d      	ldr	r5, [r5, #4]
 800dc5a:	603d      	str	r5, [r7, #0]
 800dc5c:	2d00      	cmp	r5, #0
 800dc5e:	d012      	beq.n	800dc86 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800dc60:	682e      	ldr	r6, [r5, #0]
 800dc62:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800dc64:	0020      	movs	r0, r4
 800dc66:	f7f2 fa57 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dc6a:	9b01      	ldr	r3, [sp, #4]
 800dc6c:	5c1b      	ldrb	r3, [r3, r0]
 800dc6e:	4652      	mov	r2, sl
 800dc70:	4393      	bics	r3, r2
 800dc72:	d1f1      	bne.n	800dc58 <FreeRTOS_CLIProcessCommand+0x50>
 800dc74:	e7e9      	b.n	800dc4a <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800dc76:	200c      	movs	r0, #12
 800dc78:	5630      	ldrsb	r0, [r6, r0]
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	da0a      	bge.n	800dc94 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1cb      	bne.n	800dc1e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dc86:	9a03      	ldr	r2, [sp, #12]
 800dc88:	491c      	ldr	r1, [pc, #112]	; (800dcfc <FreeRTOS_CLIProcessCommand+0xf4>)
 800dc8a:	9802      	ldr	r0, [sp, #8]
 800dc8c:	f005 fe65 	bl	801395a <strncpy>
		xReturn = pdFALSE;
 800dc90:	2000      	movs	r0, #0
	return xReturn;
 800dc92:	e7cf      	b.n	800dc34 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800dc94:	9a01      	ldr	r2, [sp, #4]
 800dc96:	2300      	movs	r3, #0
 800dc98:	56d3      	ldrsb	r3, [r2, r3]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d027      	beq.n	800dcee <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800dc9e:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800dca0:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800dca2:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800dca4:	2501      	movs	r5, #1
 800dca6:	e009      	b.n	800dcbc <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800dca8:	2901      	cmp	r1, #1
 800dcaa:	d002      	beq.n	800dcb2 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800dcac:	3401      	adds	r4, #1
 800dcae:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800dcb0:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800dcb2:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	56d3      	ldrsb	r3, [r2, r3]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800dcbc:	2b20      	cmp	r3, #32
 800dcbe:	d0f3      	beq.n	800dca8 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800dcc0:	0031      	movs	r1, r6
 800dcc2:	e7f6      	b.n	800dcb2 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800dcc4:	2901      	cmp	r1, #1
 800dcc6:	d00f      	beq.n	800dce8 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0da      	beq.n	800dc86 <FreeRTOS_CLIProcessCommand+0x7e>
 800dcd0:	42a0      	cmp	r0, r4
 800dcd2:	d0a4      	beq.n	800dc1e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dcd4:	9a03      	ldr	r2, [sp, #12]
 800dcd6:	490a      	ldr	r1, [pc, #40]	; (800dd00 <FreeRTOS_CLIProcessCommand+0xf8>)
 800dcd8:	9802      	ldr	r0, [sp, #8]
 800dcda:	f005 fe3e 	bl	801395a <strncpy>
		pxCommand = NULL;
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <FreeRTOS_CLIProcessCommand+0xec>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	2000      	movs	r0, #0
 800dce6:	e7a5      	b.n	800dc34 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800dce8:	3c01      	subs	r4, #1
 800dcea:	b264      	sxtb	r4, r4
 800dcec:	e7ec      	b.n	800dcc8 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800dcee:	2400      	movs	r4, #0
 800dcf0:	e7ea      	b.n	800dcc8 <FreeRTOS_CLIProcessCommand+0xc0>
 800dcf2:	46c0      	nop			; (mov r8, r8)
 800dcf4:	2000197c 	.word	0x2000197c
 800dcf8:	200000b4 	.word	0x200000b4
 800dcfc:	0801965c 	.word	0x0801965c
 800dd00:	08019604 	.word	0x08019604

0800dd04 <FreeRTOS_CLIGetOutputBuffer>:
}
 800dd04:	4800      	ldr	r0, [pc, #0]	; (800dd08 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800dd06:	4770      	bx	lr
 800dd08:	20001714 	.word	0x20001714

0800dd0c <FreeRTOS_CLIGetParameter>:
{
 800dd0c:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800dd12:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800dd14:	2900      	cmp	r1, #0
 800dd16:	d10b      	bne.n	800dd30 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e02a      	b.n	800dd72 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800dd1c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dd1e:	2300      	movs	r3, #0
 800dd20:	56c3      	ldrsb	r3, [r0, r3]
 800dd22:	2b20      	cmp	r3, #32
 800dd24:	d0fa      	beq.n	800dd1c <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d022      	beq.n	800dd70 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800dd2a:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800dd2c:	42a1      	cmp	r1, r4
 800dd2e:	d00d      	beq.n	800dd4c <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd30:	2300      	movs	r3, #0
 800dd32:	56c3      	ldrsb	r3, [r0, r3]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01f      	beq.n	800dd78 <FreeRTOS_CLIGetParameter+0x6c>
 800dd38:	2b20      	cmp	r3, #32
 800dd3a:	d0ef      	beq.n	800dd1c <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800dd3c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd3e:	2300      	movs	r3, #0
 800dd40:	56c3      	ldrsb	r3, [r0, r3]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d018      	beq.n	800dd78 <FreeRTOS_CLIGetParameter+0x6c>
 800dd46:	2b20      	cmp	r3, #32
 800dd48:	d1f8      	bne.n	800dd3c <FreeRTOS_CLIGetParameter+0x30>
 800dd4a:	e7e7      	b.n	800dd1c <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd4c:	7803      	ldrb	r3, [r0, #0]
 800dd4e:	2120      	movs	r1, #32
 800dd50:	438b      	bics	r3, r1
 800dd52:	d00f      	beq.n	800dd74 <FreeRTOS_CLIGetParameter+0x68>
 800dd54:	0004      	movs	r4, r0
 800dd56:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800dd58:	6813      	ldr	r3, [r2, #0]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800dd5e:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd60:	7821      	ldrb	r1, [r4, #0]
 800dd62:	43a9      	bics	r1, r5
 800dd64:	d1f8      	bne.n	800dd58 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800dd66:	1e5a      	subs	r2, r3, #1
 800dd68:	4193      	sbcs	r3, r2
 800dd6a:	425b      	negs	r3, r3
 800dd6c:	4018      	ands	r0, r3
 800dd6e:	e000      	b.n	800dd72 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800dd70:	2000      	movs	r0, #0
}
 800dd72:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800dd74:	2000      	movs	r0, #0
 800dd76:	e7fc      	b.n	800dd72 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dd78:	2300      	movs	r3, #0
 800dd7a:	56c3      	ldrsb	r3, [r0, r3]
 800dd7c:	e7d3      	b.n	800dd26 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800dd80 <prvHelpCommand>:
{
 800dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd82:	b083      	sub	sp, #12
 800dd84:	0004      	movs	r4, r0
 800dd86:	000d      	movs	r5, r1
 800dd88:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800dd8e:	aa01      	add	r2, sp, #4
 800dd90:	2101      	movs	r1, #1
 800dd92:	f7ff ffbb 	bl	800dd0c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d027      	beq.n	800ddea <prvHelpCommand+0x6a>
 800dd9a:	2206      	movs	r2, #6
 800dd9c:	4930      	ldr	r1, [pc, #192]	; (800de60 <prvHelpCommand+0xe0>)
 800dd9e:	f005 fdcb 	bl	8013938 <strncmp>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d149      	bne.n	800de3a <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800dda6:	4b2f      	ldr	r3, [pc, #188]	; (800de64 <prvHelpCommand+0xe4>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b07      	cmp	r3, #7
 800ddac:	d012      	beq.n	800ddd4 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ddae:	1c5f      	adds	r7, r3, #1
 800ddb0:	b2ff      	uxtb	r7, r7
 800ddb2:	4a2c      	ldr	r2, [pc, #176]	; (800de64 <prvHelpCommand+0xe4>)
 800ddb4:	7017      	strb	r7, [r2, #0]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4a2b      	ldr	r2, [pc, #172]	; (800de68 <prvHelpCommand+0xe8>)
 800ddba:	5899      	ldr	r1, [r3, r2]
 800ddbc:	002a      	movs	r2, r5
 800ddbe:	0020      	movs	r0, r4
 800ddc0:	f005 fdcb 	bl	801395a <strncpy>
			xReturn = pdTRUE;
 800ddc4:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ddc6:	2f07      	cmp	r7, #7
 800ddc8:	d137      	bne.n	800de3a <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ddca:	4b26      	ldr	r3, [pc, #152]	; (800de64 <prvHelpCommand+0xe4>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	701a      	strb	r2, [r3, #0]
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	e032      	b.n	800de3a <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ddd4:	4b23      	ldr	r3, [pc, #140]	; (800de64 <prvHelpCommand+0xe4>)
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	701a      	strb	r2, [r3, #0]
 800ddda:	4b23      	ldr	r3, [pc, #140]	; (800de68 <prvHelpCommand+0xe8>)
 800dddc:	6819      	ldr	r1, [r3, #0]
 800ddde:	002a      	movs	r2, r5
 800dde0:	0020      	movs	r0, r4
 800dde2:	f005 fdba 	bl	801395a <strncpy>
			xReturn = pdTRUE;
 800dde6:	2601      	movs	r6, #1
 800dde8:	e027      	b.n	800de3a <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ddea:	4b20      	ldr	r3, [pc, #128]	; (800de6c <prvHelpCommand+0xec>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d026      	beq.n	800de40 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ddf2:	4b1f      	ldr	r3, [pc, #124]	; (800de70 <prvHelpCommand+0xf0>)
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	4b1f      	ldr	r3, [pc, #124]	; (800de74 <prvHelpCommand+0xf4>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d927      	bls.n	800de4e <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ddfe:	002a      	movs	r2, r5
 800de00:	3a08      	subs	r2, #8
 800de02:	4b1a      	ldr	r3, [pc, #104]	; (800de6c <prvHelpCommand+0xec>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	6859      	ldr	r1, [r3, #4]
 800de0a:	0020      	movs	r0, r4
 800de0c:	3008      	adds	r0, #8
 800de0e:	f005 fda4 	bl	801395a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800de12:	1c60      	adds	r0, r4, #1
 800de14:	4918      	ldr	r1, [pc, #96]	; (800de78 <prvHelpCommand+0xf8>)
 800de16:	f005 fd87 	bl	8013928 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800de1a:	2328      	movs	r3, #40	; 0x28
 800de1c:	7023      	strb	r3, [r4, #0]
 800de1e:	3301      	adds	r3, #1
 800de20:	71a3      	strb	r3, [r4, #6]
 800de22:	3b09      	subs	r3, #9
 800de24:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800de26:	4b11      	ldr	r3, [pc, #68]	; (800de6c <prvHelpCommand+0xec>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	6856      	ldr	r6, [r2, #4]
 800de2c:	601e      	str	r6, [r3, #0]
		counter++;
 800de2e:	4a10      	ldr	r2, [pc, #64]	; (800de70 <prvHelpCommand+0xf0>)
 800de30:	7813      	ldrb	r3, [r2, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800de36:	1e73      	subs	r3, r6, #1
 800de38:	419e      	sbcs	r6, r3
}
 800de3a:	0030      	movs	r0, r6
 800de3c:	b003      	add	sp, #12
 800de3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <prvHelpCommand+0xec>)
 800de42:	4a0e      	ldr	r2, [pc, #56]	; (800de7c <prvHelpCommand+0xfc>)
 800de44:	601a      	str	r2, [r3, #0]
			counter = 1;
 800de46:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <prvHelpCommand+0xf0>)
 800de48:	2201      	movs	r2, #1
 800de4a:	701a      	strb	r2, [r3, #0]
 800de4c:	e7d1      	b.n	800ddf2 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <prvHelpCommand+0xec>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6859      	ldr	r1, [r3, #4]
 800de56:	002a      	movs	r2, r5
 800de58:	0020      	movs	r0, r4
 800de5a:	f005 fd7e 	bl	801395a <strncpy>
 800de5e:	e7e2      	b.n	800de26 <prvHelpCommand+0xa6>
 800de60:	080177b8 	.word	0x080177b8
 800de64:	20001984 	.word	0x20001984
 800de68:	2000006c 	.word	0x2000006c
 800de6c:	20001980 	.word	0x20001980
 800de70:	20001978 	.word	0x20001978
 800de74:	20005a58 	.word	0x20005a58
 800de78:	08016b30 	.word	0x08016b30
 800de7c:	200000b4 	.word	0x200000b4

0800de80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de80:	0003      	movs	r3, r0
 800de82:	3308      	adds	r3, #8
 800de84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de86:	2201      	movs	r2, #1
 800de88:	4252      	negs	r2, r2
 800de8a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de94:	4770      	bx	lr

0800de96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de9a:	4770      	bx	lr

0800de9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800de9c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dea4:	689a      	ldr	r2, [r3, #8]
 800dea6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dea8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800deaa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800deac:	6803      	ldr	r3, [r0, #0]
 800deae:	3301      	adds	r3, #1
 800deb0:	6003      	str	r3, [r0, #0]
}
 800deb2:	4770      	bx	lr

0800deb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800deb4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800deb6:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deb8:	0002      	movs	r2, r0
 800deba:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800debc:	1c63      	adds	r3, r4, #1
 800debe:	d102      	bne.n	800dec6 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800dec0:	6902      	ldr	r2, [r0, #16]
 800dec2:	e004      	b.n	800dece <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dec4:	001a      	movs	r2, r3
 800dec6:	6853      	ldr	r3, [r2, #4]
 800dec8:	681d      	ldr	r5, [r3, #0]
 800deca:	42a5      	cmp	r5, r4
 800decc:	d9fa      	bls.n	800dec4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dece:	6853      	ldr	r3, [r2, #4]
 800ded0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ded2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ded4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ded6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ded8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800deda:	6803      	ldr	r3, [r0, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	6003      	str	r3, [r0, #0]
}
 800dee0:	bd30      	pop	{r4, r5, pc}

0800dee2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dee2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dee4:	6842      	ldr	r2, [r0, #4]
 800dee6:	6881      	ldr	r1, [r0, #8]
 800dee8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800deea:	6882      	ldr	r2, [r0, #8]
 800deec:	6841      	ldr	r1, [r0, #4]
 800deee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800def0:	685a      	ldr	r2, [r3, #4]
 800def2:	4282      	cmp	r2, r0
 800def4:	d005      	beq.n	800df02 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800def6:	2200      	movs	r2, #0
 800def8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	1e50      	subs	r0, r2, #1
 800defe:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800df00:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df02:	6882      	ldr	r2, [r0, #8]
 800df04:	605a      	str	r2, [r3, #4]
 800df06:	e7f6      	b.n	800def6 <uxListRemove+0x14>

0800df08 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	0004      	movs	r4, r0
 800df0c:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800df10:	2a00      	cmp	r2, #0
 800df12:	d10d      	bne.n	800df30 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800df14:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800df1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df1e:	3301      	adds	r3, #1
 800df20:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800df22:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800df24:	6860      	ldr	r0, [r4, #4]
 800df26:	f001 f811 	bl	800ef4c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	6063      	str	r3, [r4, #4]
 800df2e:	e7f5      	b.n	800df1c <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800df30:	2d00      	cmp	r5, #0
 800df32:	d10e      	bne.n	800df52 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800df34:	6880      	ldr	r0, [r0, #8]
 800df36:	f004 ff24 	bl	8012d82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800df3e:	4694      	mov	ip, r2
 800df40:	4463      	add	r3, ip
 800df42:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800df44:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df46:	6862      	ldr	r2, [r4, #4]
 800df48:	4293      	cmp	r3, r2
 800df4a:	d3e7      	bcc.n	800df1c <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	60a3      	str	r3, [r4, #8]
 800df50:	e7e4      	b.n	800df1c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df52:	68c0      	ldr	r0, [r0, #12]
 800df54:	f004 ff15 	bl	8012d82 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800df58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df5a:	425a      	negs	r2, r3
 800df5c:	68e3      	ldr	r3, [r4, #12]
 800df5e:	189b      	adds	r3, r3, r2
 800df60:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df62:	6821      	ldr	r1, [r4, #0]
 800df64:	428b      	cmp	r3, r1
 800df66:	d203      	bcs.n	800df70 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800df68:	6863      	ldr	r3, [r4, #4]
 800df6a:	469c      	mov	ip, r3
 800df6c:	4462      	add	r2, ip
 800df6e:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800df70:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800df72:	2d02      	cmp	r5, #2
 800df74:	d1d2      	bne.n	800df1c <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d0cf      	beq.n	800df1c <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800df7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df7e:	3b01      	subs	r3, #1
 800df80:	63a3      	str	r3, [r4, #56]	; 0x38
 800df82:	e7cb      	b.n	800df1c <prvCopyDataToQueue+0x14>

0800df84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df84:	b510      	push	{r4, lr}
 800df86:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df88:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800df8a:	2a00      	cmp	r2, #0
 800df8c:	d00b      	beq.n	800dfa6 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800df8e:	68c3      	ldr	r3, [r0, #12]
 800df90:	189b      	adds	r3, r3, r2
 800df92:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df94:	6841      	ldr	r1, [r0, #4]
 800df96:	428b      	cmp	r3, r1
 800df98:	d301      	bcc.n	800df9e <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800df9a:	6803      	ldr	r3, [r0, #0]
 800df9c:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800df9e:	68c1      	ldr	r1, [r0, #12]
 800dfa0:	0020      	movs	r0, r4
 800dfa2:	f004 feee 	bl	8012d82 <memcpy>
	}
}
 800dfa6:	bd10      	pop	{r4, pc}

0800dfa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dfac:	f001 fb8a 	bl	800f6c4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dfb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	dd04      	ble.n	800dfc0 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfb6:	0025      	movs	r5, r4
 800dfb8:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d11f      	bne.n	800e000 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	425b      	negs	r3, r3
 800dfc4:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800dfc6:	f001 fb89 	bl	800f6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfca:	f001 fb7b 	bl	800f6c4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dfce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	dd04      	ble.n	800dfde <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfd4:	0025      	movs	r5, r4
 800dfd6:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d121      	bne.n	800e022 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	425b      	negs	r3, r3
 800dfe2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfe4:	f001 fb7a 	bl	800f6dc <vPortExitCritical>
}
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800dfea:	f000 ff5b 	bl	800eea4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dfee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dff0:	3b01      	subs	r3, #1
 800dff2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dff4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	dde2      	ble.n	800dfc0 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d0df      	beq.n	800dfc0 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e000:	0028      	movs	r0, r5
 800e002:	f000 fedd 	bl	800edc0 <xTaskRemoveFromEventList>
 800e006:	2800      	cmp	r0, #0
 800e008:	d0f1      	beq.n	800dfee <prvUnlockQueue+0x46>
 800e00a:	e7ee      	b.n	800dfea <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800e00c:	f000 ff4a 	bl	800eea4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e010:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e012:	3b01      	subs	r3, #1
 800e014:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e016:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e018:	2b00      	cmp	r3, #0
 800e01a:	dde0      	ble.n	800dfde <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0dd      	beq.n	800dfde <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e022:	0028      	movs	r0, r5
 800e024:	f000 fecc 	bl	800edc0 <xTaskRemoveFromEventList>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d0f1      	beq.n	800e010 <prvUnlockQueue+0x68>
 800e02c:	e7ee      	b.n	800e00c <prvUnlockQueue+0x64>

0800e02e <xQueueGenericReset>:
{
 800e02e:	b570      	push	{r4, r5, r6, lr}
 800e030:	0004      	movs	r4, r0
 800e032:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e034:	f001 fb46 	bl	800f6c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e038:	6822      	ldr	r2, [r4, #0]
 800e03a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e03c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e03e:	434b      	muls	r3, r1
 800e040:	18d0      	adds	r0, r2, r3
 800e042:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e044:	2000      	movs	r0, #0
 800e046:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e048:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e04a:	1a5b      	subs	r3, r3, r1
 800e04c:	18d3      	adds	r3, r2, r3
 800e04e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e050:	2301      	movs	r3, #1
 800e052:	425b      	negs	r3, r3
 800e054:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e056:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e058:	2d00      	cmp	r5, #0
 800e05a:	d10f      	bne.n	800e07c <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d103      	bne.n	800e06a <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800e062:	f001 fb3b 	bl	800f6dc <vPortExitCritical>
}
 800e066:	2001      	movs	r0, #1
 800e068:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e06a:	0020      	movs	r0, r4
 800e06c:	3010      	adds	r0, #16
 800e06e:	f000 fea7 	bl	800edc0 <xTaskRemoveFromEventList>
 800e072:	2801      	cmp	r0, #1
 800e074:	d1f5      	bne.n	800e062 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800e076:	f001 fb19 	bl	800f6ac <vPortYield>
 800e07a:	e7f2      	b.n	800e062 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e07c:	0020      	movs	r0, r4
 800e07e:	3010      	adds	r0, #16
 800e080:	f7ff fefe 	bl	800de80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e084:	0020      	movs	r0, r4
 800e086:	3024      	adds	r0, #36	; 0x24
 800e088:	f7ff fefa 	bl	800de80 <vListInitialise>
 800e08c:	e7e9      	b.n	800e062 <xQueueGenericReset+0x34>

0800e08e <xQueueGenericCreate>:
{
 800e08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e090:	0006      	movs	r6, r0
 800e092:	000d      	movs	r5, r1
 800e094:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e096:	2900      	cmp	r1, #0
 800e098:	d009      	beq.n	800e0ae <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09a:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e09c:	3055      	adds	r0, #85	; 0x55
 800e09e:	f001 fb8d 	bl	800f7bc <pvPortMalloc>
 800e0a2:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e0a4:	d011      	beq.n	800e0ca <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e0a6:	0003      	movs	r3, r0
 800e0a8:	3354      	adds	r3, #84	; 0x54
 800e0aa:	6003      	str	r3, [r0, #0]
 800e0ac:	e005      	b.n	800e0ba <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e0ae:	2054      	movs	r0, #84	; 0x54
 800e0b0:	f001 fb84 	bl	800f7bc <pvPortMalloc>
 800e0b4:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e0b6:	d008      	beq.n	800e0ca <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e0b8:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e0ba:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e0bc:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e0be:	2101      	movs	r1, #1
 800e0c0:	0020      	movs	r0, r4
 800e0c2:	f7ff ffb4 	bl	800e02e <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e0c6:	2350      	movs	r3, #80	; 0x50
 800e0c8:	54e7      	strb	r7, [r4, r3]
}
 800e0ca:	0020      	movs	r0, r4
 800e0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0ce <xQueueCreateCountingSemaphore>:
	{
 800e0ce:	b510      	push	{r4, lr}
 800e0d0:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	f7ff ffda 	bl	800e08e <xQueueGenericCreate>
		if( xHandle != NULL )
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d000      	beq.n	800e0e0 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e0de:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e0e0:	bd10      	pop	{r4, pc}

0800e0e2 <xQueueGenericSend>:
{
 800e0e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e4:	46c6      	mov	lr, r8
 800e0e6:	b500      	push	{lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	0004      	movs	r4, r0
 800e0ec:	9100      	str	r1, [sp, #0]
 800e0ee:	9201      	str	r2, [sp, #4]
 800e0f0:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e0f2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4698      	mov	r8, r3
 800e0f8:	e030      	b.n	800e15c <xQueueGenericSend+0x7a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0fa:	003a      	movs	r2, r7
 800e0fc:	9900      	ldr	r1, [sp, #0]
 800e0fe:	0020      	movs	r0, r4
 800e100:	f7ff ff02 	bl	800df08 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	d108      	bne.n	800e11c <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d10f      	bne.n	800e12e <xQueueGenericSend+0x4c>
				taskEXIT_CRITICAL();
 800e10e:	f001 fae5 	bl	800f6dc <vPortExitCritical>
				return pdPASS;
 800e112:	2001      	movs	r0, #1
}
 800e114:	b004      	add	sp, #16
 800e116:	bc04      	pop	{r2}
 800e118:	4690      	mov	r8, r2
 800e11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e11c:	0020      	movs	r0, r4
 800e11e:	3024      	adds	r0, #36	; 0x24
 800e120:	f000 fe4e 	bl	800edc0 <xTaskRemoveFromEventList>
 800e124:	2801      	cmp	r0, #1
 800e126:	d1f2      	bne.n	800e10e <xQueueGenericSend+0x2c>
							queueYIELD_IF_USING_PREEMPTION();
 800e128:	f001 fac0 	bl	800f6ac <vPortYield>
 800e12c:	e7ef      	b.n	800e10e <xQueueGenericSend+0x2c>
						queueYIELD_IF_USING_PREEMPTION();
 800e12e:	f001 fabd 	bl	800f6ac <vPortYield>
 800e132:	e7ec      	b.n	800e10e <xQueueGenericSend+0x2c>
					taskEXIT_CRITICAL();
 800e134:	f001 fad2 	bl	800f6dc <vPortExitCritical>
					return errQUEUE_FULL;
 800e138:	2000      	movs	r0, #0
 800e13a:	e7eb      	b.n	800e114 <xQueueGenericSend+0x32>
					vTaskSetTimeOutState( &xTimeOut );
 800e13c:	a802      	add	r0, sp, #8
 800e13e:	f000 fe7b 	bl	800ee38 <vTaskSetTimeOutState>
 800e142:	e018      	b.n	800e176 <xQueueGenericSend+0x94>
		prvLockQueue( pxQueue );
 800e144:	4643      	mov	r3, r8
 800e146:	6463      	str	r3, [r4, #68]	; 0x44
 800e148:	e01e      	b.n	800e188 <xQueueGenericSend+0xa6>
 800e14a:	4643      	mov	r3, r8
 800e14c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e14e:	e01e      	b.n	800e18e <xQueueGenericSend+0xac>
				prvUnlockQueue( pxQueue );
 800e150:	0020      	movs	r0, r4
 800e152:	f7ff ff29 	bl	800dfa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e156:	f000 fc65 	bl	800ea24 <xTaskResumeAll>
 800e15a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e15c:	f001 fab2 	bl	800f6c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e162:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e164:	4293      	cmp	r3, r2
 800e166:	d3c8      	bcc.n	800e0fa <xQueueGenericSend+0x18>
 800e168:	2f02      	cmp	r7, #2
 800e16a:	d0c6      	beq.n	800e0fa <xQueueGenericSend+0x18>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0e0      	beq.n	800e134 <xQueueGenericSend+0x52>
				else if( xEntryTimeSet == pdFALSE )
 800e172:	2d00      	cmp	r5, #0
 800e174:	d0e2      	beq.n	800e13c <xQueueGenericSend+0x5a>
		taskEXIT_CRITICAL();
 800e176:	f001 fab1 	bl	800f6dc <vPortExitCritical>
		vTaskSuspendAll();
 800e17a:	f000 fbaf 	bl	800e8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e17e:	f001 faa1 	bl	800f6c4 <vPortEnterCritical>
 800e182:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e184:	3301      	adds	r3, #1
 800e186:	d0dd      	beq.n	800e144 <xQueueGenericSend+0x62>
 800e188:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e18a:	3301      	adds	r3, #1
 800e18c:	d0dd      	beq.n	800e14a <xQueueGenericSend+0x68>
 800e18e:	f001 faa5 	bl	800f6dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e192:	a901      	add	r1, sp, #4
 800e194:	a802      	add	r0, sp, #8
 800e196:	f000 fe5b 	bl	800ee50 <xTaskCheckForTimeOut>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d116      	bne.n	800e1cc <xQueueGenericSend+0xea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e19e:	f001 fa91 	bl	800f6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e1a4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e1a6:	f001 fa99 	bl	800f6dc <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1aa:	42ae      	cmp	r6, r5
 800e1ac:	d1d0      	bne.n	800e150 <xQueueGenericSend+0x6e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ae:	0020      	movs	r0, r4
 800e1b0:	3010      	adds	r0, #16
 800e1b2:	9901      	ldr	r1, [sp, #4]
 800e1b4:	f000 fdce 	bl	800ed54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1b8:	0020      	movs	r0, r4
 800e1ba:	f7ff fef5 	bl	800dfa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1be:	f000 fc31 	bl	800ea24 <xTaskResumeAll>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d1c9      	bne.n	800e15a <xQueueGenericSend+0x78>
					portYIELD_WITHIN_API();
 800e1c6:	f001 fa71 	bl	800f6ac <vPortYield>
 800e1ca:	e7c6      	b.n	800e15a <xQueueGenericSend+0x78>
			prvUnlockQueue( pxQueue );
 800e1cc:	0020      	movs	r0, r4
 800e1ce:	f7ff feeb 	bl	800dfa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1d2:	f000 fc27 	bl	800ea24 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e79c      	b.n	800e114 <xQueueGenericSend+0x32>

0800e1da <xQueueGenericSendFromISR>:
{
 800e1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1dc:	b083      	sub	sp, #12
 800e1de:	0007      	movs	r7, r0
 800e1e0:	9100      	str	r1, [sp, #0]
 800e1e2:	9201      	str	r2, [sp, #4]
 800e1e4:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1e6:	f001 fa83 	bl	800f6f0 <ulSetInterruptMaskFromISR>
 800e1ea:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d308      	bcc.n	800e206 <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800e1f4:	2400      	movs	r4, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1f6:	2d02      	cmp	r5, #2
 800e1f8:	d005      	beq.n	800e206 <xQueueGenericSendFromISR+0x2c>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e1fa:	0030      	movs	r0, r6
 800e1fc:	f001 fa7d 	bl	800f6fa <vClearInterruptMaskFromISR>
}
 800e200:	0020      	movs	r0, r4
 800e202:	b003      	add	sp, #12
 800e204:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e206:	002a      	movs	r2, r5
 800e208:	9900      	ldr	r1, [sp, #0]
 800e20a:	0038      	movs	r0, r7
 800e20c:	f7ff fe7c 	bl	800df08 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e212:	3301      	adds	r3, #1
 800e214:	d004      	beq.n	800e220 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800e216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e218:	3301      	adds	r3, #1
 800e21a:	64bb      	str	r3, [r7, #72]	; 0x48
			xReturn = pdPASS;
 800e21c:	2401      	movs	r4, #1
 800e21e:	e7ec      	b.n	800e1fa <xQueueGenericSendFromISR+0x20>
 800e220:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	2b00      	cmp	r3, #0
 800e226:	d0e8      	beq.n	800e1fa <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e228:	0038      	movs	r0, r7
 800e22a:	3024      	adds	r0, #36	; 0x24
 800e22c:	f000 fdc8 	bl	800edc0 <xTaskRemoveFromEventList>
 800e230:	2800      	cmp	r0, #0
 800e232:	d0e2      	beq.n	800e1fa <xQueueGenericSendFromISR+0x20>
							if( pxHigherPriorityTaskWoken != NULL )
 800e234:	9a01      	ldr	r2, [sp, #4]
 800e236:	2a00      	cmp	r2, #0
 800e238:	d002      	beq.n	800e240 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e23a:	2301      	movs	r3, #1
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	e7dc      	b.n	800e1fa <xQueueGenericSendFromISR+0x20>
			xReturn = pdPASS;
 800e240:	2401      	movs	r4, #1
 800e242:	e7da      	b.n	800e1fa <xQueueGenericSendFromISR+0x20>

0800e244 <xQueueGiveFromISR>:
{
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	0004      	movs	r4, r0
 800e248:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e24a:	f001 fa51 	bl	800f6f0 <ulSetInterruptMaskFromISR>
 800e24e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800e252:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e254:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e256:	4293      	cmp	r3, r2
 800e258:	d209      	bcs.n	800e26e <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800e25a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e25c:	3301      	adds	r3, #1
 800e25e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e260:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e262:	3301      	adds	r3, #1
 800e264:	d008      	beq.n	800e278 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800e266:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e268:	3301      	adds	r3, #1
 800e26a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e26c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e26e:	0030      	movs	r0, r6
 800e270:	f001 fa43 	bl	800f6fa <vClearInterruptMaskFromISR>
}
 800e274:	0028      	movs	r0, r5
 800e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800e278:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0f6      	beq.n	800e26e <xQueueGiveFromISR+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e280:	0020      	movs	r0, r4
 800e282:	3024      	adds	r0, #36	; 0x24
 800e284:	f000 fd9c 	bl	800edc0 <xTaskRemoveFromEventList>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d0f0      	beq.n	800e26e <xQueueGiveFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e28c:	2f00      	cmp	r7, #0
 800e28e:	d002      	beq.n	800e296 <xQueueGiveFromISR+0x52>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e290:	2301      	movs	r3, #1
 800e292:	603b      	str	r3, [r7, #0]
 800e294:	e7eb      	b.n	800e26e <xQueueGiveFromISR+0x2a>
			xReturn = pdPASS;
 800e296:	2501      	movs	r5, #1
 800e298:	e7e9      	b.n	800e26e <xQueueGiveFromISR+0x2a>

0800e29a <xQueueGenericReceive>:
{
 800e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29c:	b085      	sub	sp, #20
 800e29e:	0004      	movs	r4, r0
 800e2a0:	9100      	str	r1, [sp, #0]
 800e2a2:	9201      	str	r2, [sp, #4]
 800e2a4:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800e2a6:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800e2a8:	2600      	movs	r6, #0
 800e2aa:	e048      	b.n	800e33e <xQueueGenericReceive+0xa4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e2ac:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2ae:	9900      	ldr	r1, [sp, #0]
 800e2b0:	0020      	movs	r0, r4
 800e2b2:	f7ff fe67 	bl	800df84 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e2b6:	2d00      	cmp	r5, #0
 800e2b8:	d11a      	bne.n	800e2f0 <xQueueGenericReceive+0x56>
					--( pxQueue->uxMessagesWaiting );
 800e2ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d007      	beq.n	800e2d6 <xQueueGenericReceive+0x3c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d108      	bne.n	800e2de <xQueueGenericReceive+0x44>
				taskEXIT_CRITICAL();
 800e2cc:	f001 fa06 	bl	800f6dc <vPortExitCritical>
				return pdPASS;
 800e2d0:	2001      	movs	r0, #1
}
 800e2d2:	b005      	add	sp, #20
 800e2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e2d6:	f000 ff21 	bl	800f11c <pvTaskIncrementMutexHeldCount>
 800e2da:	6060      	str	r0, [r4, #4]
 800e2dc:	e7f3      	b.n	800e2c6 <xQueueGenericReceive+0x2c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e2de:	0020      	movs	r0, r4
 800e2e0:	3010      	adds	r0, #16
 800e2e2:	f000 fd6d 	bl	800edc0 <xTaskRemoveFromEventList>
 800e2e6:	2801      	cmp	r0, #1
 800e2e8:	d1f0      	bne.n	800e2cc <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800e2ea:	f001 f9df 	bl	800f6ac <vPortYield>
 800e2ee:	e7ed      	b.n	800e2cc <xQueueGenericReceive+0x32>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e2f0:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d0e9      	beq.n	800e2cc <xQueueGenericReceive+0x32>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2f8:	0020      	movs	r0, r4
 800e2fa:	3024      	adds	r0, #36	; 0x24
 800e2fc:	f000 fd60 	bl	800edc0 <xTaskRemoveFromEventList>
 800e300:	2800      	cmp	r0, #0
 800e302:	d0e3      	beq.n	800e2cc <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800e304:	f001 f9d2 	bl	800f6ac <vPortYield>
 800e308:	e7e0      	b.n	800e2cc <xQueueGenericReceive+0x32>
					taskEXIT_CRITICAL();
 800e30a:	f001 f9e7 	bl	800f6dc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e30e:	2000      	movs	r0, #0
 800e310:	e7df      	b.n	800e2d2 <xQueueGenericReceive+0x38>
					vTaskSetTimeOutState( &xTimeOut );
 800e312:	a802      	add	r0, sp, #8
 800e314:	f000 fd90 	bl	800ee38 <vTaskSetTimeOutState>
 800e318:	e01b      	b.n	800e352 <xQueueGenericReceive+0xb8>
		prvLockQueue( pxQueue );
 800e31a:	6466      	str	r6, [r4, #68]	; 0x44
 800e31c:	e022      	b.n	800e364 <xQueueGenericReceive+0xca>
 800e31e:	64a6      	str	r6, [r4, #72]	; 0x48
 800e320:	e023      	b.n	800e36a <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800e322:	f001 f9cf 	bl	800f6c4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e326:	6860      	ldr	r0, [r4, #4]
 800e328:	f000 fdd2 	bl	800eed0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e32c:	f001 f9d6 	bl	800f6dc <vPortExitCritical>
 800e330:	e02d      	b.n	800e38e <xQueueGenericReceive+0xf4>
				prvUnlockQueue( pxQueue );
 800e332:	0020      	movs	r0, r4
 800e334:	f7ff fe38 	bl	800dfa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e338:	f000 fb74 	bl	800ea24 <xTaskResumeAll>
 800e33c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800e33e:	f001 f9c1 	bl	800f6c4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1b1      	bne.n	800e2ac <xQueueGenericReceive+0x12>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e348:	9b01      	ldr	r3, [sp, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0dd      	beq.n	800e30a <xQueueGenericReceive+0x70>
				else if( xEntryTimeSet == pdFALSE )
 800e34e:	2f00      	cmp	r7, #0
 800e350:	d0df      	beq.n	800e312 <xQueueGenericReceive+0x78>
		taskEXIT_CRITICAL();
 800e352:	f001 f9c3 	bl	800f6dc <vPortExitCritical>
		vTaskSuspendAll();
 800e356:	f000 fac1 	bl	800e8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e35a:	f001 f9b3 	bl	800f6c4 <vPortEnterCritical>
 800e35e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e360:	3301      	adds	r3, #1
 800e362:	d0da      	beq.n	800e31a <xQueueGenericReceive+0x80>
 800e364:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e366:	3301      	adds	r3, #1
 800e368:	d0d9      	beq.n	800e31e <xQueueGenericReceive+0x84>
 800e36a:	f001 f9b7 	bl	800f6dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e36e:	a901      	add	r1, sp, #4
 800e370:	a802      	add	r0, sp, #8
 800e372:	f000 fd6d 	bl	800ee50 <xTaskCheckForTimeOut>
 800e376:	2800      	cmp	r0, #0
 800e378:	d118      	bne.n	800e3ac <xQueueGenericReceive+0x112>
	taskENTER_CRITICAL();
 800e37a:	f001 f9a3 	bl	800f6c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e37e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800e380:	f001 f9ac 	bl	800f6dc <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e384:	2f00      	cmp	r7, #0
 800e386:	d1d4      	bne.n	800e332 <xQueueGenericReceive+0x98>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d0c9      	beq.n	800e322 <xQueueGenericReceive+0x88>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e38e:	0020      	movs	r0, r4
 800e390:	3024      	adds	r0, #36	; 0x24
 800e392:	9901      	ldr	r1, [sp, #4]
 800e394:	f000 fcde 	bl	800ed54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e398:	0020      	movs	r0, r4
 800e39a:	f7ff fe05 	bl	800dfa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e39e:	f000 fb41 	bl	800ea24 <xTaskResumeAll>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d1ca      	bne.n	800e33c <xQueueGenericReceive+0xa2>
					portYIELD_WITHIN_API();
 800e3a6:	f001 f981 	bl	800f6ac <vPortYield>
 800e3aa:	e7c7      	b.n	800e33c <xQueueGenericReceive+0xa2>
			prvUnlockQueue( pxQueue );
 800e3ac:	0020      	movs	r0, r4
 800e3ae:	f7ff fdfb 	bl	800dfa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3b2:	f000 fb37 	bl	800ea24 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	e78b      	b.n	800e2d2 <xQueueGenericReceive+0x38>

0800e3ba <xQueueReceiveFromISR>:
{
 800e3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	0006      	movs	r6, r0
 800e3c0:	9101      	str	r1, [sp, #4]
 800e3c2:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3c4:	f001 f994 	bl	800f6f0 <ulSetInterruptMaskFromISR>
 800e3c8:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			xReturn = pdFAIL;
 800e3cc:	2400      	movs	r4, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d105      	bne.n	800e3de <xQueueReceiveFromISR+0x24>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e3d2:	0028      	movs	r0, r5
 800e3d4:	f001 f991 	bl	800f6fa <vClearInterruptMaskFromISR>
}
 800e3d8:	0020      	movs	r0, r4
 800e3da:	b003      	add	sp, #12
 800e3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3de:	9901      	ldr	r1, [sp, #4]
 800e3e0:	0030      	movs	r0, r6
 800e3e2:	f7ff fdcf 	bl	800df84 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e3e6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	63b3      	str	r3, [r6, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e3ec:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	d004      	beq.n	800e3fc <xQueueReceiveFromISR+0x42>
				++( pxQueue->xRxLock );
 800e3f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	6473      	str	r3, [r6, #68]	; 0x44
			xReturn = pdPASS;
 800e3f8:	2401      	movs	r4, #1
 800e3fa:	e7ea      	b.n	800e3d2 <xQueueReceiveFromISR+0x18>
 800e3fc:	3401      	adds	r4, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3fe:	6933      	ldr	r3, [r6, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0e6      	beq.n	800e3d2 <xQueueReceiveFromISR+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e404:	0030      	movs	r0, r6
 800e406:	3010      	adds	r0, #16
 800e408:	f000 fcda 	bl	800edc0 <xTaskRemoveFromEventList>
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d0e0      	beq.n	800e3d2 <xQueueReceiveFromISR+0x18>
						if( pxHigherPriorityTaskWoken != NULL )
 800e410:	2f00      	cmp	r7, #0
 800e412:	d002      	beq.n	800e41a <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e414:	2301      	movs	r3, #1
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	e7db      	b.n	800e3d2 <xQueueReceiveFromISR+0x18>
			xReturn = pdPASS;
 800e41a:	2401      	movs	r4, #1
 800e41c:	e7d9      	b.n	800e3d2 <xQueueReceiveFromISR+0x18>
	...

0800e420 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e420:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <vQueueAddToRegistry+0x2c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d009      	beq.n	800e43e <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e42a:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e42c:	4c07      	ldr	r4, [pc, #28]	; (800e44c <vQueueAddToRegistry+0x2c>)
 800e42e:	00da      	lsls	r2, r3, #3
 800e430:	58a2      	ldr	r2, [r4, r2]
 800e432:	2a00      	cmp	r2, #0
 800e434:	d004      	beq.n	800e440 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e436:	3301      	adds	r3, #1
 800e438:	2b08      	cmp	r3, #8
 800e43a:	d1f8      	bne.n	800e42e <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e43c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e43e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e440:	4a02      	ldr	r2, [pc, #8]	; (800e44c <vQueueAddToRegistry+0x2c>)
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e446:	18d3      	adds	r3, r2, r3
 800e448:	6058      	str	r0, [r3, #4]
				break;
 800e44a:	e7f7      	b.n	800e43c <vQueueAddToRegistry+0x1c>
 800e44c:	20005fdc 	.word	0x20005fdc

0800e450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	0004      	movs	r4, r0
 800e454:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e456:	f001 f935 	bl	800f6c4 <vPortEnterCritical>
 800e45a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e45c:	3301      	adds	r3, #1
 800e45e:	d00b      	beq.n	800e478 <vQueueWaitForMessageRestricted+0x28>
 800e460:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e462:	3301      	adds	r3, #1
 800e464:	d00b      	beq.n	800e47e <vQueueWaitForMessageRestricted+0x2e>
 800e466:	f001 f939 	bl	800f6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e46a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d009      	beq.n	800e484 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e470:	0020      	movs	r0, r4
 800e472:	f7ff fd99 	bl	800dfa8 <prvUnlockQueue>
	}
 800e476:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e478:	2300      	movs	r3, #0
 800e47a:	6463      	str	r3, [r4, #68]	; 0x44
 800e47c:	e7f0      	b.n	800e460 <vQueueWaitForMessageRestricted+0x10>
 800e47e:	2300      	movs	r3, #0
 800e480:	64a3      	str	r3, [r4, #72]	; 0x48
 800e482:	e7f0      	b.n	800e466 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e484:	0020      	movs	r0, r4
 800e486:	3024      	adds	r0, #36	; 0x24
 800e488:	0029      	movs	r1, r5
 800e48a:	f000 fc83 	bl	800ed94 <vTaskPlaceOnEventListRestricted>
 800e48e:	e7ef      	b.n	800e470 <vQueueWaitForMessageRestricted+0x20>

0800e490 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e492:	46d6      	mov	lr, sl
 800e494:	464f      	mov	r7, r9
 800e496:	4646      	mov	r6, r8
 800e498:	b5c0      	push	{r6, r7, lr}
 800e49a:	0006      	movs	r6, r0
 800e49c:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e49e:	6808      	ldr	r0, [r1, #0]
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d044      	beq.n	800e52e <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e4a4:	684b      	ldr	r3, [r1, #4]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	604b      	str	r3, [r1, #4]
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	4690      	mov	r8, r2
 800e4ae:	4488      	add	r8, r1
 800e4b0:	4543      	cmp	r3, r8
 800e4b2:	d006      	beq.n	800e4c2 <prvListTaskWithinSingleList+0x32>
 800e4b4:	684b      	ldr	r3, [r1, #4]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e4ba:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	469a      	mov	sl, r3
 800e4c0:	e018      	b.n	800e4f4 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e4c2:	68cb      	ldr	r3, [r1, #12]
 800e4c4:	604b      	str	r3, [r1, #4]
 800e4c6:	e7f5      	b.n	800e4b4 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e4c8:	68cb      	ldr	r3, [r1, #12]
 800e4ca:	604b      	str	r3, [r1, #4]
 800e4cc:	e017      	b.n	800e4fe <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e4ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e4d0:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e4d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e4d4:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e4d6:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4d8:	783b      	ldrb	r3, [r7, #0]
 800e4da:	2ba5      	cmp	r3, #165	; 0xa5
 800e4dc:	d125      	bne.n	800e52a <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e4de:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e4e0:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4e2:	5cfc      	ldrb	r4, [r7, r3]
 800e4e4:	2ca5      	cmp	r4, #165	; 0xa5
 800e4e6:	d0fb      	beq.n	800e4e0 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e4e8:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e4ea:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e4f0:	45a9      	cmp	r9, r5
 800e4f2:	d01c      	beq.n	800e52e <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e4f4:	684b      	ldr	r3, [r1, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	604b      	str	r3, [r1, #4]
 800e4fa:	4598      	cmp	r8, r3
 800e4fc:	d0e4      	beq.n	800e4c8 <prvListTaskWithinSingleList+0x38>
 800e4fe:	684b      	ldr	r3, [r1, #4]
 800e500:	68dd      	ldr	r5, [r3, #12]
 800e502:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e504:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e506:	002b      	movs	r3, r5
 800e508:	3334      	adds	r3, #52	; 0x34
 800e50a:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e50c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e50e:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e510:	4663      	mov	r3, ip
 800e512:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e514:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e516:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e518:	4663      	mov	r3, ip
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	d1d7      	bne.n	800e4ce <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e51e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0d4      	beq.n	800e4ce <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e524:	4653      	mov	r3, sl
 800e526:	7333      	strb	r3, [r6, #12]
 800e528:	e7d1      	b.n	800e4ce <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e7dc      	b.n	800e4e8 <prvListTaskWithinSingleList+0x58>
	}
 800e52e:	bc1c      	pop	{r2, r3, r4}
 800e530:	4690      	mov	r8, r2
 800e532:	4699      	mov	r9, r3
 800e534:	46a2      	mov	sl, r4
 800e536:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e538 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e538:	4b08      	ldr	r3, [pc, #32]	; (800e55c <prvResetNextTaskUnblockTime+0x24>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d007      	beq.n	800e552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e542:	4b06      	ldr	r3, [pc, #24]	; (800e55c <prvResetNextTaskUnblockTime+0x24>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	4b04      	ldr	r3, [pc, #16]	; (800e560 <prvResetNextTaskUnblockTime+0x28>)
 800e54e:	601a      	str	r2, [r3, #0]
	}
}
 800e550:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e552:	4b03      	ldr	r3, [pc, #12]	; (800e560 <prvResetNextTaskUnblockTime+0x28>)
 800e554:	2201      	movs	r2, #1
 800e556:	4252      	negs	r2, r2
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	e7f9      	b.n	800e550 <prvResetNextTaskUnblockTime+0x18>
 800e55c:	2000198c 	.word	0x2000198c
 800e560:	200000bc 	.word	0x200000bc

0800e564 <prvAddCurrentTaskToDelayedList>:
{
 800e564:	b510      	push	{r4, lr}
 800e566:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e568:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <prvAddCurrentTaskToDelayedList+0x40>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e56e:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <prvAddCurrentTaskToDelayedList+0x44>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4283      	cmp	r3, r0
 800e574:	d80d      	bhi.n	800e592 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e576:	4b0d      	ldr	r3, [pc, #52]	; (800e5ac <prvAddCurrentTaskToDelayedList+0x48>)
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	4b0a      	ldr	r3, [pc, #40]	; (800e5a4 <prvAddCurrentTaskToDelayedList+0x40>)
 800e57c:	6819      	ldr	r1, [r3, #0]
 800e57e:	3104      	adds	r1, #4
 800e580:	f7ff fc98 	bl	800deb4 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e584:	4b0a      	ldr	r3, [pc, #40]	; (800e5b0 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	42a3      	cmp	r3, r4
 800e58a:	d909      	bls.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e58c:	4b08      	ldr	r3, [pc, #32]	; (800e5b0 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e58e:	601c      	str	r4, [r3, #0]
}
 800e590:	e006      	b.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e592:	4b08      	ldr	r3, [pc, #32]	; (800e5b4 <prvAddCurrentTaskToDelayedList+0x50>)
 800e594:	6818      	ldr	r0, [r3, #0]
 800e596:	4b03      	ldr	r3, [pc, #12]	; (800e5a4 <prvAddCurrentTaskToDelayedList+0x40>)
 800e598:	6819      	ldr	r1, [r3, #0]
 800e59a:	3104      	adds	r1, #4
 800e59c:	f7ff fc8a 	bl	800deb4 <vListInsert>
}
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	20001988 	.word	0x20001988
 800e5a8:	20001aa8 	.word	0x20001aa8
 800e5ac:	2000198c 	.word	0x2000198c
 800e5b0:	200000bc 	.word	0x200000bc
 800e5b4:	20001990 	.word	0x20001990

0800e5b8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e5bc:	f005 f9b4 	bl	8013928 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e5c0:	0020      	movs	r0, r4
 800e5c2:	f7f1 fda9 	bl	8000118 <strlen>
 800e5c6:	0003      	movs	r3, r0
 800e5c8:	280b      	cmp	r0, #11
 800e5ca:	dc08      	bgt.n	800e5de <prvWriteNameToBuffer+0x26>
 800e5cc:	1820      	adds	r0, r4, r0
 800e5ce:	0022      	movs	r2, r4
 800e5d0:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e5d2:	2320      	movs	r3, #32
 800e5d4:	7003      	strb	r3, [r0, #0]
 800e5d6:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e5d8:	4290      	cmp	r0, r2
 800e5da:	d1fb      	bne.n	800e5d4 <prvWriteNameToBuffer+0x1c>
 800e5dc:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e5de:	18e0      	adds	r0, r4, r3
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e5e4:	bd10      	pop	{r4, pc}
	...

0800e5e8 <xTaskGenericCreate>:
{
 800e5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ea:	46c6      	mov	lr, r8
 800e5ec:	b500      	push	{lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	9000      	str	r0, [sp, #0]
 800e5f2:	000c      	movs	r4, r1
 800e5f4:	0015      	movs	r5, r2
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5fa:	2f00      	cmp	r7, #0
 800e5fc:	d064      	beq.n	800e6c8 <xTaskGenericCreate+0xe0>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e5fe:	2060      	movs	r0, #96	; 0x60
 800e600:	f001 f8dc 	bl	800f7bc <pvPortMalloc>
 800e604:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e606:	d067      	beq.n	800e6d8 <xTaskGenericCreate+0xf0>
				pxNewTCB->pxStack = pxStack;
 800e608:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e60a:	00aa      	lsls	r2, r5, #2
 800e60c:	21a5      	movs	r1, #165	; 0xa5
 800e60e:	0038      	movs	r0, r7
 800e610:	f004 fbc0 	bl	8012d94 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e614:	4b5a      	ldr	r3, [pc, #360]	; (800e780 <xTaskGenericCreate+0x198>)
 800e616:	18eb      	adds	r3, r5, r3
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800e61c:	4694      	mov	ip, r2
 800e61e:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e620:	2207      	movs	r2, #7
 800e622:	4393      	bics	r3, r2
 800e624:	4698      	mov	r8, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e626:	7822      	ldrb	r2, [r4, #0]
 800e628:	2334      	movs	r3, #52	; 0x34
 800e62a:	54f2      	strb	r2, [r6, r3]
		if( pcName[ x ] == 0x00 )
 800e62c:	7823      	ldrb	r3, [r4, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00d      	beq.n	800e64e <xTaskGenericCreate+0x66>
 800e632:	1c61      	adds	r1, r4, #1
 800e634:	0033      	movs	r3, r6
 800e636:	3335      	adds	r3, #53	; 0x35
 800e638:	0030      	movs	r0, r6
 800e63a:	3041      	adds	r0, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e63c:	780a      	ldrb	r2, [r1, #0]
 800e63e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e640:	780a      	ldrb	r2, [r1, #0]
 800e642:	2a00      	cmp	r2, #0
 800e644:	d003      	beq.n	800e64e <xTaskGenericCreate+0x66>
 800e646:	3101      	adds	r1, #1
 800e648:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e64a:	4283      	cmp	r3, r0
 800e64c:	d1f6      	bne.n	800e63c <xTaskGenericCreate+0x54>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e64e:	2340      	movs	r3, #64	; 0x40
 800e650:	2200      	movs	r2, #0
 800e652:	54f2      	strb	r2, [r6, r3]
 800e654:	9d08      	ldr	r5, [sp, #32]
 800e656:	2d06      	cmp	r5, #6
 800e658:	d900      	bls.n	800e65c <xTaskGenericCreate+0x74>
 800e65a:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800e65c:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e65e:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e660:	2400      	movs	r4, #0
 800e662:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e664:	1d37      	adds	r7, r6, #4
 800e666:	0038      	movs	r0, r7
 800e668:	f7ff fc15 	bl	800de96 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e66c:	0030      	movs	r0, r6
 800e66e:	3018      	adds	r0, #24
 800e670:	f7ff fc11 	bl	800de96 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e674:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e676:	2307      	movs	r3, #7
 800e678:	1b5b      	subs	r3, r3, r5
 800e67a:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e67c:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e67e:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e680:	65b4      	str	r4, [r6, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e682:	235c      	movs	r3, #92	; 0x5c
 800e684:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e686:	9a01      	ldr	r2, [sp, #4]
 800e688:	9900      	ldr	r1, [sp, #0]
 800e68a:	4640      	mov	r0, r8
 800e68c:	f000 ffd2 	bl	800f634 <pxPortInitialiseStack>
 800e690:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e694:	2b00      	cmp	r3, #0
 800e696:	d000      	beq.n	800e69a <xTaskGenericCreate+0xb2>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e698:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e69a:	f001 f813 	bl	800f6c4 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e69e:	4a39      	ldr	r2, [pc, #228]	; (800e784 <xTaskGenericCreate+0x19c>)
 800e6a0:	6813      	ldr	r3, [r2, #0]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e6a6:	4b38      	ldr	r3, [pc, #224]	; (800e788 <xTaskGenericCreate+0x1a0>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d01a      	beq.n	800e6e4 <xTaskGenericCreate+0xfc>
				if( xSchedulerRunning == pdFALSE )
 800e6ae:	4b37      	ldr	r3, [pc, #220]	; (800e78c <xTaskGenericCreate+0x1a4>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d11b      	bne.n	800e6ee <xTaskGenericCreate+0x106>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e6b6:	4b34      	ldr	r3, [pc, #208]	; (800e788 <xTaskGenericCreate+0x1a0>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6bc:	9a08      	ldr	r2, [sp, #32]
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d815      	bhi.n	800e6ee <xTaskGenericCreate+0x106>
						pxCurrentTCB = pxNewTCB;
 800e6c2:	4b31      	ldr	r3, [pc, #196]	; (800e788 <xTaskGenericCreate+0x1a0>)
 800e6c4:	601e      	str	r6, [r3, #0]
 800e6c6:	e012      	b.n	800e6ee <xTaskGenericCreate+0x106>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6c8:	0090      	lsls	r0, r2, #2
 800e6ca:	f001 f877 	bl	800f7bc <pvPortMalloc>
 800e6ce:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e6d0:	d195      	bne.n	800e5fe <xTaskGenericCreate+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6d2:	2001      	movs	r0, #1
 800e6d4:	4240      	negs	r0, r0
 800e6d6:	e02b      	b.n	800e730 <xTaskGenericCreate+0x148>
				vPortFree( pxStack );
 800e6d8:	0038      	movs	r0, r7
 800e6da:	f001 f8fd 	bl	800f8d8 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6de:	2001      	movs	r0, #1
 800e6e0:	4240      	negs	r0, r0
 800e6e2:	e025      	b.n	800e730 <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
 800e6e4:	4b28      	ldr	r3, [pc, #160]	; (800e788 <xTaskGenericCreate+0x1a0>)
 800e6e6:	601e      	str	r6, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6e8:	6813      	ldr	r3, [r2, #0]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d024      	beq.n	800e738 <xTaskGenericCreate+0x150>
			uxTaskNumber++;
 800e6ee:	4a28      	ldr	r2, [pc, #160]	; (800e790 <xTaskGenericCreate+0x1a8>)
 800e6f0:	6813      	ldr	r3, [r2, #0]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6f6:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e6f8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e6fa:	4a26      	ldr	r2, [pc, #152]	; (800e794 <xTaskGenericCreate+0x1ac>)
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d901      	bls.n	800e706 <xTaskGenericCreate+0x11e>
 800e702:	4a24      	ldr	r2, [pc, #144]	; (800e794 <xTaskGenericCreate+0x1ac>)
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	0098      	lsls	r0, r3, #2
 800e708:	18c0      	adds	r0, r0, r3
 800e70a:	0080      	lsls	r0, r0, #2
 800e70c:	4b22      	ldr	r3, [pc, #136]	; (800e798 <xTaskGenericCreate+0x1b0>)
 800e70e:	18c0      	adds	r0, r0, r3
 800e710:	0039      	movs	r1, r7
 800e712:	f7ff fbc3 	bl	800de9c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e716:	f000 ffe1 	bl	800f6dc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e71a:	4b1c      	ldr	r3, [pc, #112]	; (800e78c <xTaskGenericCreate+0x1a4>)
 800e71c:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e71e:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <xTaskGenericCreate+0x148>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e724:	4b18      	ldr	r3, [pc, #96]	; (800e788 <xTaskGenericCreate+0x1a0>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72a:	9a08      	ldr	r2, [sp, #32]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d322      	bcc.n	800e776 <xTaskGenericCreate+0x18e>
}
 800e730:	b002      	add	sp, #8
 800e732:	bc04      	pop	{r2}
 800e734:	4690      	mov	r8, r2
 800e736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e738:	4c17      	ldr	r4, [pc, #92]	; (800e798 <xTaskGenericCreate+0x1b0>)
 800e73a:	0025      	movs	r5, r4
 800e73c:	358c      	adds	r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e73e:	0020      	movs	r0, r4
 800e740:	f7ff fb9e 	bl	800de80 <vListInitialise>
 800e744:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e746:	42ac      	cmp	r4, r5
 800e748:	d1f9      	bne.n	800e73e <xTaskGenericCreate+0x156>
	vListInitialise( &xDelayedTaskList1 );
 800e74a:	4d14      	ldr	r5, [pc, #80]	; (800e79c <xTaskGenericCreate+0x1b4>)
 800e74c:	0028      	movs	r0, r5
 800e74e:	f7ff fb97 	bl	800de80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e752:	4c13      	ldr	r4, [pc, #76]	; (800e7a0 <xTaskGenericCreate+0x1b8>)
 800e754:	0020      	movs	r0, r4
 800e756:	f7ff fb93 	bl	800de80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e75a:	4812      	ldr	r0, [pc, #72]	; (800e7a4 <xTaskGenericCreate+0x1bc>)
 800e75c:	f7ff fb90 	bl	800de80 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e760:	4811      	ldr	r0, [pc, #68]	; (800e7a8 <xTaskGenericCreate+0x1c0>)
 800e762:	f7ff fb8d 	bl	800de80 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e766:	4811      	ldr	r0, [pc, #68]	; (800e7ac <xTaskGenericCreate+0x1c4>)
 800e768:	f7ff fb8a 	bl	800de80 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e76c:	4b10      	ldr	r3, [pc, #64]	; (800e7b0 <xTaskGenericCreate+0x1c8>)
 800e76e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e770:	4b10      	ldr	r3, [pc, #64]	; (800e7b4 <xTaskGenericCreate+0x1cc>)
 800e772:	601c      	str	r4, [r3, #0]
 800e774:	e7bb      	b.n	800e6ee <xTaskGenericCreate+0x106>
				taskYIELD_IF_USING_PREEMPTION();
 800e776:	f000 ff99 	bl	800f6ac <vPortYield>
			xReturn = pdPASS;
 800e77a:	2001      	movs	r0, #1
 800e77c:	e7d8      	b.n	800e730 <xTaskGenericCreate+0x148>
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	3fffffff 	.word	0x3fffffff
 800e784:	20001a24 	.word	0x20001a24
 800e788:	20001988 	.word	0x20001988
 800e78c:	20001a7c 	.word	0x20001a7c
 800e790:	20001a30 	.word	0x20001a30
 800e794:	20001a38 	.word	0x20001a38
 800e798:	20001994 	.word	0x20001994
 800e79c:	20001a3c 	.word	0x20001a3c
 800e7a0:	20001a50 	.word	0x20001a50
 800e7a4:	20001a68 	.word	0x20001a68
 800e7a8:	20001a94 	.word	0x20001a94
 800e7ac:	20001a80 	.word	0x20001a80
 800e7b0:	2000198c 	.word	0x2000198c
 800e7b4:	20001990 	.word	0x20001990

0800e7b8 <uxTaskPriorityGet>:
	{
 800e7b8:	b510      	push	{r4, lr}
 800e7ba:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e7bc:	f000 ff82 	bl	800f6c4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e7c0:	2c00      	cmp	r4, #0
 800e7c2:	d004      	beq.n	800e7ce <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e7c4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e7c6:	f000 ff89 	bl	800f6dc <vPortExitCritical>
	}
 800e7ca:	0020      	movs	r0, r4
 800e7cc:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e7ce:	4b01      	ldr	r3, [pc, #4]	; (800e7d4 <uxTaskPriorityGet+0x1c>)
 800e7d0:	681c      	ldr	r4, [r3, #0]
 800e7d2:	e7f7      	b.n	800e7c4 <uxTaskPriorityGet+0xc>
 800e7d4:	20001988 	.word	0x20001988

0800e7d8 <vTaskPrioritySet>:
	{
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	0004      	movs	r4, r0
 800e7dc:	000d      	movs	r5, r1
 800e7de:	2906      	cmp	r1, #6
 800e7e0:	d900      	bls.n	800e7e4 <vTaskPrioritySet+0xc>
 800e7e2:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800e7e4:	f000 ff6e 	bl	800f6c4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e7e8:	2c00      	cmp	r4, #0
 800e7ea:	d00e      	beq.n	800e80a <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e7ec:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e7ee:	42aa      	cmp	r2, r5
 800e7f0:	d027      	beq.n	800e842 <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800e7f2:	d20d      	bcs.n	800e810 <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800e7f4:	4b22      	ldr	r3, [pc, #136]	; (800e880 <vTaskPrioritySet+0xa8>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	d025      	beq.n	800e848 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e7fc:	4b20      	ldr	r3, [pc, #128]	; (800e880 <vTaskPrioritySet+0xa8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	2600      	movs	r6, #0
 800e804:	429d      	cmp	r5, r3
 800e806:	4176      	adcs	r6, r6
 800e808:	e007      	b.n	800e81a <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e80a:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <vTaskPrioritySet+0xa8>)
 800e80c:	681c      	ldr	r4, [r3, #0]
 800e80e:	e7ed      	b.n	800e7ec <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800e810:	4b1b      	ldr	r3, [pc, #108]	; (800e880 <vTaskPrioritySet+0xa8>)
 800e812:	681e      	ldr	r6, [r3, #0]
 800e814:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e816:	4273      	negs	r3, r6
 800e818:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e81a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e81c:	428a      	cmp	r2, r1
 800e81e:	d015      	beq.n	800e84c <vTaskPrioritySet+0x74>
					pxTCB->uxBasePriority = uxNewPriority;
 800e820:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e822:	69a3      	ldr	r3, [r4, #24]
 800e824:	2b00      	cmp	r3, #0
 800e826:	db02      	blt.n	800e82e <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e828:	2307      	movs	r3, #7
 800e82a:	1b5d      	subs	r5, r3, r5
 800e82c:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e82e:	008b      	lsls	r3, r1, #2
 800e830:	185b      	adds	r3, r3, r1
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4a13      	ldr	r2, [pc, #76]	; (800e884 <vTaskPrioritySet+0xac>)
 800e836:	189b      	adds	r3, r3, r2
 800e838:	6962      	ldr	r2, [r4, #20]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d008      	beq.n	800e850 <vTaskPrioritySet+0x78>
				if( xYieldRequired == pdTRUE )
 800e83e:	2e01      	cmp	r6, #1
 800e840:	d01a      	beq.n	800e878 <vTaskPrioritySet+0xa0>
		taskEXIT_CRITICAL();
 800e842:	f000 ff4b 	bl	800f6dc <vPortExitCritical>
	}
 800e846:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800e848:	2600      	movs	r6, #0
 800e84a:	e7e6      	b.n	800e81a <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800e84c:	62e5      	str	r5, [r4, #44]	; 0x2c
 800e84e:	e7e7      	b.n	800e820 <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e850:	1d25      	adds	r5, r4, #4
 800e852:	0028      	movs	r0, r5
 800e854:	f7ff fb45 	bl	800dee2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e858:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e85a:	4a0b      	ldr	r2, [pc, #44]	; (800e888 <vTaskPrioritySet+0xb0>)
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	4293      	cmp	r3, r2
 800e860:	d901      	bls.n	800e866 <vTaskPrioritySet+0x8e>
 800e862:	4a09      	ldr	r2, [pc, #36]	; (800e888 <vTaskPrioritySet+0xb0>)
 800e864:	6013      	str	r3, [r2, #0]
 800e866:	0098      	lsls	r0, r3, #2
 800e868:	18c0      	adds	r0, r0, r3
 800e86a:	0080      	lsls	r0, r0, #2
 800e86c:	4b05      	ldr	r3, [pc, #20]	; (800e884 <vTaskPrioritySet+0xac>)
 800e86e:	18c0      	adds	r0, r0, r3
 800e870:	0029      	movs	r1, r5
 800e872:	f7ff fb13 	bl	800de9c <vListInsertEnd>
 800e876:	e7e2      	b.n	800e83e <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800e878:	f000 ff18 	bl	800f6ac <vPortYield>
 800e87c:	e7e1      	b.n	800e842 <vTaskPrioritySet+0x6a>
 800e87e:	46c0      	nop			; (mov r8, r8)
 800e880:	20001988 	.word	0x20001988
 800e884:	20001994 	.word	0x20001994
 800e888:	20001a38 	.word	0x20001a38

0800e88c <vTaskStartScheduler>:
{
 800e88c:	b500      	push	{lr}
 800e88e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e890:	2300      	movs	r3, #0
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	9302      	str	r3, [sp, #8]
 800e896:	9301      	str	r3, [sp, #4]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2296      	movs	r2, #150	; 0x96
 800e89c:	490b      	ldr	r1, [pc, #44]	; (800e8cc <vTaskStartScheduler+0x40>)
 800e89e:	480c      	ldr	r0, [pc, #48]	; (800e8d0 <vTaskStartScheduler+0x44>)
 800e8a0:	f7ff fea2 	bl	800e5e8 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e8a4:	2801      	cmp	r0, #1
 800e8a6:	d001      	beq.n	800e8ac <vTaskStartScheduler+0x20>
}
 800e8a8:	b005      	add	sp, #20
 800e8aa:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800e8ac:	f000 fd34 	bl	800f318 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e8b0:	2801      	cmp	r0, #1
 800e8b2:	d1f9      	bne.n	800e8a8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e8b4:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e8b6:	4b07      	ldr	r3, [pc, #28]	; (800e8d4 <vTaskStartScheduler+0x48>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <vTaskStartScheduler+0x4c>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e8c2:	f7f8 ff21 	bl	8007708 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e8c6:	f000 fec7 	bl	800f658 <xPortStartScheduler>
}
 800e8ca:	e7ed      	b.n	800e8a8 <vTaskStartScheduler+0x1c>
 800e8cc:	0801977c 	.word	0x0801977c
 800e8d0:	0800eb4d 	.word	0x0800eb4d
 800e8d4:	20001a7c 	.word	0x20001a7c
 800e8d8:	20001aa8 	.word	0x20001aa8

0800e8dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e8dc:	4a02      	ldr	r2, [pc, #8]	; (800e8e8 <vTaskSuspendAll+0xc>)
 800e8de:	6813      	ldr	r3, [r2, #0]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	6013      	str	r3, [r2, #0]
}
 800e8e4:	4770      	bx	lr
 800e8e6:	46c0      	nop			; (mov r8, r8)
 800e8e8:	20001a2c 	.word	0x20001a2c

0800e8ec <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e8ec:	4b01      	ldr	r3, [pc, #4]	; (800e8f4 <xTaskGetTickCount+0x8>)
 800e8ee:	6818      	ldr	r0, [r3, #0]
}
 800e8f0:	4770      	bx	lr
 800e8f2:	46c0      	nop			; (mov r8, r8)
 800e8f4:	20001aa8 	.word	0x20001aa8

0800e8f8 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e8f8:	4b01      	ldr	r3, [pc, #4]	; (800e900 <xTaskGetTickCountFromISR+0x8>)
 800e8fa:	6818      	ldr	r0, [r3, #0]
}
 800e8fc:	4770      	bx	lr
 800e8fe:	46c0      	nop			; (mov r8, r8)
 800e900:	20001aa8 	.word	0x20001aa8

0800e904 <xTaskIncrementTick>:
{
 800e904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e906:	46d6      	mov	lr, sl
 800e908:	464f      	mov	r7, r9
 800e90a:	4646      	mov	r6, r8
 800e90c:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e90e:	4b3a      	ldr	r3, [pc, #232]	; (800e9f8 <xTaskIncrementTick+0xf4>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d15f      	bne.n	800e9d6 <xTaskIncrementTick+0xd2>
		++xTickCount;
 800e916:	4b39      	ldr	r3, [pc, #228]	; (800e9fc <xTaskIncrementTick+0xf8>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	3201      	adds	r2, #1
 800e91c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e91e:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e920:	2f00      	cmp	r7, #0
 800e922:	d038      	beq.n	800e996 <xTaskIncrementTick+0x92>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e924:	4b36      	ldr	r3, [pc, #216]	; (800ea00 <xTaskIncrementTick+0xfc>)
 800e926:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e928:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e92a:	42bb      	cmp	r3, r7
 800e92c:	d844      	bhi.n	800e9b8 <xTaskIncrementTick+0xb4>
BaseType_t xSwitchRequired = pdFALSE;
 800e92e:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e930:	4b34      	ldr	r3, [pc, #208]	; (800ea04 <xTaskIncrementTick+0x100>)
 800e932:	4698      	mov	r8, r3
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e934:	4699      	mov	r9, r3
						prvAddTaskToReadyList( pxTCB );
 800e936:	4b34      	ldr	r3, [pc, #208]	; (800ea08 <xTaskIncrementTick+0x104>)
 800e938:	469a      	mov	sl, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e93a:	4643      	mov	r3, r8
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d035      	beq.n	800e9b0 <xTaskIncrementTick+0xac>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e944:	464b      	mov	r3, r9
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e94c:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e94e:	429f      	cmp	r7, r3
 800e950:	d33e      	bcc.n	800e9d0 <xTaskIncrementTick+0xcc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e952:	1d25      	adds	r5, r4, #4
 800e954:	0028      	movs	r0, r5
 800e956:	f7ff fac4 	bl	800dee2 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e95a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <xTaskIncrementTick+0x64>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e960:	0020      	movs	r0, r4
 800e962:	3018      	adds	r0, #24
 800e964:	f7ff fabd 	bl	800dee2 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e96a:	4652      	mov	r2, sl
 800e96c:	6812      	ldr	r2, [r2, #0]
 800e96e:	4293      	cmp	r3, r2
 800e970:	d901      	bls.n	800e976 <xTaskIncrementTick+0x72>
 800e972:	4a25      	ldr	r2, [pc, #148]	; (800ea08 <xTaskIncrementTick+0x104>)
 800e974:	6013      	str	r3, [r2, #0]
 800e976:	0098      	lsls	r0, r3, #2
 800e978:	18c0      	adds	r0, r0, r3
 800e97a:	0080      	lsls	r0, r0, #2
 800e97c:	4b23      	ldr	r3, [pc, #140]	; (800ea0c <xTaskIncrementTick+0x108>)
 800e97e:	18c0      	adds	r0, r0, r3
 800e980:	0029      	movs	r1, r5
 800e982:	f7ff fa8b 	bl	800de9c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e986:	4b22      	ldr	r3, [pc, #136]	; (800ea10 <xTaskIncrementTick+0x10c>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98e:	429a      	cmp	r2, r3
 800e990:	d3d3      	bcc.n	800e93a <xTaskIncrementTick+0x36>
								xSwitchRequired = pdTRUE;
 800e992:	2601      	movs	r6, #1
 800e994:	e7d1      	b.n	800e93a <xTaskIncrementTick+0x36>
				taskSWITCH_DELAYED_LISTS();
 800e996:	4a1b      	ldr	r2, [pc, #108]	; (800ea04 <xTaskIncrementTick+0x100>)
 800e998:	6811      	ldr	r1, [r2, #0]
 800e99a:	4b1e      	ldr	r3, [pc, #120]	; (800ea14 <xTaskIncrementTick+0x110>)
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	6010      	str	r0, [r2, #0]
 800e9a0:	6019      	str	r1, [r3, #0]
 800e9a2:	4a1d      	ldr	r2, [pc, #116]	; (800ea18 <xTaskIncrementTick+0x114>)
 800e9a4:	6813      	ldr	r3, [r2, #0]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	f7ff fdc5 	bl	800e538 <prvResetNextTaskUnblockTime>
 800e9ae:	e7b9      	b.n	800e924 <xTaskIncrementTick+0x20>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e9b0:	4b13      	ldr	r3, [pc, #76]	; (800ea00 <xTaskIncrementTick+0xfc>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	4252      	negs	r2, r2
 800e9b6:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e9b8:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <xTaskIncrementTick+0x10c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9be:	0093      	lsls	r3, r2, #2
 800e9c0:	189b      	adds	r3, r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4a11      	ldr	r2, [pc, #68]	; (800ea0c <xTaskIncrementTick+0x108>)
 800e9c6:	589b      	ldr	r3, [r3, r2]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d909      	bls.n	800e9e0 <xTaskIncrementTick+0xdc>
				xSwitchRequired = pdTRUE;
 800e9cc:	2601      	movs	r6, #1
 800e9ce:	e007      	b.n	800e9e0 <xTaskIncrementTick+0xdc>
							xNextTaskUnblockTime = xItemValue;
 800e9d0:	4a0b      	ldr	r2, [pc, #44]	; (800ea00 <xTaskIncrementTick+0xfc>)
 800e9d2:	6013      	str	r3, [r2, #0]
							break;
 800e9d4:	e7f0      	b.n	800e9b8 <xTaskIncrementTick+0xb4>
		++uxPendedTicks;
 800e9d6:	4a11      	ldr	r2, [pc, #68]	; (800ea1c <xTaskIncrementTick+0x118>)
 800e9d8:	6813      	ldr	r3, [r2, #0]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e9de:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800e9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ea20 <xTaskIncrementTick+0x11c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d000      	beq.n	800e9ea <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800e9e8:	2601      	movs	r6, #1
}
 800e9ea:	0030      	movs	r0, r6
 800e9ec:	bc1c      	pop	{r2, r3, r4}
 800e9ee:	4690      	mov	r8, r2
 800e9f0:	4699      	mov	r9, r3
 800e9f2:	46a2      	mov	sl, r4
 800e9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f6:	46c0      	nop			; (mov r8, r8)
 800e9f8:	20001a2c 	.word	0x20001a2c
 800e9fc:	20001aa8 	.word	0x20001aa8
 800ea00:	200000bc 	.word	0x200000bc
 800ea04:	2000198c 	.word	0x2000198c
 800ea08:	20001a38 	.word	0x20001a38
 800ea0c:	20001994 	.word	0x20001994
 800ea10:	20001988 	.word	0x20001988
 800ea14:	20001990 	.word	0x20001990
 800ea18:	20001a64 	.word	0x20001a64
 800ea1c:	20001a28 	.word	0x20001a28
 800ea20:	20001aac 	.word	0x20001aac

0800ea24 <xTaskResumeAll>:
{
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	46ce      	mov	lr, r9
 800ea28:	4647      	mov	r7, r8
 800ea2a:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800ea2c:	f000 fe4a 	bl	800f6c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ea30:	4b30      	ldr	r3, [pc, #192]	; (800eaf4 <xTaskResumeAll+0xd0>)
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	3a01      	subs	r2, #1
 800ea36:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea38:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea3a:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d14d      	bne.n	800eadc <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea40:	4b2d      	ldr	r3, [pc, #180]	; (800eaf8 <xTaskResumeAll+0xd4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea44:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d048      	beq.n	800eadc <xTaskResumeAll+0xb8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea4a:	4e2c      	ldr	r6, [pc, #176]	; (800eafc <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ea4c:	46b0      	mov	r8, r6
					prvAddTaskToReadyList( pxTCB );
 800ea4e:	4f2c      	ldr	r7, [pc, #176]	; (800eb00 <xTaskResumeAll+0xdc>)
 800ea50:	46b9      	mov	r9, r7
 800ea52:	e00d      	b.n	800ea70 <xTaskResumeAll+0x4c>
 800ea54:	0098      	lsls	r0, r3, #2
 800ea56:	18c0      	adds	r0, r0, r3
 800ea58:	0080      	lsls	r0, r0, #2
 800ea5a:	4b2a      	ldr	r3, [pc, #168]	; (800eb04 <xTaskResumeAll+0xe0>)
 800ea5c:	18c0      	adds	r0, r0, r3
 800ea5e:	0029      	movs	r1, r5
 800ea60:	f7ff fa1c 	bl	800de9c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea64:	4b28      	ldr	r3, [pc, #160]	; (800eb08 <xTaskResumeAll+0xe4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ea6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d214      	bcs.n	800ea9a <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea70:	6833      	ldr	r3, [r6, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d015      	beq.n	800eaa2 <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ea76:	4643      	mov	r3, r8
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea7c:	0020      	movs	r0, r4
 800ea7e:	3018      	adds	r0, #24
 800ea80:	f7ff fa2f 	bl	800dee2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ea84:	1d25      	adds	r5, r4, #4
 800ea86:	0028      	movs	r0, r5
 800ea88:	f7ff fa2b 	bl	800dee2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d9df      	bls.n	800ea54 <xTaskResumeAll+0x30>
 800ea94:	464a      	mov	r2, r9
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	e7dc      	b.n	800ea54 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
 800ea9a:	4b1c      	ldr	r3, [pc, #112]	; (800eb0c <xTaskResumeAll+0xe8>)
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	e7e6      	b.n	800ea70 <xTaskResumeAll+0x4c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800eaa2:	4b1b      	ldr	r3, [pc, #108]	; (800eb10 <xTaskResumeAll+0xec>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d013      	beq.n	800ead2 <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eaaa:	4b19      	ldr	r3, [pc, #100]	; (800eb10 <xTaskResumeAll+0xec>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00f      	beq.n	800ead2 <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 800eab2:	4e16      	ldr	r6, [pc, #88]	; (800eb0c <xTaskResumeAll+0xe8>)
 800eab4:	2501      	movs	r5, #1
						--uxPendedTicks;
 800eab6:	4c16      	ldr	r4, [pc, #88]	; (800eb10 <xTaskResumeAll+0xec>)
 800eab8:	e005      	b.n	800eac6 <xTaskResumeAll+0xa2>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d005      	beq.n	800ead2 <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
 800eac6:	f7ff ff1d 	bl	800e904 <xTaskIncrementTick>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d0f5      	beq.n	800eaba <xTaskResumeAll+0x96>
							xYieldPending = pdTRUE;
 800eace:	6035      	str	r5, [r6, #0]
 800ead0:	e7f3      	b.n	800eaba <xTaskResumeAll+0x96>
				if( xYieldPending == pdTRUE )
 800ead2:	4b0e      	ldr	r3, [pc, #56]	; (800eb0c <xTaskResumeAll+0xe8>)
 800ead4:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800ead6:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d006      	beq.n	800eaea <xTaskResumeAll+0xc6>
	taskEXIT_CRITICAL();
 800eadc:	f000 fdfe 	bl	800f6dc <vPortExitCritical>
}
 800eae0:	0020      	movs	r0, r4
 800eae2:	bc0c      	pop	{r2, r3}
 800eae4:	4690      	mov	r8, r2
 800eae6:	4699      	mov	r9, r3
 800eae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800eaea:	f000 fddf 	bl	800f6ac <vPortYield>
						xAlreadyYielded = pdTRUE;
 800eaee:	3401      	adds	r4, #1
 800eaf0:	e7f4      	b.n	800eadc <xTaskResumeAll+0xb8>
 800eaf2:	46c0      	nop			; (mov r8, r8)
 800eaf4:	20001a2c 	.word	0x20001a2c
 800eaf8:	20001a24 	.word	0x20001a24
 800eafc:	20001a68 	.word	0x20001a68
 800eb00:	20001a38 	.word	0x20001a38
 800eb04:	20001994 	.word	0x20001994
 800eb08:	20001988 	.word	0x20001988
 800eb0c:	20001aac 	.word	0x20001aac
 800eb10:	20001a28 	.word	0x20001a28

0800eb14 <vTaskDelay>:
	{
 800eb14:	b510      	push	{r4, lr}
 800eb16:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb18:	d010      	beq.n	800eb3c <vTaskDelay+0x28>
			vTaskSuspendAll();
 800eb1a:	f7ff fedf 	bl	800e8dc <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800eb1e:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <vTaskDelay+0x30>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <vTaskDelay+0x34>)
 800eb26:	6818      	ldr	r0, [r3, #0]
 800eb28:	3004      	adds	r0, #4
 800eb2a:	f7ff f9da 	bl	800dee2 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eb2e:	0020      	movs	r0, r4
 800eb30:	f7ff fd18 	bl	800e564 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800eb34:	f7ff ff76 	bl	800ea24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d101      	bne.n	800eb40 <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800eb3c:	f000 fdb6 	bl	800f6ac <vPortYield>
	}
 800eb40:	bd10      	pop	{r4, pc}
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	20001aa8 	.word	0x20001aa8
 800eb48:	20001988 	.word	0x20001988

0800eb4c <prvIdleTask>:
{
 800eb4c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800eb4e:	4d16      	ldr	r5, [pc, #88]	; (800eba8 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800eb50:	4e16      	ldr	r6, [pc, #88]	; (800ebac <prvIdleTask+0x60>)
 800eb52:	e003      	b.n	800eb5c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb54:	4b16      	ldr	r3, [pc, #88]	; (800ebb0 <prvIdleTask+0x64>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d822      	bhi.n	800eba2 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0f8      	beq.n	800eb54 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800eb62:	f7ff febb 	bl	800e8dc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800eb66:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800eb68:	f7ff ff5c 	bl	800ea24 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800eb6c:	2c00      	cmp	r4, #0
 800eb6e:	d0f5      	beq.n	800eb5c <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800eb70:	f000 fda8 	bl	800f6c4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800eb74:	4b0d      	ldr	r3, [pc, #52]	; (800ebac <prvIdleTask+0x60>)
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eb7a:	1d20      	adds	r0, r4, #4
 800eb7c:	f7ff f9b1 	bl	800dee2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800eb80:	4a0c      	ldr	r2, [pc, #48]	; (800ebb4 <prvIdleTask+0x68>)
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	3b01      	subs	r3, #1
 800eb86:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800eb88:	4a07      	ldr	r2, [pc, #28]	; (800eba8 <prvIdleTask+0x5c>)
 800eb8a:	6813      	ldr	r3, [r2, #0]
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800eb90:	f000 fda4 	bl	800f6dc <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800eb94:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800eb96:	f000 fe9f 	bl	800f8d8 <vPortFree>
		vPortFree( pxTCB );
 800eb9a:	0020      	movs	r0, r4
 800eb9c:	f000 fe9c 	bl	800f8d8 <vPortFree>
 800eba0:	e7dc      	b.n	800eb5c <prvIdleTask+0x10>
				taskYIELD();
 800eba2:	f000 fd83 	bl	800f6ac <vPortYield>
 800eba6:	e7d9      	b.n	800eb5c <prvIdleTask+0x10>
 800eba8:	20001a34 	.word	0x20001a34
 800ebac:	20001a94 	.word	0x20001a94
 800ebb0:	20001994 	.word	0x20001994
 800ebb4:	20001a24 	.word	0x20001a24

0800ebb8 <uxTaskGetSystemState>:
	{
 800ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebba:	46c6      	mov	lr, r8
 800ebbc:	b500      	push	{lr}
 800ebbe:	0006      	movs	r6, r0
 800ebc0:	000d      	movs	r5, r1
 800ebc2:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800ebc4:	f7ff fe8a 	bl	800e8dc <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <uxTaskGetSystemState+0x8c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ebcc:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ebce:	42ab      	cmp	r3, r5
 800ebd0:	d831      	bhi.n	800ec36 <uxTaskGetSystemState+0x7e>
 800ebd2:	4d1d      	ldr	r5, [pc, #116]	; (800ec48 <uxTaskGetSystemState+0x90>)
 800ebd4:	002f      	movs	r7, r5
 800ebd6:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ebd8:	0160      	lsls	r0, r4, #5
 800ebda:	1830      	adds	r0, r6, r0
 800ebdc:	2201      	movs	r2, #1
 800ebde:	0029      	movs	r1, r5
 800ebe0:	f7ff fc56 	bl	800e490 <prvListTaskWithinSingleList>
 800ebe4:	1824      	adds	r4, r4, r0
 800ebe6:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe8:	42bd      	cmp	r5, r7
 800ebea:	d1f5      	bne.n	800ebd8 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ebec:	4b17      	ldr	r3, [pc, #92]	; (800ec4c <uxTaskGetSystemState+0x94>)
 800ebee:	6819      	ldr	r1, [r3, #0]
 800ebf0:	0160      	lsls	r0, r4, #5
 800ebf2:	1830      	adds	r0, r6, r0
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	f7ff fc4b 	bl	800e490 <prvListTaskWithinSingleList>
 800ebfa:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ebfc:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <uxTaskGetSystemState+0x98>)
 800ebfe:	6819      	ldr	r1, [r3, #0]
 800ec00:	0160      	lsls	r0, r4, #5
 800ec02:	1830      	adds	r0, r6, r0
 800ec04:	2202      	movs	r2, #2
 800ec06:	f7ff fc43 	bl	800e490 <prvListTaskWithinSingleList>
 800ec0a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ec0c:	0160      	lsls	r0, r4, #5
 800ec0e:	1830      	adds	r0, r6, r0
 800ec10:	2204      	movs	r2, #4
 800ec12:	4910      	ldr	r1, [pc, #64]	; (800ec54 <uxTaskGetSystemState+0x9c>)
 800ec14:	f7ff fc3c 	bl	800e490 <prvListTaskWithinSingleList>
 800ec18:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ec1a:	0160      	lsls	r0, r4, #5
 800ec1c:	1830      	adds	r0, r6, r0
 800ec1e:	2203      	movs	r2, #3
 800ec20:	490d      	ldr	r1, [pc, #52]	; (800ec58 <uxTaskGetSystemState+0xa0>)
 800ec22:	f7ff fc35 	bl	800e490 <prvListTaskWithinSingleList>
 800ec26:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800ec28:	4643      	mov	r3, r8
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ec2e:	f7f8 fd7b 	bl	8007728 <ulMainGetRunTimeCounterValue>
 800ec32:	4643      	mov	r3, r8
 800ec34:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800ec36:	f7ff fef5 	bl	800ea24 <xTaskResumeAll>
	}
 800ec3a:	0020      	movs	r0, r4
 800ec3c:	bc04      	pop	{r2}
 800ec3e:	4690      	mov	r8, r2
 800ec40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20001a24 	.word	0x20001a24
 800ec48:	20001a0c 	.word	0x20001a0c
 800ec4c:	2000198c 	.word	0x2000198c
 800ec50:	20001990 	.word	0x20001990
 800ec54:	20001a94 	.word	0x20001a94
 800ec58:	20001a80 	.word	0x20001a80

0800ec5c <vTaskSwitchContext>:
{
 800ec5c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ec5e:	4b36      	ldr	r3, [pc, #216]	; (800ed38 <vTaskSwitchContext+0xdc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d003      	beq.n	800ec6e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ec66:	4b35      	ldr	r3, [pc, #212]	; (800ed3c <vTaskSwitchContext+0xe0>)
 800ec68:	2201      	movs	r2, #1
 800ec6a:	601a      	str	r2, [r3, #0]
}
 800ec6c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800ec6e:	4b33      	ldr	r3, [pc, #204]	; (800ed3c <vTaskSwitchContext+0xe0>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ec74:	f7f8 fd58 	bl	8007728 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ec78:	4b31      	ldr	r3, [pc, #196]	; (800ed40 <vTaskSwitchContext+0xe4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4298      	cmp	r0, r3
 800ec7e:	d905      	bls.n	800ec8c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ec80:	4a30      	ldr	r2, [pc, #192]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800ec82:	6812      	ldr	r2, [r2, #0]
 800ec84:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ec86:	1acb      	subs	r3, r1, r3
 800ec88:	181b      	adds	r3, r3, r0
 800ec8a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800ec8c:	4b2c      	ldr	r3, [pc, #176]	; (800ed40 <vTaskSwitchContext+0xe4>)
 800ec8e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ec90:	4b2c      	ldr	r3, [pc, #176]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	6812      	ldr	r2, [r2, #0]
 800ec98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d937      	bls.n	800ed0e <vTaskSwitchContext+0xb2>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ec9e:	4b29      	ldr	r3, [pc, #164]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eca4:	2214      	movs	r2, #20
 800eca6:	4928      	ldr	r1, [pc, #160]	; (800ed48 <vTaskSwitchContext+0xec>)
 800eca8:	f004 f85c 	bl	8012d64 <memcmp>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d135      	bne.n	800ed1c <vTaskSwitchContext+0xc0>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ecb0:	4b26      	ldr	r3, [pc, #152]	; (800ed4c <vTaskSwitchContext+0xf0>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	0093      	lsls	r3, r2, #2
 800ecb6:	189b      	adds	r3, r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	4a25      	ldr	r2, [pc, #148]	; (800ed50 <vTaskSwitchContext+0xf4>)
 800ecbc:	589b      	ldr	r3, [r3, r2]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10b      	bne.n	800ecda <vTaskSwitchContext+0x7e>
 800ecc2:	4a22      	ldr	r2, [pc, #136]	; (800ed4c <vTaskSwitchContext+0xf0>)
 800ecc4:	4822      	ldr	r0, [pc, #136]	; (800ed50 <vTaskSwitchContext+0xf4>)
 800ecc6:	6813      	ldr	r3, [r2, #0]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	6013      	str	r3, [r2, #0]
 800eccc:	6811      	ldr	r1, [r2, #0]
 800ecce:	008b      	lsls	r3, r1, #2
 800ecd0:	185b      	adds	r3, r3, r1
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	581b      	ldr	r3, [r3, r0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d0f5      	beq.n	800ecc6 <vTaskSwitchContext+0x6a>
 800ecda:	4b1c      	ldr	r3, [pc, #112]	; (800ed4c <vTaskSwitchContext+0xf0>)
 800ecdc:	6819      	ldr	r1, [r3, #0]
 800ecde:	4c1c      	ldr	r4, [pc, #112]	; (800ed50 <vTaskSwitchContext+0xf4>)
 800ece0:	008b      	lsls	r3, r1, #2
 800ece2:	185a      	adds	r2, r3, r1
 800ece4:	0092      	lsls	r2, r2, #2
 800ece6:	18a2      	adds	r2, r4, r2
 800ece8:	6850      	ldr	r0, [r2, #4]
 800ecea:	6840      	ldr	r0, [r0, #4]
 800ecec:	6050      	str	r0, [r2, #4]
 800ecee:	185b      	adds	r3, r3, r1
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	3308      	adds	r3, #8
 800ecf4:	191b      	adds	r3, r3, r4
 800ecf6:	4298      	cmp	r0, r3
 800ecf8:	d017      	beq.n	800ed2a <vTaskSwitchContext+0xce>
 800ecfa:	008b      	lsls	r3, r1, #2
 800ecfc:	1859      	adds	r1, r3, r1
 800ecfe:	0089      	lsls	r1, r1, #2
 800ed00:	4b13      	ldr	r3, [pc, #76]	; (800ed50 <vTaskSwitchContext+0xf4>)
 800ed02:	1859      	adds	r1, r3, r1
 800ed04:	684b      	ldr	r3, [r1, #4]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	4b0e      	ldr	r3, [pc, #56]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800ed0a:	601a      	str	r2, [r3, #0]
}
 800ed0c:	e7ae      	b.n	800ec6c <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	6819      	ldr	r1, [r3, #0]
 800ed14:	3134      	adds	r1, #52	; 0x34
 800ed16:	f7fe fa23 	bl	800d160 <vApplicationStackOverflowHook>
 800ed1a:	e7c0      	b.n	800ec9e <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <vTaskSwitchContext+0xe8>)
 800ed1e:	6818      	ldr	r0, [r3, #0]
 800ed20:	6819      	ldr	r1, [r3, #0]
 800ed22:	3134      	adds	r1, #52	; 0x34
 800ed24:	f7fe fa1c 	bl	800d160 <vApplicationStackOverflowHook>
 800ed28:	e7c2      	b.n	800ecb0 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ed2a:	6840      	ldr	r0, [r0, #4]
 800ed2c:	008b      	lsls	r3, r1, #2
 800ed2e:	185b      	adds	r3, r3, r1
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	18e3      	adds	r3, r4, r3
 800ed34:	6058      	str	r0, [r3, #4]
 800ed36:	e7e0      	b.n	800ecfa <vTaskSwitchContext+0x9e>
 800ed38:	20001a2c 	.word	0x20001a2c
 800ed3c:	20001aac 	.word	0x20001aac
 800ed40:	20001a20 	.word	0x20001a20
 800ed44:	20001988 	.word	0x20001988
 800ed48:	08019740 	.word	0x08019740
 800ed4c:	20001a38 	.word	0x20001a38
 800ed50:	20001994 	.word	0x20001994

0800ed54 <vTaskPlaceOnEventList>:
{
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed58:	4c0b      	ldr	r4, [pc, #44]	; (800ed88 <vTaskPlaceOnEventList+0x34>)
 800ed5a:	6821      	ldr	r1, [r4, #0]
 800ed5c:	3118      	adds	r1, #24
 800ed5e:	f7ff f8a9 	bl	800deb4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed62:	6820      	ldr	r0, [r4, #0]
 800ed64:	3004      	adds	r0, #4
 800ed66:	f7ff f8bc 	bl	800dee2 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800ed6a:	1c6b      	adds	r3, r5, #1
 800ed6c:	d005      	beq.n	800ed7a <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800ed6e:	4b07      	ldr	r3, [pc, #28]	; (800ed8c <vTaskPlaceOnEventList+0x38>)
 800ed70:	6818      	ldr	r0, [r3, #0]
 800ed72:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed74:	f7ff fbf6 	bl	800e564 <prvAddCurrentTaskToDelayedList>
}
 800ed78:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed7a:	4b03      	ldr	r3, [pc, #12]	; (800ed88 <vTaskPlaceOnEventList+0x34>)
 800ed7c:	6819      	ldr	r1, [r3, #0]
 800ed7e:	3104      	adds	r1, #4
 800ed80:	4803      	ldr	r0, [pc, #12]	; (800ed90 <vTaskPlaceOnEventList+0x3c>)
 800ed82:	f7ff f88b 	bl	800de9c <vListInsertEnd>
 800ed86:	e7f7      	b.n	800ed78 <vTaskPlaceOnEventList+0x24>
 800ed88:	20001988 	.word	0x20001988
 800ed8c:	20001aa8 	.word	0x20001aa8
 800ed90:	20001a80 	.word	0x20001a80

0800ed94 <vTaskPlaceOnEventListRestricted>:
	{
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed98:	4c07      	ldr	r4, [pc, #28]	; (800edb8 <vTaskPlaceOnEventListRestricted+0x24>)
 800ed9a:	6821      	ldr	r1, [r4, #0]
 800ed9c:	3118      	adds	r1, #24
 800ed9e:	f7ff f87d 	bl	800de9c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eda2:	6820      	ldr	r0, [r4, #0]
 800eda4:	3004      	adds	r0, #4
 800eda6:	f7ff f89c 	bl	800dee2 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800edaa:	4b04      	ldr	r3, [pc, #16]	; (800edbc <vTaskPlaceOnEventListRestricted+0x28>)
 800edac:	6818      	ldr	r0, [r3, #0]
 800edae:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800edb0:	f7ff fbd8 	bl	800e564 <prvAddCurrentTaskToDelayedList>
	}
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
 800edb6:	46c0      	nop			; (mov r8, r8)
 800edb8:	20001988 	.word	0x20001988
 800edbc:	20001aa8 	.word	0x20001aa8

0800edc0 <xTaskRemoveFromEventList>:
{
 800edc0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800edc2:	68c3      	ldr	r3, [r0, #12]
 800edc4:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800edc6:	0025      	movs	r5, r4
 800edc8:	3518      	adds	r5, #24
 800edca:	0028      	movs	r0, r5
 800edcc:	f7ff f889 	bl	800dee2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edd0:	4b13      	ldr	r3, [pc, #76]	; (800ee20 <xTaskRemoveFromEventList+0x60>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d11e      	bne.n	800ee16 <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800edd8:	1d25      	adds	r5, r4, #4
 800edda:	0028      	movs	r0, r5
 800eddc:	f7ff f881 	bl	800dee2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ede0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ede2:	4a10      	ldr	r2, [pc, #64]	; (800ee24 <xTaskRemoveFromEventList+0x64>)
 800ede4:	6812      	ldr	r2, [r2, #0]
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d901      	bls.n	800edee <xTaskRemoveFromEventList+0x2e>
 800edea:	4a0e      	ldr	r2, [pc, #56]	; (800ee24 <xTaskRemoveFromEventList+0x64>)
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	0098      	lsls	r0, r3, #2
 800edf0:	18c0      	adds	r0, r0, r3
 800edf2:	0080      	lsls	r0, r0, #2
 800edf4:	4b0c      	ldr	r3, [pc, #48]	; (800ee28 <xTaskRemoveFromEventList+0x68>)
 800edf6:	18c0      	adds	r0, r0, r3
 800edf8:	0029      	movs	r1, r5
 800edfa:	f7ff f84f 	bl	800de9c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edfe:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <xTaskRemoveFromEventList+0x6c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ee06:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d903      	bls.n	800ee14 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 800ee0c:	4b08      	ldr	r3, [pc, #32]	; (800ee30 <xTaskRemoveFromEventList+0x70>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ee12:	3001      	adds	r0, #1
}
 800ee14:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ee16:	0029      	movs	r1, r5
 800ee18:	4806      	ldr	r0, [pc, #24]	; (800ee34 <xTaskRemoveFromEventList+0x74>)
 800ee1a:	f7ff f83f 	bl	800de9c <vListInsertEnd>
 800ee1e:	e7ee      	b.n	800edfe <xTaskRemoveFromEventList+0x3e>
 800ee20:	20001a2c 	.word	0x20001a2c
 800ee24:	20001a38 	.word	0x20001a38
 800ee28:	20001994 	.word	0x20001994
 800ee2c:	20001988 	.word	0x20001988
 800ee30:	20001aac 	.word	0x20001aac
 800ee34:	20001a68 	.word	0x20001a68

0800ee38 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ee38:	4b03      	ldr	r3, [pc, #12]	; (800ee48 <vTaskSetTimeOutState+0x10>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee3e:	4b03      	ldr	r3, [pc, #12]	; (800ee4c <vTaskSetTimeOutState+0x14>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6043      	str	r3, [r0, #4]
}
 800ee44:	4770      	bx	lr
 800ee46:	46c0      	nop			; (mov r8, r8)
 800ee48:	20001a64 	.word	0x20001a64
 800ee4c:	20001aa8 	.word	0x20001aa8

0800ee50 <xTaskCheckForTimeOut>:
{
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	0004      	movs	r4, r0
 800ee54:	000e      	movs	r6, r1
	taskENTER_CRITICAL();
 800ee56:	f000 fc35 	bl	800f6c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ee5a:	4b10      	ldr	r3, [pc, #64]	; (800ee9c <xTaskCheckForTimeOut+0x4c>)
 800ee5c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ee5e:	6833      	ldr	r3, [r6, #0]
 800ee60:	1c59      	adds	r1, r3, #1
 800ee62:	d019      	beq.n	800ee98 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee64:	490e      	ldr	r1, [pc, #56]	; (800eea0 <xTaskCheckForTimeOut+0x50>)
 800ee66:	6809      	ldr	r1, [r1, #0]
 800ee68:	6820      	ldr	r0, [r4, #0]
 800ee6a:	4288      	cmp	r0, r1
 800ee6c:	d003      	beq.n	800ee76 <xTaskCheckForTimeOut+0x26>
			xReturn = pdTRUE;
 800ee6e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee70:	6861      	ldr	r1, [r4, #4]
 800ee72:	4291      	cmp	r1, r2
 800ee74:	d904      	bls.n	800ee80 <xTaskCheckForTimeOut+0x30>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ee76:	6861      	ldr	r1, [r4, #4]
 800ee78:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ee7a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ee7c:	4283      	cmp	r3, r0
 800ee7e:	d803      	bhi.n	800ee88 <xTaskCheckForTimeOut+0x38>
	taskEXIT_CRITICAL();
 800ee80:	f000 fc2c 	bl	800f6dc <vPortExitCritical>
}
 800ee84:	0028      	movs	r0, r5
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ee88:	1a8a      	subs	r2, r1, r2
 800ee8a:	18d3      	adds	r3, r2, r3
 800ee8c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ee8e:	0020      	movs	r0, r4
 800ee90:	f7ff ffd2 	bl	800ee38 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ee94:	2500      	movs	r5, #0
 800ee96:	e7f3      	b.n	800ee80 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 800ee98:	2500      	movs	r5, #0
 800ee9a:	e7f1      	b.n	800ee80 <xTaskCheckForTimeOut+0x30>
 800ee9c:	20001aa8 	.word	0x20001aa8
 800eea0:	20001a64 	.word	0x20001a64

0800eea4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eea4:	4b01      	ldr	r3, [pc, #4]	; (800eeac <vTaskMissedYield+0x8>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	601a      	str	r2, [r3, #0]
}
 800eeaa:	4770      	bx	lr
 800eeac:	20001aac 	.word	0x20001aac

0800eeb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eeb0:	4b05      	ldr	r3, [pc, #20]	; (800eec8 <xTaskGetSchedulerState+0x18>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eeb4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d004      	beq.n	800eec4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeba:	4b04      	ldr	r3, [pc, #16]	; (800eecc <xTaskGetSchedulerState+0x1c>)
 800eebc:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800eebe:	4243      	negs	r3, r0
 800eec0:	4158      	adcs	r0, r3
 800eec2:	0040      	lsls	r0, r0, #1
	}
 800eec4:	4770      	bx	lr
 800eec6:	46c0      	nop			; (mov r8, r8)
 800eec8:	20001a7c 	.word	0x20001a7c
 800eecc:	20001a2c 	.word	0x20001a2c

0800eed0 <vTaskPriorityInherit>:
	{
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eed4:	d01a      	beq.n	800ef0c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eed6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eed8:	4b19      	ldr	r3, [pc, #100]	; (800ef40 <vTaskPriorityInherit+0x70>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eede:	429a      	cmp	r2, r3
 800eee0:	d214      	bcs.n	800ef0c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eee2:	6983      	ldr	r3, [r0, #24]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	db05      	blt.n	800eef4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eee8:	4b15      	ldr	r3, [pc, #84]	; (800ef40 <vTaskPriorityInherit+0x70>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eeee:	2307      	movs	r3, #7
 800eef0:	1a5b      	subs	r3, r3, r1
 800eef2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eef4:	0093      	lsls	r3, r2, #2
 800eef6:	189b      	adds	r3, r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4a12      	ldr	r2, [pc, #72]	; (800ef44 <vTaskPriorityInherit+0x74>)
 800eefc:	189b      	adds	r3, r3, r2
 800eefe:	6962      	ldr	r2, [r4, #20]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d004      	beq.n	800ef0e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef04:	4b0e      	ldr	r3, [pc, #56]	; (800ef40 <vTaskPriorityInherit+0x70>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ef0c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ef0e:	1d25      	adds	r5, r4, #4
 800ef10:	0028      	movs	r0, r5
 800ef12:	f7fe ffe6 	bl	800dee2 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef16:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <vTaskPriorityInherit+0x70>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ef1e:	4a0a      	ldr	r2, [pc, #40]	; (800ef48 <vTaskPriorityInherit+0x78>)
 800ef20:	6812      	ldr	r2, [r2, #0]
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d808      	bhi.n	800ef38 <vTaskPriorityInherit+0x68>
 800ef26:	0098      	lsls	r0, r3, #2
 800ef28:	18c0      	adds	r0, r0, r3
 800ef2a:	0080      	lsls	r0, r0, #2
 800ef2c:	4b05      	ldr	r3, [pc, #20]	; (800ef44 <vTaskPriorityInherit+0x74>)
 800ef2e:	18c0      	adds	r0, r0, r3
 800ef30:	0029      	movs	r1, r5
 800ef32:	f7fe ffb3 	bl	800de9c <vListInsertEnd>
	}
 800ef36:	e7e9      	b.n	800ef0c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ef38:	4a03      	ldr	r2, [pc, #12]	; (800ef48 <vTaskPriorityInherit+0x78>)
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	e7f3      	b.n	800ef26 <vTaskPriorityInherit+0x56>
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	20001988 	.word	0x20001988
 800ef44:	20001994 	.word	0x20001994
 800ef48:	20001a38 	.word	0x20001a38

0800ef4c <xTaskPriorityDisinherit>:
	{
 800ef4c:	b570      	push	{r4, r5, r6, lr}
 800ef4e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ef50:	d023      	beq.n	800ef9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ef52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ef54:	3b01      	subs	r3, #1
 800ef56:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ef5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ef5c:	428a      	cmp	r2, r1
 800ef5e:	d01e      	beq.n	800ef9e <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800ef60:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d000      	beq.n	800ef68 <xTaskPriorityDisinherit+0x1c>
	}
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ef68:	1d25      	adds	r5, r4, #4
 800ef6a:	0028      	movs	r0, r5
 800ef6c:	f7fe ffb9 	bl	800dee2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ef72:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef74:	2207      	movs	r2, #7
 800ef76:	1ad2      	subs	r2, r2, r3
 800ef78:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef7a:	4a0a      	ldr	r2, [pc, #40]	; (800efa4 <xTaskPriorityDisinherit+0x58>)
 800ef7c:	6812      	ldr	r2, [r2, #0]
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d901      	bls.n	800ef86 <xTaskPriorityDisinherit+0x3a>
 800ef82:	4a08      	ldr	r2, [pc, #32]	; (800efa4 <xTaskPriorityDisinherit+0x58>)
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	0098      	lsls	r0, r3, #2
 800ef88:	18c0      	adds	r0, r0, r3
 800ef8a:	0080      	lsls	r0, r0, #2
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <xTaskPriorityDisinherit+0x5c>)
 800ef8e:	18c0      	adds	r0, r0, r3
 800ef90:	0029      	movs	r1, r5
 800ef92:	f7fe ff83 	bl	800de9c <vListInsertEnd>
					xReturn = pdTRUE;
 800ef96:	2001      	movs	r0, #1
 800ef98:	e7e5      	b.n	800ef66 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	e7e3      	b.n	800ef66 <xTaskPriorityDisinherit+0x1a>
 800ef9e:	2000      	movs	r0, #0
 800efa0:	e7e1      	b.n	800ef66 <xTaskPriorityDisinherit+0x1a>
 800efa2:	46c0      	nop			; (mov r8, r8)
 800efa4:	20001a38 	.word	0x20001a38
 800efa8:	20001994 	.word	0x20001994

0800efac <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	b085      	sub	sp, #20
 800efb0:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800efb2:	2300      	movs	r3, #0
 800efb4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800efb6:	4b2b      	ldr	r3, [pc, #172]	; (800f064 <vTaskList+0xb8>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	0140      	lsls	r0, r0, #5
 800efc0:	f000 fbfc 	bl	800f7bc <pvPortMalloc>
 800efc4:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800efc6:	d04a      	beq.n	800f05e <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800efc8:	9903      	ldr	r1, [sp, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f7ff fdf4 	bl	800ebb8 <uxTaskGetSystemState>
 800efd0:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800efd2:	2300      	movs	r3, #0
 800efd4:	9302      	str	r3, [sp, #8]
 800efd6:	9a02      	ldr	r2, [sp, #8]
 800efd8:	9b03      	ldr	r3, [sp, #12]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d23c      	bcs.n	800f058 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800efde:	4e22      	ldr	r6, [pc, #136]	; (800f068 <vTaskList+0xbc>)
 800efe0:	e027      	b.n	800f032 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800efe2:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d133      	bne.n	800f050 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800efe8:	9b02      	ldr	r3, [sp, #8]
 800efea:	015b      	lsls	r3, r3, #5
 800efec:	18fb      	adds	r3, r7, r3
 800efee:	6859      	ldr	r1, [r3, #4]
 800eff0:	0020      	movs	r0, r4
 800eff2:	f7ff fae1 	bl	800e5b8 <prvWriteNameToBuffer>
 800eff6:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800eff8:	9b02      	ldr	r3, [sp, #8]
 800effa:	9a02      	ldr	r2, [sp, #8]
 800effc:	9902      	ldr	r1, [sp, #8]
 800effe:	015b      	lsls	r3, r3, #5
 800f000:	18fb      	adds	r3, r7, r3
 800f002:	691b      	ldr	r3, [r3, #16]
 800f004:	0149      	lsls	r1, r1, #5
 800f006:	1879      	adds	r1, r7, r1
 800f008:	6889      	ldr	r1, [r1, #8]
 800f00a:	9101      	str	r1, [sp, #4]
 800f00c:	0152      	lsls	r2, r2, #5
 800f00e:	18ba      	adds	r2, r7, r2
 800f010:	8b92      	ldrh	r2, [r2, #28]
 800f012:	9200      	str	r2, [sp, #0]
 800f014:	002a      	movs	r2, r5
 800f016:	0031      	movs	r1, r6
 800f018:	f004 fc4a 	bl	80138b0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f01c:	0020      	movs	r0, r4
 800f01e:	f7f1 f87b 	bl	8000118 <strlen>
 800f022:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f024:	9b02      	ldr	r3, [sp, #8]
 800f026:	3301      	adds	r3, #1
 800f028:	9302      	str	r3, [sp, #8]
 800f02a:	9a02      	ldr	r2, [sp, #8]
 800f02c:	9b03      	ldr	r3, [sp, #12]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d212      	bcs.n	800f058 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f032:	9b02      	ldr	r3, [sp, #8]
 800f034:	015b      	lsls	r3, r3, #5
 800f036:	18fb      	adds	r3, r7, r3
 800f038:	7b1b      	ldrb	r3, [r3, #12]
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d00a      	beq.n	800f054 <vTaskList+0xa8>
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	2a02      	cmp	r2, #2
 800f042:	d9ce      	bls.n	800efe2 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f044:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f046:	2b03      	cmp	r3, #3
 800f048:	d0ce      	beq.n	800efe8 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f04a:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f04c:	2b04      	cmp	r3, #4
 800f04e:	d0cb      	beq.n	800efe8 <vTaskList+0x3c>
										cStatus = 0x00;
 800f050:	2500      	movs	r5, #0
										break;
 800f052:	e7c9      	b.n	800efe8 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f054:	2542      	movs	r5, #66	; 0x42
 800f056:	e7c7      	b.n	800efe8 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f058:	0038      	movs	r0, r7
 800f05a:	f000 fc3d 	bl	800f8d8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f05e:	b005      	add	sp, #20
 800f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f062:	46c0      	nop			; (mov r8, r8)
 800f064:	20001a24 	.word	0x20001a24
 800f068:	0801976c 	.word	0x0801976c

0800f06c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f072:	2300      	movs	r3, #0
 800f074:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f076:	4b26      	ldr	r3, [pc, #152]	; (800f110 <vTaskGetRunTimeStats+0xa4>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	0140      	lsls	r0, r0, #5
 800f080:	f000 fb9c 	bl	800f7bc <pvPortMalloc>
 800f084:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f086:	d014      	beq.n	800f0b2 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f088:	9903      	ldr	r1, [sp, #12]
 800f08a:	aa01      	add	r2, sp, #4
 800f08c:	f7ff fd94 	bl	800ebb8 <uxTaskGetSystemState>
 800f090:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f092:	2164      	movs	r1, #100	; 0x64
 800f094:	9801      	ldr	r0, [sp, #4]
 800f096:	f7f1 f851 	bl	800013c <__udivsi3>
 800f09a:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d005      	beq.n	800f0ac <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	9302      	str	r3, [sp, #8]
 800f0a4:	9a02      	ldr	r2, [sp, #8]
 800f0a6:	9b03      	ldr	r3, [sp, #12]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d316      	bcc.n	800f0da <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f0ac:	0030      	movs	r0, r6
 800f0ae:	f000 fc13 	bl	800f8d8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f0b6:	9b02      	ldr	r3, [sp, #8]
 800f0b8:	015b      	lsls	r3, r3, #5
 800f0ba:	18f3      	adds	r3, r6, r3
 800f0bc:	699a      	ldr	r2, [r3, #24]
 800f0be:	4915      	ldr	r1, [pc, #84]	; (800f114 <vTaskGetRunTimeStats+0xa8>)
 800f0c0:	f004 fbf6 	bl	80138b0 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f0c4:	0020      	movs	r0, r4
 800f0c6:	f7f1 f827 	bl	8000118 <strlen>
 800f0ca:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f0cc:	9b02      	ldr	r3, [sp, #8]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	9302      	str	r3, [sp, #8]
 800f0d2:	9a02      	ldr	r2, [sp, #8]
 800f0d4:	9b03      	ldr	r3, [sp, #12]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d2e8      	bcs.n	800f0ac <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f0da:	9b02      	ldr	r3, [sp, #8]
 800f0dc:	015b      	lsls	r3, r3, #5
 800f0de:	18f3      	adds	r3, r6, r3
 800f0e0:	9901      	ldr	r1, [sp, #4]
 800f0e2:	6998      	ldr	r0, [r3, #24]
 800f0e4:	f7f1 f82a 	bl	800013c <__udivsi3>
 800f0e8:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f0ea:	9b02      	ldr	r3, [sp, #8]
 800f0ec:	015b      	lsls	r3, r3, #5
 800f0ee:	18f3      	adds	r3, r6, r3
 800f0f0:	6859      	ldr	r1, [r3, #4]
 800f0f2:	0020      	movs	r0, r4
 800f0f4:	f7ff fa60 	bl	800e5b8 <prvWriteNameToBuffer>
 800f0f8:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f0fa:	2d00      	cmp	r5, #0
 800f0fc:	d0db      	beq.n	800f0b6 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f0fe:	9b02      	ldr	r3, [sp, #8]
 800f100:	015b      	lsls	r3, r3, #5
 800f102:	18f3      	adds	r3, r6, r3
 800f104:	699a      	ldr	r2, [r3, #24]
 800f106:	002b      	movs	r3, r5
 800f108:	4903      	ldr	r1, [pc, #12]	; (800f118 <vTaskGetRunTimeStats+0xac>)
 800f10a:	f004 fbd1 	bl	80138b0 <siprintf>
 800f10e:	e7d9      	b.n	800f0c4 <vTaskGetRunTimeStats+0x58>
 800f110:	20001a24 	.word	0x20001a24
 800f114:	08019760 	.word	0x08019760
 800f118:	08019754 	.word	0x08019754

0800f11c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f11c:	4b05      	ldr	r3, [pc, #20]	; (800f134 <pvTaskIncrementMutexHeldCount+0x18>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f124:	4b03      	ldr	r3, [pc, #12]	; (800f134 <pvTaskIncrementMutexHeldCount+0x18>)
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f12a:	3301      	adds	r3, #1
 800f12c:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f12e:	4b01      	ldr	r3, [pc, #4]	; (800f134 <pvTaskIncrementMutexHeldCount+0x18>)
 800f130:	6818      	ldr	r0, [r3, #0]
	}
 800f132:	4770      	bx	lr
 800f134:	20001988 	.word	0x20001988

0800f138 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f138:	b570      	push	{r4, r5, r6, lr}
 800f13a:	0005      	movs	r5, r0
 800f13c:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f13e:	f000 fac1 	bl	800f6c4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f142:	4b20      	ldr	r3, [pc, #128]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d106      	bne.n	800f15a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f14c:	4b1d      	ldr	r3, [pc, #116]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	235c      	movs	r3, #92	; 0x5c
 800f152:	2101      	movs	r1, #1
 800f154:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f156:	2c00      	cmp	r4, #0
 800f158:	d118      	bne.n	800f18c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f15a:	f000 fabf 	bl	800f6dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800f15e:	f000 fab1 	bl	800f6c4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f162:	4b18      	ldr	r3, [pc, #96]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f168:	2c00      	cmp	r4, #0
 800f16a:	d006      	beq.n	800f17a <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800f16c:	2d00      	cmp	r5, #0
 800f16e:	d123      	bne.n	800f1b8 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f170:	4b14      	ldr	r3, [pc, #80]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f176:	3b01      	subs	r3, #1
 800f178:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f17a:	4b12      	ldr	r3, [pc, #72]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	235c      	movs	r3, #92	; 0x5c
 800f180:	2100      	movs	r1, #0
 800f182:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f184:	f000 faaa 	bl	800f6dc <vPortExitCritical>

		return ulReturn;
	}
 800f188:	0020      	movs	r0, r4
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f18c:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	3004      	adds	r0, #4
 800f192:	f7fe fea6 	bl	800dee2 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f196:	1c63      	adds	r3, r4, #1
 800f198:	d007      	beq.n	800f1aa <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800f19a:	4b0b      	ldr	r3, [pc, #44]	; (800f1c8 <ulTaskNotifyTake+0x90>)
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f1a0:	f7ff f9e0 	bl	800e564 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f1a4:	f000 fa82 	bl	800f6ac <vPortYield>
 800f1a8:	e7d7      	b.n	800f15a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f1aa:	4b06      	ldr	r3, [pc, #24]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f1ac:	6819      	ldr	r1, [r3, #0]
 800f1ae:	3104      	adds	r1, #4
 800f1b0:	4806      	ldr	r0, [pc, #24]	; (800f1cc <ulTaskNotifyTake+0x94>)
 800f1b2:	f7fe fe73 	bl	800de9c <vListInsertEnd>
 800f1b6:	e7f5      	b.n	800f1a4 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f1b8:	4b02      	ldr	r3, [pc, #8]	; (800f1c4 <ulTaskNotifyTake+0x8c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	659a      	str	r2, [r3, #88]	; 0x58
 800f1c0:	e7db      	b.n	800f17a <ulTaskNotifyTake+0x42>
 800f1c2:	46c0      	nop			; (mov r8, r8)
 800f1c4:	20001988 	.word	0x20001988
 800f1c8:	20001aa8 	.word	0x20001aa8
 800f1cc:	20001a80 	.word	0x20001a80

0800f1d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	0004      	movs	r4, r0
 800f1d4:	000d      	movs	r5, r1
 800f1d6:	0016      	movs	r6, r2
 800f1d8:	001f      	movs	r7, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f1da:	f000 fa73 	bl	800f6c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f1de:	2f00      	cmp	r7, #0
 800f1e0:	d001      	beq.n	800f1e6 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1e4:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f1e6:	225c      	movs	r2, #92	; 0x5c
 800f1e8:	5ca3      	ldrb	r3, [r4, r2]
 800f1ea:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f1ec:	2102      	movs	r1, #2
 800f1ee:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f1f0:	2e02      	cmp	r6, #2
 800f1f2:	d014      	beq.n	800f21e <xTaskGenericNotify+0x4e>
 800f1f4:	d907      	bls.n	800f206 <xTaskGenericNotify+0x36>
 800f1f6:	2e03      	cmp	r6, #3
 800f1f8:	d015      	beq.n	800f226 <xTaskGenericNotify+0x56>
 800f1fa:	2e04      	cmp	r6, #4
 800f1fc:	d108      	bne.n	800f210 <xTaskGenericNotify+0x40>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d030      	beq.n	800f264 <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f202:	65a5      	str	r5, [r4, #88]	; 0x58
 800f204:	e004      	b.n	800f210 <xTaskGenericNotify+0x40>
			switch( eAction )
 800f206:	2e01      	cmp	r6, #1
 800f208:	d102      	bne.n	800f210 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800f20a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f20c:	4315      	orrs	r5, r2
 800f20e:	65a5      	str	r5, [r4, #88]	; 0x58
 800f210:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f212:	2b01      	cmp	r3, #1
 800f214:	d009      	beq.n	800f22a <xTaskGenericNotify+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f216:	f000 fa61 	bl	800f6dc <vPortExitCritical>

		return xReturn;
	}
 800f21a:	0028      	movs	r0, r5
 800f21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800f21e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f220:	3201      	adds	r2, #1
 800f222:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f224:	e7f4      	b.n	800f210 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue = ulValue;
 800f226:	65a5      	str	r5, [r4, #88]	; 0x58
					break;
 800f228:	e7f2      	b.n	800f210 <xTaskGenericNotify+0x40>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f22a:	1d25      	adds	r5, r4, #4
 800f22c:	0028      	movs	r0, r5
 800f22e:	f7fe fe58 	bl	800dee2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f234:	4a0c      	ldr	r2, [pc, #48]	; (800f268 <xTaskGenericNotify+0x98>)
 800f236:	6812      	ldr	r2, [r2, #0]
 800f238:	4293      	cmp	r3, r2
 800f23a:	d901      	bls.n	800f240 <xTaskGenericNotify+0x70>
 800f23c:	4a0a      	ldr	r2, [pc, #40]	; (800f268 <xTaskGenericNotify+0x98>)
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	0098      	lsls	r0, r3, #2
 800f242:	18c0      	adds	r0, r0, r3
 800f244:	0080      	lsls	r0, r0, #2
 800f246:	4b09      	ldr	r3, [pc, #36]	; (800f26c <xTaskGenericNotify+0x9c>)
 800f248:	18c0      	adds	r0, r0, r3
 800f24a:	0029      	movs	r1, r5
 800f24c:	f7fe fe26 	bl	800de9c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f250:	4b07      	ldr	r3, [pc, #28]	; (800f270 <xTaskGenericNotify+0xa0>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f258:	2501      	movs	r5, #1
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d9db      	bls.n	800f216 <xTaskGenericNotify+0x46>
					taskYIELD_IF_USING_PREEMPTION();
 800f25e:	f000 fa25 	bl	800f6ac <vPortYield>
 800f262:	e7d8      	b.n	800f216 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 800f264:	2500      	movs	r5, #0
 800f266:	e7d6      	b.n	800f216 <xTaskGenericNotify+0x46>
 800f268:	20001a38 	.word	0x20001a38
 800f26c:	20001994 	.word	0x20001994
 800f270:	20001988 	.word	0x20001988

0800f274 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f274:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f276:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f278:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f27a:	4291      	cmp	r1, r2
 800f27c:	d80b      	bhi.n	800f296 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f27e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f280:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f282:	6983      	ldr	r3, [r0, #24]
 800f284:	429a      	cmp	r2, r3
 800f286:	d211      	bcs.n	800f2ac <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f288:	1d01      	adds	r1, r0, #4
 800f28a:	4b09      	ldr	r3, [pc, #36]	; (800f2b0 <prvInsertTimerInActiveList+0x3c>)
 800f28c:	6818      	ldr	r0, [r3, #0]
 800f28e:	f7fe fe11 	bl	800deb4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f292:	2400      	movs	r4, #0
 800f294:	e00a      	b.n	800f2ac <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f296:	429a      	cmp	r2, r3
 800f298:	d202      	bcs.n	800f2a0 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f29a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f29c:	4299      	cmp	r1, r3
 800f29e:	d205      	bcs.n	800f2ac <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2a0:	1d01      	adds	r1, r0, #4
 800f2a2:	4b04      	ldr	r3, [pc, #16]	; (800f2b4 <prvInsertTimerInActiveList+0x40>)
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	f7fe fe05 	bl	800deb4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f2aa:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800f2ac:	0020      	movs	r0, r4
 800f2ae:	bd10      	pop	{r4, pc}
 800f2b0:	20001ab4 	.word	0x20001ab4
 800f2b4:	20001ab0 	.word	0x20001ab0

0800f2b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2b8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2ba:	f000 fa03 	bl	800f6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2be:	4b10      	ldr	r3, [pc, #64]	; (800f300 <prvCheckForValidListAndQueue+0x48>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2c6:	f000 fa09 	bl	800f6dc <vPortExitCritical>
}
 800f2ca:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f2cc:	4d0d      	ldr	r5, [pc, #52]	; (800f304 <prvCheckForValidListAndQueue+0x4c>)
 800f2ce:	0028      	movs	r0, r5
 800f2d0:	f7fe fdd6 	bl	800de80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2d4:	4c0c      	ldr	r4, [pc, #48]	; (800f308 <prvCheckForValidListAndQueue+0x50>)
 800f2d6:	0020      	movs	r0, r4
 800f2d8:	f7fe fdd2 	bl	800de80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2dc:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <prvCheckForValidListAndQueue+0x54>)
 800f2de:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2e0:	4b0b      	ldr	r3, [pc, #44]	; (800f310 <prvCheckForValidListAndQueue+0x58>)
 800f2e2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2110      	movs	r1, #16
 800f2e8:	2004      	movs	r0, #4
 800f2ea:	f7fe fed0 	bl	800e08e <xQueueGenericCreate>
 800f2ee:	4b04      	ldr	r3, [pc, #16]	; (800f300 <prvCheckForValidListAndQueue+0x48>)
 800f2f0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d0e7      	beq.n	800f2c6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2f6:	4907      	ldr	r1, [pc, #28]	; (800f314 <prvCheckForValidListAndQueue+0x5c>)
 800f2f8:	f7ff f892 	bl	800e420 <vQueueAddToRegistry>
 800f2fc:	e7e3      	b.n	800f2c6 <prvCheckForValidListAndQueue+0xe>
 800f2fe:	46c0      	nop			; (mov r8, r8)
 800f300:	20001ae4 	.word	0x20001ae4
 800f304:	20001ab8 	.word	0x20001ab8
 800f308:	20001acc 	.word	0x20001acc
 800f30c:	20001ab0 	.word	0x20001ab0
 800f310:	20001ab4 	.word	0x20001ab4
 800f314:	080197ac 	.word	0x080197ac

0800f318 <xTimerCreateTimerTask>:
{
 800f318:	b500      	push	{lr}
 800f31a:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f31c:	f7ff ffcc 	bl	800f2b8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f320:	4b09      	ldr	r3, [pc, #36]	; (800f348 <xTimerCreateTimerTask+0x30>)
 800f322:	681b      	ldr	r3, [r3, #0]
BaseType_t xReturn = pdFAIL;
 800f324:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00b      	beq.n	800f342 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f32a:	2300      	movs	r3, #0
 800f32c:	9303      	str	r3, [sp, #12]
 800f32e:	9302      	str	r3, [sp, #8]
 800f330:	9301      	str	r3, [sp, #4]
 800f332:	3303      	adds	r3, #3
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	2300      	movs	r3, #0
 800f338:	2296      	movs	r2, #150	; 0x96
 800f33a:	4904      	ldr	r1, [pc, #16]	; (800f34c <xTimerCreateTimerTask+0x34>)
 800f33c:	4804      	ldr	r0, [pc, #16]	; (800f350 <xTimerCreateTimerTask+0x38>)
 800f33e:	f7ff f953 	bl	800e5e8 <xTaskGenericCreate>
}
 800f342:	b005      	add	sp, #20
 800f344:	bd00      	pop	{pc}
 800f346:	46c0      	nop			; (mov r8, r8)
 800f348:	20001ae4 	.word	0x20001ae4
 800f34c:	080197b4 	.word	0x080197b4
 800f350:	0800f491 	.word	0x0800f491

0800f354 <xTimerCreate>:
{
 800f354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f356:	b083      	sub	sp, #12
 800f358:	0007      	movs	r7, r0
 800f35a:	000d      	movs	r5, r1
 800f35c:	0016      	movs	r6, r2
 800f35e:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f360:	2900      	cmp	r1, #0
 800f362:	d013      	beq.n	800f38c <xTimerCreate+0x38>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f364:	202c      	movs	r0, #44	; 0x2c
 800f366:	f000 fa29 	bl	800f7bc <pvPortMalloc>
 800f36a:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f36c:	d00b      	beq.n	800f386 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
 800f36e:	f7ff ffa3 	bl	800f2b8 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f372:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f374:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f376:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f378:	9b01      	ldr	r3, [sp, #4]
 800f37a:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f37c:	9b08      	ldr	r3, [sp, #32]
 800f37e:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f380:	1d20      	adds	r0, r4, #4
 800f382:	f7fe fd88 	bl	800de96 <vListInitialiseItem>
}
 800f386:	0020      	movs	r0, r4
 800f388:	b003      	add	sp, #12
 800f38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800f38c:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800f38e:	e7fa      	b.n	800f386 <xTimerCreate+0x32>

0800f390 <xTimerGenericCommand>:
{
 800f390:	b530      	push	{r4, r5, lr}
 800f392:	b085      	sub	sp, #20
 800f394:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f396:	4b13      	ldr	r3, [pc, #76]	; (800f3e4 <xTimerGenericCommand+0x54>)
 800f398:	681c      	ldr	r4, [r3, #0]
 800f39a:	2c00      	cmp	r4, #0
 800f39c:	d020      	beq.n	800f3e0 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f39e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f3a0:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f3a2:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f3a4:	2905      	cmp	r1, #5
 800f3a6:	dc13      	bgt.n	800f3d0 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f3a8:	f7ff fd82 	bl	800eeb0 <xTaskGetSchedulerState>
 800f3ac:	2802      	cmp	r0, #2
 800f3ae:	d007      	beq.n	800f3c0 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3b0:	4b0c      	ldr	r3, [pc, #48]	; (800f3e4 <xTimerGenericCommand+0x54>)
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	4669      	mov	r1, sp
 800f3ba:	f7fe fe92 	bl	800e0e2 <xQueueGenericSend>
 800f3be:	e00d      	b.n	800f3dc <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3c0:	4b08      	ldr	r3, [pc, #32]	; (800f3e4 <xTimerGenericCommand+0x54>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9a08      	ldr	r2, [sp, #32]
 800f3c8:	4669      	mov	r1, sp
 800f3ca:	f7fe fe8a 	bl	800e0e2 <xQueueGenericSend>
 800f3ce:	e005      	b.n	800f3dc <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	002a      	movs	r2, r5
 800f3d4:	4669      	mov	r1, sp
 800f3d6:	0020      	movs	r0, r4
 800f3d8:	f7fe feff 	bl	800e1da <xQueueGenericSendFromISR>
}
 800f3dc:	b005      	add	sp, #20
 800f3de:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f3e0:	2000      	movs	r0, #0
	return xReturn;
 800f3e2:	e7fb      	b.n	800f3dc <xTimerGenericCommand+0x4c>
 800f3e4:	20001ae4 	.word	0x20001ae4

0800f3e8 <prvSampleTimeNow>:
{
 800f3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ea:	46d6      	mov	lr, sl
 800f3ec:	464f      	mov	r7, r9
 800f3ee:	4646      	mov	r6, r8
 800f3f0:	b5c0      	push	{r6, r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800f3f6:	f7ff fa79 	bl	800e8ec <xTaskGetTickCount>
 800f3fa:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f3fc:	4b21      	ldr	r3, [pc, #132]	; (800f484 <prvSampleTimeNow+0x9c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4283      	cmp	r3, r0
 800f402:	d80b      	bhi.n	800f41c <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f404:	2300      	movs	r3, #0
 800f406:	4642      	mov	r2, r8
 800f408:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f40a:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <prvSampleTimeNow+0x9c>)
 800f40c:	601f      	str	r7, [r3, #0]
}
 800f40e:	0038      	movs	r0, r7
 800f410:	b004      	add	sp, #16
 800f412:	bc1c      	pop	{r2, r3, r4}
 800f414:	4690      	mov	r8, r2
 800f416:	4699      	mov	r9, r3
 800f418:	46a2      	mov	sl, r4
 800f41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f41c:	4e1a      	ldr	r6, [pc, #104]	; (800f488 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f41e:	2300      	movs	r3, #0
 800f420:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f422:	6833      	ldr	r3, [r6, #0]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	2a00      	cmp	r2, #0
 800f428:	d023      	beq.n	800f472 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f430:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f432:	1d25      	adds	r5, r4, #4
 800f434:	0028      	movs	r0, r5
 800f436:	f7fe fd54 	bl	800dee2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f43a:	0020      	movs	r0, r4
 800f43c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f43e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f440:	69e3      	ldr	r3, [r4, #28]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d1ed      	bne.n	800f422 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f446:	69a3      	ldr	r3, [r4, #24]
 800f448:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f44a:	459a      	cmp	sl, r3
 800f44c:	d209      	bcs.n	800f462 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f44e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f450:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f452:	4b0d      	ldr	r3, [pc, #52]	; (800f488 <prvSampleTimeNow+0xa0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	9303      	str	r3, [sp, #12]
 800f458:	0029      	movs	r1, r5
 800f45a:	0018      	movs	r0, r3
 800f45c:	f7fe fd2a 	bl	800deb4 <vListInsert>
 800f460:	e7df      	b.n	800f422 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f462:	464b      	mov	r3, r9
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	4652      	mov	r2, sl
 800f468:	4649      	mov	r1, r9
 800f46a:	0020      	movs	r0, r4
 800f46c:	f7ff ff90 	bl	800f390 <xTimerGenericCommand>
 800f470:	e7d7      	b.n	800f422 <prvSampleTimeNow+0x3a>
	pxCurrentTimerList = pxOverflowTimerList;
 800f472:	4a06      	ldr	r2, [pc, #24]	; (800f48c <prvSampleTimeNow+0xa4>)
 800f474:	4904      	ldr	r1, [pc, #16]	; (800f488 <prvSampleTimeNow+0xa0>)
 800f476:	6810      	ldr	r0, [r2, #0]
 800f478:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f47a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f47c:	2301      	movs	r3, #1
 800f47e:	4642      	mov	r2, r8
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	e7c2      	b.n	800f40a <prvSampleTimeNow+0x22>
 800f484:	20001ae0 	.word	0x20001ae0
 800f488:	20001ab0 	.word	0x20001ab0
 800f48c:	20001ab4 	.word	0x20001ab4

0800f490 <prvTimerTask>:
{
 800f490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f492:	46c6      	mov	lr, r8
 800f494:	b500      	push	{lr}
 800f496:	b08c      	sub	sp, #48	; 0x30
		xNextExpireTime = ( TickType_t ) 0U;
 800f498:	2400      	movs	r4, #0
			switch( xMessage.xMessageID )
 800f49a:	4f55      	ldr	r7, [pc, #340]	; (800f5f0 <prvTimerTask+0x160>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f49c:	4b55      	ldr	r3, [pc, #340]	; (800f5f4 <prvTimerTask+0x164>)
 800f49e:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	2a00      	cmp	r2, #0
 800f4a4:	d100      	bne.n	800f4a8 <prvTimerTask+0x18>
 800f4a6:	e096      	b.n	800f5d6 <prvTimerTask+0x146>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 800f4ac:	f7ff fa16 	bl	800e8dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4b0:	a808      	add	r0, sp, #32
 800f4b2:	f7ff ff99 	bl	800f3e8 <prvSampleTimeNow>
 800f4b6:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f4b8:	9b08      	ldr	r3, [sp, #32]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d000      	beq.n	800f4c0 <prvTimerTask+0x30>
 800f4be:	e093      	b.n	800f5e8 <prvTimerTask+0x158>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4c0:	42a8      	cmp	r0, r5
 800f4c2:	d233      	bcs.n	800f52c <prvTimerTask+0x9c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f4c4:	1ba9      	subs	r1, r5, r6
 800f4c6:	4b4c      	ldr	r3, [pc, #304]	; (800f5f8 <prvTimerTask+0x168>)
 800f4c8:	6818      	ldr	r0, [r3, #0]
 800f4ca:	f7fe ffc1 	bl	800e450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f4ce:	f7ff faa9 	bl	800ea24 <xTaskResumeAll>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d051      	beq.n	800f57a <prvTimerTask+0xea>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4d6:	4d48      	ldr	r5, [pc, #288]	; (800f5f8 <prvTimerTask+0x168>)
 800f4d8:	0023      	movs	r3, r4
 800f4da:	0022      	movs	r2, r4
 800f4dc:	a908      	add	r1, sp, #32
 800f4de:	6828      	ldr	r0, [r5, #0]
 800f4e0:	f7fe fedb 	bl	800e29a <xQueueGenericReceive>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d0d9      	beq.n	800f49c <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f4e8:	9b08      	ldr	r3, [sp, #32]
 800f4ea:	9303      	str	r3, [sp, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	da0c      	bge.n	800f50a <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4f2:	9303      	str	r3, [sp, #12]
 800f4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4fa:	9305      	str	r3, [sp, #20]
 800f4fc:	9903      	ldr	r1, [sp, #12]
 800f4fe:	9804      	ldr	r0, [sp, #16]
 800f500:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f502:	9b08      	ldr	r3, [sp, #32]
 800f504:	9303      	str	r3, [sp, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	dbe6      	blt.n	800f4d8 <prvTimerTask+0x48>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f50a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f50c:	6973      	ldr	r3, [r6, #20]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d002      	beq.n	800f518 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f512:	1d30      	adds	r0, r6, #4
 800f514:	f7fe fce5 	bl	800dee2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f518:	a807      	add	r0, sp, #28
 800f51a:	f7ff ff65 	bl	800f3e8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f51e:	9b08      	ldr	r3, [sp, #32]
 800f520:	9303      	str	r3, [sp, #12]
 800f522:	2b09      	cmp	r3, #9
 800f524:	d8d8      	bhi.n	800f4d8 <prvTimerTask+0x48>
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	58fb      	ldr	r3, [r7, r3]
 800f52a:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f52c:	f7ff fa7a 	bl	800ea24 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f530:	4b30      	ldr	r3, [pc, #192]	; (800f5f4 <prvTimerTask+0x164>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	4698      	mov	r8, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f53a:	1d18      	adds	r0, r3, #4
 800f53c:	f7fe fcd1 	bl	800dee2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f540:	4643      	mov	r3, r8
 800f542:	69db      	ldr	r3, [r3, #28]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d004      	beq.n	800f552 <prvTimerTask+0xc2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f548:	4643      	mov	r3, r8
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	4640      	mov	r0, r8
 800f54e:	4798      	blx	r3
 800f550:	e7c1      	b.n	800f4d6 <prvTimerTask+0x46>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f552:	4643      	mov	r3, r8
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	18e9      	adds	r1, r5, r3
 800f558:	002b      	movs	r3, r5
 800f55a:	0032      	movs	r2, r6
 800f55c:	4640      	mov	r0, r8
 800f55e:	f7ff fe89 	bl	800f274 <prvInsertTimerInActiveList>
 800f562:	2801      	cmp	r0, #1
 800f564:	d1f0      	bne.n	800f548 <prvTimerTask+0xb8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f566:	9400      	str	r4, [sp, #0]
 800f568:	0023      	movs	r3, r4
 800f56a:	002a      	movs	r2, r5
 800f56c:	0021      	movs	r1, r4
 800f56e:	4640      	mov	r0, r8
 800f570:	f7ff ff0e 	bl	800f390 <xTimerGenericCommand>
 800f574:	e7e8      	b.n	800f548 <prvTimerTask+0xb8>
		xNextExpireTime = ( TickType_t ) 0U;
 800f576:	0025      	movs	r5, r4
 800f578:	e7a4      	b.n	800f4c4 <prvTimerTask+0x34>
					portYIELD_WITHIN_API();
 800f57a:	f000 f897 	bl	800f6ac <vPortYield>
 800f57e:	e7aa      	b.n	800f4d6 <prvTimerTask+0x46>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f582:	69b2      	ldr	r2, [r6, #24]
 800f584:	4694      	mov	ip, r2
 800f586:	4463      	add	r3, ip
 800f588:	0019      	movs	r1, r3
 800f58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58c:	0002      	movs	r2, r0
 800f58e:	0030      	movs	r0, r6
 800f590:	f7ff fe70 	bl	800f274 <prvInsertTimerInActiveList>
 800f594:	2801      	cmp	r0, #1
 800f596:	d19f      	bne.n	800f4d8 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f598:	0030      	movs	r0, r6
 800f59a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f59c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f59e:	69f3      	ldr	r3, [r6, #28]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d199      	bne.n	800f4d8 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a6:	69b1      	ldr	r1, [r6, #24]
 800f5a8:	468c      	mov	ip, r1
 800f5aa:	4463      	add	r3, ip
 800f5ac:	001a      	movs	r2, r3
 800f5ae:	9400      	str	r4, [sp, #0]
 800f5b0:	0023      	movs	r3, r4
 800f5b2:	0021      	movs	r1, r4
 800f5b4:	0030      	movs	r0, r6
 800f5b6:	f7ff feeb 	bl	800f390 <xTimerGenericCommand>
 800f5ba:	e78d      	b.n	800f4d8 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5be:	61b1      	str	r1, [r6, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5c0:	1841      	adds	r1, r0, r1
 800f5c2:	0003      	movs	r3, r0
 800f5c4:	0002      	movs	r2, r0
 800f5c6:	0030      	movs	r0, r6
 800f5c8:	f7ff fe54 	bl	800f274 <prvInsertTimerInActiveList>
 800f5cc:	e784      	b.n	800f4d8 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 800f5ce:	0030      	movs	r0, r6
 800f5d0:	f000 f982 	bl	800f8d8 <vPortFree>
 800f5d4:	e780      	b.n	800f4d8 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800f5d6:	f7ff f981 	bl	800e8dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5da:	a808      	add	r0, sp, #32
 800f5dc:	f7ff ff04 	bl	800f3e8 <prvSampleTimeNow>
 800f5e0:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f5e2:	9b08      	ldr	r3, [sp, #32]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d0c6      	beq.n	800f576 <prvTimerTask+0xe6>
			( void ) xTaskResumeAll();
 800f5e8:	f7ff fa1c 	bl	800ea24 <xTaskResumeAll>
 800f5ec:	e773      	b.n	800f4d6 <prvTimerTask+0x46>
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	08019784 	.word	0x08019784
 800f5f4:	20001ab0 	.word	0x20001ab0
 800f5f8:	20001ae4 	.word	0x20001ae4

0800f5fc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f600:	f000 f860 	bl	800f6c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f604:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f606:	f000 f869 	bl	800f6dc <vPortExitCritical>

	return pvReturn;
}
 800f60a:	0020      	movs	r0, r4
 800f60c:	bd10      	pop	{r4, pc}

0800f60e <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f60e:	b672      	cpsid	i
 800f610:	e7fe      	b.n	800f610 <prvTaskExitError+0x2>
	...

0800f614 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f614:	4a06      	ldr	r2, [pc, #24]	; (800f630 <pxCurrentTCBConst2>)
 800f616:	6813      	ldr	r3, [r2, #0]
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	3020      	adds	r0, #32
 800f61c:	f380 8809 	msr	PSP, r0
 800f620:	2002      	movs	r0, #2
 800f622:	f380 8814 	msr	CONTROL, r0
 800f626:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f628:	46ae      	mov	lr, r5
 800f62a:	b662      	cpsie	i
 800f62c:	bd00      	pop	{pc}
 800f62e:	46c0      	nop			; (mov r8, r8)

0800f630 <pxCurrentTCBConst2>:
 800f630:	20001988 	.word	0x20001988

0800f634 <pxPortInitialiseStack>:
{
 800f634:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f636:	1f03      	subs	r3, r0, #4
 800f638:	2480      	movs	r4, #128	; 0x80
 800f63a:	0464      	lsls	r4, r4, #17
 800f63c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f63e:	3b04      	subs	r3, #4
 800f640:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f642:	3b04      	subs	r3, #4
 800f644:	4902      	ldr	r1, [pc, #8]	; (800f650 <pxPortInitialiseStack+0x1c>)
 800f646:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f648:	3b14      	subs	r3, #20
 800f64a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f64c:	3840      	subs	r0, #64	; 0x40
}
 800f64e:	bd10      	pop	{r4, pc}
 800f650:	0800f60f 	.word	0x0800f60f

0800f654 <SVC_Handler>:
}
 800f654:	4770      	bx	lr
	...

0800f658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f658:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f65a:	4b0f      	ldr	r3, [pc, #60]	; (800f698 <xPortStartScheduler+0x40>)
 800f65c:	6819      	ldr	r1, [r3, #0]
 800f65e:	22ff      	movs	r2, #255	; 0xff
 800f660:	0412      	lsls	r2, r2, #16
 800f662:	430a      	orrs	r2, r1
 800f664:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f666:	6819      	ldr	r1, [r3, #0]
 800f668:	22ff      	movs	r2, #255	; 0xff
 800f66a:	0612      	lsls	r2, r2, #24
 800f66c:	430a      	orrs	r2, r1
 800f66e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f670:	4b0a      	ldr	r3, [pc, #40]	; (800f69c <xPortStartScheduler+0x44>)
 800f672:	6818      	ldr	r0, [r3, #0]
 800f674:	21fa      	movs	r1, #250	; 0xfa
 800f676:	0089      	lsls	r1, r1, #2
 800f678:	f7f0 fd60 	bl	800013c <__udivsi3>
 800f67c:	3801      	subs	r0, #1
 800f67e:	4b08      	ldr	r3, [pc, #32]	; (800f6a0 <xPortStartScheduler+0x48>)
 800f680:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f682:	4b08      	ldr	r3, [pc, #32]	; (800f6a4 <xPortStartScheduler+0x4c>)
 800f684:	2207      	movs	r2, #7
 800f686:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f688:	4b07      	ldr	r3, [pc, #28]	; (800f6a8 <xPortStartScheduler+0x50>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f68e:	f7ff ffc1 	bl	800f614 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f692:	b672      	cpsid	i
 800f694:	e7fe      	b.n	800f694 <xPortStartScheduler+0x3c>
 800f696:	46c0      	nop			; (mov r8, r8)
 800f698:	e000ed20 	.word	0xe000ed20
 800f69c:	200000ac 	.word	0x200000ac
 800f6a0:	e000e014 	.word	0xe000e014
 800f6a4:	e000e010 	.word	0xe000e010
 800f6a8:	200000c0 	.word	0x200000c0

0800f6ac <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f6ac:	4b04      	ldr	r3, [pc, #16]	; (800f6c0 <vPortYield+0x14>)
 800f6ae:	2280      	movs	r2, #128	; 0x80
 800f6b0:	0552      	lsls	r2, r2, #21
 800f6b2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f6b4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f6b8:	f3bf 8f6f 	isb	sy
}
 800f6bc:	4770      	bx	lr
 800f6be:	46c0      	nop			; (mov r8, r8)
 800f6c0:	e000ed04 	.word	0xe000ed04

0800f6c4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f6c4:	b672      	cpsid	i
    uxCriticalNesting++;
 800f6c6:	4a04      	ldr	r2, [pc, #16]	; (800f6d8 <vPortEnterCritical+0x14>)
 800f6c8:	6813      	ldr	r3, [r2, #0]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f6ce:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f6d2:	f3bf 8f6f 	isb	sy
}
 800f6d6:	4770      	bx	lr
 800f6d8:	200000c0 	.word	0x200000c0

0800f6dc <vPortExitCritical>:
    uxCriticalNesting--;
 800f6dc:	4a03      	ldr	r2, [pc, #12]	; (800f6ec <vPortExitCritical+0x10>)
 800f6de:	6813      	ldr	r3, [r2, #0]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d100      	bne.n	800f6ea <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f6e8:	b662      	cpsie	i
}
 800f6ea:	4770      	bx	lr
 800f6ec:	200000c0 	.word	0x200000c0

0800f6f0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f6f0:	f3ef 8010 	mrs	r0, PRIMASK
 800f6f4:	b672      	cpsid	i
 800f6f6:	4770      	bx	lr
}
 800f6f8:	2000      	movs	r0, #0

0800f6fa <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f6fa:	f380 8810 	msr	PRIMASK, r0
 800f6fe:	4770      	bx	lr

0800f700 <PendSV_Handler>:
	__asm volatile
 800f700:	f3ef 8009 	mrs	r0, PSP
 800f704:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <pxCurrentTCBConst>)
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	3820      	subs	r0, #32
 800f70a:	6010      	str	r0, [r2, #0]
 800f70c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f70e:	4644      	mov	r4, r8
 800f710:	464d      	mov	r5, r9
 800f712:	4656      	mov	r6, sl
 800f714:	465f      	mov	r7, fp
 800f716:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f718:	b508      	push	{r3, lr}
 800f71a:	b672      	cpsid	i
 800f71c:	f7ff fa9e 	bl	800ec5c <vTaskSwitchContext>
 800f720:	b662      	cpsie	i
 800f722:	bc0c      	pop	{r2, r3}
 800f724:	6811      	ldr	r1, [r2, #0]
 800f726:	6808      	ldr	r0, [r1, #0]
 800f728:	3010      	adds	r0, #16
 800f72a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f72c:	46a0      	mov	r8, r4
 800f72e:	46a9      	mov	r9, r5
 800f730:	46b2      	mov	sl, r6
 800f732:	46bb      	mov	fp, r7
 800f734:	f380 8809 	msr	PSP, r0
 800f738:	3820      	subs	r0, #32
 800f73a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f73c:	4718      	bx	r3
 800f73e:	46c0      	nop			; (mov r8, r8)

0800f740 <pxCurrentTCBConst>:
 800f740:	20001988 	.word	0x20001988

0800f744 <xPortSysTickHandler>:
{
 800f744:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f746:	f7ff ffd3 	bl	800f6f0 <ulSetInterruptMaskFromISR>
 800f74a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f74c:	f7ff f8da 	bl	800e904 <xTaskIncrementTick>
 800f750:	2800      	cmp	r0, #0
 800f752:	d003      	beq.n	800f75c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f754:	4b03      	ldr	r3, [pc, #12]	; (800f764 <xPortSysTickHandler+0x20>)
 800f756:	2280      	movs	r2, #128	; 0x80
 800f758:	0552      	lsls	r2, r2, #21
 800f75a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f75c:	0020      	movs	r0, r4
 800f75e:	f7ff ffcc 	bl	800f6fa <vClearInterruptMaskFromISR>
}
 800f762:	bd10      	pop	{r4, pc}
 800f764:	e000ed04 	.word	0xe000ed04

0800f768 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f768:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f76a:	4a12      	ldr	r2, [pc, #72]	; (800f7b4 <prvInsertBlockIntoFreeList+0x4c>)
 800f76c:	e000      	b.n	800f770 <prvInsertBlockIntoFreeList+0x8>
 800f76e:	001a      	movs	r2, r3
 800f770:	6813      	ldr	r3, [r2, #0]
 800f772:	4283      	cmp	r3, r0
 800f774:	d3fb      	bcc.n	800f76e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f776:	6851      	ldr	r1, [r2, #4]
 800f778:	1854      	adds	r4, r2, r1
 800f77a:	42a0      	cmp	r0, r4
 800f77c:	d008      	beq.n	800f790 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f77e:	6841      	ldr	r1, [r0, #4]
 800f780:	1844      	adds	r4, r0, r1
 800f782:	42a3      	cmp	r3, r4
 800f784:	d009      	beq.n	800f79a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f786:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f788:	4290      	cmp	r0, r2
 800f78a:	d000      	beq.n	800f78e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f78c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f78e:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f790:	6840      	ldr	r0, [r0, #4]
 800f792:	1841      	adds	r1, r0, r1
 800f794:	6051      	str	r1, [r2, #4]
 800f796:	0010      	movs	r0, r2
 800f798:	e7f1      	b.n	800f77e <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f79a:	4c07      	ldr	r4, [pc, #28]	; (800f7b8 <prvInsertBlockIntoFreeList+0x50>)
 800f79c:	6824      	ldr	r4, [r4, #0]
 800f79e:	42a3      	cmp	r3, r4
 800f7a0:	d006      	beq.n	800f7b0 <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	1859      	adds	r1, r3, r1
 800f7a6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7a8:	6813      	ldr	r3, [r2, #0]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6003      	str	r3, [r0, #0]
 800f7ae:	e7eb      	b.n	800f788 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7b0:	6003      	str	r3, [r0, #0]
 800f7b2:	e7e9      	b.n	800f788 <prvInsertBlockIntoFreeList+0x20>
 800f7b4:	20005a40 	.word	0x20005a40
 800f7b8:	20001ae8 	.word	0x20001ae8

0800f7bc <pvPortMalloc>:
{
 800f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7be:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f7c0:	f7ff f88c 	bl	800e8dc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f7c4:	4b3d      	ldr	r3, [pc, #244]	; (800f8bc <pvPortMalloc+0x100>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d015      	beq.n	800f7f8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f7cc:	4b3c      	ldr	r3, [pc, #240]	; (800f8c0 <pvPortMalloc+0x104>)
 800f7ce:	681e      	ldr	r6, [r3, #0]
 800f7d0:	4234      	tst	r4, r6
 800f7d2:	d136      	bne.n	800f842 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800f7d4:	2c00      	cmp	r4, #0
 800f7d6:	d03b      	beq.n	800f850 <pvPortMalloc+0x94>
				xWantedSize += xHeapStructSize;
 800f7d8:	0022      	movs	r2, r4
 800f7da:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7dc:	0753      	lsls	r3, r2, #29
 800f7de:	d002      	beq.n	800f7e6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f7e0:	2307      	movs	r3, #7
 800f7e2:	439a      	bics	r2, r3
 800f7e4:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f7e6:	2a00      	cmp	r2, #0
 800f7e8:	d032      	beq.n	800f850 <pvPortMalloc+0x94>
 800f7ea:	4b36      	ldr	r3, [pc, #216]	; (800f8c4 <pvPortMalloc+0x108>)
 800f7ec:	681f      	ldr	r7, [r3, #0]
 800f7ee:	4297      	cmp	r7, r2
 800f7f0:	d331      	bcc.n	800f856 <pvPortMalloc+0x9a>
				pxBlock = xStart.pxNextFreeBlock;
 800f7f2:	4935      	ldr	r1, [pc, #212]	; (800f8c8 <pvPortMalloc+0x10c>)
 800f7f4:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7f6:	e033      	b.n	800f860 <pvPortMalloc+0xa4>
	ulAddress = ( uint32_t ) ucHeap;
 800f7f8:	4a34      	ldr	r2, [pc, #208]	; (800f8cc <pvPortMalloc+0x110>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7fa:	0753      	lsls	r3, r2, #29
 800f7fc:	d01f      	beq.n	800f83e <pvPortMalloc+0x82>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7fe:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f800:	2307      	movs	r3, #7
 800f802:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f804:	4b32      	ldr	r3, [pc, #200]	; (800f8d0 <pvPortMalloc+0x114>)
 800f806:	469c      	mov	ip, r3
 800f808:	4462      	add	r2, ip
 800f80a:	1a53      	subs	r3, r2, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f80c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f80e:	482e      	ldr	r0, [pc, #184]	; (800f8c8 <pvPortMalloc+0x10c>)
 800f810:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f812:	2100      	movs	r1, #0
 800f814:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f816:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f818:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f81a:	2007      	movs	r0, #7
 800f81c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f81e:	4827      	ldr	r0, [pc, #156]	; (800f8bc <pvPortMalloc+0x100>)
 800f820:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f822:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f824:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f826:	1a99      	subs	r1, r3, r2
 800f828:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f82a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f82c:	4b29      	ldr	r3, [pc, #164]	; (800f8d4 <pvPortMalloc+0x118>)
 800f82e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f830:	4b24      	ldr	r3, [pc, #144]	; (800f8c4 <pvPortMalloc+0x108>)
 800f832:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f834:	4b22      	ldr	r3, [pc, #136]	; (800f8c0 <pvPortMalloc+0x104>)
 800f836:	2280      	movs	r2, #128	; 0x80
 800f838:	0612      	lsls	r2, r2, #24
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	e7c6      	b.n	800f7cc <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f83e:	4b24      	ldr	r3, [pc, #144]	; (800f8d0 <pvPortMalloc+0x114>)
 800f840:	e7e5      	b.n	800f80e <pvPortMalloc+0x52>
	( void ) xTaskResumeAll();
 800f842:	f7ff f8ef 	bl	800ea24 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f846:	f7fd fca7 	bl	800d198 <vApplicationMallocFailedHook>
 800f84a:	2500      	movs	r5, #0
}
 800f84c:	0028      	movs	r0, r5
 800f84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 800f850:	f7ff f8e8 	bl	800ea24 <xTaskResumeAll>
 800f854:	e7f7      	b.n	800f846 <pvPortMalloc+0x8a>
 800f856:	f7ff f8e5 	bl	800ea24 <xTaskResumeAll>
 800f85a:	e7f4      	b.n	800f846 <pvPortMalloc+0x8a>
 800f85c:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f85e:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f860:	6863      	ldr	r3, [r4, #4]
 800f862:	4293      	cmp	r3, r2
 800f864:	d202      	bcs.n	800f86c <pvPortMalloc+0xb0>
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1f7      	bne.n	800f85c <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 800f86c:	4b13      	ldr	r3, [pc, #76]	; (800f8bc <pvPortMalloc+0x100>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	42a3      	cmp	r3, r4
 800f872:	d01a      	beq.n	800f8aa <pvPortMalloc+0xee>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f874:	680d      	ldr	r5, [r1, #0]
 800f876:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f87c:	6863      	ldr	r3, [r4, #4]
 800f87e:	1a9b      	subs	r3, r3, r2
 800f880:	2b10      	cmp	r3, #16
 800f882:	d815      	bhi.n	800f8b0 <pvPortMalloc+0xf4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	1aff      	subs	r7, r7, r3
 800f888:	4a0e      	ldr	r2, [pc, #56]	; (800f8c4 <pvPortMalloc+0x108>)
 800f88a:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f88c:	4a11      	ldr	r2, [pc, #68]	; (800f8d4 <pvPortMalloc+0x118>)
 800f88e:	6812      	ldr	r2, [r2, #0]
 800f890:	4297      	cmp	r7, r2
 800f892:	d201      	bcs.n	800f898 <pvPortMalloc+0xdc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f894:	4a0f      	ldr	r2, [pc, #60]	; (800f8d4 <pvPortMalloc+0x118>)
 800f896:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f898:	431e      	orrs	r6, r3
 800f89a:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f89c:	2300      	movs	r3, #0
 800f89e:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f8a0:	f7ff f8c0 	bl	800ea24 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f8a4:	2d00      	cmp	r5, #0
 800f8a6:	d1d1      	bne.n	800f84c <pvPortMalloc+0x90>
 800f8a8:	e7cd      	b.n	800f846 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f8aa:	f7ff f8bb 	bl	800ea24 <xTaskResumeAll>
 800f8ae:	e7ca      	b.n	800f846 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8b0:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f8b2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f8b4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f8b6:	f7ff ff57 	bl	800f768 <prvInsertBlockIntoFreeList>
 800f8ba:	e7e3      	b.n	800f884 <pvPortMalloc+0xc8>
 800f8bc:	20001ae8 	.word	0x20001ae8
 800f8c0:	20005a34 	.word	0x20005a34
 800f8c4:	20005a38 	.word	0x20005a38
 800f8c8:	20005a40 	.word	0x20005a40
 800f8cc:	20001aec 	.word	0x20001aec
 800f8d0:	00003f48 	.word	0x00003f48
 800f8d4:	20005a3c 	.word	0x20005a3c

0800f8d8 <vPortFree>:
{
 800f8d8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d00b      	beq.n	800f8f6 <vPortFree+0x1e>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8de:	0003      	movs	r3, r0
 800f8e0:	3b08      	subs	r3, #8
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	4a0d      	ldr	r2, [pc, #52]	; (800f91c <vPortFree+0x44>)
 800f8e6:	6812      	ldr	r2, [r2, #0]
 800f8e8:	421a      	tst	r2, r3
 800f8ea:	d004      	beq.n	800f8f6 <vPortFree+0x1e>
			if( pxLink->pxNextFreeBlock == NULL )
 800f8ec:	0001      	movs	r1, r0
 800f8ee:	3908      	subs	r1, #8
 800f8f0:	6809      	ldr	r1, [r1, #0]
 800f8f2:	2900      	cmp	r1, #0
 800f8f4:	d000      	beq.n	800f8f8 <vPortFree+0x20>
}
 800f8f6:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8f8:	3808      	subs	r0, #8
 800f8fa:	0004      	movs	r4, r0
 800f8fc:	4393      	bics	r3, r2
 800f8fe:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f900:	f7fe ffec 	bl	800e8dc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f904:	4a06      	ldr	r2, [pc, #24]	; (800f920 <vPortFree+0x48>)
 800f906:	6863      	ldr	r3, [r4, #4]
 800f908:	6811      	ldr	r1, [r2, #0]
 800f90a:	468c      	mov	ip, r1
 800f90c:	4463      	add	r3, ip
 800f90e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f910:	0020      	movs	r0, r4
 800f912:	f7ff ff29 	bl	800f768 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f916:	f7ff f885 	bl	800ea24 <xTaskResumeAll>
}
 800f91a:	e7ec      	b.n	800f8f6 <vPortFree+0x1e>
 800f91c:	20005a34 	.word	0x20005a34
 800f920:	20005a38 	.word	0x20005a38

0800f924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f924:	b510      	push	{r4, lr}
 800f926:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f928:	f002 f8ee 	bl	8011b08 <HAL_RCC_GetHCLKFreq>
 800f92c:	21fa      	movs	r1, #250	; 0xfa
 800f92e:	0089      	lsls	r1, r1, #2
 800f930:	f7f0 fc04 	bl	800013c <__udivsi3>
 800f934:	f000 fb90 	bl	8010058 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f938:	2001      	movs	r0, #1
 800f93a:	2200      	movs	r2, #0
 800f93c:	0021      	movs	r1, r4
 800f93e:	4240      	negs	r0, r0
 800f940:	f000 fb42 	bl	800ffc8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f944:	2000      	movs	r0, #0
 800f946:	bd10      	pop	{r4, pc}

0800f948 <HAL_Init>:
{
 800f948:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f94a:	4a06      	ldr	r2, [pc, #24]	; (800f964 <HAL_Init+0x1c>)
 800f94c:	6813      	ldr	r3, [r2, #0]
 800f94e:	2110      	movs	r1, #16
 800f950:	430b      	orrs	r3, r1
 800f952:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f954:	2000      	movs	r0, #0
 800f956:	f7ff ffe5 	bl	800f924 <HAL_InitTick>
  HAL_MspInit();
 800f95a:	f001 fc7d 	bl	8011258 <HAL_MspInit>
}
 800f95e:	2000      	movs	r0, #0
 800f960:	bd10      	pop	{r4, pc}
 800f962:	46c0      	nop			; (mov r8, r8)
 800f964:	40022000 	.word	0x40022000

0800f968 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f968:	4a02      	ldr	r2, [pc, #8]	; (800f974 <HAL_IncTick+0xc>)
 800f96a:	6813      	ldr	r3, [r2, #0]
 800f96c:	3301      	adds	r3, #1
 800f96e:	6013      	str	r3, [r2, #0]
}
 800f970:	4770      	bx	lr
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	20005a48 	.word	0x20005a48

0800f978 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f978:	4b01      	ldr	r3, [pc, #4]	; (800f980 <HAL_GetTick+0x8>)
 800f97a:	6818      	ldr	r0, [r3, #0]
}
 800f97c:	4770      	bx	lr
 800f97e:	46c0      	nop			; (mov r8, r8)
 800f980:	20005a48 	.word	0x20005a48

0800f984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f984:	b510      	push	{r4, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f98a:	f7ff fff5 	bl	800f978 <HAL_GetTick>
 800f98e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f990:	f7ff fff2 	bl	800f978 <HAL_GetTick>
 800f994:	9b01      	ldr	r3, [sp, #4]
 800f996:	1b00      	subs	r0, r0, r4
 800f998:	4298      	cmp	r0, r3
 800f99a:	d3f9      	bcc.n	800f990 <HAL_Delay+0xc>
  {
  }
}
 800f99c:	b002      	add	sp, #8
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f9a0:	4b01      	ldr	r3, [pc, #4]	; (800f9a8 <HAL_GetREVID+0x8>)
 800f9a2:	6818      	ldr	r0, [r3, #0]
 800f9a4:	0c00      	lsrs	r0, r0, #16
}
 800f9a6:	4770      	bx	lr
 800f9a8:	40015800 	.word	0x40015800

0800f9ac <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f9ac:	4b02      	ldr	r3, [pc, #8]	; (800f9b8 <HAL_GetDEVID+0xc>)
 800f9ae:	6818      	ldr	r0, [r3, #0]
 800f9b0:	0500      	lsls	r0, r0, #20
 800f9b2:	0d00      	lsrs	r0, r0, #20
}
 800f9b4:	4770      	bx	lr
 800f9b6:	46c0      	nop			; (mov r8, r8)
 800f9b8:	40015800 	.word	0x40015800

0800f9bc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f9c0:	6803      	ldr	r3, [r0, #0]
 800f9c2:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f9c4:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f9c6:	0752      	lsls	r2, r2, #29
 800f9c8:	d521      	bpl.n	800fa0e <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f9ca:	689a      	ldr	r2, [r3, #8]
 800f9cc:	0752      	lsls	r2, r2, #29
 800f9ce:	d506      	bpl.n	800f9de <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f9d0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f9d2:	0792      	lsls	r2, r2, #30
 800f9d4:	d403      	bmi.n	800f9de <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	2110      	movs	r1, #16
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f9de:	f7ff ffcb 	bl	800f978 <HAL_GetTick>
 800f9e2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f9e4:	2504      	movs	r5, #4
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	421d      	tst	r5, r3
 800f9ec:	d00e      	beq.n	800fa0c <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f9ee:	f7ff ffc3 	bl	800f978 <HAL_GetTick>
 800f9f2:	1b80      	subs	r0, r0, r6
 800f9f4:	2802      	cmp	r0, #2
 800f9f6:	d9f6      	bls.n	800f9e6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f9f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9fa:	2210      	movs	r2, #16
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa02:	3a0f      	subs	r2, #15
 800fa04:	4313      	orrs	r3, r2
 800fa06:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fa08:	2001      	movs	r0, #1
 800fa0a:	e000      	b.n	800fa0e <ADC_ConversionStop+0x52>
  return HAL_OK;
 800fa0c:	2000      	movs	r0, #0
}
 800fa0e:	bd70      	pop	{r4, r5, r6, pc}

0800fa10 <ADC_Disable>:
{
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fa14:	6802      	ldr	r2, [r0, #0]
 800fa16:	6891      	ldr	r1, [r2, #8]
 800fa18:	2303      	movs	r3, #3
 800fa1a:	400b      	ands	r3, r1
  return HAL_OK;
 800fa1c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d000      	beq.n	800fa24 <ADC_Disable+0x14>
}
 800fa22:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fa24:	6813      	ldr	r3, [r2, #0]
 800fa26:	07db      	lsls	r3, r3, #31
 800fa28:	d402      	bmi.n	800fa30 <ADC_Disable+0x20>
 800fa2a:	68d3      	ldr	r3, [r2, #12]
 800fa2c:	041b      	lsls	r3, r3, #16
 800fa2e:	d5f8      	bpl.n	800fa22 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800fa30:	6891      	ldr	r1, [r2, #8]
 800fa32:	2305      	movs	r3, #5
 800fa34:	400b      	ands	r3, r1
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d009      	beq.n	800fa4e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa3c:	2210      	movs	r2, #16
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa44:	3a0f      	subs	r2, #15
 800fa46:	4313      	orrs	r3, r2
 800fa48:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fa4a:	2001      	movs	r0, #1
 800fa4c:	e7e9      	b.n	800fa22 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800fa4e:	6893      	ldr	r3, [r2, #8]
 800fa50:	2102      	movs	r1, #2
 800fa52:	430b      	orrs	r3, r1
 800fa54:	6093      	str	r3, [r2, #8]
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	2203      	movs	r2, #3
 800fa5a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800fa5c:	f7ff ff8c 	bl	800f978 <HAL_GetTick>
 800fa60:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fa62:	2501      	movs	r5, #1
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	421d      	tst	r5, r3
 800fa6a:	d00e      	beq.n	800fa8a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fa6c:	f7ff ff84 	bl	800f978 <HAL_GetTick>
 800fa70:	1b80      	subs	r0, r0, r6
 800fa72:	2802      	cmp	r0, #2
 800fa74:	d9f6      	bls.n	800fa64 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa78:	2210      	movs	r2, #16
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa80:	3a0f      	subs	r2, #15
 800fa82:	4313      	orrs	r3, r2
 800fa84:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7cb      	b.n	800fa22 <ADC_Disable+0x12>
  return HAL_OK;
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e7c9      	b.n	800fa22 <ADC_Disable+0x12>
	...

0800fa90 <ADC_Enable>:
{
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fa9a:	6803      	ldr	r3, [r0, #0]
 800fa9c:	6899      	ldr	r1, [r3, #8]
 800fa9e:	2203      	movs	r2, #3
 800faa0:	400a      	ands	r2, r1
 800faa2:	2a01      	cmp	r2, #1
 800faa4:	d02d      	beq.n	800fb02 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800faa6:	6899      	ldr	r1, [r3, #8]
 800faa8:	4a20      	ldr	r2, [pc, #128]	; (800fb2c <ADC_Enable+0x9c>)
 800faaa:	4211      	tst	r1, r2
 800faac:	d131      	bne.n	800fb12 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	2101      	movs	r1, #1
 800fab2:	430a      	orrs	r2, r1
 800fab4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800fab6:	4b1e      	ldr	r3, [pc, #120]	; (800fb30 <ADC_Enable+0xa0>)
 800fab8:	6818      	ldr	r0, [r3, #0]
 800faba:	491e      	ldr	r1, [pc, #120]	; (800fb34 <ADC_Enable+0xa4>)
 800fabc:	f7f0 fb3e 	bl	800013c <__udivsi3>
 800fac0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fac2:	9b01      	ldr	r3, [sp, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d005      	beq.n	800fad4 <ADC_Enable+0x44>
      wait_loop_index--;
 800fac8:	9b01      	ldr	r3, [sp, #4]
 800faca:	3b01      	subs	r3, #1
 800facc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d1f9      	bne.n	800fac8 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800fad4:	f7ff ff50 	bl	800f978 <HAL_GetTick>
 800fad8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fada:	2501      	movs	r5, #1
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	421d      	tst	r5, r3
 800fae2:	d121      	bne.n	800fb28 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fae4:	f7ff ff48 	bl	800f978 <HAL_GetTick>
 800fae8:	1b80      	subs	r0, r0, r6
 800faea:	2802      	cmp	r0, #2
 800faec:	d9f6      	bls.n	800fadc <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800faee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faf0:	2210      	movs	r2, #16
 800faf2:	4313      	orrs	r3, r2
 800faf4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800faf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800faf8:	3a0f      	subs	r2, #15
 800fafa:	4313      	orrs	r3, r2
 800fafc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fafe:	2001      	movs	r0, #1
 800fb00:	e010      	b.n	800fb24 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fb02:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800fb04:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fb06:	07d2      	lsls	r2, r2, #31
 800fb08:	d40c      	bmi.n	800fb24 <ADC_Enable+0x94>
 800fb0a:	68da      	ldr	r2, [r3, #12]
 800fb0c:	0412      	lsls	r2, r2, #16
 800fb0e:	d5ca      	bpl.n	800faa6 <ADC_Enable+0x16>
 800fb10:	e008      	b.n	800fb24 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fb12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb14:	2210      	movs	r2, #16
 800fb16:	4313      	orrs	r3, r2
 800fb18:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fb1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fb1c:	3a0f      	subs	r2, #15
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fb22:	2001      	movs	r0, #1
}
 800fb24:	b002      	add	sp, #8
 800fb26:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e7fb      	b.n	800fb24 <ADC_Enable+0x94>
 800fb2c:	80000017 	.word	0x80000017
 800fb30:	200000ac 	.word	0x200000ac
 800fb34:	000f4240 	.word	0x000f4240

0800fb38 <HAL_ADC_Init>:
{
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800fb3c:	d100      	bne.n	800fb40 <HAL_ADC_Init+0x8>
 800fb3e:	e09b      	b.n	800fc78 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fb40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d073      	beq.n	800fc2e <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800fb46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb48:	06db      	lsls	r3, r3, #27
 800fb4a:	d500      	bpl.n	800fb4e <HAL_ADC_Init+0x16>
 800fb4c:	e08e      	b.n	800fc6c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800fb4e:	6822      	ldr	r2, [r4, #0]
 800fb50:	6893      	ldr	r3, [r2, #8]
 800fb52:	2104      	movs	r1, #4
 800fb54:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800fb56:	d000      	beq.n	800fb5a <HAL_ADC_Init+0x22>
 800fb58:	e088      	b.n	800fc6c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 800fb5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb5c:	4847      	ldr	r0, [pc, #284]	; (800fc7c <HAL_ADC_Init+0x144>)
 800fb5e:	4003      	ands	r3, r0
 800fb60:	3006      	adds	r0, #6
 800fb62:	30ff      	adds	r0, #255	; 0xff
 800fb64:	4303      	orrs	r3, r0
 800fb66:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fb68:	6890      	ldr	r0, [r2, #8]
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	4003      	ands	r3, r0
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d063      	beq.n	800fc3a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800fb72:	68d3      	ldr	r3, [r2, #12]
 800fb74:	2018      	movs	r0, #24
 800fb76:	4383      	bics	r3, r0
 800fb78:	68a0      	ldr	r0, [r4, #8]
 800fb7a:	4303      	orrs	r3, r0
 800fb7c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800fb7e:	6822      	ldr	r2, [r4, #0]
 800fb80:	6913      	ldr	r3, [r2, #16]
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	089b      	lsrs	r3, r3, #2
 800fb86:	6860      	ldr	r0, [r4, #4]
 800fb88:	4303      	orrs	r3, r0
 800fb8a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fb8c:	6822      	ldr	r2, [r4, #0]
 800fb8e:	68d3      	ldr	r3, [r2, #12]
 800fb90:	483b      	ldr	r0, [pc, #236]	; (800fc80 <HAL_ADC_Init+0x148>)
 800fb92:	4003      	ands	r3, r0
 800fb94:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fb96:	69a3      	ldr	r3, [r4, #24]
 800fb98:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fb9a:	69e3      	ldr	r3, [r4, #28]
 800fb9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fb9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fba0:	6a20      	ldr	r0, [r4, #32]
 800fba2:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fba6:	000e      	movs	r6, r1
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d001      	beq.n	800fbb0 <HAL_ADC_Init+0x78>
 800fbac:	2680      	movs	r6, #128	; 0x80
 800fbae:	0176      	lsls	r6, r6, #5
 800fbb0:	68e3      	ldr	r3, [r4, #12]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d045      	beq.n	800fc48 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800fbbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbbe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	4333      	orrs	r3, r6
 800fbc4:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fbc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fbc8:	2a01      	cmp	r2, #1
 800fbca:	d03f      	beq.n	800fc4c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fbcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fbce:	21c2      	movs	r1, #194	; 0xc2
 800fbd0:	31ff      	adds	r1, #255	; 0xff
 800fbd2:	428a      	cmp	r2, r1
 800fbd4:	d002      	beq.n	800fbdc <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fbd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fbd8:	430a      	orrs	r2, r1
 800fbda:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fbdc:	6821      	ldr	r1, [r4, #0]
 800fbde:	68ca      	ldr	r2, [r1, #12]
 800fbe0:	431a      	orrs	r2, r3
 800fbe2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fbe4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fbe6:	2180      	movs	r1, #128	; 0x80
 800fbe8:	0549      	lsls	r1, r1, #21
 800fbea:	428a      	cmp	r2, r1
 800fbec:	d002      	beq.n	800fbf4 <HAL_ADC_Init+0xbc>
 800fbee:	3a01      	subs	r2, #1
 800fbf0:	2a06      	cmp	r2, #6
 800fbf2:	d80a      	bhi.n	800fc0a <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fbf4:	6820      	ldr	r0, [r4, #0]
 800fbf6:	6941      	ldr	r1, [r0, #20]
 800fbf8:	2207      	movs	r2, #7
 800fbfa:	4391      	bics	r1, r2
 800fbfc:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fbfe:	6821      	ldr	r1, [r4, #0]
 800fc00:	6948      	ldr	r0, [r1, #20]
 800fc02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fc04:	402a      	ands	r2, r5
 800fc06:	4302      	orrs	r2, r0
 800fc08:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fc0a:	6822      	ldr	r2, [r4, #0]
 800fc0c:	68d2      	ldr	r2, [r2, #12]
 800fc0e:	491d      	ldr	r1, [pc, #116]	; (800fc84 <HAL_ADC_Init+0x14c>)
 800fc10:	400a      	ands	r2, r1
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d020      	beq.n	800fc58 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800fc16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc18:	2212      	movs	r2, #18
 800fc1a:	4393      	bics	r3, r2
 800fc1c:	3a02      	subs	r2, #2
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc24:	3a0f      	subs	r2, #15
 800fc26:	4313      	orrs	r3, r2
 800fc28:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800fc2a:	2001      	movs	r0, #1
 800fc2c:	e023      	b.n	800fc76 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 800fc2e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fc30:	2240      	movs	r2, #64	; 0x40
 800fc32:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fc34:	f7fc fbd2 	bl	800c3dc <HAL_ADC_MspInit>
 800fc38:	e785      	b.n	800fb46 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fc3a:	6813      	ldr	r3, [r2, #0]
 800fc3c:	07db      	lsls	r3, r3, #31
 800fc3e:	d4a5      	bmi.n	800fb8c <HAL_ADC_Init+0x54>
 800fc40:	68d3      	ldr	r3, [r2, #12]
 800fc42:	041b      	lsls	r3, r3, #16
 800fc44:	d4a2      	bmi.n	800fb8c <HAL_ADC_Init+0x54>
 800fc46:	e794      	b.n	800fb72 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fc48:	2104      	movs	r1, #4
 800fc4a:	e7b7      	b.n	800fbbc <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1bd      	bne.n	800fbcc <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800fc50:	2280      	movs	r2, #128	; 0x80
 800fc52:	0252      	lsls	r2, r2, #9
 800fc54:	4313      	orrs	r3, r2
 800fc56:	e7b9      	b.n	800fbcc <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800fc58:	2300      	movs	r3, #0
 800fc5a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fc5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc5e:	2203      	movs	r2, #3
 800fc60:	4393      	bics	r3, r2
 800fc62:	3a02      	subs	r2, #2
 800fc64:	4313      	orrs	r3, r2
 800fc66:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc68:	2000      	movs	r0, #0
 800fc6a:	e004      	b.n	800fc76 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc6e:	2210      	movs	r2, #16
 800fc70:	4313      	orrs	r3, r2
 800fc72:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fc74:	2001      	movs	r0, #1
}
 800fc76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800fc78:	2001      	movs	r0, #1
 800fc7a:	e7fc      	b.n	800fc76 <HAL_ADC_Init+0x13e>
 800fc7c:	fffffefd 	.word	0xfffffefd
 800fc80:	fffe0219 	.word	0xfffe0219
 800fc84:	833fffe7 	.word	0x833fffe7

0800fc88 <HAL_ADC_Start>:
{
 800fc88:	b510      	push	{r4, lr}
 800fc8a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc8c:	6803      	ldr	r3, [r0, #0]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	075b      	lsls	r3, r3, #29
 800fc92:	d423      	bmi.n	800fcdc <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800fc94:	2340      	movs	r3, #64	; 0x40
 800fc96:	5cc3      	ldrb	r3, [r0, r3]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d021      	beq.n	800fce0 <HAL_ADC_Start+0x58>
 800fc9c:	2340      	movs	r3, #64	; 0x40
 800fc9e:	2201      	movs	r2, #1
 800fca0:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fca2:	69c3      	ldr	r3, [r0, #28]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d114      	bne.n	800fcd2 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 800fca8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcaa:	4a0e      	ldr	r2, [pc, #56]	; (800fce4 <HAL_ADC_Start+0x5c>)
 800fcac:	401a      	ands	r2, r3
 800fcae:	2380      	movs	r3, #128	; 0x80
 800fcb0:	005b      	lsls	r3, r3, #1
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fcba:	2240      	movs	r2, #64	; 0x40
 800fcbc:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	3a24      	subs	r2, #36	; 0x24
 800fcc2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fcc4:	6822      	ldr	r2, [r4, #0]
 800fcc6:	6893      	ldr	r3, [r2, #8]
 800fcc8:	2104      	movs	r1, #4
 800fcca:	430b      	orrs	r3, r1
 800fccc:	6093      	str	r3, [r2, #8]
 800fcce:	2000      	movs	r0, #0
}
 800fcd0:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800fcd2:	f7ff fedd 	bl	800fa90 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d0e6      	beq.n	800fca8 <HAL_ADC_Start+0x20>
 800fcda:	e7f9      	b.n	800fcd0 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 800fcdc:	2002      	movs	r0, #2
 800fcde:	e7f7      	b.n	800fcd0 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800fce0:	2002      	movs	r0, #2
 800fce2:	e7f5      	b.n	800fcd0 <HAL_ADC_Start+0x48>
 800fce4:	fffff0fe 	.word	0xfffff0fe

0800fce8 <HAL_ADC_Stop>:
{ 
 800fce8:	b510      	push	{r4, lr}
 800fcea:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fcec:	2340      	movs	r3, #64	; 0x40
 800fcee:	5cc3      	ldrb	r3, [r0, r3]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d017      	beq.n	800fd24 <HAL_ADC_Stop+0x3c>
 800fcf4:	2340      	movs	r3, #64	; 0x40
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fcfa:	f7ff fe5f 	bl	800f9bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d003      	beq.n	800fd0a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800fd02:	2340      	movs	r3, #64	; 0x40
 800fd04:	2200      	movs	r2, #0
 800fd06:	54e2      	strb	r2, [r4, r3]
}
 800fd08:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fd0a:	0020      	movs	r0, r4
 800fd0c:	f7ff fe80 	bl	800fa10 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d1f6      	bne.n	800fd02 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fd14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd16:	4a04      	ldr	r2, [pc, #16]	; (800fd28 <HAL_ADC_Stop+0x40>)
 800fd18:	4013      	ands	r3, r2
 800fd1a:	3204      	adds	r2, #4
 800fd1c:	32ff      	adds	r2, #255	; 0xff
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	6463      	str	r3, [r4, #68]	; 0x44
 800fd22:	e7ee      	b.n	800fd02 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800fd24:	2002      	movs	r0, #2
 800fd26:	e7ef      	b.n	800fd08 <HAL_ADC_Stop+0x20>
 800fd28:	fffffefe 	.word	0xfffffefe

0800fd2c <HAL_ADC_PollForConversion>:
{
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	0006      	movs	r6, r0
 800fd30:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fd32:	6943      	ldr	r3, [r0, #20]
 800fd34:	2b08      	cmp	r3, #8
 800fd36:	d026      	beq.n	800fd86 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fd38:	6803      	ldr	r3, [r0, #0]
 800fd3a:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fd3c:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fd3e:	07db      	lsls	r3, r3, #31
 800fd40:	d418      	bmi.n	800fd74 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800fd42:	f7ff fe19 	bl	800f978 <HAL_GetTick>
 800fd46:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fd48:	6832      	ldr	r2, [r6, #0]
 800fd4a:	6813      	ldr	r3, [r2, #0]
 800fd4c:	421d      	tst	r5, r3
 800fd4e:	d11c      	bne.n	800fd8a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800fd50:	1c63      	adds	r3, r4, #1
 800fd52:	d0fa      	beq.n	800fd4a <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fd54:	2c00      	cmp	r4, #0
 800fd56:	d004      	beq.n	800fd62 <HAL_ADC_PollForConversion+0x36>
 800fd58:	f7ff fe0e 	bl	800f978 <HAL_GetTick>
 800fd5c:	1bc0      	subs	r0, r0, r7
 800fd5e:	42a0      	cmp	r0, r4
 800fd60:	d9f2      	bls.n	800fd48 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fd62:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fd64:	2204      	movs	r2, #4
 800fd66:	4313      	orrs	r3, r2
 800fd68:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fd6a:	2340      	movs	r3, #64	; 0x40
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fd70:	2003      	movs	r0, #3
 800fd72:	e007      	b.n	800fd84 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd76:	2220      	movs	r2, #32
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fd7c:	2340      	movs	r3, #64	; 0x40
 800fd7e:	2200      	movs	r2, #0
 800fd80:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fd82:	2001      	movs	r0, #1
}
 800fd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fd86:	2508      	movs	r5, #8
 800fd88:	e7db      	b.n	800fd42 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fd8a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fd8c:	2380      	movs	r3, #128	; 0x80
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	430b      	orrs	r3, r1
 800fd92:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fd94:	68d1      	ldr	r1, [r2, #12]
 800fd96:	23c0      	movs	r3, #192	; 0xc0
 800fd98:	011b      	lsls	r3, r3, #4
 800fd9a:	4219      	tst	r1, r3
 800fd9c:	d113      	bne.n	800fdc6 <HAL_ADC_PollForConversion+0x9a>
 800fd9e:	6a33      	ldr	r3, [r6, #32]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d110      	bne.n	800fdc6 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fda4:	6813      	ldr	r3, [r2, #0]
 800fda6:	071b      	lsls	r3, r3, #28
 800fda8:	d50d      	bpl.n	800fdc6 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fdaa:	6893      	ldr	r3, [r2, #8]
 800fdac:	075b      	lsls	r3, r3, #29
 800fdae:	d412      	bmi.n	800fdd6 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fdb0:	6853      	ldr	r3, [r2, #4]
 800fdb2:	210c      	movs	r1, #12
 800fdb4:	438b      	bics	r3, r1
 800fdb6:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fdb8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fdba:	4a0b      	ldr	r2, [pc, #44]	; (800fde8 <HAL_ADC_PollForConversion+0xbc>)
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	3204      	adds	r2, #4
 800fdc0:	32ff      	adds	r2, #255	; 0xff
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 800fdc6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fdc8:	69b3      	ldr	r3, [r6, #24]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1da      	bne.n	800fd84 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fdce:	6833      	ldr	r3, [r6, #0]
 800fdd0:	220c      	movs	r2, #12
 800fdd2:	601a      	str	r2, [r3, #0]
 800fdd4:	e7d6      	b.n	800fd84 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fdd6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fdd8:	2220      	movs	r2, #32
 800fdda:	4313      	orrs	r3, r2
 800fddc:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fdde:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fde0:	3a1f      	subs	r2, #31
 800fde2:	4313      	orrs	r3, r2
 800fde4:	64b3      	str	r3, [r6, #72]	; 0x48
 800fde6:	e7ee      	b.n	800fdc6 <HAL_ADC_PollForConversion+0x9a>
 800fde8:	fffffefe 	.word	0xfffffefe

0800fdec <HAL_ADC_Start_IT>:
{
 800fdec:	b510      	push	{r4, lr}
 800fdee:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fdf0:	6803      	ldr	r3, [r0, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	075b      	lsls	r3, r3, #29
 800fdf6:	d436      	bmi.n	800fe66 <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 800fdf8:	2340      	movs	r3, #64	; 0x40
 800fdfa:	5cc3      	ldrb	r3, [r0, r3]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d034      	beq.n	800fe6a <HAL_ADC_Start_IT+0x7e>
 800fe00:	2340      	movs	r3, #64	; 0x40
 800fe02:	2201      	movs	r2, #1
 800fe04:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fe06:	69c3      	ldr	r3, [r0, #28]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d121      	bne.n	800fe50 <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 800fe0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe0e:	4a18      	ldr	r2, [pc, #96]	; (800fe70 <HAL_ADC_Start_IT+0x84>)
 800fe10:	401a      	ands	r2, r3
 800fe12:	2380      	movs	r3, #128	; 0x80
 800fe14:	005b      	lsls	r3, r3, #1
 800fe16:	4313      	orrs	r3, r2
 800fe18:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fe1e:	2240      	movs	r2, #64	; 0x40
 800fe20:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	3a24      	subs	r2, #36	; 0x24
 800fe26:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 800fe28:	6963      	ldr	r3, [r4, #20]
 800fe2a:	2b08      	cmp	r3, #8
 800fe2c:	d115      	bne.n	800fe5a <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800fe2e:	6822      	ldr	r2, [r4, #0]
 800fe30:	6853      	ldr	r3, [r2, #4]
 800fe32:	2104      	movs	r1, #4
 800fe34:	438b      	bics	r3, r1
 800fe36:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800fe38:	6822      	ldr	r2, [r4, #0]
 800fe3a:	6853      	ldr	r3, [r2, #4]
 800fe3c:	3114      	adds	r1, #20
 800fe3e:	430b      	orrs	r3, r1
 800fe40:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fe42:	6822      	ldr	r2, [r4, #0]
 800fe44:	6893      	ldr	r3, [r2, #8]
 800fe46:	2104      	movs	r1, #4
 800fe48:	430b      	orrs	r3, r1
 800fe4a:	6093      	str	r3, [r2, #8]
 800fe4c:	2000      	movs	r0, #0
}
 800fe4e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800fe50:	f7ff fe1e 	bl	800fa90 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d0d9      	beq.n	800fe0c <HAL_ADC_Start_IT+0x20>
 800fe58:	e7f9      	b.n	800fe4e <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800fe5a:	6822      	ldr	r2, [r4, #0]
 800fe5c:	6853      	ldr	r3, [r2, #4]
 800fe5e:	211c      	movs	r1, #28
 800fe60:	430b      	orrs	r3, r1
 800fe62:	6053      	str	r3, [r2, #4]
          break;
 800fe64:	e7ed      	b.n	800fe42 <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 800fe66:	2002      	movs	r0, #2
 800fe68:	e7f1      	b.n	800fe4e <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 800fe6a:	2002      	movs	r0, #2
 800fe6c:	e7ef      	b.n	800fe4e <HAL_ADC_Start_IT+0x62>
 800fe6e:	46c0      	nop			; (mov r8, r8)
 800fe70:	fffff0fe 	.word	0xfffff0fe

0800fe74 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fe74:	6803      	ldr	r3, [r0, #0]
 800fe76:	2208      	movs	r2, #8
 800fe78:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fe7a:	6803      	ldr	r3, [r0, #0]
 800fe7c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fe7e:	4770      	bx	lr

0800fe80 <HAL_ADC_ConfigChannel>:
{
 800fe80:	b530      	push	{r4, r5, lr}
 800fe82:	b083      	sub	sp, #12
 800fe84:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fe86:	2300      	movs	r3, #0
 800fe88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fe8a:	3340      	adds	r3, #64	; 0x40
 800fe8c:	5cc3      	ldrb	r3, [r0, r3]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d100      	bne.n	800fe94 <HAL_ADC_ConfigChannel+0x14>
 800fe92:	e088      	b.n	800ffa6 <HAL_ADC_ConfigChannel+0x126>
 800fe94:	2340      	movs	r3, #64	; 0x40
 800fe96:	2201      	movs	r2, #1
 800fe98:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	689a      	ldr	r2, [r3, #8]
 800fe9e:	0752      	lsls	r2, r2, #29
 800fea0:	d475      	bmi.n	800ff8e <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 800fea2:	4a42      	ldr	r2, [pc, #264]	; (800ffac <HAL_ADC_ConfigChannel+0x12c>)
 800fea4:	6848      	ldr	r0, [r1, #4]
 800fea6:	4290      	cmp	r0, r2
 800fea8:	d050      	beq.n	800ff4c <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800feaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800feac:	2201      	movs	r2, #1
 800feae:	680d      	ldr	r5, [r1, #0]
 800feb0:	40aa      	lsls	r2, r5
 800feb2:	4302      	orrs	r2, r0
 800feb4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800feb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800feb8:	2280      	movs	r2, #128	; 0x80
 800feba:	0552      	lsls	r2, r2, #21
 800febc:	4293      	cmp	r3, r2
 800febe:	d013      	beq.n	800fee8 <HAL_ADC_ConfigChannel+0x68>
 800fec0:	3b01      	subs	r3, #1
 800fec2:	2b06      	cmp	r3, #6
 800fec4:	d910      	bls.n	800fee8 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fec6:	6822      	ldr	r2, [r4, #0]
 800fec8:	6950      	ldr	r0, [r2, #20]
 800feca:	2307      	movs	r3, #7
 800fecc:	4003      	ands	r3, r0
 800fece:	6888      	ldr	r0, [r1, #8]
 800fed0:	4298      	cmp	r0, r3
 800fed2:	d009      	beq.n	800fee8 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fed4:	6950      	ldr	r0, [r2, #20]
 800fed6:	2307      	movs	r3, #7
 800fed8:	4398      	bics	r0, r3
 800feda:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fedc:	6822      	ldr	r2, [r4, #0]
 800fede:	6950      	ldr	r0, [r2, #20]
 800fee0:	688d      	ldr	r5, [r1, #8]
 800fee2:	402b      	ands	r3, r5
 800fee4:	4303      	orrs	r3, r0
 800fee6:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fee8:	680b      	ldr	r3, [r1, #0]
 800feea:	001a      	movs	r2, r3
 800feec:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800feee:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fef0:	2a02      	cmp	r2, #2
 800fef2:	d851      	bhi.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fef4:	4a2e      	ldr	r2, [pc, #184]	; (800ffb0 <HAL_ADC_ConfigChannel+0x130>)
 800fef6:	6810      	ldr	r0, [r2, #0]
 800fef8:	2b10      	cmp	r3, #16
 800fefa:	d024      	beq.n	800ff46 <HAL_ADC_ConfigChannel+0xc6>
 800fefc:	3b11      	subs	r3, #17
 800fefe:	425a      	negs	r2, r3
 800ff00:	415a      	adcs	r2, r3
 800ff02:	4253      	negs	r3, r2
 800ff04:	4a2b      	ldr	r2, [pc, #172]	; (800ffb4 <HAL_ADC_ConfigChannel+0x134>)
 800ff06:	4013      	ands	r3, r2
 800ff08:	2280      	movs	r2, #128	; 0x80
 800ff0a:	0452      	lsls	r2, r2, #17
 800ff0c:	4694      	mov	ip, r2
 800ff0e:	4463      	add	r3, ip
 800ff10:	4303      	orrs	r3, r0
 800ff12:	4a27      	ldr	r2, [pc, #156]	; (800ffb0 <HAL_ADC_ConfigChannel+0x130>)
 800ff14:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ff16:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff18:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ff1a:	2b10      	cmp	r3, #16
 800ff1c:	d13c      	bne.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ff1e:	4b26      	ldr	r3, [pc, #152]	; (800ffb8 <HAL_ADC_ConfigChannel+0x138>)
 800ff20:	6818      	ldr	r0, [r3, #0]
 800ff22:	4926      	ldr	r1, [pc, #152]	; (800ffbc <HAL_ADC_ConfigChannel+0x13c>)
 800ff24:	f7f0 f90a 	bl	800013c <__udivsi3>
 800ff28:	0083      	lsls	r3, r0, #2
 800ff2a:	1818      	adds	r0, r3, r0
 800ff2c:	0040      	lsls	r0, r0, #1
 800ff2e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800ff30:	9b01      	ldr	r3, [sp, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d035      	beq.n	800ffa2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1f9      	bne.n	800ff36 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff42:	2000      	movs	r0, #0
 800ff44:	e028      	b.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800ff46:	2380      	movs	r3, #128	; 0x80
 800ff48:	041b      	lsls	r3, r3, #16
 800ff4a:	e7e1      	b.n	800ff10 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800ff4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff4e:	2001      	movs	r0, #1
 800ff50:	680d      	ldr	r5, [r1, #0]
 800ff52:	40a8      	lsls	r0, r5
 800ff54:	4382      	bics	r2, r0
 800ff56:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ff58:	680b      	ldr	r3, [r1, #0]
 800ff5a:	001a      	movs	r2, r3
 800ff5c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff5e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ff60:	2a02      	cmp	r2, #2
 800ff62:	d819      	bhi.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800ff64:	4a12      	ldr	r2, [pc, #72]	; (800ffb0 <HAL_ADC_ConfigChannel+0x130>)
 800ff66:	6811      	ldr	r1, [r2, #0]
 800ff68:	2b10      	cmp	r3, #16
 800ff6a:	d00e      	beq.n	800ff8a <HAL_ADC_ConfigChannel+0x10a>
 800ff6c:	3b11      	subs	r3, #17
 800ff6e:	425a      	negs	r2, r3
 800ff70:	415a      	adcs	r2, r3
 800ff72:	4252      	negs	r2, r2
 800ff74:	23c0      	movs	r3, #192	; 0xc0
 800ff76:	041b      	lsls	r3, r3, #16
 800ff78:	4013      	ands	r3, r2
 800ff7a:	4a11      	ldr	r2, [pc, #68]	; (800ffc0 <HAL_ADC_ConfigChannel+0x140>)
 800ff7c:	4694      	mov	ip, r2
 800ff7e:	4463      	add	r3, ip
 800ff80:	400b      	ands	r3, r1
 800ff82:	4a0b      	ldr	r2, [pc, #44]	; (800ffb0 <HAL_ADC_ConfigChannel+0x130>)
 800ff84:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff86:	2000      	movs	r0, #0
 800ff88:	e006      	b.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800ff8a:	4b0e      	ldr	r3, [pc, #56]	; (800ffc4 <HAL_ADC_ConfigChannel+0x144>)
 800ff8c:	e7f8      	b.n	800ff80 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ff8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ff90:	2220      	movs	r2, #32
 800ff92:	4313      	orrs	r3, r2
 800ff94:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800ff96:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800ff98:	2340      	movs	r3, #64	; 0x40
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	54e2      	strb	r2, [r4, r3]
}
 800ff9e:	b003      	add	sp, #12
 800ffa0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	e7f8      	b.n	800ff98 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800ffa6:	2002      	movs	r0, #2
 800ffa8:	e7f9      	b.n	800ff9e <HAL_ADC_ConfigChannel+0x11e>
 800ffaa:	46c0      	nop			; (mov r8, r8)
 800ffac:	00001001 	.word	0x00001001
 800ffb0:	40012708 	.word	0x40012708
 800ffb4:	ff400000 	.word	0xff400000
 800ffb8:	200000ac 	.word	0x200000ac
 800ffbc:	000f4240 	.word	0x000f4240
 800ffc0:	feffffff 	.word	0xfeffffff
 800ffc4:	ff7fffff 	.word	0xff7fffff

0800ffc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ffc8:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	db14      	blt.n	800fff8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ffce:	0883      	lsrs	r3, r0, #2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a15      	ldr	r2, [pc, #84]	; (8010028 <HAL_NVIC_SetPriority+0x60>)
 800ffd4:	4694      	mov	ip, r2
 800ffd6:	4463      	add	r3, ip
 800ffd8:	26c0      	movs	r6, #192	; 0xc0
 800ffda:	00b6      	lsls	r6, r6, #2
 800ffdc:	599d      	ldr	r5, [r3, r6]
 800ffde:	2403      	movs	r4, #3
 800ffe0:	4020      	ands	r0, r4
 800ffe2:	00c0      	lsls	r0, r0, #3
 800ffe4:	22ff      	movs	r2, #255	; 0xff
 800ffe6:	0014      	movs	r4, r2
 800ffe8:	4084      	lsls	r4, r0
 800ffea:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ffec:	0189      	lsls	r1, r1, #6
 800ffee:	400a      	ands	r2, r1
 800fff0:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fff2:	432a      	orrs	r2, r5
 800fff4:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fff6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fff8:	b2c0      	uxtb	r0, r0
 800fffa:	230f      	movs	r3, #15
 800fffc:	4003      	ands	r3, r0
 800fffe:	3b08      	subs	r3, #8
 8010000:	089b      	lsrs	r3, r3, #2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4a09      	ldr	r2, [pc, #36]	; (801002c <HAL_NVIC_SetPriority+0x64>)
 8010006:	4694      	mov	ip, r2
 8010008:	4463      	add	r3, ip
 801000a:	69dd      	ldr	r5, [r3, #28]
 801000c:	2203      	movs	r2, #3
 801000e:	4010      	ands	r0, r2
 8010010:	00c0      	lsls	r0, r0, #3
 8010012:	24ff      	movs	r4, #255	; 0xff
 8010014:	0022      	movs	r2, r4
 8010016:	4082      	lsls	r2, r0
 8010018:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801001a:	0189      	lsls	r1, r1, #6
 801001c:	400c      	ands	r4, r1
 801001e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010020:	432c      	orrs	r4, r5
 8010022:	61dc      	str	r4, [r3, #28]
 8010024:	e7e7      	b.n	800fff6 <HAL_NVIC_SetPriority+0x2e>
 8010026:	46c0      	nop			; (mov r8, r8)
 8010028:	e000e100 	.word	0xe000e100
 801002c:	e000ed00 	.word	0xe000ed00

08010030 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010030:	231f      	movs	r3, #31
 8010032:	4018      	ands	r0, r3
 8010034:	3b1e      	subs	r3, #30
 8010036:	4083      	lsls	r3, r0
 8010038:	4a01      	ldr	r2, [pc, #4]	; (8010040 <HAL_NVIC_EnableIRQ+0x10>)
 801003a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801003c:	4770      	bx	lr
 801003e:	46c0      	nop			; (mov r8, r8)
 8010040:	e000e100 	.word	0xe000e100

08010044 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010044:	231f      	movs	r3, #31
 8010046:	4018      	ands	r0, r3
 8010048:	3b1e      	subs	r3, #30
 801004a:	4083      	lsls	r3, r0
 801004c:	4901      	ldr	r1, [pc, #4]	; (8010054 <HAL_NVIC_DisableIRQ+0x10>)
 801004e:	2280      	movs	r2, #128	; 0x80
 8010050:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010052:	4770      	bx	lr
 8010054:	e000e100 	.word	0xe000e100

08010058 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010058:	1e43      	subs	r3, r0, #1
 801005a:	4a0a      	ldr	r2, [pc, #40]	; (8010084 <HAL_SYSTICK_Config+0x2c>)
 801005c:	2001      	movs	r0, #1
 801005e:	4293      	cmp	r3, r2
 8010060:	d80e      	bhi.n	8010080 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010062:	4a09      	ldr	r2, [pc, #36]	; (8010088 <HAL_SYSTICK_Config+0x30>)
 8010064:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010066:	4809      	ldr	r0, [pc, #36]	; (801008c <HAL_SYSTICK_Config+0x34>)
 8010068:	6a03      	ldr	r3, [r0, #32]
 801006a:	021b      	lsls	r3, r3, #8
 801006c:	0a1b      	lsrs	r3, r3, #8
 801006e:	21c0      	movs	r1, #192	; 0xc0
 8010070:	0609      	lsls	r1, r1, #24
 8010072:	430b      	orrs	r3, r1
 8010074:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010076:	2300      	movs	r3, #0
 8010078:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801007a:	3307      	adds	r3, #7
 801007c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801007e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010080:	4770      	bx	lr
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	00ffffff 	.word	0x00ffffff
 8010088:	e000e010 	.word	0xe000e010
 801008c:	e000ed00 	.word	0xe000ed00

08010090 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010090:	2804      	cmp	r0, #4
 8010092:	d005      	beq.n	80100a0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010094:	4a05      	ldr	r2, [pc, #20]	; (80100ac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010096:	6813      	ldr	r3, [r2, #0]
 8010098:	2104      	movs	r1, #4
 801009a:	438b      	bics	r3, r1
 801009c:	6013      	str	r3, [r2, #0]
  }
}
 801009e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80100a0:	4a02      	ldr	r2, [pc, #8]	; (80100ac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80100a2:	6813      	ldr	r3, [r2, #0]
 80100a4:	2104      	movs	r1, #4
 80100a6:	430b      	orrs	r3, r1
 80100a8:	6013      	str	r3, [r2, #0]
 80100aa:	e7f8      	b.n	801009e <HAL_SYSTICK_CLKSourceConfig+0xe>
 80100ac:	e000e010 	.word	0xe000e010

080100b0 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80100b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100b2:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80100b4:	0891      	lsrs	r1, r2, #2
 80100b6:	d013      	beq.n	80100e0 <CRC_Handle_8+0x30>
 80100b8:	0034      	movs	r4, r6
 80100ba:	2303      	movs	r3, #3
 80100bc:	0017      	movs	r7, r2
 80100be:	439f      	bics	r7, r3
 80100c0:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80100c2:	7823      	ldrb	r3, [r4, #0]
 80100c4:	061b      	lsls	r3, r3, #24
 80100c6:	7865      	ldrb	r5, [r4, #1]
 80100c8:	042d      	lsls	r5, r5, #16
 80100ca:	432b      	orrs	r3, r5
 80100cc:	78e5      	ldrb	r5, [r4, #3]
 80100ce:	432b      	orrs	r3, r5
 80100d0:	78a5      	ldrb	r5, [r4, #2]
 80100d2:	022d      	lsls	r5, r5, #8
 80100d4:	432b      	orrs	r3, r5
 80100d6:	6805      	ldr	r5, [r0, #0]
 80100d8:	602b      	str	r3, [r5, #0]
 80100da:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 80100dc:	42bc      	cmp	r4, r7
 80100de:	d1f0      	bne.n	80100c2 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80100e0:	2303      	movs	r3, #3
 80100e2:	401a      	ands	r2, r3
 80100e4:	d01e      	beq.n	8010124 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 80100e6:	2a01      	cmp	r2, #1
 80100e8:	d00a      	beq.n	8010100 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80100ea:	2a02      	cmp	r2, #2
 80100ec:	d10d      	bne.n	801010a <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80100ee:	0089      	lsls	r1, r1, #2
 80100f0:	5c72      	ldrb	r2, [r6, r1]
 80100f2:	0212      	lsls	r2, r2, #8
 80100f4:	1871      	adds	r1, r6, r1
 80100f6:	784b      	ldrb	r3, [r1, #1]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	6802      	ldr	r2, [r0, #0]
 80100fc:	8013      	strh	r3, [r2, #0]
 80100fe:	e011      	b.n	8010124 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010100:	0089      	lsls	r1, r1, #2
 8010102:	5d8b      	ldrb	r3, [r1, r6]
 8010104:	6802      	ldr	r2, [r0, #0]
 8010106:	7013      	strb	r3, [r2, #0]
 8010108:	e00c      	b.n	8010124 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 801010a:	2a03      	cmp	r2, #3
 801010c:	d10a      	bne.n	8010124 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801010e:	0089      	lsls	r1, r1, #2
 8010110:	5c72      	ldrb	r2, [r6, r1]
 8010112:	0212      	lsls	r2, r2, #8
 8010114:	1871      	adds	r1, r6, r1
 8010116:	784b      	ldrb	r3, [r1, #1]
 8010118:	4313      	orrs	r3, r2
 801011a:	6802      	ldr	r2, [r0, #0]
 801011c:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801011e:	788b      	ldrb	r3, [r1, #2]
 8010120:	6802      	ldr	r2, [r0, #0]
 8010122:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	6818      	ldr	r0, [r3, #0]
}
 8010128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801012a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801012a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012c:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801012e:	0852      	lsrs	r2, r2, #1
 8010130:	d00b      	beq.n	801014a <CRC_Handle_16+0x20>
 8010132:	000c      	movs	r4, r1
 8010134:	0097      	lsls	r7, r2, #2
 8010136:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010138:	8823      	ldrh	r3, [r4, #0]
 801013a:	041b      	lsls	r3, r3, #16
 801013c:	8866      	ldrh	r6, [r4, #2]
 801013e:	4333      	orrs	r3, r6
 8010140:	6806      	ldr	r6, [r0, #0]
 8010142:	6033      	str	r3, [r6, #0]
 8010144:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010146:	42bc      	cmp	r4, r7
 8010148:	d1f6      	bne.n	8010138 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 801014a:	07eb      	lsls	r3, r5, #31
 801014c:	d503      	bpl.n	8010156 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801014e:	0092      	lsls	r2, r2, #2
 8010150:	5a53      	ldrh	r3, [r2, r1]
 8010152:	6802      	ldr	r2, [r0, #0]
 8010154:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010156:	6803      	ldr	r3, [r0, #0]
 8010158:	6818      	ldr	r0, [r3, #0]
}
 801015a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801015c <HAL_CRC_Init>:
{
 801015c:	b510      	push	{r4, lr}
 801015e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010160:	d029      	beq.n	80101b6 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010162:	7f43      	ldrb	r3, [r0, #29]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d01e      	beq.n	80101a6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010168:	2302      	movs	r3, #2
 801016a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801016c:	0020      	movs	r0, r4
 801016e:	f000 f8b1 	bl	80102d4 <HAL_CRCEx_Init>
 8010172:	2800      	cmp	r0, #0
 8010174:	d121      	bne.n	80101ba <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010176:	7963      	ldrb	r3, [r4, #5]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d118      	bne.n	80101ae <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	2201      	movs	r2, #1
 8010180:	4252      	negs	r2, r2
 8010182:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010184:	6822      	ldr	r2, [r4, #0]
 8010186:	6893      	ldr	r3, [r2, #8]
 8010188:	2160      	movs	r1, #96	; 0x60
 801018a:	438b      	bics	r3, r1
 801018c:	6961      	ldr	r1, [r4, #20]
 801018e:	430b      	orrs	r3, r1
 8010190:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010192:	6822      	ldr	r2, [r4, #0]
 8010194:	6893      	ldr	r3, [r2, #8]
 8010196:	2180      	movs	r1, #128	; 0x80
 8010198:	438b      	bics	r3, r1
 801019a:	69a1      	ldr	r1, [r4, #24]
 801019c:	430b      	orrs	r3, r1
 801019e:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80101a0:	2301      	movs	r3, #1
 80101a2:	7763      	strb	r3, [r4, #29]
}
 80101a4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80101a6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80101a8:	f7fb f93e 	bl	800b428 <HAL_CRC_MspInit>
 80101ac:	e7dc      	b.n	8010168 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	6922      	ldr	r2, [r4, #16]
 80101b2:	611a      	str	r2, [r3, #16]
 80101b4:	e7e6      	b.n	8010184 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80101b6:	2001      	movs	r0, #1
 80101b8:	e7f4      	b.n	80101a4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80101ba:	2001      	movs	r0, #1
 80101bc:	e7f2      	b.n	80101a4 <HAL_CRC_Init+0x48>

080101be <HAL_CRC_Accumulate>:
{
 80101be:	b510      	push	{r4, lr}
 80101c0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80101c2:	7f03      	ldrb	r3, [r0, #28]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d024      	beq.n	8010212 <HAL_CRC_Accumulate+0x54>
 80101c8:	2301      	movs	r3, #1
 80101ca:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80101cc:	3301      	adds	r3, #1
 80101ce:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80101d0:	6a03      	ldr	r3, [r0, #32]
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	d01a      	beq.n	801020c <HAL_CRC_Accumulate+0x4e>
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	d007      	beq.n	80101ea <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80101da:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d011      	beq.n	8010204 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 80101e0:	2301      	movs	r3, #1
 80101e2:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80101e4:	2300      	movs	r3, #0
 80101e6:	7723      	strb	r3, [r4, #28]
}
 80101e8:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80101ea:	2a00      	cmp	r2, #0
 80101ec:	d007      	beq.n	80101fe <HAL_CRC_Accumulate+0x40>
 80101ee:	000b      	movs	r3, r1
 80101f0:	0092      	lsls	r2, r2, #2
 80101f2:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80101f4:	6822      	ldr	r2, [r4, #0]
 80101f6:	cb01      	ldmia	r3!, {r0}
 80101f8:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80101fa:	428b      	cmp	r3, r1
 80101fc:	d1fa      	bne.n	80101f4 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	6818      	ldr	r0, [r3, #0]
      break;
 8010202:	e7ed      	b.n	80101e0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010204:	0020      	movs	r0, r4
 8010206:	f7ff ff53 	bl	80100b0 <CRC_Handle_8>
      break;
 801020a:	e7e9      	b.n	80101e0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801020c:	f7ff ff8d 	bl	801012a <CRC_Handle_16>
      break;
 8010210:	e7e6      	b.n	80101e0 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010212:	2002      	movs	r0, #2
 8010214:	e7e8      	b.n	80101e8 <HAL_CRC_Accumulate+0x2a>

08010216 <HAL_CRC_Calculate>:
{
 8010216:	b570      	push	{r4, r5, r6, lr}
 8010218:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801021a:	7f03      	ldrb	r3, [r0, #28]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d029      	beq.n	8010274 <HAL_CRC_Calculate+0x5e>
 8010220:	2501      	movs	r5, #1
 8010222:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010224:	2302      	movs	r3, #2
 8010226:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010228:	6800      	ldr	r0, [r0, #0]
 801022a:	6883      	ldr	r3, [r0, #8]
 801022c:	432b      	orrs	r3, r5
 801022e:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010230:	6a23      	ldr	r3, [r4, #32]
 8010232:	2b02      	cmp	r3, #2
 8010234:	d01a      	beq.n	801026c <HAL_CRC_Calculate+0x56>
 8010236:	2b03      	cmp	r3, #3
 8010238:	d007      	beq.n	801024a <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801023a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 801023c:	2b01      	cmp	r3, #1
 801023e:	d011      	beq.n	8010264 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010240:	2301      	movs	r3, #1
 8010242:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010244:	2300      	movs	r3, #0
 8010246:	7723      	strb	r3, [r4, #28]
}
 8010248:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801024a:	2a00      	cmp	r2, #0
 801024c:	d007      	beq.n	801025e <HAL_CRC_Calculate+0x48>
 801024e:	000b      	movs	r3, r1
 8010250:	0092      	lsls	r2, r2, #2
 8010252:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010254:	6820      	ldr	r0, [r4, #0]
 8010256:	cb20      	ldmia	r3!, {r5}
 8010258:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801025a:	428b      	cmp	r3, r1
 801025c:	d1fa      	bne.n	8010254 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	6818      	ldr	r0, [r3, #0]
      break;
 8010262:	e7ed      	b.n	8010240 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010264:	0020      	movs	r0, r4
 8010266:	f7ff ff23 	bl	80100b0 <CRC_Handle_8>
      break;
 801026a:	e7e9      	b.n	8010240 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801026c:	0020      	movs	r0, r4
 801026e:	f7ff ff5c 	bl	801012a <CRC_Handle_16>
      break;
 8010272:	e7e5      	b.n	8010240 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010274:	2002      	movs	r0, #2
 8010276:	e7e7      	b.n	8010248 <HAL_CRC_Calculate+0x32>

08010278 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010278:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801027a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 801027c:	2501      	movs	r5, #1
 801027e:	002c      	movs	r4, r5
 8010280:	409c      	lsls	r4, r3
 8010282:	4221      	tst	r1, r4
 8010284:	d10b      	bne.n	801029e <HAL_CRCEx_Polynomial_Set+0x26>
 8010286:	3b01      	subs	r3, #1
 8010288:	d2f9      	bcs.n	801027e <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 801028a:	2a10      	cmp	r2, #16
 801028c:	d01c      	beq.n	80102c8 <HAL_CRCEx_Polynomial_Set+0x50>
 801028e:	2a18      	cmp	r2, #24
 8010290:	d01e      	beq.n	80102d0 <HAL_CRCEx_Polynomial_Set+0x58>
 8010292:	2a08      	cmp	r2, #8
 8010294:	d109      	bne.n	80102aa <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010296:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010298:	2b0f      	cmp	r3, #15
 801029a:	d906      	bls.n	80102aa <HAL_CRCEx_Polynomial_Set+0x32>
 801029c:	e00e      	b.n	80102bc <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 801029e:	2a10      	cmp	r2, #16
 80102a0:	d012      	beq.n	80102c8 <HAL_CRCEx_Polynomial_Set+0x50>
 80102a2:	2a18      	cmp	r2, #24
 80102a4:	d00c      	beq.n	80102c0 <HAL_CRCEx_Polynomial_Set+0x48>
 80102a6:	2a08      	cmp	r2, #8
 80102a8:	d0f5      	beq.n	8010296 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80102aa:	6803      	ldr	r3, [r0, #0]
 80102ac:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80102ae:	6801      	ldr	r1, [r0, #0]
 80102b0:	688b      	ldr	r3, [r1, #8]
 80102b2:	2018      	movs	r0, #24
 80102b4:	4383      	bics	r3, r0
 80102b6:	431a      	orrs	r2, r3
 80102b8:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80102ba:	2400      	movs	r4, #0
}
 80102bc:	0020      	movs	r0, r4
 80102be:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80102c0:	2b06      	cmp	r3, #6
 80102c2:	d9f2      	bls.n	80102aa <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 80102c4:	2401      	movs	r4, #1
 80102c6:	e7f9      	b.n	80102bc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 80102c8:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 80102ca:	2b07      	cmp	r3, #7
 80102cc:	d9ed      	bls.n	80102aa <HAL_CRCEx_Polynomial_Set+0x32>
 80102ce:	e7f5      	b.n	80102bc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 80102d0:	2401      	movs	r4, #1
 80102d2:	e7f3      	b.n	80102bc <HAL_CRCEx_Polynomial_Set+0x44>

080102d4 <HAL_CRCEx_Init>:
{
 80102d4:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80102d6:	7903      	ldrb	r3, [r0, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d109      	bne.n	80102f0 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80102dc:	6803      	ldr	r3, [r0, #0]
 80102de:	4a08      	ldr	r2, [pc, #32]	; (8010300 <HAL_CRCEx_Init+0x2c>)
 80102e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80102e2:	6802      	ldr	r2, [r0, #0]
 80102e4:	6893      	ldr	r3, [r2, #8]
 80102e6:	2118      	movs	r1, #24
 80102e8:	438b      	bics	r3, r1
 80102ea:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 80102ec:	2000      	movs	r0, #0
}
 80102ee:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80102f0:	68c2      	ldr	r2, [r0, #12]
 80102f2:	6881      	ldr	r1, [r0, #8]
 80102f4:	f7ff ffc0 	bl	8010278 <HAL_CRCEx_Polynomial_Set>
 80102f8:	1e43      	subs	r3, r0, #1
 80102fa:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80102fc:	b2c0      	uxtb	r0, r0
 80102fe:	e7f6      	b.n	80102ee <HAL_CRCEx_Init+0x1a>
 8010300:	04c11db7 	.word	0x04c11db7

08010304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010304:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010306:	2800      	cmp	r0, #0
 8010308:	d022      	beq.n	8010350 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801030a:	2321      	movs	r3, #33	; 0x21
 801030c:	5cc3      	ldrb	r3, [r0, r3]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d102      	bne.n	8010318 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010312:	3320      	adds	r3, #32
 8010314:	2200      	movs	r2, #0
 8010316:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010318:	2121      	movs	r1, #33	; 0x21
 801031a:	2302      	movs	r3, #2
 801031c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801031e:	6804      	ldr	r4, [r0, #0]
 8010320:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010322:	4a0c      	ldr	r2, [pc, #48]	; (8010354 <HAL_DMA_Init+0x50>)
 8010324:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010326:	6843      	ldr	r3, [r0, #4]
 8010328:	6885      	ldr	r5, [r0, #8]
 801032a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801032c:	68c5      	ldr	r5, [r0, #12]
 801032e:	432b      	orrs	r3, r5
 8010330:	6905      	ldr	r5, [r0, #16]
 8010332:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010334:	6945      	ldr	r5, [r0, #20]
 8010336:	432b      	orrs	r3, r5
 8010338:	6985      	ldr	r5, [r0, #24]
 801033a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801033c:	69c5      	ldr	r5, [r0, #28]
 801033e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010340:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010342:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010344:	2300      	movs	r3, #0
 8010346:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010348:	3301      	adds	r3, #1
 801034a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 801034c:	2000      	movs	r0, #0
}  
 801034e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010350:	2001      	movs	r0, #1
 8010352:	e7fc      	b.n	801034e <HAL_DMA_Init+0x4a>
 8010354:	ffffc00f 	.word	0xffffc00f

08010358 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010358:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801035a:	2420      	movs	r4, #32
 801035c:	5d04      	ldrb	r4, [r0, r4]
 801035e:	2c01      	cmp	r4, #1
 8010360:	d02d      	beq.n	80103be <HAL_DMA_Start_IT+0x66>
 8010362:	2601      	movs	r6, #1
 8010364:	2420      	movs	r4, #32
 8010366:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010368:	3401      	adds	r4, #1
 801036a:	2502      	movs	r5, #2
 801036c:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801036e:	6805      	ldr	r5, [r0, #0]
 8010370:	682c      	ldr	r4, [r5, #0]
 8010372:	43b4      	bics	r4, r6
 8010374:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010376:	6804      	ldr	r4, [r0, #0]
 8010378:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801037a:	6843      	ldr	r3, [r0, #4]
 801037c:	2b10      	cmp	r3, #16
 801037e:	d019      	beq.n	80103b4 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010380:	6803      	ldr	r3, [r0, #0]
 8010382:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010384:	6803      	ldr	r3, [r0, #0]
 8010386:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010388:	6802      	ldr	r2, [r0, #0]
 801038a:	6813      	ldr	r3, [r2, #0]
 801038c:	2102      	movs	r1, #2
 801038e:	430b      	orrs	r3, r1
 8010390:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010392:	6802      	ldr	r2, [r0, #0]
 8010394:	6813      	ldr	r3, [r2, #0]
 8010396:	3102      	adds	r1, #2
 8010398:	430b      	orrs	r3, r1
 801039a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801039c:	6802      	ldr	r2, [r0, #0]
 801039e:	6813      	ldr	r3, [r2, #0]
 80103a0:	3104      	adds	r1, #4
 80103a2:	430b      	orrs	r3, r1
 80103a4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80103a6:	6802      	ldr	r2, [r0, #0]
 80103a8:	6813      	ldr	r3, [r2, #0]
 80103aa:	3907      	subs	r1, #7
 80103ac:	430b      	orrs	r3, r1
 80103ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80103b0:	2000      	movs	r0, #0
} 
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80103b4:	6803      	ldr	r3, [r0, #0]
 80103b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80103b8:	6803      	ldr	r3, [r0, #0]
 80103ba:	60d9      	str	r1, [r3, #12]
 80103bc:	e7e4      	b.n	8010388 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 80103be:	2002      	movs	r0, #2
 80103c0:	e7f7      	b.n	80103b2 <HAL_DMA_Start_IT+0x5a>

080103c2 <HAL_DMA_Abort>:
{
 80103c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c4:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80103c6:	6802      	ldr	r2, [r0, #0]
 80103c8:	6813      	ldr	r3, [r2, #0]
 80103ca:	2101      	movs	r1, #1
 80103cc:	438b      	bics	r3, r1
 80103ce:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80103d0:	f7ff fad2 	bl	800f978 <HAL_GetTick>
 80103d4:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80103d6:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80103d8:	26fa      	movs	r6, #250	; 0xfa
 80103da:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	421d      	tst	r5, r3
 80103e2:	d00f      	beq.n	8010404 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80103e4:	f7ff fac8 	bl	800f978 <HAL_GetTick>
 80103e8:	1bc0      	subs	r0, r0, r7
 80103ea:	42b0      	cmp	r0, r6
 80103ec:	d9f6      	bls.n	80103dc <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80103ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103f0:	2220      	movs	r2, #32
 80103f2:	4313      	orrs	r3, r2
 80103f4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80103f6:	2321      	movs	r3, #33	; 0x21
 80103f8:	2103      	movs	r1, #3
 80103fa:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80103fc:	2300      	movs	r3, #0
 80103fe:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010400:	2003      	movs	r0, #3
 8010402:	e006      	b.n	8010412 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010404:	2321      	movs	r3, #33	; 0x21
 8010406:	2201      	movs	r2, #1
 8010408:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801040a:	3b01      	subs	r3, #1
 801040c:	2200      	movs	r2, #0
 801040e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010410:	2000      	movs	r0, #0
}
 8010412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010414 <HAL_DMA_IRQHandler>:
{        
 8010414:	b510      	push	{r4, lr}
 8010416:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010418:	6803      	ldr	r3, [r0, #0]
 801041a:	4ab4      	ldr	r2, [pc, #720]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d94d      	bls.n	80104bc <HAL_DMA_IRQHandler+0xa8>
 8010420:	4ab3      	ldr	r2, [pc, #716]	; (80106f0 <HAL_DMA_IRQHandler+0x2dc>)
 8010422:	6811      	ldr	r1, [r2, #0]
 8010424:	4ab3      	ldr	r2, [pc, #716]	; (80106f4 <HAL_DMA_IRQHandler+0x2e0>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d026      	beq.n	8010478 <HAL_DMA_IRQHandler+0x64>
 801042a:	4ab3      	ldr	r2, [pc, #716]	; (80106f8 <HAL_DMA_IRQHandler+0x2e4>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d02d      	beq.n	801048c <HAL_DMA_IRQHandler+0x78>
 8010430:	4ab2      	ldr	r2, [pc, #712]	; (80106fc <HAL_DMA_IRQHandler+0x2e8>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d02c      	beq.n	8010490 <HAL_DMA_IRQHandler+0x7c>
 8010436:	4ab2      	ldr	r2, [pc, #712]	; (8010700 <HAL_DMA_IRQHandler+0x2ec>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d02c      	beq.n	8010496 <HAL_DMA_IRQHandler+0x82>
 801043c:	4ab1      	ldr	r2, [pc, #708]	; (8010704 <HAL_DMA_IRQHandler+0x2f0>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d02c      	beq.n	801049c <HAL_DMA_IRQHandler+0x88>
 8010442:	4ab1      	ldr	r2, [pc, #708]	; (8010708 <HAL_DMA_IRQHandler+0x2f4>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d02c      	beq.n	80104a2 <HAL_DMA_IRQHandler+0x8e>
 8010448:	4aa8      	ldr	r2, [pc, #672]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d02c      	beq.n	80104a8 <HAL_DMA_IRQHandler+0x94>
 801044e:	4aaf      	ldr	r2, [pc, #700]	; (801070c <HAL_DMA_IRQHandler+0x2f8>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d02c      	beq.n	80104ae <HAL_DMA_IRQHandler+0x9a>
 8010454:	4aae      	ldr	r2, [pc, #696]	; (8010710 <HAL_DMA_IRQHandler+0x2fc>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d02b      	beq.n	80104b2 <HAL_DMA_IRQHandler+0x9e>
 801045a:	4aae      	ldr	r2, [pc, #696]	; (8010714 <HAL_DMA_IRQHandler+0x300>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d02a      	beq.n	80104b6 <HAL_DMA_IRQHandler+0xa2>
 8010460:	4aad      	ldr	r2, [pc, #692]	; (8010718 <HAL_DMA_IRQHandler+0x304>)
 8010462:	189a      	adds	r2, r3, r2
 8010464:	4250      	negs	r0, r2
 8010466:	4142      	adcs	r2, r0
 8010468:	4252      	negs	r2, r2
 801046a:	48ac      	ldr	r0, [pc, #688]	; (801071c <HAL_DMA_IRQHandler+0x308>)
 801046c:	4002      	ands	r2, r0
 801046e:	2080      	movs	r0, #128	; 0x80
 8010470:	0300      	lsls	r0, r0, #12
 8010472:	4684      	mov	ip, r0
 8010474:	4462      	add	r2, ip
 8010476:	e000      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 8010478:	2208      	movs	r2, #8
 801047a:	420a      	tst	r2, r1
 801047c:	d100      	bne.n	8010480 <HAL_DMA_IRQHandler+0x6c>
 801047e:	e0e6      	b.n	801064e <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	0712      	lsls	r2, r2, #28
 8010484:	d500      	bpl.n	8010488 <HAL_DMA_IRQHandler+0x74>
 8010486:	e097      	b.n	80105b8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	e0e0      	b.n	801064e <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801048c:	2280      	movs	r2, #128	; 0x80
 801048e:	e7f4      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 8010490:	2280      	movs	r2, #128	; 0x80
 8010492:	0112      	lsls	r2, r2, #4
 8010494:	e7f1      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 8010496:	2280      	movs	r2, #128	; 0x80
 8010498:	0212      	lsls	r2, r2, #8
 801049a:	e7ee      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 801049c:	2280      	movs	r2, #128	; 0x80
 801049e:	0312      	lsls	r2, r2, #12
 80104a0:	e7eb      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104a2:	2280      	movs	r2, #128	; 0x80
 80104a4:	0412      	lsls	r2, r2, #16
 80104a6:	e7e8      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104a8:	2280      	movs	r2, #128	; 0x80
 80104aa:	0512      	lsls	r2, r2, #20
 80104ac:	e7e5      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104ae:	2208      	movs	r2, #8
 80104b0:	e7e3      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104b2:	2280      	movs	r2, #128	; 0x80
 80104b4:	e7e1      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104b6:	2280      	movs	r2, #128	; 0x80
 80104b8:	0112      	lsls	r2, r2, #4
 80104ba:	e7de      	b.n	801047a <HAL_DMA_IRQHandler+0x66>
 80104bc:	4a98      	ldr	r2, [pc, #608]	; (8010720 <HAL_DMA_IRQHandler+0x30c>)
 80104be:	6811      	ldr	r1, [r2, #0]
 80104c0:	4a8c      	ldr	r2, [pc, #560]	; (80106f4 <HAL_DMA_IRQHandler+0x2e0>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d026      	beq.n	8010514 <HAL_DMA_IRQHandler+0x100>
 80104c6:	4a8c      	ldr	r2, [pc, #560]	; (80106f8 <HAL_DMA_IRQHandler+0x2e4>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d05d      	beq.n	8010588 <HAL_DMA_IRQHandler+0x174>
 80104cc:	4a8b      	ldr	r2, [pc, #556]	; (80106fc <HAL_DMA_IRQHandler+0x2e8>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d05c      	beq.n	801058c <HAL_DMA_IRQHandler+0x178>
 80104d2:	4a8b      	ldr	r2, [pc, #556]	; (8010700 <HAL_DMA_IRQHandler+0x2ec>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d05c      	beq.n	8010592 <HAL_DMA_IRQHandler+0x17e>
 80104d8:	4a8a      	ldr	r2, [pc, #552]	; (8010704 <HAL_DMA_IRQHandler+0x2f0>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d05c      	beq.n	8010598 <HAL_DMA_IRQHandler+0x184>
 80104de:	4a8a      	ldr	r2, [pc, #552]	; (8010708 <HAL_DMA_IRQHandler+0x2f4>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d05c      	beq.n	801059e <HAL_DMA_IRQHandler+0x18a>
 80104e4:	4a81      	ldr	r2, [pc, #516]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d05c      	beq.n	80105a4 <HAL_DMA_IRQHandler+0x190>
 80104ea:	4a88      	ldr	r2, [pc, #544]	; (801070c <HAL_DMA_IRQHandler+0x2f8>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d05c      	beq.n	80105aa <HAL_DMA_IRQHandler+0x196>
 80104f0:	4a87      	ldr	r2, [pc, #540]	; (8010710 <HAL_DMA_IRQHandler+0x2fc>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d05b      	beq.n	80105ae <HAL_DMA_IRQHandler+0x19a>
 80104f6:	4a87      	ldr	r2, [pc, #540]	; (8010714 <HAL_DMA_IRQHandler+0x300>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d05a      	beq.n	80105b2 <HAL_DMA_IRQHandler+0x19e>
 80104fc:	4a86      	ldr	r2, [pc, #536]	; (8010718 <HAL_DMA_IRQHandler+0x304>)
 80104fe:	189a      	adds	r2, r3, r2
 8010500:	4250      	negs	r0, r2
 8010502:	4142      	adcs	r2, r0
 8010504:	4252      	negs	r2, r2
 8010506:	4885      	ldr	r0, [pc, #532]	; (801071c <HAL_DMA_IRQHandler+0x308>)
 8010508:	4002      	ands	r2, r0
 801050a:	2080      	movs	r0, #128	; 0x80
 801050c:	0300      	lsls	r0, r0, #12
 801050e:	4684      	mov	ip, r0
 8010510:	4462      	add	r2, ip
 8010512:	e000      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 8010514:	2208      	movs	r2, #8
 8010516:	420a      	tst	r2, r1
 8010518:	d000      	beq.n	801051c <HAL_DMA_IRQHandler+0x108>
 801051a:	e3ad      	b.n	8010c78 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801051c:	4a80      	ldr	r2, [pc, #512]	; (8010720 <HAL_DMA_IRQHandler+0x30c>)
 801051e:	6811      	ldr	r1, [r2, #0]
 8010520:	4a74      	ldr	r2, [pc, #464]	; (80106f4 <HAL_DMA_IRQHandler+0x2e0>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d100      	bne.n	8010528 <HAL_DMA_IRQHandler+0x114>
 8010526:	e198      	b.n	801085a <HAL_DMA_IRQHandler+0x446>
 8010528:	4a73      	ldr	r2, [pc, #460]	; (80106f8 <HAL_DMA_IRQHandler+0x2e4>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d100      	bne.n	8010530 <HAL_DMA_IRQHandler+0x11c>
 801052e:	e1da      	b.n	80108e6 <HAL_DMA_IRQHandler+0x4d2>
 8010530:	4a72      	ldr	r2, [pc, #456]	; (80106fc <HAL_DMA_IRQHandler+0x2e8>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d100      	bne.n	8010538 <HAL_DMA_IRQHandler+0x124>
 8010536:	e1d8      	b.n	80108ea <HAL_DMA_IRQHandler+0x4d6>
 8010538:	4a71      	ldr	r2, [pc, #452]	; (8010700 <HAL_DMA_IRQHandler+0x2ec>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d100      	bne.n	8010540 <HAL_DMA_IRQHandler+0x12c>
 801053e:	e1d7      	b.n	80108f0 <HAL_DMA_IRQHandler+0x4dc>
 8010540:	4a70      	ldr	r2, [pc, #448]	; (8010704 <HAL_DMA_IRQHandler+0x2f0>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d100      	bne.n	8010548 <HAL_DMA_IRQHandler+0x134>
 8010546:	e1d6      	b.n	80108f6 <HAL_DMA_IRQHandler+0x4e2>
 8010548:	4a6f      	ldr	r2, [pc, #444]	; (8010708 <HAL_DMA_IRQHandler+0x2f4>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d100      	bne.n	8010550 <HAL_DMA_IRQHandler+0x13c>
 801054e:	e1d5      	b.n	80108fc <HAL_DMA_IRQHandler+0x4e8>
 8010550:	4a66      	ldr	r2, [pc, #408]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d100      	bne.n	8010558 <HAL_DMA_IRQHandler+0x144>
 8010556:	e1d4      	b.n	8010902 <HAL_DMA_IRQHandler+0x4ee>
 8010558:	4a6c      	ldr	r2, [pc, #432]	; (801070c <HAL_DMA_IRQHandler+0x2f8>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d100      	bne.n	8010560 <HAL_DMA_IRQHandler+0x14c>
 801055e:	e1d3      	b.n	8010908 <HAL_DMA_IRQHandler+0x4f4>
 8010560:	4a6b      	ldr	r2, [pc, #428]	; (8010710 <HAL_DMA_IRQHandler+0x2fc>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d100      	bne.n	8010568 <HAL_DMA_IRQHandler+0x154>
 8010566:	e1d1      	b.n	801090c <HAL_DMA_IRQHandler+0x4f8>
 8010568:	4a6a      	ldr	r2, [pc, #424]	; (8010714 <HAL_DMA_IRQHandler+0x300>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d100      	bne.n	8010570 <HAL_DMA_IRQHandler+0x15c>
 801056e:	e1cf      	b.n	8010910 <HAL_DMA_IRQHandler+0x4fc>
 8010570:	4a69      	ldr	r2, [pc, #420]	; (8010718 <HAL_DMA_IRQHandler+0x304>)
 8010572:	189a      	adds	r2, r3, r2
 8010574:	4250      	negs	r0, r2
 8010576:	4142      	adcs	r2, r0
 8010578:	4252      	negs	r2, r2
 801057a:	486a      	ldr	r0, [pc, #424]	; (8010724 <HAL_DMA_IRQHandler+0x310>)
 801057c:	4002      	ands	r2, r0
 801057e:	2080      	movs	r0, #128	; 0x80
 8010580:	02c0      	lsls	r0, r0, #11
 8010582:	4684      	mov	ip, r0
 8010584:	4462      	add	r2, ip
 8010586:	e169      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010588:	2280      	movs	r2, #128	; 0x80
 801058a:	e7c4      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 801058c:	2280      	movs	r2, #128	; 0x80
 801058e:	0112      	lsls	r2, r2, #4
 8010590:	e7c1      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 8010592:	2280      	movs	r2, #128	; 0x80
 8010594:	0212      	lsls	r2, r2, #8
 8010596:	e7be      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 8010598:	2280      	movs	r2, #128	; 0x80
 801059a:	0312      	lsls	r2, r2, #12
 801059c:	e7bb      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 801059e:	2280      	movs	r2, #128	; 0x80
 80105a0:	0412      	lsls	r2, r2, #16
 80105a2:	e7b8      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 80105a4:	2280      	movs	r2, #128	; 0x80
 80105a6:	0512      	lsls	r2, r2, #20
 80105a8:	e7b5      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 80105aa:	2208      	movs	r2, #8
 80105ac:	e7b3      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 80105ae:	2280      	movs	r2, #128	; 0x80
 80105b0:	e7b1      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
 80105b2:	2280      	movs	r2, #128	; 0x80
 80105b4:	0112      	lsls	r2, r2, #4
 80105b6:	e7ae      	b.n	8010516 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	2108      	movs	r1, #8
 80105bc:	438a      	bics	r2, r1
 80105be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	4a4a      	ldr	r2, [pc, #296]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d800      	bhi.n	80105ca <HAL_DMA_IRQHandler+0x1b6>
 80105c8:	e0ae      	b.n	8010728 <HAL_DMA_IRQHandler+0x314>
 80105ca:	4a4a      	ldr	r2, [pc, #296]	; (80106f4 <HAL_DMA_IRQHandler+0x2e0>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d027      	beq.n	8010620 <HAL_DMA_IRQHandler+0x20c>
 80105d0:	4a49      	ldr	r2, [pc, #292]	; (80106f8 <HAL_DMA_IRQHandler+0x2e4>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d071      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2a6>
 80105d6:	4a49      	ldr	r2, [pc, #292]	; (80106fc <HAL_DMA_IRQHandler+0x2e8>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d070      	beq.n	80106be <HAL_DMA_IRQHandler+0x2aa>
 80105dc:	4a48      	ldr	r2, [pc, #288]	; (8010700 <HAL_DMA_IRQHandler+0x2ec>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d070      	beq.n	80106c4 <HAL_DMA_IRQHandler+0x2b0>
 80105e2:	4a48      	ldr	r2, [pc, #288]	; (8010704 <HAL_DMA_IRQHandler+0x2f0>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d070      	beq.n	80106ca <HAL_DMA_IRQHandler+0x2b6>
 80105e8:	4a47      	ldr	r2, [pc, #284]	; (8010708 <HAL_DMA_IRQHandler+0x2f4>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d070      	beq.n	80106d0 <HAL_DMA_IRQHandler+0x2bc>
 80105ee:	4a3f      	ldr	r2, [pc, #252]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d070      	beq.n	80106d6 <HAL_DMA_IRQHandler+0x2c2>
 80105f4:	4a45      	ldr	r2, [pc, #276]	; (801070c <HAL_DMA_IRQHandler+0x2f8>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d070      	beq.n	80106dc <HAL_DMA_IRQHandler+0x2c8>
 80105fa:	4a45      	ldr	r2, [pc, #276]	; (8010710 <HAL_DMA_IRQHandler+0x2fc>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d06f      	beq.n	80106e0 <HAL_DMA_IRQHandler+0x2cc>
 8010600:	4a44      	ldr	r2, [pc, #272]	; (8010714 <HAL_DMA_IRQHandler+0x300>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d06e      	beq.n	80106e4 <HAL_DMA_IRQHandler+0x2d0>
 8010606:	4a44      	ldr	r2, [pc, #272]	; (8010718 <HAL_DMA_IRQHandler+0x304>)
 8010608:	4694      	mov	ip, r2
 801060a:	4463      	add	r3, ip
 801060c:	425a      	negs	r2, r3
 801060e:	4153      	adcs	r3, r2
 8010610:	425b      	negs	r3, r3
 8010612:	4a42      	ldr	r2, [pc, #264]	; (801071c <HAL_DMA_IRQHandler+0x308>)
 8010614:	4013      	ands	r3, r2
 8010616:	2280      	movs	r2, #128	; 0x80
 8010618:	0312      	lsls	r2, r2, #12
 801061a:	4694      	mov	ip, r2
 801061c:	4463      	add	r3, ip
 801061e:	e000      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 8010620:	2308      	movs	r3, #8
 8010622:	4a33      	ldr	r2, [pc, #204]	; (80106f0 <HAL_DMA_IRQHandler+0x2dc>)
 8010624:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010628:	2201      	movs	r2, #1
 801062a:	4313      	orrs	r3, r2
 801062c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801062e:	2321      	movs	r3, #33	; 0x21
 8010630:	3203      	adds	r2, #3
 8010632:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010634:	3b01      	subs	r3, #1
 8010636:	2200      	movs	r2, #0
 8010638:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801063a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801063c:	2b00      	cmp	r3, #0
 801063e:	d001      	beq.n	8010644 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8010640:	0020      	movs	r0, r4
 8010642:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010644:	6823      	ldr	r3, [r4, #0]
 8010646:	4a29      	ldr	r2, [pc, #164]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d800      	bhi.n	801064e <HAL_DMA_IRQHandler+0x23a>
 801064c:	e766      	b.n	801051c <HAL_DMA_IRQHandler+0x108>
 801064e:	4a28      	ldr	r2, [pc, #160]	; (80106f0 <HAL_DMA_IRQHandler+0x2dc>)
 8010650:	6811      	ldr	r1, [r2, #0]
 8010652:	4a28      	ldr	r2, [pc, #160]	; (80106f4 <HAL_DMA_IRQHandler+0x2e0>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d100      	bne.n	801065a <HAL_DMA_IRQHandler+0x246>
 8010658:	e0ad      	b.n	80107b6 <HAL_DMA_IRQHandler+0x3a2>
 801065a:	4a27      	ldr	r2, [pc, #156]	; (80106f8 <HAL_DMA_IRQHandler+0x2e4>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d100      	bne.n	8010662 <HAL_DMA_IRQHandler+0x24e>
 8010660:	e0e3      	b.n	801082a <HAL_DMA_IRQHandler+0x416>
 8010662:	4a26      	ldr	r2, [pc, #152]	; (80106fc <HAL_DMA_IRQHandler+0x2e8>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d100      	bne.n	801066a <HAL_DMA_IRQHandler+0x256>
 8010668:	e0e1      	b.n	801082e <HAL_DMA_IRQHandler+0x41a>
 801066a:	4a25      	ldr	r2, [pc, #148]	; (8010700 <HAL_DMA_IRQHandler+0x2ec>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d100      	bne.n	8010672 <HAL_DMA_IRQHandler+0x25e>
 8010670:	e0e0      	b.n	8010834 <HAL_DMA_IRQHandler+0x420>
 8010672:	4a24      	ldr	r2, [pc, #144]	; (8010704 <HAL_DMA_IRQHandler+0x2f0>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d100      	bne.n	801067a <HAL_DMA_IRQHandler+0x266>
 8010678:	e0df      	b.n	801083a <HAL_DMA_IRQHandler+0x426>
 801067a:	4a23      	ldr	r2, [pc, #140]	; (8010708 <HAL_DMA_IRQHandler+0x2f4>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d100      	bne.n	8010682 <HAL_DMA_IRQHandler+0x26e>
 8010680:	e0de      	b.n	8010840 <HAL_DMA_IRQHandler+0x42c>
 8010682:	4a1a      	ldr	r2, [pc, #104]	; (80106ec <HAL_DMA_IRQHandler+0x2d8>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d100      	bne.n	801068a <HAL_DMA_IRQHandler+0x276>
 8010688:	e0dd      	b.n	8010846 <HAL_DMA_IRQHandler+0x432>
 801068a:	4a20      	ldr	r2, [pc, #128]	; (801070c <HAL_DMA_IRQHandler+0x2f8>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d100      	bne.n	8010692 <HAL_DMA_IRQHandler+0x27e>
 8010690:	e0dc      	b.n	801084c <HAL_DMA_IRQHandler+0x438>
 8010692:	4a1f      	ldr	r2, [pc, #124]	; (8010710 <HAL_DMA_IRQHandler+0x2fc>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d100      	bne.n	801069a <HAL_DMA_IRQHandler+0x286>
 8010698:	e0da      	b.n	8010850 <HAL_DMA_IRQHandler+0x43c>
 801069a:	4a1e      	ldr	r2, [pc, #120]	; (8010714 <HAL_DMA_IRQHandler+0x300>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d100      	bne.n	80106a2 <HAL_DMA_IRQHandler+0x28e>
 80106a0:	e0d8      	b.n	8010854 <HAL_DMA_IRQHandler+0x440>
 80106a2:	4a1d      	ldr	r2, [pc, #116]	; (8010718 <HAL_DMA_IRQHandler+0x304>)
 80106a4:	189a      	adds	r2, r3, r2
 80106a6:	4250      	negs	r0, r2
 80106a8:	4142      	adcs	r2, r0
 80106aa:	4252      	negs	r2, r2
 80106ac:	481d      	ldr	r0, [pc, #116]	; (8010724 <HAL_DMA_IRQHandler+0x310>)
 80106ae:	4002      	ands	r2, r0
 80106b0:	2080      	movs	r0, #128	; 0x80
 80106b2:	02c0      	lsls	r0, r0, #11
 80106b4:	4684      	mov	ip, r0
 80106b6:	4462      	add	r2, ip
 80106b8:	e07e      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106ba:	2380      	movs	r3, #128	; 0x80
 80106bc:	e7b1      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106be:	2380      	movs	r3, #128	; 0x80
 80106c0:	011b      	lsls	r3, r3, #4
 80106c2:	e7ae      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106c4:	2380      	movs	r3, #128	; 0x80
 80106c6:	021b      	lsls	r3, r3, #8
 80106c8:	e7ab      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106ca:	2380      	movs	r3, #128	; 0x80
 80106cc:	031b      	lsls	r3, r3, #12
 80106ce:	e7a8      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106d0:	2380      	movs	r3, #128	; 0x80
 80106d2:	041b      	lsls	r3, r3, #16
 80106d4:	e7a5      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106d6:	2380      	movs	r3, #128	; 0x80
 80106d8:	051b      	lsls	r3, r3, #20
 80106da:	e7a2      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106dc:	2308      	movs	r3, #8
 80106de:	e7a0      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106e0:	2380      	movs	r3, #128	; 0x80
 80106e2:	e79e      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106e4:	2380      	movs	r3, #128	; 0x80
 80106e6:	011b      	lsls	r3, r3, #4
 80106e8:	e79b      	b.n	8010622 <HAL_DMA_IRQHandler+0x20e>
 80106ea:	46c0      	nop			; (mov r8, r8)
 80106ec:	40020080 	.word	0x40020080
 80106f0:	40020400 	.word	0x40020400
 80106f4:	40020008 	.word	0x40020008
 80106f8:	4002001c 	.word	0x4002001c
 80106fc:	40020030 	.word	0x40020030
 8010700:	40020044 	.word	0x40020044
 8010704:	40020058 	.word	0x40020058
 8010708:	4002006c 	.word	0x4002006c
 801070c:	40020408 	.word	0x40020408
 8010710:	4002041c 	.word	0x4002041c
 8010714:	40020430 	.word	0x40020430
 8010718:	bffdfbbc 	.word	0xbffdfbbc
 801071c:	fff88000 	.word	0xfff88000
 8010720:	40020000 	.word	0x40020000
 8010724:	fffc4000 	.word	0xfffc4000
 8010728:	4aaa      	ldr	r2, [pc, #680]	; (80109d4 <HAL_DMA_IRQHandler+0x5c0>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d027      	beq.n	801077e <HAL_DMA_IRQHandler+0x36a>
 801072e:	4aaa      	ldr	r2, [pc, #680]	; (80109d8 <HAL_DMA_IRQHandler+0x5c4>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d028      	beq.n	8010786 <HAL_DMA_IRQHandler+0x372>
 8010734:	4aa9      	ldr	r2, [pc, #676]	; (80109dc <HAL_DMA_IRQHandler+0x5c8>)
 8010736:	4293      	cmp	r3, r2
 8010738:	d027      	beq.n	801078a <HAL_DMA_IRQHandler+0x376>
 801073a:	4aa9      	ldr	r2, [pc, #676]	; (80109e0 <HAL_DMA_IRQHandler+0x5cc>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d027      	beq.n	8010790 <HAL_DMA_IRQHandler+0x37c>
 8010740:	4aa8      	ldr	r2, [pc, #672]	; (80109e4 <HAL_DMA_IRQHandler+0x5d0>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d027      	beq.n	8010796 <HAL_DMA_IRQHandler+0x382>
 8010746:	4aa8      	ldr	r2, [pc, #672]	; (80109e8 <HAL_DMA_IRQHandler+0x5d4>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d027      	beq.n	801079c <HAL_DMA_IRQHandler+0x388>
 801074c:	4aa7      	ldr	r2, [pc, #668]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d027      	beq.n	80107a2 <HAL_DMA_IRQHandler+0x38e>
 8010752:	4aa7      	ldr	r2, [pc, #668]	; (80109f0 <HAL_DMA_IRQHandler+0x5dc>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d027      	beq.n	80107a8 <HAL_DMA_IRQHandler+0x394>
 8010758:	4aa6      	ldr	r2, [pc, #664]	; (80109f4 <HAL_DMA_IRQHandler+0x5e0>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d026      	beq.n	80107ac <HAL_DMA_IRQHandler+0x398>
 801075e:	4aa6      	ldr	r2, [pc, #664]	; (80109f8 <HAL_DMA_IRQHandler+0x5e4>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d025      	beq.n	80107b0 <HAL_DMA_IRQHandler+0x39c>
 8010764:	4aa5      	ldr	r2, [pc, #660]	; (80109fc <HAL_DMA_IRQHandler+0x5e8>)
 8010766:	4694      	mov	ip, r2
 8010768:	4463      	add	r3, ip
 801076a:	425a      	negs	r2, r3
 801076c:	4153      	adcs	r3, r2
 801076e:	425b      	negs	r3, r3
 8010770:	4aa3      	ldr	r2, [pc, #652]	; (8010a00 <HAL_DMA_IRQHandler+0x5ec>)
 8010772:	4013      	ands	r3, r2
 8010774:	2280      	movs	r2, #128	; 0x80
 8010776:	0312      	lsls	r2, r2, #12
 8010778:	4694      	mov	ip, r2
 801077a:	4463      	add	r3, ip
 801077c:	e000      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 801077e:	2308      	movs	r3, #8
 8010780:	4aa0      	ldr	r2, [pc, #640]	; (8010a04 <HAL_DMA_IRQHandler+0x5f0>)
 8010782:	6053      	str	r3, [r2, #4]
 8010784:	e74f      	b.n	8010626 <HAL_DMA_IRQHandler+0x212>
 8010786:	2380      	movs	r3, #128	; 0x80
 8010788:	e7fa      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 801078a:	2380      	movs	r3, #128	; 0x80
 801078c:	011b      	lsls	r3, r3, #4
 801078e:	e7f7      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 8010790:	2380      	movs	r3, #128	; 0x80
 8010792:	021b      	lsls	r3, r3, #8
 8010794:	e7f4      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 8010796:	2380      	movs	r3, #128	; 0x80
 8010798:	031b      	lsls	r3, r3, #12
 801079a:	e7f1      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 801079c:	2380      	movs	r3, #128	; 0x80
 801079e:	041b      	lsls	r3, r3, #16
 80107a0:	e7ee      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 80107a2:	2380      	movs	r3, #128	; 0x80
 80107a4:	051b      	lsls	r3, r3, #20
 80107a6:	e7eb      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 80107a8:	2308      	movs	r3, #8
 80107aa:	e7e9      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 80107ac:	2380      	movs	r3, #128	; 0x80
 80107ae:	e7e7      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
 80107b0:	2380      	movs	r3, #128	; 0x80
 80107b2:	011b      	lsls	r3, r3, #4
 80107b4:	e7e4      	b.n	8010780 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107b6:	2204      	movs	r2, #4
 80107b8:	420a      	tst	r2, r1
 80107ba:	d152      	bne.n	8010862 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80107bc:	6821      	ldr	r1, [r4, #0]
 80107be:	4b92      	ldr	r3, [pc, #584]	; (8010a08 <HAL_DMA_IRQHandler+0x5f4>)
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	4a84      	ldr	r2, [pc, #528]	; (80109d4 <HAL_DMA_IRQHandler+0x5c0>)
 80107c4:	4291      	cmp	r1, r2
 80107c6:	d100      	bne.n	80107ca <HAL_DMA_IRQHandler+0x3b6>
 80107c8:	e16b      	b.n	8010aa2 <HAL_DMA_IRQHandler+0x68e>
 80107ca:	4a83      	ldr	r2, [pc, #524]	; (80109d8 <HAL_DMA_IRQHandler+0x5c4>)
 80107cc:	4291      	cmp	r1, r2
 80107ce:	d100      	bne.n	80107d2 <HAL_DMA_IRQHandler+0x3be>
 80107d0:	e1aa      	b.n	8010b28 <HAL_DMA_IRQHandler+0x714>
 80107d2:	4a82      	ldr	r2, [pc, #520]	; (80109dc <HAL_DMA_IRQHandler+0x5c8>)
 80107d4:	4291      	cmp	r1, r2
 80107d6:	d100      	bne.n	80107da <HAL_DMA_IRQHandler+0x3c6>
 80107d8:	e1a8      	b.n	8010b2c <HAL_DMA_IRQHandler+0x718>
 80107da:	4a81      	ldr	r2, [pc, #516]	; (80109e0 <HAL_DMA_IRQHandler+0x5cc>)
 80107dc:	4291      	cmp	r1, r2
 80107de:	d100      	bne.n	80107e2 <HAL_DMA_IRQHandler+0x3ce>
 80107e0:	e1a7      	b.n	8010b32 <HAL_DMA_IRQHandler+0x71e>
 80107e2:	4b80      	ldr	r3, [pc, #512]	; (80109e4 <HAL_DMA_IRQHandler+0x5d0>)
 80107e4:	4299      	cmp	r1, r3
 80107e6:	d100      	bne.n	80107ea <HAL_DMA_IRQHandler+0x3d6>
 80107e8:	e1a6      	b.n	8010b38 <HAL_DMA_IRQHandler+0x724>
 80107ea:	4b7f      	ldr	r3, [pc, #508]	; (80109e8 <HAL_DMA_IRQHandler+0x5d4>)
 80107ec:	4299      	cmp	r1, r3
 80107ee:	d100      	bne.n	80107f2 <HAL_DMA_IRQHandler+0x3de>
 80107f0:	e1a5      	b.n	8010b3e <HAL_DMA_IRQHandler+0x72a>
 80107f2:	4b7e      	ldr	r3, [pc, #504]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 80107f4:	4299      	cmp	r1, r3
 80107f6:	d100      	bne.n	80107fa <HAL_DMA_IRQHandler+0x3e6>
 80107f8:	e1a4      	b.n	8010b44 <HAL_DMA_IRQHandler+0x730>
 80107fa:	4b7d      	ldr	r3, [pc, #500]	; (80109f0 <HAL_DMA_IRQHandler+0x5dc>)
 80107fc:	4299      	cmp	r1, r3
 80107fe:	d100      	bne.n	8010802 <HAL_DMA_IRQHandler+0x3ee>
 8010800:	e1a3      	b.n	8010b4a <HAL_DMA_IRQHandler+0x736>
 8010802:	4b7c      	ldr	r3, [pc, #496]	; (80109f4 <HAL_DMA_IRQHandler+0x5e0>)
 8010804:	4299      	cmp	r1, r3
 8010806:	d100      	bne.n	801080a <HAL_DMA_IRQHandler+0x3f6>
 8010808:	e1a1      	b.n	8010b4e <HAL_DMA_IRQHandler+0x73a>
 801080a:	4b7b      	ldr	r3, [pc, #492]	; (80109f8 <HAL_DMA_IRQHandler+0x5e4>)
 801080c:	4299      	cmp	r1, r3
 801080e:	d100      	bne.n	8010812 <HAL_DMA_IRQHandler+0x3fe>
 8010810:	e19f      	b.n	8010b52 <HAL_DMA_IRQHandler+0x73e>
 8010812:	4b7a      	ldr	r3, [pc, #488]	; (80109fc <HAL_DMA_IRQHandler+0x5e8>)
 8010814:	18ca      	adds	r2, r1, r3
 8010816:	4253      	negs	r3, r2
 8010818:	415a      	adcs	r2, r3
 801081a:	4252      	negs	r2, r2
 801081c:	4b7b      	ldr	r3, [pc, #492]	; (8010a0c <HAL_DMA_IRQHandler+0x5f8>)
 801081e:	4013      	ands	r3, r2
 8010820:	2280      	movs	r2, #128	; 0x80
 8010822:	0292      	lsls	r2, r2, #10
 8010824:	4694      	mov	ip, r2
 8010826:	4463      	add	r3, ip
 8010828:	e13c      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801082a:	2240      	movs	r2, #64	; 0x40
 801082c:	e7c4      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 801082e:	2280      	movs	r2, #128	; 0x80
 8010830:	00d2      	lsls	r2, r2, #3
 8010832:	e7c1      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 8010834:	2280      	movs	r2, #128	; 0x80
 8010836:	01d2      	lsls	r2, r2, #7
 8010838:	e7be      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 801083a:	2280      	movs	r2, #128	; 0x80
 801083c:	02d2      	lsls	r2, r2, #11
 801083e:	e7bb      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 8010840:	2280      	movs	r2, #128	; 0x80
 8010842:	03d2      	lsls	r2, r2, #15
 8010844:	e7b8      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 8010846:	2280      	movs	r2, #128	; 0x80
 8010848:	04d2      	lsls	r2, r2, #19
 801084a:	e7b5      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 801084c:	2204      	movs	r2, #4
 801084e:	e7b3      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 8010850:	2240      	movs	r2, #64	; 0x40
 8010852:	e7b1      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 8010854:	2280      	movs	r2, #128	; 0x80
 8010856:	00d2      	lsls	r2, r2, #3
 8010858:	e7ae      	b.n	80107b8 <HAL_DMA_IRQHandler+0x3a4>
 801085a:	2204      	movs	r2, #4
 801085c:	420a      	tst	r2, r1
 801085e:	d100      	bne.n	8010862 <HAL_DMA_IRQHandler+0x44e>
 8010860:	e208      	b.n	8010c74 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	0752      	lsls	r2, r2, #29
 8010866:	d561      	bpl.n	801092c <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	0692      	lsls	r2, r2, #26
 801086c:	d403      	bmi.n	8010876 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	2104      	movs	r1, #4
 8010872:	438a      	bics	r2, r1
 8010874:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	4a5c      	ldr	r2, [pc, #368]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d800      	bhi.n	8010880 <HAL_DMA_IRQHandler+0x46c>
 801087e:	e0c9      	b.n	8010a14 <HAL_DMA_IRQHandler+0x600>
 8010880:	4a54      	ldr	r2, [pc, #336]	; (80109d4 <HAL_DMA_IRQHandler+0x5c0>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d047      	beq.n	8010916 <HAL_DMA_IRQHandler+0x502>
 8010886:	4a54      	ldr	r2, [pc, #336]	; (80109d8 <HAL_DMA_IRQHandler+0x5c4>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d100      	bne.n	801088e <HAL_DMA_IRQHandler+0x47a>
 801088c:	e089      	b.n	80109a2 <HAL_DMA_IRQHandler+0x58e>
 801088e:	4a53      	ldr	r2, [pc, #332]	; (80109dc <HAL_DMA_IRQHandler+0x5c8>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d100      	bne.n	8010896 <HAL_DMA_IRQHandler+0x482>
 8010894:	e087      	b.n	80109a6 <HAL_DMA_IRQHandler+0x592>
 8010896:	4a52      	ldr	r2, [pc, #328]	; (80109e0 <HAL_DMA_IRQHandler+0x5cc>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d100      	bne.n	801089e <HAL_DMA_IRQHandler+0x48a>
 801089c:	e086      	b.n	80109ac <HAL_DMA_IRQHandler+0x598>
 801089e:	4a51      	ldr	r2, [pc, #324]	; (80109e4 <HAL_DMA_IRQHandler+0x5d0>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d100      	bne.n	80108a6 <HAL_DMA_IRQHandler+0x492>
 80108a4:	e085      	b.n	80109b2 <HAL_DMA_IRQHandler+0x59e>
 80108a6:	4a50      	ldr	r2, [pc, #320]	; (80109e8 <HAL_DMA_IRQHandler+0x5d4>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d100      	bne.n	80108ae <HAL_DMA_IRQHandler+0x49a>
 80108ac:	e084      	b.n	80109b8 <HAL_DMA_IRQHandler+0x5a4>
 80108ae:	4a4f      	ldr	r2, [pc, #316]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d100      	bne.n	80108b6 <HAL_DMA_IRQHandler+0x4a2>
 80108b4:	e083      	b.n	80109be <HAL_DMA_IRQHandler+0x5aa>
 80108b6:	4a4e      	ldr	r2, [pc, #312]	; (80109f0 <HAL_DMA_IRQHandler+0x5dc>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d100      	bne.n	80108be <HAL_DMA_IRQHandler+0x4aa>
 80108bc:	e082      	b.n	80109c4 <HAL_DMA_IRQHandler+0x5b0>
 80108be:	4a4d      	ldr	r2, [pc, #308]	; (80109f4 <HAL_DMA_IRQHandler+0x5e0>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d100      	bne.n	80108c6 <HAL_DMA_IRQHandler+0x4b2>
 80108c4:	e080      	b.n	80109c8 <HAL_DMA_IRQHandler+0x5b4>
 80108c6:	4a4c      	ldr	r2, [pc, #304]	; (80109f8 <HAL_DMA_IRQHandler+0x5e4>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d07f      	beq.n	80109cc <HAL_DMA_IRQHandler+0x5b8>
 80108cc:	4a4b      	ldr	r2, [pc, #300]	; (80109fc <HAL_DMA_IRQHandler+0x5e8>)
 80108ce:	4694      	mov	ip, r2
 80108d0:	4463      	add	r3, ip
 80108d2:	425a      	negs	r2, r3
 80108d4:	4153      	adcs	r3, r2
 80108d6:	425b      	negs	r3, r3
 80108d8:	4a4d      	ldr	r2, [pc, #308]	; (8010a10 <HAL_DMA_IRQHandler+0x5fc>)
 80108da:	4013      	ands	r3, r2
 80108dc:	2280      	movs	r2, #128	; 0x80
 80108de:	02d2      	lsls	r2, r2, #11
 80108e0:	4694      	mov	ip, r2
 80108e2:	4463      	add	r3, ip
 80108e4:	e018      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108e6:	2240      	movs	r2, #64	; 0x40
 80108e8:	e7b8      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 80108ea:	2280      	movs	r2, #128	; 0x80
 80108ec:	00d2      	lsls	r2, r2, #3
 80108ee:	e7b5      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 80108f0:	2280      	movs	r2, #128	; 0x80
 80108f2:	01d2      	lsls	r2, r2, #7
 80108f4:	e7b2      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 80108f6:	2280      	movs	r2, #128	; 0x80
 80108f8:	02d2      	lsls	r2, r2, #11
 80108fa:	e7af      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 80108fc:	2280      	movs	r2, #128	; 0x80
 80108fe:	03d2      	lsls	r2, r2, #15
 8010900:	e7ac      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 8010902:	2280      	movs	r2, #128	; 0x80
 8010904:	04d2      	lsls	r2, r2, #19
 8010906:	e7a9      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 8010908:	2204      	movs	r2, #4
 801090a:	e7a7      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 801090c:	2240      	movs	r2, #64	; 0x40
 801090e:	e7a5      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
 8010910:	2280      	movs	r2, #128	; 0x80
 8010912:	00d2      	lsls	r2, r2, #3
 8010914:	e7a2      	b.n	801085c <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010916:	2304      	movs	r3, #4
 8010918:	4a3b      	ldr	r2, [pc, #236]	; (8010a08 <HAL_DMA_IRQHandler+0x5f4>)
 801091a:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801091c:	2321      	movs	r3, #33	; 0x21
 801091e:	2211      	movs	r2, #17
 8010920:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010924:	2b00      	cmp	r3, #0
 8010926:	d001      	beq.n	801092c <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8010928:	0020      	movs	r0, r4
 801092a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801092c:	6821      	ldr	r1, [r4, #0]
 801092e:	4b2f      	ldr	r3, [pc, #188]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 8010930:	4299      	cmp	r1, r3
 8010932:	d900      	bls.n	8010936 <HAL_DMA_IRQHandler+0x522>
 8010934:	e743      	b.n	80107be <HAL_DMA_IRQHandler+0x3aa>
 8010936:	4b33      	ldr	r3, [pc, #204]	; (8010a04 <HAL_DMA_IRQHandler+0x5f0>)
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	4a26      	ldr	r2, [pc, #152]	; (80109d4 <HAL_DMA_IRQHandler+0x5c0>)
 801093c:	4291      	cmp	r1, r2
 801093e:	d100      	bne.n	8010942 <HAL_DMA_IRQHandler+0x52e>
 8010940:	e10a      	b.n	8010b58 <HAL_DMA_IRQHandler+0x744>
 8010942:	4a25      	ldr	r2, [pc, #148]	; (80109d8 <HAL_DMA_IRQHandler+0x5c4>)
 8010944:	4291      	cmp	r1, r2
 8010946:	d100      	bne.n	801094a <HAL_DMA_IRQHandler+0x536>
 8010948:	e10c      	b.n	8010b64 <HAL_DMA_IRQHandler+0x750>
 801094a:	4a24      	ldr	r2, [pc, #144]	; (80109dc <HAL_DMA_IRQHandler+0x5c8>)
 801094c:	4291      	cmp	r1, r2
 801094e:	d100      	bne.n	8010952 <HAL_DMA_IRQHandler+0x53e>
 8010950:	e10a      	b.n	8010b68 <HAL_DMA_IRQHandler+0x754>
 8010952:	4a23      	ldr	r2, [pc, #140]	; (80109e0 <HAL_DMA_IRQHandler+0x5cc>)
 8010954:	4291      	cmp	r1, r2
 8010956:	d100      	bne.n	801095a <HAL_DMA_IRQHandler+0x546>
 8010958:	e109      	b.n	8010b6e <HAL_DMA_IRQHandler+0x75a>
 801095a:	4b22      	ldr	r3, [pc, #136]	; (80109e4 <HAL_DMA_IRQHandler+0x5d0>)
 801095c:	4299      	cmp	r1, r3
 801095e:	d100      	bne.n	8010962 <HAL_DMA_IRQHandler+0x54e>
 8010960:	e108      	b.n	8010b74 <HAL_DMA_IRQHandler+0x760>
 8010962:	4b21      	ldr	r3, [pc, #132]	; (80109e8 <HAL_DMA_IRQHandler+0x5d4>)
 8010964:	4299      	cmp	r1, r3
 8010966:	d100      	bne.n	801096a <HAL_DMA_IRQHandler+0x556>
 8010968:	e107      	b.n	8010b7a <HAL_DMA_IRQHandler+0x766>
 801096a:	4b20      	ldr	r3, [pc, #128]	; (80109ec <HAL_DMA_IRQHandler+0x5d8>)
 801096c:	4299      	cmp	r1, r3
 801096e:	d100      	bne.n	8010972 <HAL_DMA_IRQHandler+0x55e>
 8010970:	e106      	b.n	8010b80 <HAL_DMA_IRQHandler+0x76c>
 8010972:	4b1f      	ldr	r3, [pc, #124]	; (80109f0 <HAL_DMA_IRQHandler+0x5dc>)
 8010974:	4299      	cmp	r1, r3
 8010976:	d100      	bne.n	801097a <HAL_DMA_IRQHandler+0x566>
 8010978:	e105      	b.n	8010b86 <HAL_DMA_IRQHandler+0x772>
 801097a:	4b1e      	ldr	r3, [pc, #120]	; (80109f4 <HAL_DMA_IRQHandler+0x5e0>)
 801097c:	4299      	cmp	r1, r3
 801097e:	d100      	bne.n	8010982 <HAL_DMA_IRQHandler+0x56e>
 8010980:	e103      	b.n	8010b8a <HAL_DMA_IRQHandler+0x776>
 8010982:	4b1d      	ldr	r3, [pc, #116]	; (80109f8 <HAL_DMA_IRQHandler+0x5e4>)
 8010984:	4299      	cmp	r1, r3
 8010986:	d100      	bne.n	801098a <HAL_DMA_IRQHandler+0x576>
 8010988:	e101      	b.n	8010b8e <HAL_DMA_IRQHandler+0x77a>
 801098a:	4b1c      	ldr	r3, [pc, #112]	; (80109fc <HAL_DMA_IRQHandler+0x5e8>)
 801098c:	18ca      	adds	r2, r1, r3
 801098e:	4253      	negs	r3, r2
 8010990:	415a      	adcs	r2, r3
 8010992:	4252      	negs	r2, r2
 8010994:	4b1d      	ldr	r3, [pc, #116]	; (8010a0c <HAL_DMA_IRQHandler+0x5f8>)
 8010996:	4013      	ands	r3, r2
 8010998:	2280      	movs	r2, #128	; 0x80
 801099a:	0292      	lsls	r2, r2, #10
 801099c:	4694      	mov	ip, r2
 801099e:	4463      	add	r3, ip
 80109a0:	e0db      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80109a2:	2340      	movs	r3, #64	; 0x40
 80109a4:	e7b8      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109a6:	2380      	movs	r3, #128	; 0x80
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	e7b5      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109ac:	2380      	movs	r3, #128	; 0x80
 80109ae:	01db      	lsls	r3, r3, #7
 80109b0:	e7b2      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109b2:	2380      	movs	r3, #128	; 0x80
 80109b4:	02db      	lsls	r3, r3, #11
 80109b6:	e7af      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109b8:	2380      	movs	r3, #128	; 0x80
 80109ba:	03db      	lsls	r3, r3, #15
 80109bc:	e7ac      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109be:	2380      	movs	r3, #128	; 0x80
 80109c0:	04db      	lsls	r3, r3, #19
 80109c2:	e7a9      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109c4:	2304      	movs	r3, #4
 80109c6:	e7a7      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109c8:	2340      	movs	r3, #64	; 0x40
 80109ca:	e7a5      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109cc:	2380      	movs	r3, #128	; 0x80
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	e7a2      	b.n	8010918 <HAL_DMA_IRQHandler+0x504>
 80109d2:	46c0      	nop			; (mov r8, r8)
 80109d4:	40020008 	.word	0x40020008
 80109d8:	4002001c 	.word	0x4002001c
 80109dc:	40020030 	.word	0x40020030
 80109e0:	40020044 	.word	0x40020044
 80109e4:	40020058 	.word	0x40020058
 80109e8:	4002006c 	.word	0x4002006c
 80109ec:	40020080 	.word	0x40020080
 80109f0:	40020408 	.word	0x40020408
 80109f4:	4002041c 	.word	0x4002041c
 80109f8:	40020430 	.word	0x40020430
 80109fc:	bffdfbbc 	.word	0xbffdfbbc
 8010a00:	fff88000 	.word	0xfff88000
 8010a04:	40020000 	.word	0x40020000
 8010a08:	40020400 	.word	0x40020400
 8010a0c:	fffe2000 	.word	0xfffe2000
 8010a10:	fffc4000 	.word	0xfffc4000
 8010a14:	4a9b      	ldr	r2, [pc, #620]	; (8010c84 <HAL_DMA_IRQHandler+0x870>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d027      	beq.n	8010a6a <HAL_DMA_IRQHandler+0x656>
 8010a1a:	4a9b      	ldr	r2, [pc, #620]	; (8010c88 <HAL_DMA_IRQHandler+0x874>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d028      	beq.n	8010a72 <HAL_DMA_IRQHandler+0x65e>
 8010a20:	4a9a      	ldr	r2, [pc, #616]	; (8010c8c <HAL_DMA_IRQHandler+0x878>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d027      	beq.n	8010a76 <HAL_DMA_IRQHandler+0x662>
 8010a26:	4a9a      	ldr	r2, [pc, #616]	; (8010c90 <HAL_DMA_IRQHandler+0x87c>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d027      	beq.n	8010a7c <HAL_DMA_IRQHandler+0x668>
 8010a2c:	4a99      	ldr	r2, [pc, #612]	; (8010c94 <HAL_DMA_IRQHandler+0x880>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d027      	beq.n	8010a82 <HAL_DMA_IRQHandler+0x66e>
 8010a32:	4a99      	ldr	r2, [pc, #612]	; (8010c98 <HAL_DMA_IRQHandler+0x884>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d027      	beq.n	8010a88 <HAL_DMA_IRQHandler+0x674>
 8010a38:	4a98      	ldr	r2, [pc, #608]	; (8010c9c <HAL_DMA_IRQHandler+0x888>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d027      	beq.n	8010a8e <HAL_DMA_IRQHandler+0x67a>
 8010a3e:	4a98      	ldr	r2, [pc, #608]	; (8010ca0 <HAL_DMA_IRQHandler+0x88c>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d027      	beq.n	8010a94 <HAL_DMA_IRQHandler+0x680>
 8010a44:	4a97      	ldr	r2, [pc, #604]	; (8010ca4 <HAL_DMA_IRQHandler+0x890>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d026      	beq.n	8010a98 <HAL_DMA_IRQHandler+0x684>
 8010a4a:	4a97      	ldr	r2, [pc, #604]	; (8010ca8 <HAL_DMA_IRQHandler+0x894>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d025      	beq.n	8010a9c <HAL_DMA_IRQHandler+0x688>
 8010a50:	4a96      	ldr	r2, [pc, #600]	; (8010cac <HAL_DMA_IRQHandler+0x898>)
 8010a52:	4694      	mov	ip, r2
 8010a54:	4463      	add	r3, ip
 8010a56:	425a      	negs	r2, r3
 8010a58:	4153      	adcs	r3, r2
 8010a5a:	425b      	negs	r3, r3
 8010a5c:	4a94      	ldr	r2, [pc, #592]	; (8010cb0 <HAL_DMA_IRQHandler+0x89c>)
 8010a5e:	4013      	ands	r3, r2
 8010a60:	2280      	movs	r2, #128	; 0x80
 8010a62:	02d2      	lsls	r2, r2, #11
 8010a64:	4694      	mov	ip, r2
 8010a66:	4463      	add	r3, ip
 8010a68:	e000      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a6a:	2304      	movs	r3, #4
 8010a6c:	4a91      	ldr	r2, [pc, #580]	; (8010cb4 <HAL_DMA_IRQHandler+0x8a0>)
 8010a6e:	6053      	str	r3, [r2, #4]
 8010a70:	e754      	b.n	801091c <HAL_DMA_IRQHandler+0x508>
 8010a72:	2340      	movs	r3, #64	; 0x40
 8010a74:	e7fa      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a76:	2380      	movs	r3, #128	; 0x80
 8010a78:	00db      	lsls	r3, r3, #3
 8010a7a:	e7f7      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a7c:	2380      	movs	r3, #128	; 0x80
 8010a7e:	01db      	lsls	r3, r3, #7
 8010a80:	e7f4      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a82:	2380      	movs	r3, #128	; 0x80
 8010a84:	02db      	lsls	r3, r3, #11
 8010a86:	e7f1      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a88:	2380      	movs	r3, #128	; 0x80
 8010a8a:	03db      	lsls	r3, r3, #15
 8010a8c:	e7ee      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a8e:	2380      	movs	r3, #128	; 0x80
 8010a90:	04db      	lsls	r3, r3, #19
 8010a92:	e7eb      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a94:	2304      	movs	r3, #4
 8010a96:	e7e9      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a98:	2340      	movs	r3, #64	; 0x40
 8010a9a:	e7e7      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
 8010a9c:	2380      	movs	r3, #128	; 0x80
 8010a9e:	00db      	lsls	r3, r3, #3
 8010aa0:	e7e4      	b.n	8010a6c <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	4003      	ands	r3, r0
 8010aa6:	1e5a      	subs	r2, r3, #1
 8010aa8:	4193      	sbcs	r3, r2
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d100      	bne.n	8010ab2 <HAL_DMA_IRQHandler+0x69e>
 8010ab0:	e080      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010ab2:	680b      	ldr	r3, [r1, #0]
 8010ab4:	079b      	lsls	r3, r3, #30
 8010ab6:	d57d      	bpl.n	8010bb4 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010ab8:	680b      	ldr	r3, [r1, #0]
 8010aba:	069b      	lsls	r3, r3, #26
 8010abc:	d403      	bmi.n	8010ac6 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010abe:	680b      	ldr	r3, [r1, #0]
 8010ac0:	2202      	movs	r2, #2
 8010ac2:	4393      	bics	r3, r2
 8010ac4:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	4a74      	ldr	r2, [pc, #464]	; (8010c9c <HAL_DMA_IRQHandler+0x888>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d800      	bhi.n	8010ad0 <HAL_DMA_IRQHandler+0x6bc>
 8010ace:	e08a      	b.n	8010be6 <HAL_DMA_IRQHandler+0x7d2>
 8010ad0:	4a6c      	ldr	r2, [pc, #432]	; (8010c84 <HAL_DMA_IRQHandler+0x870>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d05e      	beq.n	8010b94 <HAL_DMA_IRQHandler+0x780>
 8010ad6:	4a6c      	ldr	r2, [pc, #432]	; (8010c88 <HAL_DMA_IRQHandler+0x874>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d100      	bne.n	8010ade <HAL_DMA_IRQHandler+0x6ca>
 8010adc:	e06b      	b.n	8010bb6 <HAL_DMA_IRQHandler+0x7a2>
 8010ade:	4a6b      	ldr	r2, [pc, #428]	; (8010c8c <HAL_DMA_IRQHandler+0x878>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d06a      	beq.n	8010bba <HAL_DMA_IRQHandler+0x7a6>
 8010ae4:	4a6a      	ldr	r2, [pc, #424]	; (8010c90 <HAL_DMA_IRQHandler+0x87c>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d06a      	beq.n	8010bc0 <HAL_DMA_IRQHandler+0x7ac>
 8010aea:	4a6a      	ldr	r2, [pc, #424]	; (8010c94 <HAL_DMA_IRQHandler+0x880>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d06a      	beq.n	8010bc6 <HAL_DMA_IRQHandler+0x7b2>
 8010af0:	4a69      	ldr	r2, [pc, #420]	; (8010c98 <HAL_DMA_IRQHandler+0x884>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d06a      	beq.n	8010bcc <HAL_DMA_IRQHandler+0x7b8>
 8010af6:	4a69      	ldr	r2, [pc, #420]	; (8010c9c <HAL_DMA_IRQHandler+0x888>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d06a      	beq.n	8010bd2 <HAL_DMA_IRQHandler+0x7be>
 8010afc:	4a68      	ldr	r2, [pc, #416]	; (8010ca0 <HAL_DMA_IRQHandler+0x88c>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d06a      	beq.n	8010bd8 <HAL_DMA_IRQHandler+0x7c4>
 8010b02:	4a68      	ldr	r2, [pc, #416]	; (8010ca4 <HAL_DMA_IRQHandler+0x890>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d069      	beq.n	8010bdc <HAL_DMA_IRQHandler+0x7c8>
 8010b08:	4a67      	ldr	r2, [pc, #412]	; (8010ca8 <HAL_DMA_IRQHandler+0x894>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d068      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x7cc>
 8010b0e:	4a67      	ldr	r2, [pc, #412]	; (8010cac <HAL_DMA_IRQHandler+0x898>)
 8010b10:	4694      	mov	ip, r2
 8010b12:	4463      	add	r3, ip
 8010b14:	425a      	negs	r2, r3
 8010b16:	4153      	adcs	r3, r2
 8010b18:	425b      	negs	r3, r3
 8010b1a:	4a67      	ldr	r2, [pc, #412]	; (8010cb8 <HAL_DMA_IRQHandler+0x8a4>)
 8010b1c:	4013      	ands	r3, r2
 8010b1e:	2280      	movs	r2, #128	; 0x80
 8010b20:	0292      	lsls	r2, r2, #10
 8010b22:	4694      	mov	ip, r2
 8010b24:	4463      	add	r3, ip
 8010b26:	e036      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b28:	2320      	movs	r3, #32
 8010b2a:	e7bb      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b2c:	2380      	movs	r3, #128	; 0x80
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	e7b8      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b32:	2380      	movs	r3, #128	; 0x80
 8010b34:	019b      	lsls	r3, r3, #6
 8010b36:	e7b5      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b38:	2380      	movs	r3, #128	; 0x80
 8010b3a:	029b      	lsls	r3, r3, #10
 8010b3c:	e7b2      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b3e:	2380      	movs	r3, #128	; 0x80
 8010b40:	039b      	lsls	r3, r3, #14
 8010b42:	e7af      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b44:	2380      	movs	r3, #128	; 0x80
 8010b46:	049b      	lsls	r3, r3, #18
 8010b48:	e7ac      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	e7aa      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b4e:	2320      	movs	r3, #32
 8010b50:	e7a8      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b52:	2380      	movs	r3, #128	; 0x80
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	e7a5      	b.n	8010aa4 <HAL_DMA_IRQHandler+0x690>
 8010b58:	2302      	movs	r3, #2
 8010b5a:	4003      	ands	r3, r0
 8010b5c:	1e5a      	subs	r2, r3, #1
 8010b5e:	4193      	sbcs	r3, r2
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	e7a3      	b.n	8010aac <HAL_DMA_IRQHandler+0x698>
 8010b64:	2320      	movs	r3, #32
 8010b66:	e7f8      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b68:	2380      	movs	r3, #128	; 0x80
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	e7f5      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b6e:	2380      	movs	r3, #128	; 0x80
 8010b70:	019b      	lsls	r3, r3, #6
 8010b72:	e7f2      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b74:	2380      	movs	r3, #128	; 0x80
 8010b76:	029b      	lsls	r3, r3, #10
 8010b78:	e7ef      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b7a:	2380      	movs	r3, #128	; 0x80
 8010b7c:	039b      	lsls	r3, r3, #14
 8010b7e:	e7ec      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b80:	2380      	movs	r3, #128	; 0x80
 8010b82:	049b      	lsls	r3, r3, #18
 8010b84:	e7e9      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b86:	2302      	movs	r3, #2
 8010b88:	e7e7      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b8a:	2320      	movs	r3, #32
 8010b8c:	e7e5      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
 8010b8e:	2380      	movs	r3, #128	; 0x80
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	e7e2      	b.n	8010b5a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b94:	2302      	movs	r3, #2
 8010b96:	4a49      	ldr	r2, [pc, #292]	; (8010cbc <HAL_DMA_IRQHandler+0x8a8>)
 8010b98:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b9c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010b9e:	2321      	movs	r3, #33	; 0x21
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d001      	beq.n	8010bb4 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8010bb0:	0020      	movs	r0, r4
 8010bb2:	4798      	blx	r3
}  
 8010bb4:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010bb6:	2320      	movs	r3, #32
 8010bb8:	e7ed      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bba:	2380      	movs	r3, #128	; 0x80
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	e7ea      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bc0:	2380      	movs	r3, #128	; 0x80
 8010bc2:	019b      	lsls	r3, r3, #6
 8010bc4:	e7e7      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bc6:	2380      	movs	r3, #128	; 0x80
 8010bc8:	029b      	lsls	r3, r3, #10
 8010bca:	e7e4      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bcc:	2380      	movs	r3, #128	; 0x80
 8010bce:	039b      	lsls	r3, r3, #14
 8010bd0:	e7e1      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bd2:	2380      	movs	r3, #128	; 0x80
 8010bd4:	049b      	lsls	r3, r3, #18
 8010bd6:	e7de      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bd8:	2302      	movs	r3, #2
 8010bda:	e7dc      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010bdc:	2320      	movs	r3, #32
 8010bde:	e7da      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010be0:	2380      	movs	r3, #128	; 0x80
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	e7d7      	b.n	8010b96 <HAL_DMA_IRQHandler+0x782>
 8010be6:	4a27      	ldr	r2, [pc, #156]	; (8010c84 <HAL_DMA_IRQHandler+0x870>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d027      	beq.n	8010c3c <HAL_DMA_IRQHandler+0x828>
 8010bec:	4a26      	ldr	r2, [pc, #152]	; (8010c88 <HAL_DMA_IRQHandler+0x874>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d028      	beq.n	8010c44 <HAL_DMA_IRQHandler+0x830>
 8010bf2:	4a26      	ldr	r2, [pc, #152]	; (8010c8c <HAL_DMA_IRQHandler+0x878>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d027      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x834>
 8010bf8:	4a25      	ldr	r2, [pc, #148]	; (8010c90 <HAL_DMA_IRQHandler+0x87c>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d027      	beq.n	8010c4e <HAL_DMA_IRQHandler+0x83a>
 8010bfe:	4a25      	ldr	r2, [pc, #148]	; (8010c94 <HAL_DMA_IRQHandler+0x880>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d027      	beq.n	8010c54 <HAL_DMA_IRQHandler+0x840>
 8010c04:	4a24      	ldr	r2, [pc, #144]	; (8010c98 <HAL_DMA_IRQHandler+0x884>)
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d027      	beq.n	8010c5a <HAL_DMA_IRQHandler+0x846>
 8010c0a:	4a24      	ldr	r2, [pc, #144]	; (8010c9c <HAL_DMA_IRQHandler+0x888>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d027      	beq.n	8010c60 <HAL_DMA_IRQHandler+0x84c>
 8010c10:	4a23      	ldr	r2, [pc, #140]	; (8010ca0 <HAL_DMA_IRQHandler+0x88c>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d027      	beq.n	8010c66 <HAL_DMA_IRQHandler+0x852>
 8010c16:	4a23      	ldr	r2, [pc, #140]	; (8010ca4 <HAL_DMA_IRQHandler+0x890>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d026      	beq.n	8010c6a <HAL_DMA_IRQHandler+0x856>
 8010c1c:	4a22      	ldr	r2, [pc, #136]	; (8010ca8 <HAL_DMA_IRQHandler+0x894>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d025      	beq.n	8010c6e <HAL_DMA_IRQHandler+0x85a>
 8010c22:	4a22      	ldr	r2, [pc, #136]	; (8010cac <HAL_DMA_IRQHandler+0x898>)
 8010c24:	4694      	mov	ip, r2
 8010c26:	4463      	add	r3, ip
 8010c28:	425a      	negs	r2, r3
 8010c2a:	4153      	adcs	r3, r2
 8010c2c:	425b      	negs	r3, r3
 8010c2e:	4a22      	ldr	r2, [pc, #136]	; (8010cb8 <HAL_DMA_IRQHandler+0x8a4>)
 8010c30:	4013      	ands	r3, r2
 8010c32:	2280      	movs	r2, #128	; 0x80
 8010c34:	0292      	lsls	r2, r2, #10
 8010c36:	4694      	mov	ip, r2
 8010c38:	4463      	add	r3, ip
 8010c3a:	e000      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	4a1d      	ldr	r2, [pc, #116]	; (8010cb4 <HAL_DMA_IRQHandler+0x8a0>)
 8010c40:	6053      	str	r3, [r2, #4]
 8010c42:	e7aa      	b.n	8010b9a <HAL_DMA_IRQHandler+0x786>
 8010c44:	2320      	movs	r3, #32
 8010c46:	e7fa      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c48:	2380      	movs	r3, #128	; 0x80
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	e7f7      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c4e:	2380      	movs	r3, #128	; 0x80
 8010c50:	019b      	lsls	r3, r3, #6
 8010c52:	e7f4      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c54:	2380      	movs	r3, #128	; 0x80
 8010c56:	029b      	lsls	r3, r3, #10
 8010c58:	e7f1      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c5a:	2380      	movs	r3, #128	; 0x80
 8010c5c:	039b      	lsls	r3, r3, #14
 8010c5e:	e7ee      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c60:	2380      	movs	r3, #128	; 0x80
 8010c62:	049b      	lsls	r3, r3, #18
 8010c64:	e7eb      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c66:	2302      	movs	r3, #2
 8010c68:	e7e9      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c6a:	2320      	movs	r3, #32
 8010c6c:	e7e7      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
 8010c6e:	2380      	movs	r3, #128	; 0x80
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	e7e4      	b.n	8010c3e <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010c74:	6821      	ldr	r1, [r4, #0]
 8010c76:	e65e      	b.n	8010936 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	0712      	lsls	r2, r2, #28
 8010c7c:	d500      	bpl.n	8010c80 <HAL_DMA_IRQHandler+0x86c>
 8010c7e:	e49b      	b.n	80105b8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	e44b      	b.n	801051c <HAL_DMA_IRQHandler+0x108>
 8010c84:	40020008 	.word	0x40020008
 8010c88:	4002001c 	.word	0x4002001c
 8010c8c:	40020030 	.word	0x40020030
 8010c90:	40020044 	.word	0x40020044
 8010c94:	40020058 	.word	0x40020058
 8010c98:	4002006c 	.word	0x4002006c
 8010c9c:	40020080 	.word	0x40020080
 8010ca0:	40020408 	.word	0x40020408
 8010ca4:	4002041c 	.word	0x4002041c
 8010ca8:	40020430 	.word	0x40020430
 8010cac:	bffdfbbc 	.word	0xbffdfbbc
 8010cb0:	fffc4000 	.word	0xfffc4000
 8010cb4:	40020000 	.word	0x40020000
 8010cb8:	fffe2000 	.word	0xfffe2000
 8010cbc:	40020400 	.word	0x40020400

08010cc0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <FLASH_SetErrorCode+0x2c>)
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	06db      	lsls	r3, r3, #27
 8010cc6:	d504      	bpl.n	8010cd2 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010cc8:	4a09      	ldr	r2, [pc, #36]	; (8010cf0 <FLASH_SetErrorCode+0x30>)
 8010cca:	69d3      	ldr	r3, [r2, #28]
 8010ccc:	2102      	movs	r1, #2
 8010cce:	430b      	orrs	r3, r1
 8010cd0:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010cd2:	4b06      	ldr	r3, [pc, #24]	; (8010cec <FLASH_SetErrorCode+0x2c>)
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	075b      	lsls	r3, r3, #29
 8010cd8:	d504      	bpl.n	8010ce4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010cda:	4a05      	ldr	r2, [pc, #20]	; (8010cf0 <FLASH_SetErrorCode+0x30>)
 8010cdc:	69d3      	ldr	r3, [r2, #28]
 8010cde:	2101      	movs	r1, #1
 8010ce0:	430b      	orrs	r3, r1
 8010ce2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010ce4:	4b01      	ldr	r3, [pc, #4]	; (8010cec <FLASH_SetErrorCode+0x2c>)
 8010ce6:	2214      	movs	r2, #20
 8010ce8:	60da      	str	r2, [r3, #12]
}  
 8010cea:	4770      	bx	lr
 8010cec:	40022000 	.word	0x40022000
 8010cf0:	20006020 	.word	0x20006020

08010cf4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010cf4:	4b05      	ldr	r3, [pc, #20]	; (8010d0c <HAL_FLASH_Unlock+0x18>)
 8010cf6:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8010cf8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010cfa:	061b      	lsls	r3, r3, #24
 8010cfc:	d505      	bpl.n	8010d0a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010cfe:	4b03      	ldr	r3, [pc, #12]	; (8010d0c <HAL_FLASH_Unlock+0x18>)
 8010d00:	4a03      	ldr	r2, [pc, #12]	; (8010d10 <HAL_FLASH_Unlock+0x1c>)
 8010d02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010d04:	4a03      	ldr	r2, [pc, #12]	; (8010d14 <HAL_FLASH_Unlock+0x20>)
 8010d06:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010d08:	2000      	movs	r0, #0
}
 8010d0a:	4770      	bx	lr
 8010d0c:	40022000 	.word	0x40022000
 8010d10:	45670123 	.word	0x45670123
 8010d14:	cdef89ab 	.word	0xcdef89ab

08010d18 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010d18:	4a03      	ldr	r2, [pc, #12]	; (8010d28 <HAL_FLASH_Lock+0x10>)
 8010d1a:	6913      	ldr	r3, [r2, #16]
 8010d1c:	2180      	movs	r1, #128	; 0x80
 8010d1e:	430b      	orrs	r3, r1
 8010d20:	6113      	str	r3, [r2, #16]
}
 8010d22:	2000      	movs	r0, #0
 8010d24:	4770      	bx	lr
 8010d26:	46c0      	nop			; (mov r8, r8)
 8010d28:	40022000 	.word	0x40022000

08010d2c <FLASH_WaitForLastOperation>:
{
 8010d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010d30:	f7fe fe22 	bl	800f978 <HAL_GetTick>
 8010d34:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010d36:	4e13      	ldr	r6, [pc, #76]	; (8010d84 <FLASH_WaitForLastOperation+0x58>)
 8010d38:	2501      	movs	r5, #1
 8010d3a:	68f3      	ldr	r3, [r6, #12]
 8010d3c:	421d      	tst	r5, r3
 8010d3e:	d00a      	beq.n	8010d56 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010d40:	1c63      	adds	r3, r4, #1
 8010d42:	d0fa      	beq.n	8010d3a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010d44:	2c00      	cmp	r4, #0
 8010d46:	d01a      	beq.n	8010d7e <FLASH_WaitForLastOperation+0x52>
 8010d48:	f7fe fe16 	bl	800f978 <HAL_GetTick>
 8010d4c:	1bc0      	subs	r0, r0, r7
 8010d4e:	42a0      	cmp	r0, r4
 8010d50:	d9f3      	bls.n	8010d3a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010d52:	2003      	movs	r0, #3
 8010d54:	e012      	b.n	8010d7c <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010d56:	4b0b      	ldr	r3, [pc, #44]	; (8010d84 <FLASH_WaitForLastOperation+0x58>)
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	069b      	lsls	r3, r3, #26
 8010d5c:	d502      	bpl.n	8010d64 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010d5e:	4b09      	ldr	r3, [pc, #36]	; (8010d84 <FLASH_WaitForLastOperation+0x58>)
 8010d60:	2220      	movs	r2, #32
 8010d62:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d64:	4b07      	ldr	r3, [pc, #28]	; (8010d84 <FLASH_WaitForLastOperation+0x58>)
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	06db      	lsls	r3, r3, #27
 8010d6a:	d404      	bmi.n	8010d76 <FLASH_WaitForLastOperation+0x4a>
 8010d6c:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <FLASH_WaitForLastOperation+0x58>)
 8010d6e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010d70:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d72:	075b      	lsls	r3, r3, #29
 8010d74:	d502      	bpl.n	8010d7c <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8010d76:	f7ff ffa3 	bl	8010cc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010d7a:	2001      	movs	r0, #1
}
 8010d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010d7e:	2003      	movs	r0, #3
 8010d80:	e7fc      	b.n	8010d7c <FLASH_WaitForLastOperation+0x50>
 8010d82:	46c0      	nop			; (mov r8, r8)
 8010d84:	40022000 	.word	0x40022000

08010d88 <HAL_FLASH_Program>:
{
 8010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d8a:	46de      	mov	lr, fp
 8010d8c:	4657      	mov	r7, sl
 8010d8e:	464e      	mov	r6, r9
 8010d90:	4645      	mov	r5, r8
 8010d92:	b5e0      	push	{r5, r6, r7, lr}
 8010d94:	b083      	sub	sp, #12
 8010d96:	0004      	movs	r4, r0
 8010d98:	000e      	movs	r6, r1
 8010d9a:	9201      	str	r2, [sp, #4]
 8010d9c:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010d9e:	4b2a      	ldr	r3, [pc, #168]	; (8010e48 <HAL_FLASH_Program+0xc0>)
 8010da0:	7e1b      	ldrb	r3, [r3, #24]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d04b      	beq.n	8010e3e <HAL_FLASH_Program+0xb6>
 8010da6:	4b28      	ldr	r3, [pc, #160]	; (8010e48 <HAL_FLASH_Program+0xc0>)
 8010da8:	2201      	movs	r2, #1
 8010daa:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dac:	4827      	ldr	r0, [pc, #156]	; (8010e4c <HAL_FLASH_Program+0xc4>)
 8010dae:	f7ff ffbd 	bl	8010d2c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010db2:	2800      	cmp	r0, #0
 8010db4:	d139      	bne.n	8010e2a <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010db6:	2c01      	cmp	r4, #1
 8010db8:	d043      	beq.n	8010e42 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8010dba:	3c02      	subs	r4, #2
 8010dbc:	4263      	negs	r3, r4
 8010dbe:	415c      	adcs	r4, r3
 8010dc0:	4264      	negs	r4, r4
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	439c      	bics	r4, r3
 8010dc6:	46a0      	mov	r8, r4
 8010dc8:	3303      	adds	r3, #3
 8010dca:	469c      	mov	ip, r3
 8010dcc:	44e0      	add	r8, ip
{
 8010dce:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010dd0:	4b1d      	ldr	r3, [pc, #116]	; (8010e48 <HAL_FLASH_Program+0xc0>)
 8010dd2:	469b      	mov	fp, r3
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010dd8:	4c1d      	ldr	r4, [pc, #116]	; (8010e50 <HAL_FLASH_Program+0xc8>)
 8010dda:	e01e      	b.n	8010e1a <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010ddc:	2220      	movs	r2, #32
 8010dde:	1ad2      	subs	r2, r2, r3
 8010de0:	4649      	mov	r1, r9
 8010de2:	4091      	lsls	r1, r2
 8010de4:	000a      	movs	r2, r1
 8010de6:	9901      	ldr	r1, [sp, #4]
 8010de8:	40d9      	lsrs	r1, r3
 8010dea:	000b      	movs	r3, r1
 8010dec:	4313      	orrs	r3, r2
 8010dee:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010df0:	465a      	mov	r2, fp
 8010df2:	4651      	mov	r1, sl
 8010df4:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010df6:	6922      	ldr	r2, [r4, #16]
 8010df8:	2701      	movs	r7, #1
 8010dfa:	433a      	orrs	r2, r7
 8010dfc:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010dfe:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e00:	4812      	ldr	r0, [pc, #72]	; (8010e4c <HAL_FLASH_Program+0xc4>)
 8010e02:	f7ff ff93 	bl	8010d2c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010e06:	6923      	ldr	r3, [r4, #16]
 8010e08:	43bb      	bics	r3, r7
 8010e0a:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d10c      	bne.n	8010e2a <HAL_FLASH_Program+0xa2>
 8010e10:	3501      	adds	r5, #1
 8010e12:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010e14:	b2eb      	uxtb	r3, r5
 8010e16:	4598      	cmp	r8, r3
 8010e18:	d907      	bls.n	8010e2a <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010e1a:	012b      	lsls	r3, r5, #4
 8010e1c:	2220      	movs	r2, #32
 8010e1e:	4252      	negs	r2, r2
 8010e20:	189a      	adds	r2, r3, r2
 8010e22:	d4db      	bmi.n	8010ddc <HAL_FLASH_Program+0x54>
 8010e24:	464b      	mov	r3, r9
 8010e26:	40d3      	lsrs	r3, r2
 8010e28:	e7e1      	b.n	8010dee <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8010e2a:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <HAL_FLASH_Program+0xc0>)
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	761a      	strb	r2, [r3, #24]
}
 8010e30:	b003      	add	sp, #12
 8010e32:	bc3c      	pop	{r2, r3, r4, r5}
 8010e34:	4690      	mov	r8, r2
 8010e36:	4699      	mov	r9, r3
 8010e38:	46a2      	mov	sl, r4
 8010e3a:	46ab      	mov	fp, r5
 8010e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010e3e:	2002      	movs	r0, #2
 8010e40:	e7f6      	b.n	8010e30 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010e42:	2301      	movs	r3, #1
 8010e44:	4698      	mov	r8, r3
 8010e46:	e7c2      	b.n	8010dce <HAL_FLASH_Program+0x46>
 8010e48:	20006020 	.word	0x20006020
 8010e4c:	0000c350 	.word	0x0000c350
 8010e50:	40022000 	.word	0x40022000

08010e54 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e54:	4b06      	ldr	r3, [pc, #24]	; (8010e70 <FLASH_MassErase+0x1c>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010e5a:	4b06      	ldr	r3, [pc, #24]	; (8010e74 <FLASH_MassErase+0x20>)
 8010e5c:	691a      	ldr	r2, [r3, #16]
 8010e5e:	2104      	movs	r1, #4
 8010e60:	430a      	orrs	r2, r1
 8010e62:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010e64:	691a      	ldr	r2, [r3, #16]
 8010e66:	313c      	adds	r1, #60	; 0x3c
 8010e68:	430a      	orrs	r2, r1
 8010e6a:	611a      	str	r2, [r3, #16]
}
 8010e6c:	4770      	bx	lr
 8010e6e:	46c0      	nop			; (mov r8, r8)
 8010e70:	20006020 	.word	0x20006020
 8010e74:	40022000 	.word	0x40022000

08010e78 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e78:	4b06      	ldr	r3, [pc, #24]	; (8010e94 <FLASH_PageErase+0x1c>)
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e7e:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <FLASH_PageErase+0x20>)
 8010e80:	691a      	ldr	r2, [r3, #16]
 8010e82:	2102      	movs	r1, #2
 8010e84:	430a      	orrs	r2, r1
 8010e86:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010e88:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010e8a:	691a      	ldr	r2, [r3, #16]
 8010e8c:	313e      	adds	r1, #62	; 0x3e
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	611a      	str	r2, [r3, #16]
}
 8010e92:	4770      	bx	lr
 8010e94:	20006020 	.word	0x20006020
 8010e98:	40022000 	.word	0x40022000

08010e9c <HAL_FLASHEx_Erase>:
{
 8010e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e9e:	46c6      	mov	lr, r8
 8010ea0:	b500      	push	{lr}
 8010ea2:	0006      	movs	r6, r0
 8010ea4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010ea6:	4b2a      	ldr	r3, [pc, #168]	; (8010f50 <HAL_FLASHEx_Erase+0xb4>)
 8010ea8:	7e1b      	ldrb	r3, [r3, #24]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d04d      	beq.n	8010f4a <HAL_FLASHEx_Erase+0xae>
 8010eae:	4b28      	ldr	r3, [pc, #160]	; (8010f50 <HAL_FLASHEx_Erase+0xb4>)
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d029      	beq.n	8010f0e <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010eba:	4826      	ldr	r0, [pc, #152]	; (8010f54 <HAL_FLASHEx_Erase+0xb8>)
 8010ebc:	f7ff ff36 	bl	8010d2c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010ec0:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d129      	bne.n	8010f1a <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	425b      	negs	r3, r3
 8010eca:	4642      	mov	r2, r8
 8010ecc:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010ece:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010ed0:	68b3      	ldr	r3, [r6, #8]
 8010ed2:	02db      	lsls	r3, r3, #11
 8010ed4:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8010ed6:	429c      	cmp	r4, r3
 8010ed8:	d235      	bcs.n	8010f46 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010eda:	4f1f      	ldr	r7, [pc, #124]	; (8010f58 <HAL_FLASHEx_Erase+0xbc>)
 8010edc:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8010ede:	0020      	movs	r0, r4
 8010ee0:	f7ff ffca 	bl	8010e78 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ee4:	481b      	ldr	r0, [pc, #108]	; (8010f54 <HAL_FLASHEx_Erase+0xb8>)
 8010ee6:	f7ff ff21 	bl	8010d2c <FLASH_WaitForLastOperation>
 8010eea:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	43ab      	bics	r3, r5
 8010ef0:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d124      	bne.n	8010f40 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8010ef6:	2380      	movs	r3, #128	; 0x80
 8010ef8:	011b      	lsls	r3, r3, #4
 8010efa:	469c      	mov	ip, r3
 8010efc:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010efe:	68b3      	ldr	r3, [r6, #8]
 8010f00:	02db      	lsls	r3, r3, #11
 8010f02:	6871      	ldr	r1, [r6, #4]
 8010f04:	468c      	mov	ip, r1
 8010f06:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010f08:	42a3      	cmp	r3, r4
 8010f0a:	d8e8      	bhi.n	8010ede <HAL_FLASHEx_Erase+0x42>
 8010f0c:	e005      	b.n	8010f1a <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010f0e:	4811      	ldr	r0, [pc, #68]	; (8010f54 <HAL_FLASHEx_Erase+0xb8>)
 8010f10:	f7ff ff0c 	bl	8010d2c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f14:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d006      	beq.n	8010f28 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8010f1a:	4b0d      	ldr	r3, [pc, #52]	; (8010f50 <HAL_FLASHEx_Erase+0xb4>)
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	7619      	strb	r1, [r3, #24]
}
 8010f20:	0010      	movs	r0, r2
 8010f22:	bc04      	pop	{r2}
 8010f24:	4690      	mov	r8, r2
 8010f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8010f28:	f7ff ff94 	bl	8010e54 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f2c:	4809      	ldr	r0, [pc, #36]	; (8010f54 <HAL_FLASHEx_Erase+0xb8>)
 8010f2e:	f7ff fefd 	bl	8010d2c <FLASH_WaitForLastOperation>
 8010f32:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010f34:	4908      	ldr	r1, [pc, #32]	; (8010f58 <HAL_FLASHEx_Erase+0xbc>)
 8010f36:	690b      	ldr	r3, [r1, #16]
 8010f38:	2004      	movs	r0, #4
 8010f3a:	4383      	bics	r3, r0
 8010f3c:	610b      	str	r3, [r1, #16]
 8010f3e:	e7ec      	b.n	8010f1a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010f40:	4643      	mov	r3, r8
 8010f42:	601c      	str	r4, [r3, #0]
            break;
 8010f44:	e7e9      	b.n	8010f1a <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f46:	2201      	movs	r2, #1
 8010f48:	e7e7      	b.n	8010f1a <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8010f4a:	2202      	movs	r2, #2
 8010f4c:	e7e8      	b.n	8010f20 <HAL_FLASHEx_Erase+0x84>
 8010f4e:	46c0      	nop			; (mov r8, r8)
 8010f50:	20006020 	.word	0x20006020
 8010f54:	0000c350 	.word	0x0000c350
 8010f58:	40022000 	.word	0x40022000

08010f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5e:	46de      	mov	lr, fp
 8010f60:	4657      	mov	r7, sl
 8010f62:	464e      	mov	r6, r9
 8010f64:	4645      	mov	r5, r8
 8010f66:	b5e0      	push	{r5, r6, r7, lr}
 8010f68:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010f6a:	680a      	ldr	r2, [r1, #0]
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d100      	bne.n	8010f72 <HAL_GPIO_Init+0x16>
 8010f70:	e0bf      	b.n	80110f2 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8010f72:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010f74:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010f76:	2410      	movs	r4, #16
 8010f78:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010f7a:	3c0d      	subs	r4, #13
 8010f7c:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010f7e:	2480      	movs	r4, #128	; 0x80
 8010f80:	0564      	lsls	r4, r4, #21
 8010f82:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010f84:	4c5e      	ldr	r4, [pc, #376]	; (8011100 <HAL_GPIO_Init+0x1a4>)
 8010f86:	1904      	adds	r4, r0, r4
 8010f88:	1e65      	subs	r5, r4, #1
 8010f8a:	41ac      	sbcs	r4, r5
 8010f8c:	3404      	adds	r4, #4
 8010f8e:	46a1      	mov	r9, r4
 8010f90:	e03b      	b.n	801100a <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8010f92:	08dc      	lsrs	r4, r3, #3
 8010f94:	00a4      	lsls	r4, r4, #2
 8010f96:	1904      	adds	r4, r0, r4
 8010f98:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010f9a:	2507      	movs	r5, #7
 8010f9c:	401d      	ands	r5, r3
 8010f9e:	00ad      	lsls	r5, r5, #2
 8010fa0:	220f      	movs	r2, #15
 8010fa2:	40aa      	lsls	r2, r5
 8010fa4:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010fa6:	690a      	ldr	r2, [r1, #16]
 8010fa8:	40aa      	lsls	r2, r5
 8010faa:	0015      	movs	r5, r2
 8010fac:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010fae:	6225      	str	r5, [r4, #32]
 8010fb0:	e035      	b.n	801101e <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	465a      	mov	r2, fp
 8010fb6:	4095      	lsls	r5, r2
 8010fb8:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8010fba:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010fbc:	4c51      	ldr	r4, [pc, #324]	; (8011104 <HAL_GPIO_Init+0x1a8>)
 8010fbe:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010fc0:	9a01      	ldr	r2, [sp, #4]
 8010fc2:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010fc4:	684a      	ldr	r2, [r1, #4]
 8010fc6:	03d2      	lsls	r2, r2, #15
 8010fc8:	d500      	bpl.n	8010fcc <HAL_GPIO_Init+0x70>
 8010fca:	e086      	b.n	80110da <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010fcc:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010fce:	4f4d      	ldr	r7, [pc, #308]	; (8011104 <HAL_GPIO_Init+0x1a8>)
 8010fd0:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8010fd2:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010fd4:	684a      	ldr	r2, [r1, #4]
 8010fd6:	0392      	lsls	r2, r2, #14
 8010fd8:	d500      	bpl.n	8010fdc <HAL_GPIO_Init+0x80>
 8010fda:	e081      	b.n	80110e0 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010fdc:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010fde:	4f49      	ldr	r7, [pc, #292]	; (8011104 <HAL_GPIO_Init+0x1a8>)
 8010fe0:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010fe2:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010fe4:	684a      	ldr	r2, [r1, #4]
 8010fe6:	02d2      	lsls	r2, r2, #11
 8010fe8:	d47d      	bmi.n	80110e6 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010fea:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010fec:	4f45      	ldr	r7, [pc, #276]	; (8011104 <HAL_GPIO_Init+0x1a8>)
 8010fee:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010ff0:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010ff2:	684a      	ldr	r2, [r1, #4]
 8010ff4:	0292      	lsls	r2, r2, #10
 8010ff6:	d479      	bmi.n	80110ec <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010ff8:	0022      	movs	r2, r4
 8010ffa:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010ffc:	4c41      	ldr	r4, [pc, #260]	; (8011104 <HAL_GPIO_Init+0x1a8>)
 8010ffe:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011000:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011002:	680a      	ldr	r2, [r1, #0]
 8011004:	0014      	movs	r4, r2
 8011006:	40dc      	lsrs	r4, r3
 8011008:	d073      	beq.n	80110f2 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801100a:	0034      	movs	r4, r6
 801100c:	409c      	lsls	r4, r3
 801100e:	4022      	ands	r2, r4
 8011010:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011012:	d0f5      	beq.n	8011000 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011014:	684c      	ldr	r4, [r1, #4]
 8011016:	4642      	mov	r2, r8
 8011018:	4394      	bics	r4, r2
 801101a:	2c02      	cmp	r4, #2
 801101c:	d0b9      	beq.n	8010f92 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 801101e:	6804      	ldr	r4, [r0, #0]
 8011020:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011022:	4665      	mov	r5, ip
 8011024:	40bd      	lsls	r5, r7
 8011026:	43ed      	mvns	r5, r5
 8011028:	402c      	ands	r4, r5
 801102a:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801102c:	684c      	ldr	r4, [r1, #4]
 801102e:	4662      	mov	r2, ip
 8011030:	4014      	ands	r4, r2
 8011032:	40bc      	lsls	r4, r7
 8011034:	465a      	mov	r2, fp
 8011036:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011038:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801103a:	684c      	ldr	r4, [r1, #4]
 801103c:	4642      	mov	r2, r8
 801103e:	4394      	bics	r4, r2
 8011040:	3c01      	subs	r4, #1
 8011042:	2c01      	cmp	r4, #1
 8011044:	d813      	bhi.n	801106e <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011046:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011048:	402c      	ands	r4, r5
 801104a:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801104c:	68cc      	ldr	r4, [r1, #12]
 801104e:	40bc      	lsls	r4, r7
 8011050:	465a      	mov	r2, fp
 8011052:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011054:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011056:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011058:	0032      	movs	r2, r6
 801105a:	409a      	lsls	r2, r3
 801105c:	4394      	bics	r4, r2
 801105e:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011060:	684a      	ldr	r2, [r1, #4]
 8011062:	0914      	lsrs	r4, r2, #4
 8011064:	4034      	ands	r4, r6
 8011066:	409c      	lsls	r4, r3
 8011068:	465a      	mov	r2, fp
 801106a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 801106c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 801106e:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011070:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011072:	688d      	ldr	r5, [r1, #8]
 8011074:	40bd      	lsls	r5, r7
 8011076:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011078:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801107a:	684a      	ldr	r2, [r1, #4]
 801107c:	4654      	mov	r4, sl
 801107e:	4222      	tst	r2, r4
 8011080:	d0be      	beq.n	8011000 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011082:	4c21      	ldr	r4, [pc, #132]	; (8011108 <HAL_GPIO_Init+0x1ac>)
 8011084:	69a5      	ldr	r5, [r4, #24]
 8011086:	4335      	orrs	r5, r6
 8011088:	61a5      	str	r5, [r4, #24]
 801108a:	69a4      	ldr	r4, [r4, #24]
 801108c:	4034      	ands	r4, r6
 801108e:	9403      	str	r4, [sp, #12]
 8011090:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011092:	089c      	lsrs	r4, r3, #2
 8011094:	00a4      	lsls	r4, r4, #2
 8011096:	4a1d      	ldr	r2, [pc, #116]	; (801110c <HAL_GPIO_Init+0x1b0>)
 8011098:	4693      	mov	fp, r2
 801109a:	445c      	add	r4, fp
 801109c:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801109e:	4667      	mov	r7, ip
 80110a0:	401f      	ands	r7, r3
 80110a2:	00ba      	lsls	r2, r7, #2
 80110a4:	4693      	mov	fp, r2
 80110a6:	270f      	movs	r7, #15
 80110a8:	4097      	lsls	r7, r2
 80110aa:	43bd      	bics	r5, r7
 80110ac:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80110ae:	2590      	movs	r5, #144	; 0x90
 80110b0:	05ed      	lsls	r5, r5, #23
 80110b2:	42a8      	cmp	r0, r5
 80110b4:	d100      	bne.n	80110b8 <HAL_GPIO_Init+0x15c>
 80110b6:	e77c      	b.n	8010fb2 <HAL_GPIO_Init+0x56>
 80110b8:	4d15      	ldr	r5, [pc, #84]	; (8011110 <HAL_GPIO_Init+0x1b4>)
 80110ba:	42a8      	cmp	r0, r5
 80110bc:	d007      	beq.n	80110ce <HAL_GPIO_Init+0x172>
 80110be:	4d15      	ldr	r5, [pc, #84]	; (8011114 <HAL_GPIO_Init+0x1b8>)
 80110c0:	42a8      	cmp	r0, r5
 80110c2:	d006      	beq.n	80110d2 <HAL_GPIO_Init+0x176>
 80110c4:	4d14      	ldr	r5, [pc, #80]	; (8011118 <HAL_GPIO_Init+0x1bc>)
 80110c6:	42a8      	cmp	r0, r5
 80110c8:	d005      	beq.n	80110d6 <HAL_GPIO_Init+0x17a>
 80110ca:	464d      	mov	r5, r9
 80110cc:	e772      	b.n	8010fb4 <HAL_GPIO_Init+0x58>
 80110ce:	0035      	movs	r5, r6
 80110d0:	e770      	b.n	8010fb4 <HAL_GPIO_Init+0x58>
 80110d2:	2502      	movs	r5, #2
 80110d4:	e76e      	b.n	8010fb4 <HAL_GPIO_Init+0x58>
 80110d6:	4665      	mov	r5, ip
 80110d8:	e76c      	b.n	8010fb4 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 80110da:	9a01      	ldr	r2, [sp, #4]
 80110dc:	4314      	orrs	r4, r2
 80110de:	e776      	b.n	8010fce <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80110e0:	9a01      	ldr	r2, [sp, #4]
 80110e2:	4314      	orrs	r4, r2
 80110e4:	e77b      	b.n	8010fde <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 80110e6:	9a01      	ldr	r2, [sp, #4]
 80110e8:	4314      	orrs	r4, r2
 80110ea:	e77f      	b.n	8010fec <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 80110ec:	9a01      	ldr	r2, [sp, #4]
 80110ee:	4322      	orrs	r2, r4
 80110f0:	e784      	b.n	8010ffc <HAL_GPIO_Init+0xa0>
  } 
}
 80110f2:	b005      	add	sp, #20
 80110f4:	bc3c      	pop	{r2, r3, r4, r5}
 80110f6:	4690      	mov	r8, r2
 80110f8:	4699      	mov	r9, r3
 80110fa:	46a2      	mov	sl, r4
 80110fc:	46ab      	mov	fp, r5
 80110fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011100:	b7fff000 	.word	0xb7fff000
 8011104:	40010400 	.word	0x40010400
 8011108:	40021000 	.word	0x40021000
 801110c:	40010000 	.word	0x40010000
 8011110:	48000400 	.word	0x48000400
 8011114:	48000800 	.word	0x48000800
 8011118:	48000c00 	.word	0x48000c00

0801111c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801111e:	46de      	mov	lr, fp
 8011120:	4657      	mov	r7, sl
 8011122:	464e      	mov	r6, r9
 8011124:	4645      	mov	r5, r8
 8011126:	b5e0      	push	{r5, r6, r7, lr}
 8011128:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801112a:	2900      	cmp	r1, #0
 801112c:	d071      	beq.n	8011212 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 801112e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011130:	2201      	movs	r2, #1
 8011132:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011134:	3202      	adds	r2, #2
 8011136:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011138:	3204      	adds	r2, #4
 801113a:	4693      	mov	fp, r2
 801113c:	3208      	adds	r2, #8
 801113e:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011140:	4a37      	ldr	r2, [pc, #220]	; (8011220 <HAL_GPIO_DeInit+0x104>)
 8011142:	1882      	adds	r2, r0, r2
 8011144:	1e54      	subs	r4, r2, #1
 8011146:	41a2      	sbcs	r2, r4
 8011148:	3204      	adds	r2, #4
 801114a:	9201      	str	r2, [sp, #4]
 801114c:	9100      	str	r1, [sp, #0]
 801114e:	e009      	b.n	8011164 <HAL_GPIO_DeInit+0x48>
 8011150:	2100      	movs	r1, #0
 8011152:	4689      	mov	r9, r1
 8011154:	4649      	mov	r1, r9
 8011156:	40a9      	lsls	r1, r5
 8011158:	42b1      	cmp	r1, r6
 801115a:	d048      	beq.n	80111ee <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 801115c:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801115e:	9a00      	ldr	r2, [sp, #0]
 8011160:	40da      	lsrs	r2, r3
 8011162:	d056      	beq.n	8011212 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011164:	4662      	mov	r2, ip
 8011166:	409a      	lsls	r2, r3
 8011168:	9900      	ldr	r1, [sp, #0]
 801116a:	400a      	ands	r2, r1
    if (iocurrent)
 801116c:	d0f6      	beq.n	801115c <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801116e:	6804      	ldr	r4, [r0, #0]
 8011170:	005d      	lsls	r5, r3, #1
 8011172:	4646      	mov	r6, r8
 8011174:	40ae      	lsls	r6, r5
 8011176:	43f5      	mvns	r5, r6
 8011178:	402c      	ands	r4, r5
 801117a:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801117c:	08dc      	lsrs	r4, r3, #3
 801117e:	00a4      	lsls	r4, r4, #2
 8011180:	1904      	adds	r4, r0, r4
 8011182:	6a26      	ldr	r6, [r4, #32]
 8011184:	465f      	mov	r7, fp
 8011186:	401f      	ands	r7, r3
 8011188:	00bf      	lsls	r7, r7, #2
 801118a:	4651      	mov	r1, sl
 801118c:	40b9      	lsls	r1, r7
 801118e:	438e      	bics	r6, r1
 8011190:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011192:	6884      	ldr	r4, [r0, #8]
 8011194:	402c      	ands	r4, r5
 8011196:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011198:	6844      	ldr	r4, [r0, #4]
 801119a:	4666      	mov	r6, ip
 801119c:	409e      	lsls	r6, r3
 801119e:	43b4      	bics	r4, r6
 80111a0:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80111a2:	68c4      	ldr	r4, [r0, #12]
 80111a4:	4025      	ands	r5, r4
 80111a6:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80111a8:	089c      	lsrs	r4, r3, #2
 80111aa:	00a4      	lsls	r4, r4, #2
 80111ac:	491d      	ldr	r1, [pc, #116]	; (8011224 <HAL_GPIO_DeInit+0x108>)
 80111ae:	4689      	mov	r9, r1
 80111b0:	444c      	add	r4, r9
 80111b2:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80111b4:	4645      	mov	r5, r8
 80111b6:	401d      	ands	r5, r3
 80111b8:	00ad      	lsls	r5, r5, #2
 80111ba:	4657      	mov	r7, sl
 80111bc:	40af      	lsls	r7, r5
 80111be:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80111c0:	2190      	movs	r1, #144	; 0x90
 80111c2:	05c9      	lsls	r1, r1, #23
 80111c4:	4288      	cmp	r0, r1
 80111c6:	d0c3      	beq.n	8011150 <HAL_GPIO_DeInit+0x34>
 80111c8:	4917      	ldr	r1, [pc, #92]	; (8011228 <HAL_GPIO_DeInit+0x10c>)
 80111ca:	4288      	cmp	r0, r1
 80111cc:	d008      	beq.n	80111e0 <HAL_GPIO_DeInit+0xc4>
 80111ce:	4917      	ldr	r1, [pc, #92]	; (801122c <HAL_GPIO_DeInit+0x110>)
 80111d0:	4288      	cmp	r0, r1
 80111d2:	d007      	beq.n	80111e4 <HAL_GPIO_DeInit+0xc8>
 80111d4:	4916      	ldr	r1, [pc, #88]	; (8011230 <HAL_GPIO_DeInit+0x114>)
 80111d6:	4288      	cmp	r0, r1
 80111d8:	d007      	beq.n	80111ea <HAL_GPIO_DeInit+0xce>
 80111da:	9901      	ldr	r1, [sp, #4]
 80111dc:	4689      	mov	r9, r1
 80111de:	e7b9      	b.n	8011154 <HAL_GPIO_DeInit+0x38>
 80111e0:	46e1      	mov	r9, ip
 80111e2:	e7b7      	b.n	8011154 <HAL_GPIO_DeInit+0x38>
 80111e4:	2102      	movs	r1, #2
 80111e6:	4689      	mov	r9, r1
 80111e8:	e7b4      	b.n	8011154 <HAL_GPIO_DeInit+0x38>
 80111ea:	46c1      	mov	r9, r8
 80111ec:	e7b2      	b.n	8011154 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80111ee:	68a5      	ldr	r5, [r4, #8]
 80111f0:	43bd      	bics	r5, r7
 80111f2:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80111f4:	4c0f      	ldr	r4, [pc, #60]	; (8011234 <HAL_GPIO_DeInit+0x118>)
 80111f6:	6825      	ldr	r5, [r4, #0]
 80111f8:	43d2      	mvns	r2, r2
 80111fa:	4015      	ands	r5, r2
 80111fc:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80111fe:	6865      	ldr	r5, [r4, #4]
 8011200:	4015      	ands	r5, r2
 8011202:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011204:	68a5      	ldr	r5, [r4, #8]
 8011206:	4015      	ands	r5, r2
 8011208:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801120a:	68e5      	ldr	r5, [r4, #12]
 801120c:	402a      	ands	r2, r5
 801120e:	60e2      	str	r2, [r4, #12]
 8011210:	e7a4      	b.n	801115c <HAL_GPIO_DeInit+0x40>
  }
}
 8011212:	b003      	add	sp, #12
 8011214:	bc3c      	pop	{r2, r3, r4, r5}
 8011216:	4690      	mov	r8, r2
 8011218:	4699      	mov	r9, r3
 801121a:	46a2      	mov	sl, r4
 801121c:	46ab      	mov	fp, r5
 801121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011220:	b7fff000 	.word	0xb7fff000
 8011224:	40010000 	.word	0x40010000
 8011228:	48000400 	.word	0x48000400
 801122c:	48000800 	.word	0x48000800
 8011230:	48000c00 	.word	0x48000c00
 8011234:	40010400 	.word	0x40010400

08011238 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011238:	6900      	ldr	r0, [r0, #16]
 801123a:	4008      	ands	r0, r1
 801123c:	1e41      	subs	r1, r0, #1
 801123e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011240:	b2c0      	uxtb	r0, r0
  }
 8011242:	4770      	bx	lr

08011244 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011244:	2a00      	cmp	r2, #0
 8011246:	d101      	bne.n	801124c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011248:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801124a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801124c:	6181      	str	r1, [r0, #24]
 801124e:	e7fc      	b.n	801124a <HAL_GPIO_WritePin+0x6>

08011250 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011250:	6943      	ldr	r3, [r0, #20]
 8011252:	4059      	eors	r1, r3
 8011254:	6141      	str	r1, [r0, #20]
}
 8011256:	4770      	bx	lr

08011258 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011258:	4770      	bx	lr
	...

0801125c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801125c:	4a03      	ldr	r2, [pc, #12]	; (801126c <HAL_PWR_EnableBkUpAccess+0x10>)
 801125e:	6811      	ldr	r1, [r2, #0]
 8011260:	2380      	movs	r3, #128	; 0x80
 8011262:	005b      	lsls	r3, r3, #1
 8011264:	430b      	orrs	r3, r1
 8011266:	6013      	str	r3, [r2, #0]
}
 8011268:	4770      	bx	lr
 801126a:	46c0      	nop			; (mov r8, r8)
 801126c:	40007000 	.word	0x40007000

08011270 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011272:	46c6      	mov	lr, r8
 8011274:	b500      	push	{lr}
 8011276:	b082      	sub	sp, #8
 8011278:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801127a:	6803      	ldr	r3, [r0, #0]
 801127c:	07db      	lsls	r3, r3, #31
 801127e:	d538      	bpl.n	80112f2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011280:	4bbd      	ldr	r3, [pc, #756]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	230c      	movs	r3, #12
 8011286:	4013      	ands	r3, r2
 8011288:	2b04      	cmp	r3, #4
 801128a:	d02a      	beq.n	80112e2 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801128c:	4bba      	ldr	r3, [pc, #744]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	230c      	movs	r3, #12
 8011292:	4013      	ands	r3, r2
 8011294:	2b08      	cmp	r3, #8
 8011296:	d108      	bne.n	80112aa <HAL_RCC_OscConfig+0x3a>
 8011298:	4bb7      	ldr	r3, [pc, #732]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	22c0      	movs	r2, #192	; 0xc0
 801129e:	0252      	lsls	r2, r2, #9
 80112a0:	4013      	ands	r3, r2
 80112a2:	2280      	movs	r2, #128	; 0x80
 80112a4:	0252      	lsls	r2, r2, #9
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d01b      	beq.n	80112e2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80112aa:	4bb3      	ldr	r3, [pc, #716]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	49b3      	ldr	r1, [pc, #716]	; (801157c <HAL_RCC_OscConfig+0x30c>)
 80112b0:	400a      	ands	r2, r1
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	49b2      	ldr	r1, [pc, #712]	; (8011580 <HAL_RCC_OscConfig+0x310>)
 80112b8:	400a      	ands	r2, r1
 80112ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80112bc:	f7fe fb5c 	bl	800f978 <HAL_GetTick>
 80112c0:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112c2:	4ead      	ldr	r6, [pc, #692]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80112c4:	2580      	movs	r5, #128	; 0x80
 80112c6:	02ad      	lsls	r5, r5, #10
 80112c8:	6833      	ldr	r3, [r6, #0]
 80112ca:	422b      	tst	r3, r5
 80112cc:	d039      	beq.n	8011342 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80112ce:	f7fe fb53 	bl	800f978 <HAL_GetTick>
 80112d2:	1bc0      	subs	r0, r0, r7
 80112d4:	2864      	cmp	r0, #100	; 0x64
 80112d6:	d9f7      	bls.n	80112c8 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80112d8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80112da:	b002      	add	sp, #8
 80112dc:	bc04      	pop	{r2}
 80112de:	4690      	mov	r8, r2
 80112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112e2:	4ba5      	ldr	r3, [pc, #660]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	039b      	lsls	r3, r3, #14
 80112e8:	d503      	bpl.n	80112f2 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 80112ea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112ec:	6863      	ldr	r3, [r4, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d0f3      	beq.n	80112da <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112f2:	6823      	ldr	r3, [r4, #0]
 80112f4:	079b      	lsls	r3, r3, #30
 80112f6:	d400      	bmi.n	80112fa <HAL_RCC_OscConfig+0x8a>
 80112f8:	e08d      	b.n	8011416 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80112fa:	4b9f      	ldr	r3, [pc, #636]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	220c      	movs	r2, #12
 8011300:	421a      	tst	r2, r3
 8011302:	d077      	beq.n	80113f4 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011304:	4b9c      	ldr	r3, [pc, #624]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	230c      	movs	r3, #12
 801130a:	4013      	ands	r3, r2
 801130c:	2b08      	cmp	r3, #8
 801130e:	d068      	beq.n	80113e2 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011310:	68e3      	ldr	r3, [r4, #12]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d100      	bne.n	8011318 <HAL_RCC_OscConfig+0xa8>
 8011316:	e0a1      	b.n	801145c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011318:	4a97      	ldr	r2, [pc, #604]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801131a:	6813      	ldr	r3, [r2, #0]
 801131c:	2101      	movs	r1, #1
 801131e:	430b      	orrs	r3, r1
 8011320:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011322:	f7fe fb29 	bl	800f978 <HAL_GetTick>
 8011326:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011328:	4e93      	ldr	r6, [pc, #588]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801132a:	2502      	movs	r5, #2
 801132c:	6833      	ldr	r3, [r6, #0]
 801132e:	421d      	tst	r5, r3
 8011330:	d000      	beq.n	8011334 <HAL_RCC_OscConfig+0xc4>
 8011332:	e08a      	b.n	801144a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011334:	f7fe fb20 	bl	800f978 <HAL_GetTick>
 8011338:	1bc0      	subs	r0, r0, r7
 801133a:	2864      	cmp	r0, #100	; 0x64
 801133c:	d9f6      	bls.n	801132c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801133e:	2003      	movs	r0, #3
 8011340:	e7cb      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011342:	6863      	ldr	r3, [r4, #4]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d00b      	beq.n	8011360 <HAL_RCC_OscConfig+0xf0>
 8011348:	2b00      	cmp	r3, #0
 801134a:	d122      	bne.n	8011392 <HAL_RCC_OscConfig+0x122>
 801134c:	4b8a      	ldr	r3, [pc, #552]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	498a      	ldr	r1, [pc, #552]	; (801157c <HAL_RCC_OscConfig+0x30c>)
 8011352:	400a      	ands	r2, r1
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	4989      	ldr	r1, [pc, #548]	; (8011580 <HAL_RCC_OscConfig+0x310>)
 801135a:	400a      	ands	r2, r1
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	e005      	b.n	801136c <HAL_RCC_OscConfig+0xfc>
 8011360:	4a85      	ldr	r2, [pc, #532]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011362:	6811      	ldr	r1, [r2, #0]
 8011364:	2380      	movs	r3, #128	; 0x80
 8011366:	025b      	lsls	r3, r3, #9
 8011368:	430b      	orrs	r3, r1
 801136a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801136c:	6863      	ldr	r3, [r4, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d027      	beq.n	80113c2 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011372:	f7fe fb01 	bl	800f978 <HAL_GetTick>
 8011376:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011378:	4e7f      	ldr	r6, [pc, #508]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801137a:	2580      	movs	r5, #128	; 0x80
 801137c:	02ad      	lsls	r5, r5, #10
 801137e:	6833      	ldr	r3, [r6, #0]
 8011380:	422b      	tst	r3, r5
 8011382:	d1b6      	bne.n	80112f2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011384:	f7fe faf8 	bl	800f978 <HAL_GetTick>
 8011388:	1bc0      	subs	r0, r0, r7
 801138a:	2864      	cmp	r0, #100	; 0x64
 801138c:	d9f7      	bls.n	801137e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 801138e:	2003      	movs	r0, #3
 8011390:	e7a3      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011392:	2b05      	cmp	r3, #5
 8011394:	d009      	beq.n	80113aa <HAL_RCC_OscConfig+0x13a>
 8011396:	4b78      	ldr	r3, [pc, #480]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	4978      	ldr	r1, [pc, #480]	; (801157c <HAL_RCC_OscConfig+0x30c>)
 801139c:	400a      	ands	r2, r1
 801139e:	601a      	str	r2, [r3, #0]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	4977      	ldr	r1, [pc, #476]	; (8011580 <HAL_RCC_OscConfig+0x310>)
 80113a4:	400a      	ands	r2, r1
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	e7e0      	b.n	801136c <HAL_RCC_OscConfig+0xfc>
 80113aa:	4b73      	ldr	r3, [pc, #460]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80113ac:	6819      	ldr	r1, [r3, #0]
 80113ae:	2280      	movs	r2, #128	; 0x80
 80113b0:	02d2      	lsls	r2, r2, #11
 80113b2:	430a      	orrs	r2, r1
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	6819      	ldr	r1, [r3, #0]
 80113b8:	2280      	movs	r2, #128	; 0x80
 80113ba:	0252      	lsls	r2, r2, #9
 80113bc:	430a      	orrs	r2, r1
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	e7d4      	b.n	801136c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80113c2:	f7fe fad9 	bl	800f978 <HAL_GetTick>
 80113c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80113c8:	4e6b      	ldr	r6, [pc, #428]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80113ca:	2580      	movs	r5, #128	; 0x80
 80113cc:	02ad      	lsls	r5, r5, #10
 80113ce:	6833      	ldr	r3, [r6, #0]
 80113d0:	422b      	tst	r3, r5
 80113d2:	d08e      	beq.n	80112f2 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80113d4:	f7fe fad0 	bl	800f978 <HAL_GetTick>
 80113d8:	1bc0      	subs	r0, r0, r7
 80113da:	2864      	cmp	r0, #100	; 0x64
 80113dc:	d9f7      	bls.n	80113ce <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80113de:	2003      	movs	r0, #3
 80113e0:	e77b      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80113e2:	4b65      	ldr	r3, [pc, #404]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	22c0      	movs	r2, #192	; 0xc0
 80113e8:	0252      	lsls	r2, r2, #9
 80113ea:	4013      	ands	r3, r2
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	0212      	lsls	r2, r2, #8
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d18d      	bne.n	8011310 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113f4:	4b60      	ldr	r3, [pc, #384]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	079b      	lsls	r3, r3, #30
 80113fa:	d504      	bpl.n	8011406 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80113fc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113fe:	68e3      	ldr	r3, [r4, #12]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d000      	beq.n	8011406 <HAL_RCC_OscConfig+0x196>
 8011404:	e769      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011406:	495c      	ldr	r1, [pc, #368]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011408:	680a      	ldr	r2, [r1, #0]
 801140a:	6923      	ldr	r3, [r4, #16]
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	20f8      	movs	r0, #248	; 0xf8
 8011410:	4382      	bics	r2, r0
 8011412:	4313      	orrs	r3, r2
 8011414:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	071b      	lsls	r3, r3, #28
 801141a:	d547      	bpl.n	80114ac <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801141c:	6a23      	ldr	r3, [r4, #32]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d030      	beq.n	8011484 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011422:	4a55      	ldr	r2, [pc, #340]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011424:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011426:	2101      	movs	r1, #1
 8011428:	430b      	orrs	r3, r1
 801142a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801142c:	f7fe faa4 	bl	800f978 <HAL_GetTick>
 8011430:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011432:	4e51      	ldr	r6, [pc, #324]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011434:	2502      	movs	r5, #2
 8011436:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011438:	421d      	tst	r5, r3
 801143a:	d137      	bne.n	80114ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801143c:	f7fe fa9c 	bl	800f978 <HAL_GetTick>
 8011440:	1bc0      	subs	r0, r0, r7
 8011442:	2864      	cmp	r0, #100	; 0x64
 8011444:	d9f7      	bls.n	8011436 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011446:	2003      	movs	r0, #3
 8011448:	e747      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801144a:	494b      	ldr	r1, [pc, #300]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801144c:	680a      	ldr	r2, [r1, #0]
 801144e:	6923      	ldr	r3, [r4, #16]
 8011450:	00db      	lsls	r3, r3, #3
 8011452:	20f8      	movs	r0, #248	; 0xf8
 8011454:	4382      	bics	r2, r0
 8011456:	4313      	orrs	r3, r2
 8011458:	600b      	str	r3, [r1, #0]
 801145a:	e7dc      	b.n	8011416 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801145c:	4a46      	ldr	r2, [pc, #280]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801145e:	6813      	ldr	r3, [r2, #0]
 8011460:	2101      	movs	r1, #1
 8011462:	438b      	bics	r3, r1
 8011464:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011466:	f7fe fa87 	bl	800f978 <HAL_GetTick>
 801146a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801146c:	4e42      	ldr	r6, [pc, #264]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801146e:	2502      	movs	r5, #2
 8011470:	6833      	ldr	r3, [r6, #0]
 8011472:	421d      	tst	r5, r3
 8011474:	d0cf      	beq.n	8011416 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011476:	f7fe fa7f 	bl	800f978 <HAL_GetTick>
 801147a:	1bc0      	subs	r0, r0, r7
 801147c:	2864      	cmp	r0, #100	; 0x64
 801147e:	d9f7      	bls.n	8011470 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011480:	2003      	movs	r0, #3
 8011482:	e72a      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011484:	4a3c      	ldr	r2, [pc, #240]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011486:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011488:	2101      	movs	r1, #1
 801148a:	438b      	bics	r3, r1
 801148c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801148e:	f7fe fa73 	bl	800f978 <HAL_GetTick>
 8011492:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011494:	4e38      	ldr	r6, [pc, #224]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 8011496:	2502      	movs	r5, #2
 8011498:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801149a:	421d      	tst	r5, r3
 801149c:	d006      	beq.n	80114ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801149e:	f7fe fa6b 	bl	800f978 <HAL_GetTick>
 80114a2:	1bc0      	subs	r0, r0, r7
 80114a4:	2864      	cmp	r0, #100	; 0x64
 80114a6:	d9f7      	bls.n	8011498 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80114a8:	2003      	movs	r0, #3
 80114aa:	e716      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80114ac:	6823      	ldr	r3, [r4, #0]
 80114ae:	075b      	lsls	r3, r3, #29
 80114b0:	d442      	bmi.n	8011538 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	06db      	lsls	r3, r3, #27
 80114b6:	d512      	bpl.n	80114de <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80114b8:	6963      	ldr	r3, [r4, #20]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d100      	bne.n	80114c0 <HAL_RCC_OscConfig+0x250>
 80114be:	e0ce      	b.n	801165e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80114c0:	3305      	adds	r3, #5
 80114c2:	d000      	beq.n	80114c6 <HAL_RCC_OscConfig+0x256>
 80114c4:	e0ec      	b.n	80116a0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80114c6:	4a2c      	ldr	r2, [pc, #176]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80114c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80114ca:	2104      	movs	r1, #4
 80114cc:	438b      	bics	r3, r1
 80114ce:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80114d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80114d2:	69a3      	ldr	r3, [r4, #24]
 80114d4:	00db      	lsls	r3, r3, #3
 80114d6:	20f8      	movs	r0, #248	; 0xf8
 80114d8:	4381      	bics	r1, r0
 80114da:	430b      	orrs	r3, r1
 80114dc:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80114de:	6823      	ldr	r3, [r4, #0]
 80114e0:	069b      	lsls	r3, r3, #26
 80114e2:	d400      	bmi.n	80114e6 <HAL_RCC_OscConfig+0x276>
 80114e4:	e106      	b.n	80116f4 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80114e6:	4b24      	ldr	r3, [pc, #144]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80114e8:	685a      	ldr	r2, [r3, #4]
 80114ea:	230c      	movs	r3, #12
 80114ec:	4013      	ands	r3, r2
 80114ee:	2b0c      	cmp	r3, #12
 80114f0:	d100      	bne.n	80114f4 <HAL_RCC_OscConfig+0x284>
 80114f2:	e0f6      	b.n	80116e2 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80114f4:	4b20      	ldr	r3, [pc, #128]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 80114f6:	685a      	ldr	r2, [r3, #4]
 80114f8:	230c      	movs	r3, #12
 80114fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80114fc:	2b08      	cmp	r3, #8
 80114fe:	d100      	bne.n	8011502 <HAL_RCC_OscConfig+0x292>
 8011500:	e0e7      	b.n	80116d2 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011502:	69e3      	ldr	r3, [r4, #28]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d100      	bne.n	801150a <HAL_RCC_OscConfig+0x29a>
 8011508:	e116      	b.n	8011738 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801150a:	4a1b      	ldr	r2, [pc, #108]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801150c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801150e:	2380      	movs	r3, #128	; 0x80
 8011510:	025b      	lsls	r3, r3, #9
 8011512:	430b      	orrs	r3, r1
 8011514:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011516:	f7fe fa2f 	bl	800f978 <HAL_GetTick>
 801151a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801151c:	4e16      	ldr	r6, [pc, #88]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801151e:	2580      	movs	r5, #128	; 0x80
 8011520:	026d      	lsls	r5, r5, #9
 8011522:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011524:	422b      	tst	r3, r5
 8011526:	d000      	beq.n	801152a <HAL_RCC_OscConfig+0x2ba>
 8011528:	e0e4      	b.n	80116f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801152a:	f7fe fa25 	bl	800f978 <HAL_GetTick>
 801152e:	1bc0      	subs	r0, r0, r7
 8011530:	2864      	cmp	r0, #100	; 0x64
 8011532:	d9f6      	bls.n	8011522 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011534:	2003      	movs	r0, #3
 8011536:	e6d0      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011538:	4a0f      	ldr	r2, [pc, #60]	; (8011578 <HAL_RCC_OscConfig+0x308>)
 801153a:	69d1      	ldr	r1, [r2, #28]
 801153c:	2080      	movs	r0, #128	; 0x80
 801153e:	0540      	lsls	r0, r0, #21
 8011540:	4301      	orrs	r1, r0
 8011542:	61d1      	str	r1, [r2, #28]
 8011544:	69d3      	ldr	r3, [r2, #28]
 8011546:	4003      	ands	r3, r0
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801154c:	4a0d      	ldr	r2, [pc, #52]	; (8011584 <HAL_RCC_OscConfig+0x314>)
 801154e:	6811      	ldr	r1, [r2, #0]
 8011550:	2380      	movs	r3, #128	; 0x80
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	430b      	orrs	r3, r1
 8011556:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011558:	f7fe fa0e 	bl	800f978 <HAL_GetTick>
 801155c:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801155e:	4e09      	ldr	r6, [pc, #36]	; (8011584 <HAL_RCC_OscConfig+0x314>)
 8011560:	2580      	movs	r5, #128	; 0x80
 8011562:	006d      	lsls	r5, r5, #1
 8011564:	6833      	ldr	r3, [r6, #0]
 8011566:	422b      	tst	r3, r5
 8011568:	d10e      	bne.n	8011588 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801156a:	f7fe fa05 	bl	800f978 <HAL_GetTick>
 801156e:	1bc0      	subs	r0, r0, r7
 8011570:	2864      	cmp	r0, #100	; 0x64
 8011572:	d9f7      	bls.n	8011564 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8011574:	2003      	movs	r0, #3
 8011576:	e6b0      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
 8011578:	40021000 	.word	0x40021000
 801157c:	fffeffff 	.word	0xfffeffff
 8011580:	fffbffff 	.word	0xfffbffff
 8011584:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011588:	4b95      	ldr	r3, [pc, #596]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 801158a:	6a1a      	ldr	r2, [r3, #32]
 801158c:	2101      	movs	r1, #1
 801158e:	438a      	bics	r2, r1
 8011590:	621a      	str	r2, [r3, #32]
 8011592:	6a1a      	ldr	r2, [r3, #32]
 8011594:	3103      	adds	r1, #3
 8011596:	438a      	bics	r2, r1
 8011598:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801159a:	f7fe f9ed 	bl	800f978 <HAL_GetTick>
 801159e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115a0:	4e8f      	ldr	r6, [pc, #572]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80115a2:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115a4:	4f8f      	ldr	r7, [pc, #572]	; (80117e4 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115a6:	6a33      	ldr	r3, [r6, #32]
 80115a8:	421d      	tst	r5, r3
 80115aa:	d007      	beq.n	80115bc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115ac:	f7fe f9e4 	bl	800f978 <HAL_GetTick>
 80115b0:	4643      	mov	r3, r8
 80115b2:	1ac0      	subs	r0, r0, r3
 80115b4:	42b8      	cmp	r0, r7
 80115b6:	d9f6      	bls.n	80115a6 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80115b8:	2003      	movs	r0, #3
 80115ba:	e68e      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80115bc:	68a3      	ldr	r3, [r4, #8]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d00b      	beq.n	80115da <HAL_RCC_OscConfig+0x36a>
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d123      	bne.n	801160e <HAL_RCC_OscConfig+0x39e>
 80115c6:	4b86      	ldr	r3, [pc, #536]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80115c8:	6a1a      	ldr	r2, [r3, #32]
 80115ca:	2101      	movs	r1, #1
 80115cc:	438a      	bics	r2, r1
 80115ce:	621a      	str	r2, [r3, #32]
 80115d0:	6a1a      	ldr	r2, [r3, #32]
 80115d2:	3103      	adds	r1, #3
 80115d4:	438a      	bics	r2, r1
 80115d6:	621a      	str	r2, [r3, #32]
 80115d8:	e004      	b.n	80115e4 <HAL_RCC_OscConfig+0x374>
 80115da:	4a81      	ldr	r2, [pc, #516]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80115dc:	6a13      	ldr	r3, [r2, #32]
 80115de:	2101      	movs	r1, #1
 80115e0:	430b      	orrs	r3, r1
 80115e2:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80115e4:	68a3      	ldr	r3, [r4, #8]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d027      	beq.n	801163a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80115ea:	f7fe f9c5 	bl	800f978 <HAL_GetTick>
 80115ee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80115f0:	4e7b      	ldr	r6, [pc, #492]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80115f2:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115f4:	4f7b      	ldr	r7, [pc, #492]	; (80117e4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80115f6:	6a33      	ldr	r3, [r6, #32]
 80115f8:	421d      	tst	r5, r3
 80115fa:	d000      	beq.n	80115fe <HAL_RCC_OscConfig+0x38e>
 80115fc:	e759      	b.n	80114b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115fe:	f7fe f9bb 	bl	800f978 <HAL_GetTick>
 8011602:	4643      	mov	r3, r8
 8011604:	1ac0      	subs	r0, r0, r3
 8011606:	42b8      	cmp	r0, r7
 8011608:	d9f5      	bls.n	80115f6 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801160a:	2003      	movs	r0, #3
 801160c:	e665      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801160e:	2b05      	cmp	r3, #5
 8011610:	d009      	beq.n	8011626 <HAL_RCC_OscConfig+0x3b6>
 8011612:	4b73      	ldr	r3, [pc, #460]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011614:	6a1a      	ldr	r2, [r3, #32]
 8011616:	2101      	movs	r1, #1
 8011618:	438a      	bics	r2, r1
 801161a:	621a      	str	r2, [r3, #32]
 801161c:	6a1a      	ldr	r2, [r3, #32]
 801161e:	3103      	adds	r1, #3
 8011620:	438a      	bics	r2, r1
 8011622:	621a      	str	r2, [r3, #32]
 8011624:	e7de      	b.n	80115e4 <HAL_RCC_OscConfig+0x374>
 8011626:	4b6e      	ldr	r3, [pc, #440]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011628:	6a1a      	ldr	r2, [r3, #32]
 801162a:	2104      	movs	r1, #4
 801162c:	430a      	orrs	r2, r1
 801162e:	621a      	str	r2, [r3, #32]
 8011630:	6a1a      	ldr	r2, [r3, #32]
 8011632:	3903      	subs	r1, #3
 8011634:	430a      	orrs	r2, r1
 8011636:	621a      	str	r2, [r3, #32]
 8011638:	e7d4      	b.n	80115e4 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801163a:	f7fe f99d 	bl	800f978 <HAL_GetTick>
 801163e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011640:	4e67      	ldr	r6, [pc, #412]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011642:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011644:	4f67      	ldr	r7, [pc, #412]	; (80117e4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011646:	6a33      	ldr	r3, [r6, #32]
 8011648:	421d      	tst	r5, r3
 801164a:	d100      	bne.n	801164e <HAL_RCC_OscConfig+0x3de>
 801164c:	e731      	b.n	80114b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801164e:	f7fe f993 	bl	800f978 <HAL_GetTick>
 8011652:	4643      	mov	r3, r8
 8011654:	1ac0      	subs	r0, r0, r3
 8011656:	42b8      	cmp	r0, r7
 8011658:	d9f5      	bls.n	8011646 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801165a:	2003      	movs	r0, #3
 801165c:	e63d      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801165e:	4b60      	ldr	r3, [pc, #384]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011662:	2104      	movs	r1, #4
 8011664:	430a      	orrs	r2, r1
 8011666:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801166a:	3903      	subs	r1, #3
 801166c:	430a      	orrs	r2, r1
 801166e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011670:	f7fe f982 	bl	800f978 <HAL_GetTick>
 8011674:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011676:	4e5a      	ldr	r6, [pc, #360]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011678:	2502      	movs	r5, #2
 801167a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801167c:	421d      	tst	r5, r3
 801167e:	d106      	bne.n	801168e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011680:	f7fe f97a 	bl	800f978 <HAL_GetTick>
 8011684:	1bc0      	subs	r0, r0, r7
 8011686:	2864      	cmp	r0, #100	; 0x64
 8011688:	d9f7      	bls.n	801167a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801168a:	2003      	movs	r0, #3
 801168c:	e625      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801168e:	4954      	ldr	r1, [pc, #336]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011690:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8011692:	69a3      	ldr	r3, [r4, #24]
 8011694:	00db      	lsls	r3, r3, #3
 8011696:	20f8      	movs	r0, #248	; 0xf8
 8011698:	4382      	bics	r2, r0
 801169a:	4313      	orrs	r3, r2
 801169c:	634b      	str	r3, [r1, #52]	; 0x34
 801169e:	e71e      	b.n	80114de <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80116a0:	4b4f      	ldr	r3, [pc, #316]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80116a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116a4:	2104      	movs	r1, #4
 80116a6:	430a      	orrs	r2, r1
 80116a8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80116aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116ac:	3903      	subs	r1, #3
 80116ae:	438a      	bics	r2, r1
 80116b0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80116b2:	f7fe f961 	bl	800f978 <HAL_GetTick>
 80116b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80116b8:	4e49      	ldr	r6, [pc, #292]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80116ba:	2502      	movs	r5, #2
 80116bc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80116be:	421d      	tst	r5, r3
 80116c0:	d100      	bne.n	80116c4 <HAL_RCC_OscConfig+0x454>
 80116c2:	e70c      	b.n	80114de <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80116c4:	f7fe f958 	bl	800f978 <HAL_GetTick>
 80116c8:	1bc0      	subs	r0, r0, r7
 80116ca:	2864      	cmp	r0, #100	; 0x64
 80116cc:	d9f6      	bls.n	80116bc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80116ce:	2003      	movs	r0, #3
 80116d0:	e603      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80116d2:	4b43      	ldr	r3, [pc, #268]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	22c0      	movs	r2, #192	; 0xc0
 80116d8:	0252      	lsls	r2, r2, #9
 80116da:	4013      	ands	r3, r2
 80116dc:	4293      	cmp	r3, r2
 80116de:	d000      	beq.n	80116e2 <HAL_RCC_OscConfig+0x472>
 80116e0:	e70f      	b.n	8011502 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80116e2:	4b3f      	ldr	r3, [pc, #252]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80116e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e6:	03db      	lsls	r3, r3, #15
 80116e8:	d504      	bpl.n	80116f4 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80116ea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80116ec:	69e3      	ldr	r3, [r4, #28]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d000      	beq.n	80116f4 <HAL_RCC_OscConfig+0x484>
 80116f2:	e5f2      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80116f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80116f6:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d100      	bne.n	80116fe <HAL_RCC_OscConfig+0x48e>
 80116fc:	e5ed      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116fe:	4a38      	ldr	r2, [pc, #224]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011700:	6851      	ldr	r1, [r2, #4]
 8011702:	220c      	movs	r2, #12
 8011704:	400a      	ands	r2, r1
 8011706:	2a08      	cmp	r2, #8
 8011708:	d068      	beq.n	80117dc <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801170a:	2b02      	cmp	r3, #2
 801170c:	d029      	beq.n	8011762 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801170e:	4a34      	ldr	r2, [pc, #208]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011710:	6813      	ldr	r3, [r2, #0]
 8011712:	4935      	ldr	r1, [pc, #212]	; (80117e8 <HAL_RCC_OscConfig+0x578>)
 8011714:	400b      	ands	r3, r1
 8011716:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011718:	f7fe f92e 	bl	800f978 <HAL_GetTick>
 801171c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801171e:	4d30      	ldr	r5, [pc, #192]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011720:	2480      	movs	r4, #128	; 0x80
 8011722:	04a4      	lsls	r4, r4, #18
 8011724:	682b      	ldr	r3, [r5, #0]
 8011726:	4223      	tst	r3, r4
 8011728:	d056      	beq.n	80117d8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801172a:	f7fe f925 	bl	800f978 <HAL_GetTick>
 801172e:	1b80      	subs	r0, r0, r6
 8011730:	2864      	cmp	r0, #100	; 0x64
 8011732:	d9f7      	bls.n	8011724 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8011734:	2003      	movs	r0, #3
 8011736:	e5d0      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8011738:	4a29      	ldr	r2, [pc, #164]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 801173a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801173c:	492b      	ldr	r1, [pc, #172]	; (80117ec <HAL_RCC_OscConfig+0x57c>)
 801173e:	400b      	ands	r3, r1
 8011740:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011742:	f7fe f919 	bl	800f978 <HAL_GetTick>
 8011746:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011748:	4e25      	ldr	r6, [pc, #148]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 801174a:	2580      	movs	r5, #128	; 0x80
 801174c:	026d      	lsls	r5, r5, #9
 801174e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011750:	422b      	tst	r3, r5
 8011752:	d0cf      	beq.n	80116f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011754:	f7fe f910 	bl	800f978 <HAL_GetTick>
 8011758:	1bc0      	subs	r0, r0, r7
 801175a:	2864      	cmp	r0, #100	; 0x64
 801175c:	d9f7      	bls.n	801174e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801175e:	2003      	movs	r0, #3
 8011760:	e5bb      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8011762:	4a1f      	ldr	r2, [pc, #124]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011764:	6813      	ldr	r3, [r2, #0]
 8011766:	4920      	ldr	r1, [pc, #128]	; (80117e8 <HAL_RCC_OscConfig+0x578>)
 8011768:	400b      	ands	r3, r1
 801176a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801176c:	f7fe f904 	bl	800f978 <HAL_GetTick>
 8011770:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011772:	4e1b      	ldr	r6, [pc, #108]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 8011774:	2580      	movs	r5, #128	; 0x80
 8011776:	04ad      	lsls	r5, r5, #18
 8011778:	6833      	ldr	r3, [r6, #0]
 801177a:	422b      	tst	r3, r5
 801177c:	d006      	beq.n	801178c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801177e:	f7fe f8fb 	bl	800f978 <HAL_GetTick>
 8011782:	1bc0      	subs	r0, r0, r7
 8011784:	2864      	cmp	r0, #100	; 0x64
 8011786:	d9f7      	bls.n	8011778 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8011788:	2003      	movs	r0, #3
 801178a:	e5a6      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801178c:	4b14      	ldr	r3, [pc, #80]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 801178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011790:	210f      	movs	r1, #15
 8011792:	438a      	bics	r2, r1
 8011794:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011796:	430a      	orrs	r2, r1
 8011798:	62da      	str	r2, [r3, #44]	; 0x2c
 801179a:	6859      	ldr	r1, [r3, #4]
 801179c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801179e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80117a0:	4302      	orrs	r2, r0
 80117a2:	4813      	ldr	r0, [pc, #76]	; (80117f0 <HAL_RCC_OscConfig+0x580>)
 80117a4:	4001      	ands	r1, r0
 80117a6:	430a      	orrs	r2, r1
 80117a8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80117aa:	6819      	ldr	r1, [r3, #0]
 80117ac:	2280      	movs	r2, #128	; 0x80
 80117ae:	0452      	lsls	r2, r2, #17
 80117b0:	430a      	orrs	r2, r1
 80117b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80117b4:	f7fe f8e0 	bl	800f978 <HAL_GetTick>
 80117b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80117ba:	4d09      	ldr	r5, [pc, #36]	; (80117e0 <HAL_RCC_OscConfig+0x570>)
 80117bc:	2480      	movs	r4, #128	; 0x80
 80117be:	04a4      	lsls	r4, r4, #18
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	4223      	tst	r3, r4
 80117c4:	d106      	bne.n	80117d4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80117c6:	f7fe f8d7 	bl	800f978 <HAL_GetTick>
 80117ca:	1b80      	subs	r0, r0, r6
 80117cc:	2864      	cmp	r0, #100	; 0x64
 80117ce:	d9f7      	bls.n	80117c0 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80117d0:	2003      	movs	r0, #3
 80117d2:	e582      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80117d4:	2000      	movs	r0, #0
 80117d6:	e580      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
 80117d8:	2000      	movs	r0, #0
 80117da:	e57e      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80117dc:	2001      	movs	r0, #1
 80117de:	e57c      	b.n	80112da <HAL_RCC_OscConfig+0x6a>
 80117e0:	40021000 	.word	0x40021000
 80117e4:	00001388 	.word	0x00001388
 80117e8:	feffffff 	.word	0xfeffffff
 80117ec:	fffeffff 	.word	0xfffeffff
 80117f0:	ffc27fff 	.word	0xffc27fff

080117f4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80117f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f6:	46ce      	mov	lr, r9
 80117f8:	4647      	mov	r7, r8
 80117fa:	b580      	push	{r7, lr}
 80117fc:	0005      	movs	r5, r0
 80117fe:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011800:	4b95      	ldr	r3, [pc, #596]	; (8011a58 <HAL_RCC_ClockConfig+0x264>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	2301      	movs	r3, #1
 8011806:	4013      	ands	r3, r2
 8011808:	428b      	cmp	r3, r1
 801180a:	d300      	bcc.n	801180e <HAL_RCC_ClockConfig+0x1a>
 801180c:	e089      	b.n	8011922 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801180e:	4992      	ldr	r1, [pc, #584]	; (8011a58 <HAL_RCC_ClockConfig+0x264>)
 8011810:	680b      	ldr	r3, [r1, #0]
 8011812:	2201      	movs	r2, #1
 8011814:	4393      	bics	r3, r2
 8011816:	4323      	orrs	r3, r4
 8011818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801181a:	680b      	ldr	r3, [r1, #0]
 801181c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801181e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011820:	42a2      	cmp	r2, r4
 8011822:	d003      	beq.n	801182c <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011824:	bc0c      	pop	{r2, r3}
 8011826:	4690      	mov	r8, r2
 8011828:	4699      	mov	r9, r3
 801182a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801182c:	682b      	ldr	r3, [r5, #0]
 801182e:	079b      	lsls	r3, r3, #30
 8011830:	d506      	bpl.n	8011840 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011832:	4a8a      	ldr	r2, [pc, #552]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011834:	6853      	ldr	r3, [r2, #4]
 8011836:	21f0      	movs	r1, #240	; 0xf0
 8011838:	438b      	bics	r3, r1
 801183a:	68a9      	ldr	r1, [r5, #8]
 801183c:	430b      	orrs	r3, r1
 801183e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011840:	682b      	ldr	r3, [r5, #0]
 8011842:	07db      	lsls	r3, r3, #31
 8011844:	d400      	bmi.n	8011848 <HAL_RCC_ClockConfig+0x54>
 8011846:	e0f7      	b.n	8011a38 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011848:	686b      	ldr	r3, [r5, #4]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d009      	beq.n	8011862 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801184e:	2b02      	cmp	r3, #2
 8011850:	d02b      	beq.n	80118aa <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011852:	2b03      	cmp	r3, #3
 8011854:	d02f      	beq.n	80118b6 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011856:	4a81      	ldr	r2, [pc, #516]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011858:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801185a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801185c:	0792      	lsls	r2, r2, #30
 801185e:	d405      	bmi.n	801186c <HAL_RCC_ClockConfig+0x78>
 8011860:	e7e0      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011862:	4a7e      	ldr	r2, [pc, #504]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011864:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011866:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011868:	0392      	lsls	r2, r2, #14
 801186a:	d5db      	bpl.n	8011824 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801186c:	497b      	ldr	r1, [pc, #492]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 801186e:	684a      	ldr	r2, [r1, #4]
 8011870:	2003      	movs	r0, #3
 8011872:	4382      	bics	r2, r0
 8011874:	4313      	orrs	r3, r2
 8011876:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011878:	f7fe f87e 	bl	800f978 <HAL_GetTick>
 801187c:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801187e:	686b      	ldr	r3, [r5, #4]
 8011880:	2b01      	cmp	r3, #1
 8011882:	d01e      	beq.n	80118c2 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011884:	2b02      	cmp	r3, #2
 8011886:	d02c      	beq.n	80118e2 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011888:	2b03      	cmp	r3, #3
 801188a:	d03a      	beq.n	8011902 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801188c:	4f73      	ldr	r7, [pc, #460]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 801188e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011890:	4b73      	ldr	r3, [pc, #460]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 8011892:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	421e      	tst	r6, r3
 8011898:	d100      	bne.n	801189c <HAL_RCC_ClockConfig+0xa8>
 801189a:	e0cd      	b.n	8011a38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801189c:	f7fe f86c 	bl	800f978 <HAL_GetTick>
 80118a0:	1b00      	subs	r0, r0, r4
 80118a2:	4540      	cmp	r0, r8
 80118a4:	d9f6      	bls.n	8011894 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80118a6:	2003      	movs	r0, #3
 80118a8:	e7bc      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118aa:	4a6c      	ldr	r2, [pc, #432]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80118ac:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80118ae:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118b0:	0192      	lsls	r2, r2, #6
 80118b2:	d4db      	bmi.n	801186c <HAL_RCC_ClockConfig+0x78>
 80118b4:	e7b6      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80118b6:	4a69      	ldr	r2, [pc, #420]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80118b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80118ba:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80118bc:	03d2      	lsls	r2, r2, #15
 80118be:	d4d5      	bmi.n	801186c <HAL_RCC_ClockConfig+0x78>
 80118c0:	e7b0      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80118c2:	4f66      	ldr	r7, [pc, #408]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80118c4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118c6:	4b66      	ldr	r3, [pc, #408]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 80118c8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4033      	ands	r3, r6
 80118ce:	2b04      	cmp	r3, #4
 80118d0:	d100      	bne.n	80118d4 <HAL_RCC_ClockConfig+0xe0>
 80118d2:	e0b1      	b.n	8011a38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118d4:	f7fe f850 	bl	800f978 <HAL_GetTick>
 80118d8:	1b00      	subs	r0, r0, r4
 80118da:	4540      	cmp	r0, r8
 80118dc:	d9f5      	bls.n	80118ca <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80118de:	2003      	movs	r0, #3
 80118e0:	e7a0      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80118e2:	4f5e      	ldr	r7, [pc, #376]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80118e4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118e6:	4b5e      	ldr	r3, [pc, #376]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 80118e8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4033      	ands	r3, r6
 80118ee:	2b08      	cmp	r3, #8
 80118f0:	d100      	bne.n	80118f4 <HAL_RCC_ClockConfig+0x100>
 80118f2:	e0a1      	b.n	8011a38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118f4:	f7fe f840 	bl	800f978 <HAL_GetTick>
 80118f8:	1b00      	subs	r0, r0, r4
 80118fa:	4540      	cmp	r0, r8
 80118fc:	d9f5      	bls.n	80118ea <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 80118fe:	2003      	movs	r0, #3
 8011900:	e790      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011902:	4f56      	ldr	r7, [pc, #344]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011904:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011906:	4b56      	ldr	r3, [pc, #344]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 8011908:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4033      	ands	r3, r6
 801190e:	2b0c      	cmp	r3, #12
 8011910:	d100      	bne.n	8011914 <HAL_RCC_ClockConfig+0x120>
 8011912:	e091      	b.n	8011a38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011914:	f7fe f830 	bl	800f978 <HAL_GetTick>
 8011918:	1b00      	subs	r0, r0, r4
 801191a:	4540      	cmp	r0, r8
 801191c:	d9f5      	bls.n	801190a <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801191e:	2003      	movs	r0, #3
 8011920:	e780      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011922:	6803      	ldr	r3, [r0, #0]
 8011924:	079b      	lsls	r3, r3, #30
 8011926:	d506      	bpl.n	8011936 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011928:	4a4c      	ldr	r2, [pc, #304]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 801192a:	6853      	ldr	r3, [r2, #4]
 801192c:	21f0      	movs	r1, #240	; 0xf0
 801192e:	438b      	bics	r3, r1
 8011930:	6881      	ldr	r1, [r0, #8]
 8011932:	430b      	orrs	r3, r1
 8011934:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011936:	682b      	ldr	r3, [r5, #0]
 8011938:	07db      	lsls	r3, r3, #31
 801193a:	d571      	bpl.n	8011a20 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801193c:	686b      	ldr	r3, [r5, #4]
 801193e:	2b01      	cmp	r3, #1
 8011940:	d009      	beq.n	8011956 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011942:	2b02      	cmp	r3, #2
 8011944:	d02d      	beq.n	80119a2 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011946:	2b03      	cmp	r3, #3
 8011948:	d031      	beq.n	80119ae <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801194a:	4a44      	ldr	r2, [pc, #272]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 801194c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801194e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011950:	0792      	lsls	r2, r2, #30
 8011952:	d406      	bmi.n	8011962 <HAL_RCC_ClockConfig+0x16e>
 8011954:	e766      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011956:	4a41      	ldr	r2, [pc, #260]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011958:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801195a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801195c:	0392      	lsls	r2, r2, #14
 801195e:	d400      	bmi.n	8011962 <HAL_RCC_ClockConfig+0x16e>
 8011960:	e760      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011962:	493e      	ldr	r1, [pc, #248]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011964:	684a      	ldr	r2, [r1, #4]
 8011966:	2003      	movs	r0, #3
 8011968:	4382      	bics	r2, r0
 801196a:	4313      	orrs	r3, r2
 801196c:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801196e:	f7fe f803 	bl	800f978 <HAL_GetTick>
 8011972:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011974:	686b      	ldr	r3, [r5, #4]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d01f      	beq.n	80119ba <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801197a:	2b02      	cmp	r3, #2
 801197c:	d02e      	beq.n	80119dc <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801197e:	2b03      	cmp	r3, #3
 8011980:	d03d      	beq.n	80119fe <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011982:	4b36      	ldr	r3, [pc, #216]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011984:	4698      	mov	r8, r3
 8011986:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011988:	4b35      	ldr	r3, [pc, #212]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 801198a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801198c:	4643      	mov	r3, r8
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	421f      	tst	r7, r3
 8011992:	d045      	beq.n	8011a20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011994:	f7fd fff0 	bl	800f978 <HAL_GetTick>
 8011998:	1b80      	subs	r0, r0, r6
 801199a:	4548      	cmp	r0, r9
 801199c:	d9f6      	bls.n	801198c <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 801199e:	2003      	movs	r0, #3
 80119a0:	e740      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80119a2:	4a2e      	ldr	r2, [pc, #184]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80119a4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80119a6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80119a8:	0192      	lsls	r2, r2, #6
 80119aa:	d4da      	bmi.n	8011962 <HAL_RCC_ClockConfig+0x16e>
 80119ac:	e73a      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80119ae:	4a2b      	ldr	r2, [pc, #172]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80119b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80119b2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80119b4:	03d2      	lsls	r2, r2, #15
 80119b6:	d4d4      	bmi.n	8011962 <HAL_RCC_ClockConfig+0x16e>
 80119b8:	e734      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80119ba:	4b28      	ldr	r3, [pc, #160]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80119bc:	4698      	mov	r8, r3
 80119be:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119c0:	4b27      	ldr	r3, [pc, #156]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 80119c2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80119c4:	4643      	mov	r3, r8
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	403b      	ands	r3, r7
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	d028      	beq.n	8011a20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119ce:	f7fd ffd3 	bl	800f978 <HAL_GetTick>
 80119d2:	1b80      	subs	r0, r0, r6
 80119d4:	4548      	cmp	r0, r9
 80119d6:	d9f5      	bls.n	80119c4 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80119d8:	2003      	movs	r0, #3
 80119da:	e723      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80119dc:	4b1f      	ldr	r3, [pc, #124]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 80119de:	4698      	mov	r8, r3
 80119e0:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119e2:	4b1f      	ldr	r3, [pc, #124]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 80119e4:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80119e6:	4643      	mov	r3, r8
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	403b      	ands	r3, r7
 80119ec:	2b08      	cmp	r3, #8
 80119ee:	d017      	beq.n	8011a20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119f0:	f7fd ffc2 	bl	800f978 <HAL_GetTick>
 80119f4:	1b80      	subs	r0, r0, r6
 80119f6:	4548      	cmp	r0, r9
 80119f8:	d9f5      	bls.n	80119e6 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 80119fa:	2003      	movs	r0, #3
 80119fc:	e712      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80119fe:	4b17      	ldr	r3, [pc, #92]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011a00:	4698      	mov	r8, r3
 8011a02:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a04:	4b16      	ldr	r3, [pc, #88]	; (8011a60 <HAL_RCC_ClockConfig+0x26c>)
 8011a06:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011a08:	4643      	mov	r3, r8
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	403b      	ands	r3, r7
 8011a0e:	2b0c      	cmp	r3, #12
 8011a10:	d006      	beq.n	8011a20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a12:	f7fd ffb1 	bl	800f978 <HAL_GetTick>
 8011a16:	1b80      	subs	r0, r0, r6
 8011a18:	4548      	cmp	r0, r9
 8011a1a:	d9f5      	bls.n	8011a08 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8011a1c:	2003      	movs	r0, #3
 8011a1e:	e701      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011a20:	490d      	ldr	r1, [pc, #52]	; (8011a58 <HAL_RCC_ClockConfig+0x264>)
 8011a22:	680b      	ldr	r3, [r1, #0]
 8011a24:	2201      	movs	r2, #1
 8011a26:	4393      	bics	r3, r2
 8011a28:	4323      	orrs	r3, r4
 8011a2a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011a2c:	680b      	ldr	r3, [r1, #0]
 8011a2e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8011a30:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011a32:	42a2      	cmp	r2, r4
 8011a34:	d000      	beq.n	8011a38 <HAL_RCC_ClockConfig+0x244>
 8011a36:	e6f5      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	075b      	lsls	r3, r3, #29
 8011a3c:	d506      	bpl.n	8011a4c <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011a3e:	4a07      	ldr	r2, [pc, #28]	; (8011a5c <HAL_RCC_ClockConfig+0x268>)
 8011a40:	6853      	ldr	r3, [r2, #4]
 8011a42:	4908      	ldr	r1, [pc, #32]	; (8011a64 <HAL_RCC_ClockConfig+0x270>)
 8011a44:	400b      	ands	r3, r1
 8011a46:	68e9      	ldr	r1, [r5, #12]
 8011a48:	430b      	orrs	r3, r1
 8011a4a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	f7fd ff69 	bl	800f924 <HAL_InitTick>
  return HAL_OK;
 8011a52:	2000      	movs	r0, #0
 8011a54:	e6e6      	b.n	8011824 <HAL_RCC_ClockConfig+0x30>
 8011a56:	46c0      	nop			; (mov r8, r8)
 8011a58:	40022000 	.word	0x40022000
 8011a5c:	40021000 	.word	0x40021000
 8011a60:	00001388 	.word	0x00001388
 8011a64:	fffff8ff 	.word	0xfffff8ff

08011a68 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011a68:	b530      	push	{r4, r5, lr}
 8011a6a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011a6c:	aa04      	add	r2, sp, #16
 8011a6e:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011a70:	0018      	movs	r0, r3
 8011a72:	c832      	ldmia	r0!, {r1, r4, r5}
 8011a74:	c232      	stmia	r2!, {r1, r4, r5}
 8011a76:	0011      	movs	r1, r2
 8011a78:	6802      	ldr	r2, [r0, #0]
 8011a7a:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011a7c:	466a      	mov	r2, sp
 8011a7e:	3310      	adds	r3, #16
 8011a80:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011a82:	c213      	stmia	r2!, {r0, r1, r4}
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011a88:	4b1b      	ldr	r3, [pc, #108]	; (8011af8 <HAL_RCC_GetSysClockFreq+0x90>)
 8011a8a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011a8c:	200c      	movs	r0, #12
 8011a8e:	4018      	ands	r0, r3
 8011a90:	2808      	cmp	r0, #8
 8011a92:	d00a      	beq.n	8011aaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011a94:	380c      	subs	r0, #12
 8011a96:	4243      	negs	r3, r0
 8011a98:	4158      	adcs	r0, r3
 8011a9a:	4240      	negs	r0, r0
 8011a9c:	4b17      	ldr	r3, [pc, #92]	; (8011afc <HAL_RCC_GetSysClockFreq+0x94>)
 8011a9e:	4018      	ands	r0, r3
 8011aa0:	4b17      	ldr	r3, [pc, #92]	; (8011b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8011aa2:	469c      	mov	ip, r3
 8011aa4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011aa6:	b009      	add	sp, #36	; 0x24
 8011aa8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011aaa:	0c99      	lsrs	r1, r3, #18
 8011aac:	220f      	movs	r2, #15
 8011aae:	4011      	ands	r1, r2
 8011ab0:	a804      	add	r0, sp, #16
 8011ab2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011ab4:	4910      	ldr	r1, [pc, #64]	; (8011af8 <HAL_RCC_GetSysClockFreq+0x90>)
 8011ab6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011ab8:	400a      	ands	r2, r1
 8011aba:	4669      	mov	r1, sp
 8011abc:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011abe:	22c0      	movs	r2, #192	; 0xc0
 8011ac0:	0252      	lsls	r2, r2, #9
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	2280      	movs	r2, #128	; 0x80
 8011ac6:	0252      	lsls	r2, r2, #9
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d008      	beq.n	8011ade <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011acc:	22c0      	movs	r2, #192	; 0xc0
 8011ace:	0252      	lsls	r2, r2, #9
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d009      	beq.n	8011ae8 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011ad4:	480a      	ldr	r0, [pc, #40]	; (8011b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8011ad6:	f7ee fb31 	bl	800013c <__udivsi3>
 8011ada:	4360      	muls	r0, r4
 8011adc:	e7e3      	b.n	8011aa6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011ade:	4808      	ldr	r0, [pc, #32]	; (8011b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8011ae0:	f7ee fb2c 	bl	800013c <__udivsi3>
 8011ae4:	4360      	muls	r0, r4
 8011ae6:	e7de      	b.n	8011aa6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011ae8:	4806      	ldr	r0, [pc, #24]	; (8011b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8011aea:	f7ee fb27 	bl	800013c <__udivsi3>
 8011aee:	4360      	muls	r0, r4
 8011af0:	e7d9      	b.n	8011aa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8011af2:	46c0      	nop			; (mov r8, r8)
 8011af4:	0801671c 	.word	0x0801671c
 8011af8:	40021000 	.word	0x40021000
 8011afc:	02625a00 	.word	0x02625a00
 8011b00:	007a1200 	.word	0x007a1200
 8011b04:	02dc6c00 	.word	0x02dc6c00

08011b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011b08:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011b0a:	f7ff ffad 	bl	8011a68 <HAL_RCC_GetSysClockFreq>
 8011b0e:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <HAL_RCC_GetHCLKFreq+0x1c>)
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	061b      	lsls	r3, r3, #24
 8011b14:	0f1b      	lsrs	r3, r3, #28
 8011b16:	4a04      	ldr	r2, [pc, #16]	; (8011b28 <HAL_RCC_GetHCLKFreq+0x20>)
 8011b18:	5cd3      	ldrb	r3, [r2, r3]
 8011b1a:	40d8      	lsrs	r0, r3
 8011b1c:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <HAL_RCC_GetHCLKFreq+0x24>)
 8011b1e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011b20:	bd10      	pop	{r4, pc}
 8011b22:	46c0      	nop			; (mov r8, r8)
 8011b24:	40021000 	.word	0x40021000
 8011b28:	080197bc 	.word	0x080197bc
 8011b2c:	200000ac 	.word	0x200000ac

08011b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011b30:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011b32:	f7ff ffe9 	bl	8011b08 <HAL_RCC_GetHCLKFreq>
 8011b36:	4b04      	ldr	r3, [pc, #16]	; (8011b48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	055b      	lsls	r3, r3, #21
 8011b3c:	0f5b      	lsrs	r3, r3, #29
 8011b3e:	4a03      	ldr	r2, [pc, #12]	; (8011b4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011b40:	5cd3      	ldrb	r3, [r2, r3]
 8011b42:	40d8      	lsrs	r0, r3
}    
 8011b44:	bd10      	pop	{r4, pc}
 8011b46:	46c0      	nop			; (mov r8, r8)
 8011b48:	40021000 	.word	0x40021000
 8011b4c:	080197bc 	.word	0x080197bc

08011b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b52:	46c6      	mov	lr, r8
 8011b54:	b500      	push	{lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011b5a:	6803      	ldr	r3, [r0, #0]
 8011b5c:	03db      	lsls	r3, r3, #15
 8011b5e:	d507      	bpl.n	8011b70 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011b60:	4b43      	ldr	r3, [pc, #268]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011b62:	6a1b      	ldr	r3, [r3, #32]
 8011b64:	6842      	ldr	r2, [r0, #4]
 8011b66:	4053      	eors	r3, r2
 8011b68:	22c0      	movs	r2, #192	; 0xc0
 8011b6a:	0092      	lsls	r2, r2, #2
 8011b6c:	4213      	tst	r3, r2
 8011b6e:	d136      	bne.n	8011bde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	07db      	lsls	r3, r3, #31
 8011b74:	d506      	bpl.n	8011b84 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b76:	4a3e      	ldr	r2, [pc, #248]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011b78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011b7a:	2103      	movs	r1, #3
 8011b7c:	438b      	bics	r3, r1
 8011b7e:	68a1      	ldr	r1, [r4, #8]
 8011b80:	430b      	orrs	r3, r1
 8011b82:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	079b      	lsls	r3, r3, #30
 8011b88:	d506      	bpl.n	8011b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011b8a:	4a39      	ldr	r2, [pc, #228]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011b8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011b8e:	4939      	ldr	r1, [pc, #228]	; (8011c74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011b90:	400b      	ands	r3, r1
 8011b92:	68e1      	ldr	r1, [r4, #12]
 8011b94:	430b      	orrs	r3, r1
 8011b96:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	035b      	lsls	r3, r3, #13
 8011b9c:	d506      	bpl.n	8011bac <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011b9e:	4a34      	ldr	r2, [pc, #208]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ba0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011ba2:	4935      	ldr	r1, [pc, #212]	; (8011c78 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011ba4:	400b      	ands	r3, r1
 8011ba6:	6921      	ldr	r1, [r4, #16]
 8011ba8:	430b      	orrs	r3, r1
 8011baa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	069b      	lsls	r3, r3, #26
 8011bb0:	d506      	bpl.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011bb2:	4a2f      	ldr	r2, [pc, #188]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011bb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011bb6:	2110      	movs	r1, #16
 8011bb8:	438b      	bics	r3, r1
 8011bba:	6961      	ldr	r1, [r4, #20]
 8011bbc:	430b      	orrs	r3, r1
 8011bbe:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011bc0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011bc2:	6823      	ldr	r3, [r4, #0]
 8011bc4:	055b      	lsls	r3, r3, #21
 8011bc6:	d506      	bpl.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011bc8:	4a29      	ldr	r2, [pc, #164]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011bca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011bcc:	2140      	movs	r1, #64	; 0x40
 8011bce:	438b      	bics	r3, r1
 8011bd0:	69a1      	ldr	r1, [r4, #24]
 8011bd2:	430b      	orrs	r3, r1
 8011bd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011bd6:	b002      	add	sp, #8
 8011bd8:	bc04      	pop	{r2}
 8011bda:	4690      	mov	r8, r2
 8011bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bde:	4a24      	ldr	r2, [pc, #144]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011be0:	69d1      	ldr	r1, [r2, #28]
 8011be2:	2080      	movs	r0, #128	; 0x80
 8011be4:	0540      	lsls	r0, r0, #21
 8011be6:	4301      	orrs	r1, r0
 8011be8:	61d1      	str	r1, [r2, #28]
 8011bea:	69d3      	ldr	r3, [r2, #28]
 8011bec:	4003      	ands	r3, r0
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011bf2:	4a22      	ldr	r2, [pc, #136]	; (8011c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011bf4:	6811      	ldr	r1, [r2, #0]
 8011bf6:	2380      	movs	r3, #128	; 0x80
 8011bf8:	005b      	lsls	r3, r3, #1
 8011bfa:	430b      	orrs	r3, r1
 8011bfc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011bfe:	f7fd febb 	bl	800f978 <HAL_GetTick>
 8011c02:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011c04:	4e1d      	ldr	r6, [pc, #116]	; (8011c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011c06:	2580      	movs	r5, #128	; 0x80
 8011c08:	006d      	lsls	r5, r5, #1
 8011c0a:	6833      	ldr	r3, [r6, #0]
 8011c0c:	422b      	tst	r3, r5
 8011c0e:	d106      	bne.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011c10:	f7fd feb2 	bl	800f978 <HAL_GetTick>
 8011c14:	1bc0      	subs	r0, r0, r7
 8011c16:	2864      	cmp	r0, #100	; 0x64
 8011c18:	d9f7      	bls.n	8011c0a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011c1a:	2003      	movs	r0, #3
 8011c1c:	e7db      	b.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011c1e:	4b14      	ldr	r3, [pc, #80]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011c20:	6a18      	ldr	r0, [r3, #32]
 8011c22:	4a17      	ldr	r2, [pc, #92]	; (8011c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011c24:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011c26:	6a1d      	ldr	r5, [r3, #32]
 8011c28:	2180      	movs	r1, #128	; 0x80
 8011c2a:	0249      	lsls	r1, r1, #9
 8011c2c:	4329      	orrs	r1, r5
 8011c2e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011c30:	6a19      	ldr	r1, [r3, #32]
 8011c32:	4d14      	ldr	r5, [pc, #80]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011c34:	4029      	ands	r1, r5
 8011c36:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011c38:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011c3a:	0783      	lsls	r3, r0, #30
 8011c3c:	d407      	bmi.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011c3e:	4a0c      	ldr	r2, [pc, #48]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011c40:	6a13      	ldr	r3, [r2, #32]
 8011c42:	490f      	ldr	r1, [pc, #60]	; (8011c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011c44:	400b      	ands	r3, r1
 8011c46:	6861      	ldr	r1, [r4, #4]
 8011c48:	430b      	orrs	r3, r1
 8011c4a:	6213      	str	r3, [r2, #32]
 8011c4c:	e790      	b.n	8011b70 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011c4e:	f7fd fe93 	bl	800f978 <HAL_GetTick>
 8011c52:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c54:	4e06      	ldr	r6, [pc, #24]	; (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011c56:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c58:	4f0b      	ldr	r7, [pc, #44]	; (8011c88 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c5a:	6a33      	ldr	r3, [r6, #32]
 8011c5c:	421d      	tst	r5, r3
 8011c5e:	d1ee      	bne.n	8011c3e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c60:	f7fd fe8a 	bl	800f978 <HAL_GetTick>
 8011c64:	4643      	mov	r3, r8
 8011c66:	1ac0      	subs	r0, r0, r3
 8011c68:	42b8      	cmp	r0, r7
 8011c6a:	d9f6      	bls.n	8011c5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8011c6c:	2003      	movs	r0, #3
 8011c6e:	e7b2      	b.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011c70:	40021000 	.word	0x40021000
 8011c74:	fffcffff 	.word	0xfffcffff
 8011c78:	fff3ffff 	.word	0xfff3ffff
 8011c7c:	40007000 	.word	0x40007000
 8011c80:	fffffcff 	.word	0xfffffcff
 8011c84:	fffeffff 	.word	0xfffeffff
 8011c88:	00001388 	.word	0x00001388

08011c8c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011c8c:	4770      	bx	lr

08011c8e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c90:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011c92:	6802      	ldr	r2, [r0, #0]
 8011c94:	68d3      	ldr	r3, [r2, #12]
 8011c96:	21a0      	movs	r1, #160	; 0xa0
 8011c98:	438b      	bics	r3, r1
 8011c9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011c9c:	f7fd fe6c 	bl	800f978 <HAL_GetTick>
 8011ca0:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011ca2:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011ca4:	26fa      	movs	r6, #250	; 0xfa
 8011ca6:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	421d      	tst	r5, r3
 8011cae:	d106      	bne.n	8011cbe <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011cb0:	f7fd fe62 	bl	800f978 <HAL_GetTick>
 8011cb4:	1bc0      	subs	r0, r0, r7
 8011cb6:	42b0      	cmp	r0, r6
 8011cb8:	d9f6      	bls.n	8011ca8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8011cba:	2003      	movs	r0, #3
 8011cbc:	e000      	b.n	8011cc0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8011cbe:	2000      	movs	r0, #0
}
 8011cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cc2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8011cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011cc6:	6803      	ldr	r3, [r0, #0]
 8011cc8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8011cca:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011ccc:	0652      	lsls	r2, r2, #25
 8011cce:	d500      	bpl.n	8011cd2 <RTC_EnterInitMode+0x10>
}
 8011cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	4252      	negs	r2, r2
 8011cd6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011cd8:	f7fd fe4e 	bl	800f978 <HAL_GetTick>
 8011cdc:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011cde:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011ce0:	26fa      	movs	r6, #250	; 0xfa
 8011ce2:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011ce4:	6823      	ldr	r3, [r4, #0]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	421d      	tst	r5, r3
 8011cea:	d106      	bne.n	8011cfa <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011cec:	f7fd fe44 	bl	800f978 <HAL_GetTick>
 8011cf0:	1bc0      	subs	r0, r0, r7
 8011cf2:	42b0      	cmp	r0, r6
 8011cf4:	d9f6      	bls.n	8011ce4 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011cf6:	2003      	movs	r0, #3
 8011cf8:	e7ea      	b.n	8011cd0 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	e7e8      	b.n	8011cd0 <RTC_EnterInitMode+0xe>
	...

08011d00 <HAL_RTC_Init>:
{
 8011d00:	b570      	push	{r4, r5, r6, lr}
 8011d02:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011d04:	d046      	beq.n	8011d94 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011d06:	7f43      	ldrb	r3, [r0, #29]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d038      	beq.n	8011d7e <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011d0c:	2302      	movs	r3, #2
 8011d0e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	22ca      	movs	r2, #202	; 0xca
 8011d14:	625a      	str	r2, [r3, #36]	; 0x24
 8011d16:	6823      	ldr	r3, [r4, #0]
 8011d18:	3a77      	subs	r2, #119	; 0x77
 8011d1a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d1c:	0020      	movs	r0, r4
 8011d1e:	f7ff ffd0 	bl	8011cc2 <RTC_EnterInitMode>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d12f      	bne.n	8011d86 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011d26:	6822      	ldr	r2, [r4, #0]
 8011d28:	6893      	ldr	r3, [r2, #8]
 8011d2a:	491b      	ldr	r1, [pc, #108]	; (8011d98 <HAL_RTC_Init+0x98>)
 8011d2c:	400b      	ands	r3, r1
 8011d2e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011d30:	6822      	ldr	r2, [r4, #0]
 8011d32:	6891      	ldr	r1, [r2, #8]
 8011d34:	6863      	ldr	r3, [r4, #4]
 8011d36:	6925      	ldr	r5, [r4, #16]
 8011d38:	432b      	orrs	r3, r5
 8011d3a:	6965      	ldr	r5, [r4, #20]
 8011d3c:	432b      	orrs	r3, r5
 8011d3e:	430b      	orrs	r3, r1
 8011d40:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	68e2      	ldr	r2, [r4, #12]
 8011d46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011d48:	6822      	ldr	r2, [r4, #0]
 8011d4a:	6911      	ldr	r1, [r2, #16]
 8011d4c:	68a3      	ldr	r3, [r4, #8]
 8011d4e:	041b      	lsls	r3, r3, #16
 8011d50:	430b      	orrs	r3, r1
 8011d52:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011d54:	6822      	ldr	r2, [r4, #0]
 8011d56:	68d3      	ldr	r3, [r2, #12]
 8011d58:	2180      	movs	r1, #128	; 0x80
 8011d5a:	438b      	bics	r3, r1
 8011d5c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011d5e:	6822      	ldr	r2, [r4, #0]
 8011d60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011d62:	490e      	ldr	r1, [pc, #56]	; (8011d9c <HAL_RTC_Init+0x9c>)
 8011d64:	400b      	ands	r3, r1
 8011d66:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011d68:	6822      	ldr	r2, [r4, #0]
 8011d6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011d6c:	69a1      	ldr	r1, [r4, #24]
 8011d6e:	430b      	orrs	r3, r1
 8011d70:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011d72:	6823      	ldr	r3, [r4, #0]
 8011d74:	22ff      	movs	r2, #255	; 0xff
 8011d76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	7763      	strb	r3, [r4, #29]
}
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011d7e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011d80:	f7ff ff84 	bl	8011c8c <HAL_RTC_MspInit>
 8011d84:	e7c2      	b.n	8011d0c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	22ff      	movs	r2, #255	; 0xff
 8011d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011d8c:	2304      	movs	r3, #4
 8011d8e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011d90:	2001      	movs	r0, #1
 8011d92:	e7f3      	b.n	8011d7c <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8011d94:	2001      	movs	r0, #1
 8011d96:	e7f1      	b.n	8011d7c <HAL_RTC_Init+0x7c>
 8011d98:	ff8fffbf 	.word	0xff8fffbf
 8011d9c:	fffbffff 	.word	0xfffbffff

08011da0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011da0:	2809      	cmp	r0, #9
 8011da2:	d909      	bls.n	8011db8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8011da4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8011da6:	3301      	adds	r3, #1
    Value -= 10;
 8011da8:	380a      	subs	r0, #10
 8011daa:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8011dac:	2809      	cmp	r0, #9
 8011dae:	d8fa      	bhi.n	8011da6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011db0:	011b      	lsls	r3, r3, #4
 8011db2:	4318      	orrs	r0, r3
 8011db4:	b2c0      	uxtb	r0, r0
}
 8011db6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8011db8:	2300      	movs	r3, #0
 8011dba:	e7f9      	b.n	8011db0 <RTC_ByteToBcd2+0x10>

08011dbc <HAL_RTC_SetTime>:
{
 8011dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dbe:	46c6      	mov	lr, r8
 8011dc0:	b500      	push	{lr}
 8011dc2:	0004      	movs	r4, r0
 8011dc4:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011dc6:	7f03      	ldrb	r3, [r0, #28]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d100      	bne.n	8011dce <HAL_RTC_SetTime+0x12>
 8011dcc:	e075      	b.n	8011eba <HAL_RTC_SetTime+0xfe>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011dd6:	2a00      	cmp	r2, #0
 8011dd8:	d144      	bne.n	8011e64 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011dda:	6803      	ldr	r3, [r0, #0]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	065b      	lsls	r3, r3, #25
 8011de0:	d401      	bmi.n	8011de6 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8011de2:	2300      	movs	r3, #0
 8011de4:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011de6:	7830      	ldrb	r0, [r6, #0]
 8011de8:	f7ff ffda 	bl	8011da0 <RTC_ByteToBcd2>
 8011dec:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011dee:	7870      	ldrb	r0, [r6, #1]
 8011df0:	f7ff ffd6 	bl	8011da0 <RTC_ByteToBcd2>
 8011df4:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011df6:	78b0      	ldrb	r0, [r6, #2]
 8011df8:	f7ff ffd2 	bl	8011da0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011dfc:	7a35      	ldrb	r5, [r6, #8]
 8011dfe:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011e00:	4305      	orrs	r5, r0
 8011e02:	4643      	mov	r3, r8
 8011e04:	0418      	lsls	r0, r3, #16
 8011e06:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011e08:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011e0a:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	22ca      	movs	r2, #202	; 0xca
 8011e10:	625a      	str	r2, [r3, #36]	; 0x24
 8011e12:	6823      	ldr	r3, [r4, #0]
 8011e14:	3a77      	subs	r2, #119	; 0x77
 8011e16:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011e18:	0020      	movs	r0, r4
 8011e1a:	f7ff ff52 	bl	8011cc2 <RTC_EnterInitMode>
 8011e1e:	1e07      	subs	r7, r0, #0
 8011e20:	d131      	bne.n	8011e86 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	4826      	ldr	r0, [pc, #152]	; (8011ec0 <HAL_RTC_SetTime+0x104>)
 8011e26:	4005      	ands	r5, r0
 8011e28:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011e2a:	6822      	ldr	r2, [r4, #0]
 8011e2c:	6893      	ldr	r3, [r2, #8]
 8011e2e:	4925      	ldr	r1, [pc, #148]	; (8011ec4 <HAL_RTC_SetTime+0x108>)
 8011e30:	400b      	ands	r3, r1
 8011e32:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011e34:	6822      	ldr	r2, [r4, #0]
 8011e36:	6891      	ldr	r1, [r2, #8]
 8011e38:	68f3      	ldr	r3, [r6, #12]
 8011e3a:	6930      	ldr	r0, [r6, #16]
 8011e3c:	4303      	orrs	r3, r0
 8011e3e:	430b      	orrs	r3, r1
 8011e40:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	68d3      	ldr	r3, [r2, #12]
 8011e46:	2180      	movs	r1, #128	; 0x80
 8011e48:	438b      	bics	r3, r1
 8011e4a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	069b      	lsls	r3, r3, #26
 8011e52:	d524      	bpl.n	8011e9e <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e54:	6823      	ldr	r3, [r4, #0]
 8011e56:	22ff      	movs	r2, #255	; 0xff
 8011e58:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011e5e:	2300      	movs	r3, #0
 8011e60:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8011e62:	e018      	b.n	8011e96 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011e64:	6803      	ldr	r3, [r0, #0]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	065b      	lsls	r3, r3, #25
 8011e6a:	d401      	bmi.n	8011e70 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011e70:	7835      	ldrb	r5, [r6, #0]
 8011e72:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011e74:	7870      	ldrb	r0, [r6, #1]
 8011e76:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011e78:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011e7a:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011e7c:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011e7e:	7a30      	ldrb	r0, [r6, #8]
 8011e80:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011e82:	4305      	orrs	r5, r0
 8011e84:	e7c2      	b.n	8011e0c <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011e86:	6823      	ldr	r3, [r4, #0]
 8011e88:	22ff      	movs	r2, #255	; 0xff
 8011e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011e8c:	2304      	movs	r3, #4
 8011e8e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011e90:	2300      	movs	r3, #0
 8011e92:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011e94:	2701      	movs	r7, #1
}
 8011e96:	0038      	movs	r0, r7
 8011e98:	bc04      	pop	{r2}
 8011e9a:	4690      	mov	r8, r2
 8011e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e9e:	0020      	movs	r0, r4
 8011ea0:	f7ff fef5 	bl	8011c8e <HAL_RTC_WaitForSynchro>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d0d5      	beq.n	8011e54 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	22ff      	movs	r2, #255	; 0xff
 8011eac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011eae:	2304      	movs	r3, #4
 8011eb0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011eb6:	2701      	movs	r7, #1
 8011eb8:	e7ed      	b.n	8011e96 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8011eba:	2702      	movs	r7, #2
 8011ebc:	e7eb      	b.n	8011e96 <HAL_RTC_SetTime+0xda>
 8011ebe:	46c0      	nop			; (mov r8, r8)
 8011ec0:	007f7f7f 	.word	0x007f7f7f
 8011ec4:	fffbffff 	.word	0xfffbffff

08011ec8 <HAL_RTC_SetDate>:
{
 8011ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eca:	46c6      	mov	lr, r8
 8011ecc:	b500      	push	{lr}
 8011ece:	0004      	movs	r4, r0
 8011ed0:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8011ed2:	7f03      	ldrb	r3, [r0, #28]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d03a      	beq.n	8011f4e <HAL_RTC_SetDate+0x86>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011edc:	3301      	adds	r3, #1
 8011ede:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011ee0:	2a00      	cmp	r2, #0
 8011ee2:	d136      	bne.n	8011f52 <HAL_RTC_SetDate+0x8a>
 8011ee4:	784b      	ldrb	r3, [r1, #1]
 8011ee6:	06da      	lsls	r2, r3, #27
 8011ee8:	d503      	bpl.n	8011ef2 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011eea:	2210      	movs	r2, #16
 8011eec:	4393      	bics	r3, r2
 8011eee:	330a      	adds	r3, #10
 8011ef0:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011ef2:	78f0      	ldrb	r0, [r6, #3]
 8011ef4:	f7ff ff54 	bl	8011da0 <RTC_ByteToBcd2>
 8011ef8:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011efa:	7870      	ldrb	r0, [r6, #1]
 8011efc:	f7ff ff50 	bl	8011da0 <RTC_ByteToBcd2>
 8011f00:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011f02:	78b0      	ldrb	r0, [r6, #2]
 8011f04:	f7ff ff4c 	bl	8011da0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011f08:	7835      	ldrb	r5, [r6, #0]
 8011f0a:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011f0c:	4305      	orrs	r5, r0
 8011f0e:	4643      	mov	r3, r8
 8011f10:	0418      	lsls	r0, r3, #16
 8011f12:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011f14:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011f16:	433d      	orrs	r5, r7
 8011f18:	e025      	b.n	8011f66 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	22ff      	movs	r2, #255	; 0xff
 8011f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011f20:	2304      	movs	r3, #4
 8011f22:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011f24:	2300      	movs	r3, #0
 8011f26:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011f28:	2601      	movs	r6, #1
}
 8011f2a:	0030      	movs	r0, r6
 8011f2c:	bc04      	pop	{r2}
 8011f2e:	4690      	mov	r8, r2
 8011f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f32:	0020      	movs	r0, r4
 8011f34:	f7ff feab 	bl	8011c8e <HAL_RTC_WaitForSynchro>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d02c      	beq.n	8011f96 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011f3c:	6823      	ldr	r3, [r4, #0]
 8011f3e:	22ff      	movs	r2, #255	; 0xff
 8011f40:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011f42:	2304      	movs	r3, #4
 8011f44:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011f46:	2300      	movs	r3, #0
 8011f48:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011f4a:	2601      	movs	r6, #1
 8011f4c:	e7ed      	b.n	8011f2a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011f4e:	2602      	movs	r6, #2
 8011f50:	e7eb      	b.n	8011f2a <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f52:	78cd      	ldrb	r5, [r1, #3]
 8011f54:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011f56:	7848      	ldrb	r0, [r1, #1]
 8011f58:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f5a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011f5c:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011f5e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011f60:	7808      	ldrb	r0, [r1, #0]
 8011f62:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f64:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f66:	6823      	ldr	r3, [r4, #0]
 8011f68:	22ca      	movs	r2, #202	; 0xca
 8011f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8011f6c:	6823      	ldr	r3, [r4, #0]
 8011f6e:	3a77      	subs	r2, #119	; 0x77
 8011f70:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011f72:	0020      	movs	r0, r4
 8011f74:	f7ff fea5 	bl	8011cc2 <RTC_EnterInitMode>
 8011f78:	1e06      	subs	r6, r0, #0
 8011f7a:	d1ce      	bne.n	8011f1a <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	480a      	ldr	r0, [pc, #40]	; (8011fa8 <HAL_RTC_SetDate+0xe0>)
 8011f80:	4005      	ands	r5, r0
 8011f82:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011f84:	6822      	ldr	r2, [r4, #0]
 8011f86:	68d3      	ldr	r3, [r2, #12]
 8011f88:	2180      	movs	r1, #128	; 0x80
 8011f8a:	438b      	bics	r3, r1
 8011f8c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011f8e:	6823      	ldr	r3, [r4, #0]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	069b      	lsls	r3, r3, #26
 8011f94:	d5cd      	bpl.n	8011f32 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	22ff      	movs	r2, #255	; 0xff
 8011f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8011fa4:	e7c1      	b.n	8011f2a <HAL_RTC_SetDate+0x62>
 8011fa6:	46c0      	nop			; (mov r8, r8)
 8011fa8:	00ffff3f 	.word	0x00ffff3f

08011fac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011fac:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011fae:	0900      	lsrs	r0, r0, #4
 8011fb0:	0083      	lsls	r3, r0, #2
 8011fb2:	181b      	adds	r3, r3, r0
 8011fb4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011fb6:	200f      	movs	r0, #15
 8011fb8:	4010      	ands	r0, r2
 8011fba:	1818      	adds	r0, r3, r0
 8011fbc:	b2c0      	uxtb	r0, r0
}
 8011fbe:	4770      	bx	lr

08011fc0 <HAL_RTC_GetTime>:
{
 8011fc0:	b570      	push	{r4, r5, r6, lr}
 8011fc2:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011fc4:	6803      	ldr	r3, [r0, #0]
 8011fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fc8:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011fca:	6803      	ldr	r3, [r0, #0]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	490e      	ldr	r1, [pc, #56]	; (8012008 <HAL_RTC_GetTime+0x48>)
 8011fd0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011fd2:	0c19      	lsrs	r1, r3, #16
 8011fd4:	203f      	movs	r0, #63	; 0x3f
 8011fd6:	4008      	ands	r0, r1
 8011fd8:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011fda:	0a1e      	lsrs	r6, r3, #8
 8011fdc:	b2f6      	uxtb	r6, r6
 8011fde:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011fe0:	b2dc      	uxtb	r4, r3
 8011fe2:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011fe4:	2340      	movs	r3, #64	; 0x40
 8011fe6:	400b      	ands	r3, r1
 8011fe8:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8011fea:	2a00      	cmp	r2, #0
 8011fec:	d10a      	bne.n	8012004 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011fee:	f7ff ffdd 	bl	8011fac <RTC_Bcd2ToByte>
 8011ff2:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011ff4:	0030      	movs	r0, r6
 8011ff6:	f7ff ffd9 	bl	8011fac <RTC_Bcd2ToByte>
 8011ffa:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011ffc:	0020      	movs	r0, r4
 8011ffe:	f7ff ffd5 	bl	8011fac <RTC_Bcd2ToByte>
 8012002:	70a8      	strb	r0, [r5, #2]
}
 8012004:	2000      	movs	r0, #0
 8012006:	bd70      	pop	{r4, r5, r6, pc}
 8012008:	007f7f7f 	.word	0x007f7f7f

0801200c <HAL_RTC_GetDate>:
{
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012010:	6803      	ldr	r3, [r0, #0]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	490d      	ldr	r1, [pc, #52]	; (801204c <HAL_RTC_GetDate+0x40>)
 8012016:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012018:	0c18      	lsrs	r0, r3, #16
 801201a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801201c:	04dd      	lsls	r5, r3, #19
 801201e:	0eed      	lsrs	r5, r5, #27
 8012020:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012022:	b2de      	uxtb	r6, r3
 8012024:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012026:	041b      	lsls	r3, r3, #16
 8012028:	0f5b      	lsrs	r3, r3, #29
 801202a:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 801202c:	2a00      	cmp	r2, #0
 801202e:	d10a      	bne.n	8012046 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012030:	f7ff ffbc 	bl	8011fac <RTC_Bcd2ToByte>
 8012034:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012036:	0028      	movs	r0, r5
 8012038:	f7ff ffb8 	bl	8011fac <RTC_Bcd2ToByte>
 801203c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801203e:	0030      	movs	r0, r6
 8012040:	f7ff ffb4 	bl	8011fac <RTC_Bcd2ToByte>
 8012044:	70a0      	strb	r0, [r4, #2]
}
 8012046:	2000      	movs	r0, #0
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	46c0      	nop			; (mov r8, r8)
 801204c:	00ffff3f 	.word	0x00ffff3f

08012050 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012050:	6803      	ldr	r3, [r0, #0]
 8012052:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012054:	0089      	lsls	r1, r1, #2
 8012056:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012058:	600a      	str	r2, [r1, #0]
}
 801205a:	4770      	bx	lr

0801205c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801205c:	6803      	ldr	r3, [r0, #0]
 801205e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012060:	0089      	lsls	r1, r1, #2
 8012062:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012064:	6808      	ldr	r0, [r1, #0]
}
 8012066:	4770      	bx	lr

08012068 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012068:	4770      	bx	lr

0801206a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801206a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 801206c:	2239      	movs	r2, #57	; 0x39
 801206e:	2302      	movs	r3, #2
 8012070:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012072:	6804      	ldr	r4, [r0, #0]
 8012074:	6823      	ldr	r3, [r4, #0]
 8012076:	2101      	movs	r1, #1
 8012078:	430b      	orrs	r3, r1
 801207a:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801207c:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801207e:	2000      	movs	r0, #0
 8012080:	bd10      	pop	{r4, pc}
	...

08012084 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012084:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012086:	4a36      	ldr	r2, [pc, #216]	; (8012160 <TIM_Base_SetConfig+0xdc>)
 8012088:	4290      	cmp	r0, r2
 801208a:	d022      	beq.n	80120d2 <TIM_Base_SetConfig+0x4e>
 801208c:	2280      	movs	r2, #128	; 0x80
 801208e:	05d2      	lsls	r2, r2, #23
 8012090:	4290      	cmp	r0, r2
 8012092:	d014      	beq.n	80120be <TIM_Base_SetConfig+0x3a>
 8012094:	4a33      	ldr	r2, [pc, #204]	; (8012164 <TIM_Base_SetConfig+0xe0>)
 8012096:	4290      	cmp	r0, r2
 8012098:	d016      	beq.n	80120c8 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801209a:	4a33      	ldr	r2, [pc, #204]	; (8012168 <TIM_Base_SetConfig+0xe4>)
 801209c:	4290      	cmp	r0, r2
 801209e:	d040      	beq.n	8012122 <TIM_Base_SetConfig+0x9e>
 80120a0:	4a32      	ldr	r2, [pc, #200]	; (801216c <TIM_Base_SetConfig+0xe8>)
 80120a2:	4290      	cmp	r0, r2
 80120a4:	d047      	beq.n	8012136 <TIM_Base_SetConfig+0xb2>
 80120a6:	4a32      	ldr	r2, [pc, #200]	; (8012170 <TIM_Base_SetConfig+0xec>)
 80120a8:	4290      	cmp	r0, r2
 80120aa:	d04e      	beq.n	801214a <TIM_Base_SetConfig+0xc6>
 80120ac:	4a31      	ldr	r2, [pc, #196]	; (8012174 <TIM_Base_SetConfig+0xf0>)
 80120ae:	4290      	cmp	r0, r2
 80120b0:	d02d      	beq.n	801210e <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80120b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120b4:	688b      	ldr	r3, [r1, #8]
 80120b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80120b8:	680b      	ldr	r3, [r1, #0]
 80120ba:	6283      	str	r3, [r0, #40]	; 0x28
 80120bc:	e024      	b.n	8012108 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120be:	2270      	movs	r2, #112	; 0x70
 80120c0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120c2:	684a      	ldr	r2, [r1, #4]
 80120c4:	4313      	orrs	r3, r2
 80120c6:	e008      	b.n	80120da <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120c8:	2270      	movs	r2, #112	; 0x70
 80120ca:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120cc:	684a      	ldr	r2, [r1, #4]
 80120ce:	4313      	orrs	r3, r2
 80120d0:	e003      	b.n	80120da <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120d2:	2270      	movs	r2, #112	; 0x70
 80120d4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120d6:	684a      	ldr	r2, [r1, #4]
 80120d8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80120da:	4a27      	ldr	r2, [pc, #156]	; (8012178 <TIM_Base_SetConfig+0xf4>)
 80120dc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80120de:	68ca      	ldr	r2, [r1, #12]
 80120e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80120e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120e4:	688b      	ldr	r3, [r1, #8]
 80120e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80120e8:	680b      	ldr	r3, [r1, #0]
 80120ea:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80120ec:	4b1c      	ldr	r3, [pc, #112]	; (8012160 <TIM_Base_SetConfig+0xdc>)
 80120ee:	4298      	cmp	r0, r3
 80120f0:	d008      	beq.n	8012104 <TIM_Base_SetConfig+0x80>
 80120f2:	4b1e      	ldr	r3, [pc, #120]	; (801216c <TIM_Base_SetConfig+0xe8>)
 80120f4:	4298      	cmp	r0, r3
 80120f6:	d005      	beq.n	8012104 <TIM_Base_SetConfig+0x80>
 80120f8:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <TIM_Base_SetConfig+0xec>)
 80120fa:	4298      	cmp	r0, r3
 80120fc:	d002      	beq.n	8012104 <TIM_Base_SetConfig+0x80>
 80120fe:	4b1d      	ldr	r3, [pc, #116]	; (8012174 <TIM_Base_SetConfig+0xf0>)
 8012100:	4298      	cmp	r0, r3
 8012102:	d101      	bne.n	8012108 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012104:	690b      	ldr	r3, [r1, #16]
 8012106:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012108:	2301      	movs	r3, #1
 801210a:	6143      	str	r3, [r0, #20]
}
 801210c:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 801210e:	4a1a      	ldr	r2, [pc, #104]	; (8012178 <TIM_Base_SetConfig+0xf4>)
 8012110:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012112:	68ca      	ldr	r2, [r1, #12]
 8012114:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012116:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012118:	688b      	ldr	r3, [r1, #8]
 801211a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801211c:	680b      	ldr	r3, [r1, #0]
 801211e:	6283      	str	r3, [r0, #40]	; 0x28
 8012120:	e7f0      	b.n	8012104 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012122:	4a15      	ldr	r2, [pc, #84]	; (8012178 <TIM_Base_SetConfig+0xf4>)
 8012124:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012126:	68ca      	ldr	r2, [r1, #12]
 8012128:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801212a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801212c:	688b      	ldr	r3, [r1, #8]
 801212e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012130:	680b      	ldr	r3, [r1, #0]
 8012132:	6283      	str	r3, [r0, #40]	; 0x28
 8012134:	e7e8      	b.n	8012108 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012136:	4a10      	ldr	r2, [pc, #64]	; (8012178 <TIM_Base_SetConfig+0xf4>)
 8012138:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801213a:	68ca      	ldr	r2, [r1, #12]
 801213c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801213e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012140:	688b      	ldr	r3, [r1, #8]
 8012142:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012144:	680b      	ldr	r3, [r1, #0]
 8012146:	6283      	str	r3, [r0, #40]	; 0x28
 8012148:	e7dc      	b.n	8012104 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801214a:	4a0b      	ldr	r2, [pc, #44]	; (8012178 <TIM_Base_SetConfig+0xf4>)
 801214c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801214e:	68ca      	ldr	r2, [r1, #12]
 8012150:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012152:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012154:	688b      	ldr	r3, [r1, #8]
 8012156:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012158:	680b      	ldr	r3, [r1, #0]
 801215a:	6283      	str	r3, [r0, #40]	; 0x28
 801215c:	e7d2      	b.n	8012104 <TIM_Base_SetConfig+0x80>
 801215e:	46c0      	nop			; (mov r8, r8)
 8012160:	40012c00 	.word	0x40012c00
 8012164:	40000400 	.word	0x40000400
 8012168:	40002000 	.word	0x40002000
 801216c:	40014000 	.word	0x40014000
 8012170:	40014400 	.word	0x40014400
 8012174:	40014800 	.word	0x40014800
 8012178:	fffffcff 	.word	0xfffffcff

0801217c <HAL_TIM_Base_Init>:
{
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012180:	d014      	beq.n	80121ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012182:	2339      	movs	r3, #57	; 0x39
 8012184:	5cc3      	ldrb	r3, [r0, r3]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801218a:	2539      	movs	r5, #57	; 0x39
 801218c:	2302      	movs	r3, #2
 801218e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012190:	1d21      	adds	r1, r4, #4
 8012192:	6820      	ldr	r0, [r4, #0]
 8012194:	f7ff ff76 	bl	8012084 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012198:	2301      	movs	r3, #1
 801219a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 801219c:	2000      	movs	r0, #0
}
 801219e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80121a0:	3338      	adds	r3, #56	; 0x38
 80121a2:	2200      	movs	r2, #0
 80121a4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80121a6:	f7ff ff5f 	bl	8012068 <HAL_TIM_Base_MspInit>
 80121aa:	e7ee      	b.n	801218a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80121ac:	2001      	movs	r0, #1
 80121ae:	e7f6      	b.n	801219e <HAL_TIM_Base_Init+0x22>

080121b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80121b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80121b2:	2338      	movs	r3, #56	; 0x38
 80121b4:	5cc3      	ldrb	r3, [r0, r3]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d01e      	beq.n	80121f8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80121ba:	2238      	movs	r2, #56	; 0x38
 80121bc:	2501      	movs	r5, #1
 80121be:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80121c0:	2439      	movs	r4, #57	; 0x39
 80121c2:	2302      	movs	r3, #2
 80121c4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80121c6:	6806      	ldr	r6, [r0, #0]
 80121c8:	6873      	ldr	r3, [r6, #4]
 80121ca:	2770      	movs	r7, #112	; 0x70
 80121cc:	43bb      	bics	r3, r7
 80121ce:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80121d0:	6806      	ldr	r6, [r0, #0]
 80121d2:	6873      	ldr	r3, [r6, #4]
 80121d4:	680f      	ldr	r7, [r1, #0]
 80121d6:	433b      	orrs	r3, r7
 80121d8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80121da:	6806      	ldr	r6, [r0, #0]
 80121dc:	68b3      	ldr	r3, [r6, #8]
 80121de:	2780      	movs	r7, #128	; 0x80
 80121e0:	43bb      	bics	r3, r7
 80121e2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80121e4:	6806      	ldr	r6, [r0, #0]
 80121e6:	68b3      	ldr	r3, [r6, #8]
 80121e8:	6849      	ldr	r1, [r1, #4]
 80121ea:	430b      	orrs	r3, r1
 80121ec:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80121ee:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80121f0:	2300      	movs	r3, #0
 80121f2:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80121f4:	2000      	movs	r0, #0
}
 80121f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80121f8:	2002      	movs	r0, #2
 80121fa:	e7fc      	b.n	80121f6 <HAL_TIMEx_MasterConfigSynchronization+0x46>

080121fc <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80121fc:	4770      	bx	lr

080121fe <HAL_UART_DeInit>:
{
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012202:	2001      	movs	r0, #1
  if(huart == NULL)
 8012204:	2c00      	cmp	r4, #0
 8012206:	d016      	beq.n	8012236 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012208:	2669      	movs	r6, #105	; 0x69
 801220a:	2302      	movs	r3, #2
 801220c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	6813      	ldr	r3, [r2, #0]
 8012212:	2101      	movs	r1, #1
 8012214:	438b      	bics	r3, r1
 8012216:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	2500      	movs	r5, #0
 801221c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012226:	0020      	movs	r0, r4
 8012228:	f7ff ffe8 	bl	80121fc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801222c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801222e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012230:	2368      	movs	r3, #104	; 0x68
 8012232:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012234:	2000      	movs	r0, #0
}
 8012236:	bd70      	pop	{r4, r5, r6, pc}

08012238 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012238:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801223a:	2369      	movs	r3, #105	; 0x69
 801223c:	5cc3      	ldrb	r3, [r0, r3]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d004      	beq.n	801224c <HAL_UART_Transmit_IT+0x14>
 8012242:	2369      	movs	r3, #105	; 0x69
 8012244:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012246:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012248:	2c22      	cmp	r4, #34	; 0x22
 801224a:	d127      	bne.n	801229c <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 801224c:	2900      	cmp	r1, #0
 801224e:	d02b      	beq.n	80122a8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012250:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012252:	2a00      	cmp	r2, #0
 8012254:	d022      	beq.n	801229c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012256:	3367      	adds	r3, #103	; 0x67
 8012258:	5cc3      	ldrb	r3, [r0, r3]
 801225a:	2b01      	cmp	r3, #1
 801225c:	d026      	beq.n	80122ac <HAL_UART_Transmit_IT+0x74>
 801225e:	2368      	movs	r3, #104	; 0x68
 8012260:	2401      	movs	r4, #1
 8012262:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012264:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012266:	3b18      	subs	r3, #24
 8012268:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801226a:	3302      	adds	r3, #2
 801226c:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801226e:	2300      	movs	r3, #0
 8012270:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012272:	3369      	adds	r3, #105	; 0x69
 8012274:	5cc3      	ldrb	r3, [r0, r3]
 8012276:	2b22      	cmp	r3, #34	; 0x22
 8012278:	d012      	beq.n	80122a0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801227a:	2369      	movs	r3, #105	; 0x69
 801227c:	2212      	movs	r2, #18
 801227e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012280:	6802      	ldr	r2, [r0, #0]
 8012282:	6893      	ldr	r3, [r2, #8]
 8012284:	2101      	movs	r1, #1
 8012286:	430b      	orrs	r3, r1
 8012288:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 801228a:	2368      	movs	r3, #104	; 0x68
 801228c:	2200      	movs	r2, #0
 801228e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012290:	6802      	ldr	r2, [r0, #0]
 8012292:	6813      	ldr	r3, [r2, #0]
 8012294:	317f      	adds	r1, #127	; 0x7f
 8012296:	430b      	orrs	r3, r1
 8012298:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 801229a:	2300      	movs	r3, #0
  }
}
 801229c:	0018      	movs	r0, r3
 801229e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80122a0:	3347      	adds	r3, #71	; 0x47
 80122a2:	2232      	movs	r2, #50	; 0x32
 80122a4:	54c2      	strb	r2, [r0, r3]
 80122a6:	e7eb      	b.n	8012280 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80122a8:	2301      	movs	r3, #1
 80122aa:	e7f7      	b.n	801229c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80122ac:	2302      	movs	r3, #2
 80122ae:	e7f5      	b.n	801229c <HAL_UART_Transmit_IT+0x64>

080122b0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122b0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122b2:	2369      	movs	r3, #105	; 0x69
 80122b4:	5cc3      	ldrb	r3, [r0, r3]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d004      	beq.n	80122c4 <HAL_UART_Receive_IT+0x14>
 80122ba:	2369      	movs	r3, #105	; 0x69
 80122bc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80122be:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122c0:	2c12      	cmp	r4, #18
 80122c2:	d14e      	bne.n	8012362 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80122c4:	2900      	cmp	r1, #0
 80122c6:	d05d      	beq.n	8012384 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80122c8:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80122ca:	2a00      	cmp	r2, #0
 80122cc:	d049      	beq.n	8012362 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80122ce:	3367      	adds	r3, #103	; 0x67
 80122d0:	5cc3      	ldrb	r3, [r0, r3]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d058      	beq.n	8012388 <HAL_UART_Receive_IT+0xd8>
 80122d6:	2368      	movs	r3, #104	; 0x68
 80122d8:	2401      	movs	r4, #1
 80122da:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 80122dc:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80122de:	3b10      	subs	r3, #16
 80122e0:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80122e2:	3302      	adds	r3, #2
 80122e4:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80122e6:	6883      	ldr	r3, [r0, #8]
 80122e8:	2280      	movs	r2, #128	; 0x80
 80122ea:	0152      	lsls	r2, r2, #5
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d008      	beq.n	8012302 <HAL_UART_Receive_IT+0x52>
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d115      	bne.n	8012320 <HAL_UART_Receive_IT+0x70>
 80122f4:	6903      	ldr	r3, [r0, #16]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d10e      	bne.n	8012318 <HAL_UART_Receive_IT+0x68>
 80122fa:	335c      	adds	r3, #92	; 0x5c
 80122fc:	22ff      	movs	r2, #255	; 0xff
 80122fe:	52c2      	strh	r2, [r0, r3]
 8012300:	e012      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
 8012302:	6903      	ldr	r3, [r0, #16]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d103      	bne.n	8012310 <HAL_UART_Receive_IT+0x60>
 8012308:	335c      	adds	r3, #92	; 0x5c
 801230a:	4a20      	ldr	r2, [pc, #128]	; (801238c <HAL_UART_Receive_IT+0xdc>)
 801230c:	52c2      	strh	r2, [r0, r3]
 801230e:	e00b      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
 8012310:	235c      	movs	r3, #92	; 0x5c
 8012312:	22ff      	movs	r2, #255	; 0xff
 8012314:	52c2      	strh	r2, [r0, r3]
 8012316:	e007      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
 8012318:	235c      	movs	r3, #92	; 0x5c
 801231a:	227f      	movs	r2, #127	; 0x7f
 801231c:	52c2      	strh	r2, [r0, r3]
 801231e:	e003      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
 8012320:	2280      	movs	r2, #128	; 0x80
 8012322:	0552      	lsls	r2, r2, #21
 8012324:	4293      	cmp	r3, r2
 8012326:	d01e      	beq.n	8012366 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012328:	2300      	movs	r3, #0
 801232a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801232c:	3369      	adds	r3, #105	; 0x69
 801232e:	5cc3      	ldrb	r3, [r0, r3]
 8012330:	2b12      	cmp	r3, #18
 8012332:	d023      	beq.n	801237c <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012334:	2369      	movs	r3, #105	; 0x69
 8012336:	2222      	movs	r2, #34	; 0x22
 8012338:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801233a:	6802      	ldr	r2, [r0, #0]
 801233c:	6811      	ldr	r1, [r2, #0]
 801233e:	2380      	movs	r3, #128	; 0x80
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	430b      	orrs	r3, r1
 8012344:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012346:	6802      	ldr	r2, [r0, #0]
 8012348:	6893      	ldr	r3, [r2, #8]
 801234a:	2101      	movs	r1, #1
 801234c:	430b      	orrs	r3, r1
 801234e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012350:	2368      	movs	r3, #104	; 0x68
 8012352:	2200      	movs	r2, #0
 8012354:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012356:	6802      	ldr	r2, [r0, #0]
 8012358:	6813      	ldr	r3, [r2, #0]
 801235a:	311f      	adds	r1, #31
 801235c:	430b      	orrs	r3, r1
 801235e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012360:	2300      	movs	r3, #0
  }
}
 8012362:	0018      	movs	r0, r3
 8012364:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012366:	6903      	ldr	r3, [r0, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d103      	bne.n	8012374 <HAL_UART_Receive_IT+0xc4>
 801236c:	335c      	adds	r3, #92	; 0x5c
 801236e:	227f      	movs	r2, #127	; 0x7f
 8012370:	52c2      	strh	r2, [r0, r3]
 8012372:	e7d9      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
 8012374:	235c      	movs	r3, #92	; 0x5c
 8012376:	223f      	movs	r2, #63	; 0x3f
 8012378:	52c2      	strh	r2, [r0, r3]
 801237a:	e7d5      	b.n	8012328 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801237c:	3357      	adds	r3, #87	; 0x57
 801237e:	2232      	movs	r2, #50	; 0x32
 8012380:	54c2      	strb	r2, [r0, r3]
 8012382:	e7da      	b.n	801233a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012384:	2301      	movs	r3, #1
 8012386:	e7ec      	b.n	8012362 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012388:	2302      	movs	r3, #2
 801238a:	e7ea      	b.n	8012362 <HAL_UART_Receive_IT+0xb2>
 801238c:	000001ff 	.word	0x000001ff

08012390 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012390:	b510      	push	{r4, lr}
 8012392:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012394:	2069      	movs	r0, #105	; 0x69
 8012396:	5c20      	ldrb	r0, [r4, r0]
 8012398:	2801      	cmp	r0, #1
 801239a:	d004      	beq.n	80123a6 <HAL_UART_Receive_DMA+0x16>
 801239c:	2369      	movs	r3, #105	; 0x69
 801239e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80123a0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80123a2:	2b12      	cmp	r3, #18
 80123a4:	d130      	bne.n	8012408 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 80123a6:	2900      	cmp	r1, #0
 80123a8:	d033      	beq.n	8012412 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 80123aa:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d02b      	beq.n	8012408 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80123b0:	2368      	movs	r3, #104	; 0x68
 80123b2:	5ce3      	ldrb	r3, [r4, r3]
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d02e      	beq.n	8012416 <HAL_UART_Receive_DMA+0x86>
 80123b8:	2368      	movs	r3, #104	; 0x68
 80123ba:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 80123bc:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80123be:	3b10      	subs	r3, #16
 80123c0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123c2:	2300      	movs	r3, #0
 80123c4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80123c6:	3369      	adds	r3, #105	; 0x69
 80123c8:	5ce3      	ldrb	r3, [r4, r3]
 80123ca:	2b12      	cmp	r3, #18
 80123cc:	d01d      	beq.n	801240a <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80123ce:	2369      	movs	r3, #105	; 0x69
 80123d0:	2022      	movs	r0, #34	; 0x22
 80123d2:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80123d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123d6:	4811      	ldr	r0, [pc, #68]	; (801241c <HAL_UART_Receive_DMA+0x8c>)
 80123d8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123dc:	4810      	ldr	r0, [pc, #64]	; (8012420 <HAL_UART_Receive_DMA+0x90>)
 80123de:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80123e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123e2:	4810      	ldr	r0, [pc, #64]	; (8012424 <HAL_UART_Receive_DMA+0x94>)
 80123e4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80123e6:	6820      	ldr	r0, [r4, #0]
 80123e8:	3024      	adds	r0, #36	; 0x24
 80123ea:	0013      	movs	r3, r2
 80123ec:	000a      	movs	r2, r1
 80123ee:	0001      	movs	r1, r0
 80123f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80123f2:	f7fd ffb1 	bl	8010358 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80123f6:	6822      	ldr	r2, [r4, #0]
 80123f8:	6893      	ldr	r3, [r2, #8]
 80123fa:	2140      	movs	r1, #64	; 0x40
 80123fc:	430b      	orrs	r3, r1
 80123fe:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012400:	2368      	movs	r3, #104	; 0x68
 8012402:	2200      	movs	r2, #0
 8012404:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012406:	2000      	movs	r0, #0
  }
}
 8012408:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801240a:	3357      	adds	r3, #87	; 0x57
 801240c:	3031      	adds	r0, #49	; 0x31
 801240e:	54e0      	strb	r0, [r4, r3]
 8012410:	e7e0      	b.n	80123d4 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8012412:	2001      	movs	r0, #1
 8012414:	e7f8      	b.n	8012408 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012416:	2002      	movs	r0, #2
 8012418:	e7f6      	b.n	8012408 <HAL_UART_Receive_DMA+0x78>
 801241a:	46c0      	nop			; (mov r8, r8)
 801241c:	08012429 	.word	0x08012429
 8012420:	08012465 	.word	0x08012465
 8012424:	0801246f 	.word	0x0801246f

08012428 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012428:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801242a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801242c:	6802      	ldr	r2, [r0, #0]
 801242e:	6812      	ldr	r2, [r2, #0]
 8012430:	0692      	lsls	r2, r2, #26
 8012432:	d40e      	bmi.n	8012452 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012434:	225a      	movs	r2, #90	; 0x5a
 8012436:	2100      	movs	r1, #0
 8012438:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801243a:	6819      	ldr	r1, [r3, #0]
 801243c:	688a      	ldr	r2, [r1, #8]
 801243e:	2040      	movs	r0, #64	; 0x40
 8012440:	4382      	bics	r2, r0
 8012442:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012444:	2269      	movs	r2, #105	; 0x69
 8012446:	5c9a      	ldrb	r2, [r3, r2]
 8012448:	2a32      	cmp	r2, #50	; 0x32
 801244a:	d006      	beq.n	801245a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801244c:	2269      	movs	r2, #105	; 0x69
 801244e:	2101      	movs	r1, #1
 8012450:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012452:	0018      	movs	r0, r3
 8012454:	f7fa fd88 	bl	800cf68 <HAL_UART_RxCpltCallback>
}
 8012458:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801245a:	3237      	adds	r2, #55	; 0x37
 801245c:	2112      	movs	r1, #18
 801245e:	5499      	strb	r1, [r3, r2]
 8012460:	e7f7      	b.n	8012452 <UART_DMAReceiveCplt+0x2a>

08012462 <HAL_UART_RxHalfCpltCallback>:
}
 8012462:	4770      	bx	lr

08012464 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012464:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012466:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012468:	f7ff fffb 	bl	8012462 <HAL_UART_RxHalfCpltCallback>
}
 801246c:	bd10      	pop	{r4, pc}

0801246e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801246e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012470:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012472:	2300      	movs	r3, #0
 8012474:	225a      	movs	r2, #90	; 0x5a
 8012476:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012478:	3a08      	subs	r2, #8
 801247a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801247c:	3369      	adds	r3, #105	; 0x69
 801247e:	3a51      	subs	r2, #81	; 0x51
 8012480:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012482:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012484:	320f      	adds	r2, #15
 8012486:	4313      	orrs	r3, r2
 8012488:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801248a:	f7fa fd47 	bl	800cf1c <HAL_UART_ErrorCallback>
}
 801248e:	bd10      	pop	{r4, pc}

08012490 <UART_SetConfig>:
{
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012494:	6801      	ldr	r1, [r0, #0]
 8012496:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012498:	6883      	ldr	r3, [r0, #8]
 801249a:	6900      	ldr	r0, [r0, #16]
 801249c:	4303      	orrs	r3, r0
 801249e:	6960      	ldr	r0, [r4, #20]
 80124a0:	4303      	orrs	r3, r0
 80124a2:	69e0      	ldr	r0, [r4, #28]
 80124a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80124a6:	487e      	ldr	r0, [pc, #504]	; (80126a0 <UART_SetConfig+0x210>)
 80124a8:	4002      	ands	r2, r0
 80124aa:	4313      	orrs	r3, r2
 80124ac:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80124ae:	6822      	ldr	r2, [r4, #0]
 80124b0:	6853      	ldr	r3, [r2, #4]
 80124b2:	497c      	ldr	r1, [pc, #496]	; (80126a4 <UART_SetConfig+0x214>)
 80124b4:	400b      	ands	r3, r1
 80124b6:	68e1      	ldr	r1, [r4, #12]
 80124b8:	430b      	orrs	r3, r1
 80124ba:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80124bc:	6821      	ldr	r1, [r4, #0]
 80124be:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80124c0:	69a3      	ldr	r3, [r4, #24]
 80124c2:	6a20      	ldr	r0, [r4, #32]
 80124c4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80124c6:	4878      	ldr	r0, [pc, #480]	; (80126a8 <UART_SetConfig+0x218>)
 80124c8:	4002      	ands	r2, r0
 80124ca:	4313      	orrs	r3, r2
 80124cc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124ce:	6825      	ldr	r5, [r4, #0]
 80124d0:	4b76      	ldr	r3, [pc, #472]	; (80126ac <UART_SetConfig+0x21c>)
 80124d2:	429d      	cmp	r5, r3
 80124d4:	d022      	beq.n	801251c <UART_SetConfig+0x8c>
 80124d6:	4b76      	ldr	r3, [pc, #472]	; (80126b0 <UART_SetConfig+0x220>)
 80124d8:	429d      	cmp	r5, r3
 80124da:	d034      	beq.n	8012546 <UART_SetConfig+0xb6>
 80124dc:	4b75      	ldr	r3, [pc, #468]	; (80126b4 <UART_SetConfig+0x224>)
 80124de:	429d      	cmp	r5, r3
 80124e0:	d100      	bne.n	80124e4 <UART_SetConfig+0x54>
 80124e2:	e06b      	b.n	80125bc <UART_SetConfig+0x12c>
 80124e4:	4b74      	ldr	r3, [pc, #464]	; (80126b8 <UART_SetConfig+0x228>)
 80124e6:	429d      	cmp	r5, r3
 80124e8:	d100      	bne.n	80124ec <UART_SetConfig+0x5c>
 80124ea:	e08e      	b.n	801260a <UART_SetConfig+0x17a>
 80124ec:	4b73      	ldr	r3, [pc, #460]	; (80126bc <UART_SetConfig+0x22c>)
 80124ee:	429d      	cmp	r5, r3
 80124f0:	d100      	bne.n	80124f4 <UART_SetConfig+0x64>
 80124f2:	e08a      	b.n	801260a <UART_SetConfig+0x17a>
 80124f4:	4b72      	ldr	r3, [pc, #456]	; (80126c0 <UART_SetConfig+0x230>)
 80124f6:	429d      	cmp	r5, r3
 80124f8:	d100      	bne.n	80124fc <UART_SetConfig+0x6c>
 80124fa:	e086      	b.n	801260a <UART_SetConfig+0x17a>
 80124fc:	4b71      	ldr	r3, [pc, #452]	; (80126c4 <UART_SetConfig+0x234>)
 80124fe:	429d      	cmp	r5, r3
 8012500:	d100      	bne.n	8012504 <UART_SetConfig+0x74>
 8012502:	e082      	b.n	801260a <UART_SetConfig+0x17a>
 8012504:	4b70      	ldr	r3, [pc, #448]	; (80126c8 <UART_SetConfig+0x238>)
 8012506:	429d      	cmp	r5, r3
 8012508:	d100      	bne.n	801250c <UART_SetConfig+0x7c>
 801250a:	e07e      	b.n	801260a <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801250c:	2380      	movs	r3, #128	; 0x80
 801250e:	021b      	lsls	r3, r3, #8
 8012510:	69e2      	ldr	r2, [r4, #28]
 8012512:	429a      	cmp	r2, r3
 8012514:	d100      	bne.n	8012518 <UART_SetConfig+0x88>
 8012516:	e072      	b.n	80125fe <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8012518:	2001      	movs	r0, #1
 801251a:	e04e      	b.n	80125ba <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801251c:	4b6b      	ldr	r3, [pc, #428]	; (80126cc <UART_SetConfig+0x23c>)
 801251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012520:	2303      	movs	r3, #3
 8012522:	4013      	ands	r3, r2
 8012524:	2b01      	cmp	r3, #1
 8012526:	d100      	bne.n	801252a <UART_SetConfig+0x9a>
 8012528:	e09a      	b.n	8012660 <UART_SetConfig+0x1d0>
 801252a:	2b00      	cmp	r3, #0
 801252c:	d02f      	beq.n	801258e <UART_SetConfig+0xfe>
 801252e:	2b02      	cmp	r3, #2
 8012530:	d100      	bne.n	8012534 <UART_SetConfig+0xa4>
 8012532:	e0a5      	b.n	8012680 <UART_SetConfig+0x1f0>
 8012534:	2b03      	cmp	r3, #3
 8012536:	d01a      	beq.n	801256e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012538:	2380      	movs	r3, #128	; 0x80
 801253a:	021b      	lsls	r3, r3, #8
 801253c:	69e2      	ldr	r2, [r4, #28]
 801253e:	429a      	cmp	r2, r3
 8012540:	d060      	beq.n	8012604 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8012542:	2001      	movs	r0, #1
 8012544:	e039      	b.n	80125ba <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012546:	4b61      	ldr	r3, [pc, #388]	; (80126cc <UART_SetConfig+0x23c>)
 8012548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801254a:	22c0      	movs	r2, #192	; 0xc0
 801254c:	0292      	lsls	r2, r2, #10
 801254e:	4013      	ands	r3, r2
 8012550:	2280      	movs	r2, #128	; 0x80
 8012552:	0252      	lsls	r2, r2, #9
 8012554:	4293      	cmp	r3, r2
 8012556:	d100      	bne.n	801255a <UART_SetConfig+0xca>
 8012558:	e082      	b.n	8012660 <UART_SetConfig+0x1d0>
 801255a:	d916      	bls.n	801258a <UART_SetConfig+0xfa>
 801255c:	2280      	movs	r2, #128	; 0x80
 801255e:	0292      	lsls	r2, r2, #10
 8012560:	4293      	cmp	r3, r2
 8012562:	d100      	bne.n	8012566 <UART_SetConfig+0xd6>
 8012564:	e08c      	b.n	8012680 <UART_SetConfig+0x1f0>
 8012566:	22c0      	movs	r2, #192	; 0xc0
 8012568:	0292      	lsls	r2, r2, #10
 801256a:	4293      	cmp	r3, r2
 801256c:	d1e4      	bne.n	8012538 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801256e:	2380      	movs	r3, #128	; 0x80
 8012570:	021b      	lsls	r3, r3, #8
 8012572:	69e2      	ldr	r2, [r4, #28]
 8012574:	429a      	cmp	r2, r3
 8012576:	d038      	beq.n	80125ea <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012578:	6861      	ldr	r1, [r4, #4]
 801257a:	4855      	ldr	r0, [pc, #340]	; (80126d0 <UART_SetConfig+0x240>)
 801257c:	f7ed fdde 	bl	800013c <__udivsi3>
 8012580:	0400      	lsls	r0, r0, #16
 8012582:	0c00      	lsrs	r0, r0, #16
 8012584:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012586:	2000      	movs	r0, #0
        break;
 8012588:	e017      	b.n	80125ba <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1d4      	bne.n	8012538 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801258e:	2380      	movs	r3, #128	; 0x80
 8012590:	021b      	lsls	r3, r3, #8
 8012592:	69e2      	ldr	r2, [r4, #28]
 8012594:	429a      	cmp	r2, r3
 8012596:	d13d      	bne.n	8012614 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012598:	f7ff faca 	bl	8011b30 <HAL_RCC_GetPCLK1Freq>
 801259c:	0040      	lsls	r0, r0, #1
 801259e:	6861      	ldr	r1, [r4, #4]
 80125a0:	f7ed fdcc 	bl	800013c <__udivsi3>
 80125a4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80125a6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80125a8:	220f      	movs	r2, #15
 80125aa:	0019      	movs	r1, r3
 80125ac:	4391      	bics	r1, r2
 80125ae:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80125b0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80125b2:	071b      	lsls	r3, r3, #28
 80125b4:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80125b6:	4313      	orrs	r3, r2
 80125b8:	60cb      	str	r3, [r1, #12]
}
 80125ba:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125bc:	4b43      	ldr	r3, [pc, #268]	; (80126cc <UART_SetConfig+0x23c>)
 80125be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c0:	22c0      	movs	r2, #192	; 0xc0
 80125c2:	0312      	lsls	r2, r2, #12
 80125c4:	4013      	ands	r3, r2
 80125c6:	2280      	movs	r2, #128	; 0x80
 80125c8:	02d2      	lsls	r2, r2, #11
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d02d      	beq.n	801262a <UART_SetConfig+0x19a>
 80125ce:	d913      	bls.n	80125f8 <UART_SetConfig+0x168>
 80125d0:	2280      	movs	r2, #128	; 0x80
 80125d2:	0312      	lsls	r2, r2, #12
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d036      	beq.n	8012646 <UART_SetConfig+0x1b6>
 80125d8:	22c0      	movs	r2, #192	; 0xc0
 80125da:	0312      	lsls	r2, r2, #12
 80125dc:	4293      	cmp	r3, r2
 80125de:	d1ab      	bne.n	8012538 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80125e0:	2380      	movs	r3, #128	; 0x80
 80125e2:	021b      	lsls	r3, r3, #8
 80125e4:	69e2      	ldr	r2, [r4, #28]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d1c6      	bne.n	8012578 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80125ea:	6861      	ldr	r1, [r4, #4]
 80125ec:	4839      	ldr	r0, [pc, #228]	; (80126d4 <UART_SetConfig+0x244>)
 80125ee:	f7ed fda5 	bl	800013c <__udivsi3>
 80125f2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80125f4:	2000      	movs	r0, #0
        break;
 80125f6:	e7d7      	b.n	80125a8 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d0c8      	beq.n	801258e <UART_SetConfig+0xfe>
 80125fc:	e79c      	b.n	8012538 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80125fe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012600:	2300      	movs	r3, #0
 8012602:	e7d1      	b.n	80125a8 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8012604:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012606:	2300      	movs	r3, #0
 8012608:	e7ce      	b.n	80125a8 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801260a:	2380      	movs	r3, #128	; 0x80
 801260c:	021b      	lsls	r3, r3, #8
 801260e:	69e2      	ldr	r2, [r4, #28]
 8012610:	429a      	cmp	r2, r3
 8012612:	d0c1      	beq.n	8012598 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012614:	f7ff fa8c 	bl	8011b30 <HAL_RCC_GetPCLK1Freq>
 8012618:	6825      	ldr	r5, [r4, #0]
 801261a:	6861      	ldr	r1, [r4, #4]
 801261c:	f7ed fd8e 	bl	800013c <__udivsi3>
 8012620:	0400      	lsls	r0, r0, #16
 8012622:	0c00      	lsrs	r0, r0, #16
 8012624:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012626:	2000      	movs	r0, #0
  return ret;
 8012628:	e7c7      	b.n	80125ba <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801262a:	2380      	movs	r3, #128	; 0x80
 801262c:	021b      	lsls	r3, r3, #8
 801262e:	69e2      	ldr	r2, [r4, #28]
 8012630:	429a      	cmp	r2, r3
 8012632:	d11a      	bne.n	801266a <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012634:	f7ff fa18 	bl	8011a68 <HAL_RCC_GetSysClockFreq>
 8012638:	0040      	lsls	r0, r0, #1
 801263a:	6861      	ldr	r1, [r4, #4]
 801263c:	f7ed fd7e 	bl	800013c <__udivsi3>
 8012640:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012642:	2000      	movs	r0, #0
        break;
 8012644:	e7b0      	b.n	80125a8 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012646:	2380      	movs	r3, #128	; 0x80
 8012648:	021b      	lsls	r3, r3, #8
 801264a:	69e2      	ldr	r2, [r4, #28]
 801264c:	429a      	cmp	r2, r3
 801264e:	d11c      	bne.n	801268a <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012650:	6861      	ldr	r1, [r4, #4]
 8012652:	2080      	movs	r0, #128	; 0x80
 8012654:	0240      	lsls	r0, r0, #9
 8012656:	f7ed fd71 	bl	800013c <__udivsi3>
 801265a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801265c:	2000      	movs	r0, #0
        break;
 801265e:	e7a3      	b.n	80125a8 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012660:	2380      	movs	r3, #128	; 0x80
 8012662:	021b      	lsls	r3, r3, #8
 8012664:	69e2      	ldr	r2, [r4, #28]
 8012666:	429a      	cmp	r2, r3
 8012668:	d0e4      	beq.n	8012634 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801266a:	f7ff f9fd 	bl	8011a68 <HAL_RCC_GetSysClockFreq>
 801266e:	6825      	ldr	r5, [r4, #0]
 8012670:	6861      	ldr	r1, [r4, #4]
 8012672:	f7ed fd63 	bl	800013c <__udivsi3>
 8012676:	0400      	lsls	r0, r0, #16
 8012678:	0c00      	lsrs	r0, r0, #16
 801267a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801267c:	2000      	movs	r0, #0
        break;
 801267e:	e79c      	b.n	80125ba <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012680:	2380      	movs	r3, #128	; 0x80
 8012682:	021b      	lsls	r3, r3, #8
 8012684:	69e2      	ldr	r2, [r4, #28]
 8012686:	429a      	cmp	r2, r3
 8012688:	d0e2      	beq.n	8012650 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801268a:	6861      	ldr	r1, [r4, #4]
 801268c:	2080      	movs	r0, #128	; 0x80
 801268e:	0200      	lsls	r0, r0, #8
 8012690:	f7ed fd54 	bl	800013c <__udivsi3>
 8012694:	0400      	lsls	r0, r0, #16
 8012696:	0c00      	lsrs	r0, r0, #16
 8012698:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801269a:	2000      	movs	r0, #0
        break;
 801269c:	e78d      	b.n	80125ba <UART_SetConfig+0x12a>
 801269e:	46c0      	nop			; (mov r8, r8)
 80126a0:	efff69f3 	.word	0xefff69f3
 80126a4:	ffffcfff 	.word	0xffffcfff
 80126a8:	fffff4ff 	.word	0xfffff4ff
 80126ac:	40013800 	.word	0x40013800
 80126b0:	40004400 	.word	0x40004400
 80126b4:	40004800 	.word	0x40004800
 80126b8:	40004c00 	.word	0x40004c00
 80126bc:	40005000 	.word	0x40005000
 80126c0:	40011400 	.word	0x40011400
 80126c4:	40011800 	.word	0x40011800
 80126c8:	40011c00 	.word	0x40011c00
 80126cc:	40021000 	.word	0x40021000
 80126d0:	007a1200 	.word	0x007a1200
 80126d4:	00f42400 	.word	0x00f42400

080126d8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80126d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80126da:	07db      	lsls	r3, r3, #31
 80126dc:	d506      	bpl.n	80126ec <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80126de:	6802      	ldr	r2, [r0, #0]
 80126e0:	6853      	ldr	r3, [r2, #4]
 80126e2:	492c      	ldr	r1, [pc, #176]	; (8012794 <UART_AdvFeatureConfig+0xbc>)
 80126e4:	400b      	ands	r3, r1
 80126e6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80126e8:	430b      	orrs	r3, r1
 80126ea:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80126ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80126ee:	079b      	lsls	r3, r3, #30
 80126f0:	d506      	bpl.n	8012700 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80126f2:	6802      	ldr	r2, [r0, #0]
 80126f4:	6853      	ldr	r3, [r2, #4]
 80126f6:	4928      	ldr	r1, [pc, #160]	; (8012798 <UART_AdvFeatureConfig+0xc0>)
 80126f8:	400b      	ands	r3, r1
 80126fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80126fc:	430b      	orrs	r3, r1
 80126fe:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012702:	075b      	lsls	r3, r3, #29
 8012704:	d506      	bpl.n	8012714 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012706:	6802      	ldr	r2, [r0, #0]
 8012708:	6853      	ldr	r3, [r2, #4]
 801270a:	4924      	ldr	r1, [pc, #144]	; (801279c <UART_AdvFeatureConfig+0xc4>)
 801270c:	400b      	ands	r3, r1
 801270e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012710:	430b      	orrs	r3, r1
 8012712:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012716:	071b      	lsls	r3, r3, #28
 8012718:	d506      	bpl.n	8012728 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801271a:	6802      	ldr	r2, [r0, #0]
 801271c:	6853      	ldr	r3, [r2, #4]
 801271e:	4920      	ldr	r1, [pc, #128]	; (80127a0 <UART_AdvFeatureConfig+0xc8>)
 8012720:	400b      	ands	r3, r1
 8012722:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012724:	430b      	orrs	r3, r1
 8012726:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012728:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801272a:	06db      	lsls	r3, r3, #27
 801272c:	d506      	bpl.n	801273c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801272e:	6802      	ldr	r2, [r0, #0]
 8012730:	6893      	ldr	r3, [r2, #8]
 8012732:	491c      	ldr	r1, [pc, #112]	; (80127a4 <UART_AdvFeatureConfig+0xcc>)
 8012734:	400b      	ands	r3, r1
 8012736:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012738:	430b      	orrs	r3, r1
 801273a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801273c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801273e:	069b      	lsls	r3, r3, #26
 8012740:	d506      	bpl.n	8012750 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012742:	6802      	ldr	r2, [r0, #0]
 8012744:	6893      	ldr	r3, [r2, #8]
 8012746:	4918      	ldr	r1, [pc, #96]	; (80127a8 <UART_AdvFeatureConfig+0xd0>)
 8012748:	400b      	ands	r3, r1
 801274a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801274c:	430b      	orrs	r3, r1
 801274e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012752:	065b      	lsls	r3, r3, #25
 8012754:	d50b      	bpl.n	801276e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012756:	6802      	ldr	r2, [r0, #0]
 8012758:	6853      	ldr	r3, [r2, #4]
 801275a:	4914      	ldr	r1, [pc, #80]	; (80127ac <UART_AdvFeatureConfig+0xd4>)
 801275c:	400b      	ands	r3, r1
 801275e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012760:	430b      	orrs	r3, r1
 8012762:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012764:	2380      	movs	r3, #128	; 0x80
 8012766:	035b      	lsls	r3, r3, #13
 8012768:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801276a:	429a      	cmp	r2, r3
 801276c:	d00a      	beq.n	8012784 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801276e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012770:	061b      	lsls	r3, r3, #24
 8012772:	d506      	bpl.n	8012782 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012774:	6802      	ldr	r2, [r0, #0]
 8012776:	6853      	ldr	r3, [r2, #4]
 8012778:	490d      	ldr	r1, [pc, #52]	; (80127b0 <UART_AdvFeatureConfig+0xd8>)
 801277a:	400b      	ands	r3, r1
 801277c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801277e:	430b      	orrs	r3, r1
 8012780:	6053      	str	r3, [r2, #4]
}
 8012782:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012784:	6802      	ldr	r2, [r0, #0]
 8012786:	6853      	ldr	r3, [r2, #4]
 8012788:	490a      	ldr	r1, [pc, #40]	; (80127b4 <UART_AdvFeatureConfig+0xdc>)
 801278a:	400b      	ands	r3, r1
 801278c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801278e:	430b      	orrs	r3, r1
 8012790:	6053      	str	r3, [r2, #4]
 8012792:	e7ec      	b.n	801276e <UART_AdvFeatureConfig+0x96>
 8012794:	fffdffff 	.word	0xfffdffff
 8012798:	fffeffff 	.word	0xfffeffff
 801279c:	fffbffff 	.word	0xfffbffff
 80127a0:	ffff7fff 	.word	0xffff7fff
 80127a4:	ffffefff 	.word	0xffffefff
 80127a8:	ffffdfff 	.word	0xffffdfff
 80127ac:	ffefffff 	.word	0xffefffff
 80127b0:	fff7ffff 	.word	0xfff7ffff
 80127b4:	ff9fffff 	.word	0xff9fffff

080127b8 <UART_WaitOnFlagUntilTimeout>:
{
 80127b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ba:	46c6      	mov	lr, r8
 80127bc:	b500      	push	{lr}
 80127be:	0006      	movs	r6, r0
 80127c0:	000c      	movs	r4, r1
 80127c2:	0017      	movs	r7, r2
 80127c4:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80127c6:	f7fd f8d7 	bl	800f978 <HAL_GetTick>
 80127ca:	4680      	mov	r8, r0
  if(Status == RESET)
 80127cc:	2f00      	cmp	r7, #0
 80127ce:	d029      	beq.n	8012824 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80127d0:	6832      	ldr	r2, [r6, #0]
 80127d2:	69d3      	ldr	r3, [r2, #28]
 80127d4:	4023      	ands	r3, r4
 80127d6:	42a3      	cmp	r3, r4
 80127d8:	d152      	bne.n	8012880 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80127da:	1c6b      	adds	r3, r5, #1
 80127dc:	d0f9      	beq.n	80127d2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80127de:	2d00      	cmp	r5, #0
 80127e0:	d005      	beq.n	80127ee <UART_WaitOnFlagUntilTimeout+0x36>
 80127e2:	f7fd f8c9 	bl	800f978 <HAL_GetTick>
 80127e6:	4643      	mov	r3, r8
 80127e8:	1ac0      	subs	r0, r0, r3
 80127ea:	42a8      	cmp	r0, r5
 80127ec:	d9f0      	bls.n	80127d0 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80127ee:	6832      	ldr	r2, [r6, #0]
 80127f0:	6813      	ldr	r3, [r2, #0]
 80127f2:	2180      	movs	r1, #128	; 0x80
 80127f4:	438b      	bics	r3, r1
 80127f6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80127f8:	6832      	ldr	r2, [r6, #0]
 80127fa:	6813      	ldr	r3, [r2, #0]
 80127fc:	3960      	subs	r1, #96	; 0x60
 80127fe:	438b      	bics	r3, r1
 8012800:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012802:	6832      	ldr	r2, [r6, #0]
 8012804:	6813      	ldr	r3, [r2, #0]
 8012806:	491f      	ldr	r1, [pc, #124]	; (8012884 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012808:	400b      	ands	r3, r1
 801280a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801280c:	6831      	ldr	r1, [r6, #0]
 801280e:	688b      	ldr	r3, [r1, #8]
 8012810:	2201      	movs	r2, #1
 8012812:	4393      	bics	r3, r2
 8012814:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012816:	2369      	movs	r3, #105	; 0x69
 8012818:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801281a:	3b01      	subs	r3, #1
 801281c:	2200      	movs	r2, #0
 801281e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012820:	2003      	movs	r0, #3
 8012822:	e02a      	b.n	801287a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012824:	6832      	ldr	r2, [r6, #0]
 8012826:	69d3      	ldr	r3, [r2, #28]
 8012828:	4023      	ands	r3, r4
 801282a:	42a3      	cmp	r3, r4
 801282c:	d024      	beq.n	8012878 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801282e:	1c6b      	adds	r3, r5, #1
 8012830:	d0f9      	beq.n	8012826 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012832:	2d00      	cmp	r5, #0
 8012834:	d005      	beq.n	8012842 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012836:	f7fd f89f 	bl	800f978 <HAL_GetTick>
 801283a:	4643      	mov	r3, r8
 801283c:	1ac0      	subs	r0, r0, r3
 801283e:	42a8      	cmp	r0, r5
 8012840:	d9f0      	bls.n	8012824 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012842:	6832      	ldr	r2, [r6, #0]
 8012844:	6813      	ldr	r3, [r2, #0]
 8012846:	2180      	movs	r1, #128	; 0x80
 8012848:	438b      	bics	r3, r1
 801284a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801284c:	6832      	ldr	r2, [r6, #0]
 801284e:	6813      	ldr	r3, [r2, #0]
 8012850:	3960      	subs	r1, #96	; 0x60
 8012852:	438b      	bics	r3, r1
 8012854:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012856:	6832      	ldr	r2, [r6, #0]
 8012858:	6813      	ldr	r3, [r2, #0]
 801285a:	490a      	ldr	r1, [pc, #40]	; (8012884 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801285c:	400b      	ands	r3, r1
 801285e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012860:	6831      	ldr	r1, [r6, #0]
 8012862:	688b      	ldr	r3, [r1, #8]
 8012864:	2201      	movs	r2, #1
 8012866:	4393      	bics	r3, r2
 8012868:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801286a:	2369      	movs	r3, #105	; 0x69
 801286c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801286e:	3b01      	subs	r3, #1
 8012870:	2200      	movs	r2, #0
 8012872:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012874:	2003      	movs	r0, #3
 8012876:	e000      	b.n	801287a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012878:	2000      	movs	r0, #0
}
 801287a:	bc04      	pop	{r2}
 801287c:	4690      	mov	r8, r2
 801287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012880:	2000      	movs	r0, #0
 8012882:	e7fa      	b.n	801287a <UART_WaitOnFlagUntilTimeout+0xc2>
 8012884:	fffffeff 	.word	0xfffffeff

08012888 <HAL_UART_Transmit>:
{
 8012888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801288a:	b083      	sub	sp, #12
 801288c:	0004      	movs	r4, r0
 801288e:	000e      	movs	r6, r1
 8012890:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012892:	2369      	movs	r3, #105	; 0x69
 8012894:	5cc3      	ldrb	r3, [r0, r3]
 8012896:	2b01      	cmp	r3, #1
 8012898:	d004      	beq.n	80128a4 <HAL_UART_Transmit+0x1c>
 801289a:	2369      	movs	r3, #105	; 0x69
 801289c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801289e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80128a0:	2b22      	cmp	r3, #34	; 0x22
 80128a2:	d153      	bne.n	801294c <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80128a4:	2e00      	cmp	r6, #0
 80128a6:	d050      	beq.n	801294a <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80128a8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80128aa:	2a00      	cmp	r2, #0
 80128ac:	d04e      	beq.n	801294c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80128ae:	2368      	movs	r3, #104	; 0x68
 80128b0:	5ce3      	ldrb	r3, [r4, r3]
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d04c      	beq.n	8012950 <HAL_UART_Transmit+0xc8>
 80128b6:	2368      	movs	r3, #104	; 0x68
 80128b8:	2101      	movs	r1, #1
 80128ba:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128bc:	2300      	movs	r3, #0
 80128be:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80128c0:	3369      	adds	r3, #105	; 0x69
 80128c2:	5ce3      	ldrb	r3, [r4, r3]
 80128c4:	2b22      	cmp	r3, #34	; 0x22
 80128c6:	d008      	beq.n	80128da <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80128c8:	2369      	movs	r3, #105	; 0x69
 80128ca:	2112      	movs	r1, #18
 80128cc:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80128ce:	2350      	movs	r3, #80	; 0x50
 80128d0:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80128d2:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128d4:	2580      	movs	r5, #128	; 0x80
 80128d6:	016d      	lsls	r5, r5, #5
 80128d8:	e00a      	b.n	80128f0 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80128da:	3347      	adds	r3, #71	; 0x47
 80128dc:	3131      	adds	r1, #49	; 0x31
 80128de:	54e1      	strb	r1, [r4, r3]
 80128e0:	e7f5      	b.n	80128ce <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80128e2:	7833      	ldrb	r3, [r6, #0]
 80128e4:	6822      	ldr	r2, [r4, #0]
 80128e6:	8513      	strh	r3, [r2, #40]	; 0x28
 80128e8:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80128ea:	5be2      	ldrh	r2, [r4, r7]
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	d016      	beq.n	801291e <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80128f0:	3a01      	subs	r2, #1
 80128f2:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80128f4:	9b01      	ldr	r3, [sp, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	2180      	movs	r1, #128	; 0x80
 80128fa:	0020      	movs	r0, r4
 80128fc:	f7ff ff5c 	bl	80127b8 <UART_WaitOnFlagUntilTimeout>
 8012900:	2800      	cmp	r0, #0
 8012902:	d127      	bne.n	8012954 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012904:	68a3      	ldr	r3, [r4, #8]
 8012906:	42ab      	cmp	r3, r5
 8012908:	d1eb      	bne.n	80128e2 <HAL_UART_Transmit+0x5a>
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d1e8      	bne.n	80128e2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012910:	8833      	ldrh	r3, [r6, #0]
 8012912:	05db      	lsls	r3, r3, #23
 8012914:	0ddb      	lsrs	r3, r3, #23
 8012916:	6822      	ldr	r2, [r4, #0]
 8012918:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801291a:	3602      	adds	r6, #2
 801291c:	e7e5      	b.n	80128ea <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801291e:	9b01      	ldr	r3, [sp, #4]
 8012920:	2140      	movs	r1, #64	; 0x40
 8012922:	0020      	movs	r0, r4
 8012924:	f7ff ff48 	bl	80127b8 <UART_WaitOnFlagUntilTimeout>
 8012928:	2800      	cmp	r0, #0
 801292a:	d115      	bne.n	8012958 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801292c:	2369      	movs	r3, #105	; 0x69
 801292e:	5ce3      	ldrb	r3, [r4, r3]
 8012930:	2b32      	cmp	r3, #50	; 0x32
 8012932:	d006      	beq.n	8012942 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012934:	2369      	movs	r3, #105	; 0x69
 8012936:	2201      	movs	r2, #1
 8012938:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801293a:	2368      	movs	r3, #104	; 0x68
 801293c:	2200      	movs	r2, #0
 801293e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012940:	e004      	b.n	801294c <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012942:	3337      	adds	r3, #55	; 0x37
 8012944:	2222      	movs	r2, #34	; 0x22
 8012946:	54e2      	strb	r2, [r4, r3]
 8012948:	e7f7      	b.n	801293a <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 801294a:	2001      	movs	r0, #1
}
 801294c:	b003      	add	sp, #12
 801294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8012950:	2002      	movs	r0, #2
 8012952:	e7fb      	b.n	801294c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012954:	2003      	movs	r0, #3
 8012956:	e7f9      	b.n	801294c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012958:	2003      	movs	r0, #3
 801295a:	e7f7      	b.n	801294c <HAL_UART_Transmit+0xc4>

0801295c <UART_CheckIdleState>:
{
 801295c:	b510      	push	{r4, lr}
 801295e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012960:	2300      	movs	r3, #0
 8012962:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012964:	6803      	ldr	r3, [r0, #0]
 8012966:	4a18      	ldr	r2, [pc, #96]	; (80129c8 <UART_CheckIdleState+0x6c>)
 8012968:	4293      	cmp	r3, r2
 801296a:	d005      	beq.n	8012978 <UART_CheckIdleState+0x1c>
 801296c:	4a17      	ldr	r2, [pc, #92]	; (80129cc <UART_CheckIdleState+0x70>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d002      	beq.n	8012978 <UART_CheckIdleState+0x1c>
 8012972:	4a17      	ldr	r2, [pc, #92]	; (80129d0 <UART_CheckIdleState+0x74>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d106      	bne.n	8012986 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	071b      	lsls	r3, r3, #28
 801297c:	d40b      	bmi.n	8012996 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801297e:	6823      	ldr	r3, [r4, #0]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	075b      	lsls	r3, r3, #29
 8012984:	d413      	bmi.n	80129ae <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012986:	2369      	movs	r3, #105	; 0x69
 8012988:	2201      	movs	r2, #1
 801298a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801298c:	3b01      	subs	r3, #1
 801298e:	2200      	movs	r2, #0
 8012990:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012992:	2000      	movs	r0, #0
}
 8012994:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012996:	23fa      	movs	r3, #250	; 0xfa
 8012998:	2180      	movs	r1, #128	; 0x80
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	2200      	movs	r2, #0
 801299e:	0389      	lsls	r1, r1, #14
 80129a0:	0020      	movs	r0, r4
 80129a2:	f7ff ff09 	bl	80127b8 <UART_WaitOnFlagUntilTimeout>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d0e9      	beq.n	801297e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80129aa:	2003      	movs	r0, #3
 80129ac:	e7f2      	b.n	8012994 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80129ae:	23fa      	movs	r3, #250	; 0xfa
 80129b0:	2180      	movs	r1, #128	; 0x80
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	2200      	movs	r2, #0
 80129b6:	03c9      	lsls	r1, r1, #15
 80129b8:	0020      	movs	r0, r4
 80129ba:	f7ff fefd 	bl	80127b8 <UART_WaitOnFlagUntilTimeout>
 80129be:	2800      	cmp	r0, #0
 80129c0:	d0e1      	beq.n	8012986 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80129c2:	2003      	movs	r0, #3
 80129c4:	e7e6      	b.n	8012994 <UART_CheckIdleState+0x38>
 80129c6:	46c0      	nop			; (mov r8, r8)
 80129c8:	40013800 	.word	0x40013800
 80129cc:	40004400 	.word	0x40004400
 80129d0:	40004800 	.word	0x40004800

080129d4 <HAL_UART_Init>:
{
 80129d4:	b510      	push	{r4, lr}
 80129d6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80129d8:	d030      	beq.n	8012a3c <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80129da:	2369      	movs	r3, #105	; 0x69
 80129dc:	5cc3      	ldrb	r3, [r0, r3]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d022      	beq.n	8012a28 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80129e2:	2369      	movs	r3, #105	; 0x69
 80129e4:	2202      	movs	r2, #2
 80129e6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80129e8:	6822      	ldr	r2, [r4, #0]
 80129ea:	6813      	ldr	r3, [r2, #0]
 80129ec:	2101      	movs	r1, #1
 80129ee:	438b      	bics	r3, r1
 80129f0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80129f2:	0020      	movs	r0, r4
 80129f4:	f7ff fd4c 	bl	8012490 <UART_SetConfig>
 80129f8:	2801      	cmp	r0, #1
 80129fa:	d014      	beq.n	8012a26 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80129fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d118      	bne.n	8012a34 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012a02:	6822      	ldr	r2, [r4, #0]
 8012a04:	6853      	ldr	r3, [r2, #4]
 8012a06:	490e      	ldr	r1, [pc, #56]	; (8012a40 <HAL_UART_Init+0x6c>)
 8012a08:	400b      	ands	r3, r1
 8012a0a:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012a0c:	6822      	ldr	r2, [r4, #0]
 8012a0e:	6893      	ldr	r3, [r2, #8]
 8012a10:	212a      	movs	r1, #42	; 0x2a
 8012a12:	438b      	bics	r3, r1
 8012a14:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012a16:	6822      	ldr	r2, [r4, #0]
 8012a18:	6813      	ldr	r3, [r2, #0]
 8012a1a:	3929      	subs	r1, #41	; 0x29
 8012a1c:	430b      	orrs	r3, r1
 8012a1e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012a20:	0020      	movs	r0, r4
 8012a22:	f7ff ff9b 	bl	801295c <UART_CheckIdleState>
}
 8012a26:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012a28:	3368      	adds	r3, #104	; 0x68
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012a2e:	f7fa fe1b 	bl	800d668 <HAL_UART_MspInit>
 8012a32:	e7d6      	b.n	80129e2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012a34:	0020      	movs	r0, r4
 8012a36:	f7ff fe4f 	bl	80126d8 <UART_AdvFeatureConfig>
 8012a3a:	e7e2      	b.n	8012a02 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012a3c:	2001      	movs	r0, #1
 8012a3e:	e7f2      	b.n	8012a26 <HAL_UART_Init+0x52>
 8012a40:	ffffb7ff 	.word	0xffffb7ff

08012a44 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012a44:	2369      	movs	r3, #105	; 0x69
 8012a46:	5cc3      	ldrb	r3, [r0, r3]
 8012a48:	2b12      	cmp	r3, #18
 8012a4a:	d004      	beq.n	8012a56 <UART_Transmit_IT+0x12>
 8012a4c:	2369      	movs	r3, #105	; 0x69
 8012a4e:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012a50:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012a52:	2a32      	cmp	r2, #50	; 0x32
 8012a54:	d113      	bne.n	8012a7e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012a56:	2352      	movs	r3, #82	; 0x52
 8012a58:	5ac3      	ldrh	r3, [r0, r3]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d011      	beq.n	8012a82 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a5e:	2380      	movs	r3, #128	; 0x80
 8012a60:	015b      	lsls	r3, r3, #5
 8012a62:	6882      	ldr	r2, [r0, #8]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d018      	beq.n	8012a9a <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012a68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012a6a:	1c5a      	adds	r2, r3, #1
 8012a6c:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	6802      	ldr	r2, [r0, #0]
 8012a72:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012a74:	2252      	movs	r2, #82	; 0x52
 8012a76:	5a83      	ldrh	r3, [r0, r2]
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012a7c:	2300      	movs	r3, #0
  }
}
 8012a7e:	0018      	movs	r0, r3
 8012a80:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012a82:	6802      	ldr	r2, [r0, #0]
 8012a84:	6813      	ldr	r3, [r2, #0]
 8012a86:	2180      	movs	r1, #128	; 0x80
 8012a88:	438b      	bics	r3, r1
 8012a8a:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012a8c:	6802      	ldr	r2, [r0, #0]
 8012a8e:	6813      	ldr	r3, [r2, #0]
 8012a90:	3940      	subs	r1, #64	; 0x40
 8012a92:	430b      	orrs	r3, r1
 8012a94:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e7f1      	b.n	8012a7e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a9a:	6903      	ldr	r3, [r0, #16]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d1e3      	bne.n	8012a68 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012aa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	05db      	lsls	r3, r3, #23
 8012aa6:	0ddb      	lsrs	r3, r3, #23
 8012aa8:	6802      	ldr	r2, [r0, #0]
 8012aaa:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012aac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012aae:	3302      	adds	r3, #2
 8012ab0:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012ab2:	e7df      	b.n	8012a74 <UART_Transmit_IT+0x30>

08012ab4 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012ab4:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012ab6:	6802      	ldr	r2, [r0, #0]
 8012ab8:	6813      	ldr	r3, [r2, #0]
 8012aba:	2140      	movs	r1, #64	; 0x40
 8012abc:	438b      	bics	r3, r1
 8012abe:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012ac0:	2369      	movs	r3, #105	; 0x69
 8012ac2:	5cc3      	ldrb	r3, [r0, r3]
 8012ac4:	2b32      	cmp	r3, #50	; 0x32
 8012ac6:	d00a      	beq.n	8012ade <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012ac8:	6801      	ldr	r1, [r0, #0]
 8012aca:	688b      	ldr	r3, [r1, #8]
 8012acc:	2201      	movs	r2, #1
 8012ace:	4393      	bics	r3, r2
 8012ad0:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012ad2:	2369      	movs	r3, #105	; 0x69
 8012ad4:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012ad6:	f7fa fa09 	bl	800ceec <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012ada:	2000      	movs	r0, #0
 8012adc:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012ade:	3337      	adds	r3, #55	; 0x37
 8012ae0:	2222      	movs	r2, #34	; 0x22
 8012ae2:	54c2      	strb	r2, [r0, r3]
 8012ae4:	e7f7      	b.n	8012ad6 <UART_EndTransmit_IT+0x22>
	...

08012ae8 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012ae8:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012aea:	2369      	movs	r3, #105	; 0x69
 8012aec:	5cc3      	ldrb	r3, [r0, r3]
 8012aee:	2b22      	cmp	r3, #34	; 0x22
 8012af0:	d004      	beq.n	8012afc <UART_Receive_IT+0x14>
 8012af2:	2369      	movs	r3, #105	; 0x69
 8012af4:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012af6:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012af8:	2b32      	cmp	r3, #50	; 0x32
 8012afa:	d12d      	bne.n	8012b58 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8012afc:	235c      	movs	r3, #92	; 0x5c
 8012afe:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b00:	2280      	movs	r2, #128	; 0x80
 8012b02:	0152      	lsls	r2, r2, #5
 8012b04:	6883      	ldr	r3, [r0, #8]
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d028      	beq.n	8012b5c <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012b0a:	6803      	ldr	r3, [r0, #0]
 8012b0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b0e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012b10:	1c54      	adds	r4, r2, #1
 8012b12:	6544      	str	r4, [r0, #84]	; 0x54
 8012b14:	400b      	ands	r3, r1
 8012b16:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012b18:	225a      	movs	r2, #90	; 0x5a
 8012b1a:	5a83      	ldrh	r3, [r0, r2]
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012b22:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d117      	bne.n	8012b58 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012b28:	6802      	ldr	r2, [r0, #0]
 8012b2a:	6813      	ldr	r3, [r2, #0]
 8012b2c:	2120      	movs	r1, #32
 8012b2e:	438b      	bics	r3, r1
 8012b30:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012b32:	2369      	movs	r3, #105	; 0x69
 8012b34:	5cc3      	ldrb	r3, [r0, r3]
 8012b36:	2b32      	cmp	r3, #50	; 0x32
 8012b38:	d01c      	beq.n	8012b74 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012b3a:	6802      	ldr	r2, [r0, #0]
 8012b3c:	6813      	ldr	r3, [r2, #0]
 8012b3e:	490f      	ldr	r1, [pc, #60]	; (8012b7c <UART_Receive_IT+0x94>)
 8012b40:	400b      	ands	r3, r1
 8012b42:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012b44:	6801      	ldr	r1, [r0, #0]
 8012b46:	688b      	ldr	r3, [r1, #8]
 8012b48:	2201      	movs	r2, #1
 8012b4a:	4393      	bics	r3, r2
 8012b4c:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8012b4e:	2369      	movs	r3, #105	; 0x69
 8012b50:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8012b52:	f7fa fa09 	bl	800cf68 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012b56:	2200      	movs	r2, #0
  }
}
 8012b58:	0010      	movs	r0, r2
 8012b5a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b5c:	6903      	ldr	r3, [r0, #16]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1d3      	bne.n	8012b0a <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012b62:	6803      	ldr	r3, [r0, #0]
 8012b64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b66:	400b      	ands	r3, r1
 8012b68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012b6a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012b6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012b6e:	3302      	adds	r3, #2
 8012b70:	6543      	str	r3, [r0, #84]	; 0x54
 8012b72:	e7d1      	b.n	8012b18 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012b74:	3337      	adds	r3, #55	; 0x37
 8012b76:	2212      	movs	r2, #18
 8012b78:	54c2      	strb	r2, [r0, r3]
 8012b7a:	e7ea      	b.n	8012b52 <UART_Receive_IT+0x6a>
 8012b7c:	fffffeff 	.word	0xfffffeff

08012b80 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012b80:	4770      	bx	lr

08012b82 <HAL_UART_IRQHandler>:
{
 8012b82:	b510      	push	{r4, lr}
 8012b84:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012b86:	6803      	ldr	r3, [r0, #0]
 8012b88:	69da      	ldr	r2, [r3, #28]
 8012b8a:	07d2      	lsls	r2, r2, #31
 8012b8c:	d509      	bpl.n	8012ba2 <HAL_UART_IRQHandler+0x20>
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	05d2      	lsls	r2, r2, #23
 8012b92:	d506      	bpl.n	8012ba2 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012b94:	2201      	movs	r2, #1
 8012b96:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012b98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012b9e:	2369      	movs	r3, #105	; 0x69
 8012ba0:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	69da      	ldr	r2, [r3, #28]
 8012ba6:	0792      	lsls	r2, r2, #30
 8012ba8:	d50b      	bpl.n	8012bc2 <HAL_UART_IRQHandler+0x40>
 8012baa:	689a      	ldr	r2, [r3, #8]
 8012bac:	07d2      	lsls	r2, r2, #31
 8012bae:	d508      	bpl.n	8012bc2 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012bb0:	2202      	movs	r2, #2
 8012bb2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012bb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012bb6:	3202      	adds	r2, #2
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012bbc:	2369      	movs	r3, #105	; 0x69
 8012bbe:	3a03      	subs	r2, #3
 8012bc0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	69da      	ldr	r2, [r3, #28]
 8012bc6:	0752      	lsls	r2, r2, #29
 8012bc8:	d50b      	bpl.n	8012be2 <HAL_UART_IRQHandler+0x60>
 8012bca:	689a      	ldr	r2, [r3, #8]
 8012bcc:	07d2      	lsls	r2, r2, #31
 8012bce:	d508      	bpl.n	8012be2 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012bd0:	2204      	movs	r2, #4
 8012bd2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012bd4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012bd6:	3a02      	subs	r2, #2
 8012bd8:	4313      	orrs	r3, r2
 8012bda:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012bdc:	2369      	movs	r3, #105	; 0x69
 8012bde:	3a01      	subs	r2, #1
 8012be0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	69da      	ldr	r2, [r3, #28]
 8012be6:	0712      	lsls	r2, r2, #28
 8012be8:	d50a      	bpl.n	8012c00 <HAL_UART_IRQHandler+0x7e>
 8012bea:	689a      	ldr	r2, [r3, #8]
 8012bec:	07d2      	lsls	r2, r2, #31
 8012bee:	d507      	bpl.n	8012c00 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012bf0:	2208      	movs	r2, #8
 8012bf2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012bf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012bfa:	2369      	movs	r3, #105	; 0x69
 8012bfc:	3a07      	subs	r2, #7
 8012bfe:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012c00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d11c      	bne.n	8012c40 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	69da      	ldr	r2, [r3, #28]
 8012c0a:	02d2      	lsls	r2, r2, #11
 8012c0c:	d502      	bpl.n	8012c14 <HAL_UART_IRQHandler+0x92>
 8012c0e:	689a      	ldr	r2, [r3, #8]
 8012c10:	0252      	lsls	r2, r2, #9
 8012c12:	d419      	bmi.n	8012c48 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	69da      	ldr	r2, [r3, #28]
 8012c18:	0692      	lsls	r2, r2, #26
 8012c1a:	d502      	bpl.n	8012c22 <HAL_UART_IRQHandler+0xa0>
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	069b      	lsls	r3, r3, #26
 8012c20:	d41c      	bmi.n	8012c5c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012c22:	6823      	ldr	r3, [r4, #0]
 8012c24:	69da      	ldr	r2, [r3, #28]
 8012c26:	0612      	lsls	r2, r2, #24
 8012c28:	d502      	bpl.n	8012c30 <HAL_UART_IRQHandler+0xae>
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	061b      	lsls	r3, r3, #24
 8012c2e:	d41e      	bmi.n	8012c6e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	69da      	ldr	r2, [r3, #28]
 8012c34:	0652      	lsls	r2, r2, #25
 8012c36:	d502      	bpl.n	8012c3e <HAL_UART_IRQHandler+0xbc>
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	065b      	lsls	r3, r3, #25
 8012c3c:	d41b      	bmi.n	8012c76 <HAL_UART_IRQHandler+0xf4>
}
 8012c3e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012c40:	0020      	movs	r0, r4
 8012c42:	f7fa f96b 	bl	800cf1c <HAL_UART_ErrorCallback>
 8012c46:	e7de      	b.n	8012c06 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012c48:	2280      	movs	r2, #128	; 0x80
 8012c4a:	0352      	lsls	r2, r2, #13
 8012c4c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012c4e:	2369      	movs	r3, #105	; 0x69
 8012c50:	2201      	movs	r2, #1
 8012c52:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012c54:	0020      	movs	r0, r4
 8012c56:	f7ff ff93 	bl	8012b80 <HAL_UARTEx_WakeupCallback>
 8012c5a:	e7db      	b.n	8012c14 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012c5c:	0020      	movs	r0, r4
 8012c5e:	f7ff ff43 	bl	8012ae8 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c62:	6822      	ldr	r2, [r4, #0]
 8012c64:	6993      	ldr	r3, [r2, #24]
 8012c66:	2108      	movs	r1, #8
 8012c68:	430b      	orrs	r3, r1
 8012c6a:	6193      	str	r3, [r2, #24]
 8012c6c:	e7d9      	b.n	8012c22 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8012c6e:	0020      	movs	r0, r4
 8012c70:	f7ff fee8 	bl	8012a44 <UART_Transmit_IT>
 8012c74:	e7dc      	b.n	8012c30 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012c76:	0020      	movs	r0, r4
 8012c78:	f7ff ff1c 	bl	8012ab4 <UART_EndTransmit_IT>
}
 8012c7c:	e7df      	b.n	8012c3e <HAL_UART_IRQHandler+0xbc>

08012c7e <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012c7e:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012c80:	f7f0 fd7a 	bl	8003778 <Module_Init>
 8012c84:	e7fe      	b.n	8012c84 <main+0x6>

08012c86 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012c86:	e7fe      	b.n	8012c86 <UserTask>

08012c88 <atof>:
 8012c88:	b510      	push	{r4, lr}
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	f001 fcba 	bl	8014604 <strtod>
 8012c90:	bd10      	pop	{r4, pc}

08012c92 <atoi>:
 8012c92:	b510      	push	{r4, lr}
 8012c94:	220a      	movs	r2, #10
 8012c96:	2100      	movs	r1, #0
 8012c98:	f001 fd9e 	bl	80147d8 <strtol>
 8012c9c:	bd10      	pop	{r4, pc}

08012c9e <atol>:
 8012c9e:	b510      	push	{r4, lr}
 8012ca0:	220a      	movs	r2, #10
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	f001 fd98 	bl	80147d8 <strtol>
 8012ca8:	bd10      	pop	{r4, pc}
	...

08012cac <__libc_init_array>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	2600      	movs	r6, #0
 8012cb0:	4d0c      	ldr	r5, [pc, #48]	; (8012ce4 <__libc_init_array+0x38>)
 8012cb2:	4c0d      	ldr	r4, [pc, #52]	; (8012ce8 <__libc_init_array+0x3c>)
 8012cb4:	1b64      	subs	r4, r4, r5
 8012cb6:	10a4      	asrs	r4, r4, #2
 8012cb8:	42a6      	cmp	r6, r4
 8012cba:	d109      	bne.n	8012cd0 <__libc_init_array+0x24>
 8012cbc:	2600      	movs	r6, #0
 8012cbe:	f003 fd15 	bl	80166ec <_init>
 8012cc2:	4d0a      	ldr	r5, [pc, #40]	; (8012cec <__libc_init_array+0x40>)
 8012cc4:	4c0a      	ldr	r4, [pc, #40]	; (8012cf0 <__libc_init_array+0x44>)
 8012cc6:	1b64      	subs	r4, r4, r5
 8012cc8:	10a4      	asrs	r4, r4, #2
 8012cca:	42a6      	cmp	r6, r4
 8012ccc:	d105      	bne.n	8012cda <__libc_init_array+0x2e>
 8012cce:	bd70      	pop	{r4, r5, r6, pc}
 8012cd0:	00b3      	lsls	r3, r6, #2
 8012cd2:	58eb      	ldr	r3, [r5, r3]
 8012cd4:	4798      	blx	r3
 8012cd6:	3601      	adds	r6, #1
 8012cd8:	e7ee      	b.n	8012cb8 <__libc_init_array+0xc>
 8012cda:	00b3      	lsls	r3, r6, #2
 8012cdc:	58eb      	ldr	r3, [r5, r3]
 8012cde:	4798      	blx	r3
 8012ce0:	3601      	adds	r6, #1
 8012ce2:	e7f2      	b.n	8012cca <__libc_init_array+0x1e>
 8012ce4:	08019a80 	.word	0x08019a80
 8012ce8:	08019a80 	.word	0x08019a80
 8012cec:	08019a80 	.word	0x08019a80
 8012cf0:	08019a84 	.word	0x08019a84

08012cf4 <__locale_ctype_ptr_l>:
 8012cf4:	30ec      	adds	r0, #236	; 0xec
 8012cf6:	6800      	ldr	r0, [r0, #0]
 8012cf8:	4770      	bx	lr
	...

08012cfc <__locale_ctype_ptr>:
 8012cfc:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <__locale_ctype_ptr+0x14>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6a1b      	ldr	r3, [r3, #32]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d100      	bne.n	8012d08 <__locale_ctype_ptr+0xc>
 8012d06:	4b03      	ldr	r3, [pc, #12]	; (8012d14 <__locale_ctype_ptr+0x18>)
 8012d08:	33ec      	adds	r3, #236	; 0xec
 8012d0a:	6818      	ldr	r0, [r3, #0]
 8012d0c:	4770      	bx	lr
 8012d0e:	46c0      	nop			; (mov r8, r8)
 8012d10:	200000c4 	.word	0x200000c4
 8012d14:	20000128 	.word	0x20000128

08012d18 <malloc>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	4b03      	ldr	r3, [pc, #12]	; (8012d28 <malloc+0x10>)
 8012d1c:	0001      	movs	r1, r0
 8012d1e:	6818      	ldr	r0, [r3, #0]
 8012d20:	f000 f88a 	bl	8012e38 <_malloc_r>
 8012d24:	bd10      	pop	{r4, pc}
 8012d26:	46c0      	nop			; (mov r8, r8)
 8012d28:	200000c4 	.word	0x200000c4

08012d2c <free>:
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	4b03      	ldr	r3, [pc, #12]	; (8012d3c <free+0x10>)
 8012d30:	0001      	movs	r1, r0
 8012d32:	6818      	ldr	r0, [r3, #0]
 8012d34:	f000 f836 	bl	8012da4 <_free_r>
 8012d38:	bd10      	pop	{r4, pc}
 8012d3a:	46c0      	nop			; (mov r8, r8)
 8012d3c:	200000c4 	.word	0x200000c4

08012d40 <__ascii_mbtowc>:
 8012d40:	b082      	sub	sp, #8
 8012d42:	2900      	cmp	r1, #0
 8012d44:	d100      	bne.n	8012d48 <__ascii_mbtowc+0x8>
 8012d46:	a901      	add	r1, sp, #4
 8012d48:	1e10      	subs	r0, r2, #0
 8012d4a:	d006      	beq.n	8012d5a <__ascii_mbtowc+0x1a>
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d006      	beq.n	8012d5e <__ascii_mbtowc+0x1e>
 8012d50:	7813      	ldrb	r3, [r2, #0]
 8012d52:	600b      	str	r3, [r1, #0]
 8012d54:	7810      	ldrb	r0, [r2, #0]
 8012d56:	1e43      	subs	r3, r0, #1
 8012d58:	4198      	sbcs	r0, r3
 8012d5a:	b002      	add	sp, #8
 8012d5c:	4770      	bx	lr
 8012d5e:	2002      	movs	r0, #2
 8012d60:	4240      	negs	r0, r0
 8012d62:	e7fa      	b.n	8012d5a <__ascii_mbtowc+0x1a>

08012d64 <memcmp>:
 8012d64:	b530      	push	{r4, r5, lr}
 8012d66:	2400      	movs	r4, #0
 8012d68:	42a2      	cmp	r2, r4
 8012d6a:	d101      	bne.n	8012d70 <memcmp+0xc>
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	e005      	b.n	8012d7c <memcmp+0x18>
 8012d70:	5d03      	ldrb	r3, [r0, r4]
 8012d72:	1c65      	adds	r5, r4, #1
 8012d74:	5d0c      	ldrb	r4, [r1, r4]
 8012d76:	42a3      	cmp	r3, r4
 8012d78:	d001      	beq.n	8012d7e <memcmp+0x1a>
 8012d7a:	1b18      	subs	r0, r3, r4
 8012d7c:	bd30      	pop	{r4, r5, pc}
 8012d7e:	002c      	movs	r4, r5
 8012d80:	e7f2      	b.n	8012d68 <memcmp+0x4>

08012d82 <memcpy>:
 8012d82:	2300      	movs	r3, #0
 8012d84:	b510      	push	{r4, lr}
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d100      	bne.n	8012d8c <memcpy+0xa>
 8012d8a:	bd10      	pop	{r4, pc}
 8012d8c:	5ccc      	ldrb	r4, [r1, r3]
 8012d8e:	54c4      	strb	r4, [r0, r3]
 8012d90:	3301      	adds	r3, #1
 8012d92:	e7f8      	b.n	8012d86 <memcpy+0x4>

08012d94 <memset>:
 8012d94:	0003      	movs	r3, r0
 8012d96:	1812      	adds	r2, r2, r0
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d100      	bne.n	8012d9e <memset+0xa>
 8012d9c:	4770      	bx	lr
 8012d9e:	7019      	strb	r1, [r3, #0]
 8012da0:	3301      	adds	r3, #1
 8012da2:	e7f9      	b.n	8012d98 <memset+0x4>

08012da4 <_free_r>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	0005      	movs	r5, r0
 8012da8:	2900      	cmp	r1, #0
 8012daa:	d010      	beq.n	8012dce <_free_r+0x2a>
 8012dac:	1f0c      	subs	r4, r1, #4
 8012dae:	6823      	ldr	r3, [r4, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	da00      	bge.n	8012db6 <_free_r+0x12>
 8012db4:	18e4      	adds	r4, r4, r3
 8012db6:	0028      	movs	r0, r5
 8012db8:	f002 fedf 	bl	8015b7a <__malloc_lock>
 8012dbc:	4a1d      	ldr	r2, [pc, #116]	; (8012e34 <_free_r+0x90>)
 8012dbe:	6813      	ldr	r3, [r2, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d105      	bne.n	8012dd0 <_free_r+0x2c>
 8012dc4:	6063      	str	r3, [r4, #4]
 8012dc6:	6014      	str	r4, [r2, #0]
 8012dc8:	0028      	movs	r0, r5
 8012dca:	f002 fed7 	bl	8015b7c <__malloc_unlock>
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	42a3      	cmp	r3, r4
 8012dd2:	d909      	bls.n	8012de8 <_free_r+0x44>
 8012dd4:	6821      	ldr	r1, [r4, #0]
 8012dd6:	1860      	adds	r0, r4, r1
 8012dd8:	4283      	cmp	r3, r0
 8012dda:	d1f3      	bne.n	8012dc4 <_free_r+0x20>
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	1841      	adds	r1, r0, r1
 8012de2:	6021      	str	r1, [r4, #0]
 8012de4:	e7ee      	b.n	8012dc4 <_free_r+0x20>
 8012de6:	0013      	movs	r3, r2
 8012de8:	685a      	ldr	r2, [r3, #4]
 8012dea:	2a00      	cmp	r2, #0
 8012dec:	d001      	beq.n	8012df2 <_free_r+0x4e>
 8012dee:	42a2      	cmp	r2, r4
 8012df0:	d9f9      	bls.n	8012de6 <_free_r+0x42>
 8012df2:	6819      	ldr	r1, [r3, #0]
 8012df4:	1858      	adds	r0, r3, r1
 8012df6:	42a0      	cmp	r0, r4
 8012df8:	d10b      	bne.n	8012e12 <_free_r+0x6e>
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	1809      	adds	r1, r1, r0
 8012dfe:	1858      	adds	r0, r3, r1
 8012e00:	6019      	str	r1, [r3, #0]
 8012e02:	4282      	cmp	r2, r0
 8012e04:	d1e0      	bne.n	8012dc8 <_free_r+0x24>
 8012e06:	6810      	ldr	r0, [r2, #0]
 8012e08:	6852      	ldr	r2, [r2, #4]
 8012e0a:	1841      	adds	r1, r0, r1
 8012e0c:	6019      	str	r1, [r3, #0]
 8012e0e:	605a      	str	r2, [r3, #4]
 8012e10:	e7da      	b.n	8012dc8 <_free_r+0x24>
 8012e12:	42a0      	cmp	r0, r4
 8012e14:	d902      	bls.n	8012e1c <_free_r+0x78>
 8012e16:	230c      	movs	r3, #12
 8012e18:	602b      	str	r3, [r5, #0]
 8012e1a:	e7d5      	b.n	8012dc8 <_free_r+0x24>
 8012e1c:	6821      	ldr	r1, [r4, #0]
 8012e1e:	1860      	adds	r0, r4, r1
 8012e20:	4282      	cmp	r2, r0
 8012e22:	d103      	bne.n	8012e2c <_free_r+0x88>
 8012e24:	6810      	ldr	r0, [r2, #0]
 8012e26:	6852      	ldr	r2, [r2, #4]
 8012e28:	1841      	adds	r1, r0, r1
 8012e2a:	6021      	str	r1, [r4, #0]
 8012e2c:	6062      	str	r2, [r4, #4]
 8012e2e:	605c      	str	r4, [r3, #4]
 8012e30:	e7ca      	b.n	8012dc8 <_free_r+0x24>
 8012e32:	46c0      	nop			; (mov r8, r8)
 8012e34:	20005a4c 	.word	0x20005a4c

08012e38 <_malloc_r>:
 8012e38:	2303      	movs	r3, #3
 8012e3a:	b570      	push	{r4, r5, r6, lr}
 8012e3c:	1ccd      	adds	r5, r1, #3
 8012e3e:	439d      	bics	r5, r3
 8012e40:	3508      	adds	r5, #8
 8012e42:	0006      	movs	r6, r0
 8012e44:	2d0c      	cmp	r5, #12
 8012e46:	d21e      	bcs.n	8012e86 <_malloc_r+0x4e>
 8012e48:	250c      	movs	r5, #12
 8012e4a:	42a9      	cmp	r1, r5
 8012e4c:	d81d      	bhi.n	8012e8a <_malloc_r+0x52>
 8012e4e:	0030      	movs	r0, r6
 8012e50:	f002 fe93 	bl	8015b7a <__malloc_lock>
 8012e54:	4a25      	ldr	r2, [pc, #148]	; (8012eec <_malloc_r+0xb4>)
 8012e56:	6814      	ldr	r4, [r2, #0]
 8012e58:	0021      	movs	r1, r4
 8012e5a:	2900      	cmp	r1, #0
 8012e5c:	d119      	bne.n	8012e92 <_malloc_r+0x5a>
 8012e5e:	4c24      	ldr	r4, [pc, #144]	; (8012ef0 <_malloc_r+0xb8>)
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d103      	bne.n	8012e6e <_malloc_r+0x36>
 8012e66:	0030      	movs	r0, r6
 8012e68:	f000 fcde 	bl	8013828 <_sbrk_r>
 8012e6c:	6020      	str	r0, [r4, #0]
 8012e6e:	0029      	movs	r1, r5
 8012e70:	0030      	movs	r0, r6
 8012e72:	f000 fcd9 	bl	8013828 <_sbrk_r>
 8012e76:	1c43      	adds	r3, r0, #1
 8012e78:	d12b      	bne.n	8012ed2 <_malloc_r+0x9a>
 8012e7a:	230c      	movs	r3, #12
 8012e7c:	0030      	movs	r0, r6
 8012e7e:	6033      	str	r3, [r6, #0]
 8012e80:	f002 fe7c 	bl	8015b7c <__malloc_unlock>
 8012e84:	e003      	b.n	8012e8e <_malloc_r+0x56>
 8012e86:	2d00      	cmp	r5, #0
 8012e88:	dadf      	bge.n	8012e4a <_malloc_r+0x12>
 8012e8a:	230c      	movs	r3, #12
 8012e8c:	6033      	str	r3, [r6, #0]
 8012e8e:	2000      	movs	r0, #0
 8012e90:	bd70      	pop	{r4, r5, r6, pc}
 8012e92:	680b      	ldr	r3, [r1, #0]
 8012e94:	1b5b      	subs	r3, r3, r5
 8012e96:	d419      	bmi.n	8012ecc <_malloc_r+0x94>
 8012e98:	2b0b      	cmp	r3, #11
 8012e9a:	d903      	bls.n	8012ea4 <_malloc_r+0x6c>
 8012e9c:	600b      	str	r3, [r1, #0]
 8012e9e:	18cc      	adds	r4, r1, r3
 8012ea0:	6025      	str	r5, [r4, #0]
 8012ea2:	e003      	b.n	8012eac <_malloc_r+0x74>
 8012ea4:	684b      	ldr	r3, [r1, #4]
 8012ea6:	428c      	cmp	r4, r1
 8012ea8:	d10d      	bne.n	8012ec6 <_malloc_r+0x8e>
 8012eaa:	6013      	str	r3, [r2, #0]
 8012eac:	0030      	movs	r0, r6
 8012eae:	f002 fe65 	bl	8015b7c <__malloc_unlock>
 8012eb2:	0020      	movs	r0, r4
 8012eb4:	2207      	movs	r2, #7
 8012eb6:	300b      	adds	r0, #11
 8012eb8:	1d23      	adds	r3, r4, #4
 8012eba:	4390      	bics	r0, r2
 8012ebc:	1ac3      	subs	r3, r0, r3
 8012ebe:	d0e7      	beq.n	8012e90 <_malloc_r+0x58>
 8012ec0:	425a      	negs	r2, r3
 8012ec2:	50e2      	str	r2, [r4, r3]
 8012ec4:	e7e4      	b.n	8012e90 <_malloc_r+0x58>
 8012ec6:	6063      	str	r3, [r4, #4]
 8012ec8:	000c      	movs	r4, r1
 8012eca:	e7ef      	b.n	8012eac <_malloc_r+0x74>
 8012ecc:	000c      	movs	r4, r1
 8012ece:	6849      	ldr	r1, [r1, #4]
 8012ed0:	e7c3      	b.n	8012e5a <_malloc_r+0x22>
 8012ed2:	2303      	movs	r3, #3
 8012ed4:	1cc4      	adds	r4, r0, #3
 8012ed6:	439c      	bics	r4, r3
 8012ed8:	42a0      	cmp	r0, r4
 8012eda:	d0e1      	beq.n	8012ea0 <_malloc_r+0x68>
 8012edc:	1a21      	subs	r1, r4, r0
 8012ede:	0030      	movs	r0, r6
 8012ee0:	f000 fca2 	bl	8013828 <_sbrk_r>
 8012ee4:	1c43      	adds	r3, r0, #1
 8012ee6:	d1db      	bne.n	8012ea0 <_malloc_r+0x68>
 8012ee8:	e7c7      	b.n	8012e7a <_malloc_r+0x42>
 8012eea:	46c0      	nop			; (mov r8, r8)
 8012eec:	20005a4c 	.word	0x20005a4c
 8012ef0:	20005a50 	.word	0x20005a50

08012ef4 <__cvt>:
 8012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef6:	b08b      	sub	sp, #44	; 0x2c
 8012ef8:	0014      	movs	r4, r2
 8012efa:	1e1d      	subs	r5, r3, #0
 8012efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012efe:	da53      	bge.n	8012fa8 <__cvt+0xb4>
 8012f00:	2480      	movs	r4, #128	; 0x80
 8012f02:	0624      	lsls	r4, r4, #24
 8012f04:	191b      	adds	r3, r3, r4
 8012f06:	001d      	movs	r5, r3
 8012f08:	0014      	movs	r4, r2
 8012f0a:	232d      	movs	r3, #45	; 0x2d
 8012f0c:	700b      	strb	r3, [r1, #0]
 8012f0e:	2320      	movs	r3, #32
 8012f10:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012f12:	2203      	movs	r2, #3
 8012f14:	439e      	bics	r6, r3
 8012f16:	2e46      	cmp	r6, #70	; 0x46
 8012f18:	d007      	beq.n	8012f2a <__cvt+0x36>
 8012f1a:	0033      	movs	r3, r6
 8012f1c:	3b45      	subs	r3, #69	; 0x45
 8012f1e:	4259      	negs	r1, r3
 8012f20:	414b      	adcs	r3, r1
 8012f22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012f24:	3a01      	subs	r2, #1
 8012f26:	18cb      	adds	r3, r1, r3
 8012f28:	9310      	str	r3, [sp, #64]	; 0x40
 8012f2a:	ab09      	add	r3, sp, #36	; 0x24
 8012f2c:	9304      	str	r3, [sp, #16]
 8012f2e:	ab08      	add	r3, sp, #32
 8012f30:	9303      	str	r3, [sp, #12]
 8012f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012f34:	9200      	str	r2, [sp, #0]
 8012f36:	9302      	str	r3, [sp, #8]
 8012f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f3a:	0022      	movs	r2, r4
 8012f3c:	9301      	str	r3, [sp, #4]
 8012f3e:	002b      	movs	r3, r5
 8012f40:	f001 fcf0 	bl	8014924 <_dtoa_r>
 8012f44:	0007      	movs	r7, r0
 8012f46:	2e47      	cmp	r6, #71	; 0x47
 8012f48:	d102      	bne.n	8012f50 <__cvt+0x5c>
 8012f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f4c:	07db      	lsls	r3, r3, #31
 8012f4e:	d524      	bpl.n	8012f9a <__cvt+0xa6>
 8012f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f52:	18fb      	adds	r3, r7, r3
 8012f54:	9307      	str	r3, [sp, #28]
 8012f56:	2e46      	cmp	r6, #70	; 0x46
 8012f58:	d114      	bne.n	8012f84 <__cvt+0x90>
 8012f5a:	783b      	ldrb	r3, [r7, #0]
 8012f5c:	2b30      	cmp	r3, #48	; 0x30
 8012f5e:	d10c      	bne.n	8012f7a <__cvt+0x86>
 8012f60:	2200      	movs	r2, #0
 8012f62:	2300      	movs	r3, #0
 8012f64:	0020      	movs	r0, r4
 8012f66:	0029      	movs	r1, r5
 8012f68:	f7ed fa6e 	bl	8000448 <__aeabi_dcmpeq>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d104      	bne.n	8012f7a <__cvt+0x86>
 8012f70:	2301      	movs	r3, #1
 8012f72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f74:	1a9b      	subs	r3, r3, r2
 8012f76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012f78:	6013      	str	r3, [r2, #0]
 8012f7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012f7c:	9a07      	ldr	r2, [sp, #28]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	18d3      	adds	r3, r2, r3
 8012f82:	9307      	str	r3, [sp, #28]
 8012f84:	2200      	movs	r2, #0
 8012f86:	2300      	movs	r3, #0
 8012f88:	0020      	movs	r0, r4
 8012f8a:	0029      	movs	r1, r5
 8012f8c:	f7ed fa5c 	bl	8000448 <__aeabi_dcmpeq>
 8012f90:	2230      	movs	r2, #48	; 0x30
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d00d      	beq.n	8012fb2 <__cvt+0xbe>
 8012f96:	9b07      	ldr	r3, [sp, #28]
 8012f98:	9309      	str	r3, [sp, #36]	; 0x24
 8012f9a:	0038      	movs	r0, r7
 8012f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012fa0:	1bdb      	subs	r3, r3, r7
 8012fa2:	6013      	str	r3, [r2, #0]
 8012fa4:	b00b      	add	sp, #44	; 0x2c
 8012fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fa8:	2300      	movs	r3, #0
 8012faa:	e7af      	b.n	8012f0c <__cvt+0x18>
 8012fac:	1c59      	adds	r1, r3, #1
 8012fae:	9109      	str	r1, [sp, #36]	; 0x24
 8012fb0:	701a      	strb	r2, [r3, #0]
 8012fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fb4:	9907      	ldr	r1, [sp, #28]
 8012fb6:	428b      	cmp	r3, r1
 8012fb8:	d3f8      	bcc.n	8012fac <__cvt+0xb8>
 8012fba:	e7ee      	b.n	8012f9a <__cvt+0xa6>

08012fbc <__exponent>:
 8012fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fbe:	1c83      	adds	r3, r0, #2
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	0006      	movs	r6, r0
 8012fc6:	000c      	movs	r4, r1
 8012fc8:	7002      	strb	r2, [r0, #0]
 8012fca:	232b      	movs	r3, #43	; 0x2b
 8012fcc:	2900      	cmp	r1, #0
 8012fce:	da01      	bge.n	8012fd4 <__exponent+0x18>
 8012fd0:	232d      	movs	r3, #45	; 0x2d
 8012fd2:	424c      	negs	r4, r1
 8012fd4:	7073      	strb	r3, [r6, #1]
 8012fd6:	2c09      	cmp	r4, #9
 8012fd8:	dd22      	ble.n	8013020 <__exponent+0x64>
 8012fda:	ab02      	add	r3, sp, #8
 8012fdc:	1ddd      	adds	r5, r3, #7
 8012fde:	0020      	movs	r0, r4
 8012fe0:	210a      	movs	r1, #10
 8012fe2:	f7ed fa1b 	bl	800041c <__aeabi_idivmod>
 8012fe6:	1e6f      	subs	r7, r5, #1
 8012fe8:	3130      	adds	r1, #48	; 0x30
 8012fea:	7039      	strb	r1, [r7, #0]
 8012fec:	0020      	movs	r0, r4
 8012fee:	210a      	movs	r1, #10
 8012ff0:	f7ed f92e 	bl	8000250 <__divsi3>
 8012ff4:	0004      	movs	r4, r0
 8012ff6:	2809      	cmp	r0, #9
 8012ff8:	dc0b      	bgt.n	8013012 <__exponent+0x56>
 8012ffa:	3d02      	subs	r5, #2
 8012ffc:	3430      	adds	r4, #48	; 0x30
 8012ffe:	9b01      	ldr	r3, [sp, #4]
 8013000:	702c      	strb	r4, [r5, #0]
 8013002:	aa02      	add	r2, sp, #8
 8013004:	3207      	adds	r2, #7
 8013006:	0018      	movs	r0, r3
 8013008:	42aa      	cmp	r2, r5
 801300a:	d804      	bhi.n	8013016 <__exponent+0x5a>
 801300c:	1b80      	subs	r0, r0, r6
 801300e:	b005      	add	sp, #20
 8013010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013012:	003d      	movs	r5, r7
 8013014:	e7e3      	b.n	8012fde <__exponent+0x22>
 8013016:	782a      	ldrb	r2, [r5, #0]
 8013018:	3501      	adds	r5, #1
 801301a:	701a      	strb	r2, [r3, #0]
 801301c:	3301      	adds	r3, #1
 801301e:	e7f0      	b.n	8013002 <__exponent+0x46>
 8013020:	2330      	movs	r3, #48	; 0x30
 8013022:	18e4      	adds	r4, r4, r3
 8013024:	70b3      	strb	r3, [r6, #2]
 8013026:	1d30      	adds	r0, r6, #4
 8013028:	70f4      	strb	r4, [r6, #3]
 801302a:	e7ef      	b.n	801300c <__exponent+0x50>

0801302c <_printf_float>:
 801302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302e:	b095      	sub	sp, #84	; 0x54
 8013030:	000c      	movs	r4, r1
 8013032:	920a      	str	r2, [sp, #40]	; 0x28
 8013034:	930b      	str	r3, [sp, #44]	; 0x2c
 8013036:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013038:	9009      	str	r0, [sp, #36]	; 0x24
 801303a:	f002 fd87 	bl	8015b4c <_localeconv_r>
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	0018      	movs	r0, r3
 8013042:	930c      	str	r3, [sp, #48]	; 0x30
 8013044:	f7ed f868 	bl	8000118 <strlen>
 8013048:	2300      	movs	r3, #0
 801304a:	9312      	str	r3, [sp, #72]	; 0x48
 801304c:	6823      	ldr	r3, [r4, #0]
 801304e:	900e      	str	r0, [sp, #56]	; 0x38
 8013050:	930d      	str	r3, [sp, #52]	; 0x34
 8013052:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013054:	7e27      	ldrb	r7, [r4, #24]
 8013056:	682b      	ldr	r3, [r5, #0]
 8013058:	2207      	movs	r2, #7
 801305a:	05c9      	lsls	r1, r1, #23
 801305c:	d545      	bpl.n	80130ea <_printf_float+0xbe>
 801305e:	189b      	adds	r3, r3, r2
 8013060:	4393      	bics	r3, r2
 8013062:	001a      	movs	r2, r3
 8013064:	3208      	adds	r2, #8
 8013066:	602a      	str	r2, [r5, #0]
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	64a2      	str	r2, [r4, #72]	; 0x48
 801306e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013070:	2201      	movs	r2, #1
 8013072:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013074:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8013076:	006b      	lsls	r3, r5, #1
 8013078:	085b      	lsrs	r3, r3, #1
 801307a:	930f      	str	r3, [sp, #60]	; 0x3c
 801307c:	4252      	negs	r2, r2
 801307e:	4bac      	ldr	r3, [pc, #688]	; (8013330 <_printf_float+0x304>)
 8013080:	0030      	movs	r0, r6
 8013082:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013084:	f7ef fba4 	bl	80027d0 <__aeabi_dcmpun>
 8013088:	2800      	cmp	r0, #0
 801308a:	d130      	bne.n	80130ee <_printf_float+0xc2>
 801308c:	2201      	movs	r2, #1
 801308e:	4ba8      	ldr	r3, [pc, #672]	; (8013330 <_printf_float+0x304>)
 8013090:	4252      	negs	r2, r2
 8013092:	0030      	movs	r0, r6
 8013094:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013096:	f7ed f9e7 	bl	8000468 <__aeabi_dcmple>
 801309a:	2800      	cmp	r0, #0
 801309c:	d127      	bne.n	80130ee <_printf_float+0xc2>
 801309e:	2200      	movs	r2, #0
 80130a0:	2300      	movs	r3, #0
 80130a2:	0030      	movs	r0, r6
 80130a4:	0029      	movs	r1, r5
 80130a6:	f7ed f9d5 	bl	8000454 <__aeabi_dcmplt>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d003      	beq.n	80130b6 <_printf_float+0x8a>
 80130ae:	0023      	movs	r3, r4
 80130b0:	222d      	movs	r2, #45	; 0x2d
 80130b2:	3343      	adds	r3, #67	; 0x43
 80130b4:	701a      	strb	r2, [r3, #0]
 80130b6:	4d9f      	ldr	r5, [pc, #636]	; (8013334 <_printf_float+0x308>)
 80130b8:	2f47      	cmp	r7, #71	; 0x47
 80130ba:	d800      	bhi.n	80130be <_printf_float+0x92>
 80130bc:	4d9e      	ldr	r5, [pc, #632]	; (8013338 <_printf_float+0x30c>)
 80130be:	2303      	movs	r3, #3
 80130c0:	2600      	movs	r6, #0
 80130c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130c4:	6123      	str	r3, [r4, #16]
 80130c6:	3301      	adds	r3, #1
 80130c8:	439a      	bics	r2, r3
 80130ca:	6022      	str	r2, [r4, #0]
 80130cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130ce:	aa13      	add	r2, sp, #76	; 0x4c
 80130d0:	9300      	str	r3, [sp, #0]
 80130d2:	0021      	movs	r1, r4
 80130d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130d8:	f000 f9f4 	bl	80134c4 <_printf_common>
 80130dc:	1c43      	adds	r3, r0, #1
 80130de:	d000      	beq.n	80130e2 <_printf_float+0xb6>
 80130e0:	e093      	b.n	801320a <_printf_float+0x1de>
 80130e2:	2001      	movs	r0, #1
 80130e4:	4240      	negs	r0, r0
 80130e6:	b015      	add	sp, #84	; 0x54
 80130e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130ea:	3307      	adds	r3, #7
 80130ec:	e7b8      	b.n	8013060 <_printf_float+0x34>
 80130ee:	0032      	movs	r2, r6
 80130f0:	002b      	movs	r3, r5
 80130f2:	0030      	movs	r0, r6
 80130f4:	0029      	movs	r1, r5
 80130f6:	f7ef fb6b 	bl	80027d0 <__aeabi_dcmpun>
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d004      	beq.n	8013108 <_printf_float+0xdc>
 80130fe:	4d8f      	ldr	r5, [pc, #572]	; (801333c <_printf_float+0x310>)
 8013100:	2f47      	cmp	r7, #71	; 0x47
 8013102:	d8dc      	bhi.n	80130be <_printf_float+0x92>
 8013104:	4d8e      	ldr	r5, [pc, #568]	; (8013340 <_printf_float+0x314>)
 8013106:	e7da      	b.n	80130be <_printf_float+0x92>
 8013108:	2380      	movs	r3, #128	; 0x80
 801310a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801310c:	6862      	ldr	r2, [r4, #4]
 801310e:	00db      	lsls	r3, r3, #3
 8013110:	430b      	orrs	r3, r1
 8013112:	1c51      	adds	r1, r2, #1
 8013114:	d143      	bne.n	801319e <_printf_float+0x172>
 8013116:	3207      	adds	r2, #7
 8013118:	6062      	str	r2, [r4, #4]
 801311a:	aa12      	add	r2, sp, #72	; 0x48
 801311c:	2100      	movs	r1, #0
 801311e:	9205      	str	r2, [sp, #20]
 8013120:	aa11      	add	r2, sp, #68	; 0x44
 8013122:	9203      	str	r2, [sp, #12]
 8013124:	2223      	movs	r2, #35	; 0x23
 8013126:	6023      	str	r3, [r4, #0]
 8013128:	9106      	str	r1, [sp, #24]
 801312a:	9301      	str	r3, [sp, #4]
 801312c:	a908      	add	r1, sp, #32
 801312e:	6863      	ldr	r3, [r4, #4]
 8013130:	1852      	adds	r2, r2, r1
 8013132:	9202      	str	r2, [sp, #8]
 8013134:	9300      	str	r3, [sp, #0]
 8013136:	0032      	movs	r2, r6
 8013138:	002b      	movs	r3, r5
 801313a:	9704      	str	r7, [sp, #16]
 801313c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801313e:	f7ff fed9 	bl	8012ef4 <__cvt>
 8013142:	2320      	movs	r3, #32
 8013144:	003a      	movs	r2, r7
 8013146:	0005      	movs	r5, r0
 8013148:	439a      	bics	r2, r3
 801314a:	2a47      	cmp	r2, #71	; 0x47
 801314c:	d107      	bne.n	801315e <_printf_float+0x132>
 801314e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013150:	1cda      	adds	r2, r3, #3
 8013152:	db02      	blt.n	801315a <_printf_float+0x12e>
 8013154:	6862      	ldr	r2, [r4, #4]
 8013156:	4293      	cmp	r3, r2
 8013158:	dd45      	ble.n	80131e6 <_printf_float+0x1ba>
 801315a:	3f02      	subs	r7, #2
 801315c:	b2ff      	uxtb	r7, r7
 801315e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013160:	2f65      	cmp	r7, #101	; 0x65
 8013162:	d825      	bhi.n	80131b0 <_printf_float+0x184>
 8013164:	0020      	movs	r0, r4
 8013166:	3901      	subs	r1, #1
 8013168:	003a      	movs	r2, r7
 801316a:	3050      	adds	r0, #80	; 0x50
 801316c:	9111      	str	r1, [sp, #68]	; 0x44
 801316e:	f7ff ff25 	bl	8012fbc <__exponent>
 8013172:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013174:	0006      	movs	r6, r0
 8013176:	1813      	adds	r3, r2, r0
 8013178:	6123      	str	r3, [r4, #16]
 801317a:	2a01      	cmp	r2, #1
 801317c:	dc02      	bgt.n	8013184 <_printf_float+0x158>
 801317e:	6822      	ldr	r2, [r4, #0]
 8013180:	07d2      	lsls	r2, r2, #31
 8013182:	d501      	bpl.n	8013188 <_printf_float+0x15c>
 8013184:	3301      	adds	r3, #1
 8013186:	6123      	str	r3, [r4, #16]
 8013188:	2323      	movs	r3, #35	; 0x23
 801318a:	aa08      	add	r2, sp, #32
 801318c:	189b      	adds	r3, r3, r2
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d09b      	beq.n	80130cc <_printf_float+0xa0>
 8013194:	0023      	movs	r3, r4
 8013196:	222d      	movs	r2, #45	; 0x2d
 8013198:	3343      	adds	r3, #67	; 0x43
 801319a:	701a      	strb	r2, [r3, #0]
 801319c:	e796      	b.n	80130cc <_printf_float+0xa0>
 801319e:	2f67      	cmp	r7, #103	; 0x67
 80131a0:	d100      	bne.n	80131a4 <_printf_float+0x178>
 80131a2:	e176      	b.n	8013492 <_printf_float+0x466>
 80131a4:	2f47      	cmp	r7, #71	; 0x47
 80131a6:	d1b8      	bne.n	801311a <_printf_float+0xee>
 80131a8:	2a00      	cmp	r2, #0
 80131aa:	d1b6      	bne.n	801311a <_printf_float+0xee>
 80131ac:	2201      	movs	r2, #1
 80131ae:	e7b3      	b.n	8013118 <_printf_float+0xec>
 80131b0:	2f66      	cmp	r7, #102	; 0x66
 80131b2:	d119      	bne.n	80131e8 <_printf_float+0x1bc>
 80131b4:	6863      	ldr	r3, [r4, #4]
 80131b6:	2900      	cmp	r1, #0
 80131b8:	dd0c      	ble.n	80131d4 <_printf_float+0x1a8>
 80131ba:	6121      	str	r1, [r4, #16]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d102      	bne.n	80131c6 <_printf_float+0x19a>
 80131c0:	6822      	ldr	r2, [r4, #0]
 80131c2:	07d2      	lsls	r2, r2, #31
 80131c4:	d502      	bpl.n	80131cc <_printf_float+0x1a0>
 80131c6:	3301      	adds	r3, #1
 80131c8:	185b      	adds	r3, r3, r1
 80131ca:	6123      	str	r3, [r4, #16]
 80131cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131ce:	2600      	movs	r6, #0
 80131d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80131d2:	e7d9      	b.n	8013188 <_printf_float+0x15c>
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d103      	bne.n	80131e0 <_printf_float+0x1b4>
 80131d8:	2201      	movs	r2, #1
 80131da:	6821      	ldr	r1, [r4, #0]
 80131dc:	4211      	tst	r1, r2
 80131de:	d000      	beq.n	80131e2 <_printf_float+0x1b6>
 80131e0:	1c9a      	adds	r2, r3, #2
 80131e2:	6122      	str	r2, [r4, #16]
 80131e4:	e7f2      	b.n	80131cc <_printf_float+0x1a0>
 80131e6:	2767      	movs	r7, #103	; 0x67
 80131e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80131ec:	4293      	cmp	r3, r2
 80131ee:	db05      	blt.n	80131fc <_printf_float+0x1d0>
 80131f0:	6822      	ldr	r2, [r4, #0]
 80131f2:	6123      	str	r3, [r4, #16]
 80131f4:	07d2      	lsls	r2, r2, #31
 80131f6:	d5e9      	bpl.n	80131cc <_printf_float+0x1a0>
 80131f8:	3301      	adds	r3, #1
 80131fa:	e7e6      	b.n	80131ca <_printf_float+0x19e>
 80131fc:	2101      	movs	r1, #1
 80131fe:	2b00      	cmp	r3, #0
 8013200:	dc01      	bgt.n	8013206 <_printf_float+0x1da>
 8013202:	1849      	adds	r1, r1, r1
 8013204:	1ac9      	subs	r1, r1, r3
 8013206:	1852      	adds	r2, r2, r1
 8013208:	e7eb      	b.n	80131e2 <_printf_float+0x1b6>
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	0553      	lsls	r3, r2, #21
 801320e:	d408      	bmi.n	8013222 <_printf_float+0x1f6>
 8013210:	6923      	ldr	r3, [r4, #16]
 8013212:	002a      	movs	r2, r5
 8013214:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013218:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801321a:	47a8      	blx	r5
 801321c:	1c43      	adds	r3, r0, #1
 801321e:	d129      	bne.n	8013274 <_printf_float+0x248>
 8013220:	e75f      	b.n	80130e2 <_printf_float+0xb6>
 8013222:	2f65      	cmp	r7, #101	; 0x65
 8013224:	d800      	bhi.n	8013228 <_printf_float+0x1fc>
 8013226:	e0e0      	b.n	80133ea <_printf_float+0x3be>
 8013228:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801322a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801322c:	2200      	movs	r2, #0
 801322e:	2300      	movs	r3, #0
 8013230:	f7ed f90a 	bl	8000448 <__aeabi_dcmpeq>
 8013234:	2800      	cmp	r0, #0
 8013236:	d034      	beq.n	80132a2 <_printf_float+0x276>
 8013238:	2301      	movs	r3, #1
 801323a:	4a42      	ldr	r2, [pc, #264]	; (8013344 <_printf_float+0x318>)
 801323c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801323e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013240:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013242:	47a8      	blx	r5
 8013244:	1c43      	adds	r3, r0, #1
 8013246:	d100      	bne.n	801324a <_printf_float+0x21e>
 8013248:	e74b      	b.n	80130e2 <_printf_float+0xb6>
 801324a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801324c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801324e:	4293      	cmp	r3, r2
 8013250:	db02      	blt.n	8013258 <_printf_float+0x22c>
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	07db      	lsls	r3, r3, #31
 8013256:	d50d      	bpl.n	8013274 <_printf_float+0x248>
 8013258:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801325a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801325c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801325e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013262:	47a8      	blx	r5
 8013264:	2500      	movs	r5, #0
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	d100      	bne.n	801326c <_printf_float+0x240>
 801326a:	e73a      	b.n	80130e2 <_printf_float+0xb6>
 801326c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801326e:	3b01      	subs	r3, #1
 8013270:	42ab      	cmp	r3, r5
 8013272:	dc0a      	bgt.n	801328a <_printf_float+0x25e>
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	079b      	lsls	r3, r3, #30
 8013278:	d500      	bpl.n	801327c <_printf_float+0x250>
 801327a:	e108      	b.n	801348e <_printf_float+0x462>
 801327c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801327e:	68e0      	ldr	r0, [r4, #12]
 8013280:	4298      	cmp	r0, r3
 8013282:	db00      	blt.n	8013286 <_printf_float+0x25a>
 8013284:	e72f      	b.n	80130e6 <_printf_float+0xba>
 8013286:	0018      	movs	r0, r3
 8013288:	e72d      	b.n	80130e6 <_printf_float+0xba>
 801328a:	0022      	movs	r2, r4
 801328c:	2301      	movs	r3, #1
 801328e:	321a      	adds	r2, #26
 8013290:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013294:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013296:	47b0      	blx	r6
 8013298:	1c43      	adds	r3, r0, #1
 801329a:	d100      	bne.n	801329e <_printf_float+0x272>
 801329c:	e721      	b.n	80130e2 <_printf_float+0xb6>
 801329e:	3501      	adds	r5, #1
 80132a0:	e7e4      	b.n	801326c <_printf_float+0x240>
 80132a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dc2d      	bgt.n	8013304 <_printf_float+0x2d8>
 80132a8:	2301      	movs	r3, #1
 80132aa:	4a26      	ldr	r2, [pc, #152]	; (8013344 <_printf_float+0x318>)
 80132ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80132b2:	47b0      	blx	r6
 80132b4:	1c43      	adds	r3, r0, #1
 80132b6:	d100      	bne.n	80132ba <_printf_float+0x28e>
 80132b8:	e713      	b.n	80130e2 <_printf_float+0xb6>
 80132ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d105      	bne.n	80132cc <_printf_float+0x2a0>
 80132c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d102      	bne.n	80132cc <_printf_float+0x2a0>
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	07db      	lsls	r3, r3, #31
 80132ca:	d5d3      	bpl.n	8013274 <_printf_float+0x248>
 80132cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80132ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132d6:	47b0      	blx	r6
 80132d8:	2600      	movs	r6, #0
 80132da:	1c43      	adds	r3, r0, #1
 80132dc:	d100      	bne.n	80132e0 <_printf_float+0x2b4>
 80132de:	e700      	b.n	80130e2 <_printf_float+0xb6>
 80132e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132e2:	425b      	negs	r3, r3
 80132e4:	42b3      	cmp	r3, r6
 80132e6:	dc01      	bgt.n	80132ec <_printf_float+0x2c0>
 80132e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132ea:	e792      	b.n	8013212 <_printf_float+0x1e6>
 80132ec:	0022      	movs	r2, r4
 80132ee:	2301      	movs	r3, #1
 80132f0:	321a      	adds	r2, #26
 80132f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80132f8:	47b8      	blx	r7
 80132fa:	1c43      	adds	r3, r0, #1
 80132fc:	d100      	bne.n	8013300 <_printf_float+0x2d4>
 80132fe:	e6f0      	b.n	80130e2 <_printf_float+0xb6>
 8013300:	3601      	adds	r6, #1
 8013302:	e7ed      	b.n	80132e0 <_printf_float+0x2b4>
 8013304:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013306:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013308:	429f      	cmp	r7, r3
 801330a:	dd00      	ble.n	801330e <_printf_float+0x2e2>
 801330c:	001f      	movs	r7, r3
 801330e:	2f00      	cmp	r7, #0
 8013310:	dd08      	ble.n	8013324 <_printf_float+0x2f8>
 8013312:	003b      	movs	r3, r7
 8013314:	002a      	movs	r2, r5
 8013316:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013318:	9809      	ldr	r0, [sp, #36]	; 0x24
 801331a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801331c:	47b0      	blx	r6
 801331e:	1c43      	adds	r3, r0, #1
 8013320:	d100      	bne.n	8013324 <_printf_float+0x2f8>
 8013322:	e6de      	b.n	80130e2 <_printf_float+0xb6>
 8013324:	2300      	movs	r3, #0
 8013326:	930d      	str	r3, [sp, #52]	; 0x34
 8013328:	43fb      	mvns	r3, r7
 801332a:	17db      	asrs	r3, r3, #31
 801332c:	930f      	str	r3, [sp, #60]	; 0x3c
 801332e:	e018      	b.n	8013362 <_printf_float+0x336>
 8013330:	7fefffff 	.word	0x7fefffff
 8013334:	080197da 	.word	0x080197da
 8013338:	080197d6 	.word	0x080197d6
 801333c:	080197e2 	.word	0x080197e2
 8013340:	080197de 	.word	0x080197de
 8013344:	080197e6 	.word	0x080197e6
 8013348:	0022      	movs	r2, r4
 801334a:	2301      	movs	r3, #1
 801334c:	321a      	adds	r2, #26
 801334e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013352:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013354:	47b0      	blx	r6
 8013356:	1c43      	adds	r3, r0, #1
 8013358:	d100      	bne.n	801335c <_printf_float+0x330>
 801335a:	e6c2      	b.n	80130e2 <_printf_float+0xb6>
 801335c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801335e:	3301      	adds	r3, #1
 8013360:	930d      	str	r3, [sp, #52]	; 0x34
 8013362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013364:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8013366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013368:	403b      	ands	r3, r7
 801336a:	1af3      	subs	r3, r6, r3
 801336c:	4293      	cmp	r3, r2
 801336e:	dceb      	bgt.n	8013348 <_printf_float+0x31c>
 8013370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013372:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013374:	19ad      	adds	r5, r5, r6
 8013376:	4293      	cmp	r3, r2
 8013378:	db10      	blt.n	801339c <_printf_float+0x370>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	07db      	lsls	r3, r3, #31
 801337e:	d40d      	bmi.n	801339c <_printf_float+0x370>
 8013380:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013384:	1bbe      	subs	r6, r7, r6
 8013386:	1aff      	subs	r7, r7, r3
 8013388:	42b7      	cmp	r7, r6
 801338a:	dd00      	ble.n	801338e <_printf_float+0x362>
 801338c:	0037      	movs	r7, r6
 801338e:	2f00      	cmp	r7, #0
 8013390:	dc0d      	bgt.n	80133ae <_printf_float+0x382>
 8013392:	43fe      	mvns	r6, r7
 8013394:	17f3      	asrs	r3, r6, #31
 8013396:	2500      	movs	r5, #0
 8013398:	930c      	str	r3, [sp, #48]	; 0x30
 801339a:	e01c      	b.n	80133d6 <_printf_float+0x3aa>
 801339c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801339e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80133a6:	47b8      	blx	r7
 80133a8:	1c43      	adds	r3, r0, #1
 80133aa:	d1e9      	bne.n	8013380 <_printf_float+0x354>
 80133ac:	e699      	b.n	80130e2 <_printf_float+0xb6>
 80133ae:	003b      	movs	r3, r7
 80133b0:	002a      	movs	r2, r5
 80133b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80133b8:	47a8      	blx	r5
 80133ba:	1c43      	adds	r3, r0, #1
 80133bc:	d1e9      	bne.n	8013392 <_printf_float+0x366>
 80133be:	e690      	b.n	80130e2 <_printf_float+0xb6>
 80133c0:	0022      	movs	r2, r4
 80133c2:	2301      	movs	r3, #1
 80133c4:	321a      	adds	r2, #26
 80133c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80133cc:	47b0      	blx	r6
 80133ce:	1c43      	adds	r3, r0, #1
 80133d0:	d100      	bne.n	80133d4 <_printf_float+0x3a8>
 80133d2:	e686      	b.n	80130e2 <_printf_float+0xb6>
 80133d4:	3501      	adds	r5, #1
 80133d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80133d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80133dc:	1a9b      	subs	r3, r3, r2
 80133de:	003a      	movs	r2, r7
 80133e0:	400a      	ands	r2, r1
 80133e2:	1a9b      	subs	r3, r3, r2
 80133e4:	42ab      	cmp	r3, r5
 80133e6:	dceb      	bgt.n	80133c0 <_printf_float+0x394>
 80133e8:	e744      	b.n	8013274 <_printf_float+0x248>
 80133ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	dc02      	bgt.n	80133f6 <_printf_float+0x3ca>
 80133f0:	2301      	movs	r3, #1
 80133f2:	421a      	tst	r2, r3
 80133f4:	d032      	beq.n	801345c <_printf_float+0x430>
 80133f6:	2301      	movs	r3, #1
 80133f8:	002a      	movs	r2, r5
 80133fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013400:	47b8      	blx	r7
 8013402:	1c43      	adds	r3, r0, #1
 8013404:	d100      	bne.n	8013408 <_printf_float+0x3dc>
 8013406:	e66c      	b.n	80130e2 <_printf_float+0xb6>
 8013408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801340a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801340c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801340e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013410:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013412:	3501      	adds	r5, #1
 8013414:	47b8      	blx	r7
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	d100      	bne.n	801341c <_printf_float+0x3f0>
 801341a:	e662      	b.n	80130e2 <_printf_float+0xb6>
 801341c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801341e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013422:	2200      	movs	r2, #0
 8013424:	1e5f      	subs	r7, r3, #1
 8013426:	2300      	movs	r3, #0
 8013428:	f7ed f80e 	bl	8000448 <__aeabi_dcmpeq>
 801342c:	003b      	movs	r3, r7
 801342e:	2800      	cmp	r0, #0
 8013430:	d014      	beq.n	801345c <_printf_float+0x430>
 8013432:	2500      	movs	r5, #0
 8013434:	e00a      	b.n	801344c <_printf_float+0x420>
 8013436:	0022      	movs	r2, r4
 8013438:	2301      	movs	r3, #1
 801343a:	321a      	adds	r2, #26
 801343c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801343e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013440:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013442:	47b8      	blx	r7
 8013444:	1c43      	adds	r3, r0, #1
 8013446:	d100      	bne.n	801344a <_printf_float+0x41e>
 8013448:	e64b      	b.n	80130e2 <_printf_float+0xb6>
 801344a:	3501      	adds	r5, #1
 801344c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801344e:	3b01      	subs	r3, #1
 8013450:	42ab      	cmp	r3, r5
 8013452:	dcf0      	bgt.n	8013436 <_printf_float+0x40a>
 8013454:	0022      	movs	r2, r4
 8013456:	0033      	movs	r3, r6
 8013458:	3250      	adds	r2, #80	; 0x50
 801345a:	e6db      	b.n	8013214 <_printf_float+0x1e8>
 801345c:	002a      	movs	r2, r5
 801345e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013462:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013464:	47a8      	blx	r5
 8013466:	1c43      	adds	r3, r0, #1
 8013468:	d1f4      	bne.n	8013454 <_printf_float+0x428>
 801346a:	e63a      	b.n	80130e2 <_printf_float+0xb6>
 801346c:	0022      	movs	r2, r4
 801346e:	2301      	movs	r3, #1
 8013470:	3219      	adds	r2, #25
 8013472:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013476:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013478:	47b0      	blx	r6
 801347a:	1c43      	adds	r3, r0, #1
 801347c:	d100      	bne.n	8013480 <_printf_float+0x454>
 801347e:	e630      	b.n	80130e2 <_printf_float+0xb6>
 8013480:	3501      	adds	r5, #1
 8013482:	68e3      	ldr	r3, [r4, #12]
 8013484:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013486:	1a9b      	subs	r3, r3, r2
 8013488:	42ab      	cmp	r3, r5
 801348a:	dcef      	bgt.n	801346c <_printf_float+0x440>
 801348c:	e6f6      	b.n	801327c <_printf_float+0x250>
 801348e:	2500      	movs	r5, #0
 8013490:	e7f7      	b.n	8013482 <_printf_float+0x456>
 8013492:	2a00      	cmp	r2, #0
 8013494:	d100      	bne.n	8013498 <_printf_float+0x46c>
 8013496:	e689      	b.n	80131ac <_printf_float+0x180>
 8013498:	2100      	movs	r1, #0
 801349a:	9106      	str	r1, [sp, #24]
 801349c:	a912      	add	r1, sp, #72	; 0x48
 801349e:	9105      	str	r1, [sp, #20]
 80134a0:	a911      	add	r1, sp, #68	; 0x44
 80134a2:	9103      	str	r1, [sp, #12]
 80134a4:	2123      	movs	r1, #35	; 0x23
 80134a6:	a808      	add	r0, sp, #32
 80134a8:	1809      	adds	r1, r1, r0
 80134aa:	6023      	str	r3, [r4, #0]
 80134ac:	9301      	str	r3, [sp, #4]
 80134ae:	9200      	str	r2, [sp, #0]
 80134b0:	002b      	movs	r3, r5
 80134b2:	9704      	str	r7, [sp, #16]
 80134b4:	9102      	str	r1, [sp, #8]
 80134b6:	0032      	movs	r2, r6
 80134b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134ba:	f7ff fd1b 	bl	8012ef4 <__cvt>
 80134be:	0005      	movs	r5, r0
 80134c0:	e645      	b.n	801314e <_printf_float+0x122>
 80134c2:	46c0      	nop			; (mov r8, r8)

080134c4 <_printf_common>:
 80134c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134c6:	0015      	movs	r5, r2
 80134c8:	9301      	str	r3, [sp, #4]
 80134ca:	688a      	ldr	r2, [r1, #8]
 80134cc:	690b      	ldr	r3, [r1, #16]
 80134ce:	9000      	str	r0, [sp, #0]
 80134d0:	000c      	movs	r4, r1
 80134d2:	4293      	cmp	r3, r2
 80134d4:	da00      	bge.n	80134d8 <_printf_common+0x14>
 80134d6:	0013      	movs	r3, r2
 80134d8:	0022      	movs	r2, r4
 80134da:	602b      	str	r3, [r5, #0]
 80134dc:	3243      	adds	r2, #67	; 0x43
 80134de:	7812      	ldrb	r2, [r2, #0]
 80134e0:	2a00      	cmp	r2, #0
 80134e2:	d001      	beq.n	80134e8 <_printf_common+0x24>
 80134e4:	3301      	adds	r3, #1
 80134e6:	602b      	str	r3, [r5, #0]
 80134e8:	6823      	ldr	r3, [r4, #0]
 80134ea:	069b      	lsls	r3, r3, #26
 80134ec:	d502      	bpl.n	80134f4 <_printf_common+0x30>
 80134ee:	682b      	ldr	r3, [r5, #0]
 80134f0:	3302      	adds	r3, #2
 80134f2:	602b      	str	r3, [r5, #0]
 80134f4:	2706      	movs	r7, #6
 80134f6:	6823      	ldr	r3, [r4, #0]
 80134f8:	401f      	ands	r7, r3
 80134fa:	d027      	beq.n	801354c <_printf_common+0x88>
 80134fc:	0023      	movs	r3, r4
 80134fe:	3343      	adds	r3, #67	; 0x43
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	1e5a      	subs	r2, r3, #1
 8013504:	4193      	sbcs	r3, r2
 8013506:	6822      	ldr	r2, [r4, #0]
 8013508:	0692      	lsls	r2, r2, #26
 801350a:	d430      	bmi.n	801356e <_printf_common+0xaa>
 801350c:	0022      	movs	r2, r4
 801350e:	9901      	ldr	r1, [sp, #4]
 8013510:	3243      	adds	r2, #67	; 0x43
 8013512:	9800      	ldr	r0, [sp, #0]
 8013514:	9e08      	ldr	r6, [sp, #32]
 8013516:	47b0      	blx	r6
 8013518:	1c43      	adds	r3, r0, #1
 801351a:	d025      	beq.n	8013568 <_printf_common+0xa4>
 801351c:	2306      	movs	r3, #6
 801351e:	6820      	ldr	r0, [r4, #0]
 8013520:	682a      	ldr	r2, [r5, #0]
 8013522:	68e1      	ldr	r1, [r4, #12]
 8013524:	4003      	ands	r3, r0
 8013526:	2500      	movs	r5, #0
 8013528:	2b04      	cmp	r3, #4
 801352a:	d103      	bne.n	8013534 <_printf_common+0x70>
 801352c:	1a8d      	subs	r5, r1, r2
 801352e:	43eb      	mvns	r3, r5
 8013530:	17db      	asrs	r3, r3, #31
 8013532:	401d      	ands	r5, r3
 8013534:	68a3      	ldr	r3, [r4, #8]
 8013536:	6922      	ldr	r2, [r4, #16]
 8013538:	4293      	cmp	r3, r2
 801353a:	dd01      	ble.n	8013540 <_printf_common+0x7c>
 801353c:	1a9b      	subs	r3, r3, r2
 801353e:	18ed      	adds	r5, r5, r3
 8013540:	2700      	movs	r7, #0
 8013542:	42bd      	cmp	r5, r7
 8013544:	d120      	bne.n	8013588 <_printf_common+0xc4>
 8013546:	2000      	movs	r0, #0
 8013548:	e010      	b.n	801356c <_printf_common+0xa8>
 801354a:	3701      	adds	r7, #1
 801354c:	68e3      	ldr	r3, [r4, #12]
 801354e:	682a      	ldr	r2, [r5, #0]
 8013550:	1a9b      	subs	r3, r3, r2
 8013552:	42bb      	cmp	r3, r7
 8013554:	ddd2      	ble.n	80134fc <_printf_common+0x38>
 8013556:	0022      	movs	r2, r4
 8013558:	2301      	movs	r3, #1
 801355a:	3219      	adds	r2, #25
 801355c:	9901      	ldr	r1, [sp, #4]
 801355e:	9800      	ldr	r0, [sp, #0]
 8013560:	9e08      	ldr	r6, [sp, #32]
 8013562:	47b0      	blx	r6
 8013564:	1c43      	adds	r3, r0, #1
 8013566:	d1f0      	bne.n	801354a <_printf_common+0x86>
 8013568:	2001      	movs	r0, #1
 801356a:	4240      	negs	r0, r0
 801356c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801356e:	2030      	movs	r0, #48	; 0x30
 8013570:	18e1      	adds	r1, r4, r3
 8013572:	3143      	adds	r1, #67	; 0x43
 8013574:	7008      	strb	r0, [r1, #0]
 8013576:	0021      	movs	r1, r4
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	3145      	adds	r1, #69	; 0x45
 801357c:	7809      	ldrb	r1, [r1, #0]
 801357e:	18a2      	adds	r2, r4, r2
 8013580:	3243      	adds	r2, #67	; 0x43
 8013582:	3302      	adds	r3, #2
 8013584:	7011      	strb	r1, [r2, #0]
 8013586:	e7c1      	b.n	801350c <_printf_common+0x48>
 8013588:	0022      	movs	r2, r4
 801358a:	2301      	movs	r3, #1
 801358c:	321a      	adds	r2, #26
 801358e:	9901      	ldr	r1, [sp, #4]
 8013590:	9800      	ldr	r0, [sp, #0]
 8013592:	9e08      	ldr	r6, [sp, #32]
 8013594:	47b0      	blx	r6
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	d0e6      	beq.n	8013568 <_printf_common+0xa4>
 801359a:	3701      	adds	r7, #1
 801359c:	e7d1      	b.n	8013542 <_printf_common+0x7e>
	...

080135a0 <_printf_i>:
 80135a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135a2:	b089      	sub	sp, #36	; 0x24
 80135a4:	9204      	str	r2, [sp, #16]
 80135a6:	000a      	movs	r2, r1
 80135a8:	3243      	adds	r2, #67	; 0x43
 80135aa:	9305      	str	r3, [sp, #20]
 80135ac:	9003      	str	r0, [sp, #12]
 80135ae:	9202      	str	r2, [sp, #8]
 80135b0:	7e0a      	ldrb	r2, [r1, #24]
 80135b2:	000c      	movs	r4, r1
 80135b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135b6:	2a6e      	cmp	r2, #110	; 0x6e
 80135b8:	d100      	bne.n	80135bc <_printf_i+0x1c>
 80135ba:	e086      	b.n	80136ca <_printf_i+0x12a>
 80135bc:	d81f      	bhi.n	80135fe <_printf_i+0x5e>
 80135be:	2a63      	cmp	r2, #99	; 0x63
 80135c0:	d033      	beq.n	801362a <_printf_i+0x8a>
 80135c2:	d808      	bhi.n	80135d6 <_printf_i+0x36>
 80135c4:	2a00      	cmp	r2, #0
 80135c6:	d100      	bne.n	80135ca <_printf_i+0x2a>
 80135c8:	e08c      	b.n	80136e4 <_printf_i+0x144>
 80135ca:	2a58      	cmp	r2, #88	; 0x58
 80135cc:	d04d      	beq.n	801366a <_printf_i+0xca>
 80135ce:	0025      	movs	r5, r4
 80135d0:	3542      	adds	r5, #66	; 0x42
 80135d2:	702a      	strb	r2, [r5, #0]
 80135d4:	e030      	b.n	8013638 <_printf_i+0x98>
 80135d6:	2a64      	cmp	r2, #100	; 0x64
 80135d8:	d001      	beq.n	80135de <_printf_i+0x3e>
 80135da:	2a69      	cmp	r2, #105	; 0x69
 80135dc:	d1f7      	bne.n	80135ce <_printf_i+0x2e>
 80135de:	6819      	ldr	r1, [r3, #0]
 80135e0:	6825      	ldr	r5, [r4, #0]
 80135e2:	1d0a      	adds	r2, r1, #4
 80135e4:	0628      	lsls	r0, r5, #24
 80135e6:	d529      	bpl.n	801363c <_printf_i+0x9c>
 80135e8:	6808      	ldr	r0, [r1, #0]
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	2800      	cmp	r0, #0
 80135ee:	da03      	bge.n	80135f8 <_printf_i+0x58>
 80135f0:	232d      	movs	r3, #45	; 0x2d
 80135f2:	9a02      	ldr	r2, [sp, #8]
 80135f4:	4240      	negs	r0, r0
 80135f6:	7013      	strb	r3, [r2, #0]
 80135f8:	4e6b      	ldr	r6, [pc, #428]	; (80137a8 <_printf_i+0x208>)
 80135fa:	270a      	movs	r7, #10
 80135fc:	e04f      	b.n	801369e <_printf_i+0xfe>
 80135fe:	2a73      	cmp	r2, #115	; 0x73
 8013600:	d074      	beq.n	80136ec <_printf_i+0x14c>
 8013602:	d808      	bhi.n	8013616 <_printf_i+0x76>
 8013604:	2a6f      	cmp	r2, #111	; 0x6f
 8013606:	d01f      	beq.n	8013648 <_printf_i+0xa8>
 8013608:	2a70      	cmp	r2, #112	; 0x70
 801360a:	d1e0      	bne.n	80135ce <_printf_i+0x2e>
 801360c:	2220      	movs	r2, #32
 801360e:	6809      	ldr	r1, [r1, #0]
 8013610:	430a      	orrs	r2, r1
 8013612:	6022      	str	r2, [r4, #0]
 8013614:	e003      	b.n	801361e <_printf_i+0x7e>
 8013616:	2a75      	cmp	r2, #117	; 0x75
 8013618:	d016      	beq.n	8013648 <_printf_i+0xa8>
 801361a:	2a78      	cmp	r2, #120	; 0x78
 801361c:	d1d7      	bne.n	80135ce <_printf_i+0x2e>
 801361e:	0022      	movs	r2, r4
 8013620:	2178      	movs	r1, #120	; 0x78
 8013622:	3245      	adds	r2, #69	; 0x45
 8013624:	7011      	strb	r1, [r2, #0]
 8013626:	4e61      	ldr	r6, [pc, #388]	; (80137ac <_printf_i+0x20c>)
 8013628:	e022      	b.n	8013670 <_printf_i+0xd0>
 801362a:	0025      	movs	r5, r4
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	3542      	adds	r5, #66	; 0x42
 8013630:	1d11      	adds	r1, r2, #4
 8013632:	6019      	str	r1, [r3, #0]
 8013634:	6813      	ldr	r3, [r2, #0]
 8013636:	702b      	strb	r3, [r5, #0]
 8013638:	2301      	movs	r3, #1
 801363a:	e065      	b.n	8013708 <_printf_i+0x168>
 801363c:	6808      	ldr	r0, [r1, #0]
 801363e:	601a      	str	r2, [r3, #0]
 8013640:	0669      	lsls	r1, r5, #25
 8013642:	d5d3      	bpl.n	80135ec <_printf_i+0x4c>
 8013644:	b200      	sxth	r0, r0
 8013646:	e7d1      	b.n	80135ec <_printf_i+0x4c>
 8013648:	6819      	ldr	r1, [r3, #0]
 801364a:	6825      	ldr	r5, [r4, #0]
 801364c:	1d08      	adds	r0, r1, #4
 801364e:	6018      	str	r0, [r3, #0]
 8013650:	6808      	ldr	r0, [r1, #0]
 8013652:	062e      	lsls	r6, r5, #24
 8013654:	d505      	bpl.n	8013662 <_printf_i+0xc2>
 8013656:	4e54      	ldr	r6, [pc, #336]	; (80137a8 <_printf_i+0x208>)
 8013658:	2708      	movs	r7, #8
 801365a:	2a6f      	cmp	r2, #111	; 0x6f
 801365c:	d01b      	beq.n	8013696 <_printf_i+0xf6>
 801365e:	270a      	movs	r7, #10
 8013660:	e019      	b.n	8013696 <_printf_i+0xf6>
 8013662:	066d      	lsls	r5, r5, #25
 8013664:	d5f7      	bpl.n	8013656 <_printf_i+0xb6>
 8013666:	b280      	uxth	r0, r0
 8013668:	e7f5      	b.n	8013656 <_printf_i+0xb6>
 801366a:	3145      	adds	r1, #69	; 0x45
 801366c:	4e4e      	ldr	r6, [pc, #312]	; (80137a8 <_printf_i+0x208>)
 801366e:	700a      	strb	r2, [r1, #0]
 8013670:	6818      	ldr	r0, [r3, #0]
 8013672:	6822      	ldr	r2, [r4, #0]
 8013674:	1d01      	adds	r1, r0, #4
 8013676:	6800      	ldr	r0, [r0, #0]
 8013678:	6019      	str	r1, [r3, #0]
 801367a:	0615      	lsls	r5, r2, #24
 801367c:	d521      	bpl.n	80136c2 <_printf_i+0x122>
 801367e:	07d3      	lsls	r3, r2, #31
 8013680:	d502      	bpl.n	8013688 <_printf_i+0xe8>
 8013682:	2320      	movs	r3, #32
 8013684:	431a      	orrs	r2, r3
 8013686:	6022      	str	r2, [r4, #0]
 8013688:	2710      	movs	r7, #16
 801368a:	2800      	cmp	r0, #0
 801368c:	d103      	bne.n	8013696 <_printf_i+0xf6>
 801368e:	2320      	movs	r3, #32
 8013690:	6822      	ldr	r2, [r4, #0]
 8013692:	439a      	bics	r2, r3
 8013694:	6022      	str	r2, [r4, #0]
 8013696:	0023      	movs	r3, r4
 8013698:	2200      	movs	r2, #0
 801369a:	3343      	adds	r3, #67	; 0x43
 801369c:	701a      	strb	r2, [r3, #0]
 801369e:	6863      	ldr	r3, [r4, #4]
 80136a0:	60a3      	str	r3, [r4, #8]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	db58      	blt.n	8013758 <_printf_i+0x1b8>
 80136a6:	2204      	movs	r2, #4
 80136a8:	6821      	ldr	r1, [r4, #0]
 80136aa:	4391      	bics	r1, r2
 80136ac:	6021      	str	r1, [r4, #0]
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d154      	bne.n	801375c <_printf_i+0x1bc>
 80136b2:	9d02      	ldr	r5, [sp, #8]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d05a      	beq.n	801376e <_printf_i+0x1ce>
 80136b8:	0025      	movs	r5, r4
 80136ba:	7833      	ldrb	r3, [r6, #0]
 80136bc:	3542      	adds	r5, #66	; 0x42
 80136be:	702b      	strb	r3, [r5, #0]
 80136c0:	e055      	b.n	801376e <_printf_i+0x1ce>
 80136c2:	0655      	lsls	r5, r2, #25
 80136c4:	d5db      	bpl.n	801367e <_printf_i+0xde>
 80136c6:	b280      	uxth	r0, r0
 80136c8:	e7d9      	b.n	801367e <_printf_i+0xde>
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	680d      	ldr	r5, [r1, #0]
 80136ce:	1d10      	adds	r0, r2, #4
 80136d0:	6949      	ldr	r1, [r1, #20]
 80136d2:	6018      	str	r0, [r3, #0]
 80136d4:	6813      	ldr	r3, [r2, #0]
 80136d6:	062e      	lsls	r6, r5, #24
 80136d8:	d501      	bpl.n	80136de <_printf_i+0x13e>
 80136da:	6019      	str	r1, [r3, #0]
 80136dc:	e002      	b.n	80136e4 <_printf_i+0x144>
 80136de:	066d      	lsls	r5, r5, #25
 80136e0:	d5fb      	bpl.n	80136da <_printf_i+0x13a>
 80136e2:	8019      	strh	r1, [r3, #0]
 80136e4:	2300      	movs	r3, #0
 80136e6:	9d02      	ldr	r5, [sp, #8]
 80136e8:	6123      	str	r3, [r4, #16]
 80136ea:	e04f      	b.n	801378c <_printf_i+0x1ec>
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	1d11      	adds	r1, r2, #4
 80136f0:	6019      	str	r1, [r3, #0]
 80136f2:	6815      	ldr	r5, [r2, #0]
 80136f4:	2100      	movs	r1, #0
 80136f6:	6862      	ldr	r2, [r4, #4]
 80136f8:	0028      	movs	r0, r5
 80136fa:	f002 fa33 	bl	8015b64 <memchr>
 80136fe:	2800      	cmp	r0, #0
 8013700:	d001      	beq.n	8013706 <_printf_i+0x166>
 8013702:	1b40      	subs	r0, r0, r5
 8013704:	6060      	str	r0, [r4, #4]
 8013706:	6863      	ldr	r3, [r4, #4]
 8013708:	6123      	str	r3, [r4, #16]
 801370a:	2300      	movs	r3, #0
 801370c:	9a02      	ldr	r2, [sp, #8]
 801370e:	7013      	strb	r3, [r2, #0]
 8013710:	e03c      	b.n	801378c <_printf_i+0x1ec>
 8013712:	6923      	ldr	r3, [r4, #16]
 8013714:	002a      	movs	r2, r5
 8013716:	9904      	ldr	r1, [sp, #16]
 8013718:	9803      	ldr	r0, [sp, #12]
 801371a:	9d05      	ldr	r5, [sp, #20]
 801371c:	47a8      	blx	r5
 801371e:	1c43      	adds	r3, r0, #1
 8013720:	d03e      	beq.n	80137a0 <_printf_i+0x200>
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	079b      	lsls	r3, r3, #30
 8013726:	d415      	bmi.n	8013754 <_printf_i+0x1b4>
 8013728:	9b07      	ldr	r3, [sp, #28]
 801372a:	68e0      	ldr	r0, [r4, #12]
 801372c:	4298      	cmp	r0, r3
 801372e:	da39      	bge.n	80137a4 <_printf_i+0x204>
 8013730:	0018      	movs	r0, r3
 8013732:	e037      	b.n	80137a4 <_printf_i+0x204>
 8013734:	0022      	movs	r2, r4
 8013736:	2301      	movs	r3, #1
 8013738:	3219      	adds	r2, #25
 801373a:	9904      	ldr	r1, [sp, #16]
 801373c:	9803      	ldr	r0, [sp, #12]
 801373e:	9e05      	ldr	r6, [sp, #20]
 8013740:	47b0      	blx	r6
 8013742:	1c43      	adds	r3, r0, #1
 8013744:	d02c      	beq.n	80137a0 <_printf_i+0x200>
 8013746:	3501      	adds	r5, #1
 8013748:	68e3      	ldr	r3, [r4, #12]
 801374a:	9a07      	ldr	r2, [sp, #28]
 801374c:	1a9b      	subs	r3, r3, r2
 801374e:	42ab      	cmp	r3, r5
 8013750:	dcf0      	bgt.n	8013734 <_printf_i+0x194>
 8013752:	e7e9      	b.n	8013728 <_printf_i+0x188>
 8013754:	2500      	movs	r5, #0
 8013756:	e7f7      	b.n	8013748 <_printf_i+0x1a8>
 8013758:	2800      	cmp	r0, #0
 801375a:	d0ad      	beq.n	80136b8 <_printf_i+0x118>
 801375c:	9d02      	ldr	r5, [sp, #8]
 801375e:	0039      	movs	r1, r7
 8013760:	f7ec fd72 	bl	8000248 <__aeabi_uidivmod>
 8013764:	5c73      	ldrb	r3, [r6, r1]
 8013766:	3d01      	subs	r5, #1
 8013768:	702b      	strb	r3, [r5, #0]
 801376a:	2800      	cmp	r0, #0
 801376c:	d1f7      	bne.n	801375e <_printf_i+0x1be>
 801376e:	2f08      	cmp	r7, #8
 8013770:	d109      	bne.n	8013786 <_printf_i+0x1e6>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	07db      	lsls	r3, r3, #31
 8013776:	d506      	bpl.n	8013786 <_printf_i+0x1e6>
 8013778:	6863      	ldr	r3, [r4, #4]
 801377a:	6922      	ldr	r2, [r4, #16]
 801377c:	4293      	cmp	r3, r2
 801377e:	dc02      	bgt.n	8013786 <_printf_i+0x1e6>
 8013780:	2330      	movs	r3, #48	; 0x30
 8013782:	3d01      	subs	r5, #1
 8013784:	702b      	strb	r3, [r5, #0]
 8013786:	9b02      	ldr	r3, [sp, #8]
 8013788:	1b5b      	subs	r3, r3, r5
 801378a:	6123      	str	r3, [r4, #16]
 801378c:	9b05      	ldr	r3, [sp, #20]
 801378e:	aa07      	add	r2, sp, #28
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	0021      	movs	r1, r4
 8013794:	9b04      	ldr	r3, [sp, #16]
 8013796:	9803      	ldr	r0, [sp, #12]
 8013798:	f7ff fe94 	bl	80134c4 <_printf_common>
 801379c:	1c43      	adds	r3, r0, #1
 801379e:	d1b8      	bne.n	8013712 <_printf_i+0x172>
 80137a0:	2001      	movs	r0, #1
 80137a2:	4240      	negs	r0, r0
 80137a4:	b009      	add	sp, #36	; 0x24
 80137a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137a8:	080197e8 	.word	0x080197e8
 80137ac:	080197f9 	.word	0x080197f9

080137b0 <rand>:
 80137b0:	4b12      	ldr	r3, [pc, #72]	; (80137fc <rand+0x4c>)
 80137b2:	b510      	push	{r4, lr}
 80137b4:	681c      	ldr	r4, [r3, #0]
 80137b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10f      	bne.n	80137dc <rand+0x2c>
 80137bc:	2018      	movs	r0, #24
 80137be:	f7ff faab 	bl	8012d18 <malloc>
 80137c2:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <rand+0x50>)
 80137c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80137c6:	6003      	str	r3, [r0, #0]
 80137c8:	4b0e      	ldr	r3, [pc, #56]	; (8013804 <rand+0x54>)
 80137ca:	2201      	movs	r2, #1
 80137cc:	6043      	str	r3, [r0, #4]
 80137ce:	4b0e      	ldr	r3, [pc, #56]	; (8013808 <rand+0x58>)
 80137d0:	6083      	str	r3, [r0, #8]
 80137d2:	230b      	movs	r3, #11
 80137d4:	8183      	strh	r3, [r0, #12]
 80137d6:	2300      	movs	r3, #0
 80137d8:	6102      	str	r2, [r0, #16]
 80137da:	6143      	str	r3, [r0, #20]
 80137dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80137de:	4a0b      	ldr	r2, [pc, #44]	; (801380c <rand+0x5c>)
 80137e0:	6920      	ldr	r0, [r4, #16]
 80137e2:	6961      	ldr	r1, [r4, #20]
 80137e4:	4b0a      	ldr	r3, [pc, #40]	; (8013810 <rand+0x60>)
 80137e6:	f7ec fe97 	bl	8000518 <__aeabi_lmul>
 80137ea:	2201      	movs	r2, #1
 80137ec:	2300      	movs	r3, #0
 80137ee:	1880      	adds	r0, r0, r2
 80137f0:	4159      	adcs	r1, r3
 80137f2:	6120      	str	r0, [r4, #16]
 80137f4:	6161      	str	r1, [r4, #20]
 80137f6:	0048      	lsls	r0, r1, #1
 80137f8:	0840      	lsrs	r0, r0, #1
 80137fa:	bd10      	pop	{r4, pc}
 80137fc:	200000c4 	.word	0x200000c4
 8013800:	abcd330e 	.word	0xabcd330e
 8013804:	e66d1234 	.word	0xe66d1234
 8013808:	0005deec 	.word	0x0005deec
 801380c:	4c957f2d 	.word	0x4c957f2d
 8013810:	5851f42d 	.word	0x5851f42d

08013814 <realloc>:
 8013814:	b510      	push	{r4, lr}
 8013816:	4b03      	ldr	r3, [pc, #12]	; (8013824 <realloc+0x10>)
 8013818:	000a      	movs	r2, r1
 801381a:	0001      	movs	r1, r0
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	f002 fdb2 	bl	8016386 <_realloc_r>
 8013822:	bd10      	pop	{r4, pc}
 8013824:	200000c4 	.word	0x200000c4

08013828 <_sbrk_r>:
 8013828:	2300      	movs	r3, #0
 801382a:	b570      	push	{r4, r5, r6, lr}
 801382c:	4c06      	ldr	r4, [pc, #24]	; (8013848 <_sbrk_r+0x20>)
 801382e:	0005      	movs	r5, r0
 8013830:	0008      	movs	r0, r1
 8013832:	6023      	str	r3, [r4, #0]
 8013834:	f002 ff4a 	bl	80166cc <_sbrk>
 8013838:	1c43      	adds	r3, r0, #1
 801383a:	d103      	bne.n	8013844 <_sbrk_r+0x1c>
 801383c:	6823      	ldr	r3, [r4, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d000      	beq.n	8013844 <_sbrk_r+0x1c>
 8013842:	602b      	str	r3, [r5, #0]
 8013844:	bd70      	pop	{r4, r5, r6, pc}
 8013846:	46c0      	nop			; (mov r8, r8)
 8013848:	20006040 	.word	0x20006040

0801384c <sniprintf>:
 801384c:	b40c      	push	{r2, r3}
 801384e:	b530      	push	{r4, r5, lr}
 8013850:	4b16      	ldr	r3, [pc, #88]	; (80138ac <sniprintf+0x60>)
 8013852:	b09d      	sub	sp, #116	; 0x74
 8013854:	1e0c      	subs	r4, r1, #0
 8013856:	681d      	ldr	r5, [r3, #0]
 8013858:	da08      	bge.n	801386c <sniprintf+0x20>
 801385a:	238b      	movs	r3, #139	; 0x8b
 801385c:	2001      	movs	r0, #1
 801385e:	602b      	str	r3, [r5, #0]
 8013860:	4240      	negs	r0, r0
 8013862:	b01d      	add	sp, #116	; 0x74
 8013864:	bc30      	pop	{r4, r5}
 8013866:	bc08      	pop	{r3}
 8013868:	b002      	add	sp, #8
 801386a:	4718      	bx	r3
 801386c:	2382      	movs	r3, #130	; 0x82
 801386e:	a902      	add	r1, sp, #8
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	818b      	strh	r3, [r1, #12]
 8013874:	2300      	movs	r3, #0
 8013876:	9002      	str	r0, [sp, #8]
 8013878:	6108      	str	r0, [r1, #16]
 801387a:	429c      	cmp	r4, r3
 801387c:	d000      	beq.n	8013880 <sniprintf+0x34>
 801387e:	1e63      	subs	r3, r4, #1
 8013880:	608b      	str	r3, [r1, #8]
 8013882:	614b      	str	r3, [r1, #20]
 8013884:	2301      	movs	r3, #1
 8013886:	425b      	negs	r3, r3
 8013888:	81cb      	strh	r3, [r1, #14]
 801388a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801388c:	ab21      	add	r3, sp, #132	; 0x84
 801388e:	0028      	movs	r0, r5
 8013890:	9301      	str	r3, [sp, #4]
 8013892:	f002 fe01 	bl	8016498 <_svfiprintf_r>
 8013896:	1c43      	adds	r3, r0, #1
 8013898:	da01      	bge.n	801389e <sniprintf+0x52>
 801389a:	238b      	movs	r3, #139	; 0x8b
 801389c:	602b      	str	r3, [r5, #0]
 801389e:	2c00      	cmp	r4, #0
 80138a0:	d0df      	beq.n	8013862 <sniprintf+0x16>
 80138a2:	2300      	movs	r3, #0
 80138a4:	9a02      	ldr	r2, [sp, #8]
 80138a6:	7013      	strb	r3, [r2, #0]
 80138a8:	e7db      	b.n	8013862 <sniprintf+0x16>
 80138aa:	46c0      	nop			; (mov r8, r8)
 80138ac:	200000c4 	.word	0x200000c4

080138b0 <siprintf>:
 80138b0:	b40e      	push	{r1, r2, r3}
 80138b2:	b500      	push	{lr}
 80138b4:	490b      	ldr	r1, [pc, #44]	; (80138e4 <siprintf+0x34>)
 80138b6:	b09c      	sub	sp, #112	; 0x70
 80138b8:	ab1d      	add	r3, sp, #116	; 0x74
 80138ba:	9002      	str	r0, [sp, #8]
 80138bc:	9006      	str	r0, [sp, #24]
 80138be:	9107      	str	r1, [sp, #28]
 80138c0:	9104      	str	r1, [sp, #16]
 80138c2:	4809      	ldr	r0, [pc, #36]	; (80138e8 <siprintf+0x38>)
 80138c4:	4909      	ldr	r1, [pc, #36]	; (80138ec <siprintf+0x3c>)
 80138c6:	cb04      	ldmia	r3!, {r2}
 80138c8:	9105      	str	r1, [sp, #20]
 80138ca:	6800      	ldr	r0, [r0, #0]
 80138cc:	a902      	add	r1, sp, #8
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	f002 fde2 	bl	8016498 <_svfiprintf_r>
 80138d4:	2300      	movs	r3, #0
 80138d6:	9a02      	ldr	r2, [sp, #8]
 80138d8:	7013      	strb	r3, [r2, #0]
 80138da:	b01c      	add	sp, #112	; 0x70
 80138dc:	bc08      	pop	{r3}
 80138de:	b003      	add	sp, #12
 80138e0:	4718      	bx	r3
 80138e2:	46c0      	nop			; (mov r8, r8)
 80138e4:	7fffffff 	.word	0x7fffffff
 80138e8:	200000c4 	.word	0x200000c4
 80138ec:	ffff0208 	.word	0xffff0208

080138f0 <strcat>:
 80138f0:	0002      	movs	r2, r0
 80138f2:	b510      	push	{r4, lr}
 80138f4:	7813      	ldrb	r3, [r2, #0]
 80138f6:	1c54      	adds	r4, r2, #1
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d105      	bne.n	8013908 <strcat+0x18>
 80138fc:	5ccc      	ldrb	r4, [r1, r3]
 80138fe:	54d4      	strb	r4, [r2, r3]
 8013900:	3301      	adds	r3, #1
 8013902:	2c00      	cmp	r4, #0
 8013904:	d1fa      	bne.n	80138fc <strcat+0xc>
 8013906:	bd10      	pop	{r4, pc}
 8013908:	0022      	movs	r2, r4
 801390a:	e7f3      	b.n	80138f4 <strcat+0x4>

0801390c <strchr>:
 801390c:	b2c9      	uxtb	r1, r1
 801390e:	7803      	ldrb	r3, [r0, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d004      	beq.n	801391e <strchr+0x12>
 8013914:	428b      	cmp	r3, r1
 8013916:	d100      	bne.n	801391a <strchr+0xe>
 8013918:	4770      	bx	lr
 801391a:	3001      	adds	r0, #1
 801391c:	e7f7      	b.n	801390e <strchr+0x2>
 801391e:	424b      	negs	r3, r1
 8013920:	4159      	adcs	r1, r3
 8013922:	4249      	negs	r1, r1
 8013924:	4008      	ands	r0, r1
 8013926:	e7f7      	b.n	8013918 <strchr+0xc>

08013928 <strcpy>:
 8013928:	0003      	movs	r3, r0
 801392a:	780a      	ldrb	r2, [r1, #0]
 801392c:	3101      	adds	r1, #1
 801392e:	701a      	strb	r2, [r3, #0]
 8013930:	3301      	adds	r3, #1
 8013932:	2a00      	cmp	r2, #0
 8013934:	d1f9      	bne.n	801392a <strcpy+0x2>
 8013936:	4770      	bx	lr

08013938 <strncmp>:
 8013938:	2300      	movs	r3, #0
 801393a:	b530      	push	{r4, r5, lr}
 801393c:	429a      	cmp	r2, r3
 801393e:	d00a      	beq.n	8013956 <strncmp+0x1e>
 8013940:	3a01      	subs	r2, #1
 8013942:	5cc4      	ldrb	r4, [r0, r3]
 8013944:	5ccd      	ldrb	r5, [r1, r3]
 8013946:	42ac      	cmp	r4, r5
 8013948:	d104      	bne.n	8013954 <strncmp+0x1c>
 801394a:	4293      	cmp	r3, r2
 801394c:	d002      	beq.n	8013954 <strncmp+0x1c>
 801394e:	3301      	adds	r3, #1
 8013950:	2c00      	cmp	r4, #0
 8013952:	d1f6      	bne.n	8013942 <strncmp+0xa>
 8013954:	1b63      	subs	r3, r4, r5
 8013956:	0018      	movs	r0, r3
 8013958:	bd30      	pop	{r4, r5, pc}

0801395a <strncpy>:
 801395a:	b530      	push	{r4, r5, lr}
 801395c:	0005      	movs	r5, r0
 801395e:	2a00      	cmp	r2, #0
 8013960:	d100      	bne.n	8013964 <strncpy+0xa>
 8013962:	bd30      	pop	{r4, r5, pc}
 8013964:	780c      	ldrb	r4, [r1, #0]
 8013966:	3a01      	subs	r2, #1
 8013968:	1c6b      	adds	r3, r5, #1
 801396a:	702c      	strb	r4, [r5, #0]
 801396c:	3101      	adds	r1, #1
 801396e:	2c00      	cmp	r4, #0
 8013970:	d105      	bne.n	801397e <strncpy+0x24>
 8013972:	189a      	adds	r2, r3, r2
 8013974:	429a      	cmp	r2, r3
 8013976:	d0f4      	beq.n	8013962 <strncpy+0x8>
 8013978:	701c      	strb	r4, [r3, #0]
 801397a:	3301      	adds	r3, #1
 801397c:	e7fa      	b.n	8013974 <strncpy+0x1a>
 801397e:	001d      	movs	r5, r3
 8013980:	e7ed      	b.n	801395e <strncpy+0x4>
	...

08013984 <sulp>:
 8013984:	b570      	push	{r4, r5, r6, lr}
 8013986:	0016      	movs	r6, r2
 8013988:	000d      	movs	r5, r1
 801398a:	f002 fbc9 	bl	8016120 <__ulp>
 801398e:	2e00      	cmp	r6, #0
 8013990:	d00d      	beq.n	80139ae <sulp+0x2a>
 8013992:	236b      	movs	r3, #107	; 0x6b
 8013994:	006a      	lsls	r2, r5, #1
 8013996:	0d52      	lsrs	r2, r2, #21
 8013998:	1a9b      	subs	r3, r3, r2
 801399a:	2b00      	cmp	r3, #0
 801399c:	dd07      	ble.n	80139ae <sulp+0x2a>
 801399e:	2400      	movs	r4, #0
 80139a0:	4a03      	ldr	r2, [pc, #12]	; (80139b0 <sulp+0x2c>)
 80139a2:	051b      	lsls	r3, r3, #20
 80139a4:	189d      	adds	r5, r3, r2
 80139a6:	002b      	movs	r3, r5
 80139a8:	0022      	movs	r2, r4
 80139aa:	f7ee f957 	bl	8001c5c <__aeabi_dmul>
 80139ae:	bd70      	pop	{r4, r5, r6, pc}
 80139b0:	3ff00000 	.word	0x3ff00000

080139b4 <_strtod_l>:
 80139b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139b6:	b0a7      	sub	sp, #156	; 0x9c
 80139b8:	9307      	str	r3, [sp, #28]
 80139ba:	2300      	movs	r3, #0
 80139bc:	9004      	str	r0, [sp, #16]
 80139be:	9807      	ldr	r0, [sp, #28]
 80139c0:	9322      	str	r3, [sp, #136]	; 0x88
 80139c2:	9106      	str	r1, [sp, #24]
 80139c4:	921d      	str	r2, [sp, #116]	; 0x74
 80139c6:	f002 f8be 	bl	8015b46 <__localeconv_l>
 80139ca:	0005      	movs	r5, r0
 80139cc:	6800      	ldr	r0, [r0, #0]
 80139ce:	f7ec fba3 	bl	8000118 <strlen>
 80139d2:	2600      	movs	r6, #0
 80139d4:	2700      	movs	r7, #0
 80139d6:	9b06      	ldr	r3, [sp, #24]
 80139d8:	9005      	str	r0, [sp, #20]
 80139da:	9321      	str	r3, [sp, #132]	; 0x84
 80139dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139de:	781a      	ldrb	r2, [r3, #0]
 80139e0:	2a0d      	cmp	r2, #13
 80139e2:	d839      	bhi.n	8013a58 <_strtod_l+0xa4>
 80139e4:	2a09      	cmp	r2, #9
 80139e6:	d23d      	bcs.n	8013a64 <_strtod_l+0xb0>
 80139e8:	2a00      	cmp	r2, #0
 80139ea:	d044      	beq.n	8013a76 <_strtod_l+0xc2>
 80139ec:	2300      	movs	r3, #0
 80139ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80139f0:	2200      	movs	r2, #0
 80139f2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80139f4:	920c      	str	r2, [sp, #48]	; 0x30
 80139f6:	7823      	ldrb	r3, [r4, #0]
 80139f8:	2b30      	cmp	r3, #48	; 0x30
 80139fa:	d000      	beq.n	80139fe <_strtod_l+0x4a>
 80139fc:	e07e      	b.n	8013afc <_strtod_l+0x148>
 80139fe:	7863      	ldrb	r3, [r4, #1]
 8013a00:	2b58      	cmp	r3, #88	; 0x58
 8013a02:	d002      	beq.n	8013a0a <_strtod_l+0x56>
 8013a04:	2b78      	cmp	r3, #120	; 0x78
 8013a06:	d000      	beq.n	8013a0a <_strtod_l+0x56>
 8013a08:	e06e      	b.n	8013ae8 <_strtod_l+0x134>
 8013a0a:	9b07      	ldr	r3, [sp, #28]
 8013a0c:	4a96      	ldr	r2, [pc, #600]	; (8013c68 <_strtod_l+0x2b4>)
 8013a0e:	9302      	str	r3, [sp, #8]
 8013a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a12:	a921      	add	r1, sp, #132	; 0x84
 8013a14:	9301      	str	r3, [sp, #4]
 8013a16:	ab22      	add	r3, sp, #136	; 0x88
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	9804      	ldr	r0, [sp, #16]
 8013a1c:	ab23      	add	r3, sp, #140	; 0x8c
 8013a1e:	f001 fdaa 	bl	8015576 <__gethex>
 8013a22:	2507      	movs	r5, #7
 8013a24:	9005      	str	r0, [sp, #20]
 8013a26:	4005      	ands	r5, r0
 8013a28:	d005      	beq.n	8013a36 <_strtod_l+0x82>
 8013a2a:	2d06      	cmp	r5, #6
 8013a2c:	d12f      	bne.n	8013a8e <_strtod_l+0xda>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	3401      	adds	r4, #1
 8013a32:	9421      	str	r4, [sp, #132]	; 0x84
 8013a34:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d002      	beq.n	8013a42 <_strtod_l+0x8e>
 8013a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d01d      	beq.n	8013a84 <_strtod_l+0xd0>
 8013a48:	2380      	movs	r3, #128	; 0x80
 8013a4a:	0032      	movs	r2, r6
 8013a4c:	061b      	lsls	r3, r3, #24
 8013a4e:	18fb      	adds	r3, r7, r3
 8013a50:	0010      	movs	r0, r2
 8013a52:	0019      	movs	r1, r3
 8013a54:	b027      	add	sp, #156	; 0x9c
 8013a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a58:	2a2b      	cmp	r2, #43	; 0x2b
 8013a5a:	d016      	beq.n	8013a8a <_strtod_l+0xd6>
 8013a5c:	2a2d      	cmp	r2, #45	; 0x2d
 8013a5e:	d003      	beq.n	8013a68 <_strtod_l+0xb4>
 8013a60:	2a20      	cmp	r2, #32
 8013a62:	d1c3      	bne.n	80139ec <_strtod_l+0x38>
 8013a64:	3301      	adds	r3, #1
 8013a66:	e7b8      	b.n	80139da <_strtod_l+0x26>
 8013a68:	2201      	movs	r2, #1
 8013a6a:	9213      	str	r2, [sp, #76]	; 0x4c
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	9221      	str	r2, [sp, #132]	; 0x84
 8013a70:	785b      	ldrb	r3, [r3, #1]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1bc      	bne.n	80139f0 <_strtod_l+0x3c>
 8013a76:	9b06      	ldr	r3, [sp, #24]
 8013a78:	9321      	str	r3, [sp, #132]	; 0x84
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d1db      	bne.n	8013a3c <_strtod_l+0x88>
 8013a84:	0032      	movs	r2, r6
 8013a86:	003b      	movs	r3, r7
 8013a88:	e7e2      	b.n	8013a50 <_strtod_l+0x9c>
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	e7ed      	b.n	8013a6a <_strtod_l+0xb6>
 8013a8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013a90:	2a00      	cmp	r2, #0
 8013a92:	d007      	beq.n	8013aa4 <_strtod_l+0xf0>
 8013a94:	2135      	movs	r1, #53	; 0x35
 8013a96:	a824      	add	r0, sp, #144	; 0x90
 8013a98:	f002 fc2f 	bl	80162fa <__copybits>
 8013a9c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a9e:	9804      	ldr	r0, [sp, #16]
 8013aa0:	f002 f8a5 	bl	8015bee <_Bfree>
 8013aa4:	1e68      	subs	r0, r5, #1
 8013aa6:	2804      	cmp	r0, #4
 8013aa8:	d806      	bhi.n	8013ab8 <_strtod_l+0x104>
 8013aaa:	f7ec fb3d 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013aae:	030c      	.short	0x030c
 8013ab0:	1917      	.short	0x1917
 8013ab2:	0c          	.byte	0x0c
 8013ab3:	00          	.byte	0x00
 8013ab4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013ab6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013ab8:	9b05      	ldr	r3, [sp, #20]
 8013aba:	071b      	lsls	r3, r3, #28
 8013abc:	d5bb      	bpl.n	8013a36 <_strtod_l+0x82>
 8013abe:	2380      	movs	r3, #128	; 0x80
 8013ac0:	061b      	lsls	r3, r3, #24
 8013ac2:	431f      	orrs	r7, r3
 8013ac4:	e7b7      	b.n	8013a36 <_strtod_l+0x82>
 8013ac6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013ac8:	4a68      	ldr	r2, [pc, #416]	; (8013c6c <_strtod_l+0x2b8>)
 8013aca:	4969      	ldr	r1, [pc, #420]	; (8013c70 <_strtod_l+0x2bc>)
 8013acc:	401a      	ands	r2, r3
 8013ace:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ad0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013ad2:	185b      	adds	r3, r3, r1
 8013ad4:	051b      	lsls	r3, r3, #20
 8013ad6:	431a      	orrs	r2, r3
 8013ad8:	0017      	movs	r7, r2
 8013ada:	e7ed      	b.n	8013ab8 <_strtod_l+0x104>
 8013adc:	4f65      	ldr	r7, [pc, #404]	; (8013c74 <_strtod_l+0x2c0>)
 8013ade:	e7eb      	b.n	8013ab8 <_strtod_l+0x104>
 8013ae0:	2601      	movs	r6, #1
 8013ae2:	4f65      	ldr	r7, [pc, #404]	; (8013c78 <_strtod_l+0x2c4>)
 8013ae4:	4276      	negs	r6, r6
 8013ae6:	e7e7      	b.n	8013ab8 <_strtod_l+0x104>
 8013ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013aea:	1c5a      	adds	r2, r3, #1
 8013aec:	9221      	str	r2, [sp, #132]	; 0x84
 8013aee:	785b      	ldrb	r3, [r3, #1]
 8013af0:	2b30      	cmp	r3, #48	; 0x30
 8013af2:	d0f9      	beq.n	8013ae8 <_strtod_l+0x134>
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d09e      	beq.n	8013a36 <_strtod_l+0x82>
 8013af8:	2301      	movs	r3, #1
 8013afa:	930c      	str	r3, [sp, #48]	; 0x30
 8013afc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013afe:	220a      	movs	r2, #10
 8013b00:	9312      	str	r3, [sp, #72]	; 0x48
 8013b02:	2300      	movs	r3, #0
 8013b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b06:	9308      	str	r3, [sp, #32]
 8013b08:	930a      	str	r3, [sp, #40]	; 0x28
 8013b0a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013b0c:	7804      	ldrb	r4, [r0, #0]
 8013b0e:	0023      	movs	r3, r4
 8013b10:	3b30      	subs	r3, #48	; 0x30
 8013b12:	b2d9      	uxtb	r1, r3
 8013b14:	2909      	cmp	r1, #9
 8013b16:	d934      	bls.n	8013b82 <_strtod_l+0x1ce>
 8013b18:	9a05      	ldr	r2, [sp, #20]
 8013b1a:	6829      	ldr	r1, [r5, #0]
 8013b1c:	f7ff ff0c 	bl	8013938 <strncmp>
 8013b20:	2800      	cmp	r0, #0
 8013b22:	d040      	beq.n	8013ba6 <_strtod_l+0x1f2>
 8013b24:	2000      	movs	r0, #0
 8013b26:	0023      	movs	r3, r4
 8013b28:	4684      	mov	ip, r0
 8013b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b2c:	9007      	str	r0, [sp, #28]
 8013b2e:	9205      	str	r2, [sp, #20]
 8013b30:	2220      	movs	r2, #32
 8013b32:	0019      	movs	r1, r3
 8013b34:	4391      	bics	r1, r2
 8013b36:	000a      	movs	r2, r1
 8013b38:	2100      	movs	r1, #0
 8013b3a:	2a45      	cmp	r2, #69	; 0x45
 8013b3c:	d000      	beq.n	8013b40 <_strtod_l+0x18c>
 8013b3e:	e0bf      	b.n	8013cc0 <_strtod_l+0x30c>
 8013b40:	9b05      	ldr	r3, [sp, #20]
 8013b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b44:	4303      	orrs	r3, r0
 8013b46:	4313      	orrs	r3, r2
 8013b48:	428b      	cmp	r3, r1
 8013b4a:	d094      	beq.n	8013a76 <_strtod_l+0xc2>
 8013b4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b4e:	9306      	str	r3, [sp, #24]
 8013b50:	3301      	adds	r3, #1
 8013b52:	9321      	str	r3, [sp, #132]	; 0x84
 8013b54:	9b06      	ldr	r3, [sp, #24]
 8013b56:	785b      	ldrb	r3, [r3, #1]
 8013b58:	2b2b      	cmp	r3, #43	; 0x2b
 8013b5a:	d100      	bne.n	8013b5e <_strtod_l+0x1aa>
 8013b5c:	e082      	b.n	8013c64 <_strtod_l+0x2b0>
 8013b5e:	000c      	movs	r4, r1
 8013b60:	2b2d      	cmp	r3, #45	; 0x2d
 8013b62:	d105      	bne.n	8013b70 <_strtod_l+0x1bc>
 8013b64:	2401      	movs	r4, #1
 8013b66:	9b06      	ldr	r3, [sp, #24]
 8013b68:	3302      	adds	r3, #2
 8013b6a:	9321      	str	r3, [sp, #132]	; 0x84
 8013b6c:	9b06      	ldr	r3, [sp, #24]
 8013b6e:	789b      	ldrb	r3, [r3, #2]
 8013b70:	001a      	movs	r2, r3
 8013b72:	3a30      	subs	r2, #48	; 0x30
 8013b74:	2a09      	cmp	r2, #9
 8013b76:	d800      	bhi.n	8013b7a <_strtod_l+0x1c6>
 8013b78:	e084      	b.n	8013c84 <_strtod_l+0x2d0>
 8013b7a:	9a06      	ldr	r2, [sp, #24]
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	9221      	str	r2, [sp, #132]	; 0x84
 8013b80:	e09e      	b.n	8013cc0 <_strtod_l+0x30c>
 8013b82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013b84:	2908      	cmp	r1, #8
 8013b86:	dc09      	bgt.n	8013b9c <_strtod_l+0x1e8>
 8013b88:	9908      	ldr	r1, [sp, #32]
 8013b8a:	4351      	muls	r1, r2
 8013b8c:	18cb      	adds	r3, r1, r3
 8013b8e:	9308      	str	r3, [sp, #32]
 8013b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b92:	3001      	adds	r0, #1
 8013b94:	3301      	adds	r3, #1
 8013b96:	930a      	str	r3, [sp, #40]	; 0x28
 8013b98:	9021      	str	r0, [sp, #132]	; 0x84
 8013b9a:	e7b6      	b.n	8013b0a <_strtod_l+0x156>
 8013b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b9e:	4351      	muls	r1, r2
 8013ba0:	18cb      	adds	r3, r1, r3
 8013ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ba4:	e7f4      	b.n	8013b90 <_strtod_l+0x1dc>
 8013ba6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013ba8:	9b05      	ldr	r3, [sp, #20]
 8013baa:	4694      	mov	ip, r2
 8013bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bae:	4463      	add	r3, ip
 8013bb0:	9321      	str	r3, [sp, #132]	; 0x84
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	2a00      	cmp	r2, #0
 8013bb6:	d036      	beq.n	8013c26 <_strtod_l+0x272>
 8013bb8:	4684      	mov	ip, r0
 8013bba:	9205      	str	r2, [sp, #20]
 8013bbc:	001a      	movs	r2, r3
 8013bbe:	3a30      	subs	r2, #48	; 0x30
 8013bc0:	2a09      	cmp	r2, #9
 8013bc2:	d912      	bls.n	8013bea <_strtod_l+0x236>
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	9207      	str	r2, [sp, #28]
 8013bc8:	e7b2      	b.n	8013b30 <_strtod_l+0x17c>
 8013bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bcc:	3001      	adds	r0, #1
 8013bce:	1c5a      	adds	r2, r3, #1
 8013bd0:	9221      	str	r2, [sp, #132]	; 0x84
 8013bd2:	785b      	ldrb	r3, [r3, #1]
 8013bd4:	2b30      	cmp	r3, #48	; 0x30
 8013bd6:	d0f8      	beq.n	8013bca <_strtod_l+0x216>
 8013bd8:	001a      	movs	r2, r3
 8013bda:	3a31      	subs	r2, #49	; 0x31
 8013bdc:	2a08      	cmp	r2, #8
 8013bde:	d83c      	bhi.n	8013c5a <_strtod_l+0x2a6>
 8013be0:	4684      	mov	ip, r0
 8013be2:	2000      	movs	r0, #0
 8013be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013be6:	9005      	str	r0, [sp, #20]
 8013be8:	9212      	str	r2, [sp, #72]	; 0x48
 8013bea:	3b30      	subs	r3, #48	; 0x30
 8013bec:	1c42      	adds	r2, r0, #1
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d013      	beq.n	8013c1a <_strtod_l+0x266>
 8013bf2:	210a      	movs	r1, #10
 8013bf4:	4494      	add	ip, r2
 8013bf6:	9a05      	ldr	r2, [sp, #20]
 8013bf8:	1885      	adds	r5, r0, r2
 8013bfa:	42aa      	cmp	r2, r5
 8013bfc:	d115      	bne.n	8013c2a <_strtod_l+0x276>
 8013bfe:	9905      	ldr	r1, [sp, #20]
 8013c00:	9a05      	ldr	r2, [sp, #20]
 8013c02:	3101      	adds	r1, #1
 8013c04:	1809      	adds	r1, r1, r0
 8013c06:	1812      	adds	r2, r2, r0
 8013c08:	9105      	str	r1, [sp, #20]
 8013c0a:	2a08      	cmp	r2, #8
 8013c0c:	dc1b      	bgt.n	8013c46 <_strtod_l+0x292>
 8013c0e:	220a      	movs	r2, #10
 8013c10:	9908      	ldr	r1, [sp, #32]
 8013c12:	434a      	muls	r2, r1
 8013c14:	189b      	adds	r3, r3, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	9308      	str	r3, [sp, #32]
 8013c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c1c:	0010      	movs	r0, r2
 8013c1e:	1c59      	adds	r1, r3, #1
 8013c20:	9121      	str	r1, [sp, #132]	; 0x84
 8013c22:	785b      	ldrb	r3, [r3, #1]
 8013c24:	e7ca      	b.n	8013bbc <_strtod_l+0x208>
 8013c26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c28:	e7d4      	b.n	8013bd4 <_strtod_l+0x220>
 8013c2a:	1c54      	adds	r4, r2, #1
 8013c2c:	2a08      	cmp	r2, #8
 8013c2e:	dc04      	bgt.n	8013c3a <_strtod_l+0x286>
 8013c30:	9a08      	ldr	r2, [sp, #32]
 8013c32:	434a      	muls	r2, r1
 8013c34:	9208      	str	r2, [sp, #32]
 8013c36:	0022      	movs	r2, r4
 8013c38:	e7df      	b.n	8013bfa <_strtod_l+0x246>
 8013c3a:	2c10      	cmp	r4, #16
 8013c3c:	dcfb      	bgt.n	8013c36 <_strtod_l+0x282>
 8013c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c40:	434a      	muls	r2, r1
 8013c42:	920b      	str	r2, [sp, #44]	; 0x2c
 8013c44:	e7f7      	b.n	8013c36 <_strtod_l+0x282>
 8013c46:	9905      	ldr	r1, [sp, #20]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	2910      	cmp	r1, #16
 8013c4c:	dce5      	bgt.n	8013c1a <_strtod_l+0x266>
 8013c4e:	210a      	movs	r1, #10
 8013c50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013c52:	4341      	muls	r1, r0
 8013c54:	185b      	adds	r3, r3, r1
 8013c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c58:	e7df      	b.n	8013c1a <_strtod_l+0x266>
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	4694      	mov	ip, r2
 8013c5e:	9205      	str	r2, [sp, #20]
 8013c60:	3201      	adds	r2, #1
 8013c62:	e7b0      	b.n	8013bc6 <_strtod_l+0x212>
 8013c64:	000c      	movs	r4, r1
 8013c66:	e77e      	b.n	8013b66 <_strtod_l+0x1b2>
 8013c68:	0801980c 	.word	0x0801980c
 8013c6c:	ffefffff 	.word	0xffefffff
 8013c70:	00000433 	.word	0x00000433
 8013c74:	7ff00000 	.word	0x7ff00000
 8013c78:	7fffffff 	.word	0x7fffffff
 8013c7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c7e:	1c5a      	adds	r2, r3, #1
 8013c80:	9221      	str	r2, [sp, #132]	; 0x84
 8013c82:	785b      	ldrb	r3, [r3, #1]
 8013c84:	2b30      	cmp	r3, #48	; 0x30
 8013c86:	d0f9      	beq.n	8013c7c <_strtod_l+0x2c8>
 8013c88:	001a      	movs	r2, r3
 8013c8a:	3a31      	subs	r2, #49	; 0x31
 8013c8c:	2100      	movs	r1, #0
 8013c8e:	2a08      	cmp	r2, #8
 8013c90:	d816      	bhi.n	8013cc0 <_strtod_l+0x30c>
 8013c92:	3b30      	subs	r3, #48	; 0x30
 8013c94:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013c96:	930e      	str	r3, [sp, #56]	; 0x38
 8013c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c9a:	1c59      	adds	r1, r3, #1
 8013c9c:	9121      	str	r1, [sp, #132]	; 0x84
 8013c9e:	785b      	ldrb	r3, [r3, #1]
 8013ca0:	001a      	movs	r2, r3
 8013ca2:	3a30      	subs	r2, #48	; 0x30
 8013ca4:	2a09      	cmp	r2, #9
 8013ca6:	d932      	bls.n	8013d0e <_strtod_l+0x35a>
 8013ca8:	1b4a      	subs	r2, r1, r5
 8013caa:	4dad      	ldr	r5, [pc, #692]	; (8013f60 <_strtod_l+0x5ac>)
 8013cac:	0029      	movs	r1, r5
 8013cae:	2a08      	cmp	r2, #8
 8013cb0:	dc03      	bgt.n	8013cba <_strtod_l+0x306>
 8013cb2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013cb4:	42a9      	cmp	r1, r5
 8013cb6:	dd00      	ble.n	8013cba <_strtod_l+0x306>
 8013cb8:	0029      	movs	r1, r5
 8013cba:	2c00      	cmp	r4, #0
 8013cbc:	d000      	beq.n	8013cc0 <_strtod_l+0x30c>
 8013cbe:	4249      	negs	r1, r1
 8013cc0:	9a05      	ldr	r2, [sp, #20]
 8013cc2:	2a00      	cmp	r2, #0
 8013cc4:	d149      	bne.n	8013d5a <_strtod_l+0x3a6>
 8013cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cc8:	4310      	orrs	r0, r2
 8013cca:	d000      	beq.n	8013cce <_strtod_l+0x31a>
 8013ccc:	e6b3      	b.n	8013a36 <_strtod_l+0x82>
 8013cce:	9a07      	ldr	r2, [sp, #28]
 8013cd0:	2a00      	cmp	r2, #0
 8013cd2:	d000      	beq.n	8013cd6 <_strtod_l+0x322>
 8013cd4:	e6cf      	b.n	8013a76 <_strtod_l+0xc2>
 8013cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8013cd8:	d025      	beq.n	8013d26 <_strtod_l+0x372>
 8013cda:	dc1f      	bgt.n	8013d1c <_strtod_l+0x368>
 8013cdc:	2b49      	cmp	r3, #73	; 0x49
 8013cde:	d000      	beq.n	8013ce2 <_strtod_l+0x32e>
 8013ce0:	e6c9      	b.n	8013a76 <_strtod_l+0xc2>
 8013ce2:	49a0      	ldr	r1, [pc, #640]	; (8013f64 <_strtod_l+0x5b0>)
 8013ce4:	a821      	add	r0, sp, #132	; 0x84
 8013ce6:	f001 fe83 	bl	80159f0 <__match>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	d100      	bne.n	8013cf0 <_strtod_l+0x33c>
 8013cee:	e6c2      	b.n	8013a76 <_strtod_l+0xc2>
 8013cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cf2:	499d      	ldr	r1, [pc, #628]	; (8013f68 <_strtod_l+0x5b4>)
 8013cf4:	3b01      	subs	r3, #1
 8013cf6:	a821      	add	r0, sp, #132	; 0x84
 8013cf8:	9321      	str	r3, [sp, #132]	; 0x84
 8013cfa:	f001 fe79 	bl	80159f0 <__match>
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d102      	bne.n	8013d08 <_strtod_l+0x354>
 8013d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d04:	3301      	adds	r3, #1
 8013d06:	9321      	str	r3, [sp, #132]	; 0x84
 8013d08:	4f98      	ldr	r7, [pc, #608]	; (8013f6c <_strtod_l+0x5b8>)
 8013d0a:	2600      	movs	r6, #0
 8013d0c:	e693      	b.n	8013a36 <_strtod_l+0x82>
 8013d0e:	220a      	movs	r2, #10
 8013d10:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013d12:	434a      	muls	r2, r1
 8013d14:	18d2      	adds	r2, r2, r3
 8013d16:	3a30      	subs	r2, #48	; 0x30
 8013d18:	920e      	str	r2, [sp, #56]	; 0x38
 8013d1a:	e7bd      	b.n	8013c98 <_strtod_l+0x2e4>
 8013d1c:	2b69      	cmp	r3, #105	; 0x69
 8013d1e:	d0e0      	beq.n	8013ce2 <_strtod_l+0x32e>
 8013d20:	2b6e      	cmp	r3, #110	; 0x6e
 8013d22:	d000      	beq.n	8013d26 <_strtod_l+0x372>
 8013d24:	e6a7      	b.n	8013a76 <_strtod_l+0xc2>
 8013d26:	4992      	ldr	r1, [pc, #584]	; (8013f70 <_strtod_l+0x5bc>)
 8013d28:	a821      	add	r0, sp, #132	; 0x84
 8013d2a:	f001 fe61 	bl	80159f0 <__match>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d100      	bne.n	8013d34 <_strtod_l+0x380>
 8013d32:	e6a0      	b.n	8013a76 <_strtod_l+0xc2>
 8013d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	2b28      	cmp	r3, #40	; 0x28
 8013d3a:	d10c      	bne.n	8013d56 <_strtod_l+0x3a2>
 8013d3c:	aa24      	add	r2, sp, #144	; 0x90
 8013d3e:	498d      	ldr	r1, [pc, #564]	; (8013f74 <_strtod_l+0x5c0>)
 8013d40:	a821      	add	r0, sp, #132	; 0x84
 8013d42:	f001 fe69 	bl	8015a18 <__hexnan>
 8013d46:	2805      	cmp	r0, #5
 8013d48:	d105      	bne.n	8013d56 <_strtod_l+0x3a2>
 8013d4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013d4c:	4a87      	ldr	r2, [pc, #540]	; (8013f6c <_strtod_l+0x5b8>)
 8013d4e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013d50:	431a      	orrs	r2, r3
 8013d52:	0017      	movs	r7, r2
 8013d54:	e66f      	b.n	8013a36 <_strtod_l+0x82>
 8013d56:	4f88      	ldr	r7, [pc, #544]	; (8013f78 <_strtod_l+0x5c4>)
 8013d58:	e7d7      	b.n	8013d0a <_strtod_l+0x356>
 8013d5a:	4663      	mov	r3, ip
 8013d5c:	1acb      	subs	r3, r1, r3
 8013d5e:	9307      	str	r3, [sp, #28]
 8013d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <_strtod_l+0x3b6>
 8013d66:	9b05      	ldr	r3, [sp, #20]
 8013d68:	930a      	str	r3, [sp, #40]	; 0x28
 8013d6a:	9c05      	ldr	r4, [sp, #20]
 8013d6c:	2c10      	cmp	r4, #16
 8013d6e:	dd00      	ble.n	8013d72 <_strtod_l+0x3be>
 8013d70:	2410      	movs	r4, #16
 8013d72:	9808      	ldr	r0, [sp, #32]
 8013d74:	f7ee fdb8 	bl	80028e8 <__aeabi_ui2d>
 8013d78:	9b05      	ldr	r3, [sp, #20]
 8013d7a:	0006      	movs	r6, r0
 8013d7c:	000f      	movs	r7, r1
 8013d7e:	2b09      	cmp	r3, #9
 8013d80:	dc15      	bgt.n	8013dae <_strtod_l+0x3fa>
 8013d82:	9b07      	ldr	r3, [sp, #28]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d100      	bne.n	8013d8a <_strtod_l+0x3d6>
 8013d88:	e655      	b.n	8013a36 <_strtod_l+0x82>
 8013d8a:	9b07      	ldr	r3, [sp, #28]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	dc00      	bgt.n	8013d92 <_strtod_l+0x3de>
 8013d90:	e07d      	b.n	8013e8e <_strtod_l+0x4da>
 8013d92:	2b16      	cmp	r3, #22
 8013d94:	dc62      	bgt.n	8013e5c <_strtod_l+0x4a8>
 8013d96:	00dc      	lsls	r4, r3, #3
 8013d98:	4b78      	ldr	r3, [pc, #480]	; (8013f7c <_strtod_l+0x5c8>)
 8013d9a:	0032      	movs	r2, r6
 8013d9c:	1919      	adds	r1, r3, r4
 8013d9e:	003b      	movs	r3, r7
 8013da0:	6808      	ldr	r0, [r1, #0]
 8013da2:	6849      	ldr	r1, [r1, #4]
 8013da4:	f7ed ff5a 	bl	8001c5c <__aeabi_dmul>
 8013da8:	0006      	movs	r6, r0
 8013daa:	000f      	movs	r7, r1
 8013dac:	e643      	b.n	8013a36 <_strtod_l+0x82>
 8013dae:	0022      	movs	r2, r4
 8013db0:	4b72      	ldr	r3, [pc, #456]	; (8013f7c <_strtod_l+0x5c8>)
 8013db2:	3a09      	subs	r2, #9
 8013db4:	00d2      	lsls	r2, r2, #3
 8013db6:	189b      	adds	r3, r3, r2
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	f7ed ff4e 	bl	8001c5c <__aeabi_dmul>
 8013dc0:	0006      	movs	r6, r0
 8013dc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013dc4:	000f      	movs	r7, r1
 8013dc6:	f7ee fd8f 	bl	80028e8 <__aeabi_ui2d>
 8013dca:	000b      	movs	r3, r1
 8013dcc:	0002      	movs	r2, r0
 8013dce:	0039      	movs	r1, r7
 8013dd0:	0030      	movs	r0, r6
 8013dd2:	f7ed f81d 	bl	8000e10 <__aeabi_dadd>
 8013dd6:	9b05      	ldr	r3, [sp, #20]
 8013dd8:	0006      	movs	r6, r0
 8013dda:	000f      	movs	r7, r1
 8013ddc:	2b0f      	cmp	r3, #15
 8013dde:	ddd0      	ble.n	8013d82 <_strtod_l+0x3ce>
 8013de0:	9b05      	ldr	r3, [sp, #20]
 8013de2:	1b1c      	subs	r4, r3, r4
 8013de4:	9b07      	ldr	r3, [sp, #28]
 8013de6:	18e4      	adds	r4, r4, r3
 8013de8:	2c00      	cmp	r4, #0
 8013dea:	dc00      	bgt.n	8013dee <_strtod_l+0x43a>
 8013dec:	e094      	b.n	8013f18 <_strtod_l+0x564>
 8013dee:	230f      	movs	r3, #15
 8013df0:	4023      	ands	r3, r4
 8013df2:	d00a      	beq.n	8013e0a <_strtod_l+0x456>
 8013df4:	4961      	ldr	r1, [pc, #388]	; (8013f7c <_strtod_l+0x5c8>)
 8013df6:	00db      	lsls	r3, r3, #3
 8013df8:	18c9      	adds	r1, r1, r3
 8013dfa:	0032      	movs	r2, r6
 8013dfc:	6808      	ldr	r0, [r1, #0]
 8013dfe:	6849      	ldr	r1, [r1, #4]
 8013e00:	003b      	movs	r3, r7
 8013e02:	f7ed ff2b 	bl	8001c5c <__aeabi_dmul>
 8013e06:	0006      	movs	r6, r0
 8013e08:	000f      	movs	r7, r1
 8013e0a:	230f      	movs	r3, #15
 8013e0c:	439c      	bics	r4, r3
 8013e0e:	d06e      	beq.n	8013eee <_strtod_l+0x53a>
 8013e10:	3326      	adds	r3, #38	; 0x26
 8013e12:	33ff      	adds	r3, #255	; 0xff
 8013e14:	429c      	cmp	r4, r3
 8013e16:	dd48      	ble.n	8013eaa <_strtod_l+0x4f6>
 8013e18:	2400      	movs	r4, #0
 8013e1a:	9405      	str	r4, [sp, #20]
 8013e1c:	940b      	str	r4, [sp, #44]	; 0x2c
 8013e1e:	940a      	str	r4, [sp, #40]	; 0x28
 8013e20:	2322      	movs	r3, #34	; 0x22
 8013e22:	2600      	movs	r6, #0
 8013e24:	9a04      	ldr	r2, [sp, #16]
 8013e26:	4f51      	ldr	r7, [pc, #324]	; (8013f6c <_strtod_l+0x5b8>)
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e2c:	42b3      	cmp	r3, r6
 8013e2e:	d100      	bne.n	8013e32 <_strtod_l+0x47e>
 8013e30:	e601      	b.n	8013a36 <_strtod_l+0x82>
 8013e32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013e34:	9804      	ldr	r0, [sp, #16]
 8013e36:	f001 feda 	bl	8015bee <_Bfree>
 8013e3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e3c:	9804      	ldr	r0, [sp, #16]
 8013e3e:	f001 fed6 	bl	8015bee <_Bfree>
 8013e42:	9905      	ldr	r1, [sp, #20]
 8013e44:	9804      	ldr	r0, [sp, #16]
 8013e46:	f001 fed2 	bl	8015bee <_Bfree>
 8013e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e4c:	9804      	ldr	r0, [sp, #16]
 8013e4e:	f001 fece 	bl	8015bee <_Bfree>
 8013e52:	0021      	movs	r1, r4
 8013e54:	9804      	ldr	r0, [sp, #16]
 8013e56:	f001 feca 	bl	8015bee <_Bfree>
 8013e5a:	e5ec      	b.n	8013a36 <_strtod_l+0x82>
 8013e5c:	2325      	movs	r3, #37	; 0x25
 8013e5e:	9a05      	ldr	r2, [sp, #20]
 8013e60:	1a9b      	subs	r3, r3, r2
 8013e62:	9a07      	ldr	r2, [sp, #28]
 8013e64:	4293      	cmp	r3, r2
 8013e66:	dbbb      	blt.n	8013de0 <_strtod_l+0x42c>
 8013e68:	230f      	movs	r3, #15
 8013e6a:	9a05      	ldr	r2, [sp, #20]
 8013e6c:	4c43      	ldr	r4, [pc, #268]	; (8013f7c <_strtod_l+0x5c8>)
 8013e6e:	1a9d      	subs	r5, r3, r2
 8013e70:	00e9      	lsls	r1, r5, #3
 8013e72:	1861      	adds	r1, r4, r1
 8013e74:	0032      	movs	r2, r6
 8013e76:	6808      	ldr	r0, [r1, #0]
 8013e78:	6849      	ldr	r1, [r1, #4]
 8013e7a:	003b      	movs	r3, r7
 8013e7c:	f7ed feee 	bl	8001c5c <__aeabi_dmul>
 8013e80:	9b07      	ldr	r3, [sp, #28]
 8013e82:	1b5e      	subs	r6, r3, r5
 8013e84:	00f6      	lsls	r6, r6, #3
 8013e86:	19a6      	adds	r6, r4, r6
 8013e88:	6832      	ldr	r2, [r6, #0]
 8013e8a:	6873      	ldr	r3, [r6, #4]
 8013e8c:	e78a      	b.n	8013da4 <_strtod_l+0x3f0>
 8013e8e:	9b07      	ldr	r3, [sp, #28]
 8013e90:	3316      	adds	r3, #22
 8013e92:	dba5      	blt.n	8013de0 <_strtod_l+0x42c>
 8013e94:	9b07      	ldr	r3, [sp, #28]
 8013e96:	0030      	movs	r0, r6
 8013e98:	00da      	lsls	r2, r3, #3
 8013e9a:	4b38      	ldr	r3, [pc, #224]	; (8013f7c <_strtod_l+0x5c8>)
 8013e9c:	0039      	movs	r1, r7
 8013e9e:	1a9b      	subs	r3, r3, r2
 8013ea0:	681a      	ldr	r2, [r3, #0]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	f7ed fad0 	bl	8001448 <__aeabi_ddiv>
 8013ea8:	e77e      	b.n	8013da8 <_strtod_l+0x3f4>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	0030      	movs	r0, r6
 8013eae:	0039      	movs	r1, r7
 8013eb0:	001d      	movs	r5, r3
 8013eb2:	1124      	asrs	r4, r4, #4
 8013eb4:	2c01      	cmp	r4, #1
 8013eb6:	dc1d      	bgt.n	8013ef4 <_strtod_l+0x540>
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <_strtod_l+0x50c>
 8013ebc:	0006      	movs	r6, r0
 8013ebe:	000f      	movs	r7, r1
 8013ec0:	4b2f      	ldr	r3, [pc, #188]	; (8013f80 <_strtod_l+0x5cc>)
 8013ec2:	00ed      	lsls	r5, r5, #3
 8013ec4:	18ff      	adds	r7, r7, r3
 8013ec6:	4b2f      	ldr	r3, [pc, #188]	; (8013f84 <_strtod_l+0x5d0>)
 8013ec8:	0032      	movs	r2, r6
 8013eca:	195d      	adds	r5, r3, r5
 8013ecc:	6828      	ldr	r0, [r5, #0]
 8013ece:	6869      	ldr	r1, [r5, #4]
 8013ed0:	003b      	movs	r3, r7
 8013ed2:	f7ed fec3 	bl	8001c5c <__aeabi_dmul>
 8013ed6:	4b25      	ldr	r3, [pc, #148]	; (8013f6c <_strtod_l+0x5b8>)
 8013ed8:	4a2b      	ldr	r2, [pc, #172]	; (8013f88 <_strtod_l+0x5d4>)
 8013eda:	0006      	movs	r6, r0
 8013edc:	400b      	ands	r3, r1
 8013ede:	4293      	cmp	r3, r2
 8013ee0:	d89a      	bhi.n	8013e18 <_strtod_l+0x464>
 8013ee2:	4a2a      	ldr	r2, [pc, #168]	; (8013f8c <_strtod_l+0x5d8>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d913      	bls.n	8013f10 <_strtod_l+0x55c>
 8013ee8:	2601      	movs	r6, #1
 8013eea:	4f29      	ldr	r7, [pc, #164]	; (8013f90 <_strtod_l+0x5dc>)
 8013eec:	4276      	negs	r6, r6
 8013eee:	2300      	movs	r3, #0
 8013ef0:	9306      	str	r3, [sp, #24]
 8013ef2:	e07b      	b.n	8013fec <_strtod_l+0x638>
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	4214      	tst	r4, r2
 8013ef8:	d007      	beq.n	8013f0a <_strtod_l+0x556>
 8013efa:	4a22      	ldr	r2, [pc, #136]	; (8013f84 <_strtod_l+0x5d0>)
 8013efc:	00eb      	lsls	r3, r5, #3
 8013efe:	189b      	adds	r3, r3, r2
 8013f00:	681a      	ldr	r2, [r3, #0]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	f7ed feaa 	bl	8001c5c <__aeabi_dmul>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	3501      	adds	r5, #1
 8013f0c:	1064      	asrs	r4, r4, #1
 8013f0e:	e7d1      	b.n	8013eb4 <_strtod_l+0x500>
 8013f10:	23d4      	movs	r3, #212	; 0xd4
 8013f12:	049b      	lsls	r3, r3, #18
 8013f14:	18cf      	adds	r7, r1, r3
 8013f16:	e7ea      	b.n	8013eee <_strtod_l+0x53a>
 8013f18:	2c00      	cmp	r4, #0
 8013f1a:	d0e8      	beq.n	8013eee <_strtod_l+0x53a>
 8013f1c:	230f      	movs	r3, #15
 8013f1e:	4264      	negs	r4, r4
 8013f20:	4023      	ands	r3, r4
 8013f22:	d00a      	beq.n	8013f3a <_strtod_l+0x586>
 8013f24:	4a15      	ldr	r2, [pc, #84]	; (8013f7c <_strtod_l+0x5c8>)
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	18d3      	adds	r3, r2, r3
 8013f2a:	0030      	movs	r0, r6
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	0039      	movs	r1, r7
 8013f32:	f7ed fa89 	bl	8001448 <__aeabi_ddiv>
 8013f36:	0006      	movs	r6, r0
 8013f38:	000f      	movs	r7, r1
 8013f3a:	1124      	asrs	r4, r4, #4
 8013f3c:	d0d7      	beq.n	8013eee <_strtod_l+0x53a>
 8013f3e:	2c1f      	cmp	r4, #31
 8013f40:	dd28      	ble.n	8013f94 <_strtod_l+0x5e0>
 8013f42:	2400      	movs	r4, #0
 8013f44:	9405      	str	r4, [sp, #20]
 8013f46:	940b      	str	r4, [sp, #44]	; 0x2c
 8013f48:	940a      	str	r4, [sp, #40]	; 0x28
 8013f4a:	2322      	movs	r3, #34	; 0x22
 8013f4c:	9a04      	ldr	r2, [sp, #16]
 8013f4e:	2600      	movs	r6, #0
 8013f50:	6013      	str	r3, [r2, #0]
 8013f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f54:	2700      	movs	r7, #0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d000      	beq.n	8013f5c <_strtod_l+0x5a8>
 8013f5a:	e76a      	b.n	8013e32 <_strtod_l+0x47e>
 8013f5c:	e56b      	b.n	8013a36 <_strtod_l+0x82>
 8013f5e:	46c0      	nop			; (mov r8, r8)
 8013f60:	00004e1f 	.word	0x00004e1f
 8013f64:	080197db 	.word	0x080197db
 8013f68:	08019964 	.word	0x08019964
 8013f6c:	7ff00000 	.word	0x7ff00000
 8013f70:	080197e3 	.word	0x080197e3
 8013f74:	08019820 	.word	0x08019820
 8013f78:	fff80000 	.word	0xfff80000
 8013f7c:	08019998 	.word	0x08019998
 8013f80:	fcb00000 	.word	0xfcb00000
 8013f84:	08019970 	.word	0x08019970
 8013f88:	7ca00000 	.word	0x7ca00000
 8013f8c:	7c900000 	.word	0x7c900000
 8013f90:	7fefffff 	.word	0x7fefffff
 8013f94:	2310      	movs	r3, #16
 8013f96:	4023      	ands	r3, r4
 8013f98:	9306      	str	r3, [sp, #24]
 8013f9a:	d001      	beq.n	8013fa0 <_strtod_l+0x5ec>
 8013f9c:	236a      	movs	r3, #106	; 0x6a
 8013f9e:	9306      	str	r3, [sp, #24]
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	0030      	movs	r0, r6
 8013fa4:	0039      	movs	r1, r7
 8013fa6:	001d      	movs	r5, r3
 8013fa8:	2c00      	cmp	r4, #0
 8013faa:	dd00      	ble.n	8013fae <_strtod_l+0x5fa>
 8013fac:	e10e      	b.n	80141cc <_strtod_l+0x818>
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d001      	beq.n	8013fb6 <_strtod_l+0x602>
 8013fb2:	0006      	movs	r6, r0
 8013fb4:	000f      	movs	r7, r1
 8013fb6:	9b06      	ldr	r3, [sp, #24]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00f      	beq.n	8013fdc <_strtod_l+0x628>
 8013fbc:	236b      	movs	r3, #107	; 0x6b
 8013fbe:	0079      	lsls	r1, r7, #1
 8013fc0:	0d49      	lsrs	r1, r1, #21
 8013fc2:	003a      	movs	r2, r7
 8013fc4:	1a5b      	subs	r3, r3, r1
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	dd08      	ble.n	8013fdc <_strtod_l+0x628>
 8013fca:	2b1f      	cmp	r3, #31
 8013fcc:	dc00      	bgt.n	8013fd0 <_strtod_l+0x61c>
 8013fce:	e112      	b.n	80141f6 <_strtod_l+0x842>
 8013fd0:	2600      	movs	r6, #0
 8013fd2:	2b34      	cmp	r3, #52	; 0x34
 8013fd4:	dc00      	bgt.n	8013fd8 <_strtod_l+0x624>
 8013fd6:	e107      	b.n	80141e8 <_strtod_l+0x834>
 8013fd8:	27dc      	movs	r7, #220	; 0xdc
 8013fda:	04bf      	lsls	r7, r7, #18
 8013fdc:	2200      	movs	r2, #0
 8013fde:	2300      	movs	r3, #0
 8013fe0:	0030      	movs	r0, r6
 8013fe2:	0039      	movs	r1, r7
 8013fe4:	f7ec fa30 	bl	8000448 <__aeabi_dcmpeq>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d1aa      	bne.n	8013f42 <_strtod_l+0x58e>
 8013fec:	9b08      	ldr	r3, [sp, #32]
 8013fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ff0:	9300      	str	r3, [sp, #0]
 8013ff2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ff4:	9b05      	ldr	r3, [sp, #20]
 8013ff6:	9804      	ldr	r0, [sp, #16]
 8013ff8:	f001 fe50 	bl	8015c9c <__s2b>
 8013ffc:	900b      	str	r0, [sp, #44]	; 0x2c
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d100      	bne.n	8014004 <_strtod_l+0x650>
 8014002:	e709      	b.n	8013e18 <_strtod_l+0x464>
 8014004:	9b07      	ldr	r3, [sp, #28]
 8014006:	9a07      	ldr	r2, [sp, #28]
 8014008:	17db      	asrs	r3, r3, #31
 801400a:	4252      	negs	r2, r2
 801400c:	4013      	ands	r3, r2
 801400e:	9315      	str	r3, [sp, #84]	; 0x54
 8014010:	9b07      	ldr	r3, [sp, #28]
 8014012:	2400      	movs	r4, #0
 8014014:	43db      	mvns	r3, r3
 8014016:	9a07      	ldr	r2, [sp, #28]
 8014018:	17db      	asrs	r3, r3, #31
 801401a:	401a      	ands	r2, r3
 801401c:	921c      	str	r2, [sp, #112]	; 0x70
 801401e:	9405      	str	r4, [sp, #20]
 8014020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014022:	9804      	ldr	r0, [sp, #16]
 8014024:	6859      	ldr	r1, [r3, #4]
 8014026:	f001 fdaa 	bl	8015b7e <_Balloc>
 801402a:	900a      	str	r0, [sp, #40]	; 0x28
 801402c:	2800      	cmp	r0, #0
 801402e:	d100      	bne.n	8014032 <_strtod_l+0x67e>
 8014030:	e6f6      	b.n	8013e20 <_strtod_l+0x46c>
 8014032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014036:	691b      	ldr	r3, [r3, #16]
 8014038:	310c      	adds	r1, #12
 801403a:	1c9a      	adds	r2, r3, #2
 801403c:	0092      	lsls	r2, r2, #2
 801403e:	300c      	adds	r0, #12
 8014040:	9308      	str	r3, [sp, #32]
 8014042:	f7fe fe9e 	bl	8012d82 <memcpy>
 8014046:	ab24      	add	r3, sp, #144	; 0x90
 8014048:	9301      	str	r3, [sp, #4]
 801404a:	ab23      	add	r3, sp, #140	; 0x8c
 801404c:	9300      	str	r3, [sp, #0]
 801404e:	0032      	movs	r2, r6
 8014050:	003b      	movs	r3, r7
 8014052:	9804      	ldr	r0, [sp, #16]
 8014054:	960e      	str	r6, [sp, #56]	; 0x38
 8014056:	970f      	str	r7, [sp, #60]	; 0x3c
 8014058:	f002 f8d4 	bl	8016204 <__d2b>
 801405c:	9022      	str	r0, [sp, #136]	; 0x88
 801405e:	2800      	cmp	r0, #0
 8014060:	d100      	bne.n	8014064 <_strtod_l+0x6b0>
 8014062:	e6dd      	b.n	8013e20 <_strtod_l+0x46c>
 8014064:	2101      	movs	r1, #1
 8014066:	9804      	ldr	r0, [sp, #16]
 8014068:	f001 fe9f 	bl	8015daa <__i2b>
 801406c:	9005      	str	r0, [sp, #20]
 801406e:	2800      	cmp	r0, #0
 8014070:	d100      	bne.n	8014074 <_strtod_l+0x6c0>
 8014072:	e6d5      	b.n	8013e20 <_strtod_l+0x46c>
 8014074:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014076:	2b00      	cmp	r3, #0
 8014078:	da00      	bge.n	801407c <_strtod_l+0x6c8>
 801407a:	e0c1      	b.n	8014200 <_strtod_l+0x84c>
 801407c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801407e:	189d      	adds	r5, r3, r2
 8014080:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014082:	4694      	mov	ip, r2
 8014084:	9906      	ldr	r1, [sp, #24]
 8014086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014088:	1a5b      	subs	r3, r3, r1
 801408a:	2136      	movs	r1, #54	; 0x36
 801408c:	189b      	adds	r3, r3, r2
 801408e:	1a8a      	subs	r2, r1, r2
 8014090:	49b2      	ldr	r1, [pc, #712]	; (801435c <_strtod_l+0x9a8>)
 8014092:	3b01      	subs	r3, #1
 8014094:	2001      	movs	r0, #1
 8014096:	428b      	cmp	r3, r1
 8014098:	db00      	blt.n	801409c <_strtod_l+0x6e8>
 801409a:	e0bd      	b.n	8014218 <_strtod_l+0x864>
 801409c:	1ac9      	subs	r1, r1, r3
 801409e:	1a52      	subs	r2, r2, r1
 80140a0:	291f      	cmp	r1, #31
 80140a2:	dd00      	ble.n	80140a6 <_strtod_l+0x6f2>
 80140a4:	e0b1      	b.n	801420a <_strtod_l+0x856>
 80140a6:	4088      	lsls	r0, r1
 80140a8:	2300      	movs	r3, #0
 80140aa:	9014      	str	r0, [sp, #80]	; 0x50
 80140ac:	9310      	str	r3, [sp, #64]	; 0x40
 80140ae:	18ab      	adds	r3, r5, r2
 80140b0:	9308      	str	r3, [sp, #32]
 80140b2:	0013      	movs	r3, r2
 80140b4:	9a06      	ldr	r2, [sp, #24]
 80140b6:	4463      	add	r3, ip
 80140b8:	18d3      	adds	r3, r2, r3
 80140ba:	9a08      	ldr	r2, [sp, #32]
 80140bc:	930c      	str	r3, [sp, #48]	; 0x30
 80140be:	002b      	movs	r3, r5
 80140c0:	4295      	cmp	r5, r2
 80140c2:	dd00      	ble.n	80140c6 <_strtod_l+0x712>
 80140c4:	0013      	movs	r3, r2
 80140c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140c8:	4293      	cmp	r3, r2
 80140ca:	dd00      	ble.n	80140ce <_strtod_l+0x71a>
 80140cc:	0013      	movs	r3, r2
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	dd06      	ble.n	80140e0 <_strtod_l+0x72c>
 80140d2:	9a08      	ldr	r2, [sp, #32]
 80140d4:	1aed      	subs	r5, r5, r3
 80140d6:	1ad2      	subs	r2, r2, r3
 80140d8:	9208      	str	r2, [sp, #32]
 80140da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140dc:	1ad2      	subs	r2, r2, r3
 80140de:	920c      	str	r2, [sp, #48]	; 0x30
 80140e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d017      	beq.n	8014116 <_strtod_l+0x762>
 80140e6:	001a      	movs	r2, r3
 80140e8:	9905      	ldr	r1, [sp, #20]
 80140ea:	9804      	ldr	r0, [sp, #16]
 80140ec:	f001 fef6 	bl	8015edc <__pow5mult>
 80140f0:	9005      	str	r0, [sp, #20]
 80140f2:	2800      	cmp	r0, #0
 80140f4:	d100      	bne.n	80140f8 <_strtod_l+0x744>
 80140f6:	e693      	b.n	8013e20 <_strtod_l+0x46c>
 80140f8:	0001      	movs	r1, r0
 80140fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80140fc:	9804      	ldr	r0, [sp, #16]
 80140fe:	f001 fe5d 	bl	8015dbc <__multiply>
 8014102:	9012      	str	r0, [sp, #72]	; 0x48
 8014104:	2800      	cmp	r0, #0
 8014106:	d100      	bne.n	801410a <_strtod_l+0x756>
 8014108:	e68a      	b.n	8013e20 <_strtod_l+0x46c>
 801410a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801410c:	9804      	ldr	r0, [sp, #16]
 801410e:	f001 fd6e 	bl	8015bee <_Bfree>
 8014112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014114:	9322      	str	r3, [sp, #136]	; 0x88
 8014116:	9b08      	ldr	r3, [sp, #32]
 8014118:	2b00      	cmp	r3, #0
 801411a:	dd00      	ble.n	801411e <_strtod_l+0x76a>
 801411c:	e07f      	b.n	801421e <_strtod_l+0x86a>
 801411e:	9b07      	ldr	r3, [sp, #28]
 8014120:	2b00      	cmp	r3, #0
 8014122:	dd08      	ble.n	8014136 <_strtod_l+0x782>
 8014124:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014128:	9804      	ldr	r0, [sp, #16]
 801412a:	f001 fed7 	bl	8015edc <__pow5mult>
 801412e:	900a      	str	r0, [sp, #40]	; 0x28
 8014130:	2800      	cmp	r0, #0
 8014132:	d100      	bne.n	8014136 <_strtod_l+0x782>
 8014134:	e674      	b.n	8013e20 <_strtod_l+0x46c>
 8014136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014138:	2b00      	cmp	r3, #0
 801413a:	dd08      	ble.n	801414e <_strtod_l+0x79a>
 801413c:	001a      	movs	r2, r3
 801413e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014140:	9804      	ldr	r0, [sp, #16]
 8014142:	f001 ff1d 	bl	8015f80 <__lshift>
 8014146:	900a      	str	r0, [sp, #40]	; 0x28
 8014148:	2800      	cmp	r0, #0
 801414a:	d100      	bne.n	801414e <_strtod_l+0x79a>
 801414c:	e668      	b.n	8013e20 <_strtod_l+0x46c>
 801414e:	2d00      	cmp	r5, #0
 8014150:	dd08      	ble.n	8014164 <_strtod_l+0x7b0>
 8014152:	002a      	movs	r2, r5
 8014154:	9905      	ldr	r1, [sp, #20]
 8014156:	9804      	ldr	r0, [sp, #16]
 8014158:	f001 ff12 	bl	8015f80 <__lshift>
 801415c:	9005      	str	r0, [sp, #20]
 801415e:	2800      	cmp	r0, #0
 8014160:	d100      	bne.n	8014164 <_strtod_l+0x7b0>
 8014162:	e65d      	b.n	8013e20 <_strtod_l+0x46c>
 8014164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014166:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014168:	9804      	ldr	r0, [sp, #16]
 801416a:	f001 ff75 	bl	8016058 <__mdiff>
 801416e:	1e04      	subs	r4, r0, #0
 8014170:	d100      	bne.n	8014174 <_strtod_l+0x7c0>
 8014172:	e655      	b.n	8013e20 <_strtod_l+0x46c>
 8014174:	2500      	movs	r5, #0
 8014176:	68c3      	ldr	r3, [r0, #12]
 8014178:	9905      	ldr	r1, [sp, #20]
 801417a:	60c5      	str	r5, [r0, #12]
 801417c:	9312      	str	r3, [sp, #72]	; 0x48
 801417e:	f001 ff51 	bl	8016024 <__mcmp>
 8014182:	42a8      	cmp	r0, r5
 8014184:	da55      	bge.n	8014232 <_strtod_l+0x87e>
 8014186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014188:	42ab      	cmp	r3, r5
 801418a:	d11b      	bne.n	80141c4 <_strtod_l+0x810>
 801418c:	42ae      	cmp	r6, r5
 801418e:	d119      	bne.n	80141c4 <_strtod_l+0x810>
 8014190:	033b      	lsls	r3, r7, #12
 8014192:	42ab      	cmp	r3, r5
 8014194:	d116      	bne.n	80141c4 <_strtod_l+0x810>
 8014196:	22d6      	movs	r2, #214	; 0xd6
 8014198:	4b71      	ldr	r3, [pc, #452]	; (8014360 <_strtod_l+0x9ac>)
 801419a:	04d2      	lsls	r2, r2, #19
 801419c:	403b      	ands	r3, r7
 801419e:	4293      	cmp	r3, r2
 80141a0:	d910      	bls.n	80141c4 <_strtod_l+0x810>
 80141a2:	6963      	ldr	r3, [r4, #20]
 80141a4:	42ab      	cmp	r3, r5
 80141a6:	d102      	bne.n	80141ae <_strtod_l+0x7fa>
 80141a8:	6923      	ldr	r3, [r4, #16]
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	dd0a      	ble.n	80141c4 <_strtod_l+0x810>
 80141ae:	0021      	movs	r1, r4
 80141b0:	2201      	movs	r2, #1
 80141b2:	9804      	ldr	r0, [sp, #16]
 80141b4:	f001 fee4 	bl	8015f80 <__lshift>
 80141b8:	9905      	ldr	r1, [sp, #20]
 80141ba:	0004      	movs	r4, r0
 80141bc:	f001 ff32 	bl	8016024 <__mcmp>
 80141c0:	2800      	cmp	r0, #0
 80141c2:	dc6b      	bgt.n	801429c <_strtod_l+0x8e8>
 80141c4:	9b06      	ldr	r3, [sp, #24]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d178      	bne.n	80142bc <_strtod_l+0x908>
 80141ca:	e632      	b.n	8013e32 <_strtod_l+0x47e>
 80141cc:	2201      	movs	r2, #1
 80141ce:	4214      	tst	r4, r2
 80141d0:	d007      	beq.n	80141e2 <_strtod_l+0x82e>
 80141d2:	4a64      	ldr	r2, [pc, #400]	; (8014364 <_strtod_l+0x9b0>)
 80141d4:	00eb      	lsls	r3, r5, #3
 80141d6:	18d3      	adds	r3, r2, r3
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	f7ed fd3e 	bl	8001c5c <__aeabi_dmul>
 80141e0:	2301      	movs	r3, #1
 80141e2:	3501      	adds	r5, #1
 80141e4:	1064      	asrs	r4, r4, #1
 80141e6:	e6df      	b.n	8013fa8 <_strtod_l+0x5f4>
 80141e8:	2101      	movs	r1, #1
 80141ea:	3b20      	subs	r3, #32
 80141ec:	4249      	negs	r1, r1
 80141ee:	4099      	lsls	r1, r3
 80141f0:	400a      	ands	r2, r1
 80141f2:	0017      	movs	r7, r2
 80141f4:	e6f2      	b.n	8013fdc <_strtod_l+0x628>
 80141f6:	2201      	movs	r2, #1
 80141f8:	4252      	negs	r2, r2
 80141fa:	409a      	lsls	r2, r3
 80141fc:	4016      	ands	r6, r2
 80141fe:	e6ed      	b.n	8013fdc <_strtod_l+0x628>
 8014200:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014202:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014204:	1ad2      	subs	r2, r2, r3
 8014206:	4694      	mov	ip, r2
 8014208:	e73c      	b.n	8014084 <_strtod_l+0x6d0>
 801420a:	4957      	ldr	r1, [pc, #348]	; (8014368 <_strtod_l+0x9b4>)
 801420c:	1acb      	subs	r3, r1, r3
 801420e:	0001      	movs	r1, r0
 8014210:	4099      	lsls	r1, r3
 8014212:	9110      	str	r1, [sp, #64]	; 0x40
 8014214:	9014      	str	r0, [sp, #80]	; 0x50
 8014216:	e74a      	b.n	80140ae <_strtod_l+0x6fa>
 8014218:	2300      	movs	r3, #0
 801421a:	9310      	str	r3, [sp, #64]	; 0x40
 801421c:	e7fa      	b.n	8014214 <_strtod_l+0x860>
 801421e:	9a08      	ldr	r2, [sp, #32]
 8014220:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014222:	9804      	ldr	r0, [sp, #16]
 8014224:	f001 feac 	bl	8015f80 <__lshift>
 8014228:	9022      	str	r0, [sp, #136]	; 0x88
 801422a:	2800      	cmp	r0, #0
 801422c:	d000      	beq.n	8014230 <_strtod_l+0x87c>
 801422e:	e776      	b.n	801411e <_strtod_l+0x76a>
 8014230:	e5f6      	b.n	8013e20 <_strtod_l+0x46c>
 8014232:	970c      	str	r7, [sp, #48]	; 0x30
 8014234:	2800      	cmp	r0, #0
 8014236:	d000      	beq.n	801423a <_strtod_l+0x886>
 8014238:	e0a0      	b.n	801437c <_strtod_l+0x9c8>
 801423a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801423c:	033b      	lsls	r3, r7, #12
 801423e:	0b1b      	lsrs	r3, r3, #12
 8014240:	2a00      	cmp	r2, #0
 8014242:	d027      	beq.n	8014294 <_strtod_l+0x8e0>
 8014244:	4a49      	ldr	r2, [pc, #292]	; (801436c <_strtod_l+0x9b8>)
 8014246:	4293      	cmp	r3, r2
 8014248:	d157      	bne.n	80142fa <_strtod_l+0x946>
 801424a:	2201      	movs	r2, #1
 801424c:	9b06      	ldr	r3, [sp, #24]
 801424e:	4252      	negs	r2, r2
 8014250:	0031      	movs	r1, r6
 8014252:	0010      	movs	r0, r2
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00b      	beq.n	8014270 <_strtod_l+0x8bc>
 8014258:	25d4      	movs	r5, #212	; 0xd4
 801425a:	4b41      	ldr	r3, [pc, #260]	; (8014360 <_strtod_l+0x9ac>)
 801425c:	04ed      	lsls	r5, r5, #19
 801425e:	403b      	ands	r3, r7
 8014260:	0010      	movs	r0, r2
 8014262:	42ab      	cmp	r3, r5
 8014264:	d804      	bhi.n	8014270 <_strtod_l+0x8bc>
 8014266:	306c      	adds	r0, #108	; 0x6c
 8014268:	0d1b      	lsrs	r3, r3, #20
 801426a:	1ac3      	subs	r3, r0, r3
 801426c:	409a      	lsls	r2, r3
 801426e:	0010      	movs	r0, r2
 8014270:	4281      	cmp	r1, r0
 8014272:	d142      	bne.n	80142fa <_strtod_l+0x946>
 8014274:	4b3e      	ldr	r3, [pc, #248]	; (8014370 <_strtod_l+0x9bc>)
 8014276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014278:	429a      	cmp	r2, r3
 801427a:	d102      	bne.n	8014282 <_strtod_l+0x8ce>
 801427c:	1c4b      	adds	r3, r1, #1
 801427e:	d100      	bne.n	8014282 <_strtod_l+0x8ce>
 8014280:	e5ce      	b.n	8013e20 <_strtod_l+0x46c>
 8014282:	4b37      	ldr	r3, [pc, #220]	; (8014360 <_strtod_l+0x9ac>)
 8014284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014286:	2600      	movs	r6, #0
 8014288:	401a      	ands	r2, r3
 801428a:	0013      	movs	r3, r2
 801428c:	2280      	movs	r2, #128	; 0x80
 801428e:	0352      	lsls	r2, r2, #13
 8014290:	189f      	adds	r7, r3, r2
 8014292:	e797      	b.n	80141c4 <_strtod_l+0x810>
 8014294:	2b00      	cmp	r3, #0
 8014296:	d130      	bne.n	80142fa <_strtod_l+0x946>
 8014298:	2e00      	cmp	r6, #0
 801429a:	d12e      	bne.n	80142fa <_strtod_l+0x946>
 801429c:	9906      	ldr	r1, [sp, #24]
 801429e:	003b      	movs	r3, r7
 80142a0:	4a2f      	ldr	r2, [pc, #188]	; (8014360 <_strtod_l+0x9ac>)
 80142a2:	2900      	cmp	r1, #0
 80142a4:	d020      	beq.n	80142e8 <_strtod_l+0x934>
 80142a6:	0011      	movs	r1, r2
 80142a8:	20d6      	movs	r0, #214	; 0xd6
 80142aa:	4039      	ands	r1, r7
 80142ac:	04c0      	lsls	r0, r0, #19
 80142ae:	4281      	cmp	r1, r0
 80142b0:	dc1a      	bgt.n	80142e8 <_strtod_l+0x934>
 80142b2:	23dc      	movs	r3, #220	; 0xdc
 80142b4:	049b      	lsls	r3, r3, #18
 80142b6:	4299      	cmp	r1, r3
 80142b8:	dc00      	bgt.n	80142bc <_strtod_l+0x908>
 80142ba:	e646      	b.n	8013f4a <_strtod_l+0x596>
 80142bc:	4b2d      	ldr	r3, [pc, #180]	; (8014374 <_strtod_l+0x9c0>)
 80142be:	0030      	movs	r0, r6
 80142c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80142c2:	2300      	movs	r3, #0
 80142c4:	931a      	str	r3, [sp, #104]	; 0x68
 80142c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80142c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142ca:	0039      	movs	r1, r7
 80142cc:	f7ed fcc6 	bl	8001c5c <__aeabi_dmul>
 80142d0:	0006      	movs	r6, r0
 80142d2:	000f      	movs	r7, r1
 80142d4:	1e0b      	subs	r3, r1, #0
 80142d6:	d000      	beq.n	80142da <_strtod_l+0x926>
 80142d8:	e5ab      	b.n	8013e32 <_strtod_l+0x47e>
 80142da:	2800      	cmp	r0, #0
 80142dc:	d000      	beq.n	80142e0 <_strtod_l+0x92c>
 80142de:	e5a8      	b.n	8013e32 <_strtod_l+0x47e>
 80142e0:	9a04      	ldr	r2, [sp, #16]
 80142e2:	3322      	adds	r3, #34	; 0x22
 80142e4:	6013      	str	r3, [r2, #0]
 80142e6:	e5a4      	b.n	8013e32 <_strtod_l+0x47e>
 80142e8:	2601      	movs	r6, #1
 80142ea:	4013      	ands	r3, r2
 80142ec:	4a22      	ldr	r2, [pc, #136]	; (8014378 <_strtod_l+0x9c4>)
 80142ee:	4276      	negs	r6, r6
 80142f0:	189b      	adds	r3, r3, r2
 80142f2:	4a1e      	ldr	r2, [pc, #120]	; (801436c <_strtod_l+0x9b8>)
 80142f4:	431a      	orrs	r2, r3
 80142f6:	0017      	movs	r7, r2
 80142f8:	e764      	b.n	80141c4 <_strtod_l+0x810>
 80142fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d015      	beq.n	801432c <_strtod_l+0x978>
 8014300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014302:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014304:	4213      	tst	r3, r2
 8014306:	d100      	bne.n	801430a <_strtod_l+0x956>
 8014308:	e75c      	b.n	80141c4 <_strtod_l+0x810>
 801430a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801430c:	9a06      	ldr	r2, [sp, #24]
 801430e:	0030      	movs	r0, r6
 8014310:	0039      	movs	r1, r7
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00f      	beq.n	8014336 <_strtod_l+0x982>
 8014316:	f7ff fb35 	bl	8013984 <sulp>
 801431a:	0002      	movs	r2, r0
 801431c:	000b      	movs	r3, r1
 801431e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014320:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014322:	f7ec fd75 	bl	8000e10 <__aeabi_dadd>
 8014326:	0006      	movs	r6, r0
 8014328:	000f      	movs	r7, r1
 801432a:	e74b      	b.n	80141c4 <_strtod_l+0x810>
 801432c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801432e:	4233      	tst	r3, r6
 8014330:	d100      	bne.n	8014334 <_strtod_l+0x980>
 8014332:	e747      	b.n	80141c4 <_strtod_l+0x810>
 8014334:	e7e9      	b.n	801430a <_strtod_l+0x956>
 8014336:	f7ff fb25 	bl	8013984 <sulp>
 801433a:	0002      	movs	r2, r0
 801433c:	000b      	movs	r3, r1
 801433e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014340:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014342:	f7ed fefd 	bl	8002140 <__aeabi_dsub>
 8014346:	2200      	movs	r2, #0
 8014348:	2300      	movs	r3, #0
 801434a:	0006      	movs	r6, r0
 801434c:	000f      	movs	r7, r1
 801434e:	f7ec f87b 	bl	8000448 <__aeabi_dcmpeq>
 8014352:	2800      	cmp	r0, #0
 8014354:	d000      	beq.n	8014358 <_strtod_l+0x9a4>
 8014356:	e5f8      	b.n	8013f4a <_strtod_l+0x596>
 8014358:	e734      	b.n	80141c4 <_strtod_l+0x810>
 801435a:	46c0      	nop			; (mov r8, r8)
 801435c:	fffffc02 	.word	0xfffffc02
 8014360:	7ff00000 	.word	0x7ff00000
 8014364:	08019838 	.word	0x08019838
 8014368:	fffffbe2 	.word	0xfffffbe2
 801436c:	000fffff 	.word	0x000fffff
 8014370:	7fefffff 	.word	0x7fefffff
 8014374:	39500000 	.word	0x39500000
 8014378:	fff00000 	.word	0xfff00000
 801437c:	9905      	ldr	r1, [sp, #20]
 801437e:	0020      	movs	r0, r4
 8014380:	f001 ff94 	bl	80162ac <__ratio>
 8014384:	2380      	movs	r3, #128	; 0x80
 8014386:	2200      	movs	r2, #0
 8014388:	05db      	lsls	r3, r3, #23
 801438a:	9008      	str	r0, [sp, #32]
 801438c:	9109      	str	r1, [sp, #36]	; 0x24
 801438e:	f7ec f86b 	bl	8000468 <__aeabi_dcmple>
 8014392:	2800      	cmp	r0, #0
 8014394:	d100      	bne.n	8014398 <_strtod_l+0x9e4>
 8014396:	e07f      	b.n	8014498 <_strtod_l+0xae4>
 8014398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801439a:	2b00      	cmp	r3, #0
 801439c:	d04b      	beq.n	8014436 <_strtod_l+0xa82>
 801439e:	2200      	movs	r2, #0
 80143a0:	4b8a      	ldr	r3, [pc, #552]	; (80145cc <_strtod_l+0xc18>)
 80143a2:	9210      	str	r2, [sp, #64]	; 0x40
 80143a4:	9311      	str	r3, [sp, #68]	; 0x44
 80143a6:	4b89      	ldr	r3, [pc, #548]	; (80145cc <_strtod_l+0xc18>)
 80143a8:	9308      	str	r3, [sp, #32]
 80143aa:	4a89      	ldr	r2, [pc, #548]	; (80145d0 <_strtod_l+0xc1c>)
 80143ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143ae:	4013      	ands	r3, r2
 80143b0:	9314      	str	r3, [sp, #80]	; 0x50
 80143b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80143b4:	4b87      	ldr	r3, [pc, #540]	; (80145d4 <_strtod_l+0xc20>)
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d000      	beq.n	80143bc <_strtod_l+0xa08>
 80143ba:	e0ba      	b.n	8014532 <_strtod_l+0xb7e>
 80143bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143c0:	921a      	str	r2, [sp, #104]	; 0x68
 80143c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80143c4:	4a84      	ldr	r2, [pc, #528]	; (80145d8 <_strtod_l+0xc24>)
 80143c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143c8:	4694      	mov	ip, r2
 80143ca:	4463      	add	r3, ip
 80143cc:	001f      	movs	r7, r3
 80143ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143d2:	0030      	movs	r0, r6
 80143d4:	0039      	movs	r1, r7
 80143d6:	920c      	str	r2, [sp, #48]	; 0x30
 80143d8:	930d      	str	r3, [sp, #52]	; 0x34
 80143da:	f001 fea1 	bl	8016120 <__ulp>
 80143de:	0002      	movs	r2, r0
 80143e0:	000b      	movs	r3, r1
 80143e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80143e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80143e6:	f7ed fc39 	bl	8001c5c <__aeabi_dmul>
 80143ea:	0032      	movs	r2, r6
 80143ec:	003b      	movs	r3, r7
 80143ee:	f7ec fd0f 	bl	8000e10 <__aeabi_dadd>
 80143f2:	4a77      	ldr	r2, [pc, #476]	; (80145d0 <_strtod_l+0xc1c>)
 80143f4:	4b79      	ldr	r3, [pc, #484]	; (80145dc <_strtod_l+0xc28>)
 80143f6:	0006      	movs	r6, r0
 80143f8:	400a      	ands	r2, r1
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d964      	bls.n	80144c8 <_strtod_l+0xb14>
 80143fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014400:	4a77      	ldr	r2, [pc, #476]	; (80145e0 <_strtod_l+0xc2c>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d103      	bne.n	801440e <_strtod_l+0xa5a>
 8014406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014408:	3301      	adds	r3, #1
 801440a:	d100      	bne.n	801440e <_strtod_l+0xa5a>
 801440c:	e508      	b.n	8013e20 <_strtod_l+0x46c>
 801440e:	2601      	movs	r6, #1
 8014410:	4f73      	ldr	r7, [pc, #460]	; (80145e0 <_strtod_l+0xc2c>)
 8014412:	4276      	negs	r6, r6
 8014414:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014416:	9804      	ldr	r0, [sp, #16]
 8014418:	f001 fbe9 	bl	8015bee <_Bfree>
 801441c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801441e:	9804      	ldr	r0, [sp, #16]
 8014420:	f001 fbe5 	bl	8015bee <_Bfree>
 8014424:	9905      	ldr	r1, [sp, #20]
 8014426:	9804      	ldr	r0, [sp, #16]
 8014428:	f001 fbe1 	bl	8015bee <_Bfree>
 801442c:	0021      	movs	r1, r4
 801442e:	9804      	ldr	r0, [sp, #16]
 8014430:	f001 fbdd 	bl	8015bee <_Bfree>
 8014434:	e5f4      	b.n	8014020 <_strtod_l+0x66c>
 8014436:	2e00      	cmp	r6, #0
 8014438:	d11e      	bne.n	8014478 <_strtod_l+0xac4>
 801443a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801443c:	031b      	lsls	r3, r3, #12
 801443e:	d121      	bne.n	8014484 <_strtod_l+0xad0>
 8014440:	9808      	ldr	r0, [sp, #32]
 8014442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014444:	2200      	movs	r2, #0
 8014446:	4b61      	ldr	r3, [pc, #388]	; (80145cc <_strtod_l+0xc18>)
 8014448:	f7ec f804 	bl	8000454 <__aeabi_dcmplt>
 801444c:	2800      	cmp	r0, #0
 801444e:	d11f      	bne.n	8014490 <_strtod_l+0xadc>
 8014450:	9808      	ldr	r0, [sp, #32]
 8014452:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014454:	2200      	movs	r2, #0
 8014456:	4b63      	ldr	r3, [pc, #396]	; (80145e4 <_strtod_l+0xc30>)
 8014458:	f7ed fc00 	bl	8001c5c <__aeabi_dmul>
 801445c:	0005      	movs	r5, r0
 801445e:	9108      	str	r1, [sp, #32]
 8014460:	2280      	movs	r2, #128	; 0x80
 8014462:	0612      	lsls	r2, r2, #24
 8014464:	4694      	mov	ip, r2
 8014466:	9b08      	ldr	r3, [sp, #32]
 8014468:	951e      	str	r5, [sp, #120]	; 0x78
 801446a:	4463      	add	r3, ip
 801446c:	931f      	str	r3, [sp, #124]	; 0x7c
 801446e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014470:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014472:	9210      	str	r2, [sp, #64]	; 0x40
 8014474:	9311      	str	r3, [sp, #68]	; 0x44
 8014476:	e798      	b.n	80143aa <_strtod_l+0x9f6>
 8014478:	2e01      	cmp	r6, #1
 801447a:	d103      	bne.n	8014484 <_strtod_l+0xad0>
 801447c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801447e:	2b00      	cmp	r3, #0
 8014480:	d100      	bne.n	8014484 <_strtod_l+0xad0>
 8014482:	e562      	b.n	8013f4a <_strtod_l+0x596>
 8014484:	2200      	movs	r2, #0
 8014486:	4b58      	ldr	r3, [pc, #352]	; (80145e8 <_strtod_l+0xc34>)
 8014488:	2500      	movs	r5, #0
 801448a:	9210      	str	r2, [sp, #64]	; 0x40
 801448c:	9311      	str	r3, [sp, #68]	; 0x44
 801448e:	e78a      	b.n	80143a6 <_strtod_l+0x9f2>
 8014490:	4b54      	ldr	r3, [pc, #336]	; (80145e4 <_strtod_l+0xc30>)
 8014492:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014494:	9308      	str	r3, [sp, #32]
 8014496:	e7e3      	b.n	8014460 <_strtod_l+0xaac>
 8014498:	4b52      	ldr	r3, [pc, #328]	; (80145e4 <_strtod_l+0xc30>)
 801449a:	9808      	ldr	r0, [sp, #32]
 801449c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801449e:	2200      	movs	r2, #0
 80144a0:	f7ed fbdc 	bl	8001c5c <__aeabi_dmul>
 80144a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144a6:	0005      	movs	r5, r0
 80144a8:	9108      	str	r1, [sp, #32]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d107      	bne.n	80144be <_strtod_l+0xb0a>
 80144ae:	2380      	movs	r3, #128	; 0x80
 80144b0:	061b      	lsls	r3, r3, #24
 80144b2:	18cb      	adds	r3, r1, r3
 80144b4:	9016      	str	r0, [sp, #88]	; 0x58
 80144b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80144b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80144ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144bc:	e7d9      	b.n	8014472 <_strtod_l+0xabe>
 80144be:	0002      	movs	r2, r0
 80144c0:	9b08      	ldr	r3, [sp, #32]
 80144c2:	9216      	str	r2, [sp, #88]	; 0x58
 80144c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80144c6:	e7f7      	b.n	80144b8 <_strtod_l+0xb04>
 80144c8:	23d4      	movs	r3, #212	; 0xd4
 80144ca:	049b      	lsls	r3, r3, #18
 80144cc:	18cf      	adds	r7, r1, r3
 80144ce:	9b06      	ldr	r3, [sp, #24]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d19f      	bne.n	8014414 <_strtod_l+0xa60>
 80144d4:	4b3e      	ldr	r3, [pc, #248]	; (80145d0 <_strtod_l+0xc1c>)
 80144d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80144d8:	970c      	str	r7, [sp, #48]	; 0x30
 80144da:	403b      	ands	r3, r7
 80144dc:	429a      	cmp	r2, r3
 80144de:	d199      	bne.n	8014414 <_strtod_l+0xa60>
 80144e0:	9908      	ldr	r1, [sp, #32]
 80144e2:	0028      	movs	r0, r5
 80144e4:	f7ee f990 	bl	8002808 <__aeabi_d2iz>
 80144e8:	f7ee f9c4 	bl	8002874 <__aeabi_i2d>
 80144ec:	000b      	movs	r3, r1
 80144ee:	0002      	movs	r2, r0
 80144f0:	9908      	ldr	r1, [sp, #32]
 80144f2:	0028      	movs	r0, r5
 80144f4:	f7ed fe24 	bl	8002140 <__aeabi_dsub>
 80144f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144fa:	9008      	str	r0, [sp, #32]
 80144fc:	9109      	str	r1, [sp, #36]	; 0x24
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d104      	bne.n	801450c <_strtod_l+0xb58>
 8014502:	2e00      	cmp	r6, #0
 8014504:	d102      	bne.n	801450c <_strtod_l+0xb58>
 8014506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014508:	031b      	lsls	r3, r3, #12
 801450a:	d058      	beq.n	80145be <_strtod_l+0xc0a>
 801450c:	9808      	ldr	r0, [sp, #32]
 801450e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014510:	4a36      	ldr	r2, [pc, #216]	; (80145ec <_strtod_l+0xc38>)
 8014512:	4b37      	ldr	r3, [pc, #220]	; (80145f0 <_strtod_l+0xc3c>)
 8014514:	f7eb ff9e 	bl	8000454 <__aeabi_dcmplt>
 8014518:	2800      	cmp	r0, #0
 801451a:	d000      	beq.n	801451e <_strtod_l+0xb6a>
 801451c:	e489      	b.n	8013e32 <_strtod_l+0x47e>
 801451e:	9808      	ldr	r0, [sp, #32]
 8014520:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014522:	4a34      	ldr	r2, [pc, #208]	; (80145f4 <_strtod_l+0xc40>)
 8014524:	4b2f      	ldr	r3, [pc, #188]	; (80145e4 <_strtod_l+0xc30>)
 8014526:	f7eb ffa9 	bl	800047c <__aeabi_dcmpgt>
 801452a:	2800      	cmp	r0, #0
 801452c:	d100      	bne.n	8014530 <_strtod_l+0xb7c>
 801452e:	e771      	b.n	8014414 <_strtod_l+0xa60>
 8014530:	e47f      	b.n	8013e32 <_strtod_l+0x47e>
 8014532:	9b06      	ldr	r3, [sp, #24]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d02a      	beq.n	801458e <_strtod_l+0xbda>
 8014538:	23d4      	movs	r3, #212	; 0xd4
 801453a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801453c:	04db      	lsls	r3, r3, #19
 801453e:	429a      	cmp	r2, r3
 8014540:	d825      	bhi.n	801458e <_strtod_l+0xbda>
 8014542:	4a2d      	ldr	r2, [pc, #180]	; (80145f8 <_strtod_l+0xc44>)
 8014544:	4b2d      	ldr	r3, [pc, #180]	; (80145fc <_strtod_l+0xc48>)
 8014546:	0028      	movs	r0, r5
 8014548:	9908      	ldr	r1, [sp, #32]
 801454a:	f7eb ff8d 	bl	8000468 <__aeabi_dcmple>
 801454e:	2800      	cmp	r0, #0
 8014550:	d016      	beq.n	8014580 <_strtod_l+0xbcc>
 8014552:	0028      	movs	r0, r5
 8014554:	9908      	ldr	r1, [sp, #32]
 8014556:	f7ec f821 	bl	800059c <__aeabi_d2uiz>
 801455a:	2800      	cmp	r0, #0
 801455c:	d100      	bne.n	8014560 <_strtod_l+0xbac>
 801455e:	3001      	adds	r0, #1
 8014560:	f7ee f9c2 	bl	80028e8 <__aeabi_ui2d>
 8014564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014566:	0005      	movs	r5, r0
 8014568:	9108      	str	r1, [sp, #32]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d122      	bne.n	80145b4 <_strtod_l+0xc00>
 801456e:	2380      	movs	r3, #128	; 0x80
 8014570:	061b      	lsls	r3, r3, #24
 8014572:	18cb      	adds	r3, r1, r3
 8014574:	9018      	str	r0, [sp, #96]	; 0x60
 8014576:	9319      	str	r3, [sp, #100]	; 0x64
 8014578:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801457a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801457c:	9210      	str	r2, [sp, #64]	; 0x40
 801457e:	9311      	str	r3, [sp, #68]	; 0x44
 8014580:	22d6      	movs	r2, #214	; 0xd6
 8014582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014584:	04d2      	lsls	r2, r2, #19
 8014586:	189b      	adds	r3, r3, r2
 8014588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801458a:	1a9b      	subs	r3, r3, r2
 801458c:	9311      	str	r3, [sp, #68]	; 0x44
 801458e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014592:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014594:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014596:	f001 fdc3 	bl	8016120 <__ulp>
 801459a:	0002      	movs	r2, r0
 801459c:	000b      	movs	r3, r1
 801459e:	0030      	movs	r0, r6
 80145a0:	0039      	movs	r1, r7
 80145a2:	f7ed fb5b 	bl	8001c5c <__aeabi_dmul>
 80145a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145aa:	f7ec fc31 	bl	8000e10 <__aeabi_dadd>
 80145ae:	0006      	movs	r6, r0
 80145b0:	000f      	movs	r7, r1
 80145b2:	e78c      	b.n	80144ce <_strtod_l+0xb1a>
 80145b4:	0002      	movs	r2, r0
 80145b6:	9b08      	ldr	r3, [sp, #32]
 80145b8:	9218      	str	r2, [sp, #96]	; 0x60
 80145ba:	9319      	str	r3, [sp, #100]	; 0x64
 80145bc:	e7dc      	b.n	8014578 <_strtod_l+0xbc4>
 80145be:	4a0b      	ldr	r2, [pc, #44]	; (80145ec <_strtod_l+0xc38>)
 80145c0:	4b0f      	ldr	r3, [pc, #60]	; (8014600 <_strtod_l+0xc4c>)
 80145c2:	9808      	ldr	r0, [sp, #32]
 80145c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145c6:	f7eb ff45 	bl	8000454 <__aeabi_dcmplt>
 80145ca:	e7ae      	b.n	801452a <_strtod_l+0xb76>
 80145cc:	3ff00000 	.word	0x3ff00000
 80145d0:	7ff00000 	.word	0x7ff00000
 80145d4:	7fe00000 	.word	0x7fe00000
 80145d8:	fcb00000 	.word	0xfcb00000
 80145dc:	7c9fffff 	.word	0x7c9fffff
 80145e0:	7fefffff 	.word	0x7fefffff
 80145e4:	3fe00000 	.word	0x3fe00000
 80145e8:	bff00000 	.word	0xbff00000
 80145ec:	94a03595 	.word	0x94a03595
 80145f0:	3fdfffff 	.word	0x3fdfffff
 80145f4:	35afe535 	.word	0x35afe535
 80145f8:	ffc00000 	.word	0xffc00000
 80145fc:	41dfffff 	.word	0x41dfffff
 8014600:	3fcfffff 	.word	0x3fcfffff

08014604 <strtod>:
 8014604:	4b06      	ldr	r3, [pc, #24]	; (8014620 <strtod+0x1c>)
 8014606:	b510      	push	{r4, lr}
 8014608:	0004      	movs	r4, r0
 801460a:	6818      	ldr	r0, [r3, #0]
 801460c:	000a      	movs	r2, r1
 801460e:	6a03      	ldr	r3, [r0, #32]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d100      	bne.n	8014616 <strtod+0x12>
 8014614:	4b03      	ldr	r3, [pc, #12]	; (8014624 <strtod+0x20>)
 8014616:	0021      	movs	r1, r4
 8014618:	f7ff f9cc 	bl	80139b4 <_strtod_l>
 801461c:	bd10      	pop	{r4, pc}
 801461e:	46c0      	nop			; (mov r8, r8)
 8014620:	200000c4 	.word	0x200000c4
 8014624:	20000128 	.word	0x20000128

08014628 <strtok>:
 8014628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462a:	4b12      	ldr	r3, [pc, #72]	; (8014674 <strtok+0x4c>)
 801462c:	0006      	movs	r6, r0
 801462e:	681d      	ldr	r5, [r3, #0]
 8014630:	000f      	movs	r7, r1
 8014632:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8014634:	2c00      	cmp	r4, #0
 8014636:	d116      	bne.n	8014666 <strtok+0x3e>
 8014638:	2050      	movs	r0, #80	; 0x50
 801463a:	f7fe fb6d 	bl	8012d18 <malloc>
 801463e:	65a8      	str	r0, [r5, #88]	; 0x58
 8014640:	6004      	str	r4, [r0, #0]
 8014642:	6044      	str	r4, [r0, #4]
 8014644:	6084      	str	r4, [r0, #8]
 8014646:	60c4      	str	r4, [r0, #12]
 8014648:	6104      	str	r4, [r0, #16]
 801464a:	6144      	str	r4, [r0, #20]
 801464c:	6184      	str	r4, [r0, #24]
 801464e:	6284      	str	r4, [r0, #40]	; 0x28
 8014650:	62c4      	str	r4, [r0, #44]	; 0x2c
 8014652:	6304      	str	r4, [r0, #48]	; 0x30
 8014654:	6344      	str	r4, [r0, #52]	; 0x34
 8014656:	6384      	str	r4, [r0, #56]	; 0x38
 8014658:	63c4      	str	r4, [r0, #60]	; 0x3c
 801465a:	6404      	str	r4, [r0, #64]	; 0x40
 801465c:	6444      	str	r4, [r0, #68]	; 0x44
 801465e:	6484      	str	r4, [r0, #72]	; 0x48
 8014660:	64c4      	str	r4, [r0, #76]	; 0x4c
 8014662:	7704      	strb	r4, [r0, #28]
 8014664:	6244      	str	r4, [r0, #36]	; 0x24
 8014666:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8014668:	0039      	movs	r1, r7
 801466a:	0030      	movs	r0, r6
 801466c:	2301      	movs	r3, #1
 801466e:	f000 f803 	bl	8014678 <__strtok_r>
 8014672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014674:	200000c4 	.word	0x200000c4

08014678 <__strtok_r>:
 8014678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801467a:	2800      	cmp	r0, #0
 801467c:	d104      	bne.n	8014688 <__strtok_r+0x10>
 801467e:	6810      	ldr	r0, [r2, #0]
 8014680:	2800      	cmp	r0, #0
 8014682:	d101      	bne.n	8014688 <__strtok_r+0x10>
 8014684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014686:	0020      	movs	r0, r4
 8014688:	000e      	movs	r6, r1
 801468a:	7805      	ldrb	r5, [r0, #0]
 801468c:	1c44      	adds	r4, r0, #1
 801468e:	7837      	ldrb	r7, [r6, #0]
 8014690:	2f00      	cmp	r7, #0
 8014692:	d104      	bne.n	801469e <__strtok_r+0x26>
 8014694:	2d00      	cmp	r5, #0
 8014696:	d110      	bne.n	80146ba <__strtok_r+0x42>
 8014698:	6015      	str	r5, [r2, #0]
 801469a:	0028      	movs	r0, r5
 801469c:	e7f2      	b.n	8014684 <__strtok_r+0xc>
 801469e:	3601      	adds	r6, #1
 80146a0:	42bd      	cmp	r5, r7
 80146a2:	d1f4      	bne.n	801468e <__strtok_r+0x16>
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1ee      	bne.n	8014686 <__strtok_r+0xe>
 80146a8:	6014      	str	r4, [r2, #0]
 80146aa:	7003      	strb	r3, [r0, #0]
 80146ac:	e7ea      	b.n	8014684 <__strtok_r+0xc>
 80146ae:	0033      	movs	r3, r6
 80146b0:	e00d      	b.n	80146ce <__strtok_r+0x56>
 80146b2:	3501      	adds	r5, #1
 80146b4:	2f00      	cmp	r7, #0
 80146b6:	d103      	bne.n	80146c0 <__strtok_r+0x48>
 80146b8:	001c      	movs	r4, r3
 80146ba:	000d      	movs	r5, r1
 80146bc:	7826      	ldrb	r6, [r4, #0]
 80146be:	1c63      	adds	r3, r4, #1
 80146c0:	782f      	ldrb	r7, [r5, #0]
 80146c2:	42be      	cmp	r6, r7
 80146c4:	d1f5      	bne.n	80146b2 <__strtok_r+0x3a>
 80146c6:	2e00      	cmp	r6, #0
 80146c8:	d0f1      	beq.n	80146ae <__strtok_r+0x36>
 80146ca:	2100      	movs	r1, #0
 80146cc:	7021      	strb	r1, [r4, #0]
 80146ce:	6013      	str	r3, [r2, #0]
 80146d0:	e7d8      	b.n	8014684 <__strtok_r+0xc>
	...

080146d4 <_strtol_l.isra.0>:
 80146d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146d6:	001f      	movs	r7, r3
 80146d8:	000e      	movs	r6, r1
 80146da:	b087      	sub	sp, #28
 80146dc:	9005      	str	r0, [sp, #20]
 80146de:	9101      	str	r1, [sp, #4]
 80146e0:	9202      	str	r2, [sp, #8]
 80146e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80146e4:	7834      	ldrb	r4, [r6, #0]
 80146e6:	f7fe fb05 	bl	8012cf4 <__locale_ctype_ptr_l>
 80146ea:	2208      	movs	r2, #8
 80146ec:	1900      	adds	r0, r0, r4
 80146ee:	7843      	ldrb	r3, [r0, #1]
 80146f0:	1c75      	adds	r5, r6, #1
 80146f2:	4013      	ands	r3, r2
 80146f4:	d136      	bne.n	8014764 <_strtol_l.isra.0+0x90>
 80146f6:	2c2d      	cmp	r4, #45	; 0x2d
 80146f8:	d136      	bne.n	8014768 <_strtol_l.isra.0+0x94>
 80146fa:	1cb5      	adds	r5, r6, #2
 80146fc:	7874      	ldrb	r4, [r6, #1]
 80146fe:	2601      	movs	r6, #1
 8014700:	2f00      	cmp	r7, #0
 8014702:	d062      	beq.n	80147ca <_strtol_l.isra.0+0xf6>
 8014704:	2f10      	cmp	r7, #16
 8014706:	d109      	bne.n	801471c <_strtol_l.isra.0+0x48>
 8014708:	2c30      	cmp	r4, #48	; 0x30
 801470a:	d107      	bne.n	801471c <_strtol_l.isra.0+0x48>
 801470c:	2220      	movs	r2, #32
 801470e:	782b      	ldrb	r3, [r5, #0]
 8014710:	4393      	bics	r3, r2
 8014712:	2b58      	cmp	r3, #88	; 0x58
 8014714:	d154      	bne.n	80147c0 <_strtol_l.isra.0+0xec>
 8014716:	2710      	movs	r7, #16
 8014718:	786c      	ldrb	r4, [r5, #1]
 801471a:	3502      	adds	r5, #2
 801471c:	4b2d      	ldr	r3, [pc, #180]	; (80147d4 <_strtol_l.isra.0+0x100>)
 801471e:	0039      	movs	r1, r7
 8014720:	18f3      	adds	r3, r6, r3
 8014722:	0018      	movs	r0, r3
 8014724:	9303      	str	r3, [sp, #12]
 8014726:	f7eb fd8f 	bl	8000248 <__aeabi_uidivmod>
 801472a:	9104      	str	r1, [sp, #16]
 801472c:	2101      	movs	r1, #1
 801472e:	2300      	movs	r3, #0
 8014730:	4249      	negs	r1, r1
 8014732:	0002      	movs	r2, r0
 8014734:	468c      	mov	ip, r1
 8014736:	0018      	movs	r0, r3
 8014738:	0021      	movs	r1, r4
 801473a:	3930      	subs	r1, #48	; 0x30
 801473c:	2909      	cmp	r1, #9
 801473e:	d81a      	bhi.n	8014776 <_strtol_l.isra.0+0xa2>
 8014740:	000c      	movs	r4, r1
 8014742:	42a7      	cmp	r7, r4
 8014744:	dd23      	ble.n	801478e <_strtol_l.isra.0+0xba>
 8014746:	1c59      	adds	r1, r3, #1
 8014748:	d009      	beq.n	801475e <_strtol_l.isra.0+0x8a>
 801474a:	4663      	mov	r3, ip
 801474c:	4282      	cmp	r2, r0
 801474e:	d306      	bcc.n	801475e <_strtol_l.isra.0+0x8a>
 8014750:	d102      	bne.n	8014758 <_strtol_l.isra.0+0x84>
 8014752:	9904      	ldr	r1, [sp, #16]
 8014754:	42a1      	cmp	r1, r4
 8014756:	db02      	blt.n	801475e <_strtol_l.isra.0+0x8a>
 8014758:	2301      	movs	r3, #1
 801475a:	4378      	muls	r0, r7
 801475c:	1820      	adds	r0, r4, r0
 801475e:	782c      	ldrb	r4, [r5, #0]
 8014760:	3501      	adds	r5, #1
 8014762:	e7e9      	b.n	8014738 <_strtol_l.isra.0+0x64>
 8014764:	002e      	movs	r6, r5
 8014766:	e7bc      	b.n	80146e2 <_strtol_l.isra.0+0xe>
 8014768:	2c2b      	cmp	r4, #43	; 0x2b
 801476a:	d001      	beq.n	8014770 <_strtol_l.isra.0+0x9c>
 801476c:	001e      	movs	r6, r3
 801476e:	e7c7      	b.n	8014700 <_strtol_l.isra.0+0x2c>
 8014770:	1cb5      	adds	r5, r6, #2
 8014772:	7874      	ldrb	r4, [r6, #1]
 8014774:	e7fa      	b.n	801476c <_strtol_l.isra.0+0x98>
 8014776:	0021      	movs	r1, r4
 8014778:	3941      	subs	r1, #65	; 0x41
 801477a:	2919      	cmp	r1, #25
 801477c:	d801      	bhi.n	8014782 <_strtol_l.isra.0+0xae>
 801477e:	3c37      	subs	r4, #55	; 0x37
 8014780:	e7df      	b.n	8014742 <_strtol_l.isra.0+0x6e>
 8014782:	0021      	movs	r1, r4
 8014784:	3961      	subs	r1, #97	; 0x61
 8014786:	2919      	cmp	r1, #25
 8014788:	d801      	bhi.n	801478e <_strtol_l.isra.0+0xba>
 801478a:	3c57      	subs	r4, #87	; 0x57
 801478c:	e7d9      	b.n	8014742 <_strtol_l.isra.0+0x6e>
 801478e:	1c5a      	adds	r2, r3, #1
 8014790:	d108      	bne.n	80147a4 <_strtol_l.isra.0+0xd0>
 8014792:	9a05      	ldr	r2, [sp, #20]
 8014794:	3323      	adds	r3, #35	; 0x23
 8014796:	6013      	str	r3, [r2, #0]
 8014798:	9b02      	ldr	r3, [sp, #8]
 801479a:	9803      	ldr	r0, [sp, #12]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d109      	bne.n	80147b4 <_strtol_l.isra.0+0xe0>
 80147a0:	b007      	add	sp, #28
 80147a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147a4:	2e00      	cmp	r6, #0
 80147a6:	d000      	beq.n	80147aa <_strtol_l.isra.0+0xd6>
 80147a8:	4240      	negs	r0, r0
 80147aa:	9a02      	ldr	r2, [sp, #8]
 80147ac:	2a00      	cmp	r2, #0
 80147ae:	d0f7      	beq.n	80147a0 <_strtol_l.isra.0+0xcc>
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d001      	beq.n	80147b8 <_strtol_l.isra.0+0xe4>
 80147b4:	1e6b      	subs	r3, r5, #1
 80147b6:	9301      	str	r3, [sp, #4]
 80147b8:	9b02      	ldr	r3, [sp, #8]
 80147ba:	9a01      	ldr	r2, [sp, #4]
 80147bc:	601a      	str	r2, [r3, #0]
 80147be:	e7ef      	b.n	80147a0 <_strtol_l.isra.0+0xcc>
 80147c0:	2430      	movs	r4, #48	; 0x30
 80147c2:	2f00      	cmp	r7, #0
 80147c4:	d1aa      	bne.n	801471c <_strtol_l.isra.0+0x48>
 80147c6:	2708      	movs	r7, #8
 80147c8:	e7a8      	b.n	801471c <_strtol_l.isra.0+0x48>
 80147ca:	2c30      	cmp	r4, #48	; 0x30
 80147cc:	d09e      	beq.n	801470c <_strtol_l.isra.0+0x38>
 80147ce:	270a      	movs	r7, #10
 80147d0:	e7a4      	b.n	801471c <_strtol_l.isra.0+0x48>
 80147d2:	46c0      	nop			; (mov r8, r8)
 80147d4:	7fffffff 	.word	0x7fffffff

080147d8 <strtol>:
 80147d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147da:	0013      	movs	r3, r2
 80147dc:	4a06      	ldr	r2, [pc, #24]	; (80147f8 <strtol+0x20>)
 80147de:	0005      	movs	r5, r0
 80147e0:	6810      	ldr	r0, [r2, #0]
 80147e2:	6a04      	ldr	r4, [r0, #32]
 80147e4:	2c00      	cmp	r4, #0
 80147e6:	d100      	bne.n	80147ea <strtol+0x12>
 80147e8:	4c04      	ldr	r4, [pc, #16]	; (80147fc <strtol+0x24>)
 80147ea:	000a      	movs	r2, r1
 80147ec:	9400      	str	r4, [sp, #0]
 80147ee:	0029      	movs	r1, r5
 80147f0:	f7ff ff70 	bl	80146d4 <_strtol_l.isra.0>
 80147f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80147f6:	46c0      	nop			; (mov r8, r8)
 80147f8:	200000c4 	.word	0x200000c4
 80147fc:	20000128 	.word	0x20000128

08014800 <__ascii_wctomb>:
 8014800:	1e0b      	subs	r3, r1, #0
 8014802:	d004      	beq.n	801480e <__ascii_wctomb+0xe>
 8014804:	2aff      	cmp	r2, #255	; 0xff
 8014806:	d904      	bls.n	8014812 <__ascii_wctomb+0x12>
 8014808:	238a      	movs	r3, #138	; 0x8a
 801480a:	6003      	str	r3, [r0, #0]
 801480c:	3b8b      	subs	r3, #139	; 0x8b
 801480e:	0018      	movs	r0, r3
 8014810:	4770      	bx	lr
 8014812:	700a      	strb	r2, [r1, #0]
 8014814:	2301      	movs	r3, #1
 8014816:	e7fa      	b.n	801480e <__ascii_wctomb+0xe>

08014818 <quorem>:
 8014818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801481a:	6903      	ldr	r3, [r0, #16]
 801481c:	690c      	ldr	r4, [r1, #16]
 801481e:	b089      	sub	sp, #36	; 0x24
 8014820:	0007      	movs	r7, r0
 8014822:	9105      	str	r1, [sp, #20]
 8014824:	2600      	movs	r6, #0
 8014826:	42a3      	cmp	r3, r4
 8014828:	db65      	blt.n	80148f6 <quorem+0xde>
 801482a:	000b      	movs	r3, r1
 801482c:	3c01      	subs	r4, #1
 801482e:	3314      	adds	r3, #20
 8014830:	00a5      	lsls	r5, r4, #2
 8014832:	9303      	str	r3, [sp, #12]
 8014834:	195b      	adds	r3, r3, r5
 8014836:	9304      	str	r3, [sp, #16]
 8014838:	0003      	movs	r3, r0
 801483a:	3314      	adds	r3, #20
 801483c:	9302      	str	r3, [sp, #8]
 801483e:	195d      	adds	r5, r3, r5
 8014840:	9b04      	ldr	r3, [sp, #16]
 8014842:	6828      	ldr	r0, [r5, #0]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	1c59      	adds	r1, r3, #1
 8014848:	9301      	str	r3, [sp, #4]
 801484a:	f7eb fc77 	bl	800013c <__udivsi3>
 801484e:	9001      	str	r0, [sp, #4]
 8014850:	42b0      	cmp	r0, r6
 8014852:	d029      	beq.n	80148a8 <quorem+0x90>
 8014854:	9b03      	ldr	r3, [sp, #12]
 8014856:	9802      	ldr	r0, [sp, #8]
 8014858:	469c      	mov	ip, r3
 801485a:	9606      	str	r6, [sp, #24]
 801485c:	4662      	mov	r2, ip
 801485e:	ca08      	ldmia	r2!, {r3}
 8014860:	4694      	mov	ip, r2
 8014862:	9a01      	ldr	r2, [sp, #4]
 8014864:	b299      	uxth	r1, r3
 8014866:	4351      	muls	r1, r2
 8014868:	0c1b      	lsrs	r3, r3, #16
 801486a:	4353      	muls	r3, r2
 801486c:	1989      	adds	r1, r1, r6
 801486e:	0c0a      	lsrs	r2, r1, #16
 8014870:	189b      	adds	r3, r3, r2
 8014872:	9307      	str	r3, [sp, #28]
 8014874:	0c1e      	lsrs	r6, r3, #16
 8014876:	6803      	ldr	r3, [r0, #0]
 8014878:	b289      	uxth	r1, r1
 801487a:	b29a      	uxth	r2, r3
 801487c:	9b06      	ldr	r3, [sp, #24]
 801487e:	18d2      	adds	r2, r2, r3
 8014880:	6803      	ldr	r3, [r0, #0]
 8014882:	1a52      	subs	r2, r2, r1
 8014884:	0c19      	lsrs	r1, r3, #16
 8014886:	466b      	mov	r3, sp
 8014888:	8b9b      	ldrh	r3, [r3, #28]
 801488a:	1acb      	subs	r3, r1, r3
 801488c:	1411      	asrs	r1, r2, #16
 801488e:	185b      	adds	r3, r3, r1
 8014890:	1419      	asrs	r1, r3, #16
 8014892:	b292      	uxth	r2, r2
 8014894:	041b      	lsls	r3, r3, #16
 8014896:	431a      	orrs	r2, r3
 8014898:	9b04      	ldr	r3, [sp, #16]
 801489a:	9106      	str	r1, [sp, #24]
 801489c:	c004      	stmia	r0!, {r2}
 801489e:	4563      	cmp	r3, ip
 80148a0:	d2dc      	bcs.n	801485c <quorem+0x44>
 80148a2:	682b      	ldr	r3, [r5, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d02d      	beq.n	8014904 <quorem+0xec>
 80148a8:	9905      	ldr	r1, [sp, #20]
 80148aa:	0038      	movs	r0, r7
 80148ac:	f001 fbba 	bl	8016024 <__mcmp>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	db1f      	blt.n	80148f4 <quorem+0xdc>
 80148b4:	2500      	movs	r5, #0
 80148b6:	9b01      	ldr	r3, [sp, #4]
 80148b8:	9802      	ldr	r0, [sp, #8]
 80148ba:	3301      	adds	r3, #1
 80148bc:	9903      	ldr	r1, [sp, #12]
 80148be:	9301      	str	r3, [sp, #4]
 80148c0:	6802      	ldr	r2, [r0, #0]
 80148c2:	c908      	ldmia	r1!, {r3}
 80148c4:	b292      	uxth	r2, r2
 80148c6:	1955      	adds	r5, r2, r5
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	1aaa      	subs	r2, r5, r2
 80148cc:	6805      	ldr	r5, [r0, #0]
 80148ce:	0c1b      	lsrs	r3, r3, #16
 80148d0:	0c2d      	lsrs	r5, r5, #16
 80148d2:	1aeb      	subs	r3, r5, r3
 80148d4:	1415      	asrs	r5, r2, #16
 80148d6:	195b      	adds	r3, r3, r5
 80148d8:	141d      	asrs	r5, r3, #16
 80148da:	b292      	uxth	r2, r2
 80148dc:	041b      	lsls	r3, r3, #16
 80148de:	4313      	orrs	r3, r2
 80148e0:	c008      	stmia	r0!, {r3}
 80148e2:	9b04      	ldr	r3, [sp, #16]
 80148e4:	428b      	cmp	r3, r1
 80148e6:	d2eb      	bcs.n	80148c0 <quorem+0xa8>
 80148e8:	9a02      	ldr	r2, [sp, #8]
 80148ea:	00a3      	lsls	r3, r4, #2
 80148ec:	18d3      	adds	r3, r2, r3
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	2a00      	cmp	r2, #0
 80148f2:	d011      	beq.n	8014918 <quorem+0x100>
 80148f4:	9e01      	ldr	r6, [sp, #4]
 80148f6:	0030      	movs	r0, r6
 80148f8:	b009      	add	sp, #36	; 0x24
 80148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fc:	682b      	ldr	r3, [r5, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d104      	bne.n	801490c <quorem+0xf4>
 8014902:	3c01      	subs	r4, #1
 8014904:	9b02      	ldr	r3, [sp, #8]
 8014906:	3d04      	subs	r5, #4
 8014908:	42ab      	cmp	r3, r5
 801490a:	d3f7      	bcc.n	80148fc <quorem+0xe4>
 801490c:	613c      	str	r4, [r7, #16]
 801490e:	e7cb      	b.n	80148a8 <quorem+0x90>
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	2a00      	cmp	r2, #0
 8014914:	d104      	bne.n	8014920 <quorem+0x108>
 8014916:	3c01      	subs	r4, #1
 8014918:	9a02      	ldr	r2, [sp, #8]
 801491a:	3b04      	subs	r3, #4
 801491c:	429a      	cmp	r2, r3
 801491e:	d3f7      	bcc.n	8014910 <quorem+0xf8>
 8014920:	613c      	str	r4, [r7, #16]
 8014922:	e7e7      	b.n	80148f4 <quorem+0xdc>

08014924 <_dtoa_r>:
 8014924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014926:	0016      	movs	r6, r2
 8014928:	001f      	movs	r7, r3
 801492a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801492c:	b09b      	sub	sp, #108	; 0x6c
 801492e:	9002      	str	r0, [sp, #8]
 8014930:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8014932:	9606      	str	r6, [sp, #24]
 8014934:	9707      	str	r7, [sp, #28]
 8014936:	2c00      	cmp	r4, #0
 8014938:	d108      	bne.n	801494c <_dtoa_r+0x28>
 801493a:	2010      	movs	r0, #16
 801493c:	f7fe f9ec 	bl	8012d18 <malloc>
 8014940:	9b02      	ldr	r3, [sp, #8]
 8014942:	6258      	str	r0, [r3, #36]	; 0x24
 8014944:	6044      	str	r4, [r0, #4]
 8014946:	6084      	str	r4, [r0, #8]
 8014948:	6004      	str	r4, [r0, #0]
 801494a:	60c4      	str	r4, [r0, #12]
 801494c:	9b02      	ldr	r3, [sp, #8]
 801494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014950:	6819      	ldr	r1, [r3, #0]
 8014952:	2900      	cmp	r1, #0
 8014954:	d00b      	beq.n	801496e <_dtoa_r+0x4a>
 8014956:	685a      	ldr	r2, [r3, #4]
 8014958:	2301      	movs	r3, #1
 801495a:	4093      	lsls	r3, r2
 801495c:	604a      	str	r2, [r1, #4]
 801495e:	608b      	str	r3, [r1, #8]
 8014960:	9802      	ldr	r0, [sp, #8]
 8014962:	f001 f944 	bl	8015bee <_Bfree>
 8014966:	2200      	movs	r2, #0
 8014968:	9b02      	ldr	r3, [sp, #8]
 801496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	2f00      	cmp	r7, #0
 8014970:	da20      	bge.n	80149b4 <_dtoa_r+0x90>
 8014972:	2301      	movs	r3, #1
 8014974:	602b      	str	r3, [r5, #0]
 8014976:	007b      	lsls	r3, r7, #1
 8014978:	085b      	lsrs	r3, r3, #1
 801497a:	9307      	str	r3, [sp, #28]
 801497c:	9c07      	ldr	r4, [sp, #28]
 801497e:	4bb2      	ldr	r3, [pc, #712]	; (8014c48 <_dtoa_r+0x324>)
 8014980:	0022      	movs	r2, r4
 8014982:	9317      	str	r3, [sp, #92]	; 0x5c
 8014984:	401a      	ands	r2, r3
 8014986:	429a      	cmp	r2, r3
 8014988:	d117      	bne.n	80149ba <_dtoa_r+0x96>
 801498a:	4bb0      	ldr	r3, [pc, #704]	; (8014c4c <_dtoa_r+0x328>)
 801498c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	9b06      	ldr	r3, [sp, #24]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d103      	bne.n	801499e <_dtoa_r+0x7a>
 8014996:	0324      	lsls	r4, r4, #12
 8014998:	d101      	bne.n	801499e <_dtoa_r+0x7a>
 801499a:	f000 fd87 	bl	80154ac <_dtoa_r+0xb88>
 801499e:	4bac      	ldr	r3, [pc, #688]	; (8014c50 <_dtoa_r+0x32c>)
 80149a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80149a2:	9308      	str	r3, [sp, #32]
 80149a4:	2a00      	cmp	r2, #0
 80149a6:	d002      	beq.n	80149ae <_dtoa_r+0x8a>
 80149a8:	4baa      	ldr	r3, [pc, #680]	; (8014c54 <_dtoa_r+0x330>)
 80149aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	9808      	ldr	r0, [sp, #32]
 80149b0:	b01b      	add	sp, #108	; 0x6c
 80149b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149b4:	2300      	movs	r3, #0
 80149b6:	602b      	str	r3, [r5, #0]
 80149b8:	e7e0      	b.n	801497c <_dtoa_r+0x58>
 80149ba:	9e06      	ldr	r6, [sp, #24]
 80149bc:	9f07      	ldr	r7, [sp, #28]
 80149be:	2200      	movs	r2, #0
 80149c0:	2300      	movs	r3, #0
 80149c2:	0030      	movs	r0, r6
 80149c4:	0039      	movs	r1, r7
 80149c6:	f7eb fd3f 	bl	8000448 <__aeabi_dcmpeq>
 80149ca:	1e05      	subs	r5, r0, #0
 80149cc:	d00b      	beq.n	80149e6 <_dtoa_r+0xc2>
 80149ce:	2301      	movs	r3, #1
 80149d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80149d2:	6013      	str	r3, [r2, #0]
 80149d4:	4ba0      	ldr	r3, [pc, #640]	; (8014c58 <_dtoa_r+0x334>)
 80149d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80149d8:	9308      	str	r3, [sp, #32]
 80149da:	2a00      	cmp	r2, #0
 80149dc:	d0e7      	beq.n	80149ae <_dtoa_r+0x8a>
 80149de:	4a9f      	ldr	r2, [pc, #636]	; (8014c5c <_dtoa_r+0x338>)
 80149e0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80149e2:	600a      	str	r2, [r1, #0]
 80149e4:	e7e3      	b.n	80149ae <_dtoa_r+0x8a>
 80149e6:	ab18      	add	r3, sp, #96	; 0x60
 80149e8:	9301      	str	r3, [sp, #4]
 80149ea:	ab19      	add	r3, sp, #100	; 0x64
 80149ec:	9300      	str	r3, [sp, #0]
 80149ee:	0032      	movs	r2, r6
 80149f0:	003b      	movs	r3, r7
 80149f2:	9802      	ldr	r0, [sp, #8]
 80149f4:	f001 fc06 	bl	8016204 <__d2b>
 80149f8:	0063      	lsls	r3, r4, #1
 80149fa:	9003      	str	r0, [sp, #12]
 80149fc:	0d5b      	lsrs	r3, r3, #21
 80149fe:	d074      	beq.n	8014aea <_dtoa_r+0x1c6>
 8014a00:	033a      	lsls	r2, r7, #12
 8014a02:	4c97      	ldr	r4, [pc, #604]	; (8014c60 <_dtoa_r+0x33c>)
 8014a04:	0b12      	lsrs	r2, r2, #12
 8014a06:	4314      	orrs	r4, r2
 8014a08:	0021      	movs	r1, r4
 8014a0a:	4a96      	ldr	r2, [pc, #600]	; (8014c64 <_dtoa_r+0x340>)
 8014a0c:	0030      	movs	r0, r6
 8014a0e:	9516      	str	r5, [sp, #88]	; 0x58
 8014a10:	189e      	adds	r6, r3, r2
 8014a12:	2200      	movs	r2, #0
 8014a14:	4b94      	ldr	r3, [pc, #592]	; (8014c68 <_dtoa_r+0x344>)
 8014a16:	f7ed fb93 	bl	8002140 <__aeabi_dsub>
 8014a1a:	4a94      	ldr	r2, [pc, #592]	; (8014c6c <_dtoa_r+0x348>)
 8014a1c:	4b94      	ldr	r3, [pc, #592]	; (8014c70 <_dtoa_r+0x34c>)
 8014a1e:	f7ed f91d 	bl	8001c5c <__aeabi_dmul>
 8014a22:	4a94      	ldr	r2, [pc, #592]	; (8014c74 <_dtoa_r+0x350>)
 8014a24:	4b94      	ldr	r3, [pc, #592]	; (8014c78 <_dtoa_r+0x354>)
 8014a26:	f7ec f9f3 	bl	8000e10 <__aeabi_dadd>
 8014a2a:	0004      	movs	r4, r0
 8014a2c:	0030      	movs	r0, r6
 8014a2e:	000d      	movs	r5, r1
 8014a30:	f7ed ff20 	bl	8002874 <__aeabi_i2d>
 8014a34:	4a91      	ldr	r2, [pc, #580]	; (8014c7c <_dtoa_r+0x358>)
 8014a36:	4b92      	ldr	r3, [pc, #584]	; (8014c80 <_dtoa_r+0x35c>)
 8014a38:	f7ed f910 	bl	8001c5c <__aeabi_dmul>
 8014a3c:	0002      	movs	r2, r0
 8014a3e:	000b      	movs	r3, r1
 8014a40:	0020      	movs	r0, r4
 8014a42:	0029      	movs	r1, r5
 8014a44:	f7ec f9e4 	bl	8000e10 <__aeabi_dadd>
 8014a48:	0004      	movs	r4, r0
 8014a4a:	000d      	movs	r5, r1
 8014a4c:	f7ed fedc 	bl	8002808 <__aeabi_d2iz>
 8014a50:	2200      	movs	r2, #0
 8014a52:	0007      	movs	r7, r0
 8014a54:	2300      	movs	r3, #0
 8014a56:	0020      	movs	r0, r4
 8014a58:	0029      	movs	r1, r5
 8014a5a:	f7eb fcfb 	bl	8000454 <__aeabi_dcmplt>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d009      	beq.n	8014a76 <_dtoa_r+0x152>
 8014a62:	0038      	movs	r0, r7
 8014a64:	f7ed ff06 	bl	8002874 <__aeabi_i2d>
 8014a68:	002b      	movs	r3, r5
 8014a6a:	0022      	movs	r2, r4
 8014a6c:	f7eb fcec 	bl	8000448 <__aeabi_dcmpeq>
 8014a70:	4243      	negs	r3, r0
 8014a72:	4158      	adcs	r0, r3
 8014a74:	1a3f      	subs	r7, r7, r0
 8014a76:	2301      	movs	r3, #1
 8014a78:	9314      	str	r3, [sp, #80]	; 0x50
 8014a7a:	2f16      	cmp	r7, #22
 8014a7c:	d80d      	bhi.n	8014a9a <_dtoa_r+0x176>
 8014a7e:	4981      	ldr	r1, [pc, #516]	; (8014c84 <_dtoa_r+0x360>)
 8014a80:	00fb      	lsls	r3, r7, #3
 8014a82:	18c9      	adds	r1, r1, r3
 8014a84:	6808      	ldr	r0, [r1, #0]
 8014a86:	6849      	ldr	r1, [r1, #4]
 8014a88:	9a06      	ldr	r2, [sp, #24]
 8014a8a:	9b07      	ldr	r3, [sp, #28]
 8014a8c:	f7eb fcf6 	bl	800047c <__aeabi_dcmpgt>
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d046      	beq.n	8014b22 <_dtoa_r+0x1fe>
 8014a94:	2300      	movs	r3, #0
 8014a96:	3f01      	subs	r7, #1
 8014a98:	9314      	str	r3, [sp, #80]	; 0x50
 8014a9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014a9c:	1b9e      	subs	r6, r3, r6
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa2:	0033      	movs	r3, r6
 8014aa4:	3b01      	subs	r3, #1
 8014aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014aa8:	d504      	bpl.n	8014ab4 <_dtoa_r+0x190>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	1b9b      	subs	r3, r3, r6
 8014aae:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ab4:	2f00      	cmp	r7, #0
 8014ab6:	db36      	blt.n	8014b26 <_dtoa_r+0x202>
 8014ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aba:	9711      	str	r7, [sp, #68]	; 0x44
 8014abc:	19db      	adds	r3, r3, r7
 8014abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	9304      	str	r3, [sp, #16]
 8014ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014ac6:	2401      	movs	r4, #1
 8014ac8:	2b09      	cmp	r3, #9
 8014aca:	d900      	bls.n	8014ace <_dtoa_r+0x1aa>
 8014acc:	e084      	b.n	8014bd8 <_dtoa_r+0x2b4>
 8014ace:	2b05      	cmp	r3, #5
 8014ad0:	dd02      	ble.n	8014ad8 <_dtoa_r+0x1b4>
 8014ad2:	2400      	movs	r4, #0
 8014ad4:	3b04      	subs	r3, #4
 8014ad6:	9320      	str	r3, [sp, #128]	; 0x80
 8014ad8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014ada:	1e98      	subs	r0, r3, #2
 8014adc:	2803      	cmp	r0, #3
 8014ade:	d900      	bls.n	8014ae2 <_dtoa_r+0x1be>
 8014ae0:	e084      	b.n	8014bec <_dtoa_r+0x2c8>
 8014ae2:	f7eb fb21 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014ae6:	7775      	.short	0x7775
 8014ae8:	6a28      	.short	0x6a28
 8014aea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014aec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014aee:	189e      	adds	r6, r3, r2
 8014af0:	4b65      	ldr	r3, [pc, #404]	; (8014c88 <_dtoa_r+0x364>)
 8014af2:	18f2      	adds	r2, r6, r3
 8014af4:	2a20      	cmp	r2, #32
 8014af6:	dd0f      	ble.n	8014b18 <_dtoa_r+0x1f4>
 8014af8:	2340      	movs	r3, #64	; 0x40
 8014afa:	1a9b      	subs	r3, r3, r2
 8014afc:	409c      	lsls	r4, r3
 8014afe:	4b63      	ldr	r3, [pc, #396]	; (8014c8c <_dtoa_r+0x368>)
 8014b00:	9806      	ldr	r0, [sp, #24]
 8014b02:	18f3      	adds	r3, r6, r3
 8014b04:	40d8      	lsrs	r0, r3
 8014b06:	4320      	orrs	r0, r4
 8014b08:	f7ed feee 	bl	80028e8 <__aeabi_ui2d>
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	4c60      	ldr	r4, [pc, #384]	; (8014c90 <_dtoa_r+0x36c>)
 8014b10:	3e01      	subs	r6, #1
 8014b12:	1909      	adds	r1, r1, r4
 8014b14:	9316      	str	r3, [sp, #88]	; 0x58
 8014b16:	e77c      	b.n	8014a12 <_dtoa_r+0xee>
 8014b18:	2320      	movs	r3, #32
 8014b1a:	9806      	ldr	r0, [sp, #24]
 8014b1c:	1a9b      	subs	r3, r3, r2
 8014b1e:	4098      	lsls	r0, r3
 8014b20:	e7f2      	b.n	8014b08 <_dtoa_r+0x1e4>
 8014b22:	9014      	str	r0, [sp, #80]	; 0x50
 8014b24:	e7b9      	b.n	8014a9a <_dtoa_r+0x176>
 8014b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b28:	1bdb      	subs	r3, r3, r7
 8014b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014b2c:	427b      	negs	r3, r7
 8014b2e:	9304      	str	r3, [sp, #16]
 8014b30:	2300      	movs	r3, #0
 8014b32:	9311      	str	r3, [sp, #68]	; 0x44
 8014b34:	e7c6      	b.n	8014ac4 <_dtoa_r+0x1a0>
 8014b36:	2301      	movs	r3, #1
 8014b38:	930d      	str	r3, [sp, #52]	; 0x34
 8014b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	dd59      	ble.n	8014bf4 <_dtoa_r+0x2d0>
 8014b40:	930c      	str	r3, [sp, #48]	; 0x30
 8014b42:	9309      	str	r3, [sp, #36]	; 0x24
 8014b44:	9a02      	ldr	r2, [sp, #8]
 8014b46:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8014b48:	2200      	movs	r2, #0
 8014b4a:	606a      	str	r2, [r5, #4]
 8014b4c:	3204      	adds	r2, #4
 8014b4e:	0010      	movs	r0, r2
 8014b50:	3014      	adds	r0, #20
 8014b52:	6869      	ldr	r1, [r5, #4]
 8014b54:	4298      	cmp	r0, r3
 8014b56:	d952      	bls.n	8014bfe <_dtoa_r+0x2da>
 8014b58:	9802      	ldr	r0, [sp, #8]
 8014b5a:	f001 f810 	bl	8015b7e <_Balloc>
 8014b5e:	9b02      	ldr	r3, [sp, #8]
 8014b60:	6028      	str	r0, [r5, #0]
 8014b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	9308      	str	r3, [sp, #32]
 8014b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6a:	2b0e      	cmp	r3, #14
 8014b6c:	d900      	bls.n	8014b70 <_dtoa_r+0x24c>
 8014b6e:	e10a      	b.n	8014d86 <_dtoa_r+0x462>
 8014b70:	2c00      	cmp	r4, #0
 8014b72:	d100      	bne.n	8014b76 <_dtoa_r+0x252>
 8014b74:	e107      	b.n	8014d86 <_dtoa_r+0x462>
 8014b76:	9b06      	ldr	r3, [sp, #24]
 8014b78:	9c07      	ldr	r4, [sp, #28]
 8014b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8014b7c:	9413      	str	r4, [sp, #76]	; 0x4c
 8014b7e:	2f00      	cmp	r7, #0
 8014b80:	dc00      	bgt.n	8014b84 <_dtoa_r+0x260>
 8014b82:	e089      	b.n	8014c98 <_dtoa_r+0x374>
 8014b84:	210f      	movs	r1, #15
 8014b86:	003a      	movs	r2, r7
 8014b88:	4b3e      	ldr	r3, [pc, #248]	; (8014c84 <_dtoa_r+0x360>)
 8014b8a:	400a      	ands	r2, r1
 8014b8c:	00d2      	lsls	r2, r2, #3
 8014b8e:	189b      	adds	r3, r3, r2
 8014b90:	681d      	ldr	r5, [r3, #0]
 8014b92:	685e      	ldr	r6, [r3, #4]
 8014b94:	2302      	movs	r3, #2
 8014b96:	113c      	asrs	r4, r7, #4
 8014b98:	930e      	str	r3, [sp, #56]	; 0x38
 8014b9a:	06e3      	lsls	r3, r4, #27
 8014b9c:	d50b      	bpl.n	8014bb6 <_dtoa_r+0x292>
 8014b9e:	4b3d      	ldr	r3, [pc, #244]	; (8014c94 <_dtoa_r+0x370>)
 8014ba0:	400c      	ands	r4, r1
 8014ba2:	6a1a      	ldr	r2, [r3, #32]
 8014ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ba8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014baa:	f7ec fc4d 	bl	8001448 <__aeabi_ddiv>
 8014bae:	2303      	movs	r3, #3
 8014bb0:	9006      	str	r0, [sp, #24]
 8014bb2:	9107      	str	r1, [sp, #28]
 8014bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	e03a      	b.n	8014c30 <_dtoa_r+0x30c>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8014bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bc0:	18fb      	adds	r3, r7, r3
 8014bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	dcbb      	bgt.n	8014b44 <_dtoa_r+0x220>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e7b9      	b.n	8014b44 <_dtoa_r+0x220>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	e7b1      	b.n	8014b38 <_dtoa_r+0x214>
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	e7f1      	b.n	8014bbc <_dtoa_r+0x298>
 8014bd8:	2300      	movs	r3, #0
 8014bda:	940d      	str	r4, [sp, #52]	; 0x34
 8014bdc:	9320      	str	r3, [sp, #128]	; 0x80
 8014bde:	3b01      	subs	r3, #1
 8014be0:	2200      	movs	r2, #0
 8014be2:	930c      	str	r3, [sp, #48]	; 0x30
 8014be4:	9309      	str	r3, [sp, #36]	; 0x24
 8014be6:	3313      	adds	r3, #19
 8014be8:	9221      	str	r2, [sp, #132]	; 0x84
 8014bea:	e7ab      	b.n	8014b44 <_dtoa_r+0x220>
 8014bec:	2301      	movs	r3, #1
 8014bee:	930d      	str	r3, [sp, #52]	; 0x34
 8014bf0:	3b02      	subs	r3, #2
 8014bf2:	e7f5      	b.n	8014be0 <_dtoa_r+0x2bc>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8014bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8014bfa:	001a      	movs	r2, r3
 8014bfc:	e7f4      	b.n	8014be8 <_dtoa_r+0x2c4>
 8014bfe:	3101      	adds	r1, #1
 8014c00:	6069      	str	r1, [r5, #4]
 8014c02:	0052      	lsls	r2, r2, #1
 8014c04:	e7a3      	b.n	8014b4e <_dtoa_r+0x22a>
 8014c06:	2301      	movs	r3, #1
 8014c08:	421c      	tst	r4, r3
 8014c0a:	d00e      	beq.n	8014c2a <_dtoa_r+0x306>
 8014c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c0e:	4a21      	ldr	r2, [pc, #132]	; (8014c94 <_dtoa_r+0x370>)
 8014c10:	3301      	adds	r3, #1
 8014c12:	930e      	str	r3, [sp, #56]	; 0x38
 8014c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c16:	0028      	movs	r0, r5
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	189b      	adds	r3, r3, r2
 8014c1c:	0031      	movs	r1, r6
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	f7ed f81b 	bl	8001c5c <__aeabi_dmul>
 8014c26:	0005      	movs	r5, r0
 8014c28:	000e      	movs	r6, r1
 8014c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c2c:	1064      	asrs	r4, r4, #1
 8014c2e:	3301      	adds	r3, #1
 8014c30:	9310      	str	r3, [sp, #64]	; 0x40
 8014c32:	2c00      	cmp	r4, #0
 8014c34:	d1e7      	bne.n	8014c06 <_dtoa_r+0x2e2>
 8014c36:	9806      	ldr	r0, [sp, #24]
 8014c38:	9907      	ldr	r1, [sp, #28]
 8014c3a:	002a      	movs	r2, r5
 8014c3c:	0033      	movs	r3, r6
 8014c3e:	f7ec fc03 	bl	8001448 <__aeabi_ddiv>
 8014c42:	9006      	str	r0, [sp, #24]
 8014c44:	9107      	str	r1, [sp, #28]
 8014c46:	e042      	b.n	8014cce <_dtoa_r+0x3aa>
 8014c48:	7ff00000 	.word	0x7ff00000
 8014c4c:	0000270f 	.word	0x0000270f
 8014c50:	0801996a 	.word	0x0801996a
 8014c54:	0801996d 	.word	0x0801996d
 8014c58:	080197e6 	.word	0x080197e6
 8014c5c:	080197e7 	.word	0x080197e7
 8014c60:	3ff00000 	.word	0x3ff00000
 8014c64:	fffffc01 	.word	0xfffffc01
 8014c68:	3ff80000 	.word	0x3ff80000
 8014c6c:	636f4361 	.word	0x636f4361
 8014c70:	3fd287a7 	.word	0x3fd287a7
 8014c74:	8b60c8b3 	.word	0x8b60c8b3
 8014c78:	3fc68a28 	.word	0x3fc68a28
 8014c7c:	509f79fb 	.word	0x509f79fb
 8014c80:	3fd34413 	.word	0x3fd34413
 8014c84:	08019998 	.word	0x08019998
 8014c88:	00000432 	.word	0x00000432
 8014c8c:	00000412 	.word	0x00000412
 8014c90:	fe100000 	.word	0xfe100000
 8014c94:	08019970 	.word	0x08019970
 8014c98:	2302      	movs	r3, #2
 8014c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8014c9c:	2f00      	cmp	r7, #0
 8014c9e:	d016      	beq.n	8014cce <_dtoa_r+0x3aa>
 8014ca0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ca2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014ca4:	427c      	negs	r4, r7
 8014ca6:	330d      	adds	r3, #13
 8014ca8:	4023      	ands	r3, r4
 8014caa:	4ace      	ldr	r2, [pc, #824]	; (8014fe4 <_dtoa_r+0x6c0>)
 8014cac:	00db      	lsls	r3, r3, #3
 8014cae:	18d3      	adds	r3, r2, r3
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	f7ec ffd2 	bl	8001c5c <__aeabi_dmul>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	2601      	movs	r6, #1
 8014cbc:	001d      	movs	r5, r3
 8014cbe:	9006      	str	r0, [sp, #24]
 8014cc0:	9107      	str	r1, [sp, #28]
 8014cc2:	1124      	asrs	r4, r4, #4
 8014cc4:	2c00      	cmp	r4, #0
 8014cc6:	d000      	beq.n	8014cca <_dtoa_r+0x3a6>
 8014cc8:	e08c      	b.n	8014de4 <_dtoa_r+0x4c0>
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1b9      	bne.n	8014c42 <_dtoa_r+0x31e>
 8014cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d100      	bne.n	8014cd6 <_dtoa_r+0x3b2>
 8014cd4:	e096      	b.n	8014e04 <_dtoa_r+0x4e0>
 8014cd6:	9c06      	ldr	r4, [sp, #24]
 8014cd8:	9d07      	ldr	r5, [sp, #28]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	4bc2      	ldr	r3, [pc, #776]	; (8014fe8 <_dtoa_r+0x6c4>)
 8014cde:	0020      	movs	r0, r4
 8014ce0:	0029      	movs	r1, r5
 8014ce2:	f7eb fbb7 	bl	8000454 <__aeabi_dcmplt>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d100      	bne.n	8014cec <_dtoa_r+0x3c8>
 8014cea:	e08b      	b.n	8014e04 <_dtoa_r+0x4e0>
 8014cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d100      	bne.n	8014cf4 <_dtoa_r+0x3d0>
 8014cf2:	e087      	b.n	8014e04 <_dtoa_r+0x4e0>
 8014cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	dd41      	ble.n	8014d7e <_dtoa_r+0x45a>
 8014cfa:	4bbc      	ldr	r3, [pc, #752]	; (8014fec <_dtoa_r+0x6c8>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	0020      	movs	r0, r4
 8014d00:	0029      	movs	r1, r5
 8014d02:	f7ec ffab 	bl	8001c5c <__aeabi_dmul>
 8014d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d08:	9006      	str	r0, [sp, #24]
 8014d0a:	9107      	str	r1, [sp, #28]
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8014d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d12:	1e7e      	subs	r6, r7, #1
 8014d14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014d16:	9310      	str	r3, [sp, #64]	; 0x40
 8014d18:	f7ed fdac 	bl	8002874 <__aeabi_i2d>
 8014d1c:	9a06      	ldr	r2, [sp, #24]
 8014d1e:	9b07      	ldr	r3, [sp, #28]
 8014d20:	f7ec ff9c 	bl	8001c5c <__aeabi_dmul>
 8014d24:	2200      	movs	r2, #0
 8014d26:	4bb2      	ldr	r3, [pc, #712]	; (8014ff0 <_dtoa_r+0x6cc>)
 8014d28:	f7ec f872 	bl	8000e10 <__aeabi_dadd>
 8014d2c:	4ab1      	ldr	r2, [pc, #708]	; (8014ff4 <_dtoa_r+0x6d0>)
 8014d2e:	900e      	str	r0, [sp, #56]	; 0x38
 8014d30:	910f      	str	r1, [sp, #60]	; 0x3c
 8014d32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014d36:	4694      	mov	ip, r2
 8014d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d3a:	4463      	add	r3, ip
 8014d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8014d3e:	001d      	movs	r5, r3
 8014d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d161      	bne.n	8014e0a <_dtoa_r+0x4e6>
 8014d46:	9806      	ldr	r0, [sp, #24]
 8014d48:	9907      	ldr	r1, [sp, #28]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	4baa      	ldr	r3, [pc, #680]	; (8014ff8 <_dtoa_r+0x6d4>)
 8014d4e:	f7ed f9f7 	bl	8002140 <__aeabi_dsub>
 8014d52:	0022      	movs	r2, r4
 8014d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d56:	9006      	str	r0, [sp, #24]
 8014d58:	9107      	str	r1, [sp, #28]
 8014d5a:	f7eb fb8f 	bl	800047c <__aeabi_dcmpgt>
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d000      	beq.n	8014d64 <_dtoa_r+0x440>
 8014d62:	e2a8      	b.n	80152b6 <_dtoa_r+0x992>
 8014d64:	48a5      	ldr	r0, [pc, #660]	; (8014ffc <_dtoa_r+0x6d8>)
 8014d66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014d68:	4684      	mov	ip, r0
 8014d6a:	4461      	add	r1, ip
 8014d6c:	000b      	movs	r3, r1
 8014d6e:	9806      	ldr	r0, [sp, #24]
 8014d70:	9907      	ldr	r1, [sp, #28]
 8014d72:	0022      	movs	r2, r4
 8014d74:	f7eb fb6e 	bl	8000454 <__aeabi_dcmplt>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d000      	beq.n	8014d7e <_dtoa_r+0x45a>
 8014d7c:	e295      	b.n	80152aa <_dtoa_r+0x986>
 8014d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d82:	9306      	str	r3, [sp, #24]
 8014d84:	9407      	str	r4, [sp, #28]
 8014d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	da00      	bge.n	8014d8e <_dtoa_r+0x46a>
 8014d8c:	e15c      	b.n	8015048 <_dtoa_r+0x724>
 8014d8e:	2f0e      	cmp	r7, #14
 8014d90:	dd00      	ble.n	8014d94 <_dtoa_r+0x470>
 8014d92:	e159      	b.n	8015048 <_dtoa_r+0x724>
 8014d94:	4b93      	ldr	r3, [pc, #588]	; (8014fe4 <_dtoa_r+0x6c0>)
 8014d96:	00fa      	lsls	r2, r7, #3
 8014d98:	189b      	adds	r3, r3, r2
 8014d9a:	685c      	ldr	r4, [r3, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	9304      	str	r3, [sp, #16]
 8014da0:	9405      	str	r4, [sp, #20]
 8014da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	db00      	blt.n	8014daa <_dtoa_r+0x486>
 8014da8:	e0d8      	b.n	8014f5c <_dtoa_r+0x638>
 8014daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	dd00      	ble.n	8014db2 <_dtoa_r+0x48e>
 8014db0:	e0d4      	b.n	8014f5c <_dtoa_r+0x638>
 8014db2:	d000      	beq.n	8014db6 <_dtoa_r+0x492>
 8014db4:	e27d      	b.n	80152b2 <_dtoa_r+0x98e>
 8014db6:	9804      	ldr	r0, [sp, #16]
 8014db8:	9905      	ldr	r1, [sp, #20]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4b8e      	ldr	r3, [pc, #568]	; (8014ff8 <_dtoa_r+0x6d4>)
 8014dbe:	f7ec ff4d 	bl	8001c5c <__aeabi_dmul>
 8014dc2:	9a06      	ldr	r2, [sp, #24]
 8014dc4:	9b07      	ldr	r3, [sp, #28]
 8014dc6:	f7eb fb63 	bl	8000490 <__aeabi_dcmpge>
 8014dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dcc:	9304      	str	r3, [sp, #16]
 8014dce:	001e      	movs	r6, r3
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d000      	beq.n	8014dd6 <_dtoa_r+0x4b2>
 8014dd4:	e24f      	b.n	8015276 <_dtoa_r+0x952>
 8014dd6:	9b08      	ldr	r3, [sp, #32]
 8014dd8:	9a08      	ldr	r2, [sp, #32]
 8014dda:	1c5d      	adds	r5, r3, #1
 8014ddc:	2331      	movs	r3, #49	; 0x31
 8014dde:	3701      	adds	r7, #1
 8014de0:	7013      	strb	r3, [r2, #0]
 8014de2:	e24b      	b.n	801527c <_dtoa_r+0x958>
 8014de4:	4234      	tst	r4, r6
 8014de6:	d00a      	beq.n	8014dfe <_dtoa_r+0x4da>
 8014de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dea:	4a85      	ldr	r2, [pc, #532]	; (8015000 <_dtoa_r+0x6dc>)
 8014dec:	3301      	adds	r3, #1
 8014dee:	930e      	str	r3, [sp, #56]	; 0x38
 8014df0:	00eb      	lsls	r3, r5, #3
 8014df2:	189b      	adds	r3, r3, r2
 8014df4:	681a      	ldr	r2, [r3, #0]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	f7ec ff30 	bl	8001c5c <__aeabi_dmul>
 8014dfc:	0033      	movs	r3, r6
 8014dfe:	1064      	asrs	r4, r4, #1
 8014e00:	3501      	adds	r5, #1
 8014e02:	e75f      	b.n	8014cc4 <_dtoa_r+0x3a0>
 8014e04:	003e      	movs	r6, r7
 8014e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e08:	e784      	b.n	8014d14 <_dtoa_r+0x3f0>
 8014e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e0e:	1e5a      	subs	r2, r3, #1
 8014e10:	4b74      	ldr	r3, [pc, #464]	; (8014fe4 <_dtoa_r+0x6c0>)
 8014e12:	00d2      	lsls	r2, r2, #3
 8014e14:	189b      	adds	r3, r3, r2
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	2900      	cmp	r1, #0
 8014e1c:	d049      	beq.n	8014eb2 <_dtoa_r+0x58e>
 8014e1e:	2000      	movs	r0, #0
 8014e20:	4978      	ldr	r1, [pc, #480]	; (8015004 <_dtoa_r+0x6e0>)
 8014e22:	f7ec fb11 	bl	8001448 <__aeabi_ddiv>
 8014e26:	002b      	movs	r3, r5
 8014e28:	0022      	movs	r2, r4
 8014e2a:	f7ed f989 	bl	8002140 <__aeabi_dsub>
 8014e2e:	9b08      	ldr	r3, [sp, #32]
 8014e30:	900e      	str	r0, [sp, #56]	; 0x38
 8014e32:	910f      	str	r1, [sp, #60]	; 0x3c
 8014e34:	9315      	str	r3, [sp, #84]	; 0x54
 8014e36:	9806      	ldr	r0, [sp, #24]
 8014e38:	9907      	ldr	r1, [sp, #28]
 8014e3a:	f7ed fce5 	bl	8002808 <__aeabi_d2iz>
 8014e3e:	0004      	movs	r4, r0
 8014e40:	f7ed fd18 	bl	8002874 <__aeabi_i2d>
 8014e44:	0002      	movs	r2, r0
 8014e46:	000b      	movs	r3, r1
 8014e48:	9806      	ldr	r0, [sp, #24]
 8014e4a:	9907      	ldr	r1, [sp, #28]
 8014e4c:	f7ed f978 	bl	8002140 <__aeabi_dsub>
 8014e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e52:	3430      	adds	r4, #48	; 0x30
 8014e54:	1c5d      	adds	r5, r3, #1
 8014e56:	701c      	strb	r4, [r3, #0]
 8014e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e5c:	9006      	str	r0, [sp, #24]
 8014e5e:	9107      	str	r1, [sp, #28]
 8014e60:	f7eb faf8 	bl	8000454 <__aeabi_dcmplt>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	d16c      	bne.n	8014f42 <_dtoa_r+0x61e>
 8014e68:	9a06      	ldr	r2, [sp, #24]
 8014e6a:	9b07      	ldr	r3, [sp, #28]
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	495e      	ldr	r1, [pc, #376]	; (8014fe8 <_dtoa_r+0x6c4>)
 8014e70:	f7ed f966 	bl	8002140 <__aeabi_dsub>
 8014e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e78:	f7eb faec 	bl	8000454 <__aeabi_dcmplt>
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d000      	beq.n	8014e82 <_dtoa_r+0x55e>
 8014e80:	e0c3      	b.n	801500a <_dtoa_r+0x6e6>
 8014e82:	9b08      	ldr	r3, [sp, #32]
 8014e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e86:	1aeb      	subs	r3, r5, r3
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	dc00      	bgt.n	8014e8e <_dtoa_r+0x56a>
 8014e8c:	e777      	b.n	8014d7e <_dtoa_r+0x45a>
 8014e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e92:	2200      	movs	r2, #0
 8014e94:	4b55      	ldr	r3, [pc, #340]	; (8014fec <_dtoa_r+0x6c8>)
 8014e96:	f7ec fee1 	bl	8001c5c <__aeabi_dmul>
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	900e      	str	r0, [sp, #56]	; 0x38
 8014e9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8014ea0:	9806      	ldr	r0, [sp, #24]
 8014ea2:	9907      	ldr	r1, [sp, #28]
 8014ea4:	4b51      	ldr	r3, [pc, #324]	; (8014fec <_dtoa_r+0x6c8>)
 8014ea6:	f7ec fed9 	bl	8001c5c <__aeabi_dmul>
 8014eaa:	9515      	str	r5, [sp, #84]	; 0x54
 8014eac:	9006      	str	r0, [sp, #24]
 8014eae:	9107      	str	r1, [sp, #28]
 8014eb0:	e7c1      	b.n	8014e36 <_dtoa_r+0x512>
 8014eb2:	0020      	movs	r0, r4
 8014eb4:	0029      	movs	r1, r5
 8014eb6:	f7ec fed1 	bl	8001c5c <__aeabi_dmul>
 8014eba:	9c08      	ldr	r4, [sp, #32]
 8014ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ebe:	0023      	movs	r3, r4
 8014ec0:	4694      	mov	ip, r2
 8014ec2:	900e      	str	r0, [sp, #56]	; 0x38
 8014ec4:	910f      	str	r1, [sp, #60]	; 0x3c
 8014ec6:	4463      	add	r3, ip
 8014ec8:	9315      	str	r3, [sp, #84]	; 0x54
 8014eca:	9806      	ldr	r0, [sp, #24]
 8014ecc:	9907      	ldr	r1, [sp, #28]
 8014ece:	f7ed fc9b 	bl	8002808 <__aeabi_d2iz>
 8014ed2:	0005      	movs	r5, r0
 8014ed4:	f7ed fcce 	bl	8002874 <__aeabi_i2d>
 8014ed8:	000b      	movs	r3, r1
 8014eda:	0002      	movs	r2, r0
 8014edc:	9806      	ldr	r0, [sp, #24]
 8014ede:	9907      	ldr	r1, [sp, #28]
 8014ee0:	f7ed f92e 	bl	8002140 <__aeabi_dsub>
 8014ee4:	3530      	adds	r5, #48	; 0x30
 8014ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ee8:	7025      	strb	r5, [r4, #0]
 8014eea:	3401      	adds	r4, #1
 8014eec:	9006      	str	r0, [sp, #24]
 8014eee:	9107      	str	r1, [sp, #28]
 8014ef0:	42a3      	cmp	r3, r4
 8014ef2:	d12a      	bne.n	8014f4a <_dtoa_r+0x626>
 8014ef4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014ef6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014ef8:	9a08      	ldr	r2, [sp, #32]
 8014efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014efc:	4694      	mov	ip, r2
 8014efe:	4463      	add	r3, ip
 8014f00:	2200      	movs	r2, #0
 8014f02:	001d      	movs	r5, r3
 8014f04:	4b3f      	ldr	r3, [pc, #252]	; (8015004 <_dtoa_r+0x6e0>)
 8014f06:	f7eb ff83 	bl	8000e10 <__aeabi_dadd>
 8014f0a:	0002      	movs	r2, r0
 8014f0c:	000b      	movs	r3, r1
 8014f0e:	9806      	ldr	r0, [sp, #24]
 8014f10:	9907      	ldr	r1, [sp, #28]
 8014f12:	f7eb fab3 	bl	800047c <__aeabi_dcmpgt>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d000      	beq.n	8014f1c <_dtoa_r+0x5f8>
 8014f1a:	e076      	b.n	801500a <_dtoa_r+0x6e6>
 8014f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f20:	2000      	movs	r0, #0
 8014f22:	4938      	ldr	r1, [pc, #224]	; (8015004 <_dtoa_r+0x6e0>)
 8014f24:	f7ed f90c 	bl	8002140 <__aeabi_dsub>
 8014f28:	0002      	movs	r2, r0
 8014f2a:	000b      	movs	r3, r1
 8014f2c:	9806      	ldr	r0, [sp, #24]
 8014f2e:	9907      	ldr	r1, [sp, #28]
 8014f30:	f7eb fa90 	bl	8000454 <__aeabi_dcmplt>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d100      	bne.n	8014f3a <_dtoa_r+0x616>
 8014f38:	e721      	b.n	8014d7e <_dtoa_r+0x45a>
 8014f3a:	1e6b      	subs	r3, r5, #1
 8014f3c:	781a      	ldrb	r2, [r3, #0]
 8014f3e:	2a30      	cmp	r2, #48	; 0x30
 8014f40:	d001      	beq.n	8014f46 <_dtoa_r+0x622>
 8014f42:	0037      	movs	r7, r6
 8014f44:	e03f      	b.n	8014fc6 <_dtoa_r+0x6a2>
 8014f46:	001d      	movs	r5, r3
 8014f48:	e7f7      	b.n	8014f3a <_dtoa_r+0x616>
 8014f4a:	9806      	ldr	r0, [sp, #24]
 8014f4c:	9907      	ldr	r1, [sp, #28]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	4b26      	ldr	r3, [pc, #152]	; (8014fec <_dtoa_r+0x6c8>)
 8014f52:	f7ec fe83 	bl	8001c5c <__aeabi_dmul>
 8014f56:	9006      	str	r0, [sp, #24]
 8014f58:	9107      	str	r1, [sp, #28]
 8014f5a:	e7b6      	b.n	8014eca <_dtoa_r+0x5a6>
 8014f5c:	9e08      	ldr	r6, [sp, #32]
 8014f5e:	9a04      	ldr	r2, [sp, #16]
 8014f60:	9b05      	ldr	r3, [sp, #20]
 8014f62:	9806      	ldr	r0, [sp, #24]
 8014f64:	9907      	ldr	r1, [sp, #28]
 8014f66:	f7ec fa6f 	bl	8001448 <__aeabi_ddiv>
 8014f6a:	f7ed fc4d 	bl	8002808 <__aeabi_d2iz>
 8014f6e:	0004      	movs	r4, r0
 8014f70:	f7ed fc80 	bl	8002874 <__aeabi_i2d>
 8014f74:	9a04      	ldr	r2, [sp, #16]
 8014f76:	9b05      	ldr	r3, [sp, #20]
 8014f78:	f7ec fe70 	bl	8001c5c <__aeabi_dmul>
 8014f7c:	0002      	movs	r2, r0
 8014f7e:	000b      	movs	r3, r1
 8014f80:	9806      	ldr	r0, [sp, #24]
 8014f82:	9907      	ldr	r1, [sp, #28]
 8014f84:	f7ed f8dc 	bl	8002140 <__aeabi_dsub>
 8014f88:	0023      	movs	r3, r4
 8014f8a:	3330      	adds	r3, #48	; 0x30
 8014f8c:	7033      	strb	r3, [r6, #0]
 8014f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f90:	9b08      	ldr	r3, [sp, #32]
 8014f92:	1c75      	adds	r5, r6, #1
 8014f94:	1aeb      	subs	r3, r5, r3
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d148      	bne.n	801502c <_dtoa_r+0x708>
 8014f9a:	0002      	movs	r2, r0
 8014f9c:	000b      	movs	r3, r1
 8014f9e:	f7eb ff37 	bl	8000e10 <__aeabi_dadd>
 8014fa2:	9a04      	ldr	r2, [sp, #16]
 8014fa4:	9b05      	ldr	r3, [sp, #20]
 8014fa6:	9006      	str	r0, [sp, #24]
 8014fa8:	9107      	str	r1, [sp, #28]
 8014faa:	f7eb fa67 	bl	800047c <__aeabi_dcmpgt>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	d12a      	bne.n	8015008 <_dtoa_r+0x6e4>
 8014fb2:	9a04      	ldr	r2, [sp, #16]
 8014fb4:	9b05      	ldr	r3, [sp, #20]
 8014fb6:	9806      	ldr	r0, [sp, #24]
 8014fb8:	9907      	ldr	r1, [sp, #28]
 8014fba:	f7eb fa45 	bl	8000448 <__aeabi_dcmpeq>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d001      	beq.n	8014fc6 <_dtoa_r+0x6a2>
 8014fc2:	07e3      	lsls	r3, r4, #31
 8014fc4:	d420      	bmi.n	8015008 <_dtoa_r+0x6e4>
 8014fc6:	9903      	ldr	r1, [sp, #12]
 8014fc8:	9802      	ldr	r0, [sp, #8]
 8014fca:	f000 fe10 	bl	8015bee <_Bfree>
 8014fce:	2300      	movs	r3, #0
 8014fd0:	702b      	strb	r3, [r5, #0]
 8014fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014fd4:	3701      	adds	r7, #1
 8014fd6:	601f      	str	r7, [r3, #0]
 8014fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d100      	bne.n	8014fe0 <_dtoa_r+0x6bc>
 8014fde:	e4e6      	b.n	80149ae <_dtoa_r+0x8a>
 8014fe0:	601d      	str	r5, [r3, #0]
 8014fe2:	e4e4      	b.n	80149ae <_dtoa_r+0x8a>
 8014fe4:	08019998 	.word	0x08019998
 8014fe8:	3ff00000 	.word	0x3ff00000
 8014fec:	40240000 	.word	0x40240000
 8014ff0:	401c0000 	.word	0x401c0000
 8014ff4:	fcc00000 	.word	0xfcc00000
 8014ff8:	40140000 	.word	0x40140000
 8014ffc:	7cc00000 	.word	0x7cc00000
 8015000:	08019970 	.word	0x08019970
 8015004:	3fe00000 	.word	0x3fe00000
 8015008:	003e      	movs	r6, r7
 801500a:	1e6b      	subs	r3, r5, #1
 801500c:	781a      	ldrb	r2, [r3, #0]
 801500e:	2a39      	cmp	r2, #57	; 0x39
 8015010:	d106      	bne.n	8015020 <_dtoa_r+0x6fc>
 8015012:	9a08      	ldr	r2, [sp, #32]
 8015014:	429a      	cmp	r2, r3
 8015016:	d107      	bne.n	8015028 <_dtoa_r+0x704>
 8015018:	2330      	movs	r3, #48	; 0x30
 801501a:	7013      	strb	r3, [r2, #0]
 801501c:	0013      	movs	r3, r2
 801501e:	3601      	adds	r6, #1
 8015020:	781a      	ldrb	r2, [r3, #0]
 8015022:	3201      	adds	r2, #1
 8015024:	701a      	strb	r2, [r3, #0]
 8015026:	e78c      	b.n	8014f42 <_dtoa_r+0x61e>
 8015028:	001d      	movs	r5, r3
 801502a:	e7ee      	b.n	801500a <_dtoa_r+0x6e6>
 801502c:	2200      	movs	r2, #0
 801502e:	4ba4      	ldr	r3, [pc, #656]	; (80152c0 <_dtoa_r+0x99c>)
 8015030:	f7ec fe14 	bl	8001c5c <__aeabi_dmul>
 8015034:	2200      	movs	r2, #0
 8015036:	2300      	movs	r3, #0
 8015038:	9006      	str	r0, [sp, #24]
 801503a:	9107      	str	r1, [sp, #28]
 801503c:	002e      	movs	r6, r5
 801503e:	f7eb fa03 	bl	8000448 <__aeabi_dcmpeq>
 8015042:	2800      	cmp	r0, #0
 8015044:	d08b      	beq.n	8014f5e <_dtoa_r+0x63a>
 8015046:	e7be      	b.n	8014fc6 <_dtoa_r+0x6a2>
 8015048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801504a:	2a00      	cmp	r2, #0
 801504c:	d100      	bne.n	8015050 <_dtoa_r+0x72c>
 801504e:	e0da      	b.n	8015206 <_dtoa_r+0x8e2>
 8015050:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015052:	2a01      	cmp	r2, #1
 8015054:	dd00      	ble.n	8015058 <_dtoa_r+0x734>
 8015056:	e0bd      	b.n	80151d4 <_dtoa_r+0x8b0>
 8015058:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801505a:	2a00      	cmp	r2, #0
 801505c:	d100      	bne.n	8015060 <_dtoa_r+0x73c>
 801505e:	e0b5      	b.n	80151cc <_dtoa_r+0x8a8>
 8015060:	4a98      	ldr	r2, [pc, #608]	; (80152c4 <_dtoa_r+0x9a0>)
 8015062:	189b      	adds	r3, r3, r2
 8015064:	9d04      	ldr	r5, [sp, #16]
 8015066:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801506a:	2101      	movs	r1, #1
 801506c:	18d2      	adds	r2, r2, r3
 801506e:	920a      	str	r2, [sp, #40]	; 0x28
 8015070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015072:	9802      	ldr	r0, [sp, #8]
 8015074:	18d3      	adds	r3, r2, r3
 8015076:	930b      	str	r3, [sp, #44]	; 0x2c
 8015078:	f000 fe97 	bl	8015daa <__i2b>
 801507c:	0006      	movs	r6, r0
 801507e:	2c00      	cmp	r4, #0
 8015080:	dd0e      	ble.n	80150a0 <_dtoa_r+0x77c>
 8015082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015084:	2b00      	cmp	r3, #0
 8015086:	dd0b      	ble.n	80150a0 <_dtoa_r+0x77c>
 8015088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801508a:	0023      	movs	r3, r4
 801508c:	4294      	cmp	r4, r2
 801508e:	dd00      	ble.n	8015092 <_dtoa_r+0x76e>
 8015090:	0013      	movs	r3, r2
 8015092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015094:	1ae4      	subs	r4, r4, r3
 8015096:	1ad2      	subs	r2, r2, r3
 8015098:	920a      	str	r2, [sp, #40]	; 0x28
 801509a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	930b      	str	r3, [sp, #44]	; 0x2c
 80150a0:	9b04      	ldr	r3, [sp, #16]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d01f      	beq.n	80150e6 <_dtoa_r+0x7c2>
 80150a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d100      	bne.n	80150ae <_dtoa_r+0x78a>
 80150ac:	e0af      	b.n	801520e <_dtoa_r+0x8ea>
 80150ae:	2d00      	cmp	r5, #0
 80150b0:	d011      	beq.n	80150d6 <_dtoa_r+0x7b2>
 80150b2:	0031      	movs	r1, r6
 80150b4:	002a      	movs	r2, r5
 80150b6:	9802      	ldr	r0, [sp, #8]
 80150b8:	f000 ff10 	bl	8015edc <__pow5mult>
 80150bc:	9a03      	ldr	r2, [sp, #12]
 80150be:	0001      	movs	r1, r0
 80150c0:	0006      	movs	r6, r0
 80150c2:	9802      	ldr	r0, [sp, #8]
 80150c4:	f000 fe7a 	bl	8015dbc <__multiply>
 80150c8:	9903      	ldr	r1, [sp, #12]
 80150ca:	9010      	str	r0, [sp, #64]	; 0x40
 80150cc:	9802      	ldr	r0, [sp, #8]
 80150ce:	f000 fd8e 	bl	8015bee <_Bfree>
 80150d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150d4:	9303      	str	r3, [sp, #12]
 80150d6:	9b04      	ldr	r3, [sp, #16]
 80150d8:	1b5a      	subs	r2, r3, r5
 80150da:	d004      	beq.n	80150e6 <_dtoa_r+0x7c2>
 80150dc:	9903      	ldr	r1, [sp, #12]
 80150de:	9802      	ldr	r0, [sp, #8]
 80150e0:	f000 fefc 	bl	8015edc <__pow5mult>
 80150e4:	9003      	str	r0, [sp, #12]
 80150e6:	2101      	movs	r1, #1
 80150e8:	9802      	ldr	r0, [sp, #8]
 80150ea:	f000 fe5e 	bl	8015daa <__i2b>
 80150ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150f0:	9004      	str	r0, [sp, #16]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d100      	bne.n	80150f8 <_dtoa_r+0x7d4>
 80150f6:	e1e3      	b.n	80154c0 <_dtoa_r+0xb9c>
 80150f8:	001a      	movs	r2, r3
 80150fa:	0001      	movs	r1, r0
 80150fc:	9802      	ldr	r0, [sp, #8]
 80150fe:	f000 feed 	bl	8015edc <__pow5mult>
 8015102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015104:	9004      	str	r0, [sp, #16]
 8015106:	2b01      	cmp	r3, #1
 8015108:	dd00      	ble.n	801510c <_dtoa_r+0x7e8>
 801510a:	e082      	b.n	8015212 <_dtoa_r+0x8ee>
 801510c:	2500      	movs	r5, #0
 801510e:	9b06      	ldr	r3, [sp, #24]
 8015110:	42ab      	cmp	r3, r5
 8015112:	d10e      	bne.n	8015132 <_dtoa_r+0x80e>
 8015114:	9b07      	ldr	r3, [sp, #28]
 8015116:	031b      	lsls	r3, r3, #12
 8015118:	42ab      	cmp	r3, r5
 801511a:	d10a      	bne.n	8015132 <_dtoa_r+0x80e>
 801511c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801511e:	9a07      	ldr	r2, [sp, #28]
 8015120:	4213      	tst	r3, r2
 8015122:	d006      	beq.n	8015132 <_dtoa_r+0x80e>
 8015124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015126:	3501      	adds	r5, #1
 8015128:	3301      	adds	r3, #1
 801512a:	930a      	str	r3, [sp, #40]	; 0x28
 801512c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801512e:	3301      	adds	r3, #1
 8015130:	930b      	str	r3, [sp, #44]	; 0x2c
 8015132:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015134:	2001      	movs	r0, #1
 8015136:	2b00      	cmp	r3, #0
 8015138:	d16c      	bne.n	8015214 <_dtoa_r+0x8f0>
 801513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801513c:	1818      	adds	r0, r3, r0
 801513e:	231f      	movs	r3, #31
 8015140:	4018      	ands	r0, r3
 8015142:	d07e      	beq.n	8015242 <_dtoa_r+0x91e>
 8015144:	3301      	adds	r3, #1
 8015146:	1a1b      	subs	r3, r3, r0
 8015148:	2b04      	cmp	r3, #4
 801514a:	dd70      	ble.n	801522e <_dtoa_r+0x90a>
 801514c:	231c      	movs	r3, #28
 801514e:	1a18      	subs	r0, r3, r0
 8015150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015152:	1824      	adds	r4, r4, r0
 8015154:	181b      	adds	r3, r3, r0
 8015156:	930a      	str	r3, [sp, #40]	; 0x28
 8015158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801515a:	181b      	adds	r3, r3, r0
 801515c:	930b      	str	r3, [sp, #44]	; 0x2c
 801515e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015160:	2b00      	cmp	r3, #0
 8015162:	dd05      	ble.n	8015170 <_dtoa_r+0x84c>
 8015164:	001a      	movs	r2, r3
 8015166:	9903      	ldr	r1, [sp, #12]
 8015168:	9802      	ldr	r0, [sp, #8]
 801516a:	f000 ff09 	bl	8015f80 <__lshift>
 801516e:	9003      	str	r0, [sp, #12]
 8015170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015172:	2b00      	cmp	r3, #0
 8015174:	dd05      	ble.n	8015182 <_dtoa_r+0x85e>
 8015176:	001a      	movs	r2, r3
 8015178:	9904      	ldr	r1, [sp, #16]
 801517a:	9802      	ldr	r0, [sp, #8]
 801517c:	f000 ff00 	bl	8015f80 <__lshift>
 8015180:	9004      	str	r0, [sp, #16]
 8015182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015184:	2b00      	cmp	r3, #0
 8015186:	d05e      	beq.n	8015246 <_dtoa_r+0x922>
 8015188:	9904      	ldr	r1, [sp, #16]
 801518a:	9803      	ldr	r0, [sp, #12]
 801518c:	f000 ff4a 	bl	8016024 <__mcmp>
 8015190:	2800      	cmp	r0, #0
 8015192:	da58      	bge.n	8015246 <_dtoa_r+0x922>
 8015194:	2300      	movs	r3, #0
 8015196:	220a      	movs	r2, #10
 8015198:	9903      	ldr	r1, [sp, #12]
 801519a:	9802      	ldr	r0, [sp, #8]
 801519c:	f000 fd40 	bl	8015c20 <__multadd>
 80151a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151a2:	3f01      	subs	r7, #1
 80151a4:	9003      	str	r0, [sp, #12]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d100      	bne.n	80151ac <_dtoa_r+0x888>
 80151aa:	e190      	b.n	80154ce <_dtoa_r+0xbaa>
 80151ac:	2300      	movs	r3, #0
 80151ae:	0031      	movs	r1, r6
 80151b0:	220a      	movs	r2, #10
 80151b2:	9802      	ldr	r0, [sp, #8]
 80151b4:	f000 fd34 	bl	8015c20 <__multadd>
 80151b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151ba:	0006      	movs	r6, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	dd00      	ble.n	80151c2 <_dtoa_r+0x89e>
 80151c0:	e088      	b.n	80152d4 <_dtoa_r+0x9b0>
 80151c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80151c4:	2b02      	cmp	r3, #2
 80151c6:	dc00      	bgt.n	80151ca <_dtoa_r+0x8a6>
 80151c8:	e084      	b.n	80152d4 <_dtoa_r+0x9b0>
 80151ca:	e044      	b.n	8015256 <_dtoa_r+0x932>
 80151cc:	2336      	movs	r3, #54	; 0x36
 80151ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80151d0:	1a9b      	subs	r3, r3, r2
 80151d2:	e747      	b.n	8015064 <_dtoa_r+0x740>
 80151d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d6:	1e5d      	subs	r5, r3, #1
 80151d8:	9b04      	ldr	r3, [sp, #16]
 80151da:	42ab      	cmp	r3, r5
 80151dc:	db08      	blt.n	80151f0 <_dtoa_r+0x8cc>
 80151de:	1b5d      	subs	r5, r3, r5
 80151e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	da0c      	bge.n	8015200 <_dtoa_r+0x8dc>
 80151e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151ea:	1a9c      	subs	r4, r3, r2
 80151ec:	2300      	movs	r3, #0
 80151ee:	e73b      	b.n	8015068 <_dtoa_r+0x744>
 80151f0:	9b04      	ldr	r3, [sp, #16]
 80151f2:	9504      	str	r5, [sp, #16]
 80151f4:	1aea      	subs	r2, r5, r3
 80151f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151f8:	2500      	movs	r5, #0
 80151fa:	189b      	adds	r3, r3, r2
 80151fc:	9311      	str	r3, [sp, #68]	; 0x44
 80151fe:	e7ef      	b.n	80151e0 <_dtoa_r+0x8bc>
 8015200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015204:	e730      	b.n	8015068 <_dtoa_r+0x744>
 8015206:	9d04      	ldr	r5, [sp, #16]
 8015208:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801520a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801520c:	e737      	b.n	801507e <_dtoa_r+0x75a>
 801520e:	9a04      	ldr	r2, [sp, #16]
 8015210:	e764      	b.n	80150dc <_dtoa_r+0x7b8>
 8015212:	2500      	movs	r5, #0
 8015214:	9b04      	ldr	r3, [sp, #16]
 8015216:	9a04      	ldr	r2, [sp, #16]
 8015218:	691b      	ldr	r3, [r3, #16]
 801521a:	9310      	str	r3, [sp, #64]	; 0x40
 801521c:	3303      	adds	r3, #3
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	18d3      	adds	r3, r2, r3
 8015222:	6858      	ldr	r0, [r3, #4]
 8015224:	f000 fd78 	bl	8015d18 <__hi0bits>
 8015228:	2320      	movs	r3, #32
 801522a:	1a18      	subs	r0, r3, r0
 801522c:	e785      	b.n	801513a <_dtoa_r+0x816>
 801522e:	2b04      	cmp	r3, #4
 8015230:	d095      	beq.n	801515e <_dtoa_r+0x83a>
 8015232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015234:	331c      	adds	r3, #28
 8015236:	18d2      	adds	r2, r2, r3
 8015238:	920a      	str	r2, [sp, #40]	; 0x28
 801523a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801523c:	18e4      	adds	r4, r4, r3
 801523e:	18d3      	adds	r3, r2, r3
 8015240:	e78c      	b.n	801515c <_dtoa_r+0x838>
 8015242:	0003      	movs	r3, r0
 8015244:	e7f5      	b.n	8015232 <_dtoa_r+0x90e>
 8015246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015248:	2b00      	cmp	r3, #0
 801524a:	dc3d      	bgt.n	80152c8 <_dtoa_r+0x9a4>
 801524c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801524e:	2b02      	cmp	r3, #2
 8015250:	dd3a      	ble.n	80152c8 <_dtoa_r+0x9a4>
 8015252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015254:	930c      	str	r3, [sp, #48]	; 0x30
 8015256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10c      	bne.n	8015276 <_dtoa_r+0x952>
 801525c:	9904      	ldr	r1, [sp, #16]
 801525e:	2205      	movs	r2, #5
 8015260:	9802      	ldr	r0, [sp, #8]
 8015262:	f000 fcdd 	bl	8015c20 <__multadd>
 8015266:	9004      	str	r0, [sp, #16]
 8015268:	0001      	movs	r1, r0
 801526a:	9803      	ldr	r0, [sp, #12]
 801526c:	f000 feda 	bl	8016024 <__mcmp>
 8015270:	2800      	cmp	r0, #0
 8015272:	dd00      	ble.n	8015276 <_dtoa_r+0x952>
 8015274:	e5af      	b.n	8014dd6 <_dtoa_r+0x4b2>
 8015276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015278:	9d08      	ldr	r5, [sp, #32]
 801527a:	43df      	mvns	r7, r3
 801527c:	2300      	movs	r3, #0
 801527e:	9309      	str	r3, [sp, #36]	; 0x24
 8015280:	9904      	ldr	r1, [sp, #16]
 8015282:	9802      	ldr	r0, [sp, #8]
 8015284:	f000 fcb3 	bl	8015bee <_Bfree>
 8015288:	2e00      	cmp	r6, #0
 801528a:	d100      	bne.n	801528e <_dtoa_r+0x96a>
 801528c:	e69b      	b.n	8014fc6 <_dtoa_r+0x6a2>
 801528e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015290:	2b00      	cmp	r3, #0
 8015292:	d005      	beq.n	80152a0 <_dtoa_r+0x97c>
 8015294:	42b3      	cmp	r3, r6
 8015296:	d003      	beq.n	80152a0 <_dtoa_r+0x97c>
 8015298:	0019      	movs	r1, r3
 801529a:	9802      	ldr	r0, [sp, #8]
 801529c:	f000 fca7 	bl	8015bee <_Bfree>
 80152a0:	0031      	movs	r1, r6
 80152a2:	9802      	ldr	r0, [sp, #8]
 80152a4:	f000 fca3 	bl	8015bee <_Bfree>
 80152a8:	e68d      	b.n	8014fc6 <_dtoa_r+0x6a2>
 80152aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152ac:	9304      	str	r3, [sp, #16]
 80152ae:	001e      	movs	r6, r3
 80152b0:	e7e1      	b.n	8015276 <_dtoa_r+0x952>
 80152b2:	2300      	movs	r3, #0
 80152b4:	e7fa      	b.n	80152ac <_dtoa_r+0x988>
 80152b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152b8:	0037      	movs	r7, r6
 80152ba:	9304      	str	r3, [sp, #16]
 80152bc:	001e      	movs	r6, r3
 80152be:	e58a      	b.n	8014dd6 <_dtoa_r+0x4b2>
 80152c0:	40240000 	.word	0x40240000
 80152c4:	00000433 	.word	0x00000433
 80152c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d100      	bne.n	80152d0 <_dtoa_r+0x9ac>
 80152ce:	e0b2      	b.n	8015436 <_dtoa_r+0xb12>
 80152d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d2:	930c      	str	r3, [sp, #48]	; 0x30
 80152d4:	2c00      	cmp	r4, #0
 80152d6:	dd05      	ble.n	80152e4 <_dtoa_r+0x9c0>
 80152d8:	0031      	movs	r1, r6
 80152da:	0022      	movs	r2, r4
 80152dc:	9802      	ldr	r0, [sp, #8]
 80152de:	f000 fe4f 	bl	8015f80 <__lshift>
 80152e2:	0006      	movs	r6, r0
 80152e4:	0030      	movs	r0, r6
 80152e6:	2d00      	cmp	r5, #0
 80152e8:	d011      	beq.n	801530e <_dtoa_r+0x9ea>
 80152ea:	6871      	ldr	r1, [r6, #4]
 80152ec:	9802      	ldr	r0, [sp, #8]
 80152ee:	f000 fc46 	bl	8015b7e <_Balloc>
 80152f2:	0031      	movs	r1, r6
 80152f4:	0004      	movs	r4, r0
 80152f6:	6933      	ldr	r3, [r6, #16]
 80152f8:	310c      	adds	r1, #12
 80152fa:	1c9a      	adds	r2, r3, #2
 80152fc:	0092      	lsls	r2, r2, #2
 80152fe:	300c      	adds	r0, #12
 8015300:	f7fd fd3f 	bl	8012d82 <memcpy>
 8015304:	2201      	movs	r2, #1
 8015306:	0021      	movs	r1, r4
 8015308:	9802      	ldr	r0, [sp, #8]
 801530a:	f000 fe39 	bl	8015f80 <__lshift>
 801530e:	9609      	str	r6, [sp, #36]	; 0x24
 8015310:	0006      	movs	r6, r0
 8015312:	9b08      	ldr	r3, [sp, #32]
 8015314:	930a      	str	r3, [sp, #40]	; 0x28
 8015316:	9904      	ldr	r1, [sp, #16]
 8015318:	9803      	ldr	r0, [sp, #12]
 801531a:	f7ff fa7d 	bl	8014818 <quorem>
 801531e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015320:	900d      	str	r0, [sp, #52]	; 0x34
 8015322:	0004      	movs	r4, r0
 8015324:	9803      	ldr	r0, [sp, #12]
 8015326:	f000 fe7d 	bl	8016024 <__mcmp>
 801532a:	0032      	movs	r2, r6
 801532c:	9010      	str	r0, [sp, #64]	; 0x40
 801532e:	9904      	ldr	r1, [sp, #16]
 8015330:	9802      	ldr	r0, [sp, #8]
 8015332:	f000 fe91 	bl	8016058 <__mdiff>
 8015336:	2301      	movs	r3, #1
 8015338:	930b      	str	r3, [sp, #44]	; 0x2c
 801533a:	68c3      	ldr	r3, [r0, #12]
 801533c:	3430      	adds	r4, #48	; 0x30
 801533e:	0005      	movs	r5, r0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d104      	bne.n	801534e <_dtoa_r+0xa2a>
 8015344:	0001      	movs	r1, r0
 8015346:	9803      	ldr	r0, [sp, #12]
 8015348:	f000 fe6c 	bl	8016024 <__mcmp>
 801534c:	900b      	str	r0, [sp, #44]	; 0x2c
 801534e:	0029      	movs	r1, r5
 8015350:	9802      	ldr	r0, [sp, #8]
 8015352:	f000 fc4c 	bl	8015bee <_Bfree>
 8015356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015358:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801535a:	4313      	orrs	r3, r2
 801535c:	d10e      	bne.n	801537c <_dtoa_r+0xa58>
 801535e:	9a06      	ldr	r2, [sp, #24]
 8015360:	3301      	adds	r3, #1
 8015362:	4213      	tst	r3, r2
 8015364:	d10a      	bne.n	801537c <_dtoa_r+0xa58>
 8015366:	2c39      	cmp	r4, #57	; 0x39
 8015368:	d026      	beq.n	80153b8 <_dtoa_r+0xa94>
 801536a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801536c:	2b00      	cmp	r3, #0
 801536e:	dd01      	ble.n	8015374 <_dtoa_r+0xa50>
 8015370:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015372:	3431      	adds	r4, #49	; 0x31
 8015374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015376:	1c5d      	adds	r5, r3, #1
 8015378:	701c      	strb	r4, [r3, #0]
 801537a:	e781      	b.n	8015280 <_dtoa_r+0x95c>
 801537c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801537e:	2b00      	cmp	r3, #0
 8015380:	db07      	blt.n	8015392 <_dtoa_r+0xa6e>
 8015382:	001d      	movs	r5, r3
 8015384:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015386:	431d      	orrs	r5, r3
 8015388:	d122      	bne.n	80153d0 <_dtoa_r+0xaac>
 801538a:	2301      	movs	r3, #1
 801538c:	9a06      	ldr	r2, [sp, #24]
 801538e:	4213      	tst	r3, r2
 8015390:	d11e      	bne.n	80153d0 <_dtoa_r+0xaac>
 8015392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015394:	2b00      	cmp	r3, #0
 8015396:	dded      	ble.n	8015374 <_dtoa_r+0xa50>
 8015398:	9903      	ldr	r1, [sp, #12]
 801539a:	2201      	movs	r2, #1
 801539c:	9802      	ldr	r0, [sp, #8]
 801539e:	f000 fdef 	bl	8015f80 <__lshift>
 80153a2:	9904      	ldr	r1, [sp, #16]
 80153a4:	9003      	str	r0, [sp, #12]
 80153a6:	f000 fe3d 	bl	8016024 <__mcmp>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	dc02      	bgt.n	80153b4 <_dtoa_r+0xa90>
 80153ae:	d1e1      	bne.n	8015374 <_dtoa_r+0xa50>
 80153b0:	07e3      	lsls	r3, r4, #31
 80153b2:	d5df      	bpl.n	8015374 <_dtoa_r+0xa50>
 80153b4:	2c39      	cmp	r4, #57	; 0x39
 80153b6:	d1db      	bne.n	8015370 <_dtoa_r+0xa4c>
 80153b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153bc:	1c5d      	adds	r5, r3, #1
 80153be:	2339      	movs	r3, #57	; 0x39
 80153c0:	7013      	strb	r3, [r2, #0]
 80153c2:	1e6b      	subs	r3, r5, #1
 80153c4:	781a      	ldrb	r2, [r3, #0]
 80153c6:	2a39      	cmp	r2, #57	; 0x39
 80153c8:	d067      	beq.n	801549a <_dtoa_r+0xb76>
 80153ca:	3201      	adds	r2, #1
 80153cc:	701a      	strb	r2, [r3, #0]
 80153ce:	e757      	b.n	8015280 <_dtoa_r+0x95c>
 80153d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153d2:	1c5d      	adds	r5, r3, #1
 80153d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	dd04      	ble.n	80153e4 <_dtoa_r+0xac0>
 80153da:	2c39      	cmp	r4, #57	; 0x39
 80153dc:	d0ec      	beq.n	80153b8 <_dtoa_r+0xa94>
 80153de:	3401      	adds	r4, #1
 80153e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e2:	e7c9      	b.n	8015378 <_dtoa_r+0xa54>
 80153e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153e8:	701c      	strb	r4, [r3, #0]
 80153ea:	9b08      	ldr	r3, [sp, #32]
 80153ec:	1aeb      	subs	r3, r5, r3
 80153ee:	4293      	cmp	r3, r2
 80153f0:	d03e      	beq.n	8015470 <_dtoa_r+0xb4c>
 80153f2:	2300      	movs	r3, #0
 80153f4:	220a      	movs	r2, #10
 80153f6:	9903      	ldr	r1, [sp, #12]
 80153f8:	9802      	ldr	r0, [sp, #8]
 80153fa:	f000 fc11 	bl	8015c20 <__multadd>
 80153fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015400:	9003      	str	r0, [sp, #12]
 8015402:	42b3      	cmp	r3, r6
 8015404:	d109      	bne.n	801541a <_dtoa_r+0xaf6>
 8015406:	2300      	movs	r3, #0
 8015408:	220a      	movs	r2, #10
 801540a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801540c:	9802      	ldr	r0, [sp, #8]
 801540e:	f000 fc07 	bl	8015c20 <__multadd>
 8015412:	9009      	str	r0, [sp, #36]	; 0x24
 8015414:	0006      	movs	r6, r0
 8015416:	950a      	str	r5, [sp, #40]	; 0x28
 8015418:	e77d      	b.n	8015316 <_dtoa_r+0x9f2>
 801541a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801541c:	2300      	movs	r3, #0
 801541e:	220a      	movs	r2, #10
 8015420:	9802      	ldr	r0, [sp, #8]
 8015422:	f000 fbfd 	bl	8015c20 <__multadd>
 8015426:	2300      	movs	r3, #0
 8015428:	9009      	str	r0, [sp, #36]	; 0x24
 801542a:	220a      	movs	r2, #10
 801542c:	0031      	movs	r1, r6
 801542e:	9802      	ldr	r0, [sp, #8]
 8015430:	f000 fbf6 	bl	8015c20 <__multadd>
 8015434:	e7ee      	b.n	8015414 <_dtoa_r+0xaf0>
 8015436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015438:	930c      	str	r3, [sp, #48]	; 0x30
 801543a:	9b08      	ldr	r3, [sp, #32]
 801543c:	9306      	str	r3, [sp, #24]
 801543e:	9904      	ldr	r1, [sp, #16]
 8015440:	9803      	ldr	r0, [sp, #12]
 8015442:	f7ff f9e9 	bl	8014818 <quorem>
 8015446:	9b06      	ldr	r3, [sp, #24]
 8015448:	3030      	adds	r0, #48	; 0x30
 801544a:	1c5d      	adds	r5, r3, #1
 801544c:	7018      	strb	r0, [r3, #0]
 801544e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015450:	9b08      	ldr	r3, [sp, #32]
 8015452:	0004      	movs	r4, r0
 8015454:	1aeb      	subs	r3, r5, r3
 8015456:	429a      	cmp	r2, r3
 8015458:	dd08      	ble.n	801546c <_dtoa_r+0xb48>
 801545a:	2300      	movs	r3, #0
 801545c:	220a      	movs	r2, #10
 801545e:	9903      	ldr	r1, [sp, #12]
 8015460:	9802      	ldr	r0, [sp, #8]
 8015462:	f000 fbdd 	bl	8015c20 <__multadd>
 8015466:	9506      	str	r5, [sp, #24]
 8015468:	9003      	str	r0, [sp, #12]
 801546a:	e7e8      	b.n	801543e <_dtoa_r+0xb1a>
 801546c:	2300      	movs	r3, #0
 801546e:	9309      	str	r3, [sp, #36]	; 0x24
 8015470:	9903      	ldr	r1, [sp, #12]
 8015472:	2201      	movs	r2, #1
 8015474:	9802      	ldr	r0, [sp, #8]
 8015476:	f000 fd83 	bl	8015f80 <__lshift>
 801547a:	9904      	ldr	r1, [sp, #16]
 801547c:	9003      	str	r0, [sp, #12]
 801547e:	f000 fdd1 	bl	8016024 <__mcmp>
 8015482:	2800      	cmp	r0, #0
 8015484:	dc9d      	bgt.n	80153c2 <_dtoa_r+0xa9e>
 8015486:	d101      	bne.n	801548c <_dtoa_r+0xb68>
 8015488:	07e3      	lsls	r3, r4, #31
 801548a:	d49a      	bmi.n	80153c2 <_dtoa_r+0xa9e>
 801548c:	1e6b      	subs	r3, r5, #1
 801548e:	781a      	ldrb	r2, [r3, #0]
 8015490:	2a30      	cmp	r2, #48	; 0x30
 8015492:	d000      	beq.n	8015496 <_dtoa_r+0xb72>
 8015494:	e6f4      	b.n	8015280 <_dtoa_r+0x95c>
 8015496:	001d      	movs	r5, r3
 8015498:	e7f8      	b.n	801548c <_dtoa_r+0xb68>
 801549a:	9a08      	ldr	r2, [sp, #32]
 801549c:	429a      	cmp	r2, r3
 801549e:	d103      	bne.n	80154a8 <_dtoa_r+0xb84>
 80154a0:	2331      	movs	r3, #49	; 0x31
 80154a2:	3701      	adds	r7, #1
 80154a4:	7013      	strb	r3, [r2, #0]
 80154a6:	e6eb      	b.n	8015280 <_dtoa_r+0x95c>
 80154a8:	001d      	movs	r5, r3
 80154aa:	e78a      	b.n	80153c2 <_dtoa_r+0xa9e>
 80154ac:	4b0b      	ldr	r3, [pc, #44]	; (80154dc <_dtoa_r+0xbb8>)
 80154ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	4b0b      	ldr	r3, [pc, #44]	; (80154e0 <_dtoa_r+0xbbc>)
 80154b4:	2a00      	cmp	r2, #0
 80154b6:	d001      	beq.n	80154bc <_dtoa_r+0xb98>
 80154b8:	f7ff fa77 	bl	80149aa <_dtoa_r+0x86>
 80154bc:	f7ff fa77 	bl	80149ae <_dtoa_r+0x8a>
 80154c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	dc00      	bgt.n	80154c8 <_dtoa_r+0xba4>
 80154c6:	e621      	b.n	801510c <_dtoa_r+0x7e8>
 80154c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80154ca:	2001      	movs	r0, #1
 80154cc:	e635      	b.n	801513a <_dtoa_r+0x816>
 80154ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	dcb2      	bgt.n	801543a <_dtoa_r+0xb16>
 80154d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80154d6:	2b02      	cmp	r3, #2
 80154d8:	ddaf      	ble.n	801543a <_dtoa_r+0xb16>
 80154da:	e6bc      	b.n	8015256 <_dtoa_r+0x932>
 80154dc:	08019961 	.word	0x08019961
 80154e0:	08019969 	.word	0x08019969

080154e4 <rshift>:
 80154e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e6:	0004      	movs	r4, r0
 80154e8:	6905      	ldr	r5, [r0, #16]
 80154ea:	3414      	adds	r4, #20
 80154ec:	114b      	asrs	r3, r1, #5
 80154ee:	0026      	movs	r6, r4
 80154f0:	429d      	cmp	r5, r3
 80154f2:	dd14      	ble.n	801551e <rshift+0x3a>
 80154f4:	221f      	movs	r2, #31
 80154f6:	00ad      	lsls	r5, r5, #2
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	4011      	ands	r1, r2
 80154fc:	1965      	adds	r5, r4, r5
 80154fe:	18e3      	adds	r3, r4, r3
 8015500:	0022      	movs	r2, r4
 8015502:	2900      	cmp	r1, #0
 8015504:	d01e      	beq.n	8015544 <rshift+0x60>
 8015506:	cb04      	ldmia	r3!, {r2}
 8015508:	2720      	movs	r7, #32
 801550a:	40ca      	lsrs	r2, r1
 801550c:	46a4      	mov	ip, r4
 801550e:	1a7f      	subs	r7, r7, r1
 8015510:	4666      	mov	r6, ip
 8015512:	429d      	cmp	r5, r3
 8015514:	d80b      	bhi.n	801552e <rshift+0x4a>
 8015516:	6032      	str	r2, [r6, #0]
 8015518:	2a00      	cmp	r2, #0
 801551a:	d000      	beq.n	801551e <rshift+0x3a>
 801551c:	3604      	adds	r6, #4
 801551e:	1b33      	subs	r3, r6, r4
 8015520:	109b      	asrs	r3, r3, #2
 8015522:	6103      	str	r3, [r0, #16]
 8015524:	42a6      	cmp	r6, r4
 8015526:	d101      	bne.n	801552c <rshift+0x48>
 8015528:	2300      	movs	r3, #0
 801552a:	6143      	str	r3, [r0, #20]
 801552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801552e:	681e      	ldr	r6, [r3, #0]
 8015530:	40be      	lsls	r6, r7
 8015532:	4332      	orrs	r2, r6
 8015534:	4666      	mov	r6, ip
 8015536:	c604      	stmia	r6!, {r2}
 8015538:	cb04      	ldmia	r3!, {r2}
 801553a:	46b4      	mov	ip, r6
 801553c:	40ca      	lsrs	r2, r1
 801553e:	e7e7      	b.n	8015510 <rshift+0x2c>
 8015540:	cb02      	ldmia	r3!, {r1}
 8015542:	c202      	stmia	r2!, {r1}
 8015544:	0016      	movs	r6, r2
 8015546:	429d      	cmp	r5, r3
 8015548:	d8fa      	bhi.n	8015540 <rshift+0x5c>
 801554a:	e7e8      	b.n	801551e <rshift+0x3a>

0801554c <__hexdig_fun>:
 801554c:	0003      	movs	r3, r0
 801554e:	3b30      	subs	r3, #48	; 0x30
 8015550:	2b09      	cmp	r3, #9
 8015552:	d803      	bhi.n	801555c <__hexdig_fun+0x10>
 8015554:	3820      	subs	r0, #32
 8015556:	b2c3      	uxtb	r3, r0
 8015558:	0018      	movs	r0, r3
 801555a:	4770      	bx	lr
 801555c:	0003      	movs	r3, r0
 801555e:	3b61      	subs	r3, #97	; 0x61
 8015560:	2b05      	cmp	r3, #5
 8015562:	d801      	bhi.n	8015568 <__hexdig_fun+0x1c>
 8015564:	3847      	subs	r0, #71	; 0x47
 8015566:	e7f6      	b.n	8015556 <__hexdig_fun+0xa>
 8015568:	0002      	movs	r2, r0
 801556a:	3a41      	subs	r2, #65	; 0x41
 801556c:	2300      	movs	r3, #0
 801556e:	2a05      	cmp	r2, #5
 8015570:	d8f2      	bhi.n	8015558 <__hexdig_fun+0xc>
 8015572:	3827      	subs	r0, #39	; 0x27
 8015574:	e7ef      	b.n	8015556 <__hexdig_fun+0xa>

08015576 <__gethex>:
 8015576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015578:	b08d      	sub	sp, #52	; 0x34
 801557a:	9005      	str	r0, [sp, #20]
 801557c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801557e:	9109      	str	r1, [sp, #36]	; 0x24
 8015580:	9202      	str	r2, [sp, #8]
 8015582:	930a      	str	r3, [sp, #40]	; 0x28
 8015584:	f000 fadf 	bl	8015b46 <__localeconv_l>
 8015588:	6803      	ldr	r3, [r0, #0]
 801558a:	0018      	movs	r0, r3
 801558c:	9307      	str	r3, [sp, #28]
 801558e:	f7ea fdc3 	bl	8000118 <strlen>
 8015592:	2202      	movs	r2, #2
 8015594:	9b07      	ldr	r3, [sp, #28]
 8015596:	4252      	negs	r2, r2
 8015598:	181b      	adds	r3, r3, r0
 801559a:	3b01      	subs	r3, #1
 801559c:	781b      	ldrb	r3, [r3, #0]
 801559e:	9004      	str	r0, [sp, #16]
 80155a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80155a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155a4:	6819      	ldr	r1, [r3, #0]
 80155a6:	1c8b      	adds	r3, r1, #2
 80155a8:	1a52      	subs	r2, r2, r1
 80155aa:	18d1      	adds	r1, r2, r3
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	9108      	str	r1, [sp, #32]
 80155b0:	9901      	ldr	r1, [sp, #4]
 80155b2:	3301      	adds	r3, #1
 80155b4:	7808      	ldrb	r0, [r1, #0]
 80155b6:	2830      	cmp	r0, #48	; 0x30
 80155b8:	d0f7      	beq.n	80155aa <__gethex+0x34>
 80155ba:	f7ff ffc7 	bl	801554c <__hexdig_fun>
 80155be:	1e07      	subs	r7, r0, #0
 80155c0:	d000      	beq.n	80155c4 <__gethex+0x4e>
 80155c2:	e06f      	b.n	80156a4 <__gethex+0x12e>
 80155c4:	9a04      	ldr	r2, [sp, #16]
 80155c6:	9907      	ldr	r1, [sp, #28]
 80155c8:	9801      	ldr	r0, [sp, #4]
 80155ca:	f7fe f9b5 	bl	8013938 <strncmp>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d000      	beq.n	80155d4 <__gethex+0x5e>
 80155d2:	e06d      	b.n	80156b0 <__gethex+0x13a>
 80155d4:	9b01      	ldr	r3, [sp, #4]
 80155d6:	9a04      	ldr	r2, [sp, #16]
 80155d8:	189c      	adds	r4, r3, r2
 80155da:	7820      	ldrb	r0, [r4, #0]
 80155dc:	f7ff ffb6 	bl	801554c <__hexdig_fun>
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d069      	beq.n	80156b8 <__gethex+0x142>
 80155e4:	9401      	str	r4, [sp, #4]
 80155e6:	9b01      	ldr	r3, [sp, #4]
 80155e8:	7818      	ldrb	r0, [r3, #0]
 80155ea:	2830      	cmp	r0, #48	; 0x30
 80155ec:	d009      	beq.n	8015602 <__gethex+0x8c>
 80155ee:	f7ff ffad 	bl	801554c <__hexdig_fun>
 80155f2:	4243      	negs	r3, r0
 80155f4:	4143      	adcs	r3, r0
 80155f6:	9303      	str	r3, [sp, #12]
 80155f8:	2301      	movs	r3, #1
 80155fa:	0026      	movs	r6, r4
 80155fc:	9308      	str	r3, [sp, #32]
 80155fe:	9c01      	ldr	r4, [sp, #4]
 8015600:	e004      	b.n	801560c <__gethex+0x96>
 8015602:	9b01      	ldr	r3, [sp, #4]
 8015604:	3301      	adds	r3, #1
 8015606:	9301      	str	r3, [sp, #4]
 8015608:	e7ed      	b.n	80155e6 <__gethex+0x70>
 801560a:	3401      	adds	r4, #1
 801560c:	7820      	ldrb	r0, [r4, #0]
 801560e:	f7ff ff9d 	bl	801554c <__hexdig_fun>
 8015612:	2800      	cmp	r0, #0
 8015614:	d1f9      	bne.n	801560a <__gethex+0x94>
 8015616:	9a04      	ldr	r2, [sp, #16]
 8015618:	9907      	ldr	r1, [sp, #28]
 801561a:	0020      	movs	r0, r4
 801561c:	f7fe f98c 	bl	8013938 <strncmp>
 8015620:	2800      	cmp	r0, #0
 8015622:	d109      	bne.n	8015638 <__gethex+0xc2>
 8015624:	2e00      	cmp	r6, #0
 8015626:	d10a      	bne.n	801563e <__gethex+0xc8>
 8015628:	9b04      	ldr	r3, [sp, #16]
 801562a:	18e4      	adds	r4, r4, r3
 801562c:	0026      	movs	r6, r4
 801562e:	7820      	ldrb	r0, [r4, #0]
 8015630:	f7ff ff8c 	bl	801554c <__hexdig_fun>
 8015634:	2800      	cmp	r0, #0
 8015636:	d139      	bne.n	80156ac <__gethex+0x136>
 8015638:	2700      	movs	r7, #0
 801563a:	42be      	cmp	r6, r7
 801563c:	d001      	beq.n	8015642 <__gethex+0xcc>
 801563e:	1b37      	subs	r7, r6, r4
 8015640:	00bf      	lsls	r7, r7, #2
 8015642:	7823      	ldrb	r3, [r4, #0]
 8015644:	2b50      	cmp	r3, #80	; 0x50
 8015646:	d001      	beq.n	801564c <__gethex+0xd6>
 8015648:	2b70      	cmp	r3, #112	; 0x70
 801564a:	d142      	bne.n	80156d2 <__gethex+0x15c>
 801564c:	7863      	ldrb	r3, [r4, #1]
 801564e:	2b2b      	cmp	r3, #43	; 0x2b
 8015650:	d034      	beq.n	80156bc <__gethex+0x146>
 8015652:	2b2d      	cmp	r3, #45	; 0x2d
 8015654:	d036      	beq.n	80156c4 <__gethex+0x14e>
 8015656:	2300      	movs	r3, #0
 8015658:	1c66      	adds	r6, r4, #1
 801565a:	9306      	str	r3, [sp, #24]
 801565c:	7830      	ldrb	r0, [r6, #0]
 801565e:	f7ff ff75 	bl	801554c <__hexdig_fun>
 8015662:	1e43      	subs	r3, r0, #1
 8015664:	b2db      	uxtb	r3, r3
 8015666:	2b18      	cmp	r3, #24
 8015668:	d833      	bhi.n	80156d2 <__gethex+0x15c>
 801566a:	3810      	subs	r0, #16
 801566c:	0005      	movs	r5, r0
 801566e:	3601      	adds	r6, #1
 8015670:	7830      	ldrb	r0, [r6, #0]
 8015672:	f7ff ff6b 	bl	801554c <__hexdig_fun>
 8015676:	1e43      	subs	r3, r0, #1
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b18      	cmp	r3, #24
 801567c:	d924      	bls.n	80156c8 <__gethex+0x152>
 801567e:	9b06      	ldr	r3, [sp, #24]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d000      	beq.n	8015686 <__gethex+0x110>
 8015684:	426d      	negs	r5, r5
 8015686:	197f      	adds	r7, r7, r5
 8015688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801568a:	601e      	str	r6, [r3, #0]
 801568c:	9b03      	ldr	r3, [sp, #12]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d021      	beq.n	80156d6 <__gethex+0x160>
 8015692:	9b08      	ldr	r3, [sp, #32]
 8015694:	2606      	movs	r6, #6
 8015696:	425a      	negs	r2, r3
 8015698:	4153      	adcs	r3, r2
 801569a:	425b      	negs	r3, r3
 801569c:	401e      	ands	r6, r3
 801569e:	0030      	movs	r0, r6
 80156a0:	b00d      	add	sp, #52	; 0x34
 80156a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a4:	2300      	movs	r3, #0
 80156a6:	9303      	str	r3, [sp, #12]
 80156a8:	001e      	movs	r6, r3
 80156aa:	e7a8      	b.n	80155fe <__gethex+0x88>
 80156ac:	3401      	adds	r4, #1
 80156ae:	e7be      	b.n	801562e <__gethex+0xb8>
 80156b0:	9c01      	ldr	r4, [sp, #4]
 80156b2:	2301      	movs	r3, #1
 80156b4:	9303      	str	r3, [sp, #12]
 80156b6:	e7c4      	b.n	8015642 <__gethex+0xcc>
 80156b8:	0007      	movs	r7, r0
 80156ba:	e7fa      	b.n	80156b2 <__gethex+0x13c>
 80156bc:	2300      	movs	r3, #0
 80156be:	9306      	str	r3, [sp, #24]
 80156c0:	1ca6      	adds	r6, r4, #2
 80156c2:	e7cb      	b.n	801565c <__gethex+0xe6>
 80156c4:	2301      	movs	r3, #1
 80156c6:	e7fa      	b.n	80156be <__gethex+0x148>
 80156c8:	230a      	movs	r3, #10
 80156ca:	435d      	muls	r5, r3
 80156cc:	182d      	adds	r5, r5, r0
 80156ce:	3d10      	subs	r5, #16
 80156d0:	e7cd      	b.n	801566e <__gethex+0xf8>
 80156d2:	0026      	movs	r6, r4
 80156d4:	e7d8      	b.n	8015688 <__gethex+0x112>
 80156d6:	9b01      	ldr	r3, [sp, #4]
 80156d8:	9903      	ldr	r1, [sp, #12]
 80156da:	1ae3      	subs	r3, r4, r3
 80156dc:	3b01      	subs	r3, #1
 80156de:	2b07      	cmp	r3, #7
 80156e0:	dc47      	bgt.n	8015772 <__gethex+0x1fc>
 80156e2:	9805      	ldr	r0, [sp, #20]
 80156e4:	f000 fa4b 	bl	8015b7e <_Balloc>
 80156e8:	0003      	movs	r3, r0
 80156ea:	3314      	adds	r3, #20
 80156ec:	9303      	str	r3, [sp, #12]
 80156ee:	9308      	str	r3, [sp, #32]
 80156f0:	2300      	movs	r3, #0
 80156f2:	0005      	movs	r5, r0
 80156f4:	001e      	movs	r6, r3
 80156f6:	9306      	str	r3, [sp, #24]
 80156f8:	9b01      	ldr	r3, [sp, #4]
 80156fa:	42a3      	cmp	r3, r4
 80156fc:	d33c      	bcc.n	8015778 <__gethex+0x202>
 80156fe:	9c08      	ldr	r4, [sp, #32]
 8015700:	9b03      	ldr	r3, [sp, #12]
 8015702:	c440      	stmia	r4!, {r6}
 8015704:	1ae4      	subs	r4, r4, r3
 8015706:	10a4      	asrs	r4, r4, #2
 8015708:	612c      	str	r4, [r5, #16]
 801570a:	0030      	movs	r0, r6
 801570c:	f000 fb04 	bl	8015d18 <__hi0bits>
 8015710:	9b02      	ldr	r3, [sp, #8]
 8015712:	0164      	lsls	r4, r4, #5
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	1a26      	subs	r6, r4, r0
 8015718:	9301      	str	r3, [sp, #4]
 801571a:	429e      	cmp	r6, r3
 801571c:	dd5f      	ble.n	80157de <__gethex+0x268>
 801571e:	1af6      	subs	r6, r6, r3
 8015720:	0031      	movs	r1, r6
 8015722:	0028      	movs	r0, r5
 8015724:	f000 fdff 	bl	8016326 <__any_on>
 8015728:	1e04      	subs	r4, r0, #0
 801572a:	d00f      	beq.n	801574c <__gethex+0x1d6>
 801572c:	2401      	movs	r4, #1
 801572e:	211f      	movs	r1, #31
 8015730:	0020      	movs	r0, r4
 8015732:	1e73      	subs	r3, r6, #1
 8015734:	4019      	ands	r1, r3
 8015736:	4088      	lsls	r0, r1
 8015738:	0001      	movs	r1, r0
 801573a:	115a      	asrs	r2, r3, #5
 801573c:	9803      	ldr	r0, [sp, #12]
 801573e:	0092      	lsls	r2, r2, #2
 8015740:	5812      	ldr	r2, [r2, r0]
 8015742:	420a      	tst	r2, r1
 8015744:	d002      	beq.n	801574c <__gethex+0x1d6>
 8015746:	42a3      	cmp	r3, r4
 8015748:	dc41      	bgt.n	80157ce <__gethex+0x258>
 801574a:	2402      	movs	r4, #2
 801574c:	0031      	movs	r1, r6
 801574e:	0028      	movs	r0, r5
 8015750:	f7ff fec8 	bl	80154e4 <rshift>
 8015754:	19bf      	adds	r7, r7, r6
 8015756:	9b02      	ldr	r3, [sp, #8]
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	9304      	str	r3, [sp, #16]
 801575c:	42bb      	cmp	r3, r7
 801575e:	da4e      	bge.n	80157fe <__gethex+0x288>
 8015760:	0029      	movs	r1, r5
 8015762:	9805      	ldr	r0, [sp, #20]
 8015764:	f000 fa43 	bl	8015bee <_Bfree>
 8015768:	2300      	movs	r3, #0
 801576a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801576c:	26a3      	movs	r6, #163	; 0xa3
 801576e:	6013      	str	r3, [r2, #0]
 8015770:	e795      	b.n	801569e <__gethex+0x128>
 8015772:	3101      	adds	r1, #1
 8015774:	105b      	asrs	r3, r3, #1
 8015776:	e7b2      	b.n	80156de <__gethex+0x168>
 8015778:	1e63      	subs	r3, r4, #1
 801577a:	9309      	str	r3, [sp, #36]	; 0x24
 801577c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	4293      	cmp	r3, r2
 8015782:	d015      	beq.n	80157b0 <__gethex+0x23a>
 8015784:	9b06      	ldr	r3, [sp, #24]
 8015786:	2b20      	cmp	r3, #32
 8015788:	d105      	bne.n	8015796 <__gethex+0x220>
 801578a:	9b08      	ldr	r3, [sp, #32]
 801578c:	601e      	str	r6, [r3, #0]
 801578e:	2600      	movs	r6, #0
 8015790:	3304      	adds	r3, #4
 8015792:	9308      	str	r3, [sp, #32]
 8015794:	9606      	str	r6, [sp, #24]
 8015796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015798:	7818      	ldrb	r0, [r3, #0]
 801579a:	f7ff fed7 	bl	801554c <__hexdig_fun>
 801579e:	230f      	movs	r3, #15
 80157a0:	4018      	ands	r0, r3
 80157a2:	9b06      	ldr	r3, [sp, #24]
 80157a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80157a6:	4098      	lsls	r0, r3
 80157a8:	3304      	adds	r3, #4
 80157aa:	4306      	orrs	r6, r0
 80157ac:	9306      	str	r3, [sp, #24]
 80157ae:	e7a3      	b.n	80156f8 <__gethex+0x182>
 80157b0:	2301      	movs	r3, #1
 80157b2:	9a04      	ldr	r2, [sp, #16]
 80157b4:	1a9c      	subs	r4, r3, r2
 80157b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b8:	191c      	adds	r4, r3, r4
 80157ba:	9b01      	ldr	r3, [sp, #4]
 80157bc:	429c      	cmp	r4, r3
 80157be:	d3e1      	bcc.n	8015784 <__gethex+0x20e>
 80157c0:	9907      	ldr	r1, [sp, #28]
 80157c2:	0020      	movs	r0, r4
 80157c4:	f7fe f8b8 	bl	8013938 <strncmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d1db      	bne.n	8015784 <__gethex+0x20e>
 80157cc:	e794      	b.n	80156f8 <__gethex+0x182>
 80157ce:	1eb1      	subs	r1, r6, #2
 80157d0:	0028      	movs	r0, r5
 80157d2:	f000 fda8 	bl	8016326 <__any_on>
 80157d6:	2800      	cmp	r0, #0
 80157d8:	d0b7      	beq.n	801574a <__gethex+0x1d4>
 80157da:	2403      	movs	r4, #3
 80157dc:	e7b6      	b.n	801574c <__gethex+0x1d6>
 80157de:	9b01      	ldr	r3, [sp, #4]
 80157e0:	2400      	movs	r4, #0
 80157e2:	429e      	cmp	r6, r3
 80157e4:	dab7      	bge.n	8015756 <__gethex+0x1e0>
 80157e6:	1b9e      	subs	r6, r3, r6
 80157e8:	0029      	movs	r1, r5
 80157ea:	0032      	movs	r2, r6
 80157ec:	9805      	ldr	r0, [sp, #20]
 80157ee:	f000 fbc7 	bl	8015f80 <__lshift>
 80157f2:	0003      	movs	r3, r0
 80157f4:	3314      	adds	r3, #20
 80157f6:	0005      	movs	r5, r0
 80157f8:	1bbf      	subs	r7, r7, r6
 80157fa:	9303      	str	r3, [sp, #12]
 80157fc:	e7ab      	b.n	8015756 <__gethex+0x1e0>
 80157fe:	9b02      	ldr	r3, [sp, #8]
 8015800:	685e      	ldr	r6, [r3, #4]
 8015802:	42be      	cmp	r6, r7
 8015804:	dd6b      	ble.n	80158de <__gethex+0x368>
 8015806:	9b01      	ldr	r3, [sp, #4]
 8015808:	1bf6      	subs	r6, r6, r7
 801580a:	42b3      	cmp	r3, r6
 801580c:	dc32      	bgt.n	8015874 <__gethex+0x2fe>
 801580e:	9b02      	ldr	r3, [sp, #8]
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	2b02      	cmp	r3, #2
 8015814:	d026      	beq.n	8015864 <__gethex+0x2ee>
 8015816:	2b03      	cmp	r3, #3
 8015818:	d028      	beq.n	801586c <__gethex+0x2f6>
 801581a:	2b01      	cmp	r3, #1
 801581c:	d119      	bne.n	8015852 <__gethex+0x2dc>
 801581e:	9b01      	ldr	r3, [sp, #4]
 8015820:	42b3      	cmp	r3, r6
 8015822:	d116      	bne.n	8015852 <__gethex+0x2dc>
 8015824:	2b01      	cmp	r3, #1
 8015826:	dc0d      	bgt.n	8015844 <__gethex+0x2ce>
 8015828:	9b02      	ldr	r3, [sp, #8]
 801582a:	2662      	movs	r6, #98	; 0x62
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	9301      	str	r3, [sp, #4]
 8015830:	9a01      	ldr	r2, [sp, #4]
 8015832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015834:	601a      	str	r2, [r3, #0]
 8015836:	2301      	movs	r3, #1
 8015838:	9a03      	ldr	r2, [sp, #12]
 801583a:	612b      	str	r3, [r5, #16]
 801583c:	6013      	str	r3, [r2, #0]
 801583e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015840:	601d      	str	r5, [r3, #0]
 8015842:	e72c      	b.n	801569e <__gethex+0x128>
 8015844:	9901      	ldr	r1, [sp, #4]
 8015846:	0028      	movs	r0, r5
 8015848:	3901      	subs	r1, #1
 801584a:	f000 fd6c 	bl	8016326 <__any_on>
 801584e:	2800      	cmp	r0, #0
 8015850:	d1ea      	bne.n	8015828 <__gethex+0x2b2>
 8015852:	0029      	movs	r1, r5
 8015854:	9805      	ldr	r0, [sp, #20]
 8015856:	f000 f9ca 	bl	8015bee <_Bfree>
 801585a:	2300      	movs	r3, #0
 801585c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801585e:	2650      	movs	r6, #80	; 0x50
 8015860:	6013      	str	r3, [r2, #0]
 8015862:	e71c      	b.n	801569e <__gethex+0x128>
 8015864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015866:	2b00      	cmp	r3, #0
 8015868:	d0de      	beq.n	8015828 <__gethex+0x2b2>
 801586a:	e7f2      	b.n	8015852 <__gethex+0x2dc>
 801586c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801586e:	2b00      	cmp	r3, #0
 8015870:	d1da      	bne.n	8015828 <__gethex+0x2b2>
 8015872:	e7ee      	b.n	8015852 <__gethex+0x2dc>
 8015874:	1e77      	subs	r7, r6, #1
 8015876:	2c00      	cmp	r4, #0
 8015878:	d12f      	bne.n	80158da <__gethex+0x364>
 801587a:	2f00      	cmp	r7, #0
 801587c:	d004      	beq.n	8015888 <__gethex+0x312>
 801587e:	0039      	movs	r1, r7
 8015880:	0028      	movs	r0, r5
 8015882:	f000 fd50 	bl	8016326 <__any_on>
 8015886:	0004      	movs	r4, r0
 8015888:	231f      	movs	r3, #31
 801588a:	117a      	asrs	r2, r7, #5
 801588c:	401f      	ands	r7, r3
 801588e:	3b1e      	subs	r3, #30
 8015890:	40bb      	lsls	r3, r7
 8015892:	9903      	ldr	r1, [sp, #12]
 8015894:	0092      	lsls	r2, r2, #2
 8015896:	5852      	ldr	r2, [r2, r1]
 8015898:	421a      	tst	r2, r3
 801589a:	d001      	beq.n	80158a0 <__gethex+0x32a>
 801589c:	2302      	movs	r3, #2
 801589e:	431c      	orrs	r4, r3
 80158a0:	9b01      	ldr	r3, [sp, #4]
 80158a2:	0031      	movs	r1, r6
 80158a4:	1b9b      	subs	r3, r3, r6
 80158a6:	2602      	movs	r6, #2
 80158a8:	0028      	movs	r0, r5
 80158aa:	9301      	str	r3, [sp, #4]
 80158ac:	f7ff fe1a 	bl	80154e4 <rshift>
 80158b0:	9b02      	ldr	r3, [sp, #8]
 80158b2:	685f      	ldr	r7, [r3, #4]
 80158b4:	2c00      	cmp	r4, #0
 80158b6:	d040      	beq.n	801593a <__gethex+0x3c4>
 80158b8:	9b02      	ldr	r3, [sp, #8]
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	2b02      	cmp	r3, #2
 80158be:	d010      	beq.n	80158e2 <__gethex+0x36c>
 80158c0:	2b03      	cmp	r3, #3
 80158c2:	d012      	beq.n	80158ea <__gethex+0x374>
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d106      	bne.n	80158d6 <__gethex+0x360>
 80158c8:	07a2      	lsls	r2, r4, #30
 80158ca:	d504      	bpl.n	80158d6 <__gethex+0x360>
 80158cc:	9a03      	ldr	r2, [sp, #12]
 80158ce:	6812      	ldr	r2, [r2, #0]
 80158d0:	4314      	orrs	r4, r2
 80158d2:	421c      	tst	r4, r3
 80158d4:	d10c      	bne.n	80158f0 <__gethex+0x37a>
 80158d6:	2310      	movs	r3, #16
 80158d8:	e02e      	b.n	8015938 <__gethex+0x3c2>
 80158da:	2401      	movs	r4, #1
 80158dc:	e7d4      	b.n	8015888 <__gethex+0x312>
 80158de:	2601      	movs	r6, #1
 80158e0:	e7e8      	b.n	80158b4 <__gethex+0x33e>
 80158e2:	2301      	movs	r3, #1
 80158e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80158e6:	1a9b      	subs	r3, r3, r2
 80158e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80158ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d0f2      	beq.n	80158d6 <__gethex+0x360>
 80158f0:	692c      	ldr	r4, [r5, #16]
 80158f2:	00a3      	lsls	r3, r4, #2
 80158f4:	9304      	str	r3, [sp, #16]
 80158f6:	002b      	movs	r3, r5
 80158f8:	00a2      	lsls	r2, r4, #2
 80158fa:	3314      	adds	r3, #20
 80158fc:	1899      	adds	r1, r3, r2
 80158fe:	2200      	movs	r2, #0
 8015900:	4694      	mov	ip, r2
 8015902:	681a      	ldr	r2, [r3, #0]
 8015904:	1c50      	adds	r0, r2, #1
 8015906:	d01d      	beq.n	8015944 <__gethex+0x3ce>
 8015908:	3201      	adds	r2, #1
 801590a:	601a      	str	r2, [r3, #0]
 801590c:	002b      	movs	r3, r5
 801590e:	3314      	adds	r3, #20
 8015910:	2e02      	cmp	r6, #2
 8015912:	d13a      	bne.n	801598a <__gethex+0x414>
 8015914:	9a02      	ldr	r2, [sp, #8]
 8015916:	9901      	ldr	r1, [sp, #4]
 8015918:	6812      	ldr	r2, [r2, #0]
 801591a:	3a01      	subs	r2, #1
 801591c:	428a      	cmp	r2, r1
 801591e:	d10a      	bne.n	8015936 <__gethex+0x3c0>
 8015920:	114a      	asrs	r2, r1, #5
 8015922:	211f      	movs	r1, #31
 8015924:	9801      	ldr	r0, [sp, #4]
 8015926:	0092      	lsls	r2, r2, #2
 8015928:	4001      	ands	r1, r0
 801592a:	2001      	movs	r0, #1
 801592c:	0004      	movs	r4, r0
 801592e:	408c      	lsls	r4, r1
 8015930:	58d3      	ldr	r3, [r2, r3]
 8015932:	4223      	tst	r3, r4
 8015934:	d148      	bne.n	80159c8 <__gethex+0x452>
 8015936:	2320      	movs	r3, #32
 8015938:	431e      	orrs	r6, r3
 801593a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801593c:	601d      	str	r5, [r3, #0]
 801593e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015940:	601f      	str	r7, [r3, #0]
 8015942:	e6ac      	b.n	801569e <__gethex+0x128>
 8015944:	4662      	mov	r2, ip
 8015946:	c304      	stmia	r3!, {r2}
 8015948:	4299      	cmp	r1, r3
 801594a:	d8da      	bhi.n	8015902 <__gethex+0x38c>
 801594c:	68ab      	ldr	r3, [r5, #8]
 801594e:	429c      	cmp	r4, r3
 8015950:	db12      	blt.n	8015978 <__gethex+0x402>
 8015952:	686b      	ldr	r3, [r5, #4]
 8015954:	9805      	ldr	r0, [sp, #20]
 8015956:	1c59      	adds	r1, r3, #1
 8015958:	f000 f911 	bl	8015b7e <_Balloc>
 801595c:	0029      	movs	r1, r5
 801595e:	692b      	ldr	r3, [r5, #16]
 8015960:	9003      	str	r0, [sp, #12]
 8015962:	1c9a      	adds	r2, r3, #2
 8015964:	0092      	lsls	r2, r2, #2
 8015966:	310c      	adds	r1, #12
 8015968:	300c      	adds	r0, #12
 801596a:	f7fd fa0a 	bl	8012d82 <memcpy>
 801596e:	0029      	movs	r1, r5
 8015970:	9805      	ldr	r0, [sp, #20]
 8015972:	f000 f93c 	bl	8015bee <_Bfree>
 8015976:	9d03      	ldr	r5, [sp, #12]
 8015978:	692b      	ldr	r3, [r5, #16]
 801597a:	1c5a      	adds	r2, r3, #1
 801597c:	612a      	str	r2, [r5, #16]
 801597e:	2201      	movs	r2, #1
 8015980:	3304      	adds	r3, #4
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	18eb      	adds	r3, r5, r3
 8015986:	605a      	str	r2, [r3, #4]
 8015988:	e7c0      	b.n	801590c <__gethex+0x396>
 801598a:	692a      	ldr	r2, [r5, #16]
 801598c:	42a2      	cmp	r2, r4
 801598e:	dd0a      	ble.n	80159a6 <__gethex+0x430>
 8015990:	2101      	movs	r1, #1
 8015992:	0028      	movs	r0, r5
 8015994:	f7ff fda6 	bl	80154e4 <rshift>
 8015998:	9b02      	ldr	r3, [sp, #8]
 801599a:	3701      	adds	r7, #1
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	2601      	movs	r6, #1
 80159a0:	42bb      	cmp	r3, r7
 80159a2:	dac8      	bge.n	8015936 <__gethex+0x3c0>
 80159a4:	e6dc      	b.n	8015760 <__gethex+0x1ea>
 80159a6:	241f      	movs	r4, #31
 80159a8:	9a01      	ldr	r2, [sp, #4]
 80159aa:	2601      	movs	r6, #1
 80159ac:	4022      	ands	r2, r4
 80159ae:	1e14      	subs	r4, r2, #0
 80159b0:	d0c1      	beq.n	8015936 <__gethex+0x3c0>
 80159b2:	9a04      	ldr	r2, [sp, #16]
 80159b4:	189b      	adds	r3, r3, r2
 80159b6:	3b04      	subs	r3, #4
 80159b8:	6818      	ldr	r0, [r3, #0]
 80159ba:	f000 f9ad 	bl	8015d18 <__hi0bits>
 80159be:	2120      	movs	r1, #32
 80159c0:	1b0c      	subs	r4, r1, r4
 80159c2:	42a0      	cmp	r0, r4
 80159c4:	dbe4      	blt.n	8015990 <__gethex+0x41a>
 80159c6:	e7b6      	b.n	8015936 <__gethex+0x3c0>
 80159c8:	0006      	movs	r6, r0
 80159ca:	e7b4      	b.n	8015936 <__gethex+0x3c0>

080159cc <L_shift>:
 80159cc:	2308      	movs	r3, #8
 80159ce:	b570      	push	{r4, r5, r6, lr}
 80159d0:	2520      	movs	r5, #32
 80159d2:	1a9a      	subs	r2, r3, r2
 80159d4:	0092      	lsls	r2, r2, #2
 80159d6:	1aad      	subs	r5, r5, r2
 80159d8:	6843      	ldr	r3, [r0, #4]
 80159da:	6806      	ldr	r6, [r0, #0]
 80159dc:	001c      	movs	r4, r3
 80159de:	40ac      	lsls	r4, r5
 80159e0:	40d3      	lsrs	r3, r2
 80159e2:	4334      	orrs	r4, r6
 80159e4:	6004      	str	r4, [r0, #0]
 80159e6:	6043      	str	r3, [r0, #4]
 80159e8:	3004      	adds	r0, #4
 80159ea:	4288      	cmp	r0, r1
 80159ec:	d3f4      	bcc.n	80159d8 <L_shift+0xc>
 80159ee:	bd70      	pop	{r4, r5, r6, pc}

080159f0 <__match>:
 80159f0:	b530      	push	{r4, r5, lr}
 80159f2:	6803      	ldr	r3, [r0, #0]
 80159f4:	780c      	ldrb	r4, [r1, #0]
 80159f6:	3301      	adds	r3, #1
 80159f8:	2c00      	cmp	r4, #0
 80159fa:	d102      	bne.n	8015a02 <__match+0x12>
 80159fc:	6003      	str	r3, [r0, #0]
 80159fe:	2001      	movs	r0, #1
 8015a00:	bd30      	pop	{r4, r5, pc}
 8015a02:	781a      	ldrb	r2, [r3, #0]
 8015a04:	0015      	movs	r5, r2
 8015a06:	3d41      	subs	r5, #65	; 0x41
 8015a08:	2d19      	cmp	r5, #25
 8015a0a:	d800      	bhi.n	8015a0e <__match+0x1e>
 8015a0c:	3220      	adds	r2, #32
 8015a0e:	3101      	adds	r1, #1
 8015a10:	42a2      	cmp	r2, r4
 8015a12:	d0ef      	beq.n	80159f4 <__match+0x4>
 8015a14:	2000      	movs	r0, #0
 8015a16:	e7f3      	b.n	8015a00 <__match+0x10>

08015a18 <__hexnan>:
 8015a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a1a:	b08b      	sub	sp, #44	; 0x2c
 8015a1c:	9201      	str	r2, [sp, #4]
 8015a1e:	680a      	ldr	r2, [r1, #0]
 8015a20:	9901      	ldr	r1, [sp, #4]
 8015a22:	1153      	asrs	r3, r2, #5
 8015a24:	009b      	lsls	r3, r3, #2
 8015a26:	18cb      	adds	r3, r1, r3
 8015a28:	9304      	str	r3, [sp, #16]
 8015a2a:	231f      	movs	r3, #31
 8015a2c:	401a      	ands	r2, r3
 8015a2e:	9008      	str	r0, [sp, #32]
 8015a30:	9206      	str	r2, [sp, #24]
 8015a32:	d002      	beq.n	8015a3a <__hexnan+0x22>
 8015a34:	9b04      	ldr	r3, [sp, #16]
 8015a36:	3304      	adds	r3, #4
 8015a38:	9304      	str	r3, [sp, #16]
 8015a3a:	9b04      	ldr	r3, [sp, #16]
 8015a3c:	2500      	movs	r5, #0
 8015a3e:	1f1e      	subs	r6, r3, #4
 8015a40:	0037      	movs	r7, r6
 8015a42:	0034      	movs	r4, r6
 8015a44:	9b08      	ldr	r3, [sp, #32]
 8015a46:	6035      	str	r5, [r6, #0]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	9507      	str	r5, [sp, #28]
 8015a4c:	9305      	str	r3, [sp, #20]
 8015a4e:	9502      	str	r5, [sp, #8]
 8015a50:	9b05      	ldr	r3, [sp, #20]
 8015a52:	3301      	adds	r3, #1
 8015a54:	9309      	str	r3, [sp, #36]	; 0x24
 8015a56:	9b05      	ldr	r3, [sp, #20]
 8015a58:	785b      	ldrb	r3, [r3, #1]
 8015a5a:	9303      	str	r3, [sp, #12]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d028      	beq.n	8015ab2 <__hexnan+0x9a>
 8015a60:	9803      	ldr	r0, [sp, #12]
 8015a62:	f7ff fd73 	bl	801554c <__hexdig_fun>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d145      	bne.n	8015af6 <__hexnan+0xde>
 8015a6a:	9b03      	ldr	r3, [sp, #12]
 8015a6c:	2b20      	cmp	r3, #32
 8015a6e:	d819      	bhi.n	8015aa4 <__hexnan+0x8c>
 8015a70:	9b02      	ldr	r3, [sp, #8]
 8015a72:	9a07      	ldr	r2, [sp, #28]
 8015a74:	4293      	cmp	r3, r2
 8015a76:	dd12      	ble.n	8015a9e <__hexnan+0x86>
 8015a78:	42bc      	cmp	r4, r7
 8015a7a:	d206      	bcs.n	8015a8a <__hexnan+0x72>
 8015a7c:	2d07      	cmp	r5, #7
 8015a7e:	dc04      	bgt.n	8015a8a <__hexnan+0x72>
 8015a80:	002a      	movs	r2, r5
 8015a82:	0039      	movs	r1, r7
 8015a84:	0020      	movs	r0, r4
 8015a86:	f7ff ffa1 	bl	80159cc <L_shift>
 8015a8a:	9b01      	ldr	r3, [sp, #4]
 8015a8c:	2508      	movs	r5, #8
 8015a8e:	429c      	cmp	r4, r3
 8015a90:	d905      	bls.n	8015a9e <__hexnan+0x86>
 8015a92:	1f27      	subs	r7, r4, #4
 8015a94:	2500      	movs	r5, #0
 8015a96:	003c      	movs	r4, r7
 8015a98:	9b02      	ldr	r3, [sp, #8]
 8015a9a:	603d      	str	r5, [r7, #0]
 8015a9c:	9307      	str	r3, [sp, #28]
 8015a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa0:	9305      	str	r3, [sp, #20]
 8015aa2:	e7d5      	b.n	8015a50 <__hexnan+0x38>
 8015aa4:	9b03      	ldr	r3, [sp, #12]
 8015aa6:	2b29      	cmp	r3, #41	; 0x29
 8015aa8:	d14a      	bne.n	8015b40 <__hexnan+0x128>
 8015aaa:	9b05      	ldr	r3, [sp, #20]
 8015aac:	9a08      	ldr	r2, [sp, #32]
 8015aae:	3302      	adds	r3, #2
 8015ab0:	6013      	str	r3, [r2, #0]
 8015ab2:	9b02      	ldr	r3, [sp, #8]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d043      	beq.n	8015b40 <__hexnan+0x128>
 8015ab8:	42bc      	cmp	r4, r7
 8015aba:	d206      	bcs.n	8015aca <__hexnan+0xb2>
 8015abc:	2d07      	cmp	r5, #7
 8015abe:	dc04      	bgt.n	8015aca <__hexnan+0xb2>
 8015ac0:	002a      	movs	r2, r5
 8015ac2:	0039      	movs	r1, r7
 8015ac4:	0020      	movs	r0, r4
 8015ac6:	f7ff ff81 	bl	80159cc <L_shift>
 8015aca:	9b01      	ldr	r3, [sp, #4]
 8015acc:	429c      	cmp	r4, r3
 8015ace:	d926      	bls.n	8015b1e <__hexnan+0x106>
 8015ad0:	cc04      	ldmia	r4!, {r2}
 8015ad2:	601a      	str	r2, [r3, #0]
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	42a6      	cmp	r6, r4
 8015ad8:	d2fa      	bcs.n	8015ad0 <__hexnan+0xb8>
 8015ada:	2200      	movs	r2, #0
 8015adc:	c304      	stmia	r3!, {r2}
 8015ade:	429e      	cmp	r6, r3
 8015ae0:	d2fc      	bcs.n	8015adc <__hexnan+0xc4>
 8015ae2:	6833      	ldr	r3, [r6, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d104      	bne.n	8015af2 <__hexnan+0xda>
 8015ae8:	9b01      	ldr	r3, [sp, #4]
 8015aea:	429e      	cmp	r6, r3
 8015aec:	d126      	bne.n	8015b3c <__hexnan+0x124>
 8015aee:	2301      	movs	r3, #1
 8015af0:	6033      	str	r3, [r6, #0]
 8015af2:	2005      	movs	r0, #5
 8015af4:	e025      	b.n	8015b42 <__hexnan+0x12a>
 8015af6:	9b02      	ldr	r3, [sp, #8]
 8015af8:	3501      	adds	r5, #1
 8015afa:	3301      	adds	r3, #1
 8015afc:	9302      	str	r3, [sp, #8]
 8015afe:	2d08      	cmp	r5, #8
 8015b00:	dd06      	ble.n	8015b10 <__hexnan+0xf8>
 8015b02:	9b01      	ldr	r3, [sp, #4]
 8015b04:	429c      	cmp	r4, r3
 8015b06:	d9ca      	bls.n	8015a9e <__hexnan+0x86>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	2501      	movs	r5, #1
 8015b0c:	3c04      	subs	r4, #4
 8015b0e:	6023      	str	r3, [r4, #0]
 8015b10:	220f      	movs	r2, #15
 8015b12:	6823      	ldr	r3, [r4, #0]
 8015b14:	4010      	ands	r0, r2
 8015b16:	011b      	lsls	r3, r3, #4
 8015b18:	4318      	orrs	r0, r3
 8015b1a:	6020      	str	r0, [r4, #0]
 8015b1c:	e7bf      	b.n	8015a9e <__hexnan+0x86>
 8015b1e:	9b06      	ldr	r3, [sp, #24]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d0de      	beq.n	8015ae2 <__hexnan+0xca>
 8015b24:	2120      	movs	r1, #32
 8015b26:	9a06      	ldr	r2, [sp, #24]
 8015b28:	9b04      	ldr	r3, [sp, #16]
 8015b2a:	1a89      	subs	r1, r1, r2
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	4252      	negs	r2, r2
 8015b30:	40ca      	lsrs	r2, r1
 8015b32:	3b04      	subs	r3, #4
 8015b34:	6819      	ldr	r1, [r3, #0]
 8015b36:	400a      	ands	r2, r1
 8015b38:	601a      	str	r2, [r3, #0]
 8015b3a:	e7d2      	b.n	8015ae2 <__hexnan+0xca>
 8015b3c:	3e04      	subs	r6, #4
 8015b3e:	e7d0      	b.n	8015ae2 <__hexnan+0xca>
 8015b40:	2004      	movs	r0, #4
 8015b42:	b00b      	add	sp, #44	; 0x2c
 8015b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b46 <__localeconv_l>:
 8015b46:	30f0      	adds	r0, #240	; 0xf0
 8015b48:	4770      	bx	lr
	...

08015b4c <_localeconv_r>:
 8015b4c:	4b03      	ldr	r3, [pc, #12]	; (8015b5c <_localeconv_r+0x10>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	6a18      	ldr	r0, [r3, #32]
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d100      	bne.n	8015b58 <_localeconv_r+0xc>
 8015b56:	4802      	ldr	r0, [pc, #8]	; (8015b60 <_localeconv_r+0x14>)
 8015b58:	30f0      	adds	r0, #240	; 0xf0
 8015b5a:	4770      	bx	lr
 8015b5c:	200000c4 	.word	0x200000c4
 8015b60:	20000128 	.word	0x20000128

08015b64 <memchr>:
 8015b64:	b2c9      	uxtb	r1, r1
 8015b66:	1882      	adds	r2, r0, r2
 8015b68:	4290      	cmp	r0, r2
 8015b6a:	d101      	bne.n	8015b70 <memchr+0xc>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	4770      	bx	lr
 8015b70:	7803      	ldrb	r3, [r0, #0]
 8015b72:	428b      	cmp	r3, r1
 8015b74:	d0fb      	beq.n	8015b6e <memchr+0xa>
 8015b76:	3001      	adds	r0, #1
 8015b78:	e7f6      	b.n	8015b68 <memchr+0x4>

08015b7a <__malloc_lock>:
 8015b7a:	4770      	bx	lr

08015b7c <__malloc_unlock>:
 8015b7c:	4770      	bx	lr

08015b7e <_Balloc>:
 8015b7e:	b570      	push	{r4, r5, r6, lr}
 8015b80:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b82:	0004      	movs	r4, r0
 8015b84:	000d      	movs	r5, r1
 8015b86:	2e00      	cmp	r6, #0
 8015b88:	d107      	bne.n	8015b9a <_Balloc+0x1c>
 8015b8a:	2010      	movs	r0, #16
 8015b8c:	f7fd f8c4 	bl	8012d18 <malloc>
 8015b90:	6260      	str	r0, [r4, #36]	; 0x24
 8015b92:	6046      	str	r6, [r0, #4]
 8015b94:	6086      	str	r6, [r0, #8]
 8015b96:	6006      	str	r6, [r0, #0]
 8015b98:	60c6      	str	r6, [r0, #12]
 8015b9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b9c:	68f3      	ldr	r3, [r6, #12]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d013      	beq.n	8015bca <_Balloc+0x4c>
 8015ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ba4:	00aa      	lsls	r2, r5, #2
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	189b      	adds	r3, r3, r2
 8015baa:	6818      	ldr	r0, [r3, #0]
 8015bac:	2800      	cmp	r0, #0
 8015bae:	d118      	bne.n	8015be2 <_Balloc+0x64>
 8015bb0:	2101      	movs	r1, #1
 8015bb2:	000e      	movs	r6, r1
 8015bb4:	40ae      	lsls	r6, r5
 8015bb6:	1d72      	adds	r2, r6, #5
 8015bb8:	0092      	lsls	r2, r2, #2
 8015bba:	0020      	movs	r0, r4
 8015bbc:	f000 fbd5 	bl	801636a <_calloc_r>
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d00c      	beq.n	8015bde <_Balloc+0x60>
 8015bc4:	6045      	str	r5, [r0, #4]
 8015bc6:	6086      	str	r6, [r0, #8]
 8015bc8:	e00d      	b.n	8015be6 <_Balloc+0x68>
 8015bca:	2221      	movs	r2, #33	; 0x21
 8015bcc:	2104      	movs	r1, #4
 8015bce:	0020      	movs	r0, r4
 8015bd0:	f000 fbcb 	bl	801636a <_calloc_r>
 8015bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bd6:	60f0      	str	r0, [r6, #12]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d1e1      	bne.n	8015ba2 <_Balloc+0x24>
 8015bde:	2000      	movs	r0, #0
 8015be0:	bd70      	pop	{r4, r5, r6, pc}
 8015be2:	6802      	ldr	r2, [r0, #0]
 8015be4:	601a      	str	r2, [r3, #0]
 8015be6:	2300      	movs	r3, #0
 8015be8:	6103      	str	r3, [r0, #16]
 8015bea:	60c3      	str	r3, [r0, #12]
 8015bec:	e7f8      	b.n	8015be0 <_Balloc+0x62>

08015bee <_Bfree>:
 8015bee:	b570      	push	{r4, r5, r6, lr}
 8015bf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015bf2:	0006      	movs	r6, r0
 8015bf4:	000d      	movs	r5, r1
 8015bf6:	2c00      	cmp	r4, #0
 8015bf8:	d107      	bne.n	8015c0a <_Bfree+0x1c>
 8015bfa:	2010      	movs	r0, #16
 8015bfc:	f7fd f88c 	bl	8012d18 <malloc>
 8015c00:	6270      	str	r0, [r6, #36]	; 0x24
 8015c02:	6044      	str	r4, [r0, #4]
 8015c04:	6084      	str	r4, [r0, #8]
 8015c06:	6004      	str	r4, [r0, #0]
 8015c08:	60c4      	str	r4, [r0, #12]
 8015c0a:	2d00      	cmp	r5, #0
 8015c0c:	d007      	beq.n	8015c1e <_Bfree+0x30>
 8015c0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015c10:	686a      	ldr	r2, [r5, #4]
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	0092      	lsls	r2, r2, #2
 8015c16:	189b      	adds	r3, r3, r2
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	602a      	str	r2, [r5, #0]
 8015c1c:	601d      	str	r5, [r3, #0]
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}

08015c20 <__multadd>:
 8015c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c22:	001e      	movs	r6, r3
 8015c24:	2314      	movs	r3, #20
 8015c26:	469c      	mov	ip, r3
 8015c28:	0007      	movs	r7, r0
 8015c2a:	000c      	movs	r4, r1
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	690d      	ldr	r5, [r1, #16]
 8015c30:	448c      	add	ip, r1
 8015c32:	4663      	mov	r3, ip
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	3001      	adds	r0, #1
 8015c38:	b299      	uxth	r1, r3
 8015c3a:	4663      	mov	r3, ip
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	4351      	muls	r1, r2
 8015c40:	0c1b      	lsrs	r3, r3, #16
 8015c42:	4353      	muls	r3, r2
 8015c44:	1989      	adds	r1, r1, r6
 8015c46:	0c0e      	lsrs	r6, r1, #16
 8015c48:	199b      	adds	r3, r3, r6
 8015c4a:	b289      	uxth	r1, r1
 8015c4c:	0c1e      	lsrs	r6, r3, #16
 8015c4e:	041b      	lsls	r3, r3, #16
 8015c50:	185b      	adds	r3, r3, r1
 8015c52:	4661      	mov	r1, ip
 8015c54:	c108      	stmia	r1!, {r3}
 8015c56:	468c      	mov	ip, r1
 8015c58:	4285      	cmp	r5, r0
 8015c5a:	dcea      	bgt.n	8015c32 <__multadd+0x12>
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	d01b      	beq.n	8015c98 <__multadd+0x78>
 8015c60:	68a3      	ldr	r3, [r4, #8]
 8015c62:	42ab      	cmp	r3, r5
 8015c64:	dc12      	bgt.n	8015c8c <__multadd+0x6c>
 8015c66:	6863      	ldr	r3, [r4, #4]
 8015c68:	0038      	movs	r0, r7
 8015c6a:	1c59      	adds	r1, r3, #1
 8015c6c:	f7ff ff87 	bl	8015b7e <_Balloc>
 8015c70:	0021      	movs	r1, r4
 8015c72:	6923      	ldr	r3, [r4, #16]
 8015c74:	9001      	str	r0, [sp, #4]
 8015c76:	1c9a      	adds	r2, r3, #2
 8015c78:	0092      	lsls	r2, r2, #2
 8015c7a:	310c      	adds	r1, #12
 8015c7c:	300c      	adds	r0, #12
 8015c7e:	f7fd f880 	bl	8012d82 <memcpy>
 8015c82:	0021      	movs	r1, r4
 8015c84:	0038      	movs	r0, r7
 8015c86:	f7ff ffb2 	bl	8015bee <_Bfree>
 8015c8a:	9c01      	ldr	r4, [sp, #4]
 8015c8c:	1d2b      	adds	r3, r5, #4
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	18e3      	adds	r3, r4, r3
 8015c92:	3501      	adds	r5, #1
 8015c94:	605e      	str	r6, [r3, #4]
 8015c96:	6125      	str	r5, [r4, #16]
 8015c98:	0020      	movs	r0, r4
 8015c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08015c9c <__s2b>:
 8015c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c9e:	0006      	movs	r6, r0
 8015ca0:	0018      	movs	r0, r3
 8015ca2:	000c      	movs	r4, r1
 8015ca4:	3008      	adds	r0, #8
 8015ca6:	2109      	movs	r1, #9
 8015ca8:	9301      	str	r3, [sp, #4]
 8015caa:	0015      	movs	r5, r2
 8015cac:	f7ea fad0 	bl	8000250 <__divsi3>
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	4283      	cmp	r3, r0
 8015cb6:	db1f      	blt.n	8015cf8 <__s2b+0x5c>
 8015cb8:	0030      	movs	r0, r6
 8015cba:	f7ff ff60 	bl	8015b7e <_Balloc>
 8015cbe:	9b08      	ldr	r3, [sp, #32]
 8015cc0:	6143      	str	r3, [r0, #20]
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	6103      	str	r3, [r0, #16]
 8015cc6:	2d09      	cmp	r5, #9
 8015cc8:	dd19      	ble.n	8015cfe <__s2b+0x62>
 8015cca:	0023      	movs	r3, r4
 8015ccc:	3309      	adds	r3, #9
 8015cce:	001f      	movs	r7, r3
 8015cd0:	9300      	str	r3, [sp, #0]
 8015cd2:	1964      	adds	r4, r4, r5
 8015cd4:	783b      	ldrb	r3, [r7, #0]
 8015cd6:	0001      	movs	r1, r0
 8015cd8:	3b30      	subs	r3, #48	; 0x30
 8015cda:	220a      	movs	r2, #10
 8015cdc:	0030      	movs	r0, r6
 8015cde:	3701      	adds	r7, #1
 8015ce0:	f7ff ff9e 	bl	8015c20 <__multadd>
 8015ce4:	42a7      	cmp	r7, r4
 8015ce6:	d1f5      	bne.n	8015cd4 <__s2b+0x38>
 8015ce8:	9b00      	ldr	r3, [sp, #0]
 8015cea:	195c      	adds	r4, r3, r5
 8015cec:	3c08      	subs	r4, #8
 8015cee:	002f      	movs	r7, r5
 8015cf0:	9b01      	ldr	r3, [sp, #4]
 8015cf2:	429f      	cmp	r7, r3
 8015cf4:	db06      	blt.n	8015d04 <__s2b+0x68>
 8015cf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015cf8:	005b      	lsls	r3, r3, #1
 8015cfa:	3101      	adds	r1, #1
 8015cfc:	e7da      	b.n	8015cb4 <__s2b+0x18>
 8015cfe:	340a      	adds	r4, #10
 8015d00:	2509      	movs	r5, #9
 8015d02:	e7f4      	b.n	8015cee <__s2b+0x52>
 8015d04:	1b63      	subs	r3, r4, r5
 8015d06:	5ddb      	ldrb	r3, [r3, r7]
 8015d08:	0001      	movs	r1, r0
 8015d0a:	3b30      	subs	r3, #48	; 0x30
 8015d0c:	220a      	movs	r2, #10
 8015d0e:	0030      	movs	r0, r6
 8015d10:	f7ff ff86 	bl	8015c20 <__multadd>
 8015d14:	3701      	adds	r7, #1
 8015d16:	e7eb      	b.n	8015cf0 <__s2b+0x54>

08015d18 <__hi0bits>:
 8015d18:	0003      	movs	r3, r0
 8015d1a:	0c02      	lsrs	r2, r0, #16
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	4282      	cmp	r2, r0
 8015d20:	d101      	bne.n	8015d26 <__hi0bits+0xe>
 8015d22:	041b      	lsls	r3, r3, #16
 8015d24:	3010      	adds	r0, #16
 8015d26:	0e1a      	lsrs	r2, r3, #24
 8015d28:	d101      	bne.n	8015d2e <__hi0bits+0x16>
 8015d2a:	3008      	adds	r0, #8
 8015d2c:	021b      	lsls	r3, r3, #8
 8015d2e:	0f1a      	lsrs	r2, r3, #28
 8015d30:	d101      	bne.n	8015d36 <__hi0bits+0x1e>
 8015d32:	3004      	adds	r0, #4
 8015d34:	011b      	lsls	r3, r3, #4
 8015d36:	0f9a      	lsrs	r2, r3, #30
 8015d38:	d101      	bne.n	8015d3e <__hi0bits+0x26>
 8015d3a:	3002      	adds	r0, #2
 8015d3c:	009b      	lsls	r3, r3, #2
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	db03      	blt.n	8015d4a <__hi0bits+0x32>
 8015d42:	3001      	adds	r0, #1
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	d400      	bmi.n	8015d4a <__hi0bits+0x32>
 8015d48:	2020      	movs	r0, #32
 8015d4a:	4770      	bx	lr

08015d4c <__lo0bits>:
 8015d4c:	2207      	movs	r2, #7
 8015d4e:	6803      	ldr	r3, [r0, #0]
 8015d50:	b510      	push	{r4, lr}
 8015d52:	0001      	movs	r1, r0
 8015d54:	401a      	ands	r2, r3
 8015d56:	d00d      	beq.n	8015d74 <__lo0bits+0x28>
 8015d58:	2401      	movs	r4, #1
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	4223      	tst	r3, r4
 8015d5e:	d105      	bne.n	8015d6c <__lo0bits+0x20>
 8015d60:	3002      	adds	r0, #2
 8015d62:	4203      	tst	r3, r0
 8015d64:	d003      	beq.n	8015d6e <__lo0bits+0x22>
 8015d66:	40e3      	lsrs	r3, r4
 8015d68:	0020      	movs	r0, r4
 8015d6a:	600b      	str	r3, [r1, #0]
 8015d6c:	bd10      	pop	{r4, pc}
 8015d6e:	089b      	lsrs	r3, r3, #2
 8015d70:	600b      	str	r3, [r1, #0]
 8015d72:	e7fb      	b.n	8015d6c <__lo0bits+0x20>
 8015d74:	b29c      	uxth	r4, r3
 8015d76:	0010      	movs	r0, r2
 8015d78:	2c00      	cmp	r4, #0
 8015d7a:	d101      	bne.n	8015d80 <__lo0bits+0x34>
 8015d7c:	2010      	movs	r0, #16
 8015d7e:	0c1b      	lsrs	r3, r3, #16
 8015d80:	b2da      	uxtb	r2, r3
 8015d82:	2a00      	cmp	r2, #0
 8015d84:	d101      	bne.n	8015d8a <__lo0bits+0x3e>
 8015d86:	3008      	adds	r0, #8
 8015d88:	0a1b      	lsrs	r3, r3, #8
 8015d8a:	071a      	lsls	r2, r3, #28
 8015d8c:	d101      	bne.n	8015d92 <__lo0bits+0x46>
 8015d8e:	3004      	adds	r0, #4
 8015d90:	091b      	lsrs	r3, r3, #4
 8015d92:	079a      	lsls	r2, r3, #30
 8015d94:	d101      	bne.n	8015d9a <__lo0bits+0x4e>
 8015d96:	3002      	adds	r0, #2
 8015d98:	089b      	lsrs	r3, r3, #2
 8015d9a:	07da      	lsls	r2, r3, #31
 8015d9c:	d4e8      	bmi.n	8015d70 <__lo0bits+0x24>
 8015d9e:	085b      	lsrs	r3, r3, #1
 8015da0:	d001      	beq.n	8015da6 <__lo0bits+0x5a>
 8015da2:	3001      	adds	r0, #1
 8015da4:	e7e4      	b.n	8015d70 <__lo0bits+0x24>
 8015da6:	2020      	movs	r0, #32
 8015da8:	e7e0      	b.n	8015d6c <__lo0bits+0x20>

08015daa <__i2b>:
 8015daa:	b510      	push	{r4, lr}
 8015dac:	000c      	movs	r4, r1
 8015dae:	2101      	movs	r1, #1
 8015db0:	f7ff fee5 	bl	8015b7e <_Balloc>
 8015db4:	2301      	movs	r3, #1
 8015db6:	6144      	str	r4, [r0, #20]
 8015db8:	6103      	str	r3, [r0, #16]
 8015dba:	bd10      	pop	{r4, pc}

08015dbc <__multiply>:
 8015dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dbe:	690b      	ldr	r3, [r1, #16]
 8015dc0:	0014      	movs	r4, r2
 8015dc2:	6912      	ldr	r2, [r2, #16]
 8015dc4:	b089      	sub	sp, #36	; 0x24
 8015dc6:	000d      	movs	r5, r1
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	da01      	bge.n	8015dd0 <__multiply+0x14>
 8015dcc:	0025      	movs	r5, r4
 8015dce:	000c      	movs	r4, r1
 8015dd0:	692f      	ldr	r7, [r5, #16]
 8015dd2:	6926      	ldr	r6, [r4, #16]
 8015dd4:	6869      	ldr	r1, [r5, #4]
 8015dd6:	19bb      	adds	r3, r7, r6
 8015dd8:	9302      	str	r3, [sp, #8]
 8015dda:	68ab      	ldr	r3, [r5, #8]
 8015ddc:	19ba      	adds	r2, r7, r6
 8015dde:	4293      	cmp	r3, r2
 8015de0:	da00      	bge.n	8015de4 <__multiply+0x28>
 8015de2:	3101      	adds	r1, #1
 8015de4:	f7ff fecb 	bl	8015b7e <_Balloc>
 8015de8:	0002      	movs	r2, r0
 8015dea:	19bb      	adds	r3, r7, r6
 8015dec:	3214      	adds	r2, #20
 8015dee:	009b      	lsls	r3, r3, #2
 8015df0:	18d3      	adds	r3, r2, r3
 8015df2:	469c      	mov	ip, r3
 8015df4:	2100      	movs	r1, #0
 8015df6:	0013      	movs	r3, r2
 8015df8:	9004      	str	r0, [sp, #16]
 8015dfa:	4563      	cmp	r3, ip
 8015dfc:	d31d      	bcc.n	8015e3a <__multiply+0x7e>
 8015dfe:	3514      	adds	r5, #20
 8015e00:	00bf      	lsls	r7, r7, #2
 8015e02:	19eb      	adds	r3, r5, r7
 8015e04:	3414      	adds	r4, #20
 8015e06:	00b6      	lsls	r6, r6, #2
 8015e08:	9305      	str	r3, [sp, #20]
 8015e0a:	19a3      	adds	r3, r4, r6
 8015e0c:	9503      	str	r5, [sp, #12]
 8015e0e:	9401      	str	r4, [sp, #4]
 8015e10:	9307      	str	r3, [sp, #28]
 8015e12:	9b07      	ldr	r3, [sp, #28]
 8015e14:	9901      	ldr	r1, [sp, #4]
 8015e16:	4299      	cmp	r1, r3
 8015e18:	d311      	bcc.n	8015e3e <__multiply+0x82>
 8015e1a:	9b02      	ldr	r3, [sp, #8]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	dd06      	ble.n	8015e2e <__multiply+0x72>
 8015e20:	2304      	movs	r3, #4
 8015e22:	425b      	negs	r3, r3
 8015e24:	449c      	add	ip, r3
 8015e26:	4663      	mov	r3, ip
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d051      	beq.n	8015ed2 <__multiply+0x116>
 8015e2e:	9b04      	ldr	r3, [sp, #16]
 8015e30:	9a02      	ldr	r2, [sp, #8]
 8015e32:	0018      	movs	r0, r3
 8015e34:	611a      	str	r2, [r3, #16]
 8015e36:	b009      	add	sp, #36	; 0x24
 8015e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e3a:	c302      	stmia	r3!, {r1}
 8015e3c:	e7dd      	b.n	8015dfa <__multiply+0x3e>
 8015e3e:	9b01      	ldr	r3, [sp, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	b298      	uxth	r0, r3
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d01c      	beq.n	8015e82 <__multiply+0xc6>
 8015e48:	0015      	movs	r5, r2
 8015e4a:	2600      	movs	r6, #0
 8015e4c:	9f03      	ldr	r7, [sp, #12]
 8015e4e:	cf02      	ldmia	r7!, {r1}
 8015e50:	682c      	ldr	r4, [r5, #0]
 8015e52:	b28b      	uxth	r3, r1
 8015e54:	4343      	muls	r3, r0
 8015e56:	0c09      	lsrs	r1, r1, #16
 8015e58:	4341      	muls	r1, r0
 8015e5a:	b2a4      	uxth	r4, r4
 8015e5c:	191b      	adds	r3, r3, r4
 8015e5e:	199b      	adds	r3, r3, r6
 8015e60:	000e      	movs	r6, r1
 8015e62:	6829      	ldr	r1, [r5, #0]
 8015e64:	9506      	str	r5, [sp, #24]
 8015e66:	0c09      	lsrs	r1, r1, #16
 8015e68:	1871      	adds	r1, r6, r1
 8015e6a:	0c1e      	lsrs	r6, r3, #16
 8015e6c:	1989      	adds	r1, r1, r6
 8015e6e:	0c0e      	lsrs	r6, r1, #16
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	0409      	lsls	r1, r1, #16
 8015e74:	430b      	orrs	r3, r1
 8015e76:	c508      	stmia	r5!, {r3}
 8015e78:	9b05      	ldr	r3, [sp, #20]
 8015e7a:	42bb      	cmp	r3, r7
 8015e7c:	d8e7      	bhi.n	8015e4e <__multiply+0x92>
 8015e7e:	9b06      	ldr	r3, [sp, #24]
 8015e80:	605e      	str	r6, [r3, #4]
 8015e82:	9b01      	ldr	r3, [sp, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	0c1d      	lsrs	r5, r3, #16
 8015e88:	d01e      	beq.n	8015ec8 <__multiply+0x10c>
 8015e8a:	0010      	movs	r0, r2
 8015e8c:	2700      	movs	r7, #0
 8015e8e:	6813      	ldr	r3, [r2, #0]
 8015e90:	9e03      	ldr	r6, [sp, #12]
 8015e92:	6831      	ldr	r1, [r6, #0]
 8015e94:	6804      	ldr	r4, [r0, #0]
 8015e96:	b289      	uxth	r1, r1
 8015e98:	4369      	muls	r1, r5
 8015e9a:	0c24      	lsrs	r4, r4, #16
 8015e9c:	1909      	adds	r1, r1, r4
 8015e9e:	19c9      	adds	r1, r1, r7
 8015ea0:	040f      	lsls	r7, r1, #16
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	433b      	orrs	r3, r7
 8015ea6:	6003      	str	r3, [r0, #0]
 8015ea8:	ce80      	ldmia	r6!, {r7}
 8015eaa:	6843      	ldr	r3, [r0, #4]
 8015eac:	0c3f      	lsrs	r7, r7, #16
 8015eae:	436f      	muls	r7, r5
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	18fb      	adds	r3, r7, r3
 8015eb4:	0c09      	lsrs	r1, r1, #16
 8015eb6:	185b      	adds	r3, r3, r1
 8015eb8:	9905      	ldr	r1, [sp, #20]
 8015eba:	9006      	str	r0, [sp, #24]
 8015ebc:	0c1f      	lsrs	r7, r3, #16
 8015ebe:	3004      	adds	r0, #4
 8015ec0:	42b1      	cmp	r1, r6
 8015ec2:	d8e6      	bhi.n	8015e92 <__multiply+0xd6>
 8015ec4:	9906      	ldr	r1, [sp, #24]
 8015ec6:	604b      	str	r3, [r1, #4]
 8015ec8:	9b01      	ldr	r3, [sp, #4]
 8015eca:	3204      	adds	r2, #4
 8015ecc:	3304      	adds	r3, #4
 8015ece:	9301      	str	r3, [sp, #4]
 8015ed0:	e79f      	b.n	8015e12 <__multiply+0x56>
 8015ed2:	9b02      	ldr	r3, [sp, #8]
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	9302      	str	r3, [sp, #8]
 8015ed8:	e79f      	b.n	8015e1a <__multiply+0x5e>
	...

08015edc <__pow5mult>:
 8015edc:	2303      	movs	r3, #3
 8015ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ee0:	4013      	ands	r3, r2
 8015ee2:	0005      	movs	r5, r0
 8015ee4:	000e      	movs	r6, r1
 8015ee6:	0014      	movs	r4, r2
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d008      	beq.n	8015efe <__pow5mult+0x22>
 8015eec:	4922      	ldr	r1, [pc, #136]	; (8015f78 <__pow5mult+0x9c>)
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	009a      	lsls	r2, r3, #2
 8015ef2:	5852      	ldr	r2, [r2, r1]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	0031      	movs	r1, r6
 8015ef8:	f7ff fe92 	bl	8015c20 <__multadd>
 8015efc:	0006      	movs	r6, r0
 8015efe:	10a3      	asrs	r3, r4, #2
 8015f00:	9301      	str	r3, [sp, #4]
 8015f02:	d036      	beq.n	8015f72 <__pow5mult+0x96>
 8015f04:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8015f06:	2c00      	cmp	r4, #0
 8015f08:	d107      	bne.n	8015f1a <__pow5mult+0x3e>
 8015f0a:	2010      	movs	r0, #16
 8015f0c:	f7fc ff04 	bl	8012d18 <malloc>
 8015f10:	6268      	str	r0, [r5, #36]	; 0x24
 8015f12:	6044      	str	r4, [r0, #4]
 8015f14:	6084      	str	r4, [r0, #8]
 8015f16:	6004      	str	r4, [r0, #0]
 8015f18:	60c4      	str	r4, [r0, #12]
 8015f1a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8015f1c:	68bc      	ldr	r4, [r7, #8]
 8015f1e:	2c00      	cmp	r4, #0
 8015f20:	d107      	bne.n	8015f32 <__pow5mult+0x56>
 8015f22:	4916      	ldr	r1, [pc, #88]	; (8015f7c <__pow5mult+0xa0>)
 8015f24:	0028      	movs	r0, r5
 8015f26:	f7ff ff40 	bl	8015daa <__i2b>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	0004      	movs	r4, r0
 8015f2e:	60b8      	str	r0, [r7, #8]
 8015f30:	6003      	str	r3, [r0, #0]
 8015f32:	2201      	movs	r2, #1
 8015f34:	9b01      	ldr	r3, [sp, #4]
 8015f36:	4213      	tst	r3, r2
 8015f38:	d00a      	beq.n	8015f50 <__pow5mult+0x74>
 8015f3a:	0031      	movs	r1, r6
 8015f3c:	0022      	movs	r2, r4
 8015f3e:	0028      	movs	r0, r5
 8015f40:	f7ff ff3c 	bl	8015dbc <__multiply>
 8015f44:	0007      	movs	r7, r0
 8015f46:	0031      	movs	r1, r6
 8015f48:	0028      	movs	r0, r5
 8015f4a:	f7ff fe50 	bl	8015bee <_Bfree>
 8015f4e:	003e      	movs	r6, r7
 8015f50:	9b01      	ldr	r3, [sp, #4]
 8015f52:	105b      	asrs	r3, r3, #1
 8015f54:	9301      	str	r3, [sp, #4]
 8015f56:	d00c      	beq.n	8015f72 <__pow5mult+0x96>
 8015f58:	6820      	ldr	r0, [r4, #0]
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d107      	bne.n	8015f6e <__pow5mult+0x92>
 8015f5e:	0022      	movs	r2, r4
 8015f60:	0021      	movs	r1, r4
 8015f62:	0028      	movs	r0, r5
 8015f64:	f7ff ff2a 	bl	8015dbc <__multiply>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	6020      	str	r0, [r4, #0]
 8015f6c:	6003      	str	r3, [r0, #0]
 8015f6e:	0004      	movs	r4, r0
 8015f70:	e7df      	b.n	8015f32 <__pow5mult+0x56>
 8015f72:	0030      	movs	r0, r6
 8015f74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015f76:	46c0      	nop			; (mov r8, r8)
 8015f78:	08019a60 	.word	0x08019a60
 8015f7c:	00000271 	.word	0x00000271

08015f80 <__lshift>:
 8015f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f82:	000d      	movs	r5, r1
 8015f84:	0017      	movs	r7, r2
 8015f86:	692b      	ldr	r3, [r5, #16]
 8015f88:	1154      	asrs	r4, r2, #5
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	18e3      	adds	r3, r4, r3
 8015f8e:	9301      	str	r3, [sp, #4]
 8015f90:	3301      	adds	r3, #1
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	6849      	ldr	r1, [r1, #4]
 8015f96:	68ab      	ldr	r3, [r5, #8]
 8015f98:	9002      	str	r0, [sp, #8]
 8015f9a:	9a00      	ldr	r2, [sp, #0]
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	db35      	blt.n	801600c <__lshift+0x8c>
 8015fa0:	9802      	ldr	r0, [sp, #8]
 8015fa2:	f7ff fdec 	bl	8015b7e <_Balloc>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	0002      	movs	r2, r0
 8015faa:	0006      	movs	r6, r0
 8015fac:	0019      	movs	r1, r3
 8015fae:	3214      	adds	r2, #20
 8015fb0:	42a3      	cmp	r3, r4
 8015fb2:	db2e      	blt.n	8016012 <__lshift+0x92>
 8015fb4:	43e3      	mvns	r3, r4
 8015fb6:	17db      	asrs	r3, r3, #31
 8015fb8:	401c      	ands	r4, r3
 8015fba:	002b      	movs	r3, r5
 8015fbc:	00a4      	lsls	r4, r4, #2
 8015fbe:	1914      	adds	r4, r2, r4
 8015fc0:	692a      	ldr	r2, [r5, #16]
 8015fc2:	3314      	adds	r3, #20
 8015fc4:	0092      	lsls	r2, r2, #2
 8015fc6:	189a      	adds	r2, r3, r2
 8015fc8:	4694      	mov	ip, r2
 8015fca:	221f      	movs	r2, #31
 8015fcc:	4017      	ands	r7, r2
 8015fce:	d024      	beq.n	801601a <__lshift+0x9a>
 8015fd0:	3201      	adds	r2, #1
 8015fd2:	1bd2      	subs	r2, r2, r7
 8015fd4:	9203      	str	r2, [sp, #12]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	6819      	ldr	r1, [r3, #0]
 8015fda:	0020      	movs	r0, r4
 8015fdc:	40b9      	lsls	r1, r7
 8015fde:	430a      	orrs	r2, r1
 8015fe0:	c404      	stmia	r4!, {r2}
 8015fe2:	cb04      	ldmia	r3!, {r2}
 8015fe4:	9903      	ldr	r1, [sp, #12]
 8015fe6:	40ca      	lsrs	r2, r1
 8015fe8:	459c      	cmp	ip, r3
 8015fea:	d8f5      	bhi.n	8015fd8 <__lshift+0x58>
 8015fec:	6042      	str	r2, [r0, #4]
 8015fee:	2a00      	cmp	r2, #0
 8015ff0:	d002      	beq.n	8015ff8 <__lshift+0x78>
 8015ff2:	9b01      	ldr	r3, [sp, #4]
 8015ff4:	3302      	adds	r3, #2
 8015ff6:	9300      	str	r3, [sp, #0]
 8015ff8:	9b00      	ldr	r3, [sp, #0]
 8015ffa:	9802      	ldr	r0, [sp, #8]
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	6133      	str	r3, [r6, #16]
 8016000:	0029      	movs	r1, r5
 8016002:	f7ff fdf4 	bl	8015bee <_Bfree>
 8016006:	0030      	movs	r0, r6
 8016008:	b005      	add	sp, #20
 801600a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801600c:	3101      	adds	r1, #1
 801600e:	005b      	lsls	r3, r3, #1
 8016010:	e7c3      	b.n	8015f9a <__lshift+0x1a>
 8016012:	0098      	lsls	r0, r3, #2
 8016014:	5011      	str	r1, [r2, r0]
 8016016:	3301      	adds	r3, #1
 8016018:	e7ca      	b.n	8015fb0 <__lshift+0x30>
 801601a:	cb04      	ldmia	r3!, {r2}
 801601c:	c404      	stmia	r4!, {r2}
 801601e:	459c      	cmp	ip, r3
 8016020:	d8fb      	bhi.n	801601a <__lshift+0x9a>
 8016022:	e7e9      	b.n	8015ff8 <__lshift+0x78>

08016024 <__mcmp>:
 8016024:	690a      	ldr	r2, [r1, #16]
 8016026:	6903      	ldr	r3, [r0, #16]
 8016028:	b530      	push	{r4, r5, lr}
 801602a:	1a9b      	subs	r3, r3, r2
 801602c:	d10d      	bne.n	801604a <__mcmp+0x26>
 801602e:	0092      	lsls	r2, r2, #2
 8016030:	3014      	adds	r0, #20
 8016032:	3114      	adds	r1, #20
 8016034:	1884      	adds	r4, r0, r2
 8016036:	1889      	adds	r1, r1, r2
 8016038:	3c04      	subs	r4, #4
 801603a:	3904      	subs	r1, #4
 801603c:	6825      	ldr	r5, [r4, #0]
 801603e:	680a      	ldr	r2, [r1, #0]
 8016040:	4295      	cmp	r5, r2
 8016042:	d004      	beq.n	801604e <__mcmp+0x2a>
 8016044:	2301      	movs	r3, #1
 8016046:	4295      	cmp	r5, r2
 8016048:	d304      	bcc.n	8016054 <__mcmp+0x30>
 801604a:	0018      	movs	r0, r3
 801604c:	bd30      	pop	{r4, r5, pc}
 801604e:	42a0      	cmp	r0, r4
 8016050:	d3f2      	bcc.n	8016038 <__mcmp+0x14>
 8016052:	e7fa      	b.n	801604a <__mcmp+0x26>
 8016054:	425b      	negs	r3, r3
 8016056:	e7f8      	b.n	801604a <__mcmp+0x26>

08016058 <__mdiff>:
 8016058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801605a:	000d      	movs	r5, r1
 801605c:	b085      	sub	sp, #20
 801605e:	0007      	movs	r7, r0
 8016060:	0011      	movs	r1, r2
 8016062:	0028      	movs	r0, r5
 8016064:	0014      	movs	r4, r2
 8016066:	f7ff ffdd 	bl	8016024 <__mcmp>
 801606a:	1e06      	subs	r6, r0, #0
 801606c:	d108      	bne.n	8016080 <__mdiff+0x28>
 801606e:	0001      	movs	r1, r0
 8016070:	0038      	movs	r0, r7
 8016072:	f7ff fd84 	bl	8015b7e <_Balloc>
 8016076:	2301      	movs	r3, #1
 8016078:	6146      	str	r6, [r0, #20]
 801607a:	6103      	str	r3, [r0, #16]
 801607c:	b005      	add	sp, #20
 801607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016080:	2301      	movs	r3, #1
 8016082:	9301      	str	r3, [sp, #4]
 8016084:	2800      	cmp	r0, #0
 8016086:	db04      	blt.n	8016092 <__mdiff+0x3a>
 8016088:	0023      	movs	r3, r4
 801608a:	002c      	movs	r4, r5
 801608c:	001d      	movs	r5, r3
 801608e:	2300      	movs	r3, #0
 8016090:	9301      	str	r3, [sp, #4]
 8016092:	6861      	ldr	r1, [r4, #4]
 8016094:	0038      	movs	r0, r7
 8016096:	f7ff fd72 	bl	8015b7e <_Balloc>
 801609a:	002f      	movs	r7, r5
 801609c:	2200      	movs	r2, #0
 801609e:	9b01      	ldr	r3, [sp, #4]
 80160a0:	6926      	ldr	r6, [r4, #16]
 80160a2:	60c3      	str	r3, [r0, #12]
 80160a4:	3414      	adds	r4, #20
 80160a6:	00b3      	lsls	r3, r6, #2
 80160a8:	18e3      	adds	r3, r4, r3
 80160aa:	9302      	str	r3, [sp, #8]
 80160ac:	692b      	ldr	r3, [r5, #16]
 80160ae:	3714      	adds	r7, #20
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	18fb      	adds	r3, r7, r3
 80160b4:	9303      	str	r3, [sp, #12]
 80160b6:	0003      	movs	r3, r0
 80160b8:	4694      	mov	ip, r2
 80160ba:	3314      	adds	r3, #20
 80160bc:	cc20      	ldmia	r4!, {r5}
 80160be:	cf04      	ldmia	r7!, {r2}
 80160c0:	9201      	str	r2, [sp, #4]
 80160c2:	b2aa      	uxth	r2, r5
 80160c4:	4494      	add	ip, r2
 80160c6:	466a      	mov	r2, sp
 80160c8:	4661      	mov	r1, ip
 80160ca:	8892      	ldrh	r2, [r2, #4]
 80160cc:	0c2d      	lsrs	r5, r5, #16
 80160ce:	1a8a      	subs	r2, r1, r2
 80160d0:	9901      	ldr	r1, [sp, #4]
 80160d2:	0c09      	lsrs	r1, r1, #16
 80160d4:	1a69      	subs	r1, r5, r1
 80160d6:	1415      	asrs	r5, r2, #16
 80160d8:	1949      	adds	r1, r1, r5
 80160da:	140d      	asrs	r5, r1, #16
 80160dc:	b292      	uxth	r2, r2
 80160de:	0409      	lsls	r1, r1, #16
 80160e0:	430a      	orrs	r2, r1
 80160e2:	601a      	str	r2, [r3, #0]
 80160e4:	9a03      	ldr	r2, [sp, #12]
 80160e6:	46ac      	mov	ip, r5
 80160e8:	3304      	adds	r3, #4
 80160ea:	42ba      	cmp	r2, r7
 80160ec:	d8e6      	bhi.n	80160bc <__mdiff+0x64>
 80160ee:	9902      	ldr	r1, [sp, #8]
 80160f0:	001a      	movs	r2, r3
 80160f2:	428c      	cmp	r4, r1
 80160f4:	d305      	bcc.n	8016102 <__mdiff+0xaa>
 80160f6:	3a04      	subs	r2, #4
 80160f8:	6813      	ldr	r3, [r2, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00e      	beq.n	801611c <__mdiff+0xc4>
 80160fe:	6106      	str	r6, [r0, #16]
 8016100:	e7bc      	b.n	801607c <__mdiff+0x24>
 8016102:	cc04      	ldmia	r4!, {r2}
 8016104:	b291      	uxth	r1, r2
 8016106:	4461      	add	r1, ip
 8016108:	140d      	asrs	r5, r1, #16
 801610a:	0c12      	lsrs	r2, r2, #16
 801610c:	1952      	adds	r2, r2, r5
 801610e:	1415      	asrs	r5, r2, #16
 8016110:	b289      	uxth	r1, r1
 8016112:	0412      	lsls	r2, r2, #16
 8016114:	430a      	orrs	r2, r1
 8016116:	46ac      	mov	ip, r5
 8016118:	c304      	stmia	r3!, {r2}
 801611a:	e7e8      	b.n	80160ee <__mdiff+0x96>
 801611c:	3e01      	subs	r6, #1
 801611e:	e7ea      	b.n	80160f6 <__mdiff+0x9e>

08016120 <__ulp>:
 8016120:	000b      	movs	r3, r1
 8016122:	4910      	ldr	r1, [pc, #64]	; (8016164 <__ulp+0x44>)
 8016124:	b510      	push	{r4, lr}
 8016126:	4019      	ands	r1, r3
 8016128:	4b0f      	ldr	r3, [pc, #60]	; (8016168 <__ulp+0x48>)
 801612a:	18c9      	adds	r1, r1, r3
 801612c:	2900      	cmp	r1, #0
 801612e:	dd04      	ble.n	801613a <__ulp+0x1a>
 8016130:	2200      	movs	r2, #0
 8016132:	000b      	movs	r3, r1
 8016134:	0010      	movs	r0, r2
 8016136:	0019      	movs	r1, r3
 8016138:	bd10      	pop	{r4, pc}
 801613a:	4249      	negs	r1, r1
 801613c:	1509      	asrs	r1, r1, #20
 801613e:	2200      	movs	r2, #0
 8016140:	2300      	movs	r3, #0
 8016142:	2913      	cmp	r1, #19
 8016144:	dc04      	bgt.n	8016150 <__ulp+0x30>
 8016146:	2080      	movs	r0, #128	; 0x80
 8016148:	0300      	lsls	r0, r0, #12
 801614a:	4108      	asrs	r0, r1
 801614c:	0003      	movs	r3, r0
 801614e:	e7f1      	b.n	8016134 <__ulp+0x14>
 8016150:	3914      	subs	r1, #20
 8016152:	2001      	movs	r0, #1
 8016154:	291e      	cmp	r1, #30
 8016156:	dc02      	bgt.n	801615e <__ulp+0x3e>
 8016158:	241f      	movs	r4, #31
 801615a:	1a61      	subs	r1, r4, r1
 801615c:	4088      	lsls	r0, r1
 801615e:	0002      	movs	r2, r0
 8016160:	e7e8      	b.n	8016134 <__ulp+0x14>
 8016162:	46c0      	nop			; (mov r8, r8)
 8016164:	7ff00000 	.word	0x7ff00000
 8016168:	fcc00000 	.word	0xfcc00000

0801616c <__b2d>:
 801616c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801616e:	0006      	movs	r6, r0
 8016170:	6903      	ldr	r3, [r0, #16]
 8016172:	3614      	adds	r6, #20
 8016174:	009b      	lsls	r3, r3, #2
 8016176:	18f3      	adds	r3, r6, r3
 8016178:	1f1d      	subs	r5, r3, #4
 801617a:	682c      	ldr	r4, [r5, #0]
 801617c:	000f      	movs	r7, r1
 801617e:	0020      	movs	r0, r4
 8016180:	9301      	str	r3, [sp, #4]
 8016182:	f7ff fdc9 	bl	8015d18 <__hi0bits>
 8016186:	2320      	movs	r3, #32
 8016188:	1a1b      	subs	r3, r3, r0
 801618a:	603b      	str	r3, [r7, #0]
 801618c:	491c      	ldr	r1, [pc, #112]	; (8016200 <__b2d+0x94>)
 801618e:	280a      	cmp	r0, #10
 8016190:	dc16      	bgt.n	80161c0 <__b2d+0x54>
 8016192:	230b      	movs	r3, #11
 8016194:	0027      	movs	r7, r4
 8016196:	1a1b      	subs	r3, r3, r0
 8016198:	40df      	lsrs	r7, r3
 801619a:	4339      	orrs	r1, r7
 801619c:	469c      	mov	ip, r3
 801619e:	000b      	movs	r3, r1
 80161a0:	2100      	movs	r1, #0
 80161a2:	42ae      	cmp	r6, r5
 80161a4:	d202      	bcs.n	80161ac <__b2d+0x40>
 80161a6:	9901      	ldr	r1, [sp, #4]
 80161a8:	3908      	subs	r1, #8
 80161aa:	6809      	ldr	r1, [r1, #0]
 80161ac:	3015      	adds	r0, #21
 80161ae:	4084      	lsls	r4, r0
 80161b0:	4660      	mov	r0, ip
 80161b2:	40c1      	lsrs	r1, r0
 80161b4:	430c      	orrs	r4, r1
 80161b6:	0022      	movs	r2, r4
 80161b8:	0010      	movs	r0, r2
 80161ba:	0019      	movs	r1, r3
 80161bc:	b003      	add	sp, #12
 80161be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c0:	2700      	movs	r7, #0
 80161c2:	42ae      	cmp	r6, r5
 80161c4:	d202      	bcs.n	80161cc <__b2d+0x60>
 80161c6:	9d01      	ldr	r5, [sp, #4]
 80161c8:	3d08      	subs	r5, #8
 80161ca:	682f      	ldr	r7, [r5, #0]
 80161cc:	380b      	subs	r0, #11
 80161ce:	4684      	mov	ip, r0
 80161d0:	1e03      	subs	r3, r0, #0
 80161d2:	d012      	beq.n	80161fa <__b2d+0x8e>
 80161d4:	409c      	lsls	r4, r3
 80161d6:	2020      	movs	r0, #32
 80161d8:	4321      	orrs	r1, r4
 80161da:	003c      	movs	r4, r7
 80161dc:	1ac0      	subs	r0, r0, r3
 80161de:	40c4      	lsrs	r4, r0
 80161e0:	4321      	orrs	r1, r4
 80161e2:	000b      	movs	r3, r1
 80161e4:	2100      	movs	r1, #0
 80161e6:	42b5      	cmp	r5, r6
 80161e8:	d901      	bls.n	80161ee <__b2d+0x82>
 80161ea:	3d04      	subs	r5, #4
 80161ec:	6829      	ldr	r1, [r5, #0]
 80161ee:	4664      	mov	r4, ip
 80161f0:	40c1      	lsrs	r1, r0
 80161f2:	40a7      	lsls	r7, r4
 80161f4:	430f      	orrs	r7, r1
 80161f6:	003a      	movs	r2, r7
 80161f8:	e7de      	b.n	80161b8 <__b2d+0x4c>
 80161fa:	4321      	orrs	r1, r4
 80161fc:	000b      	movs	r3, r1
 80161fe:	e7fa      	b.n	80161f6 <__b2d+0x8a>
 8016200:	3ff00000 	.word	0x3ff00000

08016204 <__d2b>:
 8016204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016206:	001d      	movs	r5, r3
 8016208:	2101      	movs	r1, #1
 801620a:	0014      	movs	r4, r2
 801620c:	9f08      	ldr	r7, [sp, #32]
 801620e:	f7ff fcb6 	bl	8015b7e <_Balloc>
 8016212:	032b      	lsls	r3, r5, #12
 8016214:	006d      	lsls	r5, r5, #1
 8016216:	0006      	movs	r6, r0
 8016218:	0b1b      	lsrs	r3, r3, #12
 801621a:	0d6d      	lsrs	r5, r5, #21
 801621c:	d124      	bne.n	8016268 <__d2b+0x64>
 801621e:	9301      	str	r3, [sp, #4]
 8016220:	2c00      	cmp	r4, #0
 8016222:	d027      	beq.n	8016274 <__d2b+0x70>
 8016224:	4668      	mov	r0, sp
 8016226:	9400      	str	r4, [sp, #0]
 8016228:	f7ff fd90 	bl	8015d4c <__lo0bits>
 801622c:	9c00      	ldr	r4, [sp, #0]
 801622e:	2800      	cmp	r0, #0
 8016230:	d01e      	beq.n	8016270 <__d2b+0x6c>
 8016232:	9b01      	ldr	r3, [sp, #4]
 8016234:	2120      	movs	r1, #32
 8016236:	001a      	movs	r2, r3
 8016238:	1a09      	subs	r1, r1, r0
 801623a:	408a      	lsls	r2, r1
 801623c:	40c3      	lsrs	r3, r0
 801623e:	4322      	orrs	r2, r4
 8016240:	6172      	str	r2, [r6, #20]
 8016242:	9301      	str	r3, [sp, #4]
 8016244:	9c01      	ldr	r4, [sp, #4]
 8016246:	61b4      	str	r4, [r6, #24]
 8016248:	1e63      	subs	r3, r4, #1
 801624a:	419c      	sbcs	r4, r3
 801624c:	3401      	adds	r4, #1
 801624e:	6134      	str	r4, [r6, #16]
 8016250:	2d00      	cmp	r5, #0
 8016252:	d018      	beq.n	8016286 <__d2b+0x82>
 8016254:	4b12      	ldr	r3, [pc, #72]	; (80162a0 <__d2b+0x9c>)
 8016256:	18ed      	adds	r5, r5, r3
 8016258:	2335      	movs	r3, #53	; 0x35
 801625a:	182d      	adds	r5, r5, r0
 801625c:	603d      	str	r5, [r7, #0]
 801625e:	1a18      	subs	r0, r3, r0
 8016260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016262:	6018      	str	r0, [r3, #0]
 8016264:	0030      	movs	r0, r6
 8016266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016268:	2280      	movs	r2, #128	; 0x80
 801626a:	0352      	lsls	r2, r2, #13
 801626c:	4313      	orrs	r3, r2
 801626e:	e7d6      	b.n	801621e <__d2b+0x1a>
 8016270:	6174      	str	r4, [r6, #20]
 8016272:	e7e7      	b.n	8016244 <__d2b+0x40>
 8016274:	a801      	add	r0, sp, #4
 8016276:	f7ff fd69 	bl	8015d4c <__lo0bits>
 801627a:	2401      	movs	r4, #1
 801627c:	9b01      	ldr	r3, [sp, #4]
 801627e:	6134      	str	r4, [r6, #16]
 8016280:	6173      	str	r3, [r6, #20]
 8016282:	3020      	adds	r0, #32
 8016284:	e7e4      	b.n	8016250 <__d2b+0x4c>
 8016286:	4b07      	ldr	r3, [pc, #28]	; (80162a4 <__d2b+0xa0>)
 8016288:	18c0      	adds	r0, r0, r3
 801628a:	4b07      	ldr	r3, [pc, #28]	; (80162a8 <__d2b+0xa4>)
 801628c:	6038      	str	r0, [r7, #0]
 801628e:	18e3      	adds	r3, r4, r3
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	18f3      	adds	r3, r6, r3
 8016294:	6958      	ldr	r0, [r3, #20]
 8016296:	f7ff fd3f 	bl	8015d18 <__hi0bits>
 801629a:	0164      	lsls	r4, r4, #5
 801629c:	1a20      	subs	r0, r4, r0
 801629e:	e7df      	b.n	8016260 <__d2b+0x5c>
 80162a0:	fffffbcd 	.word	0xfffffbcd
 80162a4:	fffffbce 	.word	0xfffffbce
 80162a8:	3fffffff 	.word	0x3fffffff

080162ac <__ratio>:
 80162ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ae:	b085      	sub	sp, #20
 80162b0:	000f      	movs	r7, r1
 80162b2:	a902      	add	r1, sp, #8
 80162b4:	0006      	movs	r6, r0
 80162b6:	f7ff ff59 	bl	801616c <__b2d>
 80162ba:	0004      	movs	r4, r0
 80162bc:	000d      	movs	r5, r1
 80162be:	0038      	movs	r0, r7
 80162c0:	a903      	add	r1, sp, #12
 80162c2:	9400      	str	r4, [sp, #0]
 80162c4:	9501      	str	r5, [sp, #4]
 80162c6:	f7ff ff51 	bl	801616c <__b2d>
 80162ca:	6936      	ldr	r6, [r6, #16]
 80162cc:	693f      	ldr	r7, [r7, #16]
 80162ce:	0002      	movs	r2, r0
 80162d0:	1bf7      	subs	r7, r6, r7
 80162d2:	017e      	lsls	r6, r7, #5
 80162d4:	46b4      	mov	ip, r6
 80162d6:	9f03      	ldr	r7, [sp, #12]
 80162d8:	9e02      	ldr	r6, [sp, #8]
 80162da:	000b      	movs	r3, r1
 80162dc:	1bf6      	subs	r6, r6, r7
 80162de:	4466      	add	r6, ip
 80162e0:	0537      	lsls	r7, r6, #20
 80162e2:	2e00      	cmp	r6, #0
 80162e4:	dd07      	ble.n	80162f6 <__ratio+0x4a>
 80162e6:	1979      	adds	r1, r7, r5
 80162e8:	9101      	str	r1, [sp, #4]
 80162ea:	9800      	ldr	r0, [sp, #0]
 80162ec:	9901      	ldr	r1, [sp, #4]
 80162ee:	f7eb f8ab 	bl	8001448 <__aeabi_ddiv>
 80162f2:	b005      	add	sp, #20
 80162f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162f6:	1bcb      	subs	r3, r1, r7
 80162f8:	e7f7      	b.n	80162ea <__ratio+0x3e>

080162fa <__copybits>:
 80162fa:	0013      	movs	r3, r2
 80162fc:	3901      	subs	r1, #1
 80162fe:	b510      	push	{r4, lr}
 8016300:	1149      	asrs	r1, r1, #5
 8016302:	6912      	ldr	r2, [r2, #16]
 8016304:	3101      	adds	r1, #1
 8016306:	0089      	lsls	r1, r1, #2
 8016308:	3314      	adds	r3, #20
 801630a:	0092      	lsls	r2, r2, #2
 801630c:	1841      	adds	r1, r0, r1
 801630e:	189a      	adds	r2, r3, r2
 8016310:	429a      	cmp	r2, r3
 8016312:	d803      	bhi.n	801631c <__copybits+0x22>
 8016314:	2300      	movs	r3, #0
 8016316:	4281      	cmp	r1, r0
 8016318:	d803      	bhi.n	8016322 <__copybits+0x28>
 801631a:	bd10      	pop	{r4, pc}
 801631c:	cb10      	ldmia	r3!, {r4}
 801631e:	c010      	stmia	r0!, {r4}
 8016320:	e7f6      	b.n	8016310 <__copybits+0x16>
 8016322:	c008      	stmia	r0!, {r3}
 8016324:	e7f7      	b.n	8016316 <__copybits+0x1c>

08016326 <__any_on>:
 8016326:	0002      	movs	r2, r0
 8016328:	6900      	ldr	r0, [r0, #16]
 801632a:	b510      	push	{r4, lr}
 801632c:	3214      	adds	r2, #20
 801632e:	114b      	asrs	r3, r1, #5
 8016330:	4298      	cmp	r0, r3
 8016332:	db12      	blt.n	801635a <__any_on+0x34>
 8016334:	dd0b      	ble.n	801634e <__any_on+0x28>
 8016336:	201f      	movs	r0, #31
 8016338:	4001      	ands	r1, r0
 801633a:	d008      	beq.n	801634e <__any_on+0x28>
 801633c:	0098      	lsls	r0, r3, #2
 801633e:	5884      	ldr	r4, [r0, r2]
 8016340:	0020      	movs	r0, r4
 8016342:	40c8      	lsrs	r0, r1
 8016344:	4088      	lsls	r0, r1
 8016346:	0001      	movs	r1, r0
 8016348:	2001      	movs	r0, #1
 801634a:	428c      	cmp	r4, r1
 801634c:	d104      	bne.n	8016358 <__any_on+0x32>
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	18d3      	adds	r3, r2, r3
 8016352:	4293      	cmp	r3, r2
 8016354:	d803      	bhi.n	801635e <__any_on+0x38>
 8016356:	2000      	movs	r0, #0
 8016358:	bd10      	pop	{r4, pc}
 801635a:	0003      	movs	r3, r0
 801635c:	e7f7      	b.n	801634e <__any_on+0x28>
 801635e:	3b04      	subs	r3, #4
 8016360:	6819      	ldr	r1, [r3, #0]
 8016362:	2900      	cmp	r1, #0
 8016364:	d0f5      	beq.n	8016352 <__any_on+0x2c>
 8016366:	2001      	movs	r0, #1
 8016368:	e7f6      	b.n	8016358 <__any_on+0x32>

0801636a <_calloc_r>:
 801636a:	434a      	muls	r2, r1
 801636c:	b570      	push	{r4, r5, r6, lr}
 801636e:	0011      	movs	r1, r2
 8016370:	0014      	movs	r4, r2
 8016372:	f7fc fd61 	bl	8012e38 <_malloc_r>
 8016376:	1e05      	subs	r5, r0, #0
 8016378:	d003      	beq.n	8016382 <_calloc_r+0x18>
 801637a:	0022      	movs	r2, r4
 801637c:	2100      	movs	r1, #0
 801637e:	f7fc fd09 	bl	8012d94 <memset>
 8016382:	0028      	movs	r0, r5
 8016384:	bd70      	pop	{r4, r5, r6, pc}

08016386 <_realloc_r>:
 8016386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016388:	0007      	movs	r7, r0
 801638a:	000d      	movs	r5, r1
 801638c:	0016      	movs	r6, r2
 801638e:	2900      	cmp	r1, #0
 8016390:	d105      	bne.n	801639e <_realloc_r+0x18>
 8016392:	0011      	movs	r1, r2
 8016394:	f7fc fd50 	bl	8012e38 <_malloc_r>
 8016398:	0004      	movs	r4, r0
 801639a:	0020      	movs	r0, r4
 801639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801639e:	2a00      	cmp	r2, #0
 80163a0:	d103      	bne.n	80163aa <_realloc_r+0x24>
 80163a2:	f7fc fcff 	bl	8012da4 <_free_r>
 80163a6:	0034      	movs	r4, r6
 80163a8:	e7f7      	b.n	801639a <_realloc_r+0x14>
 80163aa:	f000 f986 	bl	80166ba <_malloc_usable_size_r>
 80163ae:	002c      	movs	r4, r5
 80163b0:	42b0      	cmp	r0, r6
 80163b2:	d2f2      	bcs.n	801639a <_realloc_r+0x14>
 80163b4:	0031      	movs	r1, r6
 80163b6:	0038      	movs	r0, r7
 80163b8:	f7fc fd3e 	bl	8012e38 <_malloc_r>
 80163bc:	1e04      	subs	r4, r0, #0
 80163be:	d0ec      	beq.n	801639a <_realloc_r+0x14>
 80163c0:	0029      	movs	r1, r5
 80163c2:	0032      	movs	r2, r6
 80163c4:	f7fc fcdd 	bl	8012d82 <memcpy>
 80163c8:	0029      	movs	r1, r5
 80163ca:	0038      	movs	r0, r7
 80163cc:	f7fc fcea 	bl	8012da4 <_free_r>
 80163d0:	e7e3      	b.n	801639a <_realloc_r+0x14>
	...

080163d4 <__ssputs_r>:
 80163d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163d6:	688e      	ldr	r6, [r1, #8]
 80163d8:	b085      	sub	sp, #20
 80163da:	0007      	movs	r7, r0
 80163dc:	000c      	movs	r4, r1
 80163de:	9203      	str	r2, [sp, #12]
 80163e0:	9301      	str	r3, [sp, #4]
 80163e2:	429e      	cmp	r6, r3
 80163e4:	d83c      	bhi.n	8016460 <__ssputs_r+0x8c>
 80163e6:	2390      	movs	r3, #144	; 0x90
 80163e8:	898a      	ldrh	r2, [r1, #12]
 80163ea:	00db      	lsls	r3, r3, #3
 80163ec:	421a      	tst	r2, r3
 80163ee:	d034      	beq.n	801645a <__ssputs_r+0x86>
 80163f0:	2503      	movs	r5, #3
 80163f2:	6909      	ldr	r1, [r1, #16]
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	1a5b      	subs	r3, r3, r1
 80163f8:	9302      	str	r3, [sp, #8]
 80163fa:	6963      	ldr	r3, [r4, #20]
 80163fc:	9802      	ldr	r0, [sp, #8]
 80163fe:	435d      	muls	r5, r3
 8016400:	0feb      	lsrs	r3, r5, #31
 8016402:	195d      	adds	r5, r3, r5
 8016404:	9b01      	ldr	r3, [sp, #4]
 8016406:	106d      	asrs	r5, r5, #1
 8016408:	3301      	adds	r3, #1
 801640a:	181b      	adds	r3, r3, r0
 801640c:	42ab      	cmp	r3, r5
 801640e:	d900      	bls.n	8016412 <__ssputs_r+0x3e>
 8016410:	001d      	movs	r5, r3
 8016412:	0553      	lsls	r3, r2, #21
 8016414:	d532      	bpl.n	801647c <__ssputs_r+0xa8>
 8016416:	0029      	movs	r1, r5
 8016418:	0038      	movs	r0, r7
 801641a:	f7fc fd0d 	bl	8012e38 <_malloc_r>
 801641e:	1e06      	subs	r6, r0, #0
 8016420:	d109      	bne.n	8016436 <__ssputs_r+0x62>
 8016422:	230c      	movs	r3, #12
 8016424:	603b      	str	r3, [r7, #0]
 8016426:	2340      	movs	r3, #64	; 0x40
 8016428:	2001      	movs	r0, #1
 801642a:	89a2      	ldrh	r2, [r4, #12]
 801642c:	4240      	negs	r0, r0
 801642e:	4313      	orrs	r3, r2
 8016430:	81a3      	strh	r3, [r4, #12]
 8016432:	b005      	add	sp, #20
 8016434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016436:	9a02      	ldr	r2, [sp, #8]
 8016438:	6921      	ldr	r1, [r4, #16]
 801643a:	f7fc fca2 	bl	8012d82 <memcpy>
 801643e:	89a3      	ldrh	r3, [r4, #12]
 8016440:	4a14      	ldr	r2, [pc, #80]	; (8016494 <__ssputs_r+0xc0>)
 8016442:	401a      	ands	r2, r3
 8016444:	2380      	movs	r3, #128	; 0x80
 8016446:	4313      	orrs	r3, r2
 8016448:	81a3      	strh	r3, [r4, #12]
 801644a:	9b02      	ldr	r3, [sp, #8]
 801644c:	6126      	str	r6, [r4, #16]
 801644e:	18f6      	adds	r6, r6, r3
 8016450:	6026      	str	r6, [r4, #0]
 8016452:	6165      	str	r5, [r4, #20]
 8016454:	9e01      	ldr	r6, [sp, #4]
 8016456:	1aed      	subs	r5, r5, r3
 8016458:	60a5      	str	r5, [r4, #8]
 801645a:	9b01      	ldr	r3, [sp, #4]
 801645c:	429e      	cmp	r6, r3
 801645e:	d900      	bls.n	8016462 <__ssputs_r+0x8e>
 8016460:	9e01      	ldr	r6, [sp, #4]
 8016462:	0032      	movs	r2, r6
 8016464:	9903      	ldr	r1, [sp, #12]
 8016466:	6820      	ldr	r0, [r4, #0]
 8016468:	f000 f914 	bl	8016694 <memmove>
 801646c:	68a3      	ldr	r3, [r4, #8]
 801646e:	2000      	movs	r0, #0
 8016470:	1b9b      	subs	r3, r3, r6
 8016472:	60a3      	str	r3, [r4, #8]
 8016474:	6823      	ldr	r3, [r4, #0]
 8016476:	199e      	adds	r6, r3, r6
 8016478:	6026      	str	r6, [r4, #0]
 801647a:	e7da      	b.n	8016432 <__ssputs_r+0x5e>
 801647c:	002a      	movs	r2, r5
 801647e:	0038      	movs	r0, r7
 8016480:	f7ff ff81 	bl	8016386 <_realloc_r>
 8016484:	1e06      	subs	r6, r0, #0
 8016486:	d1e0      	bne.n	801644a <__ssputs_r+0x76>
 8016488:	6921      	ldr	r1, [r4, #16]
 801648a:	0038      	movs	r0, r7
 801648c:	f7fc fc8a 	bl	8012da4 <_free_r>
 8016490:	e7c7      	b.n	8016422 <__ssputs_r+0x4e>
 8016492:	46c0      	nop			; (mov r8, r8)
 8016494:	fffffb7f 	.word	0xfffffb7f

08016498 <_svfiprintf_r>:
 8016498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801649a:	b0a1      	sub	sp, #132	; 0x84
 801649c:	9003      	str	r0, [sp, #12]
 801649e:	001d      	movs	r5, r3
 80164a0:	898b      	ldrh	r3, [r1, #12]
 80164a2:	000f      	movs	r7, r1
 80164a4:	0016      	movs	r6, r2
 80164a6:	061b      	lsls	r3, r3, #24
 80164a8:	d511      	bpl.n	80164ce <_svfiprintf_r+0x36>
 80164aa:	690b      	ldr	r3, [r1, #16]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d10e      	bne.n	80164ce <_svfiprintf_r+0x36>
 80164b0:	2140      	movs	r1, #64	; 0x40
 80164b2:	f7fc fcc1 	bl	8012e38 <_malloc_r>
 80164b6:	6038      	str	r0, [r7, #0]
 80164b8:	6138      	str	r0, [r7, #16]
 80164ba:	2800      	cmp	r0, #0
 80164bc:	d105      	bne.n	80164ca <_svfiprintf_r+0x32>
 80164be:	230c      	movs	r3, #12
 80164c0:	9a03      	ldr	r2, [sp, #12]
 80164c2:	3801      	subs	r0, #1
 80164c4:	6013      	str	r3, [r2, #0]
 80164c6:	b021      	add	sp, #132	; 0x84
 80164c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ca:	2340      	movs	r3, #64	; 0x40
 80164cc:	617b      	str	r3, [r7, #20]
 80164ce:	2300      	movs	r3, #0
 80164d0:	ac08      	add	r4, sp, #32
 80164d2:	6163      	str	r3, [r4, #20]
 80164d4:	3320      	adds	r3, #32
 80164d6:	7663      	strb	r3, [r4, #25]
 80164d8:	3310      	adds	r3, #16
 80164da:	76a3      	strb	r3, [r4, #26]
 80164dc:	9507      	str	r5, [sp, #28]
 80164de:	0035      	movs	r5, r6
 80164e0:	782b      	ldrb	r3, [r5, #0]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d001      	beq.n	80164ea <_svfiprintf_r+0x52>
 80164e6:	2b25      	cmp	r3, #37	; 0x25
 80164e8:	d146      	bne.n	8016578 <_svfiprintf_r+0xe0>
 80164ea:	1bab      	subs	r3, r5, r6
 80164ec:	9305      	str	r3, [sp, #20]
 80164ee:	d00c      	beq.n	801650a <_svfiprintf_r+0x72>
 80164f0:	0032      	movs	r2, r6
 80164f2:	0039      	movs	r1, r7
 80164f4:	9803      	ldr	r0, [sp, #12]
 80164f6:	f7ff ff6d 	bl	80163d4 <__ssputs_r>
 80164fa:	1c43      	adds	r3, r0, #1
 80164fc:	d100      	bne.n	8016500 <_svfiprintf_r+0x68>
 80164fe:	e0ae      	b.n	801665e <_svfiprintf_r+0x1c6>
 8016500:	6962      	ldr	r2, [r4, #20]
 8016502:	9b05      	ldr	r3, [sp, #20]
 8016504:	4694      	mov	ip, r2
 8016506:	4463      	add	r3, ip
 8016508:	6163      	str	r3, [r4, #20]
 801650a:	782b      	ldrb	r3, [r5, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d100      	bne.n	8016512 <_svfiprintf_r+0x7a>
 8016510:	e0a5      	b.n	801665e <_svfiprintf_r+0x1c6>
 8016512:	2201      	movs	r2, #1
 8016514:	2300      	movs	r3, #0
 8016516:	4252      	negs	r2, r2
 8016518:	6062      	str	r2, [r4, #4]
 801651a:	a904      	add	r1, sp, #16
 801651c:	3254      	adds	r2, #84	; 0x54
 801651e:	1852      	adds	r2, r2, r1
 8016520:	1c6e      	adds	r6, r5, #1
 8016522:	6023      	str	r3, [r4, #0]
 8016524:	60e3      	str	r3, [r4, #12]
 8016526:	60a3      	str	r3, [r4, #8]
 8016528:	7013      	strb	r3, [r2, #0]
 801652a:	65a3      	str	r3, [r4, #88]	; 0x58
 801652c:	7831      	ldrb	r1, [r6, #0]
 801652e:	2205      	movs	r2, #5
 8016530:	4853      	ldr	r0, [pc, #332]	; (8016680 <_svfiprintf_r+0x1e8>)
 8016532:	f7ff fb17 	bl	8015b64 <memchr>
 8016536:	1c75      	adds	r5, r6, #1
 8016538:	2800      	cmp	r0, #0
 801653a:	d11f      	bne.n	801657c <_svfiprintf_r+0xe4>
 801653c:	6822      	ldr	r2, [r4, #0]
 801653e:	06d3      	lsls	r3, r2, #27
 8016540:	d504      	bpl.n	801654c <_svfiprintf_r+0xb4>
 8016542:	2353      	movs	r3, #83	; 0x53
 8016544:	a904      	add	r1, sp, #16
 8016546:	185b      	adds	r3, r3, r1
 8016548:	2120      	movs	r1, #32
 801654a:	7019      	strb	r1, [r3, #0]
 801654c:	0713      	lsls	r3, r2, #28
 801654e:	d504      	bpl.n	801655a <_svfiprintf_r+0xc2>
 8016550:	2353      	movs	r3, #83	; 0x53
 8016552:	a904      	add	r1, sp, #16
 8016554:	185b      	adds	r3, r3, r1
 8016556:	212b      	movs	r1, #43	; 0x2b
 8016558:	7019      	strb	r1, [r3, #0]
 801655a:	7833      	ldrb	r3, [r6, #0]
 801655c:	2b2a      	cmp	r3, #42	; 0x2a
 801655e:	d016      	beq.n	801658e <_svfiprintf_r+0xf6>
 8016560:	0035      	movs	r5, r6
 8016562:	2100      	movs	r1, #0
 8016564:	200a      	movs	r0, #10
 8016566:	68e3      	ldr	r3, [r4, #12]
 8016568:	782a      	ldrb	r2, [r5, #0]
 801656a:	1c6e      	adds	r6, r5, #1
 801656c:	3a30      	subs	r2, #48	; 0x30
 801656e:	2a09      	cmp	r2, #9
 8016570:	d94e      	bls.n	8016610 <_svfiprintf_r+0x178>
 8016572:	2900      	cmp	r1, #0
 8016574:	d018      	beq.n	80165a8 <_svfiprintf_r+0x110>
 8016576:	e010      	b.n	801659a <_svfiprintf_r+0x102>
 8016578:	3501      	adds	r5, #1
 801657a:	e7b1      	b.n	80164e0 <_svfiprintf_r+0x48>
 801657c:	4b40      	ldr	r3, [pc, #256]	; (8016680 <_svfiprintf_r+0x1e8>)
 801657e:	6822      	ldr	r2, [r4, #0]
 8016580:	1ac0      	subs	r0, r0, r3
 8016582:	2301      	movs	r3, #1
 8016584:	4083      	lsls	r3, r0
 8016586:	4313      	orrs	r3, r2
 8016588:	6023      	str	r3, [r4, #0]
 801658a:	002e      	movs	r6, r5
 801658c:	e7ce      	b.n	801652c <_svfiprintf_r+0x94>
 801658e:	9b07      	ldr	r3, [sp, #28]
 8016590:	1d19      	adds	r1, r3, #4
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	9107      	str	r1, [sp, #28]
 8016596:	2b00      	cmp	r3, #0
 8016598:	db01      	blt.n	801659e <_svfiprintf_r+0x106>
 801659a:	930b      	str	r3, [sp, #44]	; 0x2c
 801659c:	e004      	b.n	80165a8 <_svfiprintf_r+0x110>
 801659e:	425b      	negs	r3, r3
 80165a0:	60e3      	str	r3, [r4, #12]
 80165a2:	2302      	movs	r3, #2
 80165a4:	4313      	orrs	r3, r2
 80165a6:	6023      	str	r3, [r4, #0]
 80165a8:	782b      	ldrb	r3, [r5, #0]
 80165aa:	2b2e      	cmp	r3, #46	; 0x2e
 80165ac:	d10a      	bne.n	80165c4 <_svfiprintf_r+0x12c>
 80165ae:	786b      	ldrb	r3, [r5, #1]
 80165b0:	2b2a      	cmp	r3, #42	; 0x2a
 80165b2:	d135      	bne.n	8016620 <_svfiprintf_r+0x188>
 80165b4:	9b07      	ldr	r3, [sp, #28]
 80165b6:	3502      	adds	r5, #2
 80165b8:	1d1a      	adds	r2, r3, #4
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	9207      	str	r2, [sp, #28]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	db2b      	blt.n	801661a <_svfiprintf_r+0x182>
 80165c2:	9309      	str	r3, [sp, #36]	; 0x24
 80165c4:	4e2f      	ldr	r6, [pc, #188]	; (8016684 <_svfiprintf_r+0x1ec>)
 80165c6:	7829      	ldrb	r1, [r5, #0]
 80165c8:	2203      	movs	r2, #3
 80165ca:	0030      	movs	r0, r6
 80165cc:	f7ff faca 	bl	8015b64 <memchr>
 80165d0:	2800      	cmp	r0, #0
 80165d2:	d006      	beq.n	80165e2 <_svfiprintf_r+0x14a>
 80165d4:	2340      	movs	r3, #64	; 0x40
 80165d6:	1b80      	subs	r0, r0, r6
 80165d8:	4083      	lsls	r3, r0
 80165da:	6822      	ldr	r2, [r4, #0]
 80165dc:	3501      	adds	r5, #1
 80165de:	4313      	orrs	r3, r2
 80165e0:	6023      	str	r3, [r4, #0]
 80165e2:	7829      	ldrb	r1, [r5, #0]
 80165e4:	2206      	movs	r2, #6
 80165e6:	4828      	ldr	r0, [pc, #160]	; (8016688 <_svfiprintf_r+0x1f0>)
 80165e8:	1c6e      	adds	r6, r5, #1
 80165ea:	7621      	strb	r1, [r4, #24]
 80165ec:	f7ff faba 	bl	8015b64 <memchr>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	d03c      	beq.n	801666e <_svfiprintf_r+0x1d6>
 80165f4:	4b25      	ldr	r3, [pc, #148]	; (801668c <_svfiprintf_r+0x1f4>)
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d125      	bne.n	8016646 <_svfiprintf_r+0x1ae>
 80165fa:	2207      	movs	r2, #7
 80165fc:	9b07      	ldr	r3, [sp, #28]
 80165fe:	3307      	adds	r3, #7
 8016600:	4393      	bics	r3, r2
 8016602:	3308      	adds	r3, #8
 8016604:	9307      	str	r3, [sp, #28]
 8016606:	6963      	ldr	r3, [r4, #20]
 8016608:	9a04      	ldr	r2, [sp, #16]
 801660a:	189b      	adds	r3, r3, r2
 801660c:	6163      	str	r3, [r4, #20]
 801660e:	e766      	b.n	80164de <_svfiprintf_r+0x46>
 8016610:	4343      	muls	r3, r0
 8016612:	2101      	movs	r1, #1
 8016614:	189b      	adds	r3, r3, r2
 8016616:	0035      	movs	r5, r6
 8016618:	e7a6      	b.n	8016568 <_svfiprintf_r+0xd0>
 801661a:	2301      	movs	r3, #1
 801661c:	425b      	negs	r3, r3
 801661e:	e7d0      	b.n	80165c2 <_svfiprintf_r+0x12a>
 8016620:	2300      	movs	r3, #0
 8016622:	200a      	movs	r0, #10
 8016624:	001a      	movs	r2, r3
 8016626:	3501      	adds	r5, #1
 8016628:	6063      	str	r3, [r4, #4]
 801662a:	7829      	ldrb	r1, [r5, #0]
 801662c:	1c6e      	adds	r6, r5, #1
 801662e:	3930      	subs	r1, #48	; 0x30
 8016630:	2909      	cmp	r1, #9
 8016632:	d903      	bls.n	801663c <_svfiprintf_r+0x1a4>
 8016634:	2b00      	cmp	r3, #0
 8016636:	d0c5      	beq.n	80165c4 <_svfiprintf_r+0x12c>
 8016638:	9209      	str	r2, [sp, #36]	; 0x24
 801663a:	e7c3      	b.n	80165c4 <_svfiprintf_r+0x12c>
 801663c:	4342      	muls	r2, r0
 801663e:	2301      	movs	r3, #1
 8016640:	1852      	adds	r2, r2, r1
 8016642:	0035      	movs	r5, r6
 8016644:	e7f1      	b.n	801662a <_svfiprintf_r+0x192>
 8016646:	ab07      	add	r3, sp, #28
 8016648:	9300      	str	r3, [sp, #0]
 801664a:	003a      	movs	r2, r7
 801664c:	4b10      	ldr	r3, [pc, #64]	; (8016690 <_svfiprintf_r+0x1f8>)
 801664e:	0021      	movs	r1, r4
 8016650:	9803      	ldr	r0, [sp, #12]
 8016652:	f7fc fceb 	bl	801302c <_printf_float>
 8016656:	9004      	str	r0, [sp, #16]
 8016658:	9b04      	ldr	r3, [sp, #16]
 801665a:	3301      	adds	r3, #1
 801665c:	d1d3      	bne.n	8016606 <_svfiprintf_r+0x16e>
 801665e:	89bb      	ldrh	r3, [r7, #12]
 8016660:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016662:	065b      	lsls	r3, r3, #25
 8016664:	d400      	bmi.n	8016668 <_svfiprintf_r+0x1d0>
 8016666:	e72e      	b.n	80164c6 <_svfiprintf_r+0x2e>
 8016668:	2001      	movs	r0, #1
 801666a:	4240      	negs	r0, r0
 801666c:	e72b      	b.n	80164c6 <_svfiprintf_r+0x2e>
 801666e:	ab07      	add	r3, sp, #28
 8016670:	9300      	str	r3, [sp, #0]
 8016672:	003a      	movs	r2, r7
 8016674:	4b06      	ldr	r3, [pc, #24]	; (8016690 <_svfiprintf_r+0x1f8>)
 8016676:	0021      	movs	r1, r4
 8016678:	9803      	ldr	r0, [sp, #12]
 801667a:	f7fc ff91 	bl	80135a0 <_printf_i>
 801667e:	e7ea      	b.n	8016656 <_svfiprintf_r+0x1be>
 8016680:	08019a6c 	.word	0x08019a6c
 8016684:	08019a72 	.word	0x08019a72
 8016688:	08019a76 	.word	0x08019a76
 801668c:	0801302d 	.word	0x0801302d
 8016690:	080163d5 	.word	0x080163d5

08016694 <memmove>:
 8016694:	b510      	push	{r4, lr}
 8016696:	4288      	cmp	r0, r1
 8016698:	d902      	bls.n	80166a0 <memmove+0xc>
 801669a:	188b      	adds	r3, r1, r2
 801669c:	4298      	cmp	r0, r3
 801669e:	d303      	bcc.n	80166a8 <memmove+0x14>
 80166a0:	2300      	movs	r3, #0
 80166a2:	e007      	b.n	80166b4 <memmove+0x20>
 80166a4:	5c8b      	ldrb	r3, [r1, r2]
 80166a6:	5483      	strb	r3, [r0, r2]
 80166a8:	3a01      	subs	r2, #1
 80166aa:	d2fb      	bcs.n	80166a4 <memmove+0x10>
 80166ac:	bd10      	pop	{r4, pc}
 80166ae:	5ccc      	ldrb	r4, [r1, r3]
 80166b0:	54c4      	strb	r4, [r0, r3]
 80166b2:	3301      	adds	r3, #1
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d1fa      	bne.n	80166ae <memmove+0x1a>
 80166b8:	e7f8      	b.n	80166ac <memmove+0x18>

080166ba <_malloc_usable_size_r>:
 80166ba:	1f0b      	subs	r3, r1, #4
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	1f18      	subs	r0, r3, #4
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	da01      	bge.n	80166c8 <_malloc_usable_size_r+0xe>
 80166c4:	580b      	ldr	r3, [r1, r0]
 80166c6:	18c0      	adds	r0, r0, r3
 80166c8:	4770      	bx	lr
	...

080166cc <_sbrk>:
 80166cc:	4b05      	ldr	r3, [pc, #20]	; (80166e4 <_sbrk+0x18>)
 80166ce:	0002      	movs	r2, r0
 80166d0:	6819      	ldr	r1, [r3, #0]
 80166d2:	2900      	cmp	r1, #0
 80166d4:	d101      	bne.n	80166da <_sbrk+0xe>
 80166d6:	4904      	ldr	r1, [pc, #16]	; (80166e8 <_sbrk+0x1c>)
 80166d8:	6019      	str	r1, [r3, #0]
 80166da:	6818      	ldr	r0, [r3, #0]
 80166dc:	1882      	adds	r2, r0, r2
 80166de:	601a      	str	r2, [r3, #0]
 80166e0:	4770      	bx	lr
 80166e2:	46c0      	nop			; (mov r8, r8)
 80166e4:	20005a54 	.word	0x20005a54
 80166e8:	20006048 	.word	0x20006048

080166ec <_init>:
 80166ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ee:	46c0      	nop			; (mov r8, r8)
 80166f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166f2:	bc08      	pop	{r3}
 80166f4:	469e      	mov	lr, r3
 80166f6:	4770      	bx	lr

080166f8 <_fini>:
 80166f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166fa:	46c0      	nop			; (mov r8, r8)
 80166fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166fe:	bc08      	pop	{r3}
 8016700:	469e      	mov	lr, r3
 8016702:	4770      	bx	lr
